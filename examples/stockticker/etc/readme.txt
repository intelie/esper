==============
Esper Examples
==============

In order to compile and run the samples please follow the below instructions:

1. Make sure Java 1.6 or greater is installed and the JAVA_HOME environment variable is set

2. Open a console window and change directory to esper/examples/etc

3. Run "setenv.bat" (Windows) or "setenv.sh" (Unix) to verify your environment settings

4. Run "compile.bat" (Windows) or "compile.sh" (Unix) to compile the examples
   On Unix systems, make sure the PATH variable contains the current directory.

5. Now you are ready to run the examples. Some examples require mandatory parameters.

6. For details on the type of data generated by each simulator, please consult the example documentation in the documentation set.

The examples can produce lots of pretty detailed output. The logging level can be configured by changing the 
log4j.xml configuration file to DEBUG for more output or to INFO for less detailed output.


Samples description
===================

The 3-Transaction Challenge
---------------------------

	Run "run_txnsim.bat" (Windows) or "run_txnsim.sh" (Unix) for this example.
	The mandatory arguments are: <bucket_size> <num_transactions>
	
	Some suggested parameters:
		run_txnsim tiniest 100		// Bucket size of just 20 with only 100 transactions 
		run_txnsim small 100000		// Bucket size of 4999 with 100k transactions 
		run_txnsim large 1000000	// Bucket size of 49999 with 1M transactions
	
	Please see the documentation set on the type of data generated by this simulator.


The Market Data Feed Monitor
----------------------------

	Run "run_mktdatafeed.bat" (Windows) or "run_mktdatafeed.sh" (Unix) for this example.
	The mandatory arguments are: <number of threads> <rate drop probability percent> <number of seconds>
	
	Some suggested parameters:
		run_mktdatafeed.bat 1 20 60	// Starts 1 threads the send events for each feed in a loop 
									// There is a 20% chance that a random feed's rate drops to 60% of the target rate	
									// Runs the example for 60 seconds
		Note: Likely you will also see feed rate drop-offs as the VM garbage collection kicks in 

	Please see the documentation set on the type of data generated by this simulator.

	
The RFID Location Report Simulator
----------------------------------

	Run "run_rfid_sim.bat" (Windows) or "run_rfid_sim.sh" (Unix) for this example.
	
	Arguments are: <number of threads> <number of asset groups> <number of seconds to run>
		  number of threads: the number of threads sending events into the engine (e.g. 4)
		  number of asset groups: number of groups tracked (e.g. 1000)
		  number of seconds: the number of seconds the simulation runs (e.g. 60)

  	Some suggested parameters:
		run_rfid_sim.bat 4 1000 60

	Please see the documentation set on the type of data generated by this simulator.


The RFID GUI (Swing) Sample
----------------------------------

	Run "run_rfid_swing.bat" (Windows) or "run_rfid_swing.sh" (Unix) for this example.
	
	This example presents a Swing-based GUI that allows to drag-and-drop a set of RFID tags into 
	different zones. When tags split between zones, an alert is output to console.

	Please see the documentation set on the type of data generated by this simulator.


The AutoID RFID Reader Sample
----------------------------------

	Run "run_autoid.bat" (Windows) or "run_autoid.sh" (Unix) for this example.
	
	Arguments are: <numberOfEvents>
		numberOfEvents: the number of events to generate
	

JMS Server Shell and Server Shell Client
----------------------------------

	Start your JMS provider software. The properties file "servershell_config.properties" is used to point the JMS server shell to your 
	JMS provider. The server has been tested with Apache ActiveMQ and with Tibco Enterprise Messaging Service (EMS) (Copyright and TM Tibco).
	
	Run "run_servershell.bat" (Windows) or "run_servershell.sh" (Unix) to start the JMS server.
	
	In order to generate some traffic for the JMS server, use the server shell client to send messages and to remotely create a statement:	
	
	Run "run_servershellclient.bat" (Windows) or "run_servershellclient.sh" (Unix) to start the JMS server.
