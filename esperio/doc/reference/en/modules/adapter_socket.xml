<chapter id="adapter_socket">
    <title>The Socket Adapter</title>
    
    <para>
        This chapter discusses the EsperIO Socket adapter.
    </para>
    
	<para>
		The EsperIO Socket input adapter can be used to send events into an Esper engine instance via socket client, either as Java objects or as CSV name-value pair strings.
	</para>

    <sect1 id="adaptersocket-gettingstarted">
        <title>Getting Started</title>

		<para>
			You may configure the EsperIO Socket adapter either as part of your Esper configuration file in the plugin loader section or via the adapter API. Add the <literal>esperio-socket-version.jar</literal> file to your classpath. There are no other dependent jar files required.
		</para>
        
		<para>
			A sample adapter configuration file is provided in <literal>esperio-socket-sample-config.xml</literal> in the <literal>etc</literal> folder of the distribution. A configuration file must be valid according to schema <literal>esperio-socket-configuration-4-0.xsd</literal>.
		</para>

		<sect2 id="adaptersocket-gettingstarted-pluginloader">
			<title>Plugin Loader Configuration</title>
			
			<para>
				You may place the configuration XML directly into your Esper configuration file as the example below shows:
			</para>
			<programlisting><![CDATA[<esper-configuration>
  <plugin-loader name="EsperIOSocketAdapter" 
      class-name="com.espertech.esperio.socket.EsperIOSocketAdapterPlugin">
    <config-xml>	
      <esperio-socket-configuration>
	    <socket name="mysocketOne" port="7101" data="object"/>
	    <socket name="mysocketTwo" port="7102" data="csv"/>
      </esperio-socket-configuration>
    </config-xml>
  </plugin-loader>
</esper-configuration>]]></programlisting>		

			<para>
				Alternatively you can provide a URL in the Esper configuration file to point to your adapter configuration file:
			</para>
			<programlisting><![CDATA[<esper-configuration>
  <plugin-loader name="EsperIOSocketAdapter" 
      class-name="com.espertech.esperio.socket.EsperIOSocketAdapterPlugin">
      <init-arg name="esperio.socket.configuration.file" 
          value="file:/path/esperio-socket-sample-config.xml" />
  </plugin-loader>
</esper-configuration>]]></programlisting>		
		</sect2>
		
		<sect2 id="adaptersocket-gettingstarted-API">
			<title>Configuration and Starting via API</title>
			
			<para>
				If using Spring or if your application requires API access, the following code snippet configures and starts the adapter via API.
			</para>
			
			<para>
				The class for configuring an EsperIO Socket adapter is <literal>com.espertech.esperio.socket.config.ConfigurationSocketAdapter</literal>. The adapter class itself is
				<literal>EsperIOSocketAdapter</literal>.
			</para>

			<para>
				The code snippet below is a sample that configures using driver manager and starts the adapter via API:
			</para>

			<programlisting><![CDATA[ConfigurationSocketAdapter adapterConfig = new ConfigurationSocketAdapter();

SocketConfig socket = new SocketConfig();
socket.setDataType(DataType.CSV);
socket.setPort(port);
adapterConfig.getSockets().put("SocketService", socket);

// start adapter
EsperIOSocketAdapter socketAdapter = new EsperIOSocketAdapter(adapterConfig, "engineURI");
socketAdapter.start();

// destroy the adapter when done
socketAdapter.destroy();]]></programlisting>
		</sect2>
		
    </sect1>

	<sect1 id="adaptersocket-input">
		<title>Socket Service</title>
	
		<para>
			Add a socket configuration for each unique port that you want to expose a socket receive service for use by socket client connections.
		</para>
		
		<para>
			The synopsis is as follows:
		</para>
		<programlisting><![CDATA[<esperio-socket-configuration>
  <socket name="[name]" port="[port]" data="[csv|object]"/>
</esperio-socket-configuration>]]></programlisting>        

		<para>
		  The required <emphasis>name</emphasis> attribute provides the name of the socket service for use in logging.
		</para>
	
		<para>
		  The required <emphasis>port</emphasis> attribute provides the port that the socket service accepts client connections.
		</para>

		<para>
		  The required <emphasis>data</emphasis> attribute specifies whether the data arriving through the socket is formatted as a Java binary object stream or as CSV string values.
		</para>
	
		<para>
		  If configuring via the adapter API or Spring, use the <literal>com.espertech.esperio.socket.config.SocketConfig</literal> class.
		</para>
	
		<sect2 id="adaptersocket-input-object">
			<title>Object Data Format</title>

			<para>
				When sending events as Java objects, configure the <literal>data</literal> attribute value to <literal>object</literal> and use <literal>ObjectOutputStream</literal> to write events to the client socket. When sending a <literal>java.util.Map</literal> event, 
				your Map must contain a String value for the key <literal>stream</literal> which must denote a configured Map event type.
			</para>
	
			<para>
				This example XML configures a socket accepting client connections that provide Java objects:
			</para>
			<programlisting><![CDATA[<esperio-socket-configuration>
  <socket name="objectStreamSocket" port="8079" data="object"/>
</esperio-socket-configuration>]]></programlisting>

			<para>
				When <literal>object</literal> data type is configured, clients connections are expected to send <literal>java.io.Serializable</literal> or <literal>java.io.Externalizable</literal> objects using <literal>ObjectOutputStream</literal>.
			</para>

			<para>
				Below is a block of sample code that for use in clients to the adapter. It assumes the <literal>MyEvent</literal> class implements either of the above interfaces:
			</para>
			<programlisting><![CDATA[// connect first
Socket requestSocket = new Socket("localhost", port);
ObjectOutputStream out = new ObjectOutputStream(requestSocket.getOutputStream());

// send a few events, here we send only one
out.writeObject(new MyEvent("Hello World"));
out.flush();

// close when done
out.close();
requestSocket.close();]]></programlisting>
		</sect2>
		
		<sect2 id="adaptersocket-input-csv">
			<title>String CSV Data Format</title>
			<para>
				When sending events as CSV strings, the format of the string should be:
			</para>
			<synopsis>stream=[type],[name]=[value] [,...] (newline)</synopsis>
			
			<para>
				The CSV string must end with a newline character: Each event is one line. Each CSV element must be in the <literal>[name]=[value]</literal> format. Your CSV must contain a value for <literal>stream</literal> which must denote a configured event type.
				The adapter parses each string value and populates an instance of the target type.
			</para>
			
			<para>
				This next example XML configures a socket accepting client connections that provide events as CSV-formatted strings with name-value pairs :
			</para>
			<programlisting><![CDATA[<esperio-socket-configuration>
  <socket name="csvStreamSocket" port="8079" data="csv"/>
</esperio-socket-configuration>]]></programlisting>

			<para>
				A piece of client code that sends an event of type <literal>MyEvent</literal> may look as follows:
			</para>
			<programlisting><![CDATA[// connect first
String newline = System.getProperty("line.separator");
Socket requestSocket = new Socket("localhost", port);
BufferedWriter wr = new BufferedWriter(
    new OutputStreamWriter(socket.getOutputStream()));

// send a few events
wr.write("stream=MyEvent,price=20.d,upcCode=A0001");
wr.write(newline);
wr.flush();

// close when done
wr.close();
requestSocket.close();]]></programlisting>

			<para>
				Note that if your target type is a Java object event, your event class must provide setter-methods according to JavaBean conventions. The event class should also provide a default constructor taking no parameters. If your event class does not have a default constructor, your application may configure a factory method via <literal>ConfigurationEventTypeLegacy</literal>.
			</para>

		</sect2>
	</sect1>

</chapter>