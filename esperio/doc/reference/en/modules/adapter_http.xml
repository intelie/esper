<chapter id="adapter_http">
    <title>The HTTP Adapter</title>
    
    <para>
        This chapter discusses the EsperIO HTTP adapter.
    </para>
    
    <sect1 id="adapterhttp-intro">
        <title>Adapter Overview</title>

        <para>
			The EsperIO HTTP input and output adapter can be used to send events into an Esper engine instance as well as perform HTTP requests triggered by output events generated by an Esper engine instance.
		</para>
		
        <para>
			To send events into an Esper engine instance for processing you declare an HTTP service, which causes the adapter to expose an HTTP protocol server on the configured port to handle incoming requests.
			Your configuration then attaches Get handlers that receive Get requests that post events into the engine with data from each request.		
		</para>

		<para>
			Output events generated by an Esper engine instance can trigger an HTTP Get operation to a URI of your choice. For this purpose define a triggering event stream and the desired target URI and parameters.
		</para>
		
	</sect1>

    <sect1 id="adapterhttp-gettingstarted">
        <title>Getting Started</title>

		<para>
			You may configure the EsperIO HTTP adapter either as part of your Esper configuration file in the plugin loader section or via the adapter API.	Add the <literal>esperio-http-version.jar</literal> file to your classpath.
		</para>
        
		<para>
			For input adapter operation, add the <literal>httpcore-</literal><emphasis>version</emphasis><literal>.jar</literal> to your classpath. If using Java NIO add the <literal>httpcore-nio-</literal><emphasis>version</emphasis><literal>.jar</literal> to your classpath in addition.
		</para>

		<para>
			For output adapter operation, add the <literal>httpclient-</literal><emphasis>version</emphasis><literal>.jar</literal> to your classpath.
		</para>

		<para>
			A sample adapter configuration file is provided in <literal>esperio-http-sample-config.xml</literal> in the <literal>etc</literal> folder of the distribution. A configuration file must be valid according to schema <literal>esperio-http-configuration-4-0.xsd</literal>.
		</para>

		<sect2 id="adapterhttp-gettingstarted-pluginloader">
			<title>Plugin Loader Configuration</title>
			
			<para>
				You may place the configuration XML directly into your Esper configuration file as the example below shows:
			</para>
			<programlisting><![CDATA[<esper-configuration>
  <plugin-loader name="EsperIOHTTPAdapter" 
      class-name="com.espertech.esperio.http.EsperIOHTTPAdapterPlugin">
    <config-xml>	
      <esperio-http-configuration>
        .....as outlined below or contents of esperio-http-sample-config.xml here...
      </esperio-http-configuration>
    </config-xml>
  </plugin-loader>
</esper-configuration>]]></programlisting>		

			<para>
				Alternatively you can provide a URL in the Esper configuration file to point to your adapter configuration file:
			</para>
			<programlisting><![CDATA[<esper-configuration>
  <plugin-loader name="EsperIOHTTPAdapter" 
      class-name="com.espertech.esperio.http.EsperIOHTTPAdapterPlugin">
      <init-arg name="esperio.http.configuration.file" 
          value="file:/path/esperio-http-sample-config.xml" />
  </plugin-loader>
</esper-configuration>]]></programlisting>		
		</sect2>
		
		<sect2 id="adapterhttp-gettingstarted-API">
			<title>Configuration and Starting via API</title>
			
			<para>
				If using Spring or if your application requires API access, the following code snippet configures and starts the adapter via API.
			</para>
			
			<para>
				The class for configuring an EsperIO HTTP adapter is <literal>com.espertech.esperio.http.config.ConfigurationHTTPAdapter</literal>. The adapter class itself is
				<literal>EsperIOHTTPAdapter</literal>.
			</para>

			<para>
				The code snippet below is a sample that configures using driver manager and starts the adapter via API:
			</para>

			<programlisting><![CDATA[ConfigurationHTTPAdapter adapterConfig = new ConfigurationHTTPAdapter();

// add additional configuration
Request request = new Request();
request.setStream("TriggerEvent");
request.setUri("http://localhost:8077/root");
adapterConfig.getRequests().add(request);

// start adapter
EsperIOHTTPAdapter httpAdapter = new EsperIOHTTPAdapter(adapterConfig, "engineURI");
httpAdapter.start();

// destroy the adapter when done
httpAdapter.destroy();]]></programlisting>
		</sect2>
		
    </sect1>

    <sect1 id="adapterhttp-input">
        <title>HTTP Input Adapter</title>

		<sect2 id="adapterhttp-input-service">
			<title>HTTP Service</title>
		
			<para>
				A service is required for the adapter to receive events via a HTTP client connection.
			</para>
			
			<para>
				The synopsis is as follows:
			</para>
			<programlisting><![CDATA[<esperio-http-configuration>
  <service name="[name]" port="[port]" [nio="true|false"]/>
  <!-- add additional configuration here -->
</esperio-http-configuration>]]></programlisting>        

			<para>
			  The <emphasis>name</emphasis> attribute value is required and provides the name of the HTTP service for use in logging and for get-handlers as described below.
			</para>
		
			<para>
			  The <emphasis>nio</emphasis> attribute is optional and can be used to enable Java NIO (disabled by default).
			</para>
		
			<para>
			  If configuring via the adapter API or Spring, use the <literal>com.espertech.esperio.http.config.Service</literal> class.
			</para>
		
			<para>
				An example XML to configure a service and single get-handler is:
			</para>
			<programlisting><![CDATA[<esperio-http-configuration>
  <service name="myservice" port="8079" nio="false"/>
  <get service="myservice" pattern="*"/>
</esperio-http-configuration>]]></programlisting>
		</sect2>

		<sect2 id="adapterhttp-input-get">
			<title>Get Handlers</title>
	
			<para>
				One or more handlers for HTTP Get operations can be installed for a service and are used to receive events.
			</para>
	
			<para>
				Define a <literal>get</literal> element in the adapter configuration file (or use the <literal>GetRequest</literal> class) for every handler to register for a service. 
			</para>
			
			<para>
				The synopsis is as follows:
			</para>
			<programlisting><![CDATA[<get service="[service]" pattern="[pattern]"/>]]></programlisting>
	
			<para>
			  The <emphasis>service</emphasis> attribute value is required and provides the name of the HTTP service to register the Get operation handler for.
			</para>
	
			<para>
			  A value for the <emphasis>pattern</emphasis> attribute is required and may be either <literal>*</literal> for all URIs, <literal>*[uri]</literal> for all URIs ending with the given URI or <literal>[uri]*</literal> for all URI starting with the given URI.
			</para>
	
			<para>
			 A sample Get-handler configuration follows:
			</para>
			<programlisting><![CDATA[<get service="myservice" pattern="*"/>]]></programlisting>
			
			<para>
				When posting events to the engine, the Get request URI must contain a <literal>stream</literal> parameter that carries the name of the stream (event type) to insert into. Each event property to be populated in the input event must be part of the Get request parameter values.
			</para>
			
			<para>
			  For example, the URI <literal>http://localhost:8079/sendevent?stream=MyFirewallEvent&amp;name=Joe&amp;changed=true</literal> entered into a browser sends an input event of type <literal>MyFirewallEvent</literal> setting the <literal>name</literal> property of the event to "Joe" and the <literal>changed</literal> property of the event to true.
			</para>
			
			<para>
				Note that if your target type is a Java object event, your event class must provide setter-methods according to JavaBean conventions. The event class should also provide a default constructor taking no parameters. If your event class does not have a default constructor, your application may configure a factory method via <literal>ConfigurationEventTypeLegacy</literal>.
			</para>

		</sect2>
	</sect1>

    <sect1 id="adapterhttp-output">
        <title>HTTP Output Adapter</title>

		<sect2 id="adapterhttp-output-request">
			<title>Triggered HTTP Get</title>
	
			<para>
				This facility instructs the adapter to perform an HTTP Get request when a triggering event occurs, passing event properties as URI parameters.
			</para>

			<para>
				Define a <literal>request</literal> element in the adapter configuration file (or use the <literal>Request</literal> class) for every HTTP Get  to execute. 
			</para>
			
			<para>
				The synopsis is as follows:
			</para>
			<programlisting><![CDATA[<request stream="[stream]" uri="[uri_with_placeholders]"/>]]></programlisting>

			<para>
			  A value for the <emphasis>stream</emphasis> attribute is required and provides the name of the stream that triggers the HTTP Get. The adapter expects a stream by this name to exist at adapter start time.
			</para>
	
			<para>
			  The <emphasis>uri_with_placeholders</emphasis> attribute value is required. You may place event property placeholders inside the URI to format the URI as needed. Placeholders are of the format <literal>${</literal><emphasis>property_name</emphasis><literal>}</literal>.
			</para>
				
			<para>
			   A sample request configuration follows:
			</para>
			<programlisting><![CDATA[<request stream="TriggerFirewallStream" uri="http://myremotehost:80/root/event"/>]]></programlisting>
			
			<para>
			  Assuming the <literal>HttpTriggerStream</literal> has event properties <literal>name</literal> and <literal>ipaddress</literal> then a sample Get request URI is as follows:
			</para>
			<programlisting><![CDATA[http://myremotehost:80/root/event?stream=TriggerFirewallStream&name=Joe&ipaddress=120.1.0.0]]></programlisting>

			<para>
			   You may parameterize the URI via placeholders by placing <literal>${</literal><emphasis>property_name</emphasis><literal>}</literal> and the special placeholder <literal>${stream}</literal> into the URI string.
			</para>

			<para>
			   The next example configuration defines URI parameters via placeholder:
			</para>
			<programlisting><![CDATA[<request stream="TriggerFirewallStream" uri="http://myremotehost:80/root/${stream}?violation&amp;name=${name};violationip=${ipaddress}"/>]]></programlisting>

			<para>
			   The URI generated by the adapter:
			</para>
			<programlisting><![CDATA[http://myremotehost:80/root/TriggerFirewallStream?violation&name=Joe&violationip=120.1.0.0]]></programlisting>
		</sect2>
    </sect1>
</chapter>