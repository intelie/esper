<chapter id="adapter_event_representations">
    <title>Additional Event Representations</title>
    
    <sect1 id="eventrep-axiom">
        <title>Apache Axiom Events</title>

		<para>
			The plug-in event representation based on Apache Axiom can process XML documents by means of the Streaming API for XML (StAX) and the concept of "pull parsing", which can gain performance improvements extracting data from XML documents.
		</para>
    
		<para>
			The instructions below have been tested with Apache Axiom version 1.2.5. Please visit <literal>http://ws.apache.org/commons/axiom/</literal> for more information.
			Apache Axiom requires additional jar files that are not part of the EsperIO distribution and must be downloaded separately.
		</para>
			
		<para>
			There are 3 steps to follow:
		</para>

		<orderedlist spacing="compact">
			<listitem>
				<para>
					Enable Apache Axiom by adding the Axiom even representation to the engine configuration.
				</para>
			</listitem>
			<listitem>
				<para>
					Register your application event type names.
				</para>
			</listitem>
			<listitem>
				<para>
					Process <literal>org.apache.axiom.om.OMDocument</literal> or <literal>OMElement</literal> event objects.
				</para>
			</listitem>
		</orderedlist>
		
		<para>
			To enable Apache Axiom event processing, use the code snippet shown next, or configure via confiugration XML:
		</para>

		<programlisting><![CDATA[Configuration config = new Configuration();
config.addPlugInEventRepresentation(new URI("type://xml/apacheaxiom/OMNode"),
    AxiomEventRepresentation.class.getName(), null);]]></programlisting>

		<para>
			Your application may register Axiom event types in advance. Here is sample code for adding event types based on Axiom:
		</para>
		<programlisting><![CDATA[ConfigurationEventTypeAxiom desc = new ConfigurationEventTypeAxiom();
desc.setRootElementName("measurement");
desc.addXPathProperty("measurement", "/sensor/measurement", XPathConstants.NUMBER);
URI[] resolveURIs = new URI[] {new URI("type://xml/apacheaxiom/OMNode/SensorEvent")};
configuration.addPlugInEventType("SensorEvent", resolveURIs, desc);]]></programlisting>
		
		<para>
			The operation above is available at configuration time and also at runtime via <literal>ConfigurationOperations</literal>. After registering an event type name as above, your application can create EPL statements.
		</para>
		
		<para>
			To send Axiom <literal>OMDocument</literal>  or <literal>OMElement</literal> events into the engine, your application code must obtain an <literal>EventSender</literal> to process Axiom <literal>OMElement</literal> events:
		</para>
		<programlisting><![CDATA[URI[] resolveURIs = new URI[] {new URI("type://xml/apacheaxiom/OMNode/SensorEvent")};
EventSender sender = epService.getEPRuntime().getEventSender(resolveURIs);

String xml = "<measurement><temperature>98.6</temperature></measurement>";
InputStream s = new ByteArrayInputStream(xml.getBytes());
OMElement omElement = new StAXOMBuilder(s).getDocumentElement();

sender.sendEvent(omElement);]]></programlisting>
    </sect1>
    
		<para>
			Configuring an Axiom event type via XML is easy. An Esper configuration XML can be found in the file <literal>esper-axiom-sample-configuration.xml</literal> in the <literal>etc</literal>  folder of the EsperIO distribution.
		</para>

		<para>
			The configuration XML for the <literal>ConfigurationEventTypeAxiom</literal> class adheres to the schema <literal>esperio-axiom-configuration-4-0.xsd</literal> also in the <literal>etc</literal> folder of the EsperIO distribution.
		</para>
</chapter>


