using System;
using System.Threading;

using net.esper.client;
using net.esper.events;
using net.esper.support.bean;
using net.esper.support.util;
using net.esper.view;

using NUnit.Core;
using NUnit.Framework;

namespace net.esper.regression.view
{

    [TestFixture]
    public class TestViewTimeWindowWeightedAvg
    {
        private static String SYMBOL = "CSCO.O";

        private EPServiceProvider epService;
        private SupportUpdateListener testListener;
        private EPStatement weightedAvgView;

        [SetUp]
        public virtual void setUp()
        {
            testListener = new SupportUpdateListener();
            epService = EPServiceProviderManager.getDefaultProvider();
            epService.initialize();

            // Set up a 1 second time window
            weightedAvgView = epService.EPAdministrator.createEQL("select * from " + typeof(SupportMarketDataBean).FullName + "(symbol='" + SYMBOL + "').win:time(3.0).stat:weighted_avg('price', 'volume')");
            weightedAvgView.AddListener(testListener);
        }

        public virtual void testWindowStats()
        {
            testListener.reset();

            // Send 2 events, E1 and E2 at +0sec
            epService.EPRuntime.sendEvent(makeBean(SYMBOL, 10, 500));
            checkValue(10);

            epService.EPRuntime.sendEvent(makeBean(SYMBOL, 11, 500));
            checkValue(10.5);

            // Sleep for 1.5 seconds
            sleep(1500);

            // Send 2 more events, E3 and E4 at +1.5sec
            epService.EPRuntime.sendEvent(makeBean(SYMBOL, 10, 1000));
            checkValue(10.25);
            epService.EPRuntime.sendEvent(makeBean(SYMBOL, 10.5, 2000));
            checkValue(10.375);

            // Sleep for 2 seconds, E1 and E2 should have left the window
            sleep(2000);
            checkValue(10.333333333);

            // Send another event, E5 at +3.5sec
            epService.EPRuntime.sendEvent(makeBean(SYMBOL, 10.2, 1000));
            checkValue(10.3);

            // Sleep for 2.5 seconds, E3 and E4 should expire
            sleep(2500);
            checkValue(10.2);

            // Sleep for 1 seconds, E5 should have expired
            sleep(1000);
            checkValue(Double.NaN);
        }

        private SupportMarketDataBean makeBean(String symbol, double price, long volume)
        {
            return new SupportMarketDataBean(symbol, price, volume, "");
        }

        private void checkValue(double avgE)
        {
            IEnumerator<EventBean> iterator = weightedAvgView.GetEnumerator();
            Assert.IsTrue(iterator.MoveNext());
            checkValue(iterator.Current, avgE);
            Assert.IsFalse(iterator.MoveNext());

            Assert.IsTrue(testListener.LastNewData.Length == 1);
            EventBean listenerValues = testListener.LastNewData[0];
            checkValue(listenerValues, avgE);

            testListener.reset();
        }

        private void checkValue(EventBean values, double avgE)
        {
            double avg = getDoubleValue(ViewFieldEnum.WEIGHTED_AVERAGE__AVERAGE, values);
            Assert.IsTrue(DoubleValueAssertionUtil.Equals(avg, avgE, 6));
        }

        private double getDoubleValue(ViewFieldEnum field, EventBean _event)
        {
            return (Double)_event.Fetch[field.Name];
        }

        private void sleep(int msec)
        {
            try
            {
                Thread.Sleep(new System.TimeSpan((Int64)10000 * msec));
            }
            catch (ThreadInterruptedException e)
            {
            }
        }
    }
}