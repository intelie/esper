///////////////////////////////////////////////////////////////////////////////////////
// Copyright (C) 2007 Esper Team. All rights reserved.                                /
// http://esper.codehaus.org                                                          /
// ---------------------------------------------------------------------------------- /
// The software in this package is published under the terms of the GPL license       /
// a copy of which has been included with this distribution in the license.txt file.  /
///////////////////////////////////////////////////////////////////////////////////////

using System;
using net.esper.eql.expression;
using net.esper.events;

namespace net.esper.filter
{
	/// <summary>
	/// Adapter for use by {@link FilterParamIndexBooleanExpr} to evaluate bool expressions, providing
	/// events per stream to expression nodes. Generated by @{link FilterSpecParamExprNode} for
	/// bool expression filter parameters.
	/// </summary>
	
    public class ExprNodeAdapter
	{
	    private readonly ExprNode exprNode;
	    private EventBean[] prototype;

	    /// <summary>Ctor.</summary>
	    /// <param name="exprNode">is the bool expression</param>
	    public ExprNodeAdapter(ExprNode exprNode)
	    {
	        this.exprNode = exprNode;
	    }

	    /// <summary>
	    /// Provides the prototype events-per-stream where stream zero is the current stream
	    /// and is filled when the expression is evaluated.
	    /// </summary>
        public EventBean[] Prototype
	    {
            get { return this.prototype; }
	        set { this.prototype = value; }
	    }

	    /// <summary>
	    /// Evaluate the bool expression given the event as a stream zero event.
	    /// </summary>
	    /// <param name="_event">is the stream zero event (current event)</param>
	    /// <returns>bool result of the expression</returns>
	    public bool Evaluate(EventBean _event)
	    {
	        EventBean[] eventsPerStream;

	        if (prototype == null)
	        {
	            eventsPerStream = new EventBean[1];
	        }
	        else
	        {
	            eventsPerStream = new EventBean[prototype.Length];
	            for (int i = 1; i < prototype.Length; i++)
	            {
	                eventsPerStream[i] = prototype[i];
	            }
	        }

	        eventsPerStream[0] = _event;
	        return (Boolean) exprNode.Evaluate(eventsPerStream, true);
	    }
	}
} // End of namespace
