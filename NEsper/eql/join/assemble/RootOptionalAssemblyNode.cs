using System;
using System.Collections.Generic;
using System.Xml;

using net.esper.eql.join;
using net.esper.eql.join.rep;
using net.esper.events;
using net.esper.util;

namespace net.esper.eql.join.assemble
{
    /// <summary>
    /// Assembly node for an event stream that is a root with a one optional child node below it.
    /// </summary>

    public class RootOptionalAssemblyNode : BaseAssemblyNode
    {
        private readonly int numStreams;
        private bool haveChildResults;

        /// <summary> Ctor.</summary>
        /// <param name="streamNum">- is the stream number
        /// </param>
        /// <param name="numStreams">- is the number of streams
        /// </param>

        public RootOptionalAssemblyNode(int streamNum, int numStreams)
            : base(streamNum, numStreams)
        {
            this.numStreams = numStreams;
        }

        public override void Init(IList<Node>[] result)
        {
            haveChildResults = false;
        }

        public override void Process(IList<Node>[] result)
        {
            // If we don't have child results, post an empty row
            if (!haveChildResults)
            {
                EventBean[] row = new EventBean[numStreams];
                parentNode.Result(row, streamNum, null, null);
                return;
            }
        }

        public override void Result(EventBean[] row, int fromStreamNum, EventBean myEvent, Node myNode)
        {
            parentNode.Result(row, streamNum, null, null);

            // record the fact that a row that was generated by a child
            haveChildResults = true;
        }

        public override void Print(IndentWriter indentWriter)
        {
            indentWriter.WriteLine("RootOptionalAssemblyNode streamNum=" + streamNum);
        }
    }
}