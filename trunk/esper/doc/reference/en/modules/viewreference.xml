<chapter id="eql-views">
    <title>EQL Reference: Views</title>
        
        <para>
            This chapter outlines the views that are built into Esper. All views can be arbitrarily combined as many of the examples below show. 
			The section on <xref linkend="processingmodel"/> provides additional information on the relationship of views, filtering and aggregation.
        </para>
        
        <sect1 id="win-views" >
           <title>Window views</title>

			<sect2 id="view-win-length" >
			   <title>Length window (<literal>win:length</literal>)</title>
		
				<para>
					This view is a moving (sliding) length window extending the specified number of elements into the past. The view takes a single numeric parameter that defines the window size:
				</para>

				<synopsis>win:length(<emphasis>size</emphasis>)</synopsis>

				<para>
					The below example calculates univariate statistics on price for the last 5 stock ticks for symbol IBM.
				</para>
	
				<programlisting><![CDATA[select * from StockTickEvent(symbol='IBM').win:length(5).stat:uni('price')]]></programlisting>

				<para>
					The next example keeps a length window of 10 events of stock trade events, with a separate window for each symbol. The
					statistics on price is calculated only for the last 10 events for each symbol.
				</para>
	
				<programlisting><![CDATA[select * from StockTickEvent.std:groupby('symbol').win:length(10).stat:uni('price')]]></programlisting>
			</sect2>

			<sect2 id="view-win-length-batch" >
			   <title>Length batch window (<literal>win:length_batch</literal>)</title>
		
				<para>
					This window view buffers events (tumbling window) and releases them when a given minimum number of events has been collected. The view takes the number of events to batch as a parameter:
				</para>

				<synopsis>win:length_batch(<emphasis>size</emphasis>)</synopsis>

				<para>
					The next statement buffers events until a minimum of 5 events have collected. Listeners to updates posted by this view receive updated information only when 5 or more events have collected.
				</para>
	
				<programlisting><![CDATA[select * from StockTickEvent.win:length_batch(5)]]></programlisting>
			</sect2>

			<sect2 id="view-win-time" >
			   <title>Time window (<literal>win:time</literal>)</title>
		
				<para>
					This view is a moving (sliding) time window extending from the specified time interval into the past based on the system time.
					This view takes a time period (see <xref linkend="eql-syntax-time-periods"/>) or a number of seconds as a parameter:
				</para>

				<synopsis>win:time(<emphasis>time period</emphasis>)</synopsis>
				<synopsis>win:time(<emphasis>number of seconds</emphasis>)</synopsis>

				<para>
					For the IBM stock tick events in the last 1 second, calculate statistics on price.
				</para>
	
				<programlisting><![CDATA[select * from StockTickEvent(symbol='IBM').win:time(1 sec).stat:uni('price')]]></programlisting>

				<para>
					The same statement rewritten to use a parameter supplying number-of-seconds is:
				</para>
	
				<programlisting><![CDATA[select * from StockTickEvent(symbol='IBM').win:time(1).stat:uni('price')]]></programlisting>

				<para>
					The following time windows are equivalent specifications:
				</para>
	
				<programlisting><![CDATA[]]>win:time(2 minutes 5 seconds)
win:time(125 sec)
win:time(125)</programlisting>
			</sect2>

			<sect2 id="view-win-ext_time" >
			   <title>Externally-timed window (<literal>win:ext_timed</literal>)</title>
		
				<para>
					Similar to the time window, this view is a moving (sliding) time window extending from the specified time interval into the past, but based on the millisecond
					time value supplied by an event property. The view takes two parameters: the name of the event property to return the long-typed timestamp value,
					and a time period or a number of seconds:
				</para>

				<synopsis>win:time(<emphasis>timestamp_property_name</emphasis>, <emphasis>time_period</emphasis>)</synopsis>
				<synopsis>win:time(<emphasis>timestamp_property_name</emphasis>, <emphasis>number_of_seconds</emphasis>)</synopsis>

				<para>
					This view holds stock tick events of the last 10 seconds based on the timestamp property in <literal>StockTickEvent</literal>.
				</para>
	
				<programlisting><![CDATA[select * from StockTickEvent.win:ext_timed('timestamp', 10 seconds)]]></programlisting>
			</sect2>

			<sect2 id="view-win-time-batch" >
			   <title>Time batch window (<literal>win:time_batch</literal>)</title>
		
				<para>
					This window view buffers events (tumbling window) and releases them every specified time interval in one update. The view takes a time period or a number of seconds as a parameter.
				</para>

				<synopsis>win:time_batch(<emphasis>time_period</emphasis>)</synopsis>
				<synopsis>win:time_batch(<emphasis>number_of_seconds</emphasis>)</synopsis>

				<para>
					The below example batches events into a 5 second window releasing new batches every 5 seconds. Listeners to updates
					posted by this view receive updated information only every 5 seconds.
				</para>
	
				<programlisting><![CDATA[select * from StockTickEvent.win:time_batch(5 sec)]]></programlisting>
			</sect2>

			<sect2 id="view-win-time-length-batch" >
			   <title>Time-Length combination batch window (<literal>win:time_length_batch</literal>)</title>
		
				<para>
					This data window view is a combination of time and length batch (tumbling) windows. Similar to the time and length batch windows, this view batches events and releases the batched events when either one of the 
following conditions occurs, whichever occurs first: the data window has collected a given number of events, or a given time interval has passed.
				</para>

				<para>
					The view parameters take 2 forms. The first form accepts a time period or number of seconds, and a parameter for the number of events:
				</para>				
				<synopsis>win:time_length_batch(<emphasis>time_period or number_of_seconds</emphasis>, <emphasis>number of events</emphasis>)</synopsis>

				<para>
					The next example shows a time-length combination batch window that batches up to 100 events or all events arriving within a 1-second time interval, whichever condition occurs first:
				</para>
				<programlisting><![CDATA[ select * from MyEvent.win:time_length_batch(1 sec, 100)]]></programlisting>

				<para>
					In this example, if 100 events arrive into the window before a 1-second time interval passes, the view posts the batch of 100 events. If less then 100 events arrive within a 1-second interval,
					the view posts all events that arrived within the 1-second interval at the end of the interval.
				</para>

				<para>
					By default, if there are no events arriving in the current interval (insert stream), and no events remain from the prior batch (remove stream), then the view does not post results to listeners. This
					view allows overriding this default behavior via flow control keywords.
				</para>

				<para>
					The synopsis of the view with flow control parameters is:
				</para>				
				<synopsis>win:time_length_batch(<emphasis>time_period or number_of_seconds</emphasis>, <emphasis>number of events</emphasis>, 
    "<emphasis>flow control keyword [, keyword...]</emphasis>")</synopsis>

				<para>
					The <literal>FORCE_UPDATE</literal> flow control keyword instructs the view to post an empty result set to listeners if there is no data to post for an interval. The view begins posting no later then after one time interval passed after the first event arrives.
				</para>				

				<para>
					The <literal>START_EAGER</literal> flow control keyword instructs the view to post empty result sets even before the first event arrives, starting a time interval at statement creation time. As when using <literal>FORCE_UPDATE</literal>, the view also posts an empty result set to listeners if there is no data to post for an interval, however it starts doing so at time of statement creation rather then at the time of arrival of the first event.
				</para>				

				<para>
					Taking the two flow control keywords in one sample statement, this example presents a view that waits for 10 seconds or reacts when the 5th event arrives, whichever comes first. It posts empty result sets after one interval after the statement is created, and keeps posting an empty result set as no events arrive during intervals: 
				</para>
				<programlisting><![CDATA[ select * from MyEvent.win:time_length_batch(10 sec, 5, "FORCE_UPDATE, START_EAGER")]]></programlisting>
			</sect2>

			<sect2 id="view-win-time-accumulating" >
			   <title>Time-Accumulting window (<literal>win:time_accum</literal>)</title>
		
				<para>
					This data window view is a specialized moving (sliding) time window that differs from the regular time window in that it accumulates events until no more events arrive within a given time interval, and only then releases the accumulated events as a remove stream.
				</para>

				<para>
					The view accepts a single parameter: the time period or number of seconds specifying the length of the time interval during which no events must arrive until the view releases accumulated events. The synopsis is as follows:
				</para>				
				<synopsis>win:time_accum(<emphasis>time_period or number_of_seconds</emphasis>)</synopsis>

				<para>
					The next example shows a time-accumulating window that accumulates events, and then releases events if within the time interval no more events arrive:
				</para>
				<programlisting><![CDATA[ select * from MyEvent.win:time_accum(10 sec)]]></programlisting>

				<para>
					This example accumulates events, until when for a period of 10 seconds no more MyEvent events arrive, at which time it posts all accumulated MyEvent events.
				</para>

				<para>
					Your application may only be interested in the batches of events as events leave the data window. This can be done simply by selecting the remove stream of this data window, populated by the engine as accumulated events leave the data window all-at-once when no events arrive during the time interval following the time the last event arrived:
				</para>
				<programlisting><![CDATA[ select rstream * from MyEvent.win:time_accum(10 sec)]]></programlisting>

				<para>
					If there are no events arriving, then the view does not post results to listeners. 
				</para>
			</sect2>
	   </sect1>

        <sect1 id="std-views" >
           <title>Standard view set</title>

			<sect2 id="view-std-unique" >
			   <title>Unique (<literal>std:unique</literal>)</title>
		
				<para>
					The <literal>unique</literal> view is a view that includes only the most recent among events having the same value for the specified field:
				</para>
				<synopsis>std:unique(<emphasis>event_property_name</emphasis>)</synopsis>

				<para>
					The view acts as a length window of size 1 for each distinct value of the event property. It thus posts as old events the prior event of the same property value, if any.
				</para>

				<para>
					The below example creates a view that retains only the last event per symbol.
				</para>
	
				<programlisting><![CDATA[select * from StockTickEvent.std:unique('symbol')]]></programlisting>
			</sect2>

			<sect2 id="view-std-groupby" >
			   <title>Group By (<literal>std:groupby</literal>)</title>
		
				<para>
					This view groups events into sub-views by the value of the specified field. The view takes a single property name to supply the group-by values, or a list of property names as the synopsis shows:
				</para>

				<synopsis>std:groupby(<emphasis>property_name</emphasis>)</synopsis>
				<synopsis>std:groupby({<emphasis>property_name</emphasis> [, <emphasis>property_name</emphasis> ...] })</synopsis>

				<para>
					This example calculates statistics on price separately for each symbol.					
				</para>
	
				<programlisting><![CDATA[select * from StockTickEvent.std:groupby('symbol').stat:uni('price')]]></programlisting>

				<para>
					The group-by view can also take multiple fields to group by. This example calculates statistics on price for each symbol and feed.					
				</para>
	
				<programlisting><![CDATA[select * from StockTickEvent.std:groupby({'symbol', 'feed'}).stat:uni('price')]]></programlisting>

				<para>
					The order in which the group-by view appears within sub-views of a stream controls the data the engine derives from events for each group. The next 2 statements demonstrate this using a length window.
				</para>

				<para>
					This example keeps a length window of 10 events of stock trade events, with a separate length window for each symbol. The engine calculates statistics on price for the last 10 events for each symbol. During runtime, the engine actually allocates a separate length window for each new symbol arriving.
				</para>
	
				<programlisting><![CDATA[select * from StockTickEvent.std:groupby('symbol').win:length(10).stat:uni('price')]]></programlisting>

				<para>
					By putting the group-by view in position after the length window, we can change the semantics of the query. The query now returns the statistics on price per symbol for only the last 10 events across all symbols. Here the engine allocates only one length window for all events.
				</para>
	
				<programlisting><![CDATA[select * from StockTickEvent.win:length(10).std:groupby('symbol').stat:uni('price')]]></programlisting>

				<para>
					We have learned that by placing the group-by view before other views, these other views become part of the grouped set of views. The engine dynamically allocates a new view instance for each subview, every time it encounters a new group key such as a new value for symbol. Therefore, in <literal>std:groupby('symbol').win:length(10)</literal> the engine allocates a new length window for each distinct symbol. However in <literal>win:length(10).std:groupby('symbol')</literal> the engine maintains a single length window.
				</para>

				<para>
					Multiple group-by views can also be used in the same statement. The statement below groups by symbol and feed. As the statement declares the time window after the group-by view for symbols, the engine allocates a new time window per symbol however reports statistics on price per symbol and feed. The query results are statistics on price per symbol and feed for the last 1 minute of events per symbol (and not per feed).
				</para>

				<programlisting><![CDATA[select * from StockTickEvent.std:groupby('symbol').win:time(1 minute)
    .std:groupby('feed').stat:uni('price')]]></programlisting>

				<para>
					Last, we consider the permutation where the time window is declared after the group-by. Here, the query results are statistics on price per symbol and feed for the last 1 minute of events per symbol and feed.
				</para>

				<programlisting><![CDATA[select * from StockTickEvent.std:groupby({'symbol', 'feed'})
    .win:time(1 minute).stat:uni('price')]]></programlisting>
			</sect2>

			<sect2 id="view-std-size" >
			   <title>Size (<literal>std:size</literal>)</title>
		
				<para>
					This view simply posts the number of events received from a stream or view. The synopsis is simply:
				</para>

				<synopsis>std:size()</synopsis>

				<para>					
					The view posts a single long-typed property named <literal>size</literal>. The view posts the prior size as old data, and the current size as new data to update listeners of the view. Via the <literal>iterator</literal> method of the statement the size value can also be polled (read).
				</para>

				<para>
					When combined with a data window view, the size view reports the current and prior number of events in the data window. This example reports the number of tick events within the last 1 minute:
				</para>
				<programlisting><![CDATA[select size from StockTickEvent.win:time(1 min).std:size()]]></programlisting>

				<para>
					The size view is also useful in conjunction with a group-by view to count the number of events per group. The EQL below returns the number of events per symbol.
				</para>
				<programlisting><![CDATA[select size from StockTickEvent.std:groupby('symbol').std:size()]]></programlisting>

				<para>
					When used without a data window, the view simply counts the number of events:
				</para>
				<programlisting><![CDATA[select size from StockTickEvent.std:size()]]></programlisting>

				<para>
					All views can be used with pattern statements as well. The next EQL snippet shows a pattern where we look for tick events followed by trade events for the same symbol. The size view counts the number of occurances of the pattern.
				</para>
				<programlisting><![CDATA[select size from pattern[every s=StockTickEvent -> TradeEvent(symbol=s.symbol)].std:size()]]></programlisting>
			</sect2>

			<sect2 id="view-std-last" >
			   <title>Last (<literal>std:lastevent</literal>)</title>
		
				<para>
					This view exposes the last element of its parent view:
				</para>
				<synopsis>std:lastevent()</synopsis>

				<para>
					The view acts as a length window of size 1. It thus posts as old events the prior event in the stream, if any.
				</para>

				<para>
					This example statement retains statistics calculated on stock tick price for the symbol IBM. 
				</para>
	
				<programlisting><![CDATA[select * from StockTickEvent(symbol='IBM').stat:uni('price').std:lastevent()]]></programlisting>
			</sect2>
	   </sect1>
  
        <sect1 id="stat-views" >
           <title>Statistics views</title>
           
			<sect2 id="view-stat-uni" >
			   <title>Univariate statistics (<literal>stat:uni</literal>)</title>
		
				<para>
					This view calculates univariate statistics on an event property. The view takes a single event property name as a parameter. The event property must be of numeric type:
				</para>
				<synopsis>stat:uni(<emphasis>event_property_name</emphasis>)</synopsis>
				
				<table frame="topbot" id="view-stat-uni-table" revision="2">
					<title>Univariate statistics derived properties</title>
					<tgroup cols="2">
						<colspec colwidth="1*"/>
						<colspec colwidth="2.5*"/>
						<thead>
							<row>
								<entry>Property Name</entry>
								<entry>Description</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry><literal>count</literal></entry>
								<entry>Number of values</entry>
							</row>
							<row>
								<entry><literal>sum</literal></entry>
								<entry>Sum of values</entry>
							</row>
							<row>
								<entry><literal>average</literal></entry>
								<entry>Average of values</entry>
							</row>
							<row>
								<entry><literal>variance</literal></entry>
								<entry>Variance</entry>
							</row>
							<row>
								<entry><literal>stdev</literal></entry>
								<entry>Sample standard deviation (square root of variance) </entry>
							</row>
							<row>
								<entry><literal>stdevpa</literal></entry>
								<entry>Population standard deviation</entry>
							</row>
						</tbody>
					</tgroup>
				</table>
	
				<para>
					The below example selects the standard deviation on price for stock tick events for the last 10 events.
				</para>
	
				<programlisting><![CDATA[select stdev from StockTickEvent.win:length(10).stat:uni('price')]]></programlisting>
			</sect2>

			<sect2 id="view-stat-linest" >
			   <title>Regression (<literal>stat:linest</literal>)</title>
		
				<para>
					This view calculates regression on two event properties. The view takes two event property names as parameters. The event properties must be of numeric type:
				</para>
				
				<synopsis>stat:linest(<emphasis>event_property_name_1</emphasis>, <emphasis>event_property_name_2</emphasis>)</synopsis>

				<table frame="topbot" id="view-stat-linest-table" revision="2">
					<title>Regression derived properties</title>
					<tgroup cols="2">
						<colspec colwidth="1*"/>
						<colspec colwidth="2.5*"/>
						<thead>
							<row>
								<entry>Property Name</entry>
								<entry>Description</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry><literal>slope</literal></entry>
								<entry>Slope</entry>
							</row>
							<row>
								<entry><literal>YIntercept</literal></entry>
								<entry>Y Intercept</entry>
							</row>
						</tbody>
					</tgroup>
				</table>
				
				<para>
					Calculate slope and y-intercept on price and offer for all events in the last 10 seconds.
				</para>
	
				<programlisting><![CDATA[select slope, YIntercept from StockTickEvent.win:time(10 seconds).stat:linest('price', 'offer')]]></programlisting>	
			</sect2>
				
			<sect2 id="view-stat-correl" >
			   <title>Correlation (<literal>stat:correl</literal>)</title>
		
				<para>
					This view calculates the correlation value on two event properties. The view takes two event property names as parameters. The event properties must be of numeric type:
				</para>
				
				<synopsis>stat:correl(<emphasis>event_property_name_1</emphasis>, <emphasis>event_property_name_2</emphasis>)</synopsis>
				
				<table frame="topbot" id="view-stat-correl-table" revision="2">
					<title>Correlation derived properties</title>
					<tgroup cols="2">
						<colspec colwidth="1*"/>
						<colspec colwidth="2.5*"/>
						<thead>
							<row>
								<entry>Property Name</entry>
								<entry>Description</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry><literal>correlation</literal></entry>
								<entry>Correlation between two event properties</entry>
							</row>
						</tbody>
					</tgroup>
				</table>
	
				<para>
					Calculate correlation on price and offer over all stock tick events for IBM.
				</para>
	
				<programlisting><![CDATA[select correlation from StockTickEvent(symbol='IBM').stat:correl('price', 'offer')]]></programlisting>            
			</sect2>
						
			<sect2 id="view-stat-weightedavg" >
			   <title>Weighted average (<literal>stat:weighted_avg</literal>)</title>
		
				<para>
					This view returns the weighted average given a weight field and a field to compute the average for. The view takes two event property names as parameters. The event properties must be of numeric type:
				</para>				
				<synopsis>stat:weighted_avg(<emphasis>event_property_name_field</emphasis>, <emphasis>event_property_name_weight</emphasis>)</synopsis>
				
				<table frame="topbot" id="view-stat-weightedavg-table" revision="2">
					<title>Weighted average derived properties</title>
					<tgroup cols="2">
						<colspec colwidth="1*"/>
						<colspec colwidth="2.5*"/>
						<thead>
							<row>
								<entry>Property Name</entry>
								<entry>Description</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry><literal>average</literal></entry>
								<entry>Weighted average</entry>
							</row>
						</tbody>
					</tgroup>
				</table>
	
				<para>
					A statement that derives the volume-weighted average price for the last 3 seconds:
				</para>
	
				<programlisting><![CDATA[select average 
from StockTickEvent(symbol='IBM').win:time(3 seconds).stat:weighted_avg('price', 'volume')]]></programlisting>            
			</sect2> 
			
			<sect2 id="view-stat-multidim" >
			   <title>Multi-dimensional statistics (<literal>stat:cube</literal>)</title>
		
				<para>
					This view works similar to the <literal>std:groupby</literal> views in that it groups information by one or more event properties. 
					The view accepts 3 or more parameters: The first parameter to the view defines the univariate statistics values to derive.
					The second parameter is the property name to derive data from.
					The remaining parameters supply the event property names to use to derive dimensions.
				</para>
				<synopsis>stat:cube(<emphasis>values_to_derive</emphasis>, <emphasis>property_name_datapoint</emphasis>, <emphasis>property_name_column</emphasis>)</synopsis>
				<synopsis>stat:cube(<emphasis>values_to_derive</emphasis>, <emphasis>property_name_datapoint</emphasis>, <emphasis>property_name_column</emphasis>, 
    <emphasis>property_name_row</emphasis>)</synopsis>
				<synopsis>stat:cube(<emphasis>values_to_derive</emphasis>, <emphasis>property_name_datapoint</emphasis>, <emphasis>property_name_column</emphasis>, 
    <emphasis>property_name_row</emphasis>, <emphasis>property_name_page</emphasis>)</synopsis>
				
				<table frame="topbot" id="view-stat-multidim-table" revision="2">
					<title>Multi-dim derived properties</title>
					<tgroup cols="2">
						<colspec colwidth="1*"/>
						<colspec colwidth="2.5*"/>
						<thead>
							<row>
								<entry>Property Name</entry>
								<entry>Description</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry><literal>cube</literal></entry>
								<entry>The cube following the <literal>net.esper.view.stat.olap.Cube</literal> interface</entry>
							</row>
						</tbody>
					</tgroup>
				</table>
	
				<para>
					The example below derives the count, average and standard deviation latency of service measurement events per customer.
				</para>	
				<programlisting><![CDATA[select cube from ServiceMeasurement.stat:cube({‘count’, ‘average’, ‘stdev’}, 
    'latency', 'customer')]]></programlisting>            

				<para>
					This example derives the average latency of service measurement events per customer, service and error status for events in
					the last 30 seconds.
				</para>	
				<programlisting><![CDATA[select * from ServiceMeasurement.win:length(30000).stat:cube({‘average’}, 
	'latency', 'customer', 'service', 'status')]]></programlisting>            
			</sect2> 

		</sect1>

        <sect1 id="ext-views" >
           <title>Extension View Set</title>

			<sect2 id="view-ext-sort" >
			   <title>Sorted Window View (<literal>ext:sort</literal>)</title>
		
				<para>					
					This view sorts by values of the specified event properties and keeps only the top events up to the given size. 
				</para>

				<para>
					The syntax to sort on a single event property is as follows.
				</para>
				<synopsis>ext:sort(<emphasis>property_name</emphasis>, <emphasis>is_descending</emphasis>, <emphasis>size</emphasis>) </synopsis>

				<para>
					To sort on a multiple event properties the syntax is as follows.
				</para>
				<synopsis>sort( { <emphasis>property_name</emphasis>, <emphasis>is_descending</emphasis> [ , <emphasis>property_name</emphasis>, <emphasis>is_descending</emphasis> ...] }, <emphasis>size</emphasis>) </synopsis>

				<para>
					The view below sorts on price descending keeping the lowest 10 prices and reporting statistics on price.
				</para>
				<programlisting><![CDATA[select * from StockTickEvent.ext:sort('price', false, 10).stat:uni('price')]]></programlisting>				

				<para>
					The following example sorts events first by price in descending order, and then by symbol name in ascending (alphabetical) order, keeping only the 10
events with the highest price (with ties resolved by alphabetical order of symbol).
				</para>
				<programlisting><![CDATA[select * from StockTickEvent.ext:sort({'price', true, 'symbol', false}, 10)]]></programlisting>				
			</sect2>
			
			<sect2 id="view-time-order" >
			   <title>Time-Order View (<literal>ext:time_order</literal>)</title>
		
				<para>					
					This view orders events that arrive out-of-order, using a timestamp-property supplied by each event to be ordered, and by comparing the event timestamp to engine system time.
				</para>

				<para>
					The syntax for this view is as follows.
				</para>
				<synopsis>ext:time_order(<emphasis>timestamp_property_name</emphasis>, <emphasis>time_period or number_of_seconds</emphasis>)</synopsis>

				<para>
					The first parameter to the view is the name of the property on the event that supplies the timestamp value. The timestamp is expected to be a long-typed millisecond value that denotes an event's time of consideration by the view. This is typically the time of arrival. The second parameter is a number of seconds or the time period specifying the time interval that an arriving event should maximally be held, in order to consider older events arriving at a later time.
				</para>

				<para>
					Since the view compares an event's timestamp property to engine time, the view requires that the event timestamp values and current engine time are both following the same clock. Therefore, to the extend that the clocks that originated both timestamps differ, the view may produce inaccurate results.
				</para>

				<para>
					As an example, the next statement uses the <literal>arrival_time</literal> property of <literal>MyTimestampedEvent</literal> events to order and release events by arrival time:
				</para>
				<programlisting><![CDATA[insert into ArrivalTimeOrderedStream
select rstream * from MyTimestampedEvent.ext:time_order('arrival_time', 10 sec)]]></programlisting>

				<para>
					In the example above, the <literal>arrival_time</literal> property holds a long-typed timestamp value in milliseconds. On arrival of an event, the engine compares the timestamp value of each event to the tail-time of the window. The tail-time of the window is, in this example, 10 seconds before engine time (continuously sliding). If the timestamp value indicates that the event is older then the tail-time of the time window, the event is released immediately in the remove stream. If the timestamp value indicates that the event is newer then the tail-time of the window, the view retains the event until engine time moves such that the event timestamp is older then tail-time.
				</para> 

				<para>
					The examples thus holds each arriving event in memory anywhere from zero seconds to 10 seconds, to allow for older events (considering arrival time timestamp) to arrive. In other words, the view holds an event with an arrival time equal to engine time for 10 seconds. The view holds an event with an arrival time that is 2 seconds older then engine time for 8 seconds. The view holds an event with an arrival time that is 10 or more seconds older then engine time for zero seconds, and releases such (old) events immediately into the remove stream. 
				</para> 

				<para>
					The insert stream of this sliding window consists of all arriving events. The remove stream of the view is ordered by timestamp value: The event that has the oldest timestamp value is released first, followed by the next newer events. Note the statement above uses the <literal>rstream</literal> keyword to select ordered events only and uses the <literal>insert into</literal> clause to makes such ordered stream available for subsequent statements to use.
				</para> 

				<para>
					It is up to your application to populate the timestamp property into your events for consideration by the view. The view also works well if you use externally-provided time via timer events. 
				</para> 
			</sect2>

		</sect1>
</chapter>