/**************************************************************************************
 * Copyright (C) 2006 Esper Team. All rights reserved.                                *
 * http://esper.codehaus.org                                                          *
 * ---------------------------------------------------------------------------------- *
 * The software in this package is published under the terms of the GPL license       *
 * a copy of which has been included with this distribution in the license.txt file.  *
 **************************************************************************************/
package net.esper.filter;

import net.esper.event.EventBean;
import net.esper.eql.expression.ExprNode;

/**
 * Adapter for use by {@link FilterParamIndexBooleanExpr} to evaluate boolean expressions, providing
 * events per stream to expression nodes. Generated by @{link FilterSpecParamExprNode} for
 * boolean expression filter parameters.
 */
public class ExprNodeAdapter
{
    private final ExprNode exprNode;
    private EventBean[] prototype;

    /**
     * Ctor.
     * @param exprNode is the boolean expression
     */
    public ExprNodeAdapter(ExprNode exprNode)
    {
        this.exprNode = exprNode;
    }

    /**
     * Provides the prototype events-per-stream where stream zero is the current stream
     * and is filled when the expression is evaluated.
     * @param prototype is the row of events for which stream zero is missing as the current event is filled in later
     */
    public void setPrototype(EventBean[] prototype)
    {
        this.prototype = prototype;
    }

    /**
     * Evaluate the boolean expression given the event as a stream zero event.
     * @param event is the stream zero event (current event)
     * @return boolean result of the expression
     */
    public boolean evaluate(EventBean event)
    {
        EventBean[] eventsPerStream;

        if (prototype == null)
        {
            eventsPerStream = new EventBean[1];
        }
        else
        {
            eventsPerStream = new EventBean[prototype.length];
            for (int i = 1; i < prototype.length; i++)
            {
                eventsPerStream[i] = prototype[i];
            }
        }

        eventsPerStream[0] = event;
        return (Boolean) exprNode.evaluate(eventsPerStream, true);
    }
}
