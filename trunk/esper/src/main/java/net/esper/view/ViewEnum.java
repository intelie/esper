package net.esper.view;

import net.esper.view.std.*;
import net.esper.view.ext.*;
import net.esper.view.window.*;
import net.esper.view.stat.*;

/**
 * Enum for all build-in views.
 */
public enum ViewEnum
{
    /**
     * Length window.
     */
    LENGTH_WINDOW("win", "length", LengthWindowView.class, LengthWindowViewFactory.class, true, null),

    /**
     * Time window.
     */
    TIME_WINDOW("win", "time", TimeWindowView.class, TimeWindowViewFactory.class, true, null),

    /**
     * Time batch.
     */
    TIME_BATCH("win","time_batch", TimeBatchView.class, TimeBatchViewFactory.class, true, null),

    /**
     * Externally timed window.
     */
    EXT_TIMED_WINDOW("win", "ext_timed", ExternallyTimedWindowView.class, ExternallyTimedWindowViewFactory.class, true, null),

    /**
     * Size view.
     */
    SIZE("std", "size", SizeView.class, SizeViewFactory.class, false, null),

    /**
     * Last event.
     */
    LAST_EVENT("std", "lastevent", LastElementView.class, LastElementViewFactory.class, false, null),

    /**
     * Unique.
     */
    UNIQUE_BY_PROPERTY("std", "unique", UniqueByPropertyView.class, UniqueByPropertyViewFactory.class, true, null),

    /**
     * Group-by merge.
     */
    GROUP_MERGE("std", "merge", MergeView.class, MergeViewFactory.class, true, null),

    /**
     * Group-by.
     */
    GROUP_PROPERTY("std", "groupby", GroupByView.class, GroupByViewFactory.class, true, GROUP_MERGE),

    /**
     * Univariate statistics.
     */
    UNIVARIATE_STATISTICS("stat", "uni", UnivariateStatisticsView.class, UnivariateStatisticsViewFactory.class, true, null),

    /**
     * Weighted avg.
     */
    WEIGHTED_AVERAGE("stat", "weighted_avg", WeightedAverageView.class, WeightedAverageViewFactory.class, true, null),

    /**
     * Correlation.
     */
    CORRELATION("stat", "correl", CorrelationView.class, CorrelationViewFactory.class, true, null),

    /**
     * Linest.
     */
    REGRESSION_LINEST("stat", "linest", RegressionLinestView.class, RegressionLinestViewFactory.class, true, null),

    /**
     * Cubes.
     */
    MULTIDIM_VIEW("stat", "cube", MultiDimStatsView.class, MultiDimStatsViewFactory.class, true, null),

    /**
     * Sorted window.
     */
    SORT_WINDOW("ext", "sort", SortWindowView.class, SortWindowViewFactory.class, true, null);


    private final String namespace;
    private final String name;
    private final Class clazz;
    private final Class factoryClass;
    private final boolean isRequiresParameters;
    private final ViewEnum mergeView;

    ViewEnum(String namespace, String name, Class clazz, Class factoryClass, boolean isRequiresParameters, ViewEnum mergeView)
    {
        this.namespace = namespace;
        this.name = name;
        this.clazz = clazz;
        this.factoryClass = factoryClass;
        this.isRequiresParameters = isRequiresParameters;
        this.mergeView = mergeView;
    }

    /**
     * Returns namespace that the object belongs to.
     * @return namespace
     */
    public String getNamespace()
    {
        return namespace;
    }

    /**
     * Returns name of the view that can be used to reference the view in a view expression.
     * @return short name of view
     */
    public String getName()
    {
        return name;
    }

    /**
     * Gets the implementation class underlying the view.
     * @return view implementation class
     */
    public Class getClazz()
    {
        return clazz;
    }

    /**
     * Returns true if the view requires one or more parameters, false if the view doesn't require any parameters.
     * @return true if at least one parameter is mandatory, false if there are no mandatory parameters
     */
    public boolean isRequiresParameters()
    {
        return isRequiresParameters;
    }

    /**
     * Returns the enumeration value of the view for merging the data generated by another view.
     * @return view enum for the merge view
     */
    public ViewEnum getMergeView()
    {
        return mergeView;
    }

    /**
     * Returns a view's factory class.
     * @return class of view factory
     */
    public Class getFactoryClass()
    {
        return factoryClass;
    }

    /**
     * Returns the view enumeration value given the name of the view.
     * @param namespace is the namespace name of the view
     * @param name is the short name of the view as used in view expressions
     * @return view enumeration value, or null if no such view name is among the enumerated values
     */
    public static ViewEnum forName(String namespace, String name)
    {
        for (ViewEnum viewEnum : ViewEnum.values())
        {
            if ((viewEnum.namespace.equals(namespace)) && (viewEnum.name.equals(name)))
            {
                return viewEnum;
            }
        }

        return null;
    }
}
