// $ANTLR 3.1.1 EsperEPL2Grammar.g 2009-05-05 16:55:40

  package com.espertech.esper.epl.generated;


import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.tree.*;

public class EsperEPL2GrammarParser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "CREATE", "WINDOW", "IN_SET", "BETWEEN", "LIKE", "REGEXP", "ESCAPE", "OR_EXPR", "AND_EXPR", "NOT_EXPR", "EVERY_EXPR", "RESUME_EXPR", "WHERE", "AS", "SUM", "AVG", "MAX", "MIN", "COALESCE", "MEDIAN", "STDDEV", "AVEDEV", "COUNT", "SELECT", "CASE", "CASE2", "ELSE", "WHEN", "THEN", "END", "FROM", "OUTER", "INNER", "JOIN", "LEFT", "RIGHT", "FULL", "ON", "IS", "BY", "GROUP", "HAVING", "DISTINCT", "ALL", "ANY", "SOME", "OUTPUT", "EVENTS", "FIRST", "LAST", "INSERT", "INTO", "ORDER", "ASC", "DESC", "RSTREAM", "ISTREAM", "IRSTREAM", "UNIDIRECTIONAL", "RETAINUNION", "RETAININTERSECTION", "PATTERN", "SQL", "METADATASQL", "PREVIOUS", "PRIOR", "EXISTS", "WEEKDAY", "LW", "INSTANCEOF", "CAST", "CURRENT_TIMESTAMP", "DELETE", "SNAPSHOT", "SET", "VARIABLE", "UNTIL", "AT", "TIMEPERIOD_DAY", "TIMEPERIOD_DAYS", "TIMEPERIOD_HOUR", "TIMEPERIOD_HOURS", "TIMEPERIOD_MINUTE", "TIMEPERIOD_MINUTES", "TIMEPERIOD_SEC", "TIMEPERIOD_SECOND", "TIMEPERIOD_SECONDS", "TIMEPERIOD_MILLISEC", "TIMEPERIOD_MILLISECOND", "TIMEPERIOD_MILLISECONDS", "BOOLEAN_TRUE", "BOOLEAN_FALSE", "VALUE_NULL", "ROW_LIMIT_EXPR", "OFFSET", "NUMERIC_PARAM_RANGE", "NUMERIC_PARAM_LIST", "NUMERIC_PARAM_FREQUENCY", "OBJECT_PARAM_ORDERED_EXPR", "FOLLOWED_BY_EXPR", "ARRAY_PARAM_LIST", "PATTERN_FILTER_EXPR", "PATTERN_NOT_EXPR", "EVENT_FILTER_EXPR", "EVENT_FILTER_PROPERTY_EXPR", "EVENT_FILTER_PROPERTY_EXPR_ATOM", "EVENT_FILTER_DISTINCT_EXPR", "EVENT_FILTER_DISTINCT_EXPR_ATOM", "PROPERTY_SELECTION_ELEMENT_EXPR", "PROPERTY_SELECTION_STREAM", "PROPERTY_WILDCARD_SELECT", "EVENT_FILTER_IDENT", "EVENT_FILTER_PARAM", "EVENT_FILTER_RANGE", "EVENT_FILTER_NOT_RANGE", "EVENT_FILTER_IN", "EVENT_FILTER_NOT_IN", "EVENT_FILTER_BETWEEN", "EVENT_FILTER_NOT_BETWEEN", "CLASS_IDENT", "GUARD_EXPR", "OBSERVER_EXPR", "VIEW_EXPR", "PATTERN_INCL_EXPR", "DATABASE_JOIN_EXPR", "WHERE_EXPR", "HAVING_EXPR", "EVAL_BITWISE_EXPR", "EVAL_AND_EXPR", "EVAL_OR_EXPR", "EVAL_EQUALS_EXPR", "EVAL_NOTEQUALS_EXPR", "EVAL_EQUALS_GROUP_EXPR", "EVAL_NOTEQUALS_GROUP_EXPR", "EVAL_IDENT", "SELECTION_EXPR", "SELECTION_ELEMENT_EXPR", "SELECTION_STREAM", "STREAM_EXPR", "OUTERJOIN_EXPR", "INNERJOIN_EXPR", "LEFT_OUTERJOIN_EXPR", "RIGHT_OUTERJOIN_EXPR", "FULL_OUTERJOIN_EXPR", "GROUP_BY_EXPR", "ORDER_BY_EXPR", "ORDER_ELEMENT_EXPR", "EVENT_PROP_EXPR", "EVENT_PROP_SIMPLE", "EVENT_PROP_MAPPED", "EVENT_PROP_INDEXED", "EVENT_PROP_DYNAMIC_SIMPLE", "EVENT_PROP_DYNAMIC_INDEXED", "EVENT_PROP_DYNAMIC_MAPPED", "EVENT_LIMIT_EXPR", "TIMEPERIOD_LIMIT_EXPR", "CRONTAB_LIMIT_EXPR", "CRONTAB_LIMIT_EXPR_PARAM", "WHEN_LIMIT_EXPR", "INSERTINTO_EXPR", "INSERTINTO_EXPRCOL", "CONCAT", "LIB_FUNCTION", "UNARY_MINUS", "TIME_PERIOD", "ARRAY_EXPR", "DAY_PART", "HOUR_PART", "MINUTE_PART", "SECOND_PART", "MILLISECOND_PART", "NOT_IN_SET", "NOT_BETWEEN", "NOT_LIKE", "NOT_REGEXP", "DBSELECT_EXPR", "DBFROM_CLAUSE", "DBWHERE_CLAUSE", "WILDCARD_SELECT", "INSERTINTO_STREAM_NAME", "IN_RANGE", "NOT_IN_RANGE", "SUBSELECT_EXPR", "SUBSELECT_GROUP_EXPR", "EXISTS_SUBSELECT_EXPR", "IN_SUBSELECT_EXPR", "NOT_IN_SUBSELECT_EXPR", "IN_SUBSELECT_QUERY_EXPR", "LAST_OPERATOR", "WEEKDAY_OPERATOR", "SUBSTITUTION", "CAST_EXPR", "CREATE_WINDOW_EXPR", "CREATE_WINDOW_SELECT_EXPR", "ON_EXPR", "ON_DELETE_EXPR", "ON_SELECT_EXPR", "ON_SELECT_INSERT_EXPR", "ON_SELECT_INSERT_OUTPUT", "ON_EXPR_FROM", "ON_SET_EXPR", "CREATE_VARIABLE_EXPR", "METHOD_JOIN_EXPR", "MATCH_UNTIL_EXPR", "MATCH_UNTIL_RANGE_HALFOPEN", "MATCH_UNTIL_RANGE_HALFCLOSED", "MATCH_UNTIL_RANGE_CLOSED", "MATCH_UNTIL_RANGE_BOUNDED", "CREATE_WINDOW_COL_TYPE_LIST", "CREATE_WINDOW_COL_TYPE", "NUMBERSETSTAR", "ANNOTATION", "ANNOTATION_ARRAY", "ANNOTATION_VALUE", "INT_TYPE", "LONG_TYPE", "FLOAT_TYPE", "DOUBLE_TYPE", "STRING_TYPE", "BOOL_TYPE", "NULL_TYPE", "NUM_DOUBLE", "EPL_EXPR", "COMMA", "IDENT", "EQUALS", "DOT", "LPAREN", "RPAREN", "STAR", "LBRACK", "RBRACK", "COLON", "STRING_LITERAL", "QUOTED_STRING_LITERAL", "BAND", "BOR", "BXOR", "SQL_NE", "NOT_EQUAL", "LT", "GT", "LE", "GE", "LOR", "PLUS", "MINUS", "DIV", "MOD", "LCURLY", "RCURLY", "NUM_INT", "FOLLOWED_BY", "QUESTION", "ESCAPECHAR", "TICKED_STRING_LITERAL", "NUM_LONG", "NUM_FLOAT", "EQUAL", "LNOT", "BNOT", "DIV_ASSIGN", "PLUS_ASSIGN", "INC", "MINUS_ASSIGN", "DEC", "STAR_ASSIGN", "MOD_ASSIGN", "SR", "SR_ASSIGN", "BSR", "BSR_ASSIGN", "SL", "SL_ASSIGN", "BXOR_ASSIGN", "BOR_ASSIGN", "BAND_ASSIGN", "LAND", "SEMI", "EMAILAT", "WS", "SL_COMMENT", "ML_COMMENT", "EscapeSequence", "UnicodeEscape", "OctalEscape", "HexDigit", "EXPONENT", "FLOAT_SUFFIX"
    };
    public static final int CRONTAB_LIMIT_EXPR=160;
    public static final int FLOAT_SUFFIX=292;
    public static final int STAR=233;
    public static final int NUMERIC_PARAM_LIST=100;
    public static final int MOD=252;
    public static final int ISTREAM=60;
    public static final int OUTERJOIN_EXPR=143;
    public static final int BSR=274;
    public static final int EOF=-1;
    public static final int LIB_FUNCTION=166;
    public static final int TIMEPERIOD_MILLISECONDS=93;
    public static final int FULL_OUTERJOIN_EXPR=147;
    public static final int INC=267;
    public static final int LNOT=263;
    public static final int RPAREN=232;
    public static final int CREATE=4;
    public static final int STRING_LITERAL=237;
    public static final int BSR_ASSIGN=275;
    public static final int CAST_EXPR=195;
    public static final int STREAM_EXPR=142;
    public static final int TIMEPERIOD_SECONDS=90;
    public static final int NOT_EQUAL=243;
    public static final int METADATASQL=67;
    public static final int EVENT_FILTER_PROPERTY_EXPR=108;
    public static final int REGEXP=9;
    public static final int FOLLOWED_BY_EXPR=103;
    public static final int FOLLOWED_BY=256;
    public static final int HOUR_PART=171;
    public static final int RBRACK=235;
    public static final int MATCH_UNTIL_RANGE_CLOSED=210;
    public static final int GE=247;
    public static final int METHOD_JOIN_EXPR=206;
    public static final int ASC=57;
    public static final int IN_SET=6;
    public static final int EVENT_FILTER_EXPR=107;
    public static final int MINUS_ASSIGN=268;
    public static final int ELSE=30;
    public static final int EVENT_FILTER_NOT_IN=120;
    public static final int NUM_DOUBLE=225;
    public static final int INSERTINTO_STREAM_NAME=183;
    public static final int LCURLY=253;
    public static final int TIMEPERIOD_MILLISEC=91;
    public static final int UNARY_MINUS=167;
    public static final int RETAINUNION=63;
    public static final int DBWHERE_CLAUSE=181;
    public static final int MEDIAN=23;
    public static final int EVENTS=51;
    public static final int AND_EXPR=12;
    public static final int GROUP=44;
    public static final int EVENT_FILTER_NOT_RANGE=118;
    public static final int WS=284;
    public static final int EMAILAT=283;
    public static final int SUBSELECT_GROUP_EXPR=187;
    public static final int ON_SELECT_INSERT_EXPR=201;
    public static final int ESCAPECHAR=258;
    public static final int SL_COMMENT=285;
    public static final int NULL_TYPE=224;
    public static final int MATCH_UNTIL_RANGE_HALFOPEN=208;
    public static final int GT=245;
    public static final int BNOT=264;
    public static final int WHERE_EXPR=129;
    public static final int END=33;
    public static final int LAND=281;
    public static final int INNERJOIN_EXPR=144;
    public static final int NOT_REGEXP=178;
    public static final int MATCH_UNTIL_EXPR=207;
    public static final int EVENT_PROP_EXPR=151;
    public static final int LBRACK=234;
    public static final int VIEW_EXPR=126;
    public static final int ANNOTATION=215;
    public static final int LONG_TYPE=219;
    public static final int EVENT_FILTER_PROPERTY_EXPR_ATOM=109;
    public static final int TIMEPERIOD_SEC=88;
    public static final int TICKED_STRING_LITERAL=259;
    public static final int ON_SELECT_EXPR=200;
    public static final int MINUTE_PART=172;
    public static final int PATTERN_NOT_EXPR=106;
    public static final int SQL_NE=242;
    public static final int SUM=18;
    public static final int HexDigit=290;
    public static final int RESUME_EXPR=15;
    public static final int LPAREN=231;
    public static final int IN_SUBSELECT_EXPR=189;
    public static final int AT=81;
    public static final int AS=17;
    public static final int OR_EXPR=11;
    public static final int BOOLEAN_TRUE=94;
    public static final int THEN=32;
    public static final int NOT_IN_RANGE=185;
    public static final int OFFSET=98;
    public static final int AVG=19;
    public static final int LEFT=38;
    public static final int PREVIOUS=68;
    public static final int SECOND_PART=173;
    public static final int IDENT=228;
    public static final int DATABASE_JOIN_EXPR=128;
    public static final int PLUS=249;
    public static final int BXOR=241;
    public static final int CASE2=29;
    public static final int TIMEPERIOD_DAY=82;
    public static final int EXISTS=70;
    public static final int EVENT_PROP_INDEXED=154;
    public static final int TIMEPERIOD_MILLISECOND=92;
    public static final int EVAL_NOTEQUALS_EXPR=135;
    public static final int MATCH_UNTIL_RANGE_HALFCLOSED=209;
    public static final int CREATE_VARIABLE_EXPR=205;
    public static final int CREATE_WINDOW_COL_TYPE=213;
    public static final int LIKE=8;
    public static final int OUTER=35;
    public static final int BY=43;
    public static final int ARRAY_PARAM_LIST=104;
    public static final int RIGHT_OUTERJOIN_EXPR=146;
    public static final int NUMBERSETSTAR=214;
    public static final int LAST_OPERATOR=192;
    public static final int PATTERN_FILTER_EXPR=105;
    public static final int EVAL_AND_EXPR=132;
    public static final int LEFT_OUTERJOIN_EXPR=145;
    public static final int EPL_EXPR=226;
    public static final int GROUP_BY_EXPR=148;
    public static final int SET=78;
    public static final int RIGHT=39;
    public static final int HAVING=45;
    public static final int INSTANCEOF=73;
    public static final int MIN=21;
    public static final int EVENT_PROP_SIMPLE=152;
    public static final int MINUS=250;
    public static final int SEMI=282;
    public static final int STAR_ASSIGN=270;
    public static final int COLON=236;
    public static final int EVAL_EQUALS_GROUP_EXPR=136;
    public static final int BAND_ASSIGN=280;
    public static final int CRONTAB_LIMIT_EXPR_PARAM=161;
    public static final int VALUE_NULL=96;
    public static final int NOT_IN_SET=175;
    public static final int EVENT_PROP_DYNAMIC_SIMPLE=155;
    public static final int SL=276;
    public static final int NOT_IN_SUBSELECT_EXPR=190;
    public static final int WHEN=31;
    public static final int GUARD_EXPR=124;
    public static final int SR=272;
    public static final int RCURLY=254;
    public static final int PLUS_ASSIGN=266;
    public static final int EVENT_FILTER_DISTINCT_EXPR_ATOM=111;
    public static final int EXISTS_SUBSELECT_EXPR=188;
    public static final int DAY_PART=170;
    public static final int EVENT_FILTER_IN=119;
    public static final int DIV=251;
    public static final int OBJECT_PARAM_ORDERED_EXPR=102;
    public static final int OctalEscape=289;
    public static final int BETWEEN=7;
    public static final int MILLISECOND_PART=174;
    public static final int PRIOR=69;
    public static final int FIRST=52;
    public static final int ROW_LIMIT_EXPR=97;
    public static final int SELECTION_EXPR=139;
    public static final int LOR=248;
    public static final int CAST=74;
    public static final int LW=72;
    public static final int WILDCARD_SELECT=182;
    public static final int EXPONENT=291;
    public static final int LT=244;
    public static final int PATTERN_INCL_EXPR=127;
    public static final int ORDER_BY_EXPR=149;
    public static final int BOOL_TYPE=223;
    public static final int MOD_ASSIGN=271;
    public static final int ANNOTATION_ARRAY=216;
    public static final int CASE=28;
    public static final int IN_SUBSELECT_QUERY_EXPR=191;
    public static final int EQUALS=229;
    public static final int COUNT=26;
    public static final int RETAININTERSECTION=64;
    public static final int DIV_ASSIGN=265;
    public static final int SL_ASSIGN=277;
    public static final int PATTERN=65;
    public static final int SQL=66;
    public static final int WEEKDAY=71;
    public static final int FULL=40;
    public static final int INSERT=54;
    public static final int ESCAPE=10;
    public static final int ARRAY_EXPR=169;
    public static final int LAST=53;
    public static final int BOOLEAN_FALSE=95;
    public static final int EVAL_NOTEQUALS_GROUP_EXPR=137;
    public static final int SELECT=27;
    public static final int INTO=55;
    public static final int FLOAT_TYPE=220;
    public static final int TIMEPERIOD_SECOND=89;
    public static final int COALESCE=22;
    public static final int EVENT_FILTER_BETWEEN=121;
    public static final int ANNOTATION_VALUE=217;
    public static final int SUBSELECT_EXPR=186;
    public static final int NUMERIC_PARAM_RANGE=99;
    public static final int CONCAT=165;
    public static final int CLASS_IDENT=123;
    public static final int ON_EXPR=198;
    public static final int CREATE_WINDOW_EXPR=196;
    public static final int PROPERTY_SELECTION_STREAM=113;
    public static final int ON_DELETE_EXPR=199;
    public static final int NUM_LONG=260;
    public static final int ON=41;
    public static final int TIME_PERIOD=168;
    public static final int DOUBLE_TYPE=221;
    public static final int DELETE=76;
    public static final int INT_TYPE=218;
    public static final int EVERY_EXPR=14;
    public static final int EVAL_BITWISE_EXPR=131;
    public static final int ORDER_ELEMENT_EXPR=150;
    public static final int TIMEPERIOD_HOURS=85;
    public static final int VARIABLE=79;
    public static final int SUBSTITUTION=194;
    public static final int UNTIL=80;
    public static final int STRING_TYPE=222;
    public static final int NUM_INT=255;
    public static final int ON_SET_EXPR=204;
    public static final int STDDEV=24;
    public static final int NUM_FLOAT=261;
    public static final int ON_EXPR_FROM=203;
    public static final int FROM=34;
    public static final int DISTINCT=46;
    public static final int EscapeSequence=287;
    public static final int OUTPUT=50;
    public static final int PROPERTY_SELECTION_ELEMENT_EXPR=112;
    public static final int WEEKDAY_OPERATOR=193;
    public static final int EVENT_FILTER_DISTINCT_EXPR=110;
    public static final int DEC=269;
    public static final int CREATE_WINDOW_COL_TYPE_LIST=212;
    public static final int WHERE=16;
    public static final int INNER=36;
    public static final int BXOR_ASSIGN=278;
    public static final int NUMERIC_PARAM_FREQUENCY=101;
    public static final int SNAPSHOT=77;
    public static final int ORDER=56;
    public static final int EVENT_FILTER_PARAM=116;
    public static final int EVENT_PROP_DYNAMIC_MAPPED=157;
    public static final int IRSTREAM=61;
    public static final int MAX=20;
    public static final int TIMEPERIOD_DAYS=83;
    public static final int EVENT_FILTER_RANGE=117;
    public static final int ML_COMMENT=286;
    public static final int EVENT_PROP_DYNAMIC_INDEXED=156;
    public static final int BOR_ASSIGN=279;
    public static final int COMMA=227;
    public static final int IS=42;
    public static final int WHEN_LIMIT_EXPR=162;
    public static final int TIMEPERIOD_LIMIT_EXPR=159;
    public static final int SOME=49;
    public static final int EQUAL=262;
    public static final int BOR=240;
    public static final int TIMEPERIOD_HOUR=84;
    public static final int ALL=47;
    public static final int EVENT_FILTER_NOT_BETWEEN=122;
    public static final int IN_RANGE=184;
    public static final int DOT=230;
    public static final int CURRENT_TIMESTAMP=75;
    public static final int PROPERTY_WILDCARD_SELECT=114;
    public static final int INSERTINTO_EXPR=163;
    public static final int UNIDIRECTIONAL=62;
    public static final int HAVING_EXPR=130;
    public static final int MATCH_UNTIL_RANGE_BOUNDED=211;
    public static final int EVAL_EQUALS_EXPR=134;
    public static final int TIMEPERIOD_MINUTES=87;
    public static final int RSTREAM=59;
    public static final int NOT_LIKE=177;
    public static final int EVENT_LIMIT_EXPR=158;
    public static final int TIMEPERIOD_MINUTE=86;
    public static final int NOT_BETWEEN=176;
    public static final int EVAL_OR_EXPR=133;
    public static final int ON_SELECT_INSERT_OUTPUT=202;
    public static final int BAND=239;
    public static final int QUOTED_STRING_LITERAL=238;
    public static final int JOIN=37;
    public static final int ANY=48;
    public static final int NOT_EXPR=13;
    public static final int QUESTION=257;
    public static final int OBSERVER_EXPR=125;
    public static final int EVENT_FILTER_IDENT=115;
    public static final int EVENT_PROP_MAPPED=153;
    public static final int UnicodeEscape=288;
    public static final int AVEDEV=25;
    public static final int DBSELECT_EXPR=179;
    public static final int SELECTION_ELEMENT_EXPR=140;
    public static final int CREATE_WINDOW_SELECT_EXPR=197;
    public static final int WINDOW=5;
    public static final int INSERTINTO_EXPRCOL=164;
    public static final int DESC=58;
    public static final int SELECTION_STREAM=141;
    public static final int SR_ASSIGN=273;
    public static final int LE=246;
    public static final int DBFROM_CLAUSE=180;
    public static final int EVAL_IDENT=138;

    // delegates
    // delegators


        public EsperEPL2GrammarParser(TokenStream input) {
            this(input, new RecognizerSharedState());
        }
        public EsperEPL2GrammarParser(TokenStream input, RecognizerSharedState state) {
            super(input, state);
             
        }
        
    protected TreeAdaptor adaptor = new CommonTreeAdaptor();

    public void setTreeAdaptor(TreeAdaptor adaptor) {
        this.adaptor = adaptor;
    }
    public TreeAdaptor getTreeAdaptor() {
        return adaptor;
    }

    public String[] getTokenNames() { return EsperEPL2GrammarParser.tokenNames; }
    public String getGrammarFileName() { return "EsperEPL2Grammar.g"; }


      // provide nice error messages
      private Stack<String> paraphrases = new Stack<String>();
      
      // static information initialized once
      private static Map<Integer, String> lexerTokenParaphases = new HashMap<Integer, String>();
      private static Map<Integer, String> parserTokenParaphases = new HashMap<Integer, String>();
      private static java.util.Set<String> parserKeywordSet = new java.util.HashSet<String>();
        
      public Stack getParaphrases() {
        return paraphrases;
      }

      public java.util.Set<String> getKeywords() {
      	getParserTokenParaphrases();
      	return parserKeywordSet;
      }
      
      public String removeTicks(String tickedString) {
      	return com.espertech.esper.epl.parse.ASTConstantHelper.removeTicks(tickedString);
      }
      
      public Map<Integer, String> getLexerTokenParaphrases() {
        if (lexerTokenParaphases.size() == 0) {
          	lexerTokenParaphases.put(IDENT, "an identifier");
          	lexerTokenParaphases.put(NUM_INT, "a numeric literal");
    	lexerTokenParaphases.put(FOLLOWED_BY, "an followed-by '->'");
    	lexerTokenParaphases.put(EQUALS, "an equals '='");
    	lexerTokenParaphases.put(SQL_NE, "a sql-style not equals '<>'");
    	lexerTokenParaphases.put(QUESTION, "a questionmark '?'");
    	lexerTokenParaphases.put(LPAREN, "an opening parenthesis '('");
    	lexerTokenParaphases.put(RPAREN, "a closing parenthesis ')'");
    	lexerTokenParaphases.put(LBRACK, "a left angle bracket '['");
    	lexerTokenParaphases.put(RBRACK, "a right angle bracket ']'");
    	lexerTokenParaphases.put(LCURLY, "a left curly bracket '{'");
    	lexerTokenParaphases.put(RCURLY, "a right curly bracket '}'");
    	lexerTokenParaphases.put(COLON, "a colon ':'");
    	lexerTokenParaphases.put(COMMA, "a comma ','");
    	lexerTokenParaphases.put(EQUAL, "an equals compare '=='");
    	lexerTokenParaphases.put(LNOT, "a not '!'");
    	lexerTokenParaphases.put(BNOT, "a binary not '~'");
    	lexerTokenParaphases.put(NOT_EQUAL, "a not equals '!='");
    	lexerTokenParaphases.put(DIV, "a division operator '\'");
    	lexerTokenParaphases.put(DIV_ASSIGN, "a division assign '/='");
    	lexerTokenParaphases.put(PLUS, "a plus operator '+'");
    	lexerTokenParaphases.put(PLUS_ASSIGN, "a plus assign '+='");
    	lexerTokenParaphases.put(INC, "an increment operator '++'");
    	lexerTokenParaphases.put(MINUS, "a minus '-'");
    	lexerTokenParaphases.put(MINUS_ASSIGN, "a minus assign '-='");
    	lexerTokenParaphases.put(DEC, "a decrement operator '--'");
    	lexerTokenParaphases.put(STAR, "a star '*'");
    	lexerTokenParaphases.put(STAR_ASSIGN, "a star assign '*='");
    	lexerTokenParaphases.put(MOD, "a modulo");
    	lexerTokenParaphases.put(MOD_ASSIGN, "a modulo assign");
    	lexerTokenParaphases.put(SR, "a shift right '>>'");
    	lexerTokenParaphases.put(SR_ASSIGN, "a shift right assign '>>='");
    	lexerTokenParaphases.put(BSR, "a binary shift right '>>>'");
    	lexerTokenParaphases.put(BSR_ASSIGN, "a binary shift right assign '>>>='");
    	lexerTokenParaphases.put(GE, "a greater equals '>='");
    	lexerTokenParaphases.put(GT, "a greater then '>'");
    	lexerTokenParaphases.put(SL, "a shift left '<<'");
    	lexerTokenParaphases.put(SL_ASSIGN, "a shift left assign '<<='");
    	lexerTokenParaphases.put(LE, "a less equals '<='");
    	lexerTokenParaphases.put(LT, "a lesser then '<'");
    	lexerTokenParaphases.put(BXOR, "a binary xor '^'");
    	lexerTokenParaphases.put(BXOR_ASSIGN, "a binary xor assign '^='");
    	lexerTokenParaphases.put(BOR, "a binary or '|'");
    	lexerTokenParaphases.put(BOR_ASSIGN, "a binary or assign '|='");
    	lexerTokenParaphases.put(LOR, "a logical or '||'");
    	lexerTokenParaphases.put(BAND, "a binary and '&'");
    	lexerTokenParaphases.put(BAND_ASSIGN, "a binary and assign '&='");
    	lexerTokenParaphases.put(LAND, "a logical and '&&'");
    	lexerTokenParaphases.put(SEMI, "a semicolon ';'");
    	lexerTokenParaphases.put(DOT, "a dot '.'");		
        }
        return lexerTokenParaphases;
      }
      
      public Map<Integer, String> getParserTokenParaphrases() {
        if (parserTokenParaphases.size() == 0) {
    	parserTokenParaphases.put(CREATE, "'create'");
    	parserTokenParaphases.put(WINDOW, "'window'");
    	parserTokenParaphases.put(IN_SET, "'in'");
    	parserTokenParaphases.put(BETWEEN, "'between'");
    	parserTokenParaphases.put(LIKE, "'like'");
    	parserTokenParaphases.put(REGEXP, "'regexp'");
    	parserTokenParaphases.put(ESCAPE, "'escape'");
    	parserTokenParaphases.put(OR_EXPR, "'or'");
    	parserTokenParaphases.put(AND_EXPR, "'and'");
    	parserTokenParaphases.put(NOT_EXPR, "'not'");
    	parserTokenParaphases.put(EVERY_EXPR, "'every'");
    	parserTokenParaphases.put(RESUME_EXPR, "'resume'");
    	parserTokenParaphases.put(WHERE, "'where'");
    	parserTokenParaphases.put(AS, "'as'");	
    	parserTokenParaphases.put(SUM, "'sum'");
    	parserTokenParaphases.put(AVG, "'avg'");
    	parserTokenParaphases.put(MAX, "'max'");
    	parserTokenParaphases.put(MIN, "'min'");
    	parserTokenParaphases.put(COALESCE, "'coalesce'");
    	parserTokenParaphases.put(MEDIAN, "'median'");
    	parserTokenParaphases.put(STDDEV, "'stddev'");
    	parserTokenParaphases.put(AVEDEV, "'avedev'");
    	parserTokenParaphases.put(COUNT, "'count'");
    	parserTokenParaphases.put(SELECT, "'select'");
    	parserTokenParaphases.put(CASE, "'case'");
    	parserTokenParaphases.put(CASE2, "'case'");
    	parserTokenParaphases.put(ELSE, "'else'");
    	parserTokenParaphases.put(WHEN, "'when'");
    	parserTokenParaphases.put(THEN, "'then'");
    	parserTokenParaphases.put(END, "'end'");
    	parserTokenParaphases.put(FROM, "'from'");
    	parserTokenParaphases.put(OUTER, "'outer'");
    	parserTokenParaphases.put(INNER, "'inner'");
    	parserTokenParaphases.put(JOIN, "'join'");
    	parserTokenParaphases.put(LEFT, "'left'");
    	parserTokenParaphases.put(RIGHT, "'right'");
    	parserTokenParaphases.put(FULL, "'full'");
    	parserTokenParaphases.put(ON, "'on'");	
    	parserTokenParaphases.put(IS, "'is'");
    	parserTokenParaphases.put(BY, "'by'");
    	parserTokenParaphases.put(GROUP, "'group'");
    	parserTokenParaphases.put(HAVING, "'having'");
    	parserTokenParaphases.put(DISTINCT, "'distinct'");
    	parserTokenParaphases.put(ALL, "'all'");
    	parserTokenParaphases.put(ANY, "'any'");
    	parserTokenParaphases.put(SOME, "'some'");
    	parserTokenParaphases.put(OUTPUT, "'output'");
    	parserTokenParaphases.put(EVENTS, "'events'");
    	parserTokenParaphases.put(FIRST, "'first'");
    	parserTokenParaphases.put(LAST, "'last'");
    	parserTokenParaphases.put(INSERT, "'insert'");
    	parserTokenParaphases.put(INTO, "'into'");
    	parserTokenParaphases.put(ORDER, "'order'");
    	parserTokenParaphases.put(ASC, "'asc'");
    	parserTokenParaphases.put(DESC, "'desc'");
    	parserTokenParaphases.put(RSTREAM, "'rstream'");
    	parserTokenParaphases.put(ISTREAM, "'istream'");
    	parserTokenParaphases.put(IRSTREAM, "'irstream'");
    	parserTokenParaphases.put(UNIDIRECTIONAL, "'unidirectional'");
    	parserTokenParaphases.put(RETAINUNION, "'retain-union'");
    	parserTokenParaphases.put(RETAININTERSECTION, "'retain-intersection'");
    	parserTokenParaphases.put(PATTERN, "'pattern'");
    	parserTokenParaphases.put(SQL, "'sql'");
    	parserTokenParaphases.put(METADATASQL, "'metadatasql'");
    	parserTokenParaphases.put(PREVIOUS, "'prev'");
    	parserTokenParaphases.put(PRIOR, "'prior'");
    	parserTokenParaphases.put(EXISTS, "'exists'");
    	parserTokenParaphases.put(WEEKDAY, "'weekday'");
    	parserTokenParaphases.put(LW, "'lastweekday'");
    	parserTokenParaphases.put(INSTANCEOF, "'instanceof'");
    	parserTokenParaphases.put(CAST, "'cast'");
    	parserTokenParaphases.put(CURRENT_TIMESTAMP, "'current_timestamp'");
    	parserTokenParaphases.put(DELETE, "'delete'");
    	parserTokenParaphases.put(SNAPSHOT, "'snapshot'");
    	parserTokenParaphases.put(SET, "'set'");
    	parserTokenParaphases.put(VARIABLE, "'variable'");
    	parserTokenParaphases.put(UNTIL, "'until'");
    	parserTokenParaphases.put(AT, "'at'");
    	parserTokenParaphases.put(TIMEPERIOD_DAY, "'day'");
    	parserTokenParaphases.put(TIMEPERIOD_DAYS, "'days'");
    	parserTokenParaphases.put(TIMEPERIOD_HOUR, "'hour'");
    	parserTokenParaphases.put(TIMEPERIOD_HOURS, "'hours'");
    	parserTokenParaphases.put(TIMEPERIOD_MINUTE, "'minute'");
    	parserTokenParaphases.put(TIMEPERIOD_MINUTES, "'minutes'");
    	parserTokenParaphases.put(TIMEPERIOD_SEC, "'sec'");
    	parserTokenParaphases.put(TIMEPERIOD_SECOND, "'second'");
    	parserTokenParaphases.put(TIMEPERIOD_SECONDS, "'seconds'");
    	parserTokenParaphases.put(TIMEPERIOD_MILLISEC, "'msec'");
    	parserTokenParaphases.put(TIMEPERIOD_MILLISECOND, "'millisecond'");
    	parserTokenParaphases.put(TIMEPERIOD_MILLISECONDS, "'milliseconds'");
    	parserTokenParaphases.put(BOOLEAN_TRUE, "'true'");
    	parserTokenParaphases.put(BOOLEAN_FALSE, "'false'");
    	parserTokenParaphases.put(VALUE_NULL, "'null'");
    	parserTokenParaphases.put(ROW_LIMIT_EXPR, "'limit'");
    	parserTokenParaphases.put(OFFSET, "'offset'");

    	parserKeywordSet = new java.util.TreeSet<String>(parserTokenParaphases.values());
        }
        return parserTokenParaphases;
      }

      protected void mismatch(IntStream input, int ttype, BitSet follow) throws RecognitionException {
        throw new MismatchedTokenException(ttype, input);  
      }

      public void recoverFromMismatchedToken(IntStream intStream, RecognitionException recognitionException, int i, BitSet bitSet) throws RecognitionException {
        throw recognitionException;
      }

      public Object recoverFromMismatchedSet(IntStream intStream, RecognitionException recognitionException, BitSet bitSet) throws RecognitionException {
        throw recognitionException;
      }

      protected boolean recoverFromMismatchedElement(IntStream intStream, RecognitionException recognitionException, BitSet bitSet) {
        throw new RuntimeException("Error recovering from mismatched element: " + recognitionException.getMessage(), recognitionException);
      }
      public void displayRecognitionError(String[] tokenNames,
                                            RecognitionException e) {
        throw new RuntimeException(e);
      }


    public static class startPatternExpressionRule_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "startPatternExpressionRule"
    // EsperEPL2Grammar.g:480:1: startPatternExpressionRule : ( annotationNoEnum )* patternExpression EOF ;
    public final EsperEPL2GrammarParser.startPatternExpressionRule_return startPatternExpressionRule() throws RecognitionException {
        EsperEPL2GrammarParser.startPatternExpressionRule_return retval = new EsperEPL2GrammarParser.startPatternExpressionRule_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token EOF3=null;
        EsperEPL2GrammarParser.annotationNoEnum_return annotationNoEnum1 = null;

        EsperEPL2GrammarParser.patternExpression_return patternExpression2 = null;


        CommonTree EOF3_tree=null;

        try {
            // EsperEPL2Grammar.g:481:2: ( ( annotationNoEnum )* patternExpression EOF )
            // EsperEPL2Grammar.g:481:4: ( annotationNoEnum )* patternExpression EOF
            {
            root_0 = (CommonTree)adaptor.nil();

            // EsperEPL2Grammar.g:481:4: ( annotationNoEnum )*
            loop1:
            do {
                int alt1=2;
                int LA1_0 = input.LA(1);

                if ( (LA1_0==EMAILAT) ) {
                    alt1=1;
                }


                switch (alt1) {
            	case 1 :
            	    // EsperEPL2Grammar.g:481:4: annotationNoEnum
            	    {
            	    pushFollow(FOLLOW_annotationNoEnum_in_startPatternExpressionRule1401);
            	    annotationNoEnum1=annotationNoEnum();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationNoEnum1.getTree());

            	    }
            	    break;

            	default :
            	    break loop1;
                }
            } while (true);

            pushFollow(FOLLOW_patternExpression_in_startPatternExpressionRule1406);
            patternExpression2=patternExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, patternExpression2.getTree());
            EOF3=(Token)match(input,EOF,FOLLOW_EOF_in_startPatternExpressionRule1410); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "startPatternExpressionRule"

    public static class startEPLExpressionRule_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "startEPLExpressionRule"
    // EsperEPL2Grammar.g:486:1: startEPLExpressionRule : ( annotationEnum )* eplExpression EOF -> ^( EPL_EXPR ( annotationEnum )* eplExpression ) ;
    public final EsperEPL2GrammarParser.startEPLExpressionRule_return startEPLExpressionRule() throws RecognitionException {
        EsperEPL2GrammarParser.startEPLExpressionRule_return retval = new EsperEPL2GrammarParser.startEPLExpressionRule_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token EOF6=null;
        EsperEPL2GrammarParser.annotationEnum_return annotationEnum4 = null;

        EsperEPL2GrammarParser.eplExpression_return eplExpression5 = null;


        CommonTree EOF6_tree=null;
        RewriteRuleTokenStream stream_EOF=new RewriteRuleTokenStream(adaptor,"token EOF");
        RewriteRuleSubtreeStream stream_annotationEnum=new RewriteRuleSubtreeStream(adaptor,"rule annotationEnum");
        RewriteRuleSubtreeStream stream_eplExpression=new RewriteRuleSubtreeStream(adaptor,"rule eplExpression");
        try {
            // EsperEPL2Grammar.g:487:2: ( ( annotationEnum )* eplExpression EOF -> ^( EPL_EXPR ( annotationEnum )* eplExpression ) )
            // EsperEPL2Grammar.g:487:4: ( annotationEnum )* eplExpression EOF
            {
            // EsperEPL2Grammar.g:487:4: ( annotationEnum )*
            loop2:
            do {
                int alt2=2;
                int LA2_0 = input.LA(1);

                if ( (LA2_0==EMAILAT) ) {
                    alt2=1;
                }


                switch (alt2) {
            	case 1 :
            	    // EsperEPL2Grammar.g:487:4: annotationEnum
            	    {
            	    pushFollow(FOLLOW_annotationEnum_in_startEPLExpressionRule1424);
            	    annotationEnum4=annotationEnum();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_annotationEnum.add(annotationEnum4.getTree());

            	    }
            	    break;

            	default :
            	    break loop2;
                }
            } while (true);

            pushFollow(FOLLOW_eplExpression_in_startEPLExpressionRule1430);
            eplExpression5=eplExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eplExpression.add(eplExpression5.getTree());
            EOF6=(Token)match(input,EOF,FOLLOW_EOF_in_startEPLExpressionRule1434); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EOF.add(EOF6);



            // AST REWRITE
            // elements: annotationEnum, eplExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 490:3: -> ^( EPL_EXPR ( annotationEnum )* eplExpression )
            {
                // EsperEPL2Grammar.g:490:6: ^( EPL_EXPR ( annotationEnum )* eplExpression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EPL_EXPR, "EPL_EXPR"), root_1);

                // EsperEPL2Grammar.g:490:17: ( annotationEnum )*
                while ( stream_annotationEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_annotationEnum.nextTree());

                }
                stream_annotationEnum.reset();
                adaptor.addChild(root_1, stream_eplExpression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "startEPLExpressionRule"

    public static class startEventPropertyRule_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "startEventPropertyRule"
    // EsperEPL2Grammar.g:493:1: startEventPropertyRule : eventProperty EOF ;
    public final EsperEPL2GrammarParser.startEventPropertyRule_return startEventPropertyRule() throws RecognitionException {
        EsperEPL2GrammarParser.startEventPropertyRule_return retval = new EsperEPL2GrammarParser.startEventPropertyRule_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token EOF8=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty7 = null;


        CommonTree EOF8_tree=null;

        try {
            // EsperEPL2Grammar.g:494:2: ( eventProperty EOF )
            // EsperEPL2Grammar.g:494:4: eventProperty EOF
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_eventProperty_in_startEventPropertyRule1460);
            eventProperty7=eventProperty();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty7.getTree());
            EOF8=(Token)match(input,EOF,FOLLOW_EOF_in_startEventPropertyRule1464); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "startEventPropertyRule"

    public static class annotationNoEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationNoEnum"
    // EsperEPL2Grammar.g:501:1: annotationNoEnum : '@' classIdentifier ( '(' ( elementValuePairsNoEnum | elementValueNoEnum )? ')' )? -> ^( ANNOTATION classIdentifier ( elementValuePairsNoEnum )? ( elementValueNoEnum )? ) ;
    public final EsperEPL2GrammarParser.annotationNoEnum_return annotationNoEnum() throws RecognitionException {
        EsperEPL2GrammarParser.annotationNoEnum_return retval = new EsperEPL2GrammarParser.annotationNoEnum_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token char_literal9=null;
        Token char_literal11=null;
        Token char_literal14=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier10 = null;

        EsperEPL2GrammarParser.elementValuePairsNoEnum_return elementValuePairsNoEnum12 = null;

        EsperEPL2GrammarParser.elementValueNoEnum_return elementValueNoEnum13 = null;


        CommonTree char_literal9_tree=null;
        CommonTree char_literal11_tree=null;
        CommonTree char_literal14_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_EMAILAT=new RewriteRuleTokenStream(adaptor,"token EMAILAT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_elementValuePairsNoEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValuePairsNoEnum");
        RewriteRuleSubtreeStream stream_elementValueNoEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueNoEnum");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            // EsperEPL2Grammar.g:502:5: ( '@' classIdentifier ( '(' ( elementValuePairsNoEnum | elementValueNoEnum )? ')' )? -> ^( ANNOTATION classIdentifier ( elementValuePairsNoEnum )? ( elementValueNoEnum )? ) )
            // EsperEPL2Grammar.g:502:9: '@' classIdentifier ( '(' ( elementValuePairsNoEnum | elementValueNoEnum )? ')' )?
            {
            char_literal9=(Token)match(input,EMAILAT,FOLLOW_EMAILAT_in_annotationNoEnum1484); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EMAILAT.add(char_literal9);

            pushFollow(FOLLOW_classIdentifier_in_annotationNoEnum1486);
            classIdentifier10=classIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier10.getTree());
            // EsperEPL2Grammar.g:502:29: ( '(' ( elementValuePairsNoEnum | elementValueNoEnum )? ')' )?
            int alt4=2;
            int LA4_0 = input.LA(1);

            if ( (LA4_0==LPAREN) ) {
                int LA4_1 = input.LA(2);

                if ( (LA4_1==IDENT) ) {
                    int LA4_9 = input.LA(3);

                    if ( (LA4_9==EQUALS) ) {
                        int LA4_30 = input.LA(4);

                        if ( ((LA4_30>=BOOLEAN_TRUE && LA4_30<=VALUE_NULL)||LA4_30==NUM_DOUBLE||(LA4_30>=STRING_LITERAL && LA4_30<=QUOTED_STRING_LITERAL)||(LA4_30>=PLUS && LA4_30<=MINUS)||LA4_30==LCURLY||LA4_30==NUM_INT||(LA4_30>=NUM_LONG && LA4_30<=NUM_FLOAT)||LA4_30==EMAILAT) ) {
                            alt4=1;
                        }
                    }
                }
                else if ( ((LA4_1>=BOOLEAN_TRUE && LA4_1<=VALUE_NULL)||LA4_1==NUM_DOUBLE||LA4_1==RPAREN||(LA4_1>=STRING_LITERAL && LA4_1<=QUOTED_STRING_LITERAL)||(LA4_1>=PLUS && LA4_1<=MINUS)||LA4_1==LCURLY||LA4_1==NUM_INT||(LA4_1>=NUM_LONG && LA4_1<=NUM_FLOAT)||LA4_1==EMAILAT) ) {
                    alt4=1;
                }
            }
            switch (alt4) {
                case 1 :
                    // EsperEPL2Grammar.g:502:31: '(' ( elementValuePairsNoEnum | elementValueNoEnum )? ')'
                    {
                    char_literal11=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_annotationNoEnum1490); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(char_literal11);

                    // EsperEPL2Grammar.g:502:35: ( elementValuePairsNoEnum | elementValueNoEnum )?
                    int alt3=3;
                    int LA3_0 = input.LA(1);

                    if ( (LA3_0==IDENT) ) {
                        alt3=1;
                    }
                    else if ( ((LA3_0>=BOOLEAN_TRUE && LA3_0<=VALUE_NULL)||LA3_0==NUM_DOUBLE||(LA3_0>=STRING_LITERAL && LA3_0<=QUOTED_STRING_LITERAL)||(LA3_0>=PLUS && LA3_0<=MINUS)||LA3_0==LCURLY||LA3_0==NUM_INT||(LA3_0>=NUM_LONG && LA3_0<=NUM_FLOAT)||LA3_0==EMAILAT) ) {
                        alt3=2;
                    }
                    switch (alt3) {
                        case 1 :
                            // EsperEPL2Grammar.g:502:37: elementValuePairsNoEnum
                            {
                            pushFollow(FOLLOW_elementValuePairsNoEnum_in_annotationNoEnum1494);
                            elementValuePairsNoEnum12=elementValuePairsNoEnum();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elementValuePairsNoEnum.add(elementValuePairsNoEnum12.getTree());

                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:502:63: elementValueNoEnum
                            {
                            pushFollow(FOLLOW_elementValueNoEnum_in_annotationNoEnum1498);
                            elementValueNoEnum13=elementValueNoEnum();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elementValueNoEnum.add(elementValueNoEnum13.getTree());

                            }
                            break;

                    }

                    char_literal14=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_annotationNoEnum1503); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(char_literal14);


                    }
                    break;

            }



            // AST REWRITE
            // elements: elementValueNoEnum, classIdentifier, elementValuePairsNoEnum
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 503:2: -> ^( ANNOTATION classIdentifier ( elementValuePairsNoEnum )? ( elementValueNoEnum )? )
            {
                // EsperEPL2Grammar.g:503:5: ^( ANNOTATION classIdentifier ( elementValuePairsNoEnum )? ( elementValueNoEnum )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION, "ANNOTATION"), root_1);

                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                // EsperEPL2Grammar.g:503:34: ( elementValuePairsNoEnum )?
                if ( stream_elementValuePairsNoEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValuePairsNoEnum.nextTree());

                }
                stream_elementValuePairsNoEnum.reset();
                // EsperEPL2Grammar.g:503:59: ( elementValueNoEnum )?
                if ( stream_elementValueNoEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValueNoEnum.nextTree());

                }
                stream_elementValueNoEnum.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "annotationNoEnum"

    public static class annotationEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationEnum"
    // EsperEPL2Grammar.g:506:1: annotationEnum : '@' classIdentifier ( '(' ( elementValuePairsEnum | elementValueEnum )? ')' )? -> ^( ANNOTATION classIdentifier ( elementValuePairsEnum )? ( elementValueEnum )? ) ;
    public final EsperEPL2GrammarParser.annotationEnum_return annotationEnum() throws RecognitionException {
        EsperEPL2GrammarParser.annotationEnum_return retval = new EsperEPL2GrammarParser.annotationEnum_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token char_literal15=null;
        Token char_literal17=null;
        Token char_literal20=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier16 = null;

        EsperEPL2GrammarParser.elementValuePairsEnum_return elementValuePairsEnum18 = null;

        EsperEPL2GrammarParser.elementValueEnum_return elementValueEnum19 = null;


        CommonTree char_literal15_tree=null;
        CommonTree char_literal17_tree=null;
        CommonTree char_literal20_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_EMAILAT=new RewriteRuleTokenStream(adaptor,"token EMAILAT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_elementValuePairsEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValuePairsEnum");
        RewriteRuleSubtreeStream stream_elementValueEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueEnum");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            // EsperEPL2Grammar.g:507:5: ( '@' classIdentifier ( '(' ( elementValuePairsEnum | elementValueEnum )? ')' )? -> ^( ANNOTATION classIdentifier ( elementValuePairsEnum )? ( elementValueEnum )? ) )
            // EsperEPL2Grammar.g:507:9: '@' classIdentifier ( '(' ( elementValuePairsEnum | elementValueEnum )? ')' )?
            {
            char_literal15=(Token)match(input,EMAILAT,FOLLOW_EMAILAT_in_annotationEnum1544); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EMAILAT.add(char_literal15);

            pushFollow(FOLLOW_classIdentifier_in_annotationEnum1546);
            classIdentifier16=classIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier16.getTree());
            // EsperEPL2Grammar.g:507:29: ( '(' ( elementValuePairsEnum | elementValueEnum )? ')' )?
            int alt6=2;
            int LA6_0 = input.LA(1);

            if ( (LA6_0==LPAREN) ) {
                alt6=1;
            }
            switch (alt6) {
                case 1 :
                    // EsperEPL2Grammar.g:507:31: '(' ( elementValuePairsEnum | elementValueEnum )? ')'
                    {
                    char_literal17=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_annotationEnum1550); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(char_literal17);

                    // EsperEPL2Grammar.g:507:35: ( elementValuePairsEnum | elementValueEnum )?
                    int alt5=3;
                    int LA5_0 = input.LA(1);

                    if ( (LA5_0==IDENT) ) {
                        int LA5_1 = input.LA(2);

                        if ( (LA5_1==EQUALS) ) {
                            alt5=1;
                        }
                        else if ( (LA5_1==DOT||LA5_1==RPAREN) ) {
                            alt5=2;
                        }
                    }
                    else if ( ((LA5_0>=BOOLEAN_TRUE && LA5_0<=VALUE_NULL)||LA5_0==NUM_DOUBLE||(LA5_0>=STRING_LITERAL && LA5_0<=QUOTED_STRING_LITERAL)||(LA5_0>=PLUS && LA5_0<=MINUS)||LA5_0==LCURLY||LA5_0==NUM_INT||(LA5_0>=TICKED_STRING_LITERAL && LA5_0<=NUM_FLOAT)||LA5_0==EMAILAT) ) {
                        alt5=2;
                    }
                    switch (alt5) {
                        case 1 :
                            // EsperEPL2Grammar.g:507:37: elementValuePairsEnum
                            {
                            pushFollow(FOLLOW_elementValuePairsEnum_in_annotationEnum1554);
                            elementValuePairsEnum18=elementValuePairsEnum();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elementValuePairsEnum.add(elementValuePairsEnum18.getTree());

                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:507:61: elementValueEnum
                            {
                            pushFollow(FOLLOW_elementValueEnum_in_annotationEnum1558);
                            elementValueEnum19=elementValueEnum();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elementValueEnum.add(elementValueEnum19.getTree());

                            }
                            break;

                    }

                    char_literal20=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_annotationEnum1563); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(char_literal20);


                    }
                    break;

            }



            // AST REWRITE
            // elements: elementValueEnum, elementValuePairsEnum, classIdentifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 508:2: -> ^( ANNOTATION classIdentifier ( elementValuePairsEnum )? ( elementValueEnum )? )
            {
                // EsperEPL2Grammar.g:508:5: ^( ANNOTATION classIdentifier ( elementValuePairsEnum )? ( elementValueEnum )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION, "ANNOTATION"), root_1);

                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                // EsperEPL2Grammar.g:508:34: ( elementValuePairsEnum )?
                if ( stream_elementValuePairsEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValuePairsEnum.nextTree());

                }
                stream_elementValuePairsEnum.reset();
                // EsperEPL2Grammar.g:508:57: ( elementValueEnum )?
                if ( stream_elementValueEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValueEnum.nextTree());

                }
                stream_elementValueEnum.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "annotationEnum"

    public static class elementValuePairsEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValuePairsEnum"
    // EsperEPL2Grammar.g:511:1: elementValuePairsEnum : elementValuePairEnum ( COMMA elementValuePairEnum )* ;
    public final EsperEPL2GrammarParser.elementValuePairsEnum_return elementValuePairsEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValuePairsEnum_return retval = new EsperEPL2GrammarParser.elementValuePairsEnum_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA22=null;
        EsperEPL2GrammarParser.elementValuePairEnum_return elementValuePairEnum21 = null;

        EsperEPL2GrammarParser.elementValuePairEnum_return elementValuePairEnum23 = null;


        CommonTree COMMA22_tree=null;

        try {
            // EsperEPL2Grammar.g:512:5: ( elementValuePairEnum ( COMMA elementValuePairEnum )* )
            // EsperEPL2Grammar.g:512:9: elementValuePairEnum ( COMMA elementValuePairEnum )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_elementValuePairEnum_in_elementValuePairsEnum1604);
            elementValuePairEnum21=elementValuePairEnum();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValuePairEnum21.getTree());
            // EsperEPL2Grammar.g:512:30: ( COMMA elementValuePairEnum )*
            loop7:
            do {
                int alt7=2;
                int LA7_0 = input.LA(1);

                if ( (LA7_0==COMMA) ) {
                    alt7=1;
                }


                switch (alt7) {
            	case 1 :
            	    // EsperEPL2Grammar.g:512:31: COMMA elementValuePairEnum
            	    {
            	    COMMA22=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValuePairsEnum1607); if (state.failed) return retval;
            	    pushFollow(FOLLOW_elementValuePairEnum_in_elementValuePairsEnum1610);
            	    elementValuePairEnum23=elementValuePairEnum();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValuePairEnum23.getTree());

            	    }
            	    break;

            	default :
            	    break loop7;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "elementValuePairsEnum"

    public static class elementValuePairsNoEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValuePairsNoEnum"
    // EsperEPL2Grammar.g:515:1: elementValuePairsNoEnum : i= IDENT '=' elementValueNoEnum -> ^( ANNOTATION_VALUE $i elementValueNoEnum ) ;
    public final EsperEPL2GrammarParser.elementValuePairsNoEnum_return elementValuePairsNoEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValuePairsNoEnum_return retval = new EsperEPL2GrammarParser.elementValuePairsNoEnum_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token char_literal24=null;
        EsperEPL2GrammarParser.elementValueNoEnum_return elementValueNoEnum25 = null;


        CommonTree i_tree=null;
        CommonTree char_literal24_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleSubtreeStream stream_elementValueNoEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueNoEnum");
        try {
            // EsperEPL2Grammar.g:516:5: (i= IDENT '=' elementValueNoEnum -> ^( ANNOTATION_VALUE $i elementValueNoEnum ) )
            // EsperEPL2Grammar.g:516:9: i= IDENT '=' elementValueNoEnum
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_elementValuePairsNoEnum1633); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);

            char_literal24=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_elementValuePairsNoEnum1635); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EQUALS.add(char_literal24);

            pushFollow(FOLLOW_elementValueNoEnum_in_elementValuePairsNoEnum1637);
            elementValueNoEnum25=elementValueNoEnum();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_elementValueNoEnum.add(elementValueNoEnum25.getTree());


            // AST REWRITE
            // elements: elementValueNoEnum, i
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 517:2: -> ^( ANNOTATION_VALUE $i elementValueNoEnum )
            {
                // EsperEPL2Grammar.g:517:5: ^( ANNOTATION_VALUE $i elementValueNoEnum )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION_VALUE, "ANNOTATION_VALUE"), root_1);

                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_elementValueNoEnum.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "elementValuePairsNoEnum"

    public static class elementValuePairEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValuePairEnum"
    // EsperEPL2Grammar.g:520:1: elementValuePairEnum : i= IDENT '=' elementValueEnum -> ^( ANNOTATION_VALUE $i elementValueEnum ) ;
    public final EsperEPL2GrammarParser.elementValuePairEnum_return elementValuePairEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValuePairEnum_return retval = new EsperEPL2GrammarParser.elementValuePairEnum_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token char_literal26=null;
        EsperEPL2GrammarParser.elementValueEnum_return elementValueEnum27 = null;


        CommonTree i_tree=null;
        CommonTree char_literal26_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleSubtreeStream stream_elementValueEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueEnum");
        try {
            // EsperEPL2Grammar.g:521:5: (i= IDENT '=' elementValueEnum -> ^( ANNOTATION_VALUE $i elementValueEnum ) )
            // EsperEPL2Grammar.g:521:9: i= IDENT '=' elementValueEnum
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_elementValuePairEnum1674); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);

            char_literal26=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_elementValuePairEnum1676); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EQUALS.add(char_literal26);

            pushFollow(FOLLOW_elementValueEnum_in_elementValuePairEnum1678);
            elementValueEnum27=elementValueEnum();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_elementValueEnum.add(elementValueEnum27.getTree());


            // AST REWRITE
            // elements: elementValueEnum, i
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 522:2: -> ^( ANNOTATION_VALUE $i elementValueEnum )
            {
                // EsperEPL2Grammar.g:522:5: ^( ANNOTATION_VALUE $i elementValueEnum )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION_VALUE, "ANNOTATION_VALUE"), root_1);

                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_elementValueEnum.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "elementValuePairEnum"

    public static class elementValueNoEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValueNoEnum"
    // EsperEPL2Grammar.g:525:1: elementValueNoEnum : ( annotationEnum | ( elementValueArrayNoEnum ) -> elementValueArrayNoEnum | constant );
    public final EsperEPL2GrammarParser.elementValueNoEnum_return elementValueNoEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValueNoEnum_return retval = new EsperEPL2GrammarParser.elementValueNoEnum_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.annotationEnum_return annotationEnum28 = null;

        EsperEPL2GrammarParser.elementValueArrayNoEnum_return elementValueArrayNoEnum29 = null;

        EsperEPL2GrammarParser.constant_return constant30 = null;


        RewriteRuleSubtreeStream stream_elementValueArrayNoEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueArrayNoEnum");
        try {
            // EsperEPL2Grammar.g:526:5: ( annotationEnum | ( elementValueArrayNoEnum ) -> elementValueArrayNoEnum | constant )
            int alt8=3;
            switch ( input.LA(1) ) {
            case EMAILAT:
                {
                alt8=1;
                }
                break;
            case LCURLY:
                {
                alt8=2;
                }
                break;
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case NUM_DOUBLE:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case PLUS:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt8=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 8, 0, input);

                throw nvae;
            }

            switch (alt8) {
                case 1 :
                    // EsperEPL2Grammar.g:526:9: annotationEnum
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_annotationEnum_in_elementValueNoEnum1709);
                    annotationEnum28=annotationEnum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationEnum28.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:527:9: ( elementValueArrayNoEnum )
                    {
                    // EsperEPL2Grammar.g:527:9: ( elementValueArrayNoEnum )
                    // EsperEPL2Grammar.g:527:10: elementValueArrayNoEnum
                    {
                    pushFollow(FOLLOW_elementValueArrayNoEnum_in_elementValueNoEnum1720);
                    elementValueArrayNoEnum29=elementValueArrayNoEnum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_elementValueArrayNoEnum.add(elementValueArrayNoEnum29.getTree());

                    }



                    // AST REWRITE
                    // elements: elementValueArrayNoEnum
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 527:35: -> elementValueArrayNoEnum
                    {
                        adaptor.addChild(root_0, stream_elementValueArrayNoEnum.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:528:7: constant
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_constant_in_elementValueNoEnum1733);
                    constant30=constant();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constant30.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "elementValueNoEnum"

    public static class elementValueEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValueEnum"
    // EsperEPL2Grammar.g:531:1: elementValueEnum : ( annotationEnum | ( elementValueArrayEnum ) -> elementValueArrayEnum | constant | classIdentifier );
    public final EsperEPL2GrammarParser.elementValueEnum_return elementValueEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValueEnum_return retval = new EsperEPL2GrammarParser.elementValueEnum_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.annotationEnum_return annotationEnum31 = null;

        EsperEPL2GrammarParser.elementValueArrayEnum_return elementValueArrayEnum32 = null;

        EsperEPL2GrammarParser.constant_return constant33 = null;

        EsperEPL2GrammarParser.classIdentifier_return classIdentifier34 = null;


        RewriteRuleSubtreeStream stream_elementValueArrayEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueArrayEnum");
        try {
            // EsperEPL2Grammar.g:532:5: ( annotationEnum | ( elementValueArrayEnum ) -> elementValueArrayEnum | constant | classIdentifier )
            int alt9=4;
            switch ( input.LA(1) ) {
            case EMAILAT:
                {
                alt9=1;
                }
                break;
            case LCURLY:
                {
                alt9=2;
                }
                break;
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case NUM_DOUBLE:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case PLUS:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt9=3;
                }
                break;
            case IDENT:
            case TICKED_STRING_LITERAL:
                {
                alt9=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 9, 0, input);

                throw nvae;
            }

            switch (alt9) {
                case 1 :
                    // EsperEPL2Grammar.g:532:9: annotationEnum
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_annotationEnum_in_elementValueEnum1756);
                    annotationEnum31=annotationEnum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationEnum31.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:533:9: ( elementValueArrayEnum )
                    {
                    // EsperEPL2Grammar.g:533:9: ( elementValueArrayEnum )
                    // EsperEPL2Grammar.g:533:10: elementValueArrayEnum
                    {
                    pushFollow(FOLLOW_elementValueArrayEnum_in_elementValueEnum1767);
                    elementValueArrayEnum32=elementValueArrayEnum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_elementValueArrayEnum.add(elementValueArrayEnum32.getTree());

                    }



                    // AST REWRITE
                    // elements: elementValueArrayEnum
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 533:33: -> elementValueArrayEnum
                    {
                        adaptor.addChild(root_0, stream_elementValueArrayEnum.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:534:7: constant
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_constant_in_elementValueEnum1780);
                    constant33=constant();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constant33.getTree());

                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:535:7: classIdentifier
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_classIdentifier_in_elementValueEnum1788);
                    classIdentifier34=classIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier34.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "elementValueEnum"

    public static class elementValueArrayNoEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValueArrayNoEnum"
    // EsperEPL2Grammar.g:538:1: elementValueArrayNoEnum : '{' ( elementValueNoEnum ( ',' elementValueNoEnum )* )? ( ',' )? '}' -> ^( ANNOTATION_ARRAY ( elementValueNoEnum )* ) ;
    public final EsperEPL2GrammarParser.elementValueArrayNoEnum_return elementValueArrayNoEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValueArrayNoEnum_return retval = new EsperEPL2GrammarParser.elementValueArrayNoEnum_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token char_literal35=null;
        Token char_literal37=null;
        Token char_literal39=null;
        Token char_literal40=null;
        EsperEPL2GrammarParser.elementValueNoEnum_return elementValueNoEnum36 = null;

        EsperEPL2GrammarParser.elementValueNoEnum_return elementValueNoEnum38 = null;


        CommonTree char_literal35_tree=null;
        CommonTree char_literal37_tree=null;
        CommonTree char_literal39_tree=null;
        CommonTree char_literal40_tree=null;
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_elementValueNoEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueNoEnum");
        try {
            // EsperEPL2Grammar.g:539:5: ( '{' ( elementValueNoEnum ( ',' elementValueNoEnum )* )? ( ',' )? '}' -> ^( ANNOTATION_ARRAY ( elementValueNoEnum )* ) )
            // EsperEPL2Grammar.g:539:9: '{' ( elementValueNoEnum ( ',' elementValueNoEnum )* )? ( ',' )? '}'
            {
            char_literal35=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_elementValueArrayNoEnum1808); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCURLY.add(char_literal35);

            // EsperEPL2Grammar.g:539:13: ( elementValueNoEnum ( ',' elementValueNoEnum )* )?
            int alt11=2;
            int LA11_0 = input.LA(1);

            if ( ((LA11_0>=BOOLEAN_TRUE && LA11_0<=VALUE_NULL)||LA11_0==NUM_DOUBLE||(LA11_0>=STRING_LITERAL && LA11_0<=QUOTED_STRING_LITERAL)||(LA11_0>=PLUS && LA11_0<=MINUS)||LA11_0==LCURLY||LA11_0==NUM_INT||(LA11_0>=NUM_LONG && LA11_0<=NUM_FLOAT)||LA11_0==EMAILAT) ) {
                alt11=1;
            }
            switch (alt11) {
                case 1 :
                    // EsperEPL2Grammar.g:539:14: elementValueNoEnum ( ',' elementValueNoEnum )*
                    {
                    pushFollow(FOLLOW_elementValueNoEnum_in_elementValueArrayNoEnum1811);
                    elementValueNoEnum36=elementValueNoEnum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_elementValueNoEnum.add(elementValueNoEnum36.getTree());
                    // EsperEPL2Grammar.g:539:33: ( ',' elementValueNoEnum )*
                    loop10:
                    do {
                        int alt10=2;
                        int LA10_0 = input.LA(1);

                        if ( (LA10_0==COMMA) ) {
                            int LA10_1 = input.LA(2);

                            if ( ((LA10_1>=BOOLEAN_TRUE && LA10_1<=VALUE_NULL)||LA10_1==NUM_DOUBLE||(LA10_1>=STRING_LITERAL && LA10_1<=QUOTED_STRING_LITERAL)||(LA10_1>=PLUS && LA10_1<=MINUS)||LA10_1==LCURLY||LA10_1==NUM_INT||(LA10_1>=NUM_LONG && LA10_1<=NUM_FLOAT)||LA10_1==EMAILAT) ) {
                                alt10=1;
                            }


                        }


                        switch (alt10) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:539:34: ',' elementValueNoEnum
                    	    {
                    	    char_literal37=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValueArrayNoEnum1814); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(char_literal37);

                    	    pushFollow(FOLLOW_elementValueNoEnum_in_elementValueArrayNoEnum1816);
                    	    elementValueNoEnum38=elementValueNoEnum();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_elementValueNoEnum.add(elementValueNoEnum38.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop10;
                        }
                    } while (true);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:539:61: ( ',' )?
            int alt12=2;
            int LA12_0 = input.LA(1);

            if ( (LA12_0==COMMA) ) {
                alt12=1;
            }
            switch (alt12) {
                case 1 :
                    // EsperEPL2Grammar.g:539:62: ','
                    {
                    char_literal39=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValueArrayNoEnum1823); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(char_literal39);


                    }
                    break;

            }

            char_literal40=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_elementValueArrayNoEnum1827); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCURLY.add(char_literal40);



            // AST REWRITE
            // elements: elementValueNoEnum
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 540:2: -> ^( ANNOTATION_ARRAY ( elementValueNoEnum )* )
            {
                // EsperEPL2Grammar.g:540:5: ^( ANNOTATION_ARRAY ( elementValueNoEnum )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION_ARRAY, "ANNOTATION_ARRAY"), root_1);

                // EsperEPL2Grammar.g:540:24: ( elementValueNoEnum )*
                while ( stream_elementValueNoEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValueNoEnum.nextTree());

                }
                stream_elementValueNoEnum.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "elementValueArrayNoEnum"

    public static class elementValueArrayEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValueArrayEnum"
    // EsperEPL2Grammar.g:543:1: elementValueArrayEnum : '{' ( elementValueEnum ( ',' elementValueEnum )* )? ( ',' )? '}' -> ^( ANNOTATION_ARRAY ( elementValueEnum )* ) ;
    public final EsperEPL2GrammarParser.elementValueArrayEnum_return elementValueArrayEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValueArrayEnum_return retval = new EsperEPL2GrammarParser.elementValueArrayEnum_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token char_literal41=null;
        Token char_literal43=null;
        Token char_literal45=null;
        Token char_literal46=null;
        EsperEPL2GrammarParser.elementValueEnum_return elementValueEnum42 = null;

        EsperEPL2GrammarParser.elementValueEnum_return elementValueEnum44 = null;


        CommonTree char_literal41_tree=null;
        CommonTree char_literal43_tree=null;
        CommonTree char_literal45_tree=null;
        CommonTree char_literal46_tree=null;
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_elementValueEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueEnum");
        try {
            // EsperEPL2Grammar.g:544:5: ( '{' ( elementValueEnum ( ',' elementValueEnum )* )? ( ',' )? '}' -> ^( ANNOTATION_ARRAY ( elementValueEnum )* ) )
            // EsperEPL2Grammar.g:544:9: '{' ( elementValueEnum ( ',' elementValueEnum )* )? ( ',' )? '}'
            {
            char_literal41=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_elementValueArrayEnum1856); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCURLY.add(char_literal41);

            // EsperEPL2Grammar.g:544:13: ( elementValueEnum ( ',' elementValueEnum )* )?
            int alt14=2;
            int LA14_0 = input.LA(1);

            if ( ((LA14_0>=BOOLEAN_TRUE && LA14_0<=VALUE_NULL)||LA14_0==NUM_DOUBLE||LA14_0==IDENT||(LA14_0>=STRING_LITERAL && LA14_0<=QUOTED_STRING_LITERAL)||(LA14_0>=PLUS && LA14_0<=MINUS)||LA14_0==LCURLY||LA14_0==NUM_INT||(LA14_0>=TICKED_STRING_LITERAL && LA14_0<=NUM_FLOAT)||LA14_0==EMAILAT) ) {
                alt14=1;
            }
            switch (alt14) {
                case 1 :
                    // EsperEPL2Grammar.g:544:14: elementValueEnum ( ',' elementValueEnum )*
                    {
                    pushFollow(FOLLOW_elementValueEnum_in_elementValueArrayEnum1859);
                    elementValueEnum42=elementValueEnum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_elementValueEnum.add(elementValueEnum42.getTree());
                    // EsperEPL2Grammar.g:544:31: ( ',' elementValueEnum )*
                    loop13:
                    do {
                        int alt13=2;
                        int LA13_0 = input.LA(1);

                        if ( (LA13_0==COMMA) ) {
                            int LA13_1 = input.LA(2);

                            if ( ((LA13_1>=BOOLEAN_TRUE && LA13_1<=VALUE_NULL)||LA13_1==NUM_DOUBLE||LA13_1==IDENT||(LA13_1>=STRING_LITERAL && LA13_1<=QUOTED_STRING_LITERAL)||(LA13_1>=PLUS && LA13_1<=MINUS)||LA13_1==LCURLY||LA13_1==NUM_INT||(LA13_1>=TICKED_STRING_LITERAL && LA13_1<=NUM_FLOAT)||LA13_1==EMAILAT) ) {
                                alt13=1;
                            }


                        }


                        switch (alt13) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:544:32: ',' elementValueEnum
                    	    {
                    	    char_literal43=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValueArrayEnum1862); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(char_literal43);

                    	    pushFollow(FOLLOW_elementValueEnum_in_elementValueArrayEnum1864);
                    	    elementValueEnum44=elementValueEnum();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_elementValueEnum.add(elementValueEnum44.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop13;
                        }
                    } while (true);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:544:57: ( ',' )?
            int alt15=2;
            int LA15_0 = input.LA(1);

            if ( (LA15_0==COMMA) ) {
                alt15=1;
            }
            switch (alt15) {
                case 1 :
                    // EsperEPL2Grammar.g:544:58: ','
                    {
                    char_literal45=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValueArrayEnum1871); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(char_literal45);


                    }
                    break;

            }

            char_literal46=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_elementValueArrayEnum1875); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCURLY.add(char_literal46);



            // AST REWRITE
            // elements: elementValueEnum
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 545:2: -> ^( ANNOTATION_ARRAY ( elementValueEnum )* )
            {
                // EsperEPL2Grammar.g:545:5: ^( ANNOTATION_ARRAY ( elementValueEnum )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION_ARRAY, "ANNOTATION_ARRAY"), root_1);

                // EsperEPL2Grammar.g:545:24: ( elementValueEnum )*
                while ( stream_elementValueEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValueEnum.nextTree());

                }
                stream_elementValueEnum.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "elementValueArrayEnum"

    public static class eplExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "eplExpression"
    // EsperEPL2Grammar.g:551:1: eplExpression : ( selectExpr | createWindowExpr | createVariableExpr | onExpr );
    public final EsperEPL2GrammarParser.eplExpression_return eplExpression() throws RecognitionException {
        EsperEPL2GrammarParser.eplExpression_return retval = new EsperEPL2GrammarParser.eplExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.selectExpr_return selectExpr47 = null;

        EsperEPL2GrammarParser.createWindowExpr_return createWindowExpr48 = null;

        EsperEPL2GrammarParser.createVariableExpr_return createVariableExpr49 = null;

        EsperEPL2GrammarParser.onExpr_return onExpr50 = null;



        try {
            // EsperEPL2Grammar.g:552:2: ( selectExpr | createWindowExpr | createVariableExpr | onExpr )
            int alt16=4;
            switch ( input.LA(1) ) {
            case SELECT:
            case INSERT:
                {
                alt16=1;
                }
                break;
            case CREATE:
                {
                int LA16_3 = input.LA(2);

                if ( (LA16_3==WINDOW) ) {
                    alt16=2;
                }
                else if ( (LA16_3==VARIABLE) ) {
                    alt16=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 16, 3, input);

                    throw nvae;
                }
                }
                break;
            case ON:
                {
                alt16=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 16, 0, input);

                throw nvae;
            }

            switch (alt16) {
                case 1 :
                    // EsperEPL2Grammar.g:552:4: selectExpr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_selectExpr_in_eplExpression1907);
                    selectExpr47=selectExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, selectExpr47.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:553:4: createWindowExpr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_createWindowExpr_in_eplExpression1912);
                    createWindowExpr48=createWindowExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createWindowExpr48.getTree());

                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:554:4: createVariableExpr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_createVariableExpr_in_eplExpression1917);
                    createVariableExpr49=createVariableExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createVariableExpr49.getTree());

                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:555:4: onExpr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_onExpr_in_eplExpression1922);
                    onExpr50=onExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, onExpr50.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "eplExpression"

    public static class selectExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "selectExpr"
    // EsperEPL2Grammar.g:558:1: selectExpr : ( INSERT insertIntoExpr )? SELECT selectClause FROM fromClause ( WHERE whereClause )? ( GROUP BY groupByListExpr )? ( HAVING havingClause )? ( OUTPUT outputLimit )? ( ORDER BY orderByListExpr )? ( ROW_LIMIT_EXPR rowLimit )? ;
    public final EsperEPL2GrammarParser.selectExpr_return selectExpr() throws RecognitionException {
        EsperEPL2GrammarParser.selectExpr_return retval = new EsperEPL2GrammarParser.selectExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token INSERT51=null;
        Token SELECT53=null;
        Token FROM55=null;
        Token WHERE57=null;
        Token GROUP59=null;
        Token BY60=null;
        Token HAVING62=null;
        Token OUTPUT64=null;
        Token ORDER66=null;
        Token BY67=null;
        Token ROW_LIMIT_EXPR69=null;
        EsperEPL2GrammarParser.insertIntoExpr_return insertIntoExpr52 = null;

        EsperEPL2GrammarParser.selectClause_return selectClause54 = null;

        EsperEPL2GrammarParser.fromClause_return fromClause56 = null;

        EsperEPL2GrammarParser.whereClause_return whereClause58 = null;

        EsperEPL2GrammarParser.groupByListExpr_return groupByListExpr61 = null;

        EsperEPL2GrammarParser.havingClause_return havingClause63 = null;

        EsperEPL2GrammarParser.outputLimit_return outputLimit65 = null;

        EsperEPL2GrammarParser.orderByListExpr_return orderByListExpr68 = null;

        EsperEPL2GrammarParser.rowLimit_return rowLimit70 = null;


        CommonTree INSERT51_tree=null;
        CommonTree SELECT53_tree=null;
        CommonTree FROM55_tree=null;
        CommonTree WHERE57_tree=null;
        CommonTree GROUP59_tree=null;
        CommonTree BY60_tree=null;
        CommonTree HAVING62_tree=null;
        CommonTree OUTPUT64_tree=null;
        CommonTree ORDER66_tree=null;
        CommonTree BY67_tree=null;
        CommonTree ROW_LIMIT_EXPR69_tree=null;

        try {
            // EsperEPL2Grammar.g:559:2: ( ( INSERT insertIntoExpr )? SELECT selectClause FROM fromClause ( WHERE whereClause )? ( GROUP BY groupByListExpr )? ( HAVING havingClause )? ( OUTPUT outputLimit )? ( ORDER BY orderByListExpr )? ( ROW_LIMIT_EXPR rowLimit )? )
            // EsperEPL2Grammar.g:559:4: ( INSERT insertIntoExpr )? SELECT selectClause FROM fromClause ( WHERE whereClause )? ( GROUP BY groupByListExpr )? ( HAVING havingClause )? ( OUTPUT outputLimit )? ( ORDER BY orderByListExpr )? ( ROW_LIMIT_EXPR rowLimit )?
            {
            root_0 = (CommonTree)adaptor.nil();

            // EsperEPL2Grammar.g:559:4: ( INSERT insertIntoExpr )?
            int alt17=2;
            int LA17_0 = input.LA(1);

            if ( (LA17_0==INSERT) ) {
                alt17=1;
            }
            switch (alt17) {
                case 1 :
                    // EsperEPL2Grammar.g:559:5: INSERT insertIntoExpr
                    {
                    INSERT51=(Token)match(input,INSERT,FOLLOW_INSERT_in_selectExpr1935); if (state.failed) return retval;
                    pushFollow(FOLLOW_insertIntoExpr_in_selectExpr1938);
                    insertIntoExpr52=insertIntoExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, insertIntoExpr52.getTree());

                    }
                    break;

            }

            SELECT53=(Token)match(input,SELECT,FOLLOW_SELECT_in_selectExpr1944); if (state.failed) return retval;
            pushFollow(FOLLOW_selectClause_in_selectExpr1947);
            selectClause54=selectClause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, selectClause54.getTree());
            FROM55=(Token)match(input,FROM,FOLLOW_FROM_in_selectExpr1951); if (state.failed) return retval;
            pushFollow(FOLLOW_fromClause_in_selectExpr1954);
            fromClause56=fromClause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, fromClause56.getTree());
            // EsperEPL2Grammar.g:562:3: ( WHERE whereClause )?
            int alt18=2;
            int LA18_0 = input.LA(1);

            if ( (LA18_0==WHERE) ) {
                alt18=1;
            }
            switch (alt18) {
                case 1 :
                    // EsperEPL2Grammar.g:562:4: WHERE whereClause
                    {
                    WHERE57=(Token)match(input,WHERE,FOLLOW_WHERE_in_selectExpr1959); if (state.failed) return retval;
                    pushFollow(FOLLOW_whereClause_in_selectExpr1962);
                    whereClause58=whereClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, whereClause58.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:563:3: ( GROUP BY groupByListExpr )?
            int alt19=2;
            int LA19_0 = input.LA(1);

            if ( (LA19_0==GROUP) ) {
                alt19=1;
            }
            switch (alt19) {
                case 1 :
                    // EsperEPL2Grammar.g:563:4: GROUP BY groupByListExpr
                    {
                    GROUP59=(Token)match(input,GROUP,FOLLOW_GROUP_in_selectExpr1969); if (state.failed) return retval;
                    BY60=(Token)match(input,BY,FOLLOW_BY_in_selectExpr1972); if (state.failed) return retval;
                    pushFollow(FOLLOW_groupByListExpr_in_selectExpr1975);
                    groupByListExpr61=groupByListExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, groupByListExpr61.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:564:3: ( HAVING havingClause )?
            int alt20=2;
            int LA20_0 = input.LA(1);

            if ( (LA20_0==HAVING) ) {
                alt20=1;
            }
            switch (alt20) {
                case 1 :
                    // EsperEPL2Grammar.g:564:4: HAVING havingClause
                    {
                    HAVING62=(Token)match(input,HAVING,FOLLOW_HAVING_in_selectExpr1982); if (state.failed) return retval;
                    pushFollow(FOLLOW_havingClause_in_selectExpr1985);
                    havingClause63=havingClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, havingClause63.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:565:3: ( OUTPUT outputLimit )?
            int alt21=2;
            int LA21_0 = input.LA(1);

            if ( (LA21_0==OUTPUT) ) {
                alt21=1;
            }
            switch (alt21) {
                case 1 :
                    // EsperEPL2Grammar.g:565:4: OUTPUT outputLimit
                    {
                    OUTPUT64=(Token)match(input,OUTPUT,FOLLOW_OUTPUT_in_selectExpr1992); if (state.failed) return retval;
                    pushFollow(FOLLOW_outputLimit_in_selectExpr1995);
                    outputLimit65=outputLimit();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, outputLimit65.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:566:3: ( ORDER BY orderByListExpr )?
            int alt22=2;
            int LA22_0 = input.LA(1);

            if ( (LA22_0==ORDER) ) {
                alt22=1;
            }
            switch (alt22) {
                case 1 :
                    // EsperEPL2Grammar.g:566:4: ORDER BY orderByListExpr
                    {
                    ORDER66=(Token)match(input,ORDER,FOLLOW_ORDER_in_selectExpr2002); if (state.failed) return retval;
                    BY67=(Token)match(input,BY,FOLLOW_BY_in_selectExpr2005); if (state.failed) return retval;
                    pushFollow(FOLLOW_orderByListExpr_in_selectExpr2008);
                    orderByListExpr68=orderByListExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, orderByListExpr68.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:567:3: ( ROW_LIMIT_EXPR rowLimit )?
            int alt23=2;
            int LA23_0 = input.LA(1);

            if ( (LA23_0==ROW_LIMIT_EXPR) ) {
                alt23=1;
            }
            switch (alt23) {
                case 1 :
                    // EsperEPL2Grammar.g:567:4: ROW_LIMIT_EXPR rowLimit
                    {
                    ROW_LIMIT_EXPR69=(Token)match(input,ROW_LIMIT_EXPR,FOLLOW_ROW_LIMIT_EXPR_in_selectExpr2015); if (state.failed) return retval;
                    pushFollow(FOLLOW_rowLimit_in_selectExpr2018);
                    rowLimit70=rowLimit();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rowLimit70.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "selectExpr"

    public static class onExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "onExpr"
    // EsperEPL2Grammar.g:570:1: onExpr : ON ( eventFilterExpression | patternInclusionExpression ) ( AS i= IDENT | i= IDENT )? ( onDeleteExpr | onSelectExpr ( ( onSelectInsertExpr )+ ( outputClauseInsert )? )? | onSetExpr ) -> ^( ON_EXPR ( eventFilterExpression )? ( patternInclusionExpression )? ( $i)? ( onDeleteExpr )? ( onSelectExpr )? ( onSelectInsertExpr )* ( outputClauseInsert )? ( onSetExpr )? ) ;
    public final EsperEPL2GrammarParser.onExpr_return onExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onExpr_return retval = new EsperEPL2GrammarParser.onExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token ON71=null;
        Token AS74=null;
        EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression72 = null;

        EsperEPL2GrammarParser.patternInclusionExpression_return patternInclusionExpression73 = null;

        EsperEPL2GrammarParser.onDeleteExpr_return onDeleteExpr75 = null;

        EsperEPL2GrammarParser.onSelectExpr_return onSelectExpr76 = null;

        EsperEPL2GrammarParser.onSelectInsertExpr_return onSelectInsertExpr77 = null;

        EsperEPL2GrammarParser.outputClauseInsert_return outputClauseInsert78 = null;

        EsperEPL2GrammarParser.onSetExpr_return onSetExpr79 = null;


        CommonTree i_tree=null;
        CommonTree ON71_tree=null;
        CommonTree AS74_tree=null;
        RewriteRuleTokenStream stream_ON=new RewriteRuleTokenStream(adaptor,"token ON");
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_onSelectExpr=new RewriteRuleSubtreeStream(adaptor,"rule onSelectExpr");
        RewriteRuleSubtreeStream stream_onDeleteExpr=new RewriteRuleSubtreeStream(adaptor,"rule onDeleteExpr");
        RewriteRuleSubtreeStream stream_onSelectInsertExpr=new RewriteRuleSubtreeStream(adaptor,"rule onSelectInsertExpr");
        RewriteRuleSubtreeStream stream_eventFilterExpression=new RewriteRuleSubtreeStream(adaptor,"rule eventFilterExpression");
        RewriteRuleSubtreeStream stream_outputClauseInsert=new RewriteRuleSubtreeStream(adaptor,"rule outputClauseInsert");
        RewriteRuleSubtreeStream stream_onSetExpr=new RewriteRuleSubtreeStream(adaptor,"rule onSetExpr");
        RewriteRuleSubtreeStream stream_patternInclusionExpression=new RewriteRuleSubtreeStream(adaptor,"rule patternInclusionExpression");
        try {
            // EsperEPL2Grammar.g:571:2: ( ON ( eventFilterExpression | patternInclusionExpression ) ( AS i= IDENT | i= IDENT )? ( onDeleteExpr | onSelectExpr ( ( onSelectInsertExpr )+ ( outputClauseInsert )? )? | onSetExpr ) -> ^( ON_EXPR ( eventFilterExpression )? ( patternInclusionExpression )? ( $i)? ( onDeleteExpr )? ( onSelectExpr )? ( onSelectInsertExpr )* ( outputClauseInsert )? ( onSetExpr )? ) )
            // EsperEPL2Grammar.g:571:4: ON ( eventFilterExpression | patternInclusionExpression ) ( AS i= IDENT | i= IDENT )? ( onDeleteExpr | onSelectExpr ( ( onSelectInsertExpr )+ ( outputClauseInsert )? )? | onSetExpr )
            {
            ON71=(Token)match(input,ON,FOLLOW_ON_in_onExpr2033); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ON.add(ON71);

            // EsperEPL2Grammar.g:571:7: ( eventFilterExpression | patternInclusionExpression )
            int alt24=2;
            int LA24_0 = input.LA(1);

            if ( (LA24_0==IDENT||LA24_0==TICKED_STRING_LITERAL) ) {
                alt24=1;
            }
            else if ( (LA24_0==PATTERN) ) {
                alt24=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 24, 0, input);

                throw nvae;
            }
            switch (alt24) {
                case 1 :
                    // EsperEPL2Grammar.g:571:8: eventFilterExpression
                    {
                    pushFollow(FOLLOW_eventFilterExpression_in_onExpr2036);
                    eventFilterExpression72=eventFilterExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_eventFilterExpression.add(eventFilterExpression72.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:571:32: patternInclusionExpression
                    {
                    pushFollow(FOLLOW_patternInclusionExpression_in_onExpr2040);
                    patternInclusionExpression73=patternInclusionExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_patternInclusionExpression.add(patternInclusionExpression73.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:571:60: ( AS i= IDENT | i= IDENT )?
            int alt25=3;
            int LA25_0 = input.LA(1);

            if ( (LA25_0==AS) ) {
                alt25=1;
            }
            else if ( (LA25_0==IDENT) ) {
                alt25=2;
            }
            switch (alt25) {
                case 1 :
                    // EsperEPL2Grammar.g:571:61: AS i= IDENT
                    {
                    AS74=(Token)match(input,AS,FOLLOW_AS_in_onExpr2044); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS74);

                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onExpr2048); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:571:74: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onExpr2054); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:572:3: ( onDeleteExpr | onSelectExpr ( ( onSelectInsertExpr )+ ( outputClauseInsert )? )? | onSetExpr )
            int alt29=3;
            switch ( input.LA(1) ) {
            case DELETE:
                {
                alt29=1;
                }
                break;
            case SELECT:
            case INSERT:
                {
                alt29=2;
                }
                break;
            case SET:
                {
                alt29=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 29, 0, input);

                throw nvae;
            }

            switch (alt29) {
                case 1 :
                    // EsperEPL2Grammar.g:572:4: onDeleteExpr
                    {
                    pushFollow(FOLLOW_onDeleteExpr_in_onExpr2062);
                    onDeleteExpr75=onDeleteExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onDeleteExpr.add(onDeleteExpr75.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:572:19: onSelectExpr ( ( onSelectInsertExpr )+ ( outputClauseInsert )? )?
                    {
                    pushFollow(FOLLOW_onSelectExpr_in_onExpr2066);
                    onSelectExpr76=onSelectExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onSelectExpr.add(onSelectExpr76.getTree());
                    // EsperEPL2Grammar.g:572:32: ( ( onSelectInsertExpr )+ ( outputClauseInsert )? )?
                    int alt28=2;
                    int LA28_0 = input.LA(1);

                    if ( (LA28_0==INSERT) ) {
                        alt28=1;
                    }
                    switch (alt28) {
                        case 1 :
                            // EsperEPL2Grammar.g:572:33: ( onSelectInsertExpr )+ ( outputClauseInsert )?
                            {
                            // EsperEPL2Grammar.g:572:33: ( onSelectInsertExpr )+
                            int cnt26=0;
                            loop26:
                            do {
                                int alt26=2;
                                int LA26_0 = input.LA(1);

                                if ( (LA26_0==INSERT) ) {
                                    alt26=1;
                                }


                                switch (alt26) {
                            	case 1 :
                            	    // EsperEPL2Grammar.g:572:33: onSelectInsertExpr
                            	    {
                            	    pushFollow(FOLLOW_onSelectInsertExpr_in_onExpr2069);
                            	    onSelectInsertExpr77=onSelectInsertExpr();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_onSelectInsertExpr.add(onSelectInsertExpr77.getTree());

                            	    }
                            	    break;

                            	default :
                            	    if ( cnt26 >= 1 ) break loop26;
                            	    if (state.backtracking>0) {state.failed=true; return retval;}
                                        EarlyExitException eee =
                                            new EarlyExitException(26, input);
                                        throw eee;
                                }
                                cnt26++;
                            } while (true);

                            // EsperEPL2Grammar.g:572:53: ( outputClauseInsert )?
                            int alt27=2;
                            int LA27_0 = input.LA(1);

                            if ( (LA27_0==OUTPUT) ) {
                                alt27=1;
                            }
                            switch (alt27) {
                                case 1 :
                                    // EsperEPL2Grammar.g:572:53: outputClauseInsert
                                    {
                                    pushFollow(FOLLOW_outputClauseInsert_in_onExpr2072);
                                    outputClauseInsert78=outputClauseInsert();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_outputClauseInsert.add(outputClauseInsert78.getTree());

                                    }
                                    break;

                            }


                            }
                            break;

                    }


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:572:77: onSetExpr
                    {
                    pushFollow(FOLLOW_onSetExpr_in_onExpr2079);
                    onSetExpr79=onSetExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onSetExpr.add(onSetExpr79.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: onSetExpr, i, patternInclusionExpression, onSelectInsertExpr, onSelectExpr, onDeleteExpr, outputClauseInsert, eventFilterExpression
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 573:3: -> ^( ON_EXPR ( eventFilterExpression )? ( patternInclusionExpression )? ( $i)? ( onDeleteExpr )? ( onSelectExpr )? ( onSelectInsertExpr )* ( outputClauseInsert )? ( onSetExpr )? )
            {
                // EsperEPL2Grammar.g:573:6: ^( ON_EXPR ( eventFilterExpression )? ( patternInclusionExpression )? ( $i)? ( onDeleteExpr )? ( onSelectExpr )? ( onSelectInsertExpr )* ( outputClauseInsert )? ( onSetExpr )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_EXPR, "ON_EXPR"), root_1);

                // EsperEPL2Grammar.g:573:16: ( eventFilterExpression )?
                if ( stream_eventFilterExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_eventFilterExpression.nextTree());

                }
                stream_eventFilterExpression.reset();
                // EsperEPL2Grammar.g:573:39: ( patternInclusionExpression )?
                if ( stream_patternInclusionExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_patternInclusionExpression.nextTree());

                }
                stream_patternInclusionExpression.reset();
                // EsperEPL2Grammar.g:573:67: ( $i)?
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());

                }
                stream_i.reset();
                // EsperEPL2Grammar.g:573:71: ( onDeleteExpr )?
                if ( stream_onDeleteExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onDeleteExpr.nextTree());

                }
                stream_onDeleteExpr.reset();
                // EsperEPL2Grammar.g:573:85: ( onSelectExpr )?
                if ( stream_onSelectExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSelectExpr.nextTree());

                }
                stream_onSelectExpr.reset();
                // EsperEPL2Grammar.g:573:99: ( onSelectInsertExpr )*
                while ( stream_onSelectInsertExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSelectInsertExpr.nextTree());

                }
                stream_onSelectInsertExpr.reset();
                // EsperEPL2Grammar.g:573:119: ( outputClauseInsert )?
                if ( stream_outputClauseInsert.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputClauseInsert.nextTree());

                }
                stream_outputClauseInsert.reset();
                // EsperEPL2Grammar.g:573:139: ( onSetExpr )?
                if ( stream_onSetExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetExpr.nextTree());

                }
                stream_onSetExpr.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "onExpr"

    public static class onSelectExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "onSelectExpr"
    // EsperEPL2Grammar.g:576:1: onSelectExpr : ( INSERT insertIntoExpr )? SELECT selectionList ( onExprFrom )? ( WHERE whereClause )? ( GROUP BY groupByListExpr )? ( HAVING havingClause )? ( ORDER BY orderByListExpr )? -> ^( ON_SELECT_EXPR ( insertIntoExpr )? selectionList ( onExprFrom )? ( whereClause )? ( groupByListExpr )? ( havingClause )? ( orderByListExpr )? ) ;
    public final EsperEPL2GrammarParser.onSelectExpr_return onSelectExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onSelectExpr_return retval = new EsperEPL2GrammarParser.onSelectExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token INSERT80=null;
        Token SELECT82=null;
        Token WHERE85=null;
        Token GROUP87=null;
        Token BY88=null;
        Token HAVING90=null;
        Token ORDER92=null;
        Token BY93=null;
        EsperEPL2GrammarParser.insertIntoExpr_return insertIntoExpr81 = null;

        EsperEPL2GrammarParser.selectionList_return selectionList83 = null;

        EsperEPL2GrammarParser.onExprFrom_return onExprFrom84 = null;

        EsperEPL2GrammarParser.whereClause_return whereClause86 = null;

        EsperEPL2GrammarParser.groupByListExpr_return groupByListExpr89 = null;

        EsperEPL2GrammarParser.havingClause_return havingClause91 = null;

        EsperEPL2GrammarParser.orderByListExpr_return orderByListExpr94 = null;


        CommonTree INSERT80_tree=null;
        CommonTree SELECT82_tree=null;
        CommonTree WHERE85_tree=null;
        CommonTree GROUP87_tree=null;
        CommonTree BY88_tree=null;
        CommonTree HAVING90_tree=null;
        CommonTree ORDER92_tree=null;
        CommonTree BY93_tree=null;
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_GROUP=new RewriteRuleTokenStream(adaptor,"token GROUP");
        RewriteRuleTokenStream stream_BY=new RewriteRuleTokenStream(adaptor,"token BY");
        RewriteRuleTokenStream stream_HAVING=new RewriteRuleTokenStream(adaptor,"token HAVING");
        RewriteRuleTokenStream stream_INSERT=new RewriteRuleTokenStream(adaptor,"token INSERT");
        RewriteRuleTokenStream stream_ORDER=new RewriteRuleTokenStream(adaptor,"token ORDER");
        RewriteRuleTokenStream stream_SELECT=new RewriteRuleTokenStream(adaptor,"token SELECT");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_groupByListExpr=new RewriteRuleSubtreeStream(adaptor,"rule groupByListExpr");
        RewriteRuleSubtreeStream stream_insertIntoExpr=new RewriteRuleSubtreeStream(adaptor,"rule insertIntoExpr");
        RewriteRuleSubtreeStream stream_orderByListExpr=new RewriteRuleSubtreeStream(adaptor,"rule orderByListExpr");
        RewriteRuleSubtreeStream stream_selectionList=new RewriteRuleSubtreeStream(adaptor,"rule selectionList");
        RewriteRuleSubtreeStream stream_onExprFrom=new RewriteRuleSubtreeStream(adaptor,"rule onExprFrom");
        RewriteRuleSubtreeStream stream_havingClause=new RewriteRuleSubtreeStream(adaptor,"rule havingClause");
         paraphrases.push("on-select clause"); 
        try {
            // EsperEPL2Grammar.g:579:2: ( ( INSERT insertIntoExpr )? SELECT selectionList ( onExprFrom )? ( WHERE whereClause )? ( GROUP BY groupByListExpr )? ( HAVING havingClause )? ( ORDER BY orderByListExpr )? -> ^( ON_SELECT_EXPR ( insertIntoExpr )? selectionList ( onExprFrom )? ( whereClause )? ( groupByListExpr )? ( havingClause )? ( orderByListExpr )? ) )
            // EsperEPL2Grammar.g:579:4: ( INSERT insertIntoExpr )? SELECT selectionList ( onExprFrom )? ( WHERE whereClause )? ( GROUP BY groupByListExpr )? ( HAVING havingClause )? ( ORDER BY orderByListExpr )?
            {
            // EsperEPL2Grammar.g:579:4: ( INSERT insertIntoExpr )?
            int alt30=2;
            int LA30_0 = input.LA(1);

            if ( (LA30_0==INSERT) ) {
                alt30=1;
            }
            switch (alt30) {
                case 1 :
                    // EsperEPL2Grammar.g:579:5: INSERT insertIntoExpr
                    {
                    INSERT80=(Token)match(input,INSERT,FOLLOW_INSERT_in_onSelectExpr2138); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INSERT.add(INSERT80);

                    pushFollow(FOLLOW_insertIntoExpr_in_onSelectExpr2140);
                    insertIntoExpr81=insertIntoExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_insertIntoExpr.add(insertIntoExpr81.getTree());

                    }
                    break;

            }

            SELECT82=(Token)match(input,SELECT,FOLLOW_SELECT_in_onSelectExpr2146); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SELECT.add(SELECT82);

            pushFollow(FOLLOW_selectionList_in_onSelectExpr2148);
            selectionList83=selectionList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_selectionList.add(selectionList83.getTree());
            // EsperEPL2Grammar.g:581:3: ( onExprFrom )?
            int alt31=2;
            int LA31_0 = input.LA(1);

            if ( (LA31_0==FROM) ) {
                alt31=1;
            }
            switch (alt31) {
                case 1 :
                    // EsperEPL2Grammar.g:581:3: onExprFrom
                    {
                    pushFollow(FOLLOW_onExprFrom_in_onSelectExpr2152);
                    onExprFrom84=onExprFrom();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onExprFrom.add(onExprFrom84.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:582:3: ( WHERE whereClause )?
            int alt32=2;
            int LA32_0 = input.LA(1);

            if ( (LA32_0==WHERE) ) {
                alt32=1;
            }
            switch (alt32) {
                case 1 :
                    // EsperEPL2Grammar.g:582:4: WHERE whereClause
                    {
                    WHERE85=(Token)match(input,WHERE,FOLLOW_WHERE_in_onSelectExpr2158); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE85);

                    pushFollow(FOLLOW_whereClause_in_onSelectExpr2160);
                    whereClause86=whereClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause86.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:583:3: ( GROUP BY groupByListExpr )?
            int alt33=2;
            int LA33_0 = input.LA(1);

            if ( (LA33_0==GROUP) ) {
                alt33=1;
            }
            switch (alt33) {
                case 1 :
                    // EsperEPL2Grammar.g:583:4: GROUP BY groupByListExpr
                    {
                    GROUP87=(Token)match(input,GROUP,FOLLOW_GROUP_in_onSelectExpr2169); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_GROUP.add(GROUP87);

                    BY88=(Token)match(input,BY,FOLLOW_BY_in_onSelectExpr2171); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BY.add(BY88);

                    pushFollow(FOLLOW_groupByListExpr_in_onSelectExpr2173);
                    groupByListExpr89=groupByListExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_groupByListExpr.add(groupByListExpr89.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:584:3: ( HAVING havingClause )?
            int alt34=2;
            int LA34_0 = input.LA(1);

            if ( (LA34_0==HAVING) ) {
                alt34=1;
            }
            switch (alt34) {
                case 1 :
                    // EsperEPL2Grammar.g:584:4: HAVING havingClause
                    {
                    HAVING90=(Token)match(input,HAVING,FOLLOW_HAVING_in_onSelectExpr2180); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_HAVING.add(HAVING90);

                    pushFollow(FOLLOW_havingClause_in_onSelectExpr2182);
                    havingClause91=havingClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_havingClause.add(havingClause91.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:585:3: ( ORDER BY orderByListExpr )?
            int alt35=2;
            int LA35_0 = input.LA(1);

            if ( (LA35_0==ORDER) ) {
                alt35=1;
            }
            switch (alt35) {
                case 1 :
                    // EsperEPL2Grammar.g:585:4: ORDER BY orderByListExpr
                    {
                    ORDER92=(Token)match(input,ORDER,FOLLOW_ORDER_in_onSelectExpr2189); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ORDER.add(ORDER92);

                    BY93=(Token)match(input,BY,FOLLOW_BY_in_onSelectExpr2191); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BY.add(BY93);

                    pushFollow(FOLLOW_orderByListExpr_in_onSelectExpr2193);
                    orderByListExpr94=orderByListExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_orderByListExpr.add(orderByListExpr94.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: whereClause, orderByListExpr, havingClause, selectionList, insertIntoExpr, groupByListExpr, onExprFrom
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 586:3: -> ^( ON_SELECT_EXPR ( insertIntoExpr )? selectionList ( onExprFrom )? ( whereClause )? ( groupByListExpr )? ( havingClause )? ( orderByListExpr )? )
            {
                // EsperEPL2Grammar.g:586:6: ^( ON_SELECT_EXPR ( insertIntoExpr )? selectionList ( onExprFrom )? ( whereClause )? ( groupByListExpr )? ( havingClause )? ( orderByListExpr )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_SELECT_EXPR, "ON_SELECT_EXPR"), root_1);

                // EsperEPL2Grammar.g:586:23: ( insertIntoExpr )?
                if ( stream_insertIntoExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_insertIntoExpr.nextTree());

                }
                stream_insertIntoExpr.reset();
                adaptor.addChild(root_1, stream_selectionList.nextTree());
                // EsperEPL2Grammar.g:586:53: ( onExprFrom )?
                if ( stream_onExprFrom.hasNext() ) {
                    adaptor.addChild(root_1, stream_onExprFrom.nextTree());

                }
                stream_onExprFrom.reset();
                // EsperEPL2Grammar.g:586:65: ( whereClause )?
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());

                }
                stream_whereClause.reset();
                // EsperEPL2Grammar.g:586:78: ( groupByListExpr )?
                if ( stream_groupByListExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_groupByListExpr.nextTree());

                }
                stream_groupByListExpr.reset();
                // EsperEPL2Grammar.g:586:95: ( havingClause )?
                if ( stream_havingClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_havingClause.nextTree());

                }
                stream_havingClause.reset();
                // EsperEPL2Grammar.g:586:109: ( orderByListExpr )?
                if ( stream_orderByListExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_orderByListExpr.nextTree());

                }
                stream_orderByListExpr.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "onSelectExpr"

    public static class onSelectInsertExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "onSelectInsertExpr"
    // EsperEPL2Grammar.g:589:1: onSelectInsertExpr : INSERT insertIntoExpr SELECT selectionList ( WHERE whereClause )? -> ^( ON_SELECT_INSERT_EXPR insertIntoExpr selectionList ( whereClause )? ) ;
    public final EsperEPL2GrammarParser.onSelectInsertExpr_return onSelectInsertExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onSelectInsertExpr_return retval = new EsperEPL2GrammarParser.onSelectInsertExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token INSERT95=null;
        Token SELECT97=null;
        Token WHERE99=null;
        EsperEPL2GrammarParser.insertIntoExpr_return insertIntoExpr96 = null;

        EsperEPL2GrammarParser.selectionList_return selectionList98 = null;

        EsperEPL2GrammarParser.whereClause_return whereClause100 = null;


        CommonTree INSERT95_tree=null;
        CommonTree SELECT97_tree=null;
        CommonTree WHERE99_tree=null;
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_INSERT=new RewriteRuleTokenStream(adaptor,"token INSERT");
        RewriteRuleTokenStream stream_SELECT=new RewriteRuleTokenStream(adaptor,"token SELECT");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_insertIntoExpr=new RewriteRuleSubtreeStream(adaptor,"rule insertIntoExpr");
        RewriteRuleSubtreeStream stream_selectionList=new RewriteRuleSubtreeStream(adaptor,"rule selectionList");
         paraphrases.push("on-select-insert clause"); 
        try {
            // EsperEPL2Grammar.g:592:2: ( INSERT insertIntoExpr SELECT selectionList ( WHERE whereClause )? -> ^( ON_SELECT_INSERT_EXPR insertIntoExpr selectionList ( whereClause )? ) )
            // EsperEPL2Grammar.g:592:4: INSERT insertIntoExpr SELECT selectionList ( WHERE whereClause )?
            {
            INSERT95=(Token)match(input,INSERT,FOLLOW_INSERT_in_onSelectInsertExpr2246); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_INSERT.add(INSERT95);

            pushFollow(FOLLOW_insertIntoExpr_in_onSelectInsertExpr2248);
            insertIntoExpr96=insertIntoExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_insertIntoExpr.add(insertIntoExpr96.getTree());
            SELECT97=(Token)match(input,SELECT,FOLLOW_SELECT_in_onSelectInsertExpr2252); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SELECT.add(SELECT97);

            pushFollow(FOLLOW_selectionList_in_onSelectInsertExpr2254);
            selectionList98=selectionList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_selectionList.add(selectionList98.getTree());
            // EsperEPL2Grammar.g:594:3: ( WHERE whereClause )?
            int alt36=2;
            int LA36_0 = input.LA(1);

            if ( (LA36_0==WHERE) ) {
                alt36=1;
            }
            switch (alt36) {
                case 1 :
                    // EsperEPL2Grammar.g:594:4: WHERE whereClause
                    {
                    WHERE99=(Token)match(input,WHERE,FOLLOW_WHERE_in_onSelectInsertExpr2259); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE99);

                    pushFollow(FOLLOW_whereClause_in_onSelectInsertExpr2261);
                    whereClause100=whereClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause100.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: insertIntoExpr, whereClause, selectionList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 595:3: -> ^( ON_SELECT_INSERT_EXPR insertIntoExpr selectionList ( whereClause )? )
            {
                // EsperEPL2Grammar.g:595:6: ^( ON_SELECT_INSERT_EXPR insertIntoExpr selectionList ( whereClause )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_SELECT_INSERT_EXPR, "ON_SELECT_INSERT_EXPR"), root_1);

                adaptor.addChild(root_1, stream_insertIntoExpr.nextTree());
                adaptor.addChild(root_1, stream_selectionList.nextTree());
                // EsperEPL2Grammar.g:595:59: ( whereClause )?
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());

                }
                stream_whereClause.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "onSelectInsertExpr"

    public static class outputClauseInsert_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "outputClauseInsert"
    // EsperEPL2Grammar.g:598:1: outputClauseInsert : OUTPUT (f= FIRST | a= ALL ) -> ^( ON_SELECT_INSERT_OUTPUT ( $f)? ( $a)? ) ;
    public final EsperEPL2GrammarParser.outputClauseInsert_return outputClauseInsert() throws RecognitionException {
        EsperEPL2GrammarParser.outputClauseInsert_return retval = new EsperEPL2GrammarParser.outputClauseInsert_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token f=null;
        Token a=null;
        Token OUTPUT101=null;

        CommonTree f_tree=null;
        CommonTree a_tree=null;
        CommonTree OUTPUT101_tree=null;
        RewriteRuleTokenStream stream_OUTPUT=new RewriteRuleTokenStream(adaptor,"token OUTPUT");
        RewriteRuleTokenStream stream_ALL=new RewriteRuleTokenStream(adaptor,"token ALL");
        RewriteRuleTokenStream stream_FIRST=new RewriteRuleTokenStream(adaptor,"token FIRST");

        try {
            // EsperEPL2Grammar.g:599:2: ( OUTPUT (f= FIRST | a= ALL ) -> ^( ON_SELECT_INSERT_OUTPUT ( $f)? ( $a)? ) )
            // EsperEPL2Grammar.g:599:4: OUTPUT (f= FIRST | a= ALL )
            {
            OUTPUT101=(Token)match(input,OUTPUT,FOLLOW_OUTPUT_in_outputClauseInsert2292); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_OUTPUT.add(OUTPUT101);

            // EsperEPL2Grammar.g:599:11: (f= FIRST | a= ALL )
            int alt37=2;
            int LA37_0 = input.LA(1);

            if ( (LA37_0==FIRST) ) {
                alt37=1;
            }
            else if ( (LA37_0==ALL) ) {
                alt37=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 37, 0, input);

                throw nvae;
            }
            switch (alt37) {
                case 1 :
                    // EsperEPL2Grammar.g:599:12: f= FIRST
                    {
                    f=(Token)match(input,FIRST,FOLLOW_FIRST_in_outputClauseInsert2297); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FIRST.add(f);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:599:22: a= ALL
                    {
                    a=(Token)match(input,ALL,FOLLOW_ALL_in_outputClauseInsert2303); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ALL.add(a);


                    }
                    break;

            }



            // AST REWRITE
            // elements: a, f
            // token labels: f, a
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_f=new RewriteRuleTokenStream(adaptor,"token f",f);
            RewriteRuleTokenStream stream_a=new RewriteRuleTokenStream(adaptor,"token a",a);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 600:3: -> ^( ON_SELECT_INSERT_OUTPUT ( $f)? ( $a)? )
            {
                // EsperEPL2Grammar.g:600:6: ^( ON_SELECT_INSERT_OUTPUT ( $f)? ( $a)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_SELECT_INSERT_OUTPUT, "ON_SELECT_INSERT_OUTPUT"), root_1);

                // EsperEPL2Grammar.g:600:32: ( $f)?
                if ( stream_f.hasNext() ) {
                    adaptor.addChild(root_1, stream_f.nextNode());

                }
                stream_f.reset();
                // EsperEPL2Grammar.g:600:36: ( $a)?
                if ( stream_a.hasNext() ) {
                    adaptor.addChild(root_1, stream_a.nextNode());

                }
                stream_a.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "outputClauseInsert"

    public static class onDeleteExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "onDeleteExpr"
    // EsperEPL2Grammar.g:603:1: onDeleteExpr : DELETE onExprFrom ( WHERE whereClause )? -> ^( ON_DELETE_EXPR onExprFrom ( whereClause )? ) ;
    public final EsperEPL2GrammarParser.onDeleteExpr_return onDeleteExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onDeleteExpr_return retval = new EsperEPL2GrammarParser.onDeleteExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token DELETE102=null;
        Token WHERE104=null;
        EsperEPL2GrammarParser.onExprFrom_return onExprFrom103 = null;

        EsperEPL2GrammarParser.whereClause_return whereClause105 = null;


        CommonTree DELETE102_tree=null;
        CommonTree WHERE104_tree=null;
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_DELETE=new RewriteRuleTokenStream(adaptor,"token DELETE");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_onExprFrom=new RewriteRuleSubtreeStream(adaptor,"rule onExprFrom");
         paraphrases.push("on-delete clause"); 
        try {
            // EsperEPL2Grammar.g:606:2: ( DELETE onExprFrom ( WHERE whereClause )? -> ^( ON_DELETE_EXPR onExprFrom ( whereClause )? ) )
            // EsperEPL2Grammar.g:606:4: DELETE onExprFrom ( WHERE whereClause )?
            {
            DELETE102=(Token)match(input,DELETE,FOLLOW_DELETE_in_onDeleteExpr2345); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DELETE.add(DELETE102);

            pushFollow(FOLLOW_onExprFrom_in_onDeleteExpr2349);
            onExprFrom103=onExprFrom();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_onExprFrom.add(onExprFrom103.getTree());
            // EsperEPL2Grammar.g:608:3: ( WHERE whereClause )?
            int alt38=2;
            int LA38_0 = input.LA(1);

            if ( (LA38_0==WHERE) ) {
                alt38=1;
            }
            switch (alt38) {
                case 1 :
                    // EsperEPL2Grammar.g:608:4: WHERE whereClause
                    {
                    WHERE104=(Token)match(input,WHERE,FOLLOW_WHERE_in_onDeleteExpr2354); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE104);

                    pushFollow(FOLLOW_whereClause_in_onDeleteExpr2356);
                    whereClause105=whereClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause105.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: onExprFrom, whereClause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 609:3: -> ^( ON_DELETE_EXPR onExprFrom ( whereClause )? )
            {
                // EsperEPL2Grammar.g:609:6: ^( ON_DELETE_EXPR onExprFrom ( whereClause )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_DELETE_EXPR, "ON_DELETE_EXPR"), root_1);

                adaptor.addChild(root_1, stream_onExprFrom.nextTree());
                // EsperEPL2Grammar.g:609:34: ( whereClause )?
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());

                }
                stream_whereClause.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "onDeleteExpr"

    public static class onSetExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "onSetExpr"
    // EsperEPL2Grammar.g:612:1: onSetExpr : SET onSetAssignment ( COMMA onSetAssignment )* -> ^( ON_SET_EXPR ( onSetAssignment )+ ) ;
    public final EsperEPL2GrammarParser.onSetExpr_return onSetExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onSetExpr_return retval = new EsperEPL2GrammarParser.onSetExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token SET106=null;
        Token COMMA108=null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment107 = null;

        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment109 = null;


        CommonTree SET106_tree=null;
        CommonTree COMMA108_tree=null;
        RewriteRuleTokenStream stream_SET=new RewriteRuleTokenStream(adaptor,"token SET");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_onSetAssignment=new RewriteRuleSubtreeStream(adaptor,"rule onSetAssignment");
         paraphrases.push("on-set clause"); 
        try {
            // EsperEPL2Grammar.g:615:2: ( SET onSetAssignment ( COMMA onSetAssignment )* -> ^( ON_SET_EXPR ( onSetAssignment )+ ) )
            // EsperEPL2Grammar.g:615:4: SET onSetAssignment ( COMMA onSetAssignment )*
            {
            SET106=(Token)match(input,SET,FOLLOW_SET_in_onSetExpr2396); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SET.add(SET106);

            pushFollow(FOLLOW_onSetAssignment_in_onSetExpr2398);
            onSetAssignment107=onSetAssignment();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment107.getTree());
            // EsperEPL2Grammar.g:615:24: ( COMMA onSetAssignment )*
            loop39:
            do {
                int alt39=2;
                int LA39_0 = input.LA(1);

                if ( (LA39_0==COMMA) ) {
                    alt39=1;
                }


                switch (alt39) {
            	case 1 :
            	    // EsperEPL2Grammar.g:615:25: COMMA onSetAssignment
            	    {
            	    COMMA108=(Token)match(input,COMMA,FOLLOW_COMMA_in_onSetExpr2401); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA108);

            	    pushFollow(FOLLOW_onSetAssignment_in_onSetExpr2403);
            	    onSetAssignment109=onSetAssignment();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment109.getTree());

            	    }
            	    break;

            	default :
            	    break loop39;
                }
            } while (true);



            // AST REWRITE
            // elements: onSetAssignment
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 616:3: -> ^( ON_SET_EXPR ( onSetAssignment )+ )
            {
                // EsperEPL2Grammar.g:616:6: ^( ON_SET_EXPR ( onSetAssignment )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_SET_EXPR, "ON_SET_EXPR"), root_1);

                if ( !(stream_onSetAssignment.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_onSetAssignment.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetAssignment.nextTree());

                }
                stream_onSetAssignment.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "onSetExpr"

    public static class onSetAssignment_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "onSetAssignment"
    // EsperEPL2Grammar.g:619:1: onSetAssignment : IDENT EQUALS expression ;
    public final EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment() throws RecognitionException {
        EsperEPL2GrammarParser.onSetAssignment_return retval = new EsperEPL2GrammarParser.onSetAssignment_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token IDENT110=null;
        Token EQUALS111=null;
        EsperEPL2GrammarParser.expression_return expression112 = null;


        CommonTree IDENT110_tree=null;
        CommonTree EQUALS111_tree=null;

        try {
            // EsperEPL2Grammar.g:620:2: ( IDENT EQUALS expression )
            // EsperEPL2Grammar.g:620:4: IDENT EQUALS expression
            {
            root_0 = (CommonTree)adaptor.nil();

            IDENT110=(Token)match(input,IDENT,FOLLOW_IDENT_in_onSetAssignment2428); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IDENT110_tree = (CommonTree)adaptor.create(IDENT110);
            adaptor.addChild(root_0, IDENT110_tree);
            }
            EQUALS111=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_onSetAssignment2430); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_onSetAssignment2433);
            expression112=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression112.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "onSetAssignment"

    public static class onExprFrom_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "onExprFrom"
    // EsperEPL2Grammar.g:623:1: onExprFrom : FROM n= IDENT ( AS i= IDENT | i= IDENT )? -> ^( ON_EXPR_FROM $n ( $i)? ) ;
    public final EsperEPL2GrammarParser.onExprFrom_return onExprFrom() throws RecognitionException {
        EsperEPL2GrammarParser.onExprFrom_return retval = new EsperEPL2GrammarParser.onExprFrom_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token n=null;
        Token i=null;
        Token FROM113=null;
        Token AS114=null;

        CommonTree n_tree=null;
        CommonTree i_tree=null;
        CommonTree FROM113_tree=null;
        CommonTree AS114_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_FROM=new RewriteRuleTokenStream(adaptor,"token FROM");

        try {
            // EsperEPL2Grammar.g:624:2: ( FROM n= IDENT ( AS i= IDENT | i= IDENT )? -> ^( ON_EXPR_FROM $n ( $i)? ) )
            // EsperEPL2Grammar.g:624:4: FROM n= IDENT ( AS i= IDENT | i= IDENT )?
            {
            FROM113=(Token)match(input,FROM,FOLLOW_FROM_in_onExprFrom2446); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_FROM.add(FROM113);

            n=(Token)match(input,IDENT,FOLLOW_IDENT_in_onExprFrom2450); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(n);

            // EsperEPL2Grammar.g:624:17: ( AS i= IDENT | i= IDENT )?
            int alt40=3;
            int LA40_0 = input.LA(1);

            if ( (LA40_0==AS) ) {
                alt40=1;
            }
            else if ( (LA40_0==IDENT) ) {
                alt40=2;
            }
            switch (alt40) {
                case 1 :
                    // EsperEPL2Grammar.g:624:18: AS i= IDENT
                    {
                    AS114=(Token)match(input,AS,FOLLOW_AS_in_onExprFrom2453); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS114);

                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onExprFrom2457); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:624:31: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onExprFrom2463); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;

            }



            // AST REWRITE
            // elements: i, n
            // token labels: n, i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_n=new RewriteRuleTokenStream(adaptor,"token n",n);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 625:3: -> ^( ON_EXPR_FROM $n ( $i)? )
            {
                // EsperEPL2Grammar.g:625:6: ^( ON_EXPR_FROM $n ( $i)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_EXPR_FROM, "ON_EXPR_FROM"), root_1);

                adaptor.addChild(root_1, stream_n.nextNode());
                // EsperEPL2Grammar.g:625:24: ( $i)?
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());

                }
                stream_i.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "onExprFrom"

    public static class createWindowExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "createWindowExpr"
    // EsperEPL2Grammar.g:628:1: createWindowExpr : CREATE WINDOW i= IDENT ( DOT viewExpression ( DOT viewExpression )* )? (ru= RETAINUNION | ri= RETAININTERSECTION )? ( AS )? ( createWindowExprModelAfter | LPAREN createWindowColumnList RPAREN ) (i1= INSERT ( WHERE expression )? )? -> {i1 != null}? ^( CREATE_WINDOW_EXPR $i ( viewExpression )* ( $ru)? ( $ri)? ( createWindowExprModelAfter )? ( createWindowColumnList )? ^( INSERT ( expression )? ) ) -> ^( CREATE_WINDOW_EXPR $i ( viewExpression )* ( $ru)? ( $ri)? ( createWindowExprModelAfter )? ( createWindowColumnList )? ) ;
    public final EsperEPL2GrammarParser.createWindowExpr_return createWindowExpr() throws RecognitionException {
        EsperEPL2GrammarParser.createWindowExpr_return retval = new EsperEPL2GrammarParser.createWindowExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token ru=null;
        Token ri=null;
        Token i1=null;
        Token CREATE115=null;
        Token WINDOW116=null;
        Token DOT117=null;
        Token DOT119=null;
        Token AS121=null;
        Token LPAREN123=null;
        Token RPAREN125=null;
        Token WHERE126=null;
        EsperEPL2GrammarParser.viewExpression_return viewExpression118 = null;

        EsperEPL2GrammarParser.viewExpression_return viewExpression120 = null;

        EsperEPL2GrammarParser.createWindowExprModelAfter_return createWindowExprModelAfter122 = null;

        EsperEPL2GrammarParser.createWindowColumnList_return createWindowColumnList124 = null;

        EsperEPL2GrammarParser.expression_return expression127 = null;


        CommonTree i_tree=null;
        CommonTree ru_tree=null;
        CommonTree ri_tree=null;
        CommonTree i1_tree=null;
        CommonTree CREATE115_tree=null;
        CommonTree WINDOW116_tree=null;
        CommonTree DOT117_tree=null;
        CommonTree DOT119_tree=null;
        CommonTree AS121_tree=null;
        CommonTree LPAREN123_tree=null;
        CommonTree RPAREN125_tree=null;
        CommonTree WHERE126_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_CREATE=new RewriteRuleTokenStream(adaptor,"token CREATE");
        RewriteRuleTokenStream stream_WINDOW=new RewriteRuleTokenStream(adaptor,"token WINDOW");
        RewriteRuleTokenStream stream_RETAINUNION=new RewriteRuleTokenStream(adaptor,"token RETAINUNION");
        RewriteRuleTokenStream stream_RETAININTERSECTION=new RewriteRuleTokenStream(adaptor,"token RETAININTERSECTION");
        RewriteRuleTokenStream stream_INSERT=new RewriteRuleTokenStream(adaptor,"token INSERT");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_createWindowExprModelAfter=new RewriteRuleSubtreeStream(adaptor,"rule createWindowExprModelAfter");
        RewriteRuleSubtreeStream stream_viewExpression=new RewriteRuleSubtreeStream(adaptor,"rule viewExpression");
        RewriteRuleSubtreeStream stream_createWindowColumnList=new RewriteRuleSubtreeStream(adaptor,"rule createWindowColumnList");
        try {
            // EsperEPL2Grammar.g:629:2: ( CREATE WINDOW i= IDENT ( DOT viewExpression ( DOT viewExpression )* )? (ru= RETAINUNION | ri= RETAININTERSECTION )? ( AS )? ( createWindowExprModelAfter | LPAREN createWindowColumnList RPAREN ) (i1= INSERT ( WHERE expression )? )? -> {i1 != null}? ^( CREATE_WINDOW_EXPR $i ( viewExpression )* ( $ru)? ( $ri)? ( createWindowExprModelAfter )? ( createWindowColumnList )? ^( INSERT ( expression )? ) ) -> ^( CREATE_WINDOW_EXPR $i ( viewExpression )* ( $ru)? ( $ri)? ( createWindowExprModelAfter )? ( createWindowColumnList )? ) )
            // EsperEPL2Grammar.g:629:4: CREATE WINDOW i= IDENT ( DOT viewExpression ( DOT viewExpression )* )? (ru= RETAINUNION | ri= RETAININTERSECTION )? ( AS )? ( createWindowExprModelAfter | LPAREN createWindowColumnList RPAREN ) (i1= INSERT ( WHERE expression )? )?
            {
            CREATE115=(Token)match(input,CREATE,FOLLOW_CREATE_in_createWindowExpr2491); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CREATE.add(CREATE115);

            WINDOW116=(Token)match(input,WINDOW,FOLLOW_WINDOW_in_createWindowExpr2493); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_WINDOW.add(WINDOW116);

            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_createWindowExpr2497); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);

            // EsperEPL2Grammar.g:629:26: ( DOT viewExpression ( DOT viewExpression )* )?
            int alt42=2;
            int LA42_0 = input.LA(1);

            if ( (LA42_0==DOT) ) {
                alt42=1;
            }
            switch (alt42) {
                case 1 :
                    // EsperEPL2Grammar.g:629:27: DOT viewExpression ( DOT viewExpression )*
                    {
                    DOT117=(Token)match(input,DOT,FOLLOW_DOT_in_createWindowExpr2500); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT117);

                    pushFollow(FOLLOW_viewExpression_in_createWindowExpr2502);
                    viewExpression118=viewExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression118.getTree());
                    // EsperEPL2Grammar.g:629:46: ( DOT viewExpression )*
                    loop41:
                    do {
                        int alt41=2;
                        int LA41_0 = input.LA(1);

                        if ( (LA41_0==DOT) ) {
                            alt41=1;
                        }


                        switch (alt41) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:629:47: DOT viewExpression
                    	    {
                    	    DOT119=(Token)match(input,DOT,FOLLOW_DOT_in_createWindowExpr2505); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_DOT.add(DOT119);

                    	    pushFollow(FOLLOW_viewExpression_in_createWindowExpr2507);
                    	    viewExpression120=viewExpression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression120.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop41;
                        }
                    } while (true);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:629:70: (ru= RETAINUNION | ri= RETAININTERSECTION )?
            int alt43=3;
            int LA43_0 = input.LA(1);

            if ( (LA43_0==RETAINUNION) ) {
                alt43=1;
            }
            else if ( (LA43_0==RETAININTERSECTION) ) {
                alt43=2;
            }
            switch (alt43) {
                case 1 :
                    // EsperEPL2Grammar.g:629:71: ru= RETAINUNION
                    {
                    ru=(Token)match(input,RETAINUNION,FOLLOW_RETAINUNION_in_createWindowExpr2516); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAINUNION.add(ru);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:629:86: ri= RETAININTERSECTION
                    {
                    ri=(Token)match(input,RETAININTERSECTION,FOLLOW_RETAININTERSECTION_in_createWindowExpr2520); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAININTERSECTION.add(ri);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:629:110: ( AS )?
            int alt44=2;
            int LA44_0 = input.LA(1);

            if ( (LA44_0==AS) ) {
                alt44=1;
            }
            switch (alt44) {
                case 1 :
                    // EsperEPL2Grammar.g:629:110: AS
                    {
                    AS121=(Token)match(input,AS,FOLLOW_AS_in_createWindowExpr2524); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS121);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:630:5: ( createWindowExprModelAfter | LPAREN createWindowColumnList RPAREN )
            int alt45=2;
            int LA45_0 = input.LA(1);

            if ( (LA45_0==SELECT||LA45_0==IDENT||LA45_0==TICKED_STRING_LITERAL) ) {
                alt45=1;
            }
            else if ( (LA45_0==LPAREN) ) {
                alt45=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 45, 0, input);

                throw nvae;
            }
            switch (alt45) {
                case 1 :
                    // EsperEPL2Grammar.g:631:6: createWindowExprModelAfter
                    {
                    pushFollow(FOLLOW_createWindowExprModelAfter_in_createWindowExpr2539);
                    createWindowExprModelAfter122=createWindowExprModelAfter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_createWindowExprModelAfter.add(createWindowExprModelAfter122.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:632:10: LPAREN createWindowColumnList RPAREN
                    {
                    LPAREN123=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_createWindowExpr2554); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN123);

                    pushFollow(FOLLOW_createWindowColumnList_in_createWindowExpr2556);
                    createWindowColumnList124=createWindowColumnList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_createWindowColumnList.add(createWindowColumnList124.getTree());
                    RPAREN125=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_createWindowExpr2558); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN125);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:634:5: (i1= INSERT ( WHERE expression )? )?
            int alt47=2;
            int LA47_0 = input.LA(1);

            if ( (LA47_0==INSERT) ) {
                alt47=1;
            }
            switch (alt47) {
                case 1 :
                    // EsperEPL2Grammar.g:634:6: i1= INSERT ( WHERE expression )?
                    {
                    i1=(Token)match(input,INSERT,FOLLOW_INSERT_in_createWindowExpr2575); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INSERT.add(i1);

                    // EsperEPL2Grammar.g:634:16: ( WHERE expression )?
                    int alt46=2;
                    int LA46_0 = input.LA(1);

                    if ( (LA46_0==WHERE) ) {
                        alt46=1;
                    }
                    switch (alt46) {
                        case 1 :
                            // EsperEPL2Grammar.g:634:17: WHERE expression
                            {
                            WHERE126=(Token)match(input,WHERE,FOLLOW_WHERE_in_createWindowExpr2578); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_WHERE.add(WHERE126);

                            pushFollow(FOLLOW_expression_in_createWindowExpr2580);
                            expression127=expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(expression127.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }



            // AST REWRITE
            // elements: ru, createWindowColumnList, createWindowExprModelAfter, INSERT, ru, createWindowExprModelAfter, viewExpression, createWindowColumnList, viewExpression, ri, ri, expression, i, i
            // token labels: ri, ru, i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_ri=new RewriteRuleTokenStream(adaptor,"token ri",ri);
            RewriteRuleTokenStream stream_ru=new RewriteRuleTokenStream(adaptor,"token ru",ru);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 635:3: -> {i1 != null}? ^( CREATE_WINDOW_EXPR $i ( viewExpression )* ( $ru)? ( $ri)? ( createWindowExprModelAfter )? ( createWindowColumnList )? ^( INSERT ( expression )? ) )
            if (i1 != null) {
                // EsperEPL2Grammar.g:635:20: ^( CREATE_WINDOW_EXPR $i ( viewExpression )* ( $ru)? ( $ri)? ( createWindowExprModelAfter )? ( createWindowColumnList )? ^( INSERT ( expression )? ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_WINDOW_EXPR, "CREATE_WINDOW_EXPR"), root_1);

                adaptor.addChild(root_1, stream_i.nextNode());
                // EsperEPL2Grammar.g:635:44: ( viewExpression )*
                while ( stream_viewExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_viewExpression.nextTree());

                }
                stream_viewExpression.reset();
                // EsperEPL2Grammar.g:635:60: ( $ru)?
                if ( stream_ru.hasNext() ) {
                    adaptor.addChild(root_1, stream_ru.nextNode());

                }
                stream_ru.reset();
                // EsperEPL2Grammar.g:635:65: ( $ri)?
                if ( stream_ri.hasNext() ) {
                    adaptor.addChild(root_1, stream_ri.nextNode());

                }
                stream_ri.reset();
                // EsperEPL2Grammar.g:635:70: ( createWindowExprModelAfter )?
                if ( stream_createWindowExprModelAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_createWindowExprModelAfter.nextTree());

                }
                stream_createWindowExprModelAfter.reset();
                // EsperEPL2Grammar.g:635:98: ( createWindowColumnList )?
                if ( stream_createWindowColumnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_createWindowColumnList.nextTree());

                }
                stream_createWindowColumnList.reset();
                // EsperEPL2Grammar.g:636:5: ^( INSERT ( expression )? )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot(stream_INSERT.nextNode(), root_2);

                // EsperEPL2Grammar.g:636:14: ( expression )?
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_2, stream_expression.nextTree());

                }
                stream_expression.reset();

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 637:3: -> ^( CREATE_WINDOW_EXPR $i ( viewExpression )* ( $ru)? ( $ri)? ( createWindowExprModelAfter )? ( createWindowColumnList )? )
            {
                // EsperEPL2Grammar.g:637:6: ^( CREATE_WINDOW_EXPR $i ( viewExpression )* ( $ru)? ( $ri)? ( createWindowExprModelAfter )? ( createWindowColumnList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_WINDOW_EXPR, "CREATE_WINDOW_EXPR"), root_1);

                adaptor.addChild(root_1, stream_i.nextNode());
                // EsperEPL2Grammar.g:637:30: ( viewExpression )*
                while ( stream_viewExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_viewExpression.nextTree());

                }
                stream_viewExpression.reset();
                // EsperEPL2Grammar.g:637:46: ( $ru)?
                if ( stream_ru.hasNext() ) {
                    adaptor.addChild(root_1, stream_ru.nextNode());

                }
                stream_ru.reset();
                // EsperEPL2Grammar.g:637:51: ( $ri)?
                if ( stream_ri.hasNext() ) {
                    adaptor.addChild(root_1, stream_ri.nextNode());

                }
                stream_ri.reset();
                // EsperEPL2Grammar.g:637:56: ( createWindowExprModelAfter )?
                if ( stream_createWindowExprModelAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_createWindowExprModelAfter.nextTree());

                }
                stream_createWindowExprModelAfter.reset();
                // EsperEPL2Grammar.g:637:84: ( createWindowColumnList )?
                if ( stream_createWindowColumnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_createWindowColumnList.nextTree());

                }
                stream_createWindowColumnList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "createWindowExpr"

    public static class createWindowExprModelAfter_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "createWindowExprModelAfter"
    // EsperEPL2Grammar.g:640:1: createWindowExprModelAfter : ( SELECT createSelectionList FROM )? classIdentifier ;
    public final EsperEPL2GrammarParser.createWindowExprModelAfter_return createWindowExprModelAfter() throws RecognitionException {
        EsperEPL2GrammarParser.createWindowExprModelAfter_return retval = new EsperEPL2GrammarParser.createWindowExprModelAfter_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token SELECT128=null;
        Token FROM130=null;
        EsperEPL2GrammarParser.createSelectionList_return createSelectionList129 = null;

        EsperEPL2GrammarParser.classIdentifier_return classIdentifier131 = null;


        CommonTree SELECT128_tree=null;
        CommonTree FROM130_tree=null;

        try {
            // EsperEPL2Grammar.g:641:2: ( ( SELECT createSelectionList FROM )? classIdentifier )
            // EsperEPL2Grammar.g:641:4: ( SELECT createSelectionList FROM )? classIdentifier
            {
            root_0 = (CommonTree)adaptor.nil();

            // EsperEPL2Grammar.g:641:4: ( SELECT createSelectionList FROM )?
            int alt48=2;
            int LA48_0 = input.LA(1);

            if ( (LA48_0==SELECT) ) {
                alt48=1;
            }
            switch (alt48) {
                case 1 :
                    // EsperEPL2Grammar.g:641:5: SELECT createSelectionList FROM
                    {
                    SELECT128=(Token)match(input,SELECT,FOLLOW_SELECT_in_createWindowExprModelAfter2667); if (state.failed) return retval;
                    pushFollow(FOLLOW_createSelectionList_in_createWindowExprModelAfter2670);
                    createSelectionList129=createSelectionList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createSelectionList129.getTree());
                    FROM130=(Token)match(input,FROM,FOLLOW_FROM_in_createWindowExprModelAfter2672); if (state.failed) return retval;

                    }
                    break;

            }

            pushFollow(FOLLOW_classIdentifier_in_createWindowExprModelAfter2677);
            classIdentifier131=classIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier131.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "createWindowExprModelAfter"

    public static class createVariableExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "createVariableExpr"
    // EsperEPL2Grammar.g:644:1: createVariableExpr : CREATE VARIABLE t= IDENT n= IDENT ( EQUALS expression )? -> ^( CREATE_VARIABLE_EXPR $t $n ( expression )? ) ;
    public final EsperEPL2GrammarParser.createVariableExpr_return createVariableExpr() throws RecognitionException {
        EsperEPL2GrammarParser.createVariableExpr_return retval = new EsperEPL2GrammarParser.createVariableExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token t=null;
        Token n=null;
        Token CREATE132=null;
        Token VARIABLE133=null;
        Token EQUALS134=null;
        EsperEPL2GrammarParser.expression_return expression135 = null;


        CommonTree t_tree=null;
        CommonTree n_tree=null;
        CommonTree CREATE132_tree=null;
        CommonTree VARIABLE133_tree=null;
        CommonTree EQUALS134_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_CREATE=new RewriteRuleTokenStream(adaptor,"token CREATE");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleTokenStream stream_VARIABLE=new RewriteRuleTokenStream(adaptor,"token VARIABLE");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            // EsperEPL2Grammar.g:645:2: ( CREATE VARIABLE t= IDENT n= IDENT ( EQUALS expression )? -> ^( CREATE_VARIABLE_EXPR $t $n ( expression )? ) )
            // EsperEPL2Grammar.g:645:4: CREATE VARIABLE t= IDENT n= IDENT ( EQUALS expression )?
            {
            CREATE132=(Token)match(input,CREATE,FOLLOW_CREATE_in_createVariableExpr2690); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CREATE.add(CREATE132);

            VARIABLE133=(Token)match(input,VARIABLE,FOLLOW_VARIABLE_in_createVariableExpr2692); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_VARIABLE.add(VARIABLE133);

            t=(Token)match(input,IDENT,FOLLOW_IDENT_in_createVariableExpr2696); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(t);

            n=(Token)match(input,IDENT,FOLLOW_IDENT_in_createVariableExpr2700); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(n);

            // EsperEPL2Grammar.g:645:36: ( EQUALS expression )?
            int alt49=2;
            int LA49_0 = input.LA(1);

            if ( (LA49_0==EQUALS) ) {
                alt49=1;
            }
            switch (alt49) {
                case 1 :
                    // EsperEPL2Grammar.g:645:37: EQUALS expression
                    {
                    EQUALS134=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_createVariableExpr2703); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS134);

                    pushFollow(FOLLOW_expression_in_createVariableExpr2705);
                    expression135=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression135.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: expression, n, t
            // token labels: t, n
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_t=new RewriteRuleTokenStream(adaptor,"token t",t);
            RewriteRuleTokenStream stream_n=new RewriteRuleTokenStream(adaptor,"token n",n);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 646:3: -> ^( CREATE_VARIABLE_EXPR $t $n ( expression )? )
            {
                // EsperEPL2Grammar.g:646:6: ^( CREATE_VARIABLE_EXPR $t $n ( expression )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_VARIABLE_EXPR, "CREATE_VARIABLE_EXPR"), root_1);

                adaptor.addChild(root_1, stream_t.nextNode());
                adaptor.addChild(root_1, stream_n.nextNode());
                // EsperEPL2Grammar.g:646:35: ( expression )?
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());

                }
                stream_expression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "createVariableExpr"

    public static class createWindowColumnList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "createWindowColumnList"
    // EsperEPL2Grammar.g:649:1: createWindowColumnList : createWindowColumnListElement ( COMMA createWindowColumnListElement )* -> ^( CREATE_WINDOW_COL_TYPE_LIST ( createWindowColumnListElement )+ ) ;
    public final EsperEPL2GrammarParser.createWindowColumnList_return createWindowColumnList() throws RecognitionException {
        EsperEPL2GrammarParser.createWindowColumnList_return retval = new EsperEPL2GrammarParser.createWindowColumnList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA137=null;
        EsperEPL2GrammarParser.createWindowColumnListElement_return createWindowColumnListElement136 = null;

        EsperEPL2GrammarParser.createWindowColumnListElement_return createWindowColumnListElement138 = null;


        CommonTree COMMA137_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_createWindowColumnListElement=new RewriteRuleSubtreeStream(adaptor,"rule createWindowColumnListElement");
         paraphrases.push("create window column list"); 
        try {
            // EsperEPL2Grammar.g:652:2: ( createWindowColumnListElement ( COMMA createWindowColumnListElement )* -> ^( CREATE_WINDOW_COL_TYPE_LIST ( createWindowColumnListElement )+ ) )
            // EsperEPL2Grammar.g:652:4: createWindowColumnListElement ( COMMA createWindowColumnListElement )*
            {
            pushFollow(FOLLOW_createWindowColumnListElement_in_createWindowColumnList2748);
            createWindowColumnListElement136=createWindowColumnListElement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_createWindowColumnListElement.add(createWindowColumnListElement136.getTree());
            // EsperEPL2Grammar.g:652:34: ( COMMA createWindowColumnListElement )*
            loop50:
            do {
                int alt50=2;
                int LA50_0 = input.LA(1);

                if ( (LA50_0==COMMA) ) {
                    alt50=1;
                }


                switch (alt50) {
            	case 1 :
            	    // EsperEPL2Grammar.g:652:35: COMMA createWindowColumnListElement
            	    {
            	    COMMA137=(Token)match(input,COMMA,FOLLOW_COMMA_in_createWindowColumnList2751); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA137);

            	    pushFollow(FOLLOW_createWindowColumnListElement_in_createWindowColumnList2753);
            	    createWindowColumnListElement138=createWindowColumnListElement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_createWindowColumnListElement.add(createWindowColumnListElement138.getTree());

            	    }
            	    break;

            	default :
            	    break loop50;
                }
            } while (true);



            // AST REWRITE
            // elements: createWindowColumnListElement
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 653:3: -> ^( CREATE_WINDOW_COL_TYPE_LIST ( createWindowColumnListElement )+ )
            {
                // EsperEPL2Grammar.g:653:6: ^( CREATE_WINDOW_COL_TYPE_LIST ( createWindowColumnListElement )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_WINDOW_COL_TYPE_LIST, "CREATE_WINDOW_COL_TYPE_LIST"), root_1);

                if ( !(stream_createWindowColumnListElement.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_createWindowColumnListElement.hasNext() ) {
                    adaptor.addChild(root_1, stream_createWindowColumnListElement.nextTree());

                }
                stream_createWindowColumnListElement.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "createWindowColumnList"

    public static class createWindowColumnListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "createWindowColumnListElement"
    // EsperEPL2Grammar.g:656:1: createWindowColumnListElement : name= IDENT type= IDENT -> ^( CREATE_WINDOW_COL_TYPE $name $type) ;
    public final EsperEPL2GrammarParser.createWindowColumnListElement_return createWindowColumnListElement() throws RecognitionException {
        EsperEPL2GrammarParser.createWindowColumnListElement_return retval = new EsperEPL2GrammarParser.createWindowColumnListElement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token name=null;
        Token type=null;

        CommonTree name_tree=null;
        CommonTree type_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");

        try {
            // EsperEPL2Grammar.g:657:2: (name= IDENT type= IDENT -> ^( CREATE_WINDOW_COL_TYPE $name $type) )
            // EsperEPL2Grammar.g:657:7: name= IDENT type= IDENT
            {
            name=(Token)match(input,IDENT,FOLLOW_IDENT_in_createWindowColumnListElement2783); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(name);

            type=(Token)match(input,IDENT,FOLLOW_IDENT_in_createWindowColumnListElement2787); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(type);



            // AST REWRITE
            // elements: type, name
            // token labels: name, type
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_name=new RewriteRuleTokenStream(adaptor,"token name",name);
            RewriteRuleTokenStream stream_type=new RewriteRuleTokenStream(adaptor,"token type",type);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 658:3: -> ^( CREATE_WINDOW_COL_TYPE $name $type)
            {
                // EsperEPL2Grammar.g:658:6: ^( CREATE_WINDOW_COL_TYPE $name $type)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_WINDOW_COL_TYPE, "CREATE_WINDOW_COL_TYPE"), root_1);

                adaptor.addChild(root_1, stream_name.nextNode());
                adaptor.addChild(root_1, stream_type.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "createWindowColumnListElement"

    public static class createSelectionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "createSelectionList"
    // EsperEPL2Grammar.g:661:1: createSelectionList : createSelectionListElement ( COMMA createSelectionListElement )* -> ^( CREATE_WINDOW_SELECT_EXPR ( createSelectionListElement )+ ) ;
    public final EsperEPL2GrammarParser.createSelectionList_return createSelectionList() throws RecognitionException {
        EsperEPL2GrammarParser.createSelectionList_return retval = new EsperEPL2GrammarParser.createSelectionList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA140=null;
        EsperEPL2GrammarParser.createSelectionListElement_return createSelectionListElement139 = null;

        EsperEPL2GrammarParser.createSelectionListElement_return createSelectionListElement141 = null;


        CommonTree COMMA140_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_createSelectionListElement=new RewriteRuleSubtreeStream(adaptor,"rule createSelectionListElement");
         paraphrases.push("select clause"); 
        try {
            // EsperEPL2Grammar.g:664:2: ( createSelectionListElement ( COMMA createSelectionListElement )* -> ^( CREATE_WINDOW_SELECT_EXPR ( createSelectionListElement )+ ) )
            // EsperEPL2Grammar.g:664:4: createSelectionListElement ( COMMA createSelectionListElement )*
            {
            pushFollow(FOLLOW_createSelectionListElement_in_createSelectionList2825);
            createSelectionListElement139=createSelectionListElement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_createSelectionListElement.add(createSelectionListElement139.getTree());
            // EsperEPL2Grammar.g:664:31: ( COMMA createSelectionListElement )*
            loop51:
            do {
                int alt51=2;
                int LA51_0 = input.LA(1);

                if ( (LA51_0==COMMA) ) {
                    alt51=1;
                }


                switch (alt51) {
            	case 1 :
            	    // EsperEPL2Grammar.g:664:32: COMMA createSelectionListElement
            	    {
            	    COMMA140=(Token)match(input,COMMA,FOLLOW_COMMA_in_createSelectionList2828); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA140);

            	    pushFollow(FOLLOW_createSelectionListElement_in_createSelectionList2830);
            	    createSelectionListElement141=createSelectionListElement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_createSelectionListElement.add(createSelectionListElement141.getTree());

            	    }
            	    break;

            	default :
            	    break loop51;
                }
            } while (true);



            // AST REWRITE
            // elements: createSelectionListElement
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 665:3: -> ^( CREATE_WINDOW_SELECT_EXPR ( createSelectionListElement )+ )
            {
                // EsperEPL2Grammar.g:665:6: ^( CREATE_WINDOW_SELECT_EXPR ( createSelectionListElement )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_WINDOW_SELECT_EXPR, "CREATE_WINDOW_SELECT_EXPR"), root_1);

                if ( !(stream_createSelectionListElement.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_createSelectionListElement.hasNext() ) {
                    adaptor.addChild(root_1, stream_createSelectionListElement.nextTree());

                }
                stream_createSelectionListElement.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "createSelectionList"

    public static class createSelectionListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "createSelectionListElement"
    // EsperEPL2Grammar.g:668:1: createSelectionListElement : (s= STAR -> WILDCARD_SELECT[$s] | eventProperty ( AS i= IDENT )? -> ^( SELECTION_ELEMENT_EXPR eventProperty ( $i)? ) | constant AS i= IDENT -> ^( SELECTION_ELEMENT_EXPR constant ( $i)? ) );
    public final EsperEPL2GrammarParser.createSelectionListElement_return createSelectionListElement() throws RecognitionException {
        EsperEPL2GrammarParser.createSelectionListElement_return retval = new EsperEPL2GrammarParser.createSelectionListElement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token s=null;
        Token i=null;
        Token AS143=null;
        Token AS145=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty142 = null;

        EsperEPL2GrammarParser.constant_return constant144 = null;


        CommonTree s_tree=null;
        CommonTree i_tree=null;
        CommonTree AS143_tree=null;
        CommonTree AS145_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleSubtreeStream stream_constant=new RewriteRuleSubtreeStream(adaptor,"rule constant");
        RewriteRuleSubtreeStream stream_eventProperty=new RewriteRuleSubtreeStream(adaptor,"rule eventProperty");
        try {
            // EsperEPL2Grammar.g:669:2: (s= STAR -> WILDCARD_SELECT[$s] | eventProperty ( AS i= IDENT )? -> ^( SELECTION_ELEMENT_EXPR eventProperty ( $i)? ) | constant AS i= IDENT -> ^( SELECTION_ELEMENT_EXPR constant ( $i)? ) )
            int alt53=3;
            switch ( input.LA(1) ) {
            case STAR:
                {
                alt53=1;
                }
                break;
            case WINDOW:
            case ESCAPE:
            case EVERY_EXPR:
            case SUM:
            case AVG:
            case MAX:
            case MIN:
            case COALESCE:
            case MEDIAN:
            case STDDEV:
            case AVEDEV:
            case COUNT:
            case OUTER:
            case JOIN:
            case LEFT:
            case RIGHT:
            case FULL:
            case EVENTS:
            case FIRST:
            case LAST:
            case UNIDIRECTIONAL:
            case RETAINUNION:
            case RETAININTERSECTION:
            case PATTERN:
            case SQL:
            case METADATASQL:
            case PREVIOUS:
            case PRIOR:
            case WEEKDAY:
            case LW:
            case INSTANCEOF:
            case CAST:
            case SNAPSHOT:
            case VARIABLE:
            case UNTIL:
            case AT:
            case IDENT:
            case TICKED_STRING_LITERAL:
                {
                alt53=2;
                }
                break;
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case NUM_DOUBLE:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case PLUS:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt53=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 53, 0, input);

                throw nvae;
            }

            switch (alt53) {
                case 1 :
                    // EsperEPL2Grammar.g:669:7: s= STAR
                    {
                    s=(Token)match(input,STAR,FOLLOW_STAR_in_createSelectionListElement2859); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STAR.add(s);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 670:3: -> WILDCARD_SELECT[$s]
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(WILDCARD_SELECT, s));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:671:4: eventProperty ( AS i= IDENT )?
                    {
                    pushFollow(FOLLOW_eventProperty_in_createSelectionListElement2871);
                    eventProperty142=eventProperty();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_eventProperty.add(eventProperty142.getTree());
                    // EsperEPL2Grammar.g:671:18: ( AS i= IDENT )?
                    int alt52=2;
                    int LA52_0 = input.LA(1);

                    if ( (LA52_0==AS) ) {
                        alt52=1;
                    }
                    switch (alt52) {
                        case 1 :
                            // EsperEPL2Grammar.g:671:19: AS i= IDENT
                            {
                            AS143=(Token)match(input,AS,FOLLOW_AS_in_createSelectionListElement2874); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_AS.add(AS143);

                            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_createSelectionListElement2878); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IDENT.add(i);


                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: i, eventProperty
                    // token labels: i
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 672:3: -> ^( SELECTION_ELEMENT_EXPR eventProperty ( $i)? )
                    {
                        // EsperEPL2Grammar.g:672:6: ^( SELECTION_ELEMENT_EXPR eventProperty ( $i)? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);

                        adaptor.addChild(root_1, stream_eventProperty.nextTree());
                        // EsperEPL2Grammar.g:672:45: ( $i)?
                        if ( stream_i.hasNext() ) {
                            adaptor.addChild(root_1, stream_i.nextNode());

                        }
                        stream_i.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:673:4: constant AS i= IDENT
                    {
                    pushFollow(FOLLOW_constant_in_createSelectionListElement2899);
                    constant144=constant();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_constant.add(constant144.getTree());
                    AS145=(Token)match(input,AS,FOLLOW_AS_in_createSelectionListElement2901); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS145);

                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_createSelectionListElement2905); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);



                    // AST REWRITE
                    // elements: constant, i
                    // token labels: i
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 674:3: -> ^( SELECTION_ELEMENT_EXPR constant ( $i)? )
                    {
                        // EsperEPL2Grammar.g:674:6: ^( SELECTION_ELEMENT_EXPR constant ( $i)? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);

                        adaptor.addChild(root_1, stream_constant.nextTree());
                        // EsperEPL2Grammar.g:674:40: ( $i)?
                        if ( stream_i.hasNext() ) {
                            adaptor.addChild(root_1, stream_i.nextNode());

                        }
                        stream_i.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "createSelectionListElement"

    public static class insertIntoExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "insertIntoExpr"
    // EsperEPL2Grammar.g:677:1: insertIntoExpr : (s= ISTREAM | s= RSTREAM )? INTO i= IDENT ( insertIntoColumnList )? -> ^( INSERTINTO_EXPR ( $s)? $i ( insertIntoColumnList )? ) ;
    public final EsperEPL2GrammarParser.insertIntoExpr_return insertIntoExpr() throws RecognitionException {
        EsperEPL2GrammarParser.insertIntoExpr_return retval = new EsperEPL2GrammarParser.insertIntoExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token s=null;
        Token i=null;
        Token INTO146=null;
        EsperEPL2GrammarParser.insertIntoColumnList_return insertIntoColumnList147 = null;


        CommonTree s_tree=null;
        CommonTree i_tree=null;
        CommonTree INTO146_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_ISTREAM=new RewriteRuleTokenStream(adaptor,"token ISTREAM");
        RewriteRuleTokenStream stream_INTO=new RewriteRuleTokenStream(adaptor,"token INTO");
        RewriteRuleTokenStream stream_RSTREAM=new RewriteRuleTokenStream(adaptor,"token RSTREAM");
        RewriteRuleSubtreeStream stream_insertIntoColumnList=new RewriteRuleSubtreeStream(adaptor,"rule insertIntoColumnList");
         paraphrases.push("insert-into clause"); 
        try {
            // EsperEPL2Grammar.g:680:2: ( (s= ISTREAM | s= RSTREAM )? INTO i= IDENT ( insertIntoColumnList )? -> ^( INSERTINTO_EXPR ( $s)? $i ( insertIntoColumnList )? ) )
            // EsperEPL2Grammar.g:680:4: (s= ISTREAM | s= RSTREAM )? INTO i= IDENT ( insertIntoColumnList )?
            {
            // EsperEPL2Grammar.g:680:4: (s= ISTREAM | s= RSTREAM )?
            int alt54=3;
            int LA54_0 = input.LA(1);

            if ( (LA54_0==ISTREAM) ) {
                alt54=1;
            }
            else if ( (LA54_0==RSTREAM) ) {
                alt54=2;
            }
            switch (alt54) {
                case 1 :
                    // EsperEPL2Grammar.g:680:5: s= ISTREAM
                    {
                    s=(Token)match(input,ISTREAM,FOLLOW_ISTREAM_in_insertIntoExpr2944); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ISTREAM.add(s);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:680:17: s= RSTREAM
                    {
                    s=(Token)match(input,RSTREAM,FOLLOW_RSTREAM_in_insertIntoExpr2950); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RSTREAM.add(s);


                    }
                    break;

            }

            INTO146=(Token)match(input,INTO,FOLLOW_INTO_in_insertIntoExpr2954); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_INTO.add(INTO146);

            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_insertIntoExpr2958); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);

            // EsperEPL2Grammar.g:680:42: ( insertIntoColumnList )?
            int alt55=2;
            int LA55_0 = input.LA(1);

            if ( (LA55_0==LPAREN) ) {
                alt55=1;
            }
            switch (alt55) {
                case 1 :
                    // EsperEPL2Grammar.g:680:43: insertIntoColumnList
                    {
                    pushFollow(FOLLOW_insertIntoColumnList_in_insertIntoExpr2961);
                    insertIntoColumnList147=insertIntoColumnList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_insertIntoColumnList.add(insertIntoColumnList147.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: i, s, insertIntoColumnList
            // token labels: s, i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 681:3: -> ^( INSERTINTO_EXPR ( $s)? $i ( insertIntoColumnList )? )
            {
                // EsperEPL2Grammar.g:681:6: ^( INSERTINTO_EXPR ( $s)? $i ( insertIntoColumnList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(INSERTINTO_EXPR, "INSERTINTO_EXPR"), root_1);

                // EsperEPL2Grammar.g:681:24: ( $s)?
                if ( stream_s.hasNext() ) {
                    adaptor.addChild(root_1, stream_s.nextNode());

                }
                stream_s.reset();
                adaptor.addChild(root_1, stream_i.nextNode());
                // EsperEPL2Grammar.g:681:31: ( insertIntoColumnList )?
                if ( stream_insertIntoColumnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_insertIntoColumnList.nextTree());

                }
                stream_insertIntoColumnList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "insertIntoExpr"

    public static class insertIntoColumnList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "insertIntoColumnList"
    // EsperEPL2Grammar.g:684:1: insertIntoColumnList : LPAREN IDENT ( COMMA IDENT )* RPAREN -> ^( INSERTINTO_EXPRCOL ( IDENT )* ) ;
    public final EsperEPL2GrammarParser.insertIntoColumnList_return insertIntoColumnList() throws RecognitionException {
        EsperEPL2GrammarParser.insertIntoColumnList_return retval = new EsperEPL2GrammarParser.insertIntoColumnList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LPAREN148=null;
        Token IDENT149=null;
        Token COMMA150=null;
        Token IDENT151=null;
        Token RPAREN152=null;

        CommonTree LPAREN148_tree=null;
        CommonTree IDENT149_tree=null;
        CommonTree COMMA150_tree=null;
        CommonTree IDENT151_tree=null;
        CommonTree RPAREN152_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");

        try {
            // EsperEPL2Grammar.g:685:2: ( LPAREN IDENT ( COMMA IDENT )* RPAREN -> ^( INSERTINTO_EXPRCOL ( IDENT )* ) )
            // EsperEPL2Grammar.g:685:5: LPAREN IDENT ( COMMA IDENT )* RPAREN
            {
            LPAREN148=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_insertIntoColumnList2995); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN148);

            IDENT149=(Token)match(input,IDENT,FOLLOW_IDENT_in_insertIntoColumnList2997); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(IDENT149);

            // EsperEPL2Grammar.g:685:18: ( COMMA IDENT )*
            loop56:
            do {
                int alt56=2;
                int LA56_0 = input.LA(1);

                if ( (LA56_0==COMMA) ) {
                    alt56=1;
                }


                switch (alt56) {
            	case 1 :
            	    // EsperEPL2Grammar.g:685:19: COMMA IDENT
            	    {
            	    COMMA150=(Token)match(input,COMMA,FOLLOW_COMMA_in_insertIntoColumnList3000); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA150);

            	    IDENT151=(Token)match(input,IDENT,FOLLOW_IDENT_in_insertIntoColumnList3002); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_IDENT.add(IDENT151);


            	    }
            	    break;

            	default :
            	    break loop56;
                }
            } while (true);

            RPAREN152=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_insertIntoColumnList3006); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN152);



            // AST REWRITE
            // elements: IDENT
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 686:3: -> ^( INSERTINTO_EXPRCOL ( IDENT )* )
            {
                // EsperEPL2Grammar.g:686:6: ^( INSERTINTO_EXPRCOL ( IDENT )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(INSERTINTO_EXPRCOL, "INSERTINTO_EXPRCOL"), root_1);

                // EsperEPL2Grammar.g:686:27: ( IDENT )*
                while ( stream_IDENT.hasNext() ) {
                    adaptor.addChild(root_1, stream_IDENT.nextNode());

                }
                stream_IDENT.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "insertIntoColumnList"

    public static class fromClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "fromClause"
    // EsperEPL2Grammar.g:689:1: fromClause : streamExpression ( regularJoin | outerJoinList ) ;
    public final EsperEPL2GrammarParser.fromClause_return fromClause() throws RecognitionException {
        EsperEPL2GrammarParser.fromClause_return retval = new EsperEPL2GrammarParser.fromClause_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.streamExpression_return streamExpression153 = null;

        EsperEPL2GrammarParser.regularJoin_return regularJoin154 = null;

        EsperEPL2GrammarParser.outerJoinList_return outerJoinList155 = null;



         paraphrases.push("from clause"); 
        try {
            // EsperEPL2Grammar.g:692:2: ( streamExpression ( regularJoin | outerJoinList ) )
            // EsperEPL2Grammar.g:692:4: streamExpression ( regularJoin | outerJoinList )
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_streamExpression_in_fromClause3041);
            streamExpression153=streamExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, streamExpression153.getTree());
            // EsperEPL2Grammar.g:692:21: ( regularJoin | outerJoinList )
            int alt57=2;
            int LA57_0 = input.LA(1);

            if ( (LA57_0==EOF||LA57_0==WHERE||(LA57_0>=GROUP && LA57_0<=HAVING)||LA57_0==OUTPUT||LA57_0==ORDER||LA57_0==ROW_LIMIT_EXPR||LA57_0==COMMA) ) {
                alt57=1;
            }
            else if ( ((LA57_0>=INNER && LA57_0<=FULL)) ) {
                alt57=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 57, 0, input);

                throw nvae;
            }
            switch (alt57) {
                case 1 :
                    // EsperEPL2Grammar.g:692:22: regularJoin
                    {
                    pushFollow(FOLLOW_regularJoin_in_fromClause3044);
                    regularJoin154=regularJoin();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, regularJoin154.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:692:36: outerJoinList
                    {
                    pushFollow(FOLLOW_outerJoinList_in_fromClause3048);
                    outerJoinList155=outerJoinList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoinList155.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "fromClause"

    public static class regularJoin_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "regularJoin"
    // EsperEPL2Grammar.g:695:1: regularJoin : ( COMMA streamExpression )* ;
    public final EsperEPL2GrammarParser.regularJoin_return regularJoin() throws RecognitionException {
        EsperEPL2GrammarParser.regularJoin_return retval = new EsperEPL2GrammarParser.regularJoin_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA156=null;
        EsperEPL2GrammarParser.streamExpression_return streamExpression157 = null;


        CommonTree COMMA156_tree=null;

        try {
            // EsperEPL2Grammar.g:696:2: ( ( COMMA streamExpression )* )
            // EsperEPL2Grammar.g:696:4: ( COMMA streamExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            // EsperEPL2Grammar.g:696:4: ( COMMA streamExpression )*
            loop58:
            do {
                int alt58=2;
                int LA58_0 = input.LA(1);

                if ( (LA58_0==COMMA) ) {
                    alt58=1;
                }


                switch (alt58) {
            	case 1 :
            	    // EsperEPL2Grammar.g:696:5: COMMA streamExpression
            	    {
            	    COMMA156=(Token)match(input,COMMA,FOLLOW_COMMA_in_regularJoin3062); if (state.failed) return retval;
            	    pushFollow(FOLLOW_streamExpression_in_regularJoin3065);
            	    streamExpression157=streamExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, streamExpression157.getTree());

            	    }
            	    break;

            	default :
            	    break loop58;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "regularJoin"

    public static class outerJoinList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "outerJoinList"
    // EsperEPL2Grammar.g:699:1: outerJoinList : outerJoin ( outerJoin )* ;
    public final EsperEPL2GrammarParser.outerJoinList_return outerJoinList() throws RecognitionException {
        EsperEPL2GrammarParser.outerJoinList_return retval = new EsperEPL2GrammarParser.outerJoinList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.outerJoin_return outerJoin158 = null;

        EsperEPL2GrammarParser.outerJoin_return outerJoin159 = null;



        try {
            // EsperEPL2Grammar.g:700:2: ( outerJoin ( outerJoin )* )
            // EsperEPL2Grammar.g:700:4: outerJoin ( outerJoin )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_outerJoin_in_outerJoinList3079);
            outerJoin158=outerJoin();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoin158.getTree());
            // EsperEPL2Grammar.g:700:14: ( outerJoin )*
            loop59:
            do {
                int alt59=2;
                int LA59_0 = input.LA(1);

                if ( ((LA59_0>=INNER && LA59_0<=FULL)) ) {
                    alt59=1;
                }


                switch (alt59) {
            	case 1 :
            	    // EsperEPL2Grammar.g:700:15: outerJoin
            	    {
            	    pushFollow(FOLLOW_outerJoin_in_outerJoinList3082);
            	    outerJoin159=outerJoin();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoin159.getTree());

            	    }
            	    break;

            	default :
            	    break loop59;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "outerJoinList"

    public static class outerJoin_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "outerJoin"
    // EsperEPL2Grammar.g:703:1: outerJoin : ( ( (tl= LEFT | tr= RIGHT | tf= FULL ) OUTER )? | (i= INNER ) ) JOIN streamExpression outerJoinIdent -> {$i != null}? streamExpression ^( INNERJOIN_EXPR outerJoinIdent ) -> {$tl != null}? streamExpression ^( LEFT_OUTERJOIN_EXPR outerJoinIdent ) -> {$tr != null}? streamExpression ^( RIGHT_OUTERJOIN_EXPR outerJoinIdent ) -> streamExpression ^( FULL_OUTERJOIN_EXPR outerJoinIdent ) ;
    public final EsperEPL2GrammarParser.outerJoin_return outerJoin() throws RecognitionException {
        EsperEPL2GrammarParser.outerJoin_return retval = new EsperEPL2GrammarParser.outerJoin_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token tl=null;
        Token tr=null;
        Token tf=null;
        Token i=null;
        Token OUTER160=null;
        Token JOIN161=null;
        EsperEPL2GrammarParser.streamExpression_return streamExpression162 = null;

        EsperEPL2GrammarParser.outerJoinIdent_return outerJoinIdent163 = null;


        CommonTree tl_tree=null;
        CommonTree tr_tree=null;
        CommonTree tf_tree=null;
        CommonTree i_tree=null;
        CommonTree OUTER160_tree=null;
        CommonTree JOIN161_tree=null;
        RewriteRuleTokenStream stream_OUTER=new RewriteRuleTokenStream(adaptor,"token OUTER");
        RewriteRuleTokenStream stream_RIGHT=new RewriteRuleTokenStream(adaptor,"token RIGHT");
        RewriteRuleTokenStream stream_FULL=new RewriteRuleTokenStream(adaptor,"token FULL");
        RewriteRuleTokenStream stream_INNER=new RewriteRuleTokenStream(adaptor,"token INNER");
        RewriteRuleTokenStream stream_LEFT=new RewriteRuleTokenStream(adaptor,"token LEFT");
        RewriteRuleTokenStream stream_JOIN=new RewriteRuleTokenStream(adaptor,"token JOIN");
        RewriteRuleSubtreeStream stream_streamExpression=new RewriteRuleSubtreeStream(adaptor,"rule streamExpression");
        RewriteRuleSubtreeStream stream_outerJoinIdent=new RewriteRuleSubtreeStream(adaptor,"rule outerJoinIdent");
         paraphrases.push("outer join"); 
        try {
            // EsperEPL2Grammar.g:706:2: ( ( ( (tl= LEFT | tr= RIGHT | tf= FULL ) OUTER )? | (i= INNER ) ) JOIN streamExpression outerJoinIdent -> {$i != null}? streamExpression ^( INNERJOIN_EXPR outerJoinIdent ) -> {$tl != null}? streamExpression ^( LEFT_OUTERJOIN_EXPR outerJoinIdent ) -> {$tr != null}? streamExpression ^( RIGHT_OUTERJOIN_EXPR outerJoinIdent ) -> streamExpression ^( FULL_OUTERJOIN_EXPR outerJoinIdent ) )
            // EsperEPL2Grammar.g:706:4: ( ( (tl= LEFT | tr= RIGHT | tf= FULL ) OUTER )? | (i= INNER ) ) JOIN streamExpression outerJoinIdent
            {
            // EsperEPL2Grammar.g:706:4: ( ( (tl= LEFT | tr= RIGHT | tf= FULL ) OUTER )? | (i= INNER ) )
            int alt62=2;
            int LA62_0 = input.LA(1);

            if ( ((LA62_0>=JOIN && LA62_0<=FULL)) ) {
                alt62=1;
            }
            else if ( (LA62_0==INNER) ) {
                alt62=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 62, 0, input);

                throw nvae;
            }
            switch (alt62) {
                case 1 :
                    // EsperEPL2Grammar.g:707:14: ( (tl= LEFT | tr= RIGHT | tf= FULL ) OUTER )?
                    {
                    // EsperEPL2Grammar.g:707:14: ( (tl= LEFT | tr= RIGHT | tf= FULL ) OUTER )?
                    int alt61=2;
                    int LA61_0 = input.LA(1);

                    if ( ((LA61_0>=LEFT && LA61_0<=FULL)) ) {
                        alt61=1;
                    }
                    switch (alt61) {
                        case 1 :
                            // EsperEPL2Grammar.g:707:15: (tl= LEFT | tr= RIGHT | tf= FULL ) OUTER
                            {
                            // EsperEPL2Grammar.g:707:15: (tl= LEFT | tr= RIGHT | tf= FULL )
                            int alt60=3;
                            switch ( input.LA(1) ) {
                            case LEFT:
                                {
                                alt60=1;
                                }
                                break;
                            case RIGHT:
                                {
                                alt60=2;
                                }
                                break;
                            case FULL:
                                {
                                alt60=3;
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 60, 0, input);

                                throw nvae;
                            }

                            switch (alt60) {
                                case 1 :
                                    // EsperEPL2Grammar.g:707:16: tl= LEFT
                                    {
                                    tl=(Token)match(input,LEFT,FOLLOW_LEFT_in_outerJoin3125); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_LEFT.add(tl);


                                    }
                                    break;
                                case 2 :
                                    // EsperEPL2Grammar.g:707:24: tr= RIGHT
                                    {
                                    tr=(Token)match(input,RIGHT,FOLLOW_RIGHT_in_outerJoin3129); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_RIGHT.add(tr);


                                    }
                                    break;
                                case 3 :
                                    // EsperEPL2Grammar.g:707:33: tf= FULL
                                    {
                                    tf=(Token)match(input,FULL,FOLLOW_FULL_in_outerJoin3133); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_FULL.add(tf);


                                    }
                                    break;

                            }

                            OUTER160=(Token)match(input,OUTER,FOLLOW_OUTER_in_outerJoin3136); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_OUTER.add(OUTER160);


                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:708:14: (i= INNER )
                    {
                    // EsperEPL2Grammar.g:708:14: (i= INNER )
                    // EsperEPL2Grammar.g:708:15: i= INNER
                    {
                    i=(Token)match(input,INNER,FOLLOW_INNER_in_outerJoin3157); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INNER.add(i);


                    }


                    }
                    break;

            }

            JOIN161=(Token)match(input,JOIN,FOLLOW_JOIN_in_outerJoin3171); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_JOIN.add(JOIN161);

            pushFollow(FOLLOW_streamExpression_in_outerJoin3173);
            streamExpression162=streamExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_streamExpression.add(streamExpression162.getTree());
            pushFollow(FOLLOW_outerJoinIdent_in_outerJoin3175);
            outerJoinIdent163=outerJoinIdent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_outerJoinIdent.add(outerJoinIdent163.getTree());


            // AST REWRITE
            // elements: outerJoinIdent, outerJoinIdent, streamExpression, streamExpression, streamExpression, outerJoinIdent, streamExpression, outerJoinIdent
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 710:3: -> {$i != null}? streamExpression ^( INNERJOIN_EXPR outerJoinIdent )
            if (i != null) {
                adaptor.addChild(root_0, stream_streamExpression.nextTree());
                // EsperEPL2Grammar.g:710:37: ^( INNERJOIN_EXPR outerJoinIdent )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(INNERJOIN_EXPR, "INNERJOIN_EXPR"), root_1);

                adaptor.addChild(root_1, stream_outerJoinIdent.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 711:3: -> {$tl != null}? streamExpression ^( LEFT_OUTERJOIN_EXPR outerJoinIdent )
            if (tl != null) {
                adaptor.addChild(root_0, stream_streamExpression.nextTree());
                // EsperEPL2Grammar.g:711:38: ^( LEFT_OUTERJOIN_EXPR outerJoinIdent )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LEFT_OUTERJOIN_EXPR, "LEFT_OUTERJOIN_EXPR"), root_1);

                adaptor.addChild(root_1, stream_outerJoinIdent.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 712:3: -> {$tr != null}? streamExpression ^( RIGHT_OUTERJOIN_EXPR outerJoinIdent )
            if (tr != null) {
                adaptor.addChild(root_0, stream_streamExpression.nextTree());
                // EsperEPL2Grammar.g:712:38: ^( RIGHT_OUTERJOIN_EXPR outerJoinIdent )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(RIGHT_OUTERJOIN_EXPR, "RIGHT_OUTERJOIN_EXPR"), root_1);

                adaptor.addChild(root_1, stream_outerJoinIdent.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 713:3: -> streamExpression ^( FULL_OUTERJOIN_EXPR outerJoinIdent )
            {
                adaptor.addChild(root_0, stream_streamExpression.nextTree());
                // EsperEPL2Grammar.g:713:23: ^( FULL_OUTERJOIN_EXPR outerJoinIdent )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FULL_OUTERJOIN_EXPR, "FULL_OUTERJOIN_EXPR"), root_1);

                adaptor.addChild(root_1, stream_outerJoinIdent.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "outerJoin"

    public static class outerJoinIdent_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "outerJoinIdent"
    // EsperEPL2Grammar.g:716:1: outerJoinIdent : ON outerJoinIdentPair ( AND_EXPR outerJoinIdentPair )* ;
    public final EsperEPL2GrammarParser.outerJoinIdent_return outerJoinIdent() throws RecognitionException {
        EsperEPL2GrammarParser.outerJoinIdent_return retval = new EsperEPL2GrammarParser.outerJoinIdent_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token ON164=null;
        Token AND_EXPR166=null;
        EsperEPL2GrammarParser.outerJoinIdentPair_return outerJoinIdentPair165 = null;

        EsperEPL2GrammarParser.outerJoinIdentPair_return outerJoinIdentPair167 = null;


        CommonTree ON164_tree=null;
        CommonTree AND_EXPR166_tree=null;

        try {
            // EsperEPL2Grammar.g:717:2: ( ON outerJoinIdentPair ( AND_EXPR outerJoinIdentPair )* )
            // EsperEPL2Grammar.g:717:4: ON outerJoinIdentPair ( AND_EXPR outerJoinIdentPair )*
            {
            root_0 = (CommonTree)adaptor.nil();

            ON164=(Token)match(input,ON,FOLLOW_ON_in_outerJoinIdent3240); if (state.failed) return retval;
            pushFollow(FOLLOW_outerJoinIdentPair_in_outerJoinIdent3243);
            outerJoinIdentPair165=outerJoinIdentPair();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoinIdentPair165.getTree());
            // EsperEPL2Grammar.g:717:27: ( AND_EXPR outerJoinIdentPair )*
            loop63:
            do {
                int alt63=2;
                int LA63_0 = input.LA(1);

                if ( (LA63_0==AND_EXPR) ) {
                    alt63=1;
                }


                switch (alt63) {
            	case 1 :
            	    // EsperEPL2Grammar.g:717:28: AND_EXPR outerJoinIdentPair
            	    {
            	    AND_EXPR166=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_outerJoinIdent3246); if (state.failed) return retval;
            	    pushFollow(FOLLOW_outerJoinIdentPair_in_outerJoinIdent3249);
            	    outerJoinIdentPair167=outerJoinIdentPair();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoinIdentPair167.getTree());

            	    }
            	    break;

            	default :
            	    break loop63;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "outerJoinIdent"

    public static class outerJoinIdentPair_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "outerJoinIdentPair"
    // EsperEPL2Grammar.g:720:1: outerJoinIdentPair : eventProperty EQUALS eventProperty ;
    public final EsperEPL2GrammarParser.outerJoinIdentPair_return outerJoinIdentPair() throws RecognitionException {
        EsperEPL2GrammarParser.outerJoinIdentPair_return retval = new EsperEPL2GrammarParser.outerJoinIdentPair_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token EQUALS169=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty168 = null;

        EsperEPL2GrammarParser.eventProperty_return eventProperty170 = null;


        CommonTree EQUALS169_tree=null;

        try {
            // EsperEPL2Grammar.g:721:2: ( eventProperty EQUALS eventProperty )
            // EsperEPL2Grammar.g:721:4: eventProperty EQUALS eventProperty
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_eventProperty_in_outerJoinIdentPair3264);
            eventProperty168=eventProperty();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty168.getTree());
            EQUALS169=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_outerJoinIdentPair3266); if (state.failed) return retval;
            pushFollow(FOLLOW_eventProperty_in_outerJoinIdentPair3269);
            eventProperty170=eventProperty();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty170.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "outerJoinIdentPair"

    public static class whereClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "whereClause"
    // EsperEPL2Grammar.g:724:1: whereClause : evalOrExpression -> ^( WHERE_EXPR evalOrExpression ) ;
    public final EsperEPL2GrammarParser.whereClause_return whereClause() throws RecognitionException {
        EsperEPL2GrammarParser.whereClause_return retval = new EsperEPL2GrammarParser.whereClause_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.evalOrExpression_return evalOrExpression171 = null;


        RewriteRuleSubtreeStream stream_evalOrExpression=new RewriteRuleSubtreeStream(adaptor,"rule evalOrExpression");
         paraphrases.push("where clause"); 
        try {
            // EsperEPL2Grammar.g:727:2: ( evalOrExpression -> ^( WHERE_EXPR evalOrExpression ) )
            // EsperEPL2Grammar.g:727:4: evalOrExpression
            {
            pushFollow(FOLLOW_evalOrExpression_in_whereClause3291);
            evalOrExpression171=evalOrExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_evalOrExpression.add(evalOrExpression171.getTree());


            // AST REWRITE
            // elements: evalOrExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 728:3: -> ^( WHERE_EXPR evalOrExpression )
            {
                // EsperEPL2Grammar.g:728:6: ^( WHERE_EXPR evalOrExpression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WHERE_EXPR, "WHERE_EXPR"), root_1);

                adaptor.addChild(root_1, stream_evalOrExpression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "whereClause"

    public static class selectClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "selectClause"
    // EsperEPL2Grammar.g:731:1: selectClause : (s= RSTREAM | s= ISTREAM | s= IRSTREAM )? selectionList -> ^( SELECTION_EXPR ( $s)? selectionList ) ;
    public final EsperEPL2GrammarParser.selectClause_return selectClause() throws RecognitionException {
        EsperEPL2GrammarParser.selectClause_return retval = new EsperEPL2GrammarParser.selectClause_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token s=null;
        EsperEPL2GrammarParser.selectionList_return selectionList172 = null;


        CommonTree s_tree=null;
        RewriteRuleTokenStream stream_IRSTREAM=new RewriteRuleTokenStream(adaptor,"token IRSTREAM");
        RewriteRuleTokenStream stream_ISTREAM=new RewriteRuleTokenStream(adaptor,"token ISTREAM");
        RewriteRuleTokenStream stream_RSTREAM=new RewriteRuleTokenStream(adaptor,"token RSTREAM");
        RewriteRuleSubtreeStream stream_selectionList=new RewriteRuleSubtreeStream(adaptor,"rule selectionList");
         paraphrases.push("select clause"); 
        try {
            // EsperEPL2Grammar.g:734:2: ( (s= RSTREAM | s= ISTREAM | s= IRSTREAM )? selectionList -> ^( SELECTION_EXPR ( $s)? selectionList ) )
            // EsperEPL2Grammar.g:734:4: (s= RSTREAM | s= ISTREAM | s= IRSTREAM )? selectionList
            {
            // EsperEPL2Grammar.g:734:4: (s= RSTREAM | s= ISTREAM | s= IRSTREAM )?
            int alt64=4;
            switch ( input.LA(1) ) {
                case RSTREAM:
                    {
                    alt64=1;
                    }
                    break;
                case ISTREAM:
                    {
                    alt64=2;
                    }
                    break;
                case IRSTREAM:
                    {
                    alt64=3;
                    }
                    break;
            }

            switch (alt64) {
                case 1 :
                    // EsperEPL2Grammar.g:734:5: s= RSTREAM
                    {
                    s=(Token)match(input,RSTREAM,FOLLOW_RSTREAM_in_selectClause3327); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RSTREAM.add(s);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:734:17: s= ISTREAM
                    {
                    s=(Token)match(input,ISTREAM,FOLLOW_ISTREAM_in_selectClause3333); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ISTREAM.add(s);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:734:29: s= IRSTREAM
                    {
                    s=(Token)match(input,IRSTREAM,FOLLOW_IRSTREAM_in_selectClause3339); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IRSTREAM.add(s);


                    }
                    break;

            }

            pushFollow(FOLLOW_selectionList_in_selectClause3343);
            selectionList172=selectionList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_selectionList.add(selectionList172.getTree());


            // AST REWRITE
            // elements: selectionList, s
            // token labels: s
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 735:3: -> ^( SELECTION_EXPR ( $s)? selectionList )
            {
                // EsperEPL2Grammar.g:735:6: ^( SELECTION_EXPR ( $s)? selectionList )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_EXPR, "SELECTION_EXPR"), root_1);

                // EsperEPL2Grammar.g:735:23: ( $s)?
                if ( stream_s.hasNext() ) {
                    adaptor.addChild(root_1, stream_s.nextNode());

                }
                stream_s.reset();
                adaptor.addChild(root_1, stream_selectionList.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "selectClause"

    public static class selectionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "selectionList"
    // EsperEPL2Grammar.g:738:1: selectionList : selectionListElement ( COMMA selectionListElement )* ;
    public final EsperEPL2GrammarParser.selectionList_return selectionList() throws RecognitionException {
        EsperEPL2GrammarParser.selectionList_return retval = new EsperEPL2GrammarParser.selectionList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA174=null;
        EsperEPL2GrammarParser.selectionListElement_return selectionListElement173 = null;

        EsperEPL2GrammarParser.selectionListElement_return selectionListElement175 = null;


        CommonTree COMMA174_tree=null;

        try {
            // EsperEPL2Grammar.g:739:2: ( selectionListElement ( COMMA selectionListElement )* )
            // EsperEPL2Grammar.g:739:4: selectionListElement ( COMMA selectionListElement )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_selectionListElement_in_selectionList3370);
            selectionListElement173=selectionListElement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, selectionListElement173.getTree());
            // EsperEPL2Grammar.g:739:25: ( COMMA selectionListElement )*
            loop65:
            do {
                int alt65=2;
                int LA65_0 = input.LA(1);

                if ( (LA65_0==COMMA) ) {
                    alt65=1;
                }


                switch (alt65) {
            	case 1 :
            	    // EsperEPL2Grammar.g:739:26: COMMA selectionListElement
            	    {
            	    COMMA174=(Token)match(input,COMMA,FOLLOW_COMMA_in_selectionList3373); if (state.failed) return retval;
            	    pushFollow(FOLLOW_selectionListElement_in_selectionList3376);
            	    selectionListElement175=selectionListElement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, selectionListElement175.getTree());

            	    }
            	    break;

            	default :
            	    break loop65;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "selectionList"

    public static class selectionListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "selectionListElement"
    // EsperEPL2Grammar.g:742:1: selectionListElement : (s= STAR -> WILDCARD_SELECT[$s] | ( streamSelector )=> streamSelector | expression ( AS i= keywordAllowedIdent )? -> {identifier != null}? ^( SELECTION_ELEMENT_EXPR expression IDENT[identifier] ) -> {identifier == null}? ^( SELECTION_ELEMENT_EXPR expression ) -> ^( SELECTION_ELEMENT_EXPR expression ) );
    public final EsperEPL2GrammarParser.selectionListElement_return selectionListElement() throws RecognitionException {
        EsperEPL2GrammarParser.selectionListElement_return retval = new EsperEPL2GrammarParser.selectionListElement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token s=null;
        Token AS178=null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i = null;

        EsperEPL2GrammarParser.streamSelector_return streamSelector176 = null;

        EsperEPL2GrammarParser.expression_return expression177 = null;


        CommonTree s_tree=null;
        CommonTree AS178_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_keywordAllowedIdent=new RewriteRuleSubtreeStream(adaptor,"rule keywordAllowedIdent");
         String identifier = null; 
        try {
            // EsperEPL2Grammar.g:744:2: (s= STAR -> WILDCARD_SELECT[$s] | ( streamSelector )=> streamSelector | expression ( AS i= keywordAllowedIdent )? -> {identifier != null}? ^( SELECTION_ELEMENT_EXPR expression IDENT[identifier] ) -> {identifier == null}? ^( SELECTION_ELEMENT_EXPR expression ) -> ^( SELECTION_ELEMENT_EXPR expression ) )
            int alt67=3;
            alt67 = dfa67.predict(input);
            switch (alt67) {
                case 1 :
                    // EsperEPL2Grammar.g:744:7: s= STAR
                    {
                    s=(Token)match(input,STAR,FOLLOW_STAR_in_selectionListElement3402); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STAR.add(s);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 744:14: -> WILDCARD_SELECT[$s]
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(WILDCARD_SELECT, s));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:745:4: ( streamSelector )=> streamSelector
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_streamSelector_in_selectionListElement3418);
                    streamSelector176=streamSelector();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, streamSelector176.getTree());

                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:746:4: expression ( AS i= keywordAllowedIdent )?
                    {
                    pushFollow(FOLLOW_expression_in_selectionListElement3423);
                    expression177=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression177.getTree());
                    // EsperEPL2Grammar.g:746:15: ( AS i= keywordAllowedIdent )?
                    int alt66=2;
                    int LA66_0 = input.LA(1);

                    if ( (LA66_0==AS) ) {
                        alt66=1;
                    }
                    switch (alt66) {
                        case 1 :
                            // EsperEPL2Grammar.g:746:16: AS i= keywordAllowedIdent
                            {
                            AS178=(Token)match(input,AS,FOLLOW_AS_in_selectionListElement3426); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_AS.add(AS178);

                            pushFollow(FOLLOW_keywordAllowedIdent_in_selectionListElement3430);
                            i=keywordAllowedIdent();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i.getTree());
                            if ( state.backtracking==0 ) {
                               identifier = i.getTree().toString(); 
                            }

                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: expression, expression, expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 747:3: -> {identifier != null}? ^( SELECTION_ELEMENT_EXPR expression IDENT[identifier] )
                    if (identifier != null) {
                        // EsperEPL2Grammar.g:747:28: ^( SELECTION_ELEMENT_EXPR expression IDENT[identifier] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);

                        adaptor.addChild(root_1, stream_expression.nextTree());
                        adaptor.addChild(root_1, (CommonTree)adaptor.create(IDENT, identifier));

                        adaptor.addChild(root_0, root_1);
                        }

                    }
                    else // 748:3: -> {identifier == null}? ^( SELECTION_ELEMENT_EXPR expression )
                    if (identifier == null) {
                        // EsperEPL2Grammar.g:748:28: ^( SELECTION_ELEMENT_EXPR expression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);

                        adaptor.addChild(root_1, stream_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }
                    else // 749:3: -> ^( SELECTION_ELEMENT_EXPR expression )
                    {
                        // EsperEPL2Grammar.g:749:6: ^( SELECTION_ELEMENT_EXPR expression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);

                        adaptor.addChild(root_1, stream_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "selectionListElement"

    public static class streamSelector_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "streamSelector"
    // EsperEPL2Grammar.g:752:1: streamSelector : s= IDENT DOT STAR ( AS i= IDENT )? -> ^( SELECTION_STREAM $s ( $i)? ) ;
    public final EsperEPL2GrammarParser.streamSelector_return streamSelector() throws RecognitionException {
        EsperEPL2GrammarParser.streamSelector_return retval = new EsperEPL2GrammarParser.streamSelector_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token s=null;
        Token i=null;
        Token DOT179=null;
        Token STAR180=null;
        Token AS181=null;

        CommonTree s_tree=null;
        CommonTree i_tree=null;
        CommonTree DOT179_tree=null;
        CommonTree STAR180_tree=null;
        CommonTree AS181_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");

        try {
            // EsperEPL2Grammar.g:753:2: (s= IDENT DOT STAR ( AS i= IDENT )? -> ^( SELECTION_STREAM $s ( $i)? ) )
            // EsperEPL2Grammar.g:753:4: s= IDENT DOT STAR ( AS i= IDENT )?
            {
            s=(Token)match(input,IDENT,FOLLOW_IDENT_in_streamSelector3486); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(s);

            DOT179=(Token)match(input,DOT,FOLLOW_DOT_in_streamSelector3488); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DOT.add(DOT179);

            STAR180=(Token)match(input,STAR,FOLLOW_STAR_in_streamSelector3490); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_STAR.add(STAR180);

            // EsperEPL2Grammar.g:753:21: ( AS i= IDENT )?
            int alt68=2;
            int LA68_0 = input.LA(1);

            if ( (LA68_0==AS) ) {
                alt68=1;
            }
            switch (alt68) {
                case 1 :
                    // EsperEPL2Grammar.g:753:22: AS i= IDENT
                    {
                    AS181=(Token)match(input,AS,FOLLOW_AS_in_streamSelector3493); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS181);

                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_streamSelector3497); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;

            }



            // AST REWRITE
            // elements: i, s
            // token labels: s, i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 754:3: -> ^( SELECTION_STREAM $s ( $i)? )
            {
                // EsperEPL2Grammar.g:754:6: ^( SELECTION_STREAM $s ( $i)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_STREAM, "SELECTION_STREAM"), root_1);

                adaptor.addChild(root_1, stream_s.nextNode());
                // EsperEPL2Grammar.g:754:28: ( $i)?
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());

                }
                stream_i.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "streamSelector"

    public static class streamExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "streamExpression"
    // EsperEPL2Grammar.g:757:1: streamExpression : ( eventFilterExpression | patternInclusionExpression | databaseJoinExpression | methodJoinExpression ) ( DOT viewExpression ( DOT viewExpression )* )? ( AS i= IDENT | i= IDENT )? (u= UNIDIRECTIONAL )? (ru= RETAINUNION | ri= RETAININTERSECTION )? -> ^( STREAM_EXPR ( eventFilterExpression )? ( patternInclusionExpression )? ( databaseJoinExpression )? ( methodJoinExpression )? ( viewExpression )* ( $i)? ( $u)? ( $ru)? ( $ri)? ) ;
    public final EsperEPL2GrammarParser.streamExpression_return streamExpression() throws RecognitionException {
        EsperEPL2GrammarParser.streamExpression_return retval = new EsperEPL2GrammarParser.streamExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token u=null;
        Token ru=null;
        Token ri=null;
        Token DOT186=null;
        Token DOT188=null;
        Token AS190=null;
        EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression182 = null;

        EsperEPL2GrammarParser.patternInclusionExpression_return patternInclusionExpression183 = null;

        EsperEPL2GrammarParser.databaseJoinExpression_return databaseJoinExpression184 = null;

        EsperEPL2GrammarParser.methodJoinExpression_return methodJoinExpression185 = null;

        EsperEPL2GrammarParser.viewExpression_return viewExpression187 = null;

        EsperEPL2GrammarParser.viewExpression_return viewExpression189 = null;


        CommonTree i_tree=null;
        CommonTree u_tree=null;
        CommonTree ru_tree=null;
        CommonTree ri_tree=null;
        CommonTree DOT186_tree=null;
        CommonTree DOT188_tree=null;
        CommonTree AS190_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RETAINUNION=new RewriteRuleTokenStream(adaptor,"token RETAINUNION");
        RewriteRuleTokenStream stream_RETAININTERSECTION=new RewriteRuleTokenStream(adaptor,"token RETAININTERSECTION");
        RewriteRuleTokenStream stream_UNIDIRECTIONAL=new RewriteRuleTokenStream(adaptor,"token UNIDIRECTIONAL");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_databaseJoinExpression=new RewriteRuleSubtreeStream(adaptor,"rule databaseJoinExpression");
        RewriteRuleSubtreeStream stream_methodJoinExpression=new RewriteRuleSubtreeStream(adaptor,"rule methodJoinExpression");
        RewriteRuleSubtreeStream stream_viewExpression=new RewriteRuleSubtreeStream(adaptor,"rule viewExpression");
        RewriteRuleSubtreeStream stream_eventFilterExpression=new RewriteRuleSubtreeStream(adaptor,"rule eventFilterExpression");
        RewriteRuleSubtreeStream stream_patternInclusionExpression=new RewriteRuleSubtreeStream(adaptor,"rule patternInclusionExpression");
        try {
            // EsperEPL2Grammar.g:758:2: ( ( eventFilterExpression | patternInclusionExpression | databaseJoinExpression | methodJoinExpression ) ( DOT viewExpression ( DOT viewExpression )* )? ( AS i= IDENT | i= IDENT )? (u= UNIDIRECTIONAL )? (ru= RETAINUNION | ri= RETAININTERSECTION )? -> ^( STREAM_EXPR ( eventFilterExpression )? ( patternInclusionExpression )? ( databaseJoinExpression )? ( methodJoinExpression )? ( viewExpression )* ( $i)? ( $u)? ( $ru)? ( $ri)? ) )
            // EsperEPL2Grammar.g:758:4: ( eventFilterExpression | patternInclusionExpression | databaseJoinExpression | methodJoinExpression ) ( DOT viewExpression ( DOT viewExpression )* )? ( AS i= IDENT | i= IDENT )? (u= UNIDIRECTIONAL )? (ru= RETAINUNION | ri= RETAININTERSECTION )?
            {
            // EsperEPL2Grammar.g:758:4: ( eventFilterExpression | patternInclusionExpression | databaseJoinExpression | methodJoinExpression )
            int alt69=4;
            switch ( input.LA(1) ) {
            case IDENT:
                {
                int LA69_1 = input.LA(2);

                if ( (LA69_1==EOF||(LA69_1>=WHERE && LA69_1<=AS)||(LA69_1>=INNER && LA69_1<=ON)||(LA69_1>=GROUP && LA69_1<=HAVING)||LA69_1==OUTPUT||LA69_1==ORDER||(LA69_1>=UNIDIRECTIONAL && LA69_1<=RETAININTERSECTION)||LA69_1==ROW_LIMIT_EXPR||(LA69_1>=COMMA && LA69_1<=LPAREN)||LA69_1==LBRACK) ) {
                    alt69=1;
                }
                else if ( (LA69_1==COLON) ) {
                    alt69=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 69, 1, input);

                    throw nvae;
                }
                }
                break;
            case TICKED_STRING_LITERAL:
                {
                alt69=1;
                }
                break;
            case PATTERN:
                {
                alt69=2;
                }
                break;
            case SQL:
                {
                alt69=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 69, 0, input);

                throw nvae;
            }

            switch (alt69) {
                case 1 :
                    // EsperEPL2Grammar.g:758:5: eventFilterExpression
                    {
                    pushFollow(FOLLOW_eventFilterExpression_in_streamExpression3527);
                    eventFilterExpression182=eventFilterExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_eventFilterExpression.add(eventFilterExpression182.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:758:29: patternInclusionExpression
                    {
                    pushFollow(FOLLOW_patternInclusionExpression_in_streamExpression3531);
                    patternInclusionExpression183=patternInclusionExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_patternInclusionExpression.add(patternInclusionExpression183.getTree());

                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:758:58: databaseJoinExpression
                    {
                    pushFollow(FOLLOW_databaseJoinExpression_in_streamExpression3535);
                    databaseJoinExpression184=databaseJoinExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_databaseJoinExpression.add(databaseJoinExpression184.getTree());

                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:758:83: methodJoinExpression
                    {
                    pushFollow(FOLLOW_methodJoinExpression_in_streamExpression3539);
                    methodJoinExpression185=methodJoinExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_methodJoinExpression.add(methodJoinExpression185.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:759:3: ( DOT viewExpression ( DOT viewExpression )* )?
            int alt71=2;
            int LA71_0 = input.LA(1);

            if ( (LA71_0==DOT) ) {
                alt71=1;
            }
            switch (alt71) {
                case 1 :
                    // EsperEPL2Grammar.g:759:4: DOT viewExpression ( DOT viewExpression )*
                    {
                    DOT186=(Token)match(input,DOT,FOLLOW_DOT_in_streamExpression3545); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT186);

                    pushFollow(FOLLOW_viewExpression_in_streamExpression3547);
                    viewExpression187=viewExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression187.getTree());
                    // EsperEPL2Grammar.g:759:23: ( DOT viewExpression )*
                    loop70:
                    do {
                        int alt70=2;
                        int LA70_0 = input.LA(1);

                        if ( (LA70_0==DOT) ) {
                            alt70=1;
                        }


                        switch (alt70) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:759:24: DOT viewExpression
                    	    {
                    	    DOT188=(Token)match(input,DOT,FOLLOW_DOT_in_streamExpression3550); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_DOT.add(DOT188);

                    	    pushFollow(FOLLOW_viewExpression_in_streamExpression3552);
                    	    viewExpression189=viewExpression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression189.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop70;
                        }
                    } while (true);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:759:47: ( AS i= IDENT | i= IDENT )?
            int alt72=3;
            int LA72_0 = input.LA(1);

            if ( (LA72_0==AS) ) {
                alt72=1;
            }
            else if ( (LA72_0==IDENT) ) {
                alt72=2;
            }
            switch (alt72) {
                case 1 :
                    // EsperEPL2Grammar.g:759:48: AS i= IDENT
                    {
                    AS190=(Token)match(input,AS,FOLLOW_AS_in_streamExpression3559); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS190);

                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_streamExpression3563); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:759:61: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_streamExpression3569); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:759:71: (u= UNIDIRECTIONAL )?
            int alt73=2;
            int LA73_0 = input.LA(1);

            if ( (LA73_0==UNIDIRECTIONAL) ) {
                alt73=1;
            }
            switch (alt73) {
                case 1 :
                    // EsperEPL2Grammar.g:759:72: u= UNIDIRECTIONAL
                    {
                    u=(Token)match(input,UNIDIRECTIONAL,FOLLOW_UNIDIRECTIONAL_in_streamExpression3576); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_UNIDIRECTIONAL.add(u);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:759:91: (ru= RETAINUNION | ri= RETAININTERSECTION )?
            int alt74=3;
            int LA74_0 = input.LA(1);

            if ( (LA74_0==RETAINUNION) ) {
                alt74=1;
            }
            else if ( (LA74_0==RETAININTERSECTION) ) {
                alt74=2;
            }
            switch (alt74) {
                case 1 :
                    // EsperEPL2Grammar.g:759:92: ru= RETAINUNION
                    {
                    ru=(Token)match(input,RETAINUNION,FOLLOW_RETAINUNION_in_streamExpression3583); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAINUNION.add(ru);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:759:107: ri= RETAININTERSECTION
                    {
                    ri=(Token)match(input,RETAININTERSECTION,FOLLOW_RETAININTERSECTION_in_streamExpression3587); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAININTERSECTION.add(ri);


                    }
                    break;

            }



            // AST REWRITE
            // elements: ri, patternInclusionExpression, viewExpression, methodJoinExpression, databaseJoinExpression, u, ru, i, eventFilterExpression
            // token labels: u, ri, ru, i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_u=new RewriteRuleTokenStream(adaptor,"token u",u);
            RewriteRuleTokenStream stream_ri=new RewriteRuleTokenStream(adaptor,"token ri",ri);
            RewriteRuleTokenStream stream_ru=new RewriteRuleTokenStream(adaptor,"token ru",ru);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 760:3: -> ^( STREAM_EXPR ( eventFilterExpression )? ( patternInclusionExpression )? ( databaseJoinExpression )? ( methodJoinExpression )? ( viewExpression )* ( $i)? ( $u)? ( $ru)? ( $ri)? )
            {
                // EsperEPL2Grammar.g:760:6: ^( STREAM_EXPR ( eventFilterExpression )? ( patternInclusionExpression )? ( databaseJoinExpression )? ( methodJoinExpression )? ( viewExpression )* ( $i)? ( $u)? ( $ru)? ( $ri)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STREAM_EXPR, "STREAM_EXPR"), root_1);

                // EsperEPL2Grammar.g:760:20: ( eventFilterExpression )?
                if ( stream_eventFilterExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_eventFilterExpression.nextTree());

                }
                stream_eventFilterExpression.reset();
                // EsperEPL2Grammar.g:760:43: ( patternInclusionExpression )?
                if ( stream_patternInclusionExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_patternInclusionExpression.nextTree());

                }
                stream_patternInclusionExpression.reset();
                // EsperEPL2Grammar.g:760:71: ( databaseJoinExpression )?
                if ( stream_databaseJoinExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_databaseJoinExpression.nextTree());

                }
                stream_databaseJoinExpression.reset();
                // EsperEPL2Grammar.g:760:95: ( methodJoinExpression )?
                if ( stream_methodJoinExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_methodJoinExpression.nextTree());

                }
                stream_methodJoinExpression.reset();
                // EsperEPL2Grammar.g:761:3: ( viewExpression )*
                while ( stream_viewExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_viewExpression.nextTree());

                }
                stream_viewExpression.reset();
                // EsperEPL2Grammar.g:761:19: ( $i)?
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());

                }
                stream_i.reset();
                // EsperEPL2Grammar.g:761:23: ( $u)?
                if ( stream_u.hasNext() ) {
                    adaptor.addChild(root_1, stream_u.nextNode());

                }
                stream_u.reset();
                // EsperEPL2Grammar.g:761:27: ( $ru)?
                if ( stream_ru.hasNext() ) {
                    adaptor.addChild(root_1, stream_ru.nextNode());

                }
                stream_ru.reset();
                // EsperEPL2Grammar.g:761:32: ( $ri)?
                if ( stream_ri.hasNext() ) {
                    adaptor.addChild(root_1, stream_ri.nextNode());

                }
                stream_ri.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "streamExpression"

    public static class patternInclusionExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "patternInclusionExpression"
    // EsperEPL2Grammar.g:764:1: patternInclusionExpression : PATTERN LBRACK patternExpression RBRACK -> ^( PATTERN_INCL_EXPR patternExpression ) ;
    public final EsperEPL2GrammarParser.patternInclusionExpression_return patternInclusionExpression() throws RecognitionException {
        EsperEPL2GrammarParser.patternInclusionExpression_return retval = new EsperEPL2GrammarParser.patternInclusionExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token PATTERN191=null;
        Token LBRACK192=null;
        Token RBRACK194=null;
        EsperEPL2GrammarParser.patternExpression_return patternExpression193 = null;


        CommonTree PATTERN191_tree=null;
        CommonTree LBRACK192_tree=null;
        CommonTree RBRACK194_tree=null;
        RewriteRuleTokenStream stream_PATTERN=new RewriteRuleTokenStream(adaptor,"token PATTERN");
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleSubtreeStream stream_patternExpression=new RewriteRuleSubtreeStream(adaptor,"rule patternExpression");
        try {
            // EsperEPL2Grammar.g:765:2: ( PATTERN LBRACK patternExpression RBRACK -> ^( PATTERN_INCL_EXPR patternExpression ) )
            // EsperEPL2Grammar.g:765:4: PATTERN LBRACK patternExpression RBRACK
            {
            PATTERN191=(Token)match(input,PATTERN,FOLLOW_PATTERN_in_patternInclusionExpression3644); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_PATTERN.add(PATTERN191);

            LBRACK192=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_patternInclusionExpression3646); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK192);

            pushFollow(FOLLOW_patternExpression_in_patternInclusionExpression3648);
            patternExpression193=patternExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_patternExpression.add(patternExpression193.getTree());
            RBRACK194=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_patternInclusionExpression3650); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK194);



            // AST REWRITE
            // elements: patternExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 766:3: -> ^( PATTERN_INCL_EXPR patternExpression )
            {
                // EsperEPL2Grammar.g:766:6: ^( PATTERN_INCL_EXPR patternExpression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATTERN_INCL_EXPR, "PATTERN_INCL_EXPR"), root_1);

                adaptor.addChild(root_1, stream_patternExpression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "patternInclusionExpression"

    public static class databaseJoinExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "databaseJoinExpression"
    // EsperEPL2Grammar.g:769:1: databaseJoinExpression : SQL COLON i= IDENT LBRACK (s= STRING_LITERAL | s= QUOTED_STRING_LITERAL ) ( METADATASQL (s2= STRING_LITERAL | s2= QUOTED_STRING_LITERAL ) )? RBRACK -> ^( DATABASE_JOIN_EXPR $i $s ( $s2)? ) ;
    public final EsperEPL2GrammarParser.databaseJoinExpression_return databaseJoinExpression() throws RecognitionException {
        EsperEPL2GrammarParser.databaseJoinExpression_return retval = new EsperEPL2GrammarParser.databaseJoinExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token s=null;
        Token s2=null;
        Token SQL195=null;
        Token COLON196=null;
        Token LBRACK197=null;
        Token METADATASQL198=null;
        Token RBRACK199=null;

        CommonTree i_tree=null;
        CommonTree s_tree=null;
        CommonTree s2_tree=null;
        CommonTree SQL195_tree=null;
        CommonTree COLON196_tree=null;
        CommonTree LBRACK197_tree=null;
        CommonTree METADATASQL198_tree=null;
        CommonTree RBRACK199_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_SQL=new RewriteRuleTokenStream(adaptor,"token SQL");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token STRING_LITERAL");
        RewriteRuleTokenStream stream_METADATASQL=new RewriteRuleTokenStream(adaptor,"token METADATASQL");
        RewriteRuleTokenStream stream_QUOTED_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token QUOTED_STRING_LITERAL");

         paraphrases.push("relational data join"); 
        try {
            // EsperEPL2Grammar.g:772:2: ( SQL COLON i= IDENT LBRACK (s= STRING_LITERAL | s= QUOTED_STRING_LITERAL ) ( METADATASQL (s2= STRING_LITERAL | s2= QUOTED_STRING_LITERAL ) )? RBRACK -> ^( DATABASE_JOIN_EXPR $i $s ( $s2)? ) )
            // EsperEPL2Grammar.g:772:4: SQL COLON i= IDENT LBRACK (s= STRING_LITERAL | s= QUOTED_STRING_LITERAL ) ( METADATASQL (s2= STRING_LITERAL | s2= QUOTED_STRING_LITERAL ) )? RBRACK
            {
            SQL195=(Token)match(input,SQL,FOLLOW_SQL_in_databaseJoinExpression3683); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SQL.add(SQL195);

            COLON196=(Token)match(input,COLON,FOLLOW_COLON_in_databaseJoinExpression3685); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON196);

            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_databaseJoinExpression3689); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);

            LBRACK197=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_databaseJoinExpression3691); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK197);

            // EsperEPL2Grammar.g:772:29: (s= STRING_LITERAL | s= QUOTED_STRING_LITERAL )
            int alt75=2;
            int LA75_0 = input.LA(1);

            if ( (LA75_0==STRING_LITERAL) ) {
                alt75=1;
            }
            else if ( (LA75_0==QUOTED_STRING_LITERAL) ) {
                alt75=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 75, 0, input);

                throw nvae;
            }
            switch (alt75) {
                case 1 :
                    // EsperEPL2Grammar.g:772:30: s= STRING_LITERAL
                    {
                    s=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_databaseJoinExpression3696); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STRING_LITERAL.add(s);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:772:49: s= QUOTED_STRING_LITERAL
                    {
                    s=(Token)match(input,QUOTED_STRING_LITERAL,FOLLOW_QUOTED_STRING_LITERAL_in_databaseJoinExpression3702); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUOTED_STRING_LITERAL.add(s);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:772:74: ( METADATASQL (s2= STRING_LITERAL | s2= QUOTED_STRING_LITERAL ) )?
            int alt77=2;
            int LA77_0 = input.LA(1);

            if ( (LA77_0==METADATASQL) ) {
                alt77=1;
            }
            switch (alt77) {
                case 1 :
                    // EsperEPL2Grammar.g:772:75: METADATASQL (s2= STRING_LITERAL | s2= QUOTED_STRING_LITERAL )
                    {
                    METADATASQL198=(Token)match(input,METADATASQL,FOLLOW_METADATASQL_in_databaseJoinExpression3706); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_METADATASQL.add(METADATASQL198);

                    // EsperEPL2Grammar.g:772:87: (s2= STRING_LITERAL | s2= QUOTED_STRING_LITERAL )
                    int alt76=2;
                    int LA76_0 = input.LA(1);

                    if ( (LA76_0==STRING_LITERAL) ) {
                        alt76=1;
                    }
                    else if ( (LA76_0==QUOTED_STRING_LITERAL) ) {
                        alt76=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 76, 0, input);

                        throw nvae;
                    }
                    switch (alt76) {
                        case 1 :
                            // EsperEPL2Grammar.g:772:88: s2= STRING_LITERAL
                            {
                            s2=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_databaseJoinExpression3711); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_STRING_LITERAL.add(s2);


                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:772:108: s2= QUOTED_STRING_LITERAL
                            {
                            s2=(Token)match(input,QUOTED_STRING_LITERAL,FOLLOW_QUOTED_STRING_LITERAL_in_databaseJoinExpression3717); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUOTED_STRING_LITERAL.add(s2);


                            }
                            break;

                    }


                    }
                    break;

            }

            RBRACK199=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_databaseJoinExpression3722); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK199);



            // AST REWRITE
            // elements: s, s2, i
            // token labels: s2, s, i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s2=new RewriteRuleTokenStream(adaptor,"token s2",s2);
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 773:3: -> ^( DATABASE_JOIN_EXPR $i $s ( $s2)? )
            {
                // EsperEPL2Grammar.g:773:6: ^( DATABASE_JOIN_EXPR $i $s ( $s2)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DATABASE_JOIN_EXPR, "DATABASE_JOIN_EXPR"), root_1);

                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_s.nextNode());
                // EsperEPL2Grammar.g:773:33: ( $s2)?
                if ( stream_s2.hasNext() ) {
                    adaptor.addChild(root_1, stream_s2.nextNode());

                }
                stream_s2.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "databaseJoinExpression"

    public static class methodJoinExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "methodJoinExpression"
    // EsperEPL2Grammar.g:776:1: methodJoinExpression : i= IDENT COLON classIdentifier ( LPAREN ( expressionList )? RPAREN )? -> ^( METHOD_JOIN_EXPR $i classIdentifier ( expressionList )? ) ;
    public final EsperEPL2GrammarParser.methodJoinExpression_return methodJoinExpression() throws RecognitionException {
        EsperEPL2GrammarParser.methodJoinExpression_return retval = new EsperEPL2GrammarParser.methodJoinExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token COLON200=null;
        Token LPAREN202=null;
        Token RPAREN204=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier201 = null;

        EsperEPL2GrammarParser.expressionList_return expressionList203 = null;


        CommonTree i_tree=null;
        CommonTree COLON200_tree=null;
        CommonTree LPAREN202_tree=null;
        CommonTree RPAREN204_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
         paraphrases.push("method invocation join"); 
        try {
            // EsperEPL2Grammar.g:779:6: (i= IDENT COLON classIdentifier ( LPAREN ( expressionList )? RPAREN )? -> ^( METHOD_JOIN_EXPR $i classIdentifier ( expressionList )? ) )
            // EsperEPL2Grammar.g:779:11: i= IDENT COLON classIdentifier ( LPAREN ( expressionList )? RPAREN )?
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_methodJoinExpression3773); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);

            COLON200=(Token)match(input,COLON,FOLLOW_COLON_in_methodJoinExpression3775); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON200);

            pushFollow(FOLLOW_classIdentifier_in_methodJoinExpression3777);
            classIdentifier201=classIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier201.getTree());
            // EsperEPL2Grammar.g:779:41: ( LPAREN ( expressionList )? RPAREN )?
            int alt79=2;
            int LA79_0 = input.LA(1);

            if ( (LA79_0==LPAREN) ) {
                alt79=1;
            }
            switch (alt79) {
                case 1 :
                    // EsperEPL2Grammar.g:779:42: LPAREN ( expressionList )? RPAREN
                    {
                    LPAREN202=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_methodJoinExpression3780); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN202);

                    // EsperEPL2Grammar.g:779:49: ( expressionList )?
                    int alt78=2;
                    int LA78_0 = input.LA(1);

                    if ( (LA78_0==WINDOW||LA78_0==ESCAPE||(LA78_0>=NOT_EXPR && LA78_0<=EVERY_EXPR)||(LA78_0>=SUM && LA78_0<=COUNT)||LA78_0==CASE||LA78_0==OUTER||(LA78_0>=JOIN && LA78_0<=FULL)||(LA78_0>=EVENTS && LA78_0<=LAST)||(LA78_0>=UNIDIRECTIONAL && LA78_0<=CURRENT_TIMESTAMP)||LA78_0==SNAPSHOT||(LA78_0>=VARIABLE && LA78_0<=AT)||(LA78_0>=BOOLEAN_TRUE && LA78_0<=VALUE_NULL)||LA78_0==NUM_DOUBLE||LA78_0==IDENT||LA78_0==LPAREN||(LA78_0>=STRING_LITERAL && LA78_0<=QUOTED_STRING_LITERAL)||(LA78_0>=PLUS && LA78_0<=MINUS)||LA78_0==LCURLY||LA78_0==NUM_INT||LA78_0==QUESTION||(LA78_0>=TICKED_STRING_LITERAL && LA78_0<=NUM_FLOAT)) ) {
                        alt78=1;
                    }
                    switch (alt78) {
                        case 1 :
                            // EsperEPL2Grammar.g:779:49: expressionList
                            {
                            pushFollow(FOLLOW_expressionList_in_methodJoinExpression3782);
                            expressionList203=expressionList();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList203.getTree());

                            }
                            break;

                    }

                    RPAREN204=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_methodJoinExpression3785); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN204);


                    }
                    break;

            }



            // AST REWRITE
            // elements: expressionList, i, classIdentifier
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 780:10: -> ^( METHOD_JOIN_EXPR $i classIdentifier ( expressionList )? )
            {
                // EsperEPL2Grammar.g:780:13: ^( METHOD_JOIN_EXPR $i classIdentifier ( expressionList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(METHOD_JOIN_EXPR, "METHOD_JOIN_EXPR"), root_1);

                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                // EsperEPL2Grammar.g:780:51: ( expressionList )?
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());

                }
                stream_expressionList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "methodJoinExpression"

    public static class viewExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "viewExpression"
    // EsperEPL2Grammar.g:783:1: viewExpression : ns= IDENT COLON nm= IDENT LPAREN ( expressionWithTimeList )? RPAREN -> ^( VIEW_EXPR $ns $nm ( expressionWithTimeList )? ) ;
    public final EsperEPL2GrammarParser.viewExpression_return viewExpression() throws RecognitionException {
        EsperEPL2GrammarParser.viewExpression_return retval = new EsperEPL2GrammarParser.viewExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token ns=null;
        Token nm=null;
        Token COLON205=null;
        Token LPAREN206=null;
        Token RPAREN208=null;
        EsperEPL2GrammarParser.expressionWithTimeList_return expressionWithTimeList207 = null;


        CommonTree ns_tree=null;
        CommonTree nm_tree=null;
        CommonTree COLON205_tree=null;
        CommonTree LPAREN206_tree=null;
        CommonTree RPAREN208_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionWithTimeList=new RewriteRuleSubtreeStream(adaptor,"rule expressionWithTimeList");
         paraphrases.push("view specifications"); 
        try {
            // EsperEPL2Grammar.g:786:2: (ns= IDENT COLON nm= IDENT LPAREN ( expressionWithTimeList )? RPAREN -> ^( VIEW_EXPR $ns $nm ( expressionWithTimeList )? ) )
            // EsperEPL2Grammar.g:786:4: ns= IDENT COLON nm= IDENT LPAREN ( expressionWithTimeList )? RPAREN
            {
            ns=(Token)match(input,IDENT,FOLLOW_IDENT_in_viewExpression3838); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(ns);

            COLON205=(Token)match(input,COLON,FOLLOW_COLON_in_viewExpression3840); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON205);

            nm=(Token)match(input,IDENT,FOLLOW_IDENT_in_viewExpression3844); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(nm);

            LPAREN206=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_viewExpression3846); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN206);

            // EsperEPL2Grammar.g:786:35: ( expressionWithTimeList )?
            int alt80=2;
            int LA80_0 = input.LA(1);

            if ( (LA80_0==WINDOW||LA80_0==ESCAPE||(LA80_0>=NOT_EXPR && LA80_0<=EVERY_EXPR)||(LA80_0>=SUM && LA80_0<=COUNT)||LA80_0==CASE||LA80_0==OUTER||(LA80_0>=JOIN && LA80_0<=FULL)||(LA80_0>=EVENTS && LA80_0<=LAST)||(LA80_0>=UNIDIRECTIONAL && LA80_0<=CURRENT_TIMESTAMP)||LA80_0==SNAPSHOT||(LA80_0>=VARIABLE && LA80_0<=AT)||(LA80_0>=BOOLEAN_TRUE && LA80_0<=VALUE_NULL)||LA80_0==NUM_DOUBLE||LA80_0==IDENT||LA80_0==LPAREN||(LA80_0>=STAR && LA80_0<=LBRACK)||(LA80_0>=STRING_LITERAL && LA80_0<=QUOTED_STRING_LITERAL)||(LA80_0>=PLUS && LA80_0<=MINUS)||LA80_0==LCURLY||LA80_0==NUM_INT||LA80_0==QUESTION||(LA80_0>=TICKED_STRING_LITERAL && LA80_0<=NUM_FLOAT)) ) {
                alt80=1;
            }
            switch (alt80) {
                case 1 :
                    // EsperEPL2Grammar.g:786:35: expressionWithTimeList
                    {
                    pushFollow(FOLLOW_expressionWithTimeList_in_viewExpression3848);
                    expressionWithTimeList207=expressionWithTimeList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expressionWithTimeList.add(expressionWithTimeList207.getTree());

                    }
                    break;

            }

            RPAREN208=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_viewExpression3851); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN208);



            // AST REWRITE
            // elements: expressionWithTimeList, nm, ns
            // token labels: ns, nm
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_ns=new RewriteRuleTokenStream(adaptor,"token ns",ns);
            RewriteRuleTokenStream stream_nm=new RewriteRuleTokenStream(adaptor,"token nm",nm);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 787:3: -> ^( VIEW_EXPR $ns $nm ( expressionWithTimeList )? )
            {
                // EsperEPL2Grammar.g:787:6: ^( VIEW_EXPR $ns $nm ( expressionWithTimeList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VIEW_EXPR, "VIEW_EXPR"), root_1);

                adaptor.addChild(root_1, stream_ns.nextNode());
                adaptor.addChild(root_1, stream_nm.nextNode());
                // EsperEPL2Grammar.g:787:26: ( expressionWithTimeList )?
                if ( stream_expressionWithTimeList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionWithTimeList.nextTree());

                }
                stream_expressionWithTimeList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "viewExpression"

    public static class groupByListExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "groupByListExpr"
    // EsperEPL2Grammar.g:790:1: groupByListExpr : expression ( COMMA expression )* -> ^( GROUP_BY_EXPR ( expression )+ ) ;
    public final EsperEPL2GrammarParser.groupByListExpr_return groupByListExpr() throws RecognitionException {
        EsperEPL2GrammarParser.groupByListExpr_return retval = new EsperEPL2GrammarParser.groupByListExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA210=null;
        EsperEPL2GrammarParser.expression_return expression209 = null;

        EsperEPL2GrammarParser.expression_return expression211 = null;


        CommonTree COMMA210_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
         paraphrases.push("group-by clause"); 
        try {
            // EsperEPL2Grammar.g:793:2: ( expression ( COMMA expression )* -> ^( GROUP_BY_EXPR ( expression )+ ) )
            // EsperEPL2Grammar.g:793:4: expression ( COMMA expression )*
            {
            pushFollow(FOLLOW_expression_in_groupByListExpr3890);
            expression209=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression209.getTree());
            // EsperEPL2Grammar.g:793:15: ( COMMA expression )*
            loop81:
            do {
                int alt81=2;
                int LA81_0 = input.LA(1);

                if ( (LA81_0==COMMA) ) {
                    alt81=1;
                }


                switch (alt81) {
            	case 1 :
            	    // EsperEPL2Grammar.g:793:16: COMMA expression
            	    {
            	    COMMA210=(Token)match(input,COMMA,FOLLOW_COMMA_in_groupByListExpr3893); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA210);

            	    pushFollow(FOLLOW_expression_in_groupByListExpr3895);
            	    expression211=expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_expression.add(expression211.getTree());

            	    }
            	    break;

            	default :
            	    break loop81;
                }
            } while (true);



            // AST REWRITE
            // elements: expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 794:3: -> ^( GROUP_BY_EXPR ( expression )+ )
            {
                // EsperEPL2Grammar.g:794:6: ^( GROUP_BY_EXPR ( expression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GROUP_BY_EXPR, "GROUP_BY_EXPR"), root_1);

                if ( !(stream_expression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());

                }
                stream_expression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "groupByListExpr"

    public static class orderByListExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "orderByListExpr"
    // EsperEPL2Grammar.g:797:1: orderByListExpr : orderByListElement ( COMMA orderByListElement )* -> ^( ORDER_BY_EXPR ( orderByListElement )+ ) ;
    public final EsperEPL2GrammarParser.orderByListExpr_return orderByListExpr() throws RecognitionException {
        EsperEPL2GrammarParser.orderByListExpr_return retval = new EsperEPL2GrammarParser.orderByListExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA213=null;
        EsperEPL2GrammarParser.orderByListElement_return orderByListElement212 = null;

        EsperEPL2GrammarParser.orderByListElement_return orderByListElement214 = null;


        CommonTree COMMA213_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_orderByListElement=new RewriteRuleSubtreeStream(adaptor,"rule orderByListElement");
         paraphrases.push("order by clause"); 
        try {
            // EsperEPL2Grammar.g:800:2: ( orderByListElement ( COMMA orderByListElement )* -> ^( ORDER_BY_EXPR ( orderByListElement )+ ) )
            // EsperEPL2Grammar.g:800:4: orderByListElement ( COMMA orderByListElement )*
            {
            pushFollow(FOLLOW_orderByListElement_in_orderByListExpr3930);
            orderByListElement212=orderByListElement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_orderByListElement.add(orderByListElement212.getTree());
            // EsperEPL2Grammar.g:800:23: ( COMMA orderByListElement )*
            loop82:
            do {
                int alt82=2;
                int LA82_0 = input.LA(1);

                if ( (LA82_0==COMMA) ) {
                    alt82=1;
                }


                switch (alt82) {
            	case 1 :
            	    // EsperEPL2Grammar.g:800:24: COMMA orderByListElement
            	    {
            	    COMMA213=(Token)match(input,COMMA,FOLLOW_COMMA_in_orderByListExpr3933); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA213);

            	    pushFollow(FOLLOW_orderByListElement_in_orderByListExpr3935);
            	    orderByListElement214=orderByListElement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_orderByListElement.add(orderByListElement214.getTree());

            	    }
            	    break;

            	default :
            	    break loop82;
                }
            } while (true);



            // AST REWRITE
            // elements: orderByListElement
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 801:3: -> ^( ORDER_BY_EXPR ( orderByListElement )+ )
            {
                // EsperEPL2Grammar.g:801:6: ^( ORDER_BY_EXPR ( orderByListElement )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ORDER_BY_EXPR, "ORDER_BY_EXPR"), root_1);

                if ( !(stream_orderByListElement.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_orderByListElement.hasNext() ) {
                    adaptor.addChild(root_1, stream_orderByListElement.nextTree());

                }
                stream_orderByListElement.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "orderByListExpr"

    public static class orderByListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "orderByListElement"
    // EsperEPL2Grammar.g:804:1: orderByListElement : expression (d= ASC | d= DESC )? -> ^( ORDER_ELEMENT_EXPR expression ( $d)? ) ;
    public final EsperEPL2GrammarParser.orderByListElement_return orderByListElement() throws RecognitionException {
        EsperEPL2GrammarParser.orderByListElement_return retval = new EsperEPL2GrammarParser.orderByListElement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token d=null;
        EsperEPL2GrammarParser.expression_return expression215 = null;


        CommonTree d_tree=null;
        RewriteRuleTokenStream stream_ASC=new RewriteRuleTokenStream(adaptor,"token ASC");
        RewriteRuleTokenStream stream_DESC=new RewriteRuleTokenStream(adaptor,"token DESC");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            // EsperEPL2Grammar.g:805:2: ( expression (d= ASC | d= DESC )? -> ^( ORDER_ELEMENT_EXPR expression ( $d)? ) )
            // EsperEPL2Grammar.g:805:4: expression (d= ASC | d= DESC )?
            {
            pushFollow(FOLLOW_expression_in_orderByListElement3960);
            expression215=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression215.getTree());
            // EsperEPL2Grammar.g:805:15: (d= ASC | d= DESC )?
            int alt83=3;
            int LA83_0 = input.LA(1);

            if ( (LA83_0==ASC) ) {
                alt83=1;
            }
            else if ( (LA83_0==DESC) ) {
                alt83=2;
            }
            switch (alt83) {
                case 1 :
                    // EsperEPL2Grammar.g:805:16: d= ASC
                    {
                    d=(Token)match(input,ASC,FOLLOW_ASC_in_orderByListElement3965); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASC.add(d);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:805:22: d= DESC
                    {
                    d=(Token)match(input,DESC,FOLLOW_DESC_in_orderByListElement3969); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DESC.add(d);


                    }
                    break;

            }



            // AST REWRITE
            // elements: d, expression
            // token labels: d
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_d=new RewriteRuleTokenStream(adaptor,"token d",d);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 806:3: -> ^( ORDER_ELEMENT_EXPR expression ( $d)? )
            {
                // EsperEPL2Grammar.g:806:6: ^( ORDER_ELEMENT_EXPR expression ( $d)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ORDER_ELEMENT_EXPR, "ORDER_ELEMENT_EXPR"), root_1);

                adaptor.addChild(root_1, stream_expression.nextTree());
                // EsperEPL2Grammar.g:806:38: ( $d)?
                if ( stream_d.hasNext() ) {
                    adaptor.addChild(root_1, stream_d.nextNode());

                }
                stream_d.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "orderByListElement"

    public static class havingClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "havingClause"
    // EsperEPL2Grammar.g:809:1: havingClause : evalOrExpression -> ^( HAVING_EXPR evalOrExpression ) ;
    public final EsperEPL2GrammarParser.havingClause_return havingClause() throws RecognitionException {
        EsperEPL2GrammarParser.havingClause_return retval = new EsperEPL2GrammarParser.havingClause_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.evalOrExpression_return evalOrExpression216 = null;


        RewriteRuleSubtreeStream stream_evalOrExpression=new RewriteRuleSubtreeStream(adaptor,"rule evalOrExpression");
         paraphrases.push("having clause"); 
        try {
            // EsperEPL2Grammar.g:812:2: ( evalOrExpression -> ^( HAVING_EXPR evalOrExpression ) )
            // EsperEPL2Grammar.g:812:4: evalOrExpression
            {
            pushFollow(FOLLOW_evalOrExpression_in_havingClause4007);
            evalOrExpression216=evalOrExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_evalOrExpression.add(evalOrExpression216.getTree());


            // AST REWRITE
            // elements: evalOrExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 813:3: -> ^( HAVING_EXPR evalOrExpression )
            {
                // EsperEPL2Grammar.g:813:6: ^( HAVING_EXPR evalOrExpression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(HAVING_EXPR, "HAVING_EXPR"), root_1);

                adaptor.addChild(root_1, stream_evalOrExpression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "havingClause"

    public static class outputLimit_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "outputLimit"
    // EsperEPL2Grammar.g:816:1: outputLimit : (k= ALL | k= FIRST | k= LAST | k= SNAPSHOT )? ( (ev= EVERY_EXPR ( ( timePeriod )=> timePeriod | ( number | i= IDENT ) (e= EVENTS ) ) ) | (at= AT crontabLimitParameterSet ) | (wh= WHEN expression ( THEN onSetExpr )? ) ) -> {$ev != null && $e != null}? ^( EVENT_LIMIT_EXPR ( $k)? ( number )? ( $i)? ) -> {$ev != null}? ^( TIMEPERIOD_LIMIT_EXPR ( $k)? timePeriod ) -> {$at != null}? ^( CRONTAB_LIMIT_EXPR ( $k)? crontabLimitParameterSet ) -> ^( WHEN_LIMIT_EXPR ( $k)? expression ( onSetExpr )? ) ;
    public final EsperEPL2GrammarParser.outputLimit_return outputLimit() throws RecognitionException {
        EsperEPL2GrammarParser.outputLimit_return retval = new EsperEPL2GrammarParser.outputLimit_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token k=null;
        Token ev=null;
        Token i=null;
        Token e=null;
        Token at=null;
        Token wh=null;
        Token THEN221=null;
        EsperEPL2GrammarParser.timePeriod_return timePeriod217 = null;

        EsperEPL2GrammarParser.number_return number218 = null;

        EsperEPL2GrammarParser.crontabLimitParameterSet_return crontabLimitParameterSet219 = null;

        EsperEPL2GrammarParser.expression_return expression220 = null;

        EsperEPL2GrammarParser.onSetExpr_return onSetExpr222 = null;


        CommonTree k_tree=null;
        CommonTree ev_tree=null;
        CommonTree i_tree=null;
        CommonTree e_tree=null;
        CommonTree at_tree=null;
        CommonTree wh_tree=null;
        CommonTree THEN221_tree=null;
        RewriteRuleTokenStream stream_AT=new RewriteRuleTokenStream(adaptor,"token AT");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_THEN=new RewriteRuleTokenStream(adaptor,"token THEN");
        RewriteRuleTokenStream stream_LAST=new RewriteRuleTokenStream(adaptor,"token LAST");
        RewriteRuleTokenStream stream_SNAPSHOT=new RewriteRuleTokenStream(adaptor,"token SNAPSHOT");
        RewriteRuleTokenStream stream_EVENTS=new RewriteRuleTokenStream(adaptor,"token EVENTS");
        RewriteRuleTokenStream stream_WHEN=new RewriteRuleTokenStream(adaptor,"token WHEN");
        RewriteRuleTokenStream stream_EVERY_EXPR=new RewriteRuleTokenStream(adaptor,"token EVERY_EXPR");
        RewriteRuleTokenStream stream_ALL=new RewriteRuleTokenStream(adaptor,"token ALL");
        RewriteRuleTokenStream stream_FIRST=new RewriteRuleTokenStream(adaptor,"token FIRST");
        RewriteRuleSubtreeStream stream_crontabLimitParameterSet=new RewriteRuleSubtreeStream(adaptor,"rule crontabLimitParameterSet");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_timePeriod=new RewriteRuleSubtreeStream(adaptor,"rule timePeriod");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_onSetExpr=new RewriteRuleSubtreeStream(adaptor,"rule onSetExpr");
         paraphrases.push("output rate clause"); 
        try {
            // EsperEPL2Grammar.g:819:2: ( (k= ALL | k= FIRST | k= LAST | k= SNAPSHOT )? ( (ev= EVERY_EXPR ( ( timePeriod )=> timePeriod | ( number | i= IDENT ) (e= EVENTS ) ) ) | (at= AT crontabLimitParameterSet ) | (wh= WHEN expression ( THEN onSetExpr )? ) ) -> {$ev != null && $e != null}? ^( EVENT_LIMIT_EXPR ( $k)? ( number )? ( $i)? ) -> {$ev != null}? ^( TIMEPERIOD_LIMIT_EXPR ( $k)? timePeriod ) -> {$at != null}? ^( CRONTAB_LIMIT_EXPR ( $k)? crontabLimitParameterSet ) -> ^( WHEN_LIMIT_EXPR ( $k)? expression ( onSetExpr )? ) )
            // EsperEPL2Grammar.g:819:6: (k= ALL | k= FIRST | k= LAST | k= SNAPSHOT )? ( (ev= EVERY_EXPR ( ( timePeriod )=> timePeriod | ( number | i= IDENT ) (e= EVENTS ) ) ) | (at= AT crontabLimitParameterSet ) | (wh= WHEN expression ( THEN onSetExpr )? ) )
            {
            // EsperEPL2Grammar.g:819:6: (k= ALL | k= FIRST | k= LAST | k= SNAPSHOT )?
            int alt84=5;
            switch ( input.LA(1) ) {
                case ALL:
                    {
                    alt84=1;
                    }
                    break;
                case FIRST:
                    {
                    alt84=2;
                    }
                    break;
                case LAST:
                    {
                    alt84=3;
                    }
                    break;
                case SNAPSHOT:
                    {
                    alt84=4;
                    }
                    break;
            }

            switch (alt84) {
                case 1 :
                    // EsperEPL2Grammar.g:819:7: k= ALL
                    {
                    k=(Token)match(input,ALL,FOLLOW_ALL_in_outputLimit4045); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ALL.add(k);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:819:13: k= FIRST
                    {
                    k=(Token)match(input,FIRST,FOLLOW_FIRST_in_outputLimit4049); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FIRST.add(k);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:819:21: k= LAST
                    {
                    k=(Token)match(input,LAST,FOLLOW_LAST_in_outputLimit4053); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LAST.add(k);


                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:819:28: k= SNAPSHOT
                    {
                    k=(Token)match(input,SNAPSHOT,FOLLOW_SNAPSHOT_in_outputLimit4057); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SNAPSHOT.add(k);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:820:8: ( (ev= EVERY_EXPR ( ( timePeriod )=> timePeriod | ( number | i= IDENT ) (e= EVENTS ) ) ) | (at= AT crontabLimitParameterSet ) | (wh= WHEN expression ( THEN onSetExpr )? ) )
            int alt88=3;
            switch ( input.LA(1) ) {
            case EVERY_EXPR:
                {
                alt88=1;
                }
                break;
            case AT:
                {
                alt88=2;
                }
                break;
            case WHEN:
                {
                alt88=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 88, 0, input);

                throw nvae;
            }

            switch (alt88) {
                case 1 :
                    // EsperEPL2Grammar.g:821:10: (ev= EVERY_EXPR ( ( timePeriod )=> timePeriod | ( number | i= IDENT ) (e= EVENTS ) ) )
                    {
                    // EsperEPL2Grammar.g:821:10: (ev= EVERY_EXPR ( ( timePeriod )=> timePeriod | ( number | i= IDENT ) (e= EVENTS ) ) )
                    // EsperEPL2Grammar.g:821:12: ev= EVERY_EXPR ( ( timePeriod )=> timePeriod | ( number | i= IDENT ) (e= EVENTS ) )
                    {
                    ev=(Token)match(input,EVERY_EXPR,FOLLOW_EVERY_EXPR_in_outputLimit4084); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EVERY_EXPR.add(ev);

                    // EsperEPL2Grammar.g:822:5: ( ( timePeriod )=> timePeriod | ( number | i= IDENT ) (e= EVENTS ) )
                    int alt86=2;
                    int LA86_0 = input.LA(1);

                    if ( (LA86_0==NUM_INT) ) {
                        int LA86_1 = input.LA(2);

                        if ( (LA86_1==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt86=1;
                        }
                        else if ( (LA86_1==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt86=1;
                        }
                        else if ( (LA86_1==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt86=1;
                        }
                        else if ( (LA86_1==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt86=1;
                        }
                        else if ( (LA86_1==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt86=1;
                        }
                        else if ( (LA86_1==EVENTS) ) {
                            alt86=2;
                        }
                        else if ( (LA86_1==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt86=1;
                        }
                        else if ( (LA86_1==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt86=1;
                        }
                        else if ( (LA86_1==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt86=1;
                        }
                        else if ( (LA86_1==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt86=1;
                        }
                        else if ( (LA86_1==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt86=1;
                        }
                        else if ( (LA86_1==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt86=1;
                        }
                        else if ( (LA86_1==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt86=1;
                        }
                        else if ( (LA86_1==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt86=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 86, 1, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA86_0==NUM_LONG) ) {
                        int LA86_2 = input.LA(2);

                        if ( (LA86_2==EVENTS) ) {
                            alt86=2;
                        }
                        else if ( (LA86_2==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt86=1;
                        }
                        else if ( (LA86_2==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt86=1;
                        }
                        else if ( (LA86_2==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt86=1;
                        }
                        else if ( (LA86_2==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt86=1;
                        }
                        else if ( (LA86_2==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt86=1;
                        }
                        else if ( (LA86_2==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt86=1;
                        }
                        else if ( (LA86_2==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt86=1;
                        }
                        else if ( (LA86_2==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt86=1;
                        }
                        else if ( (LA86_2==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt86=1;
                        }
                        else if ( (LA86_2==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt86=1;
                        }
                        else if ( (LA86_2==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt86=1;
                        }
                        else if ( (LA86_2==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt86=1;
                        }
                        else if ( (LA86_2==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt86=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 86, 2, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA86_0==NUM_FLOAT) ) {
                        int LA86_3 = input.LA(2);

                        if ( (LA86_3==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt86=1;
                        }
                        else if ( (LA86_3==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt86=1;
                        }
                        else if ( (LA86_3==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt86=1;
                        }
                        else if ( (LA86_3==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt86=1;
                        }
                        else if ( (LA86_3==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt86=1;
                        }
                        else if ( (LA86_3==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt86=1;
                        }
                        else if ( (LA86_3==EVENTS) ) {
                            alt86=2;
                        }
                        else if ( (LA86_3==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt86=1;
                        }
                        else if ( (LA86_3==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt86=1;
                        }
                        else if ( (LA86_3==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt86=1;
                        }
                        else if ( (LA86_3==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt86=1;
                        }
                        else if ( (LA86_3==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt86=1;
                        }
                        else if ( (LA86_3==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt86=1;
                        }
                        else if ( (LA86_3==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt86=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 86, 3, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA86_0==NUM_DOUBLE) ) {
                        int LA86_4 = input.LA(2);

                        if ( (LA86_4==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt86=1;
                        }
                        else if ( (LA86_4==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt86=1;
                        }
                        else if ( (LA86_4==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt86=1;
                        }
                        else if ( (LA86_4==EVENTS) ) {
                            alt86=2;
                        }
                        else if ( (LA86_4==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt86=1;
                        }
                        else if ( (LA86_4==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt86=1;
                        }
                        else if ( (LA86_4==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt86=1;
                        }
                        else if ( (LA86_4==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt86=1;
                        }
                        else if ( (LA86_4==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt86=1;
                        }
                        else if ( (LA86_4==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt86=1;
                        }
                        else if ( (LA86_4==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt86=1;
                        }
                        else if ( (LA86_4==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt86=1;
                        }
                        else if ( (LA86_4==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt86=1;
                        }
                        else if ( (LA86_4==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt86=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 86, 4, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA86_0==IDENT) ) {
                        int LA86_5 = input.LA(2);

                        if ( (LA86_5==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt86=1;
                        }
                        else if ( (LA86_5==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt86=1;
                        }
                        else if ( (LA86_5==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt86=1;
                        }
                        else if ( (LA86_5==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt86=1;
                        }
                        else if ( (LA86_5==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt86=1;
                        }
                        else if ( (LA86_5==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt86=1;
                        }
                        else if ( (LA86_5==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt86=1;
                        }
                        else if ( (LA86_5==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt86=1;
                        }
                        else if ( (LA86_5==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt86=1;
                        }
                        else if ( (LA86_5==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt86=1;
                        }
                        else if ( (LA86_5==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt86=1;
                        }
                        else if ( (LA86_5==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt86=1;
                        }
                        else if ( (LA86_5==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt86=1;
                        }
                        else if ( (LA86_5==EVENTS) ) {
                            alt86=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 86, 5, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA86_0==QUESTION) && (synpred2_EsperEPL2Grammar())) {
                        alt86=1;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 86, 0, input);

                        throw nvae;
                    }
                    switch (alt86) {
                        case 1 :
                            // EsperEPL2Grammar.g:823:7: ( timePeriod )=> timePeriod
                            {
                            pushFollow(FOLLOW_timePeriod_in_outputLimit4106);
                            timePeriod217=timePeriod();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_timePeriod.add(timePeriod217.getTree());

                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:824:7: ( number | i= IDENT ) (e= EVENTS )
                            {
                            // EsperEPL2Grammar.g:824:7: ( number | i= IDENT )
                            int alt85=2;
                            int LA85_0 = input.LA(1);

                            if ( (LA85_0==NUM_DOUBLE||LA85_0==NUM_INT||(LA85_0>=NUM_LONG && LA85_0<=NUM_FLOAT)) ) {
                                alt85=1;
                            }
                            else if ( (LA85_0==IDENT) ) {
                                alt85=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 85, 0, input);

                                throw nvae;
                            }
                            switch (alt85) {
                                case 1 :
                                    // EsperEPL2Grammar.g:824:8: number
                                    {
                                    pushFollow(FOLLOW_number_in_outputLimit4115);
                                    number218=number();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_number.add(number218.getTree());

                                    }
                                    break;
                                case 2 :
                                    // EsperEPL2Grammar.g:824:17: i= IDENT
                                    {
                                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_outputLimit4121); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                                    }
                                    break;

                            }

                            // EsperEPL2Grammar.g:824:26: (e= EVENTS )
                            // EsperEPL2Grammar.g:824:27: e= EVENTS
                            {
                            e=(Token)match(input,EVENTS,FOLLOW_EVENTS_in_outputLimit4127); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_EVENTS.add(e);


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:828:3: (at= AT crontabLimitParameterSet )
                    {
                    // EsperEPL2Grammar.g:828:3: (at= AT crontabLimitParameterSet )
                    // EsperEPL2Grammar.g:828:5: at= AT crontabLimitParameterSet
                    {
                    at=(Token)match(input,AT,FOLLOW_AT_in_outputLimit4150); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AT.add(at);

                    pushFollow(FOLLOW_crontabLimitParameterSet_in_outputLimit4152);
                    crontabLimitParameterSet219=crontabLimitParameterSet();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_crontabLimitParameterSet.add(crontabLimitParameterSet219.getTree());

                    }


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:830:3: (wh= WHEN expression ( THEN onSetExpr )? )
                    {
                    // EsperEPL2Grammar.g:830:3: (wh= WHEN expression ( THEN onSetExpr )? )
                    // EsperEPL2Grammar.g:830:5: wh= WHEN expression ( THEN onSetExpr )?
                    {
                    wh=(Token)match(input,WHEN,FOLLOW_WHEN_in_outputLimit4166); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHEN.add(wh);

                    pushFollow(FOLLOW_expression_in_outputLimit4168);
                    expression220=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression220.getTree());
                    // EsperEPL2Grammar.g:830:24: ( THEN onSetExpr )?
                    int alt87=2;
                    int LA87_0 = input.LA(1);

                    if ( (LA87_0==THEN) ) {
                        alt87=1;
                    }
                    switch (alt87) {
                        case 1 :
                            // EsperEPL2Grammar.g:830:25: THEN onSetExpr
                            {
                            THEN221=(Token)match(input,THEN,FOLLOW_THEN_in_outputLimit4171); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_THEN.add(THEN221);

                            pushFollow(FOLLOW_onSetExpr_in_outputLimit4173);
                            onSetExpr222=onSetExpr();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_onSetExpr.add(onSetExpr222.getTree());

                            }
                            break;

                    }


                    }


                    }
                    break;

            }



            // AST REWRITE
            // elements: k, k, i, onSetExpr, k, timePeriod, crontabLimitParameterSet, expression, k, number
            // token labels: k, i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_k=new RewriteRuleTokenStream(adaptor,"token k",k);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 832:6: -> {$ev != null && $e != null}? ^( EVENT_LIMIT_EXPR ( $k)? ( number )? ( $i)? )
            if (ev != null && e != null) {
                // EsperEPL2Grammar.g:832:38: ^( EVENT_LIMIT_EXPR ( $k)? ( number )? ( $i)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_LIMIT_EXPR, "EVENT_LIMIT_EXPR"), root_1);

                // EsperEPL2Grammar.g:832:57: ( $k)?
                if ( stream_k.hasNext() ) {
                    adaptor.addChild(root_1, stream_k.nextNode());

                }
                stream_k.reset();
                // EsperEPL2Grammar.g:832:61: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:832:69: ( $i)?
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());

                }
                stream_i.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 833:6: -> {$ev != null}? ^( TIMEPERIOD_LIMIT_EXPR ( $k)? timePeriod )
            if (ev != null) {
                // EsperEPL2Grammar.g:833:24: ^( TIMEPERIOD_LIMIT_EXPR ( $k)? timePeriod )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TIMEPERIOD_LIMIT_EXPR, "TIMEPERIOD_LIMIT_EXPR"), root_1);

                // EsperEPL2Grammar.g:833:48: ( $k)?
                if ( stream_k.hasNext() ) {
                    adaptor.addChild(root_1, stream_k.nextNode());

                }
                stream_k.reset();
                adaptor.addChild(root_1, stream_timePeriod.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 834:6: -> {$at != null}? ^( CRONTAB_LIMIT_EXPR ( $k)? crontabLimitParameterSet )
            if (at != null) {
                // EsperEPL2Grammar.g:834:24: ^( CRONTAB_LIMIT_EXPR ( $k)? crontabLimitParameterSet )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CRONTAB_LIMIT_EXPR, "CRONTAB_LIMIT_EXPR"), root_1);

                // EsperEPL2Grammar.g:834:45: ( $k)?
                if ( stream_k.hasNext() ) {
                    adaptor.addChild(root_1, stream_k.nextNode());

                }
                stream_k.reset();
                adaptor.addChild(root_1, stream_crontabLimitParameterSet.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 835:6: -> ^( WHEN_LIMIT_EXPR ( $k)? expression ( onSetExpr )? )
            {
                // EsperEPL2Grammar.g:835:9: ^( WHEN_LIMIT_EXPR ( $k)? expression ( onSetExpr )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WHEN_LIMIT_EXPR, "WHEN_LIMIT_EXPR"), root_1);

                // EsperEPL2Grammar.g:835:27: ( $k)?
                if ( stream_k.hasNext() ) {
                    adaptor.addChild(root_1, stream_k.nextNode());

                }
                stream_k.reset();
                adaptor.addChild(root_1, stream_expression.nextTree());
                // EsperEPL2Grammar.g:835:42: ( onSetExpr )?
                if ( stream_onSetExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetExpr.nextTree());

                }
                stream_onSetExpr.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "outputLimit"

    public static class rowLimit_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rowLimit"
    // EsperEPL2Grammar.g:838:1: rowLimit : (n1= numberconstant | i1= IDENT ) ( (c= COMMA | o= OFFSET ) (n2= numberconstant | i2= IDENT ) )? -> ^( ROW_LIMIT_EXPR ( $n1)? ( $i1)? ( $n2)? ( $i2)? ( $o)? ( $c)? ) ;
    public final EsperEPL2GrammarParser.rowLimit_return rowLimit() throws RecognitionException {
        EsperEPL2GrammarParser.rowLimit_return retval = new EsperEPL2GrammarParser.rowLimit_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i1=null;
        Token c=null;
        Token o=null;
        Token i2=null;
        EsperEPL2GrammarParser.numberconstant_return n1 = null;

        EsperEPL2GrammarParser.numberconstant_return n2 = null;


        CommonTree i1_tree=null;
        CommonTree c_tree=null;
        CommonTree o_tree=null;
        CommonTree i2_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_OFFSET=new RewriteRuleTokenStream(adaptor,"token OFFSET");
        RewriteRuleSubtreeStream stream_numberconstant=new RewriteRuleSubtreeStream(adaptor,"rule numberconstant");
         paraphrases.push("row limit clause"); 
        try {
            // EsperEPL2Grammar.g:841:2: ( (n1= numberconstant | i1= IDENT ) ( (c= COMMA | o= OFFSET ) (n2= numberconstant | i2= IDENT ) )? -> ^( ROW_LIMIT_EXPR ( $n1)? ( $i1)? ( $n2)? ( $i2)? ( $o)? ( $c)? ) )
            // EsperEPL2Grammar.g:841:6: (n1= numberconstant | i1= IDENT ) ( (c= COMMA | o= OFFSET ) (n2= numberconstant | i2= IDENT ) )?
            {
            // EsperEPL2Grammar.g:841:6: (n1= numberconstant | i1= IDENT )
            int alt89=2;
            int LA89_0 = input.LA(1);

            if ( (LA89_0==NUM_DOUBLE||(LA89_0>=PLUS && LA89_0<=MINUS)||LA89_0==NUM_INT||(LA89_0>=NUM_LONG && LA89_0<=NUM_FLOAT)) ) {
                alt89=1;
            }
            else if ( (LA89_0==IDENT) ) {
                alt89=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 89, 0, input);

                throw nvae;
            }
            switch (alt89) {
                case 1 :
                    // EsperEPL2Grammar.g:841:7: n1= numberconstant
                    {
                    pushFollow(FOLLOW_numberconstant_in_rowLimit4302);
                    n1=numberconstant();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_numberconstant.add(n1.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:841:27: i1= IDENT
                    {
                    i1=(Token)match(input,IDENT,FOLLOW_IDENT_in_rowLimit4308); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i1);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:841:37: ( (c= COMMA | o= OFFSET ) (n2= numberconstant | i2= IDENT ) )?
            int alt92=2;
            int LA92_0 = input.LA(1);

            if ( (LA92_0==OFFSET||LA92_0==COMMA) ) {
                alt92=1;
            }
            switch (alt92) {
                case 1 :
                    // EsperEPL2Grammar.g:841:38: (c= COMMA | o= OFFSET ) (n2= numberconstant | i2= IDENT )
                    {
                    // EsperEPL2Grammar.g:841:38: (c= COMMA | o= OFFSET )
                    int alt90=2;
                    int LA90_0 = input.LA(1);

                    if ( (LA90_0==COMMA) ) {
                        alt90=1;
                    }
                    else if ( (LA90_0==OFFSET) ) {
                        alt90=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 90, 0, input);

                        throw nvae;
                    }
                    switch (alt90) {
                        case 1 :
                            // EsperEPL2Grammar.g:841:39: c= COMMA
                            {
                            c=(Token)match(input,COMMA,FOLLOW_COMMA_in_rowLimit4315); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COMMA.add(c);


                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:841:49: o= OFFSET
                            {
                            o=(Token)match(input,OFFSET,FOLLOW_OFFSET_in_rowLimit4321); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_OFFSET.add(o);


                            }
                            break;

                    }

                    // EsperEPL2Grammar.g:841:59: (n2= numberconstant | i2= IDENT )
                    int alt91=2;
                    int LA91_0 = input.LA(1);

                    if ( (LA91_0==NUM_DOUBLE||(LA91_0>=PLUS && LA91_0<=MINUS)||LA91_0==NUM_INT||(LA91_0>=NUM_LONG && LA91_0<=NUM_FLOAT)) ) {
                        alt91=1;
                    }
                    else if ( (LA91_0==IDENT) ) {
                        alt91=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 91, 0, input);

                        throw nvae;
                    }
                    switch (alt91) {
                        case 1 :
                            // EsperEPL2Grammar.g:841:60: n2= numberconstant
                            {
                            pushFollow(FOLLOW_numberconstant_in_rowLimit4327);
                            n2=numberconstant();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_numberconstant.add(n2.getTree());

                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:841:80: i2= IDENT
                            {
                            i2=(Token)match(input,IDENT,FOLLOW_IDENT_in_rowLimit4333); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IDENT.add(i2);


                            }
                            break;

                    }


                    }
                    break;

            }



            // AST REWRITE
            // elements: n1, i1, n2, c, i2, o
            // token labels: c, o, i2, i1
            // rule labels: n1, retval, n2
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_c=new RewriteRuleTokenStream(adaptor,"token c",c);
            RewriteRuleTokenStream stream_o=new RewriteRuleTokenStream(adaptor,"token o",o);
            RewriteRuleTokenStream stream_i2=new RewriteRuleTokenStream(adaptor,"token i2",i2);
            RewriteRuleTokenStream stream_i1=new RewriteRuleTokenStream(adaptor,"token i1",i1);
            RewriteRuleSubtreeStream stream_n1=new RewriteRuleSubtreeStream(adaptor,"token n1",n1!=null?n1.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_n2=new RewriteRuleSubtreeStream(adaptor,"token n2",n2!=null?n2.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 842:6: -> ^( ROW_LIMIT_EXPR ( $n1)? ( $i1)? ( $n2)? ( $i2)? ( $o)? ( $c)? )
            {
                // EsperEPL2Grammar.g:842:9: ^( ROW_LIMIT_EXPR ( $n1)? ( $i1)? ( $n2)? ( $i2)? ( $o)? ( $c)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ROW_LIMIT_EXPR, "ROW_LIMIT_EXPR"), root_1);

                // EsperEPL2Grammar.g:842:26: ( $n1)?
                if ( stream_n1.hasNext() ) {
                    adaptor.addChild(root_1, stream_n1.nextTree());

                }
                stream_n1.reset();
                // EsperEPL2Grammar.g:842:31: ( $i1)?
                if ( stream_i1.hasNext() ) {
                    adaptor.addChild(root_1, stream_i1.nextNode());

                }
                stream_i1.reset();
                // EsperEPL2Grammar.g:842:36: ( $n2)?
                if ( stream_n2.hasNext() ) {
                    adaptor.addChild(root_1, stream_n2.nextTree());

                }
                stream_n2.reset();
                // EsperEPL2Grammar.g:842:41: ( $i2)?
                if ( stream_i2.hasNext() ) {
                    adaptor.addChild(root_1, stream_i2.nextNode());

                }
                stream_i2.reset();
                // EsperEPL2Grammar.g:842:46: ( $o)?
                if ( stream_o.hasNext() ) {
                    adaptor.addChild(root_1, stream_o.nextNode());

                }
                stream_o.reset();
                // EsperEPL2Grammar.g:842:50: ( $c)?
                if ( stream_c.hasNext() ) {
                    adaptor.addChild(root_1, stream_c.nextNode());

                }
                stream_c.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "rowLimit"

    public static class crontabLimitParameterSet_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "crontabLimitParameterSet"
    // EsperEPL2Grammar.g:845:1: crontabLimitParameterSet : LPAREN expressionWithTime COMMA expressionWithTime COMMA expressionWithTime COMMA expressionWithTime COMMA expressionWithTime ( COMMA expressionWithTime )? RPAREN -> ^( CRONTAB_LIMIT_EXPR_PARAM ( expressionWithTime )* ) ;
    public final EsperEPL2GrammarParser.crontabLimitParameterSet_return crontabLimitParameterSet() throws RecognitionException {
        EsperEPL2GrammarParser.crontabLimitParameterSet_return retval = new EsperEPL2GrammarParser.crontabLimitParameterSet_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LPAREN223=null;
        Token COMMA225=null;
        Token COMMA227=null;
        Token COMMA229=null;
        Token COMMA231=null;
        Token COMMA233=null;
        Token RPAREN235=null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime224 = null;

        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime226 = null;

        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime228 = null;

        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime230 = null;

        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime232 = null;

        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime234 = null;


        CommonTree LPAREN223_tree=null;
        CommonTree COMMA225_tree=null;
        CommonTree COMMA227_tree=null;
        CommonTree COMMA229_tree=null;
        CommonTree COMMA231_tree=null;
        CommonTree COMMA233_tree=null;
        CommonTree RPAREN235_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionWithTime=new RewriteRuleSubtreeStream(adaptor,"rule expressionWithTime");
        try {
            // EsperEPL2Grammar.g:846:2: ( LPAREN expressionWithTime COMMA expressionWithTime COMMA expressionWithTime COMMA expressionWithTime COMMA expressionWithTime ( COMMA expressionWithTime )? RPAREN -> ^( CRONTAB_LIMIT_EXPR_PARAM ( expressionWithTime )* ) )
            // EsperEPL2Grammar.g:846:4: LPAREN expressionWithTime COMMA expressionWithTime COMMA expressionWithTime COMMA expressionWithTime COMMA expressionWithTime ( COMMA expressionWithTime )? RPAREN
            {
            LPAREN223=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_crontabLimitParameterSet4385); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN223);

            pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet4387);
            expressionWithTime224=expressionWithTime();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime224.getTree());
            COMMA225=(Token)match(input,COMMA,FOLLOW_COMMA_in_crontabLimitParameterSet4389); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COMMA.add(COMMA225);

            pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet4391);
            expressionWithTime226=expressionWithTime();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime226.getTree());
            COMMA227=(Token)match(input,COMMA,FOLLOW_COMMA_in_crontabLimitParameterSet4393); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COMMA.add(COMMA227);

            pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet4395);
            expressionWithTime228=expressionWithTime();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime228.getTree());
            COMMA229=(Token)match(input,COMMA,FOLLOW_COMMA_in_crontabLimitParameterSet4397); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COMMA.add(COMMA229);

            pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet4399);
            expressionWithTime230=expressionWithTime();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime230.getTree());
            COMMA231=(Token)match(input,COMMA,FOLLOW_COMMA_in_crontabLimitParameterSet4401); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COMMA.add(COMMA231);

            pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet4403);
            expressionWithTime232=expressionWithTime();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime232.getTree());
            // EsperEPL2Grammar.g:846:130: ( COMMA expressionWithTime )?
            int alt93=2;
            int LA93_0 = input.LA(1);

            if ( (LA93_0==COMMA) ) {
                alt93=1;
            }
            switch (alt93) {
                case 1 :
                    // EsperEPL2Grammar.g:846:131: COMMA expressionWithTime
                    {
                    COMMA233=(Token)match(input,COMMA,FOLLOW_COMMA_in_crontabLimitParameterSet4406); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA233);

                    pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet4408);
                    expressionWithTime234=expressionWithTime();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime234.getTree());

                    }
                    break;

            }

            RPAREN235=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_crontabLimitParameterSet4412); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN235);



            // AST REWRITE
            // elements: expressionWithTime
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 847:3: -> ^( CRONTAB_LIMIT_EXPR_PARAM ( expressionWithTime )* )
            {
                // EsperEPL2Grammar.g:847:6: ^( CRONTAB_LIMIT_EXPR_PARAM ( expressionWithTime )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CRONTAB_LIMIT_EXPR_PARAM, "CRONTAB_LIMIT_EXPR_PARAM"), root_1);

                // EsperEPL2Grammar.g:847:33: ( expressionWithTime )*
                while ( stream_expressionWithTime.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionWithTime.nextTree());

                }
                stream_expressionWithTime.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "crontabLimitParameterSet"

    public static class whenClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "whenClause"
    // EsperEPL2Grammar.g:850:1: whenClause : ( WHEN expression THEN expression ) ;
    public final EsperEPL2GrammarParser.whenClause_return whenClause() throws RecognitionException {
        EsperEPL2GrammarParser.whenClause_return retval = new EsperEPL2GrammarParser.whenClause_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token WHEN236=null;
        Token THEN238=null;
        EsperEPL2GrammarParser.expression_return expression237 = null;

        EsperEPL2GrammarParser.expression_return expression239 = null;


        CommonTree WHEN236_tree=null;
        CommonTree THEN238_tree=null;

        try {
            // EsperEPL2Grammar.g:851:2: ( ( WHEN expression THEN expression ) )
            // EsperEPL2Grammar.g:851:4: ( WHEN expression THEN expression )
            {
            root_0 = (CommonTree)adaptor.nil();

            // EsperEPL2Grammar.g:851:4: ( WHEN expression THEN expression )
            // EsperEPL2Grammar.g:851:5: WHEN expression THEN expression
            {
            WHEN236=(Token)match(input,WHEN,FOLLOW_WHEN_in_whenClause4442); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_whenClause4445);
            expression237=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression237.getTree());
            THEN238=(Token)match(input,THEN,FOLLOW_THEN_in_whenClause4447); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_whenClause4450);
            expression239=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression239.getTree());

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "whenClause"

    public static class elseClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elseClause"
    // EsperEPL2Grammar.g:854:1: elseClause : ( ELSE expression ) ;
    public final EsperEPL2GrammarParser.elseClause_return elseClause() throws RecognitionException {
        EsperEPL2GrammarParser.elseClause_return retval = new EsperEPL2GrammarParser.elseClause_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token ELSE240=null;
        EsperEPL2GrammarParser.expression_return expression241 = null;


        CommonTree ELSE240_tree=null;

        try {
            // EsperEPL2Grammar.g:855:2: ( ( ELSE expression ) )
            // EsperEPL2Grammar.g:855:4: ( ELSE expression )
            {
            root_0 = (CommonTree)adaptor.nil();

            // EsperEPL2Grammar.g:855:4: ( ELSE expression )
            // EsperEPL2Grammar.g:855:5: ELSE expression
            {
            ELSE240=(Token)match(input,ELSE,FOLLOW_ELSE_in_elseClause4463); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_elseClause4466);
            expression241=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression241.getTree());

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "elseClause"

    public static class expression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expression"
    // EsperEPL2Grammar.g:859:1: expression : caseExpression ;
    public final EsperEPL2GrammarParser.expression_return expression() throws RecognitionException {
        EsperEPL2GrammarParser.expression_return retval = new EsperEPL2GrammarParser.expression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.caseExpression_return caseExpression242 = null;



        try {
            // EsperEPL2Grammar.g:860:2: ( caseExpression )
            // EsperEPL2Grammar.g:860:4: caseExpression
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_caseExpression_in_expression4479);
            caseExpression242=caseExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, caseExpression242.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "expression"

    public static class caseExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "caseExpression"
    // EsperEPL2Grammar.g:863:1: caseExpression : ( CASE ( whenClause )+ ( elseClause )? END | CASE expression ( whenClause )+ ( elseClause )? END -> ^( CASE2 expression ( whenClause )+ ( elseClause )? ) | evalOrExpression );
    public final EsperEPL2GrammarParser.caseExpression_return caseExpression() throws RecognitionException {
        EsperEPL2GrammarParser.caseExpression_return retval = new EsperEPL2GrammarParser.caseExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token CASE243=null;
        Token END246=null;
        Token CASE247=null;
        Token END251=null;
        EsperEPL2GrammarParser.whenClause_return whenClause244 = null;

        EsperEPL2GrammarParser.elseClause_return elseClause245 = null;

        EsperEPL2GrammarParser.expression_return expression248 = null;

        EsperEPL2GrammarParser.whenClause_return whenClause249 = null;

        EsperEPL2GrammarParser.elseClause_return elseClause250 = null;

        EsperEPL2GrammarParser.evalOrExpression_return evalOrExpression252 = null;


        CommonTree CASE243_tree=null;
        CommonTree END246_tree=null;
        CommonTree CASE247_tree=null;
        CommonTree END251_tree=null;
        RewriteRuleTokenStream stream_END=new RewriteRuleTokenStream(adaptor,"token END");
        RewriteRuleTokenStream stream_CASE=new RewriteRuleTokenStream(adaptor,"token CASE");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_whenClause=new RewriteRuleSubtreeStream(adaptor,"rule whenClause");
        RewriteRuleSubtreeStream stream_elseClause=new RewriteRuleSubtreeStream(adaptor,"rule elseClause");
        try {
            // EsperEPL2Grammar.g:864:2: ( CASE ( whenClause )+ ( elseClause )? END | CASE expression ( whenClause )+ ( elseClause )? END -> ^( CASE2 expression ( whenClause )+ ( elseClause )? ) | evalOrExpression )
            int alt98=3;
            alt98 = dfa98.predict(input);
            switch (alt98) {
                case 1 :
                    // EsperEPL2Grammar.g:864:4: CASE ( whenClause )+ ( elseClause )? END
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    if ( state.backtracking==0 ) {
                       paraphrases.push("case expression"); 
                    }
                    CASE243=(Token)match(input,CASE,FOLLOW_CASE_in_caseExpression4493); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CASE243_tree = (CommonTree)adaptor.create(CASE243);
                    root_0 = (CommonTree)adaptor.becomeRoot(CASE243_tree, root_0);
                    }
                    // EsperEPL2Grammar.g:864:52: ( whenClause )+
                    int cnt94=0;
                    loop94:
                    do {
                        int alt94=2;
                        int LA94_0 = input.LA(1);

                        if ( (LA94_0==WHEN) ) {
                            alt94=1;
                        }


                        switch (alt94) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:864:52: whenClause
                    	    {
                    	    pushFollow(FOLLOW_whenClause_in_caseExpression4496);
                    	    whenClause244=whenClause();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, whenClause244.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt94 >= 1 ) break loop94;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(94, input);
                                throw eee;
                        }
                        cnt94++;
                    } while (true);

                    // EsperEPL2Grammar.g:864:64: ( elseClause )?
                    int alt95=2;
                    int LA95_0 = input.LA(1);

                    if ( (LA95_0==ELSE) ) {
                        alt95=1;
                    }
                    switch (alt95) {
                        case 1 :
                            // EsperEPL2Grammar.g:864:64: elseClause
                            {
                            pushFollow(FOLLOW_elseClause_in_caseExpression4499);
                            elseClause245=elseClause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, elseClause245.getTree());

                            }
                            break;

                    }

                    END246=(Token)match(input,END,FOLLOW_END_in_caseExpression4502); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       paraphrases.pop(); 
                    }

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:865:4: CASE expression ( whenClause )+ ( elseClause )? END
                    {
                    if ( state.backtracking==0 ) {
                       paraphrases.push("case expression"); 
                    }
                    CASE247=(Token)match(input,CASE,FOLLOW_CASE_in_caseExpression4513); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CASE.add(CASE247);

                    pushFollow(FOLLOW_expression_in_caseExpression4515);
                    expression248=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression248.getTree());
                    // EsperEPL2Grammar.g:865:62: ( whenClause )+
                    int cnt96=0;
                    loop96:
                    do {
                        int alt96=2;
                        int LA96_0 = input.LA(1);

                        if ( (LA96_0==WHEN) ) {
                            alt96=1;
                        }


                        switch (alt96) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:865:62: whenClause
                    	    {
                    	    pushFollow(FOLLOW_whenClause_in_caseExpression4517);
                    	    whenClause249=whenClause();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_whenClause.add(whenClause249.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt96 >= 1 ) break loop96;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(96, input);
                                throw eee;
                        }
                        cnt96++;
                    } while (true);

                    // EsperEPL2Grammar.g:865:74: ( elseClause )?
                    int alt97=2;
                    int LA97_0 = input.LA(1);

                    if ( (LA97_0==ELSE) ) {
                        alt97=1;
                    }
                    switch (alt97) {
                        case 1 :
                            // EsperEPL2Grammar.g:865:74: elseClause
                            {
                            pushFollow(FOLLOW_elseClause_in_caseExpression4520);
                            elseClause250=elseClause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elseClause.add(elseClause250.getTree());

                            }
                            break;

                    }

                    END251=(Token)match(input,END,FOLLOW_END_in_caseExpression4523); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_END.add(END251);

                    if ( state.backtracking==0 ) {
                       paraphrases.pop(); 
                    }


                    // AST REWRITE
                    // elements: elseClause, whenClause, expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 866:4: -> ^( CASE2 expression ( whenClause )+ ( elseClause )? )
                    {
                        // EsperEPL2Grammar.g:866:7: ^( CASE2 expression ( whenClause )+ ( elseClause )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CASE2, "CASE2"), root_1);

                        adaptor.addChild(root_1, stream_expression.nextTree());
                        if ( !(stream_whenClause.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_whenClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_whenClause.nextTree());

                        }
                        stream_whenClause.reset();
                        // EsperEPL2Grammar.g:866:38: ( elseClause )?
                        if ( stream_elseClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_elseClause.nextTree());

                        }
                        stream_elseClause.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:867:4: evalOrExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_evalOrExpression_in_caseExpression4547);
                    evalOrExpression252=evalOrExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, evalOrExpression252.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "caseExpression"

    public static class evalOrExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "evalOrExpression"
    // EsperEPL2Grammar.g:870:1: evalOrExpression : evalAndExpression (op= OR_EXPR evalAndExpression )* -> {$op != null}? ^( EVAL_OR_EXPR ( evalAndExpression )* ) -> evalAndExpression ;
    public final EsperEPL2GrammarParser.evalOrExpression_return evalOrExpression() throws RecognitionException {
        EsperEPL2GrammarParser.evalOrExpression_return retval = new EsperEPL2GrammarParser.evalOrExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token op=null;
        EsperEPL2GrammarParser.evalAndExpression_return evalAndExpression253 = null;

        EsperEPL2GrammarParser.evalAndExpression_return evalAndExpression254 = null;


        CommonTree op_tree=null;
        RewriteRuleTokenStream stream_OR_EXPR=new RewriteRuleTokenStream(adaptor,"token OR_EXPR");
        RewriteRuleSubtreeStream stream_evalAndExpression=new RewriteRuleSubtreeStream(adaptor,"rule evalAndExpression");
        try {
            // EsperEPL2Grammar.g:871:2: ( evalAndExpression (op= OR_EXPR evalAndExpression )* -> {$op != null}? ^( EVAL_OR_EXPR ( evalAndExpression )* ) -> evalAndExpression )
            // EsperEPL2Grammar.g:871:4: evalAndExpression (op= OR_EXPR evalAndExpression )*
            {
            pushFollow(FOLLOW_evalAndExpression_in_evalOrExpression4558);
            evalAndExpression253=evalAndExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_evalAndExpression.add(evalAndExpression253.getTree());
            // EsperEPL2Grammar.g:871:22: (op= OR_EXPR evalAndExpression )*
            loop99:
            do {
                int alt99=2;
                int LA99_0 = input.LA(1);

                if ( (LA99_0==OR_EXPR) ) {
                    alt99=1;
                }


                switch (alt99) {
            	case 1 :
            	    // EsperEPL2Grammar.g:871:23: op= OR_EXPR evalAndExpression
            	    {
            	    op=(Token)match(input,OR_EXPR,FOLLOW_OR_EXPR_in_evalOrExpression4563); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_OR_EXPR.add(op);

            	    pushFollow(FOLLOW_evalAndExpression_in_evalOrExpression4565);
            	    evalAndExpression254=evalAndExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_evalAndExpression.add(evalAndExpression254.getTree());

            	    }
            	    break;

            	default :
            	    break loop99;
                }
            } while (true);



            // AST REWRITE
            // elements: evalAndExpression, evalAndExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 872:3: -> {$op != null}? ^( EVAL_OR_EXPR ( evalAndExpression )* )
            if (op != null) {
                // EsperEPL2Grammar.g:872:21: ^( EVAL_OR_EXPR ( evalAndExpression )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_OR_EXPR, "EVAL_OR_EXPR"), root_1);

                // EsperEPL2Grammar.g:872:36: ( evalAndExpression )*
                while ( stream_evalAndExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_evalAndExpression.nextTree());

                }
                stream_evalAndExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 873:3: -> evalAndExpression
            {
                adaptor.addChild(root_0, stream_evalAndExpression.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "evalOrExpression"

    public static class evalAndExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "evalAndExpression"
    // EsperEPL2Grammar.g:876:1: evalAndExpression : bitWiseExpression (op= AND_EXPR bitWiseExpression )* -> {$op != null}? ^( EVAL_AND_EXPR ( bitWiseExpression )+ ) -> bitWiseExpression ;
    public final EsperEPL2GrammarParser.evalAndExpression_return evalAndExpression() throws RecognitionException {
        EsperEPL2GrammarParser.evalAndExpression_return retval = new EsperEPL2GrammarParser.evalAndExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token op=null;
        EsperEPL2GrammarParser.bitWiseExpression_return bitWiseExpression255 = null;

        EsperEPL2GrammarParser.bitWiseExpression_return bitWiseExpression256 = null;


        CommonTree op_tree=null;
        RewriteRuleTokenStream stream_AND_EXPR=new RewriteRuleTokenStream(adaptor,"token AND_EXPR");
        RewriteRuleSubtreeStream stream_bitWiseExpression=new RewriteRuleSubtreeStream(adaptor,"rule bitWiseExpression");
        try {
            // EsperEPL2Grammar.g:877:2: ( bitWiseExpression (op= AND_EXPR bitWiseExpression )* -> {$op != null}? ^( EVAL_AND_EXPR ( bitWiseExpression )+ ) -> bitWiseExpression )
            // EsperEPL2Grammar.g:877:4: bitWiseExpression (op= AND_EXPR bitWiseExpression )*
            {
            pushFollow(FOLLOW_bitWiseExpression_in_evalAndExpression4597);
            bitWiseExpression255=bitWiseExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_bitWiseExpression.add(bitWiseExpression255.getTree());
            // EsperEPL2Grammar.g:877:22: (op= AND_EXPR bitWiseExpression )*
            loop100:
            do {
                int alt100=2;
                int LA100_0 = input.LA(1);

                if ( (LA100_0==AND_EXPR) ) {
                    alt100=1;
                }


                switch (alt100) {
            	case 1 :
            	    // EsperEPL2Grammar.g:877:23: op= AND_EXPR bitWiseExpression
            	    {
            	    op=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_evalAndExpression4602); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_AND_EXPR.add(op);

            	    pushFollow(FOLLOW_bitWiseExpression_in_evalAndExpression4604);
            	    bitWiseExpression256=bitWiseExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_bitWiseExpression.add(bitWiseExpression256.getTree());

            	    }
            	    break;

            	default :
            	    break loop100;
                }
            } while (true);



            // AST REWRITE
            // elements: bitWiseExpression, bitWiseExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 878:3: -> {$op != null}? ^( EVAL_AND_EXPR ( bitWiseExpression )+ )
            if (op != null) {
                // EsperEPL2Grammar.g:878:21: ^( EVAL_AND_EXPR ( bitWiseExpression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_AND_EXPR, "EVAL_AND_EXPR"), root_1);

                if ( !(stream_bitWiseExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_bitWiseExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_bitWiseExpression.nextTree());

                }
                stream_bitWiseExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 879:3: -> bitWiseExpression
            {
                adaptor.addChild(root_0, stream_bitWiseExpression.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "evalAndExpression"

    public static class bitWiseExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bitWiseExpression"
    // EsperEPL2Grammar.g:882:1: bitWiseExpression : negatedExpression ( ( BAND | BOR | BXOR ) negatedExpression )* ;
    public final EsperEPL2GrammarParser.bitWiseExpression_return bitWiseExpression() throws RecognitionException {
        EsperEPL2GrammarParser.bitWiseExpression_return retval = new EsperEPL2GrammarParser.bitWiseExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token BAND258=null;
        Token BOR259=null;
        Token BXOR260=null;
        EsperEPL2GrammarParser.negatedExpression_return negatedExpression257 = null;

        EsperEPL2GrammarParser.negatedExpression_return negatedExpression261 = null;


        CommonTree BAND258_tree=null;
        CommonTree BOR259_tree=null;
        CommonTree BXOR260_tree=null;

        try {
            // EsperEPL2Grammar.g:883:2: ( negatedExpression ( ( BAND | BOR | BXOR ) negatedExpression )* )
            // EsperEPL2Grammar.g:883:4: negatedExpression ( ( BAND | BOR | BXOR ) negatedExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_negatedExpression_in_bitWiseExpression4636);
            negatedExpression257=negatedExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, negatedExpression257.getTree());
            // EsperEPL2Grammar.g:883:22: ( ( BAND | BOR | BXOR ) negatedExpression )*
            loop102:
            do {
                int alt102=2;
                int LA102_0 = input.LA(1);

                if ( ((LA102_0>=BAND && LA102_0<=BXOR)) ) {
                    alt102=1;
                }


                switch (alt102) {
            	case 1 :
            	    // EsperEPL2Grammar.g:883:24: ( BAND | BOR | BXOR ) negatedExpression
            	    {
            	    // EsperEPL2Grammar.g:883:24: ( BAND | BOR | BXOR )
            	    int alt101=3;
            	    switch ( input.LA(1) ) {
            	    case BAND:
            	        {
            	        alt101=1;
            	        }
            	        break;
            	    case BOR:
            	        {
            	        alt101=2;
            	        }
            	        break;
            	    case BXOR:
            	        {
            	        alt101=3;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 101, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt101) {
            	        case 1 :
            	            // EsperEPL2Grammar.g:883:25: BAND
            	            {
            	            BAND258=(Token)match(input,BAND,FOLLOW_BAND_in_bitWiseExpression4641); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            BAND258_tree = (CommonTree)adaptor.create(BAND258);
            	            root_0 = (CommonTree)adaptor.becomeRoot(BAND258_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // EsperEPL2Grammar.g:883:31: BOR
            	            {
            	            BOR259=(Token)match(input,BOR,FOLLOW_BOR_in_bitWiseExpression4644); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            BOR259_tree = (CommonTree)adaptor.create(BOR259);
            	            root_0 = (CommonTree)adaptor.becomeRoot(BOR259_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 3 :
            	            // EsperEPL2Grammar.g:883:36: BXOR
            	            {
            	            BXOR260=(Token)match(input,BXOR,FOLLOW_BXOR_in_bitWiseExpression4647); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            BXOR260_tree = (CommonTree)adaptor.create(BXOR260);
            	            root_0 = (CommonTree)adaptor.becomeRoot(BXOR260_tree, root_0);
            	            }

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_negatedExpression_in_bitWiseExpression4651);
            	    negatedExpression261=negatedExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, negatedExpression261.getTree());

            	    }
            	    break;

            	default :
            	    break loop102;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "bitWiseExpression"

    public static class negatedExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "negatedExpression"
    // EsperEPL2Grammar.g:886:1: negatedExpression : ( evalEqualsExpression | NOT_EXPR evalEqualsExpression );
    public final EsperEPL2GrammarParser.negatedExpression_return negatedExpression() throws RecognitionException {
        EsperEPL2GrammarParser.negatedExpression_return retval = new EsperEPL2GrammarParser.negatedExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NOT_EXPR263=null;
        EsperEPL2GrammarParser.evalEqualsExpression_return evalEqualsExpression262 = null;

        EsperEPL2GrammarParser.evalEqualsExpression_return evalEqualsExpression264 = null;


        CommonTree NOT_EXPR263_tree=null;

        try {
            // EsperEPL2Grammar.g:887:2: ( evalEqualsExpression | NOT_EXPR evalEqualsExpression )
            int alt103=2;
            int LA103_0 = input.LA(1);

            if ( (LA103_0==WINDOW||LA103_0==ESCAPE||LA103_0==EVERY_EXPR||(LA103_0>=SUM && LA103_0<=COUNT)||LA103_0==OUTER||(LA103_0>=JOIN && LA103_0<=FULL)||(LA103_0>=EVENTS && LA103_0<=LAST)||(LA103_0>=UNIDIRECTIONAL && LA103_0<=CURRENT_TIMESTAMP)||LA103_0==SNAPSHOT||(LA103_0>=VARIABLE && LA103_0<=AT)||(LA103_0>=BOOLEAN_TRUE && LA103_0<=VALUE_NULL)||LA103_0==NUM_DOUBLE||LA103_0==IDENT||LA103_0==LPAREN||(LA103_0>=STRING_LITERAL && LA103_0<=QUOTED_STRING_LITERAL)||(LA103_0>=PLUS && LA103_0<=MINUS)||LA103_0==LCURLY||LA103_0==NUM_INT||LA103_0==QUESTION||(LA103_0>=TICKED_STRING_LITERAL && LA103_0<=NUM_FLOAT)) ) {
                alt103=1;
            }
            else if ( (LA103_0==NOT_EXPR) ) {
                alt103=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 103, 0, input);

                throw nvae;
            }
            switch (alt103) {
                case 1 :
                    // EsperEPL2Grammar.g:887:4: evalEqualsExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_evalEqualsExpression_in_negatedExpression4666);
                    evalEqualsExpression262=evalEqualsExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, evalEqualsExpression262.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:888:4: NOT_EXPR evalEqualsExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    NOT_EXPR263=(Token)match(input,NOT_EXPR,FOLLOW_NOT_EXPR_in_negatedExpression4672); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NOT_EXPR263_tree = (CommonTree)adaptor.create(NOT_EXPR263);
                    root_0 = (CommonTree)adaptor.becomeRoot(NOT_EXPR263_tree, root_0);
                    }
                    pushFollow(FOLLOW_evalEqualsExpression_in_negatedExpression4675);
                    evalEqualsExpression264=evalEqualsExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, evalEqualsExpression264.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "negatedExpression"

    public static class evalEqualsExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "evalEqualsExpression"
    // EsperEPL2Grammar.g:891:1: evalEqualsExpression : evalRelationalExpression ( (eq= EQUALS | is= IS | isnot= IS NOT_EXPR | sqlne= SQL_NE | ne= NOT_EQUAL ) ( evalRelationalExpression | (a= ANY | a= SOME | a= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) ) )* -> {$a == null && ($eq != null || $is != null)}? ^( EVAL_EQUALS_EXPR ( evalRelationalExpression )+ ) -> {$a != null && ($eq != null || $is != null)}? ^( EVAL_EQUALS_GROUP_EXPR evalRelationalExpression $a ( expressionList )? ( subSelectGroupExpression )? ) -> {$a == null && ($isnot != null || $sqlne != null || $ne != null)}? ^( EVAL_NOTEQUALS_EXPR ( evalRelationalExpression )+ ) -> {$a != null && ($isnot != null || $sqlne != null || $ne != null)}? ^( EVAL_NOTEQUALS_GROUP_EXPR evalRelationalExpression $a ( expressionList )? ( subSelectGroupExpression )? ) -> ( evalRelationalExpression )+ ;
    public final EsperEPL2GrammarParser.evalEqualsExpression_return evalEqualsExpression() throws RecognitionException {
        EsperEPL2GrammarParser.evalEqualsExpression_return retval = new EsperEPL2GrammarParser.evalEqualsExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token eq=null;
        Token is=null;
        Token isnot=null;
        Token sqlne=null;
        Token ne=null;
        Token a=null;
        Token NOT_EXPR266=null;
        Token LPAREN268=null;
        Token RPAREN270=null;
        EsperEPL2GrammarParser.evalRelationalExpression_return evalRelationalExpression265 = null;

        EsperEPL2GrammarParser.evalRelationalExpression_return evalRelationalExpression267 = null;

        EsperEPL2GrammarParser.expressionList_return expressionList269 = null;

        EsperEPL2GrammarParser.subSelectGroupExpression_return subSelectGroupExpression271 = null;


        CommonTree eq_tree=null;
        CommonTree is_tree=null;
        CommonTree isnot_tree=null;
        CommonTree sqlne_tree=null;
        CommonTree ne_tree=null;
        CommonTree a_tree=null;
        CommonTree NOT_EXPR266_tree=null;
        CommonTree LPAREN268_tree=null;
        CommonTree RPAREN270_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleTokenStream stream_ANY=new RewriteRuleTokenStream(adaptor,"token ANY");
        RewriteRuleTokenStream stream_NOT_EXPR=new RewriteRuleTokenStream(adaptor,"token NOT_EXPR");
        RewriteRuleTokenStream stream_SQL_NE=new RewriteRuleTokenStream(adaptor,"token SQL_NE");
        RewriteRuleTokenStream stream_NOT_EQUAL=new RewriteRuleTokenStream(adaptor,"token NOT_EQUAL");
        RewriteRuleTokenStream stream_IS=new RewriteRuleTokenStream(adaptor,"token IS");
        RewriteRuleTokenStream stream_SOME=new RewriteRuleTokenStream(adaptor,"token SOME");
        RewriteRuleTokenStream stream_ALL=new RewriteRuleTokenStream(adaptor,"token ALL");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_subSelectGroupExpression=new RewriteRuleSubtreeStream(adaptor,"rule subSelectGroupExpression");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_evalRelationalExpression=new RewriteRuleSubtreeStream(adaptor,"rule evalRelationalExpression");
        try {
            // EsperEPL2Grammar.g:892:2: ( evalRelationalExpression ( (eq= EQUALS | is= IS | isnot= IS NOT_EXPR | sqlne= SQL_NE | ne= NOT_EQUAL ) ( evalRelationalExpression | (a= ANY | a= SOME | a= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) ) )* -> {$a == null && ($eq != null || $is != null)}? ^( EVAL_EQUALS_EXPR ( evalRelationalExpression )+ ) -> {$a != null && ($eq != null || $is != null)}? ^( EVAL_EQUALS_GROUP_EXPR evalRelationalExpression $a ( expressionList )? ( subSelectGroupExpression )? ) -> {$a == null && ($isnot != null || $sqlne != null || $ne != null)}? ^( EVAL_NOTEQUALS_EXPR ( evalRelationalExpression )+ ) -> {$a != null && ($isnot != null || $sqlne != null || $ne != null)}? ^( EVAL_NOTEQUALS_GROUP_EXPR evalRelationalExpression $a ( expressionList )? ( subSelectGroupExpression )? ) -> ( evalRelationalExpression )+ )
            // EsperEPL2Grammar.g:892:4: evalRelationalExpression ( (eq= EQUALS | is= IS | isnot= IS NOT_EXPR | sqlne= SQL_NE | ne= NOT_EQUAL ) ( evalRelationalExpression | (a= ANY | a= SOME | a= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) ) )*
            {
            pushFollow(FOLLOW_evalRelationalExpression_in_evalEqualsExpression4688);
            evalRelationalExpression265=evalRelationalExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_evalRelationalExpression.add(evalRelationalExpression265.getTree());
            // EsperEPL2Grammar.g:892:29: ( (eq= EQUALS | is= IS | isnot= IS NOT_EXPR | sqlne= SQL_NE | ne= NOT_EQUAL ) ( evalRelationalExpression | (a= ANY | a= SOME | a= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) ) )*
            loop109:
            do {
                int alt109=2;
                int LA109_0 = input.LA(1);

                if ( (LA109_0==IS||LA109_0==EQUALS||(LA109_0>=SQL_NE && LA109_0<=NOT_EQUAL)) ) {
                    alt109=1;
                }


                switch (alt109) {
            	case 1 :
            	    // EsperEPL2Grammar.g:893:6: (eq= EQUALS | is= IS | isnot= IS NOT_EXPR | sqlne= SQL_NE | ne= NOT_EQUAL ) ( evalRelationalExpression | (a= ANY | a= SOME | a= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) )
            	    {
            	    // EsperEPL2Grammar.g:893:6: (eq= EQUALS | is= IS | isnot= IS NOT_EXPR | sqlne= SQL_NE | ne= NOT_EQUAL )
            	    int alt104=5;
            	    switch ( input.LA(1) ) {
            	    case EQUALS:
            	        {
            	        alt104=1;
            	        }
            	        break;
            	    case IS:
            	        {
            	        int LA104_2 = input.LA(2);

            	        if ( (LA104_2==NOT_EXPR) ) {
            	            alt104=3;
            	        }
            	        else if ( (LA104_2==WINDOW||LA104_2==ESCAPE||LA104_2==EVERY_EXPR||(LA104_2>=SUM && LA104_2<=COUNT)||LA104_2==OUTER||(LA104_2>=JOIN && LA104_2<=FULL)||(LA104_2>=ALL && LA104_2<=SOME)||(LA104_2>=EVENTS && LA104_2<=LAST)||(LA104_2>=UNIDIRECTIONAL && LA104_2<=CURRENT_TIMESTAMP)||LA104_2==SNAPSHOT||(LA104_2>=VARIABLE && LA104_2<=AT)||(LA104_2>=BOOLEAN_TRUE && LA104_2<=VALUE_NULL)||LA104_2==NUM_DOUBLE||LA104_2==IDENT||LA104_2==LPAREN||(LA104_2>=STRING_LITERAL && LA104_2<=QUOTED_STRING_LITERAL)||(LA104_2>=PLUS && LA104_2<=MINUS)||LA104_2==LCURLY||LA104_2==NUM_INT||LA104_2==QUESTION||(LA104_2>=TICKED_STRING_LITERAL && LA104_2<=NUM_FLOAT)) ) {
            	            alt104=2;
            	        }
            	        else {
            	            if (state.backtracking>0) {state.failed=true; return retval;}
            	            NoViableAltException nvae =
            	                new NoViableAltException("", 104, 2, input);

            	            throw nvae;
            	        }
            	        }
            	        break;
            	    case SQL_NE:
            	        {
            	        alt104=4;
            	        }
            	        break;
            	    case NOT_EQUAL:
            	        {
            	        alt104=5;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 104, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt104) {
            	        case 1 :
            	            // EsperEPL2Grammar.g:893:7: eq= EQUALS
            	            {
            	            eq=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_evalEqualsExpression4701); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_EQUALS.add(eq);


            	            }
            	            break;
            	        case 2 :
            	            // EsperEPL2Grammar.g:894:15: is= IS
            	            {
            	            is=(Token)match(input,IS,FOLLOW_IS_in_evalEqualsExpression4719); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_IS.add(is);


            	            }
            	            break;
            	        case 3 :
            	            // EsperEPL2Grammar.g:895:11: isnot= IS NOT_EXPR
            	            {
            	            isnot=(Token)match(input,IS,FOLLOW_IS_in_evalEqualsExpression4733); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_IS.add(isnot);

            	            NOT_EXPR266=(Token)match(input,NOT_EXPR,FOLLOW_NOT_EXPR_in_evalEqualsExpression4735); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NOT_EXPR.add(NOT_EXPR266);


            	            }
            	            break;
            	        case 4 :
            	            // EsperEPL2Grammar.g:896:11: sqlne= SQL_NE
            	            {
            	            sqlne=(Token)match(input,SQL_NE,FOLLOW_SQL_NE_in_evalEqualsExpression4749); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_SQL_NE.add(sqlne);


            	            }
            	            break;
            	        case 5 :
            	            // EsperEPL2Grammar.g:897:11: ne= NOT_EQUAL
            	            {
            	            ne=(Token)match(input,NOT_EQUAL,FOLLOW_NOT_EQUAL_in_evalEqualsExpression4763); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NOT_EQUAL.add(ne);


            	            }
            	            break;

            	    }

            	    // EsperEPL2Grammar.g:899:9: ( evalRelationalExpression | (a= ANY | a= SOME | a= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) )
            	    int alt108=2;
            	    int LA108_0 = input.LA(1);

            	    if ( (LA108_0==WINDOW||LA108_0==ESCAPE||LA108_0==EVERY_EXPR||(LA108_0>=SUM && LA108_0<=COUNT)||LA108_0==OUTER||(LA108_0>=JOIN && LA108_0<=FULL)||(LA108_0>=EVENTS && LA108_0<=LAST)||(LA108_0>=UNIDIRECTIONAL && LA108_0<=CURRENT_TIMESTAMP)||LA108_0==SNAPSHOT||(LA108_0>=VARIABLE && LA108_0<=AT)||(LA108_0>=BOOLEAN_TRUE && LA108_0<=VALUE_NULL)||LA108_0==NUM_DOUBLE||LA108_0==IDENT||LA108_0==LPAREN||(LA108_0>=STRING_LITERAL && LA108_0<=QUOTED_STRING_LITERAL)||(LA108_0>=PLUS && LA108_0<=MINUS)||LA108_0==LCURLY||LA108_0==NUM_INT||LA108_0==QUESTION||(LA108_0>=TICKED_STRING_LITERAL && LA108_0<=NUM_FLOAT)) ) {
            	        alt108=1;
            	    }
            	    else if ( ((LA108_0>=ALL && LA108_0<=SOME)) ) {
            	        alt108=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 108, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt108) {
            	        case 1 :
            	            // EsperEPL2Grammar.g:900:10: evalRelationalExpression
            	            {
            	            pushFollow(FOLLOW_evalRelationalExpression_in_evalEqualsExpression4793);
            	            evalRelationalExpression267=evalRelationalExpression();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_evalRelationalExpression.add(evalRelationalExpression267.getTree());

            	            }
            	            break;
            	        case 2 :
            	            // EsperEPL2Grammar.g:901:13: (a= ANY | a= SOME | a= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression )
            	            {
            	            // EsperEPL2Grammar.g:901:13: (a= ANY | a= SOME | a= ALL )
            	            int alt105=3;
            	            switch ( input.LA(1) ) {
            	            case ANY:
            	                {
            	                alt105=1;
            	                }
            	                break;
            	            case SOME:
            	                {
            	                alt105=2;
            	                }
            	                break;
            	            case ALL:
            	                {
            	                alt105=3;
            	                }
            	                break;
            	            default:
            	                if (state.backtracking>0) {state.failed=true; return retval;}
            	                NoViableAltException nvae =
            	                    new NoViableAltException("", 105, 0, input);

            	                throw nvae;
            	            }

            	            switch (alt105) {
            	                case 1 :
            	                    // EsperEPL2Grammar.g:901:14: a= ANY
            	                    {
            	                    a=(Token)match(input,ANY,FOLLOW_ANY_in_evalEqualsExpression4810); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_ANY.add(a);


            	                    }
            	                    break;
            	                case 2 :
            	                    // EsperEPL2Grammar.g:901:22: a= SOME
            	                    {
            	                    a=(Token)match(input,SOME,FOLLOW_SOME_in_evalEqualsExpression4816); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_SOME.add(a);


            	                    }
            	                    break;
            	                case 3 :
            	                    // EsperEPL2Grammar.g:901:31: a= ALL
            	                    {
            	                    a=(Token)match(input,ALL,FOLLOW_ALL_in_evalEqualsExpression4822); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_ALL.add(a);


            	                    }
            	                    break;

            	            }

            	            // EsperEPL2Grammar.g:901:38: ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression )
            	            int alt107=2;
            	            int LA107_0 = input.LA(1);

            	            if ( (LA107_0==LPAREN) ) {
            	                int LA107_1 = input.LA(2);

            	                if ( (LA107_1==SELECT) ) {
            	                    alt107=2;
            	                }
            	                else if ( (LA107_1==WINDOW||LA107_1==ESCAPE||(LA107_1>=NOT_EXPR && LA107_1<=EVERY_EXPR)||(LA107_1>=SUM && LA107_1<=COUNT)||LA107_1==CASE||LA107_1==OUTER||(LA107_1>=JOIN && LA107_1<=FULL)||(LA107_1>=EVENTS && LA107_1<=LAST)||(LA107_1>=UNIDIRECTIONAL && LA107_1<=CURRENT_TIMESTAMP)||LA107_1==SNAPSHOT||(LA107_1>=VARIABLE && LA107_1<=AT)||(LA107_1>=BOOLEAN_TRUE && LA107_1<=VALUE_NULL)||LA107_1==NUM_DOUBLE||LA107_1==IDENT||(LA107_1>=LPAREN && LA107_1<=RPAREN)||(LA107_1>=STRING_LITERAL && LA107_1<=QUOTED_STRING_LITERAL)||(LA107_1>=PLUS && LA107_1<=MINUS)||LA107_1==LCURLY||LA107_1==NUM_INT||LA107_1==QUESTION||(LA107_1>=TICKED_STRING_LITERAL && LA107_1<=NUM_FLOAT)) ) {
            	                    alt107=1;
            	                }
            	                else {
            	                    if (state.backtracking>0) {state.failed=true; return retval;}
            	                    NoViableAltException nvae =
            	                        new NoViableAltException("", 107, 1, input);

            	                    throw nvae;
            	                }
            	            }
            	            else {
            	                if (state.backtracking>0) {state.failed=true; return retval;}
            	                NoViableAltException nvae =
            	                    new NoViableAltException("", 107, 0, input);

            	                throw nvae;
            	            }
            	            switch (alt107) {
            	                case 1 :
            	                    // EsperEPL2Grammar.g:901:40: ( LPAREN ( expressionList )? RPAREN )
            	                    {
            	                    // EsperEPL2Grammar.g:901:40: ( LPAREN ( expressionList )? RPAREN )
            	                    // EsperEPL2Grammar.g:901:41: LPAREN ( expressionList )? RPAREN
            	                    {
            	                    LPAREN268=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_evalEqualsExpression4828); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN268);

            	                    // EsperEPL2Grammar.g:901:48: ( expressionList )?
            	                    int alt106=2;
            	                    int LA106_0 = input.LA(1);

            	                    if ( (LA106_0==WINDOW||LA106_0==ESCAPE||(LA106_0>=NOT_EXPR && LA106_0<=EVERY_EXPR)||(LA106_0>=SUM && LA106_0<=COUNT)||LA106_0==CASE||LA106_0==OUTER||(LA106_0>=JOIN && LA106_0<=FULL)||(LA106_0>=EVENTS && LA106_0<=LAST)||(LA106_0>=UNIDIRECTIONAL && LA106_0<=CURRENT_TIMESTAMP)||LA106_0==SNAPSHOT||(LA106_0>=VARIABLE && LA106_0<=AT)||(LA106_0>=BOOLEAN_TRUE && LA106_0<=VALUE_NULL)||LA106_0==NUM_DOUBLE||LA106_0==IDENT||LA106_0==LPAREN||(LA106_0>=STRING_LITERAL && LA106_0<=QUOTED_STRING_LITERAL)||(LA106_0>=PLUS && LA106_0<=MINUS)||LA106_0==LCURLY||LA106_0==NUM_INT||LA106_0==QUESTION||(LA106_0>=TICKED_STRING_LITERAL && LA106_0<=NUM_FLOAT)) ) {
            	                        alt106=1;
            	                    }
            	                    switch (alt106) {
            	                        case 1 :
            	                            // EsperEPL2Grammar.g:901:48: expressionList
            	                            {
            	                            pushFollow(FOLLOW_expressionList_in_evalEqualsExpression4830);
            	                            expressionList269=expressionList();

            	                            state._fsp--;
            	                            if (state.failed) return retval;
            	                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList269.getTree());

            	                            }
            	                            break;

            	                    }

            	                    RPAREN270=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_evalEqualsExpression4833); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN270);


            	                    }


            	                    }
            	                    break;
            	                case 2 :
            	                    // EsperEPL2Grammar.g:901:74: subSelectGroupExpression
            	                    {
            	                    pushFollow(FOLLOW_subSelectGroupExpression_in_evalEqualsExpression4838);
            	                    subSelectGroupExpression271=subSelectGroupExpression();

            	                    state._fsp--;
            	                    if (state.failed) return retval;
            	                    if ( state.backtracking==0 ) stream_subSelectGroupExpression.add(subSelectGroupExpression271.getTree());

            	                    }
            	                    break;

            	            }


            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop109;
                }
            } while (true);



            // AST REWRITE
            // elements: a, evalRelationalExpression, subSelectGroupExpression, evalRelationalExpression, a, subSelectGroupExpression, evalRelationalExpression, expressionList, evalRelationalExpression, expressionList, evalRelationalExpression
            // token labels: a
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_a=new RewriteRuleTokenStream(adaptor,"token a",a);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 904:6: -> {$a == null && ($eq != null || $is != null)}? ^( EVAL_EQUALS_EXPR ( evalRelationalExpression )+ )
            if (a == null && (eq != null || is != null)) {
                // EsperEPL2Grammar.g:904:55: ^( EVAL_EQUALS_EXPR ( evalRelationalExpression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_EQUALS_EXPR, "EVAL_EQUALS_EXPR"), root_1);

                if ( !(stream_evalRelationalExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_evalRelationalExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_evalRelationalExpression.nextTree());

                }
                stream_evalRelationalExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 905:6: -> {$a != null && ($eq != null || $is != null)}? ^( EVAL_EQUALS_GROUP_EXPR evalRelationalExpression $a ( expressionList )? ( subSelectGroupExpression )? )
            if (a != null && (eq != null || is != null)) {
                // EsperEPL2Grammar.g:905:55: ^( EVAL_EQUALS_GROUP_EXPR evalRelationalExpression $a ( expressionList )? ( subSelectGroupExpression )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_EQUALS_GROUP_EXPR, "EVAL_EQUALS_GROUP_EXPR"), root_1);

                adaptor.addChild(root_1, stream_evalRelationalExpression.nextTree());
                adaptor.addChild(root_1, stream_a.nextNode());
                // EsperEPL2Grammar.g:905:108: ( expressionList )?
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());

                }
                stream_expressionList.reset();
                // EsperEPL2Grammar.g:905:124: ( subSelectGroupExpression )?
                if ( stream_subSelectGroupExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_subSelectGroupExpression.nextTree());

                }
                stream_subSelectGroupExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 906:6: -> {$a == null && ($isnot != null || $sqlne != null || $ne != null)}? ^( EVAL_NOTEQUALS_EXPR ( evalRelationalExpression )+ )
            if (a == null && (isnot != null || sqlne != null || ne != null)) {
                // EsperEPL2Grammar.g:906:76: ^( EVAL_NOTEQUALS_EXPR ( evalRelationalExpression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_NOTEQUALS_EXPR, "EVAL_NOTEQUALS_EXPR"), root_1);

                if ( !(stream_evalRelationalExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_evalRelationalExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_evalRelationalExpression.nextTree());

                }
                stream_evalRelationalExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 907:6: -> {$a != null && ($isnot != null || $sqlne != null || $ne != null)}? ^( EVAL_NOTEQUALS_GROUP_EXPR evalRelationalExpression $a ( expressionList )? ( subSelectGroupExpression )? )
            if (a != null && (isnot != null || sqlne != null || ne != null)) {
                // EsperEPL2Grammar.g:907:76: ^( EVAL_NOTEQUALS_GROUP_EXPR evalRelationalExpression $a ( expressionList )? ( subSelectGroupExpression )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_NOTEQUALS_GROUP_EXPR, "EVAL_NOTEQUALS_GROUP_EXPR"), root_1);

                adaptor.addChild(root_1, stream_evalRelationalExpression.nextTree());
                adaptor.addChild(root_1, stream_a.nextNode());
                // EsperEPL2Grammar.g:907:132: ( expressionList )?
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());

                }
                stream_expressionList.reset();
                // EsperEPL2Grammar.g:907:148: ( subSelectGroupExpression )?
                if ( stream_subSelectGroupExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_subSelectGroupExpression.nextTree());

                }
                stream_subSelectGroupExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 908:6: -> ( evalRelationalExpression )+
            {
                if ( !(stream_evalRelationalExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_evalRelationalExpression.hasNext() ) {
                    adaptor.addChild(root_0, stream_evalRelationalExpression.nextTree());

                }
                stream_evalRelationalExpression.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "evalEqualsExpression"

    public static class evalRelationalExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "evalRelationalExpression"
    // EsperEPL2Grammar.g:911:1: evalRelationalExpression : concatenationExpr ( ( ( (r= LT | r= GT | r= LE | r= GE ) ( concatenationExpr | (g= ANY | g= SOME | g= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) ) )* -> {$g == null && $r != null}? ^( ( concatenationExpr )+ ) -> {$g != null && $r != null}? ^( concatenationExpr $g ( expressionList )? ( subSelectGroupExpression )? ) -> ( concatenationExpr )+ ) | (n= NOT_EXPR )? ( (i= IN_SET (l= LPAREN | l= LBRACK ) expression ( (col= COLON ( expression ) ) | ( ( COMMA expression )* ) ) (r= RPAREN | r= RBRACK ) ) -> {$col == null && $n == null}? ^( IN_SET concatenationExpr $l ( expression )+ $r) -> {$col == null && $n != null}? ^( NOT_IN_SET concatenationExpr $l ( expression )+ $r) -> {$col != null && $n == null}? ^( IN_RANGE concatenationExpr $l ( expression )+ $r) -> ^( NOT_IN_RANGE concatenationExpr $l ( expression )+ $r) | IN_SET inSubSelectQuery -> {$n == null}? ^( IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) -> ^( NOT_IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) | BETWEEN betweenList -> {$n == null}? ^( BETWEEN concatenationExpr betweenList ) -> ^( NOT_BETWEEN concatenationExpr betweenList ) | LIKE concatenationExpr ( ESCAPE stringconstant )? -> {$n == null}? ^( LIKE ( concatenationExpr )* ( stringconstant )? ) -> ^( NOT_LIKE ( concatenationExpr )* ( stringconstant )? ) | REGEXP concatenationExpr -> {$n == null}? ^( REGEXP ( concatenationExpr )+ ) -> ^( NOT_REGEXP ( concatenationExpr )+ ) ) ) ;
    public final EsperEPL2GrammarParser.evalRelationalExpression_return evalRelationalExpression() throws RecognitionException {
        EsperEPL2GrammarParser.evalRelationalExpression_return retval = new EsperEPL2GrammarParser.evalRelationalExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token r=null;
        Token g=null;
        Token n=null;
        Token i=null;
        Token l=null;
        Token col=null;
        Token LPAREN274=null;
        Token RPAREN276=null;
        Token COMMA280=null;
        Token IN_SET282=null;
        Token BETWEEN284=null;
        Token LIKE286=null;
        Token ESCAPE288=null;
        Token REGEXP290=null;
        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr272 = null;

        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr273 = null;

        EsperEPL2GrammarParser.expressionList_return expressionList275 = null;

        EsperEPL2GrammarParser.subSelectGroupExpression_return subSelectGroupExpression277 = null;

        EsperEPL2GrammarParser.expression_return expression278 = null;

        EsperEPL2GrammarParser.expression_return expression279 = null;

        EsperEPL2GrammarParser.expression_return expression281 = null;

        EsperEPL2GrammarParser.inSubSelectQuery_return inSubSelectQuery283 = null;

        EsperEPL2GrammarParser.betweenList_return betweenList285 = null;

        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr287 = null;

        EsperEPL2GrammarParser.stringconstant_return stringconstant289 = null;

        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr291 = null;


        CommonTree r_tree=null;
        CommonTree g_tree=null;
        CommonTree n_tree=null;
        CommonTree i_tree=null;
        CommonTree l_tree=null;
        CommonTree col_tree=null;
        CommonTree LPAREN274_tree=null;
        CommonTree RPAREN276_tree=null;
        CommonTree COMMA280_tree=null;
        CommonTree IN_SET282_tree=null;
        CommonTree BETWEEN284_tree=null;
        CommonTree LIKE286_tree=null;
        CommonTree ESCAPE288_tree=null;
        CommonTree REGEXP290_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_GE=new RewriteRuleTokenStream(adaptor,"token GE");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LT=new RewriteRuleTokenStream(adaptor,"token LT");
        RewriteRuleTokenStream stream_ANY=new RewriteRuleTokenStream(adaptor,"token ANY");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_NOT_EXPR=new RewriteRuleTokenStream(adaptor,"token NOT_EXPR");
        RewriteRuleTokenStream stream_ESCAPE=new RewriteRuleTokenStream(adaptor,"token ESCAPE");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_IN_SET=new RewriteRuleTokenStream(adaptor,"token IN_SET");
        RewriteRuleTokenStream stream_SOME=new RewriteRuleTokenStream(adaptor,"token SOME");
        RewriteRuleTokenStream stream_ALL=new RewriteRuleTokenStream(adaptor,"token ALL");
        RewriteRuleTokenStream stream_REGEXP=new RewriteRuleTokenStream(adaptor,"token REGEXP");
        RewriteRuleTokenStream stream_GT=new RewriteRuleTokenStream(adaptor,"token GT");
        RewriteRuleTokenStream stream_BETWEEN=new RewriteRuleTokenStream(adaptor,"token BETWEEN");
        RewriteRuleTokenStream stream_LE=new RewriteRuleTokenStream(adaptor,"token LE");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_LIKE=new RewriteRuleTokenStream(adaptor,"token LIKE");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_inSubSelectQuery=new RewriteRuleSubtreeStream(adaptor,"rule inSubSelectQuery");
        RewriteRuleSubtreeStream stream_concatenationExpr=new RewriteRuleSubtreeStream(adaptor,"rule concatenationExpr");
        RewriteRuleSubtreeStream stream_subSelectGroupExpression=new RewriteRuleSubtreeStream(adaptor,"rule subSelectGroupExpression");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_stringconstant=new RewriteRuleSubtreeStream(adaptor,"rule stringconstant");
        RewriteRuleSubtreeStream stream_betweenList=new RewriteRuleSubtreeStream(adaptor,"rule betweenList");
        try {
            // EsperEPL2Grammar.g:912:2: ( concatenationExpr ( ( ( (r= LT | r= GT | r= LE | r= GE ) ( concatenationExpr | (g= ANY | g= SOME | g= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) ) )* -> {$g == null && $r != null}? ^( ( concatenationExpr )+ ) -> {$g != null && $r != null}? ^( concatenationExpr $g ( expressionList )? ( subSelectGroupExpression )? ) -> ( concatenationExpr )+ ) | (n= NOT_EXPR )? ( (i= IN_SET (l= LPAREN | l= LBRACK ) expression ( (col= COLON ( expression ) ) | ( ( COMMA expression )* ) ) (r= RPAREN | r= RBRACK ) ) -> {$col == null && $n == null}? ^( IN_SET concatenationExpr $l ( expression )+ $r) -> {$col == null && $n != null}? ^( NOT_IN_SET concatenationExpr $l ( expression )+ $r) -> {$col != null && $n == null}? ^( IN_RANGE concatenationExpr $l ( expression )+ $r) -> ^( NOT_IN_RANGE concatenationExpr $l ( expression )+ $r) | IN_SET inSubSelectQuery -> {$n == null}? ^( IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) -> ^( NOT_IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) | BETWEEN betweenList -> {$n == null}? ^( BETWEEN concatenationExpr betweenList ) -> ^( NOT_BETWEEN concatenationExpr betweenList ) | LIKE concatenationExpr ( ESCAPE stringconstant )? -> {$n == null}? ^( LIKE ( concatenationExpr )* ( stringconstant )? ) -> ^( NOT_LIKE ( concatenationExpr )* ( stringconstant )? ) | REGEXP concatenationExpr -> {$n == null}? ^( REGEXP ( concatenationExpr )+ ) -> ^( NOT_REGEXP ( concatenationExpr )+ ) ) ) )
            // EsperEPL2Grammar.g:912:4: concatenationExpr ( ( ( (r= LT | r= GT | r= LE | r= GE ) ( concatenationExpr | (g= ANY | g= SOME | g= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) ) )* -> {$g == null && $r != null}? ^( ( concatenationExpr )+ ) -> {$g != null && $r != null}? ^( concatenationExpr $g ( expressionList )? ( subSelectGroupExpression )? ) -> ( concatenationExpr )+ ) | (n= NOT_EXPR )? ( (i= IN_SET (l= LPAREN | l= LBRACK ) expression ( (col= COLON ( expression ) ) | ( ( COMMA expression )* ) ) (r= RPAREN | r= RBRACK ) ) -> {$col == null && $n == null}? ^( IN_SET concatenationExpr $l ( expression )+ $r) -> {$col == null && $n != null}? ^( NOT_IN_SET concatenationExpr $l ( expression )+ $r) -> {$col != null && $n == null}? ^( IN_RANGE concatenationExpr $l ( expression )+ $r) -> ^( NOT_IN_RANGE concatenationExpr $l ( expression )+ $r) | IN_SET inSubSelectQuery -> {$n == null}? ^( IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) -> ^( NOT_IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) | BETWEEN betweenList -> {$n == null}? ^( BETWEEN concatenationExpr betweenList ) -> ^( NOT_BETWEEN concatenationExpr betweenList ) | LIKE concatenationExpr ( ESCAPE stringconstant )? -> {$n == null}? ^( LIKE ( concatenationExpr )* ( stringconstant )? ) -> ^( NOT_LIKE ( concatenationExpr )* ( stringconstant )? ) | REGEXP concatenationExpr -> {$n == null}? ^( REGEXP ( concatenationExpr )+ ) -> ^( NOT_REGEXP ( concatenationExpr )+ ) ) )
            {
            pushFollow(FOLLOW_concatenationExpr_in_evalRelationalExpression4966);
            concatenationExpr272=concatenationExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_concatenationExpr.add(concatenationExpr272.getTree());
            // EsperEPL2Grammar.g:913:3: ( ( ( (r= LT | r= GT | r= LE | r= GE ) ( concatenationExpr | (g= ANY | g= SOME | g= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) ) )* -> {$g == null && $r != null}? ^( ( concatenationExpr )+ ) -> {$g != null && $r != null}? ^( concatenationExpr $g ( expressionList )? ( subSelectGroupExpression )? ) -> ( concatenationExpr )+ ) | (n= NOT_EXPR )? ( (i= IN_SET (l= LPAREN | l= LBRACK ) expression ( (col= COLON ( expression ) ) | ( ( COMMA expression )* ) ) (r= RPAREN | r= RBRACK ) ) -> {$col == null && $n == null}? ^( IN_SET concatenationExpr $l ( expression )+ $r) -> {$col == null && $n != null}? ^( NOT_IN_SET concatenationExpr $l ( expression )+ $r) -> {$col != null && $n == null}? ^( IN_RANGE concatenationExpr $l ( expression )+ $r) -> ^( NOT_IN_RANGE concatenationExpr $l ( expression )+ $r) | IN_SET inSubSelectQuery -> {$n == null}? ^( IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) -> ^( NOT_IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) | BETWEEN betweenList -> {$n == null}? ^( BETWEEN concatenationExpr betweenList ) -> ^( NOT_BETWEEN concatenationExpr betweenList ) | LIKE concatenationExpr ( ESCAPE stringconstant )? -> {$n == null}? ^( LIKE ( concatenationExpr )* ( stringconstant )? ) -> ^( NOT_LIKE ( concatenationExpr )* ( stringconstant )? ) | REGEXP concatenationExpr -> {$n == null}? ^( REGEXP ( concatenationExpr )+ ) -> ^( NOT_REGEXP ( concatenationExpr )+ ) ) )
            int alt123=2;
            int LA123_0 = input.LA(1);

            if ( (LA123_0==EOF||(LA123_0>=OR_EXPR && LA123_0<=AND_EXPR)||(LA123_0>=WHERE && LA123_0<=AS)||(LA123_0>=ELSE && LA123_0<=FROM)||LA123_0==IS||(LA123_0>=GROUP && LA123_0<=HAVING)||LA123_0==OUTPUT||LA123_0==INSERT||(LA123_0>=ORDER && LA123_0<=DESC)||(LA123_0>=TIMEPERIOD_SEC && LA123_0<=TIMEPERIOD_SECONDS)||LA123_0==ROW_LIMIT_EXPR||LA123_0==COMMA||LA123_0==EQUALS||LA123_0==RPAREN||(LA123_0>=RBRACK && LA123_0<=COLON)||(LA123_0>=BAND && LA123_0<=GE)||LA123_0==RCURLY) ) {
                alt123=1;
            }
            else if ( ((LA123_0>=IN_SET && LA123_0<=REGEXP)||LA123_0==NOT_EXPR) ) {
                alt123=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 123, 0, input);

                throw nvae;
            }
            switch (alt123) {
                case 1 :
                    // EsperEPL2Grammar.g:914:4: ( ( (r= LT | r= GT | r= LE | r= GE ) ( concatenationExpr | (g= ANY | g= SOME | g= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) ) )* -> {$g == null && $r != null}? ^( ( concatenationExpr )+ ) -> {$g != null && $r != null}? ^( concatenationExpr $g ( expressionList )? ( subSelectGroupExpression )? ) -> ( concatenationExpr )+ )
                    {
                    // EsperEPL2Grammar.g:914:4: ( ( (r= LT | r= GT | r= LE | r= GE ) ( concatenationExpr | (g= ANY | g= SOME | g= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) ) )* -> {$g == null && $r != null}? ^( ( concatenationExpr )+ ) -> {$g != null && $r != null}? ^( concatenationExpr $g ( expressionList )? ( subSelectGroupExpression )? ) -> ( concatenationExpr )+ )
                    // EsperEPL2Grammar.g:915:6: ( (r= LT | r= GT | r= LE | r= GE ) ( concatenationExpr | (g= ANY | g= SOME | g= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) ) )*
                    {
                    // EsperEPL2Grammar.g:915:6: ( (r= LT | r= GT | r= LE | r= GE ) ( concatenationExpr | (g= ANY | g= SOME | g= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) ) )*
                    loop115:
                    do {
                        int alt115=2;
                        int LA115_0 = input.LA(1);

                        if ( ((LA115_0>=LT && LA115_0<=GE)) ) {
                            alt115=1;
                        }


                        switch (alt115) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:916:8: (r= LT | r= GT | r= LE | r= GE ) ( concatenationExpr | (g= ANY | g= SOME | g= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) )
                    	    {
                    	    // EsperEPL2Grammar.g:916:8: (r= LT | r= GT | r= LE | r= GE )
                    	    int alt110=4;
                    	    switch ( input.LA(1) ) {
                    	    case LT:
                    	        {
                    	        alt110=1;
                    	        }
                    	        break;
                    	    case GT:
                    	        {
                    	        alt110=2;
                    	        }
                    	        break;
                    	    case LE:
                    	        {
                    	        alt110=3;
                    	        }
                    	        break;
                    	    case GE:
                    	        {
                    	        alt110=4;
                    	        }
                    	        break;
                    	    default:
                    	        if (state.backtracking>0) {state.failed=true; return retval;}
                    	        NoViableAltException nvae =
                    	            new NoViableAltException("", 110, 0, input);

                    	        throw nvae;
                    	    }

                    	    switch (alt110) {
                    	        case 1 :
                    	            // EsperEPL2Grammar.g:916:9: r= LT
                    	            {
                    	            r=(Token)match(input,LT,FOLLOW_LT_in_evalRelationalExpression4998); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_LT.add(r);


                    	            }
                    	            break;
                    	        case 2 :
                    	            // EsperEPL2Grammar.g:916:14: r= GT
                    	            {
                    	            r=(Token)match(input,GT,FOLLOW_GT_in_evalRelationalExpression5002); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_GT.add(r);


                    	            }
                    	            break;
                    	        case 3 :
                    	            // EsperEPL2Grammar.g:916:19: r= LE
                    	            {
                    	            r=(Token)match(input,LE,FOLLOW_LE_in_evalRelationalExpression5006); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_LE.add(r);


                    	            }
                    	            break;
                    	        case 4 :
                    	            // EsperEPL2Grammar.g:916:24: r= GE
                    	            {
                    	            r=(Token)match(input,GE,FOLLOW_GE_in_evalRelationalExpression5010); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_GE.add(r);


                    	            }
                    	            break;

                    	    }

                    	    // EsperEPL2Grammar.g:917:9: ( concatenationExpr | (g= ANY | g= SOME | g= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) )
                    	    int alt114=2;
                    	    int LA114_0 = input.LA(1);

                    	    if ( (LA114_0==WINDOW||LA114_0==ESCAPE||LA114_0==EVERY_EXPR||(LA114_0>=SUM && LA114_0<=COUNT)||LA114_0==OUTER||(LA114_0>=JOIN && LA114_0<=FULL)||(LA114_0>=EVENTS && LA114_0<=LAST)||(LA114_0>=UNIDIRECTIONAL && LA114_0<=CURRENT_TIMESTAMP)||LA114_0==SNAPSHOT||(LA114_0>=VARIABLE && LA114_0<=AT)||(LA114_0>=BOOLEAN_TRUE && LA114_0<=VALUE_NULL)||LA114_0==NUM_DOUBLE||LA114_0==IDENT||LA114_0==LPAREN||(LA114_0>=STRING_LITERAL && LA114_0<=QUOTED_STRING_LITERAL)||(LA114_0>=PLUS && LA114_0<=MINUS)||LA114_0==LCURLY||LA114_0==NUM_INT||LA114_0==QUESTION||(LA114_0>=TICKED_STRING_LITERAL && LA114_0<=NUM_FLOAT)) ) {
                    	        alt114=1;
                    	    }
                    	    else if ( ((LA114_0>=ALL && LA114_0<=SOME)) ) {
                    	        alt114=2;
                    	    }
                    	    else {
                    	        if (state.backtracking>0) {state.failed=true; return retval;}
                    	        NoViableAltException nvae =
                    	            new NoViableAltException("", 114, 0, input);

                    	        throw nvae;
                    	    }
                    	    switch (alt114) {
                    	        case 1 :
                    	            // EsperEPL2Grammar.g:918:11: concatenationExpr
                    	            {
                    	            pushFollow(FOLLOW_concatenationExpr_in_evalRelationalExpression5034);
                    	            concatenationExpr273=concatenationExpr();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) stream_concatenationExpr.add(concatenationExpr273.getTree());

                    	            }
                    	            break;
                    	        case 2 :
                    	            // EsperEPL2Grammar.g:919:13: (g= ANY | g= SOME | g= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression )
                    	            {
                    	            // EsperEPL2Grammar.g:919:13: (g= ANY | g= SOME | g= ALL )
                    	            int alt111=3;
                    	            switch ( input.LA(1) ) {
                    	            case ANY:
                    	                {
                    	                alt111=1;
                    	                }
                    	                break;
                    	            case SOME:
                    	                {
                    	                alt111=2;
                    	                }
                    	                break;
                    	            case ALL:
                    	                {
                    	                alt111=3;
                    	                }
                    	                break;
                    	            default:
                    	                if (state.backtracking>0) {state.failed=true; return retval;}
                    	                NoViableAltException nvae =
                    	                    new NoViableAltException("", 111, 0, input);

                    	                throw nvae;
                    	            }

                    	            switch (alt111) {
                    	                case 1 :
                    	                    // EsperEPL2Grammar.g:919:14: g= ANY
                    	                    {
                    	                    g=(Token)match(input,ANY,FOLLOW_ANY_in_evalRelationalExpression5051); if (state.failed) return retval; 
                    	                    if ( state.backtracking==0 ) stream_ANY.add(g);


                    	                    }
                    	                    break;
                    	                case 2 :
                    	                    // EsperEPL2Grammar.g:919:22: g= SOME
                    	                    {
                    	                    g=(Token)match(input,SOME,FOLLOW_SOME_in_evalRelationalExpression5057); if (state.failed) return retval; 
                    	                    if ( state.backtracking==0 ) stream_SOME.add(g);


                    	                    }
                    	                    break;
                    	                case 3 :
                    	                    // EsperEPL2Grammar.g:919:31: g= ALL
                    	                    {
                    	                    g=(Token)match(input,ALL,FOLLOW_ALL_in_evalRelationalExpression5063); if (state.failed) return retval; 
                    	                    if ( state.backtracking==0 ) stream_ALL.add(g);


                    	                    }
                    	                    break;

                    	            }

                    	            // EsperEPL2Grammar.g:919:38: ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression )
                    	            int alt113=2;
                    	            int LA113_0 = input.LA(1);

                    	            if ( (LA113_0==LPAREN) ) {
                    	                int LA113_1 = input.LA(2);

                    	                if ( (LA113_1==SELECT) ) {
                    	                    alt113=2;
                    	                }
                    	                else if ( (LA113_1==WINDOW||LA113_1==ESCAPE||(LA113_1>=NOT_EXPR && LA113_1<=EVERY_EXPR)||(LA113_1>=SUM && LA113_1<=COUNT)||LA113_1==CASE||LA113_1==OUTER||(LA113_1>=JOIN && LA113_1<=FULL)||(LA113_1>=EVENTS && LA113_1<=LAST)||(LA113_1>=UNIDIRECTIONAL && LA113_1<=CURRENT_TIMESTAMP)||LA113_1==SNAPSHOT||(LA113_1>=VARIABLE && LA113_1<=AT)||(LA113_1>=BOOLEAN_TRUE && LA113_1<=VALUE_NULL)||LA113_1==NUM_DOUBLE||LA113_1==IDENT||(LA113_1>=LPAREN && LA113_1<=RPAREN)||(LA113_1>=STRING_LITERAL && LA113_1<=QUOTED_STRING_LITERAL)||(LA113_1>=PLUS && LA113_1<=MINUS)||LA113_1==LCURLY||LA113_1==NUM_INT||LA113_1==QUESTION||(LA113_1>=TICKED_STRING_LITERAL && LA113_1<=NUM_FLOAT)) ) {
                    	                    alt113=1;
                    	                }
                    	                else {
                    	                    if (state.backtracking>0) {state.failed=true; return retval;}
                    	                    NoViableAltException nvae =
                    	                        new NoViableAltException("", 113, 1, input);

                    	                    throw nvae;
                    	                }
                    	            }
                    	            else {
                    	                if (state.backtracking>0) {state.failed=true; return retval;}
                    	                NoViableAltException nvae =
                    	                    new NoViableAltException("", 113, 0, input);

                    	                throw nvae;
                    	            }
                    	            switch (alt113) {
                    	                case 1 :
                    	                    // EsperEPL2Grammar.g:919:40: ( LPAREN ( expressionList )? RPAREN )
                    	                    {
                    	                    // EsperEPL2Grammar.g:919:40: ( LPAREN ( expressionList )? RPAREN )
                    	                    // EsperEPL2Grammar.g:919:41: LPAREN ( expressionList )? RPAREN
                    	                    {
                    	                    LPAREN274=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_evalRelationalExpression5069); if (state.failed) return retval; 
                    	                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN274);

                    	                    // EsperEPL2Grammar.g:919:48: ( expressionList )?
                    	                    int alt112=2;
                    	                    int LA112_0 = input.LA(1);

                    	                    if ( (LA112_0==WINDOW||LA112_0==ESCAPE||(LA112_0>=NOT_EXPR && LA112_0<=EVERY_EXPR)||(LA112_0>=SUM && LA112_0<=COUNT)||LA112_0==CASE||LA112_0==OUTER||(LA112_0>=JOIN && LA112_0<=FULL)||(LA112_0>=EVENTS && LA112_0<=LAST)||(LA112_0>=UNIDIRECTIONAL && LA112_0<=CURRENT_TIMESTAMP)||LA112_0==SNAPSHOT||(LA112_0>=VARIABLE && LA112_0<=AT)||(LA112_0>=BOOLEAN_TRUE && LA112_0<=VALUE_NULL)||LA112_0==NUM_DOUBLE||LA112_0==IDENT||LA112_0==LPAREN||(LA112_0>=STRING_LITERAL && LA112_0<=QUOTED_STRING_LITERAL)||(LA112_0>=PLUS && LA112_0<=MINUS)||LA112_0==LCURLY||LA112_0==NUM_INT||LA112_0==QUESTION||(LA112_0>=TICKED_STRING_LITERAL && LA112_0<=NUM_FLOAT)) ) {
                    	                        alt112=1;
                    	                    }
                    	                    switch (alt112) {
                    	                        case 1 :
                    	                            // EsperEPL2Grammar.g:919:48: expressionList
                    	                            {
                    	                            pushFollow(FOLLOW_expressionList_in_evalRelationalExpression5071);
                    	                            expressionList275=expressionList();

                    	                            state._fsp--;
                    	                            if (state.failed) return retval;
                    	                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList275.getTree());

                    	                            }
                    	                            break;

                    	                    }

                    	                    RPAREN276=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_evalRelationalExpression5074); if (state.failed) return retval; 
                    	                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN276);


                    	                    }


                    	                    }
                    	                    break;
                    	                case 2 :
                    	                    // EsperEPL2Grammar.g:919:74: subSelectGroupExpression
                    	                    {
                    	                    pushFollow(FOLLOW_subSelectGroupExpression_in_evalRelationalExpression5079);
                    	                    subSelectGroupExpression277=subSelectGroupExpression();

                    	                    state._fsp--;
                    	                    if (state.failed) return retval;
                    	                    if ( state.backtracking==0 ) stream_subSelectGroupExpression.add(subSelectGroupExpression277.getTree());

                    	                    }
                    	                    break;

                    	            }


                    	            }
                    	            break;

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop115;
                        }
                    } while (true);



                    // AST REWRITE
                    // elements: concatenationExpr, expressionList, g, subSelectGroupExpression, concatenationExpr, concatenationExpr
                    // token labels: g
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_g=new RewriteRuleTokenStream(adaptor,"token g",g);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 923:6: -> {$g == null && $r != null}? ^( ( concatenationExpr )+ )
                    if (g == null && r != null) {
                        // EsperEPL2Grammar.g:923:37: ^( ( concatenationExpr )+ )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(r), root_1);

                        if ( !(stream_concatenationExpr.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_concatenationExpr.hasNext() ) {
                            adaptor.addChild(root_1, stream_concatenationExpr.nextTree());

                        }
                        stream_concatenationExpr.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }
                    else // 924:6: -> {$g != null && $r != null}? ^( concatenationExpr $g ( expressionList )? ( subSelectGroupExpression )? )
                    if (g != null && r != null) {
                        // EsperEPL2Grammar.g:924:37: ^( concatenationExpr $g ( expressionList )? ( subSelectGroupExpression )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(r), root_1);

                        adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                        adaptor.addChild(root_1, stream_g.nextNode());
                        // EsperEPL2Grammar.g:924:81: ( expressionList )?
                        if ( stream_expressionList.hasNext() ) {
                            adaptor.addChild(root_1, stream_expressionList.nextTree());

                        }
                        stream_expressionList.reset();
                        // EsperEPL2Grammar.g:924:97: ( subSelectGroupExpression )?
                        if ( stream_subSelectGroupExpression.hasNext() ) {
                            adaptor.addChild(root_1, stream_subSelectGroupExpression.nextTree());

                        }
                        stream_subSelectGroupExpression.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }
                    else // 925:6: -> ( concatenationExpr )+
                    {
                        if ( !(stream_concatenationExpr.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_concatenationExpr.hasNext() ) {
                            adaptor.addChild(root_0, stream_concatenationExpr.nextTree());

                        }
                        stream_concatenationExpr.reset();

                    }

                    retval.tree = root_0;}
                    }


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:927:6: (n= NOT_EXPR )? ( (i= IN_SET (l= LPAREN | l= LBRACK ) expression ( (col= COLON ( expression ) ) | ( ( COMMA expression )* ) ) (r= RPAREN | r= RBRACK ) ) -> {$col == null && $n == null}? ^( IN_SET concatenationExpr $l ( expression )+ $r) -> {$col == null && $n != null}? ^( NOT_IN_SET concatenationExpr $l ( expression )+ $r) -> {$col != null && $n == null}? ^( IN_RANGE concatenationExpr $l ( expression )+ $r) -> ^( NOT_IN_RANGE concatenationExpr $l ( expression )+ $r) | IN_SET inSubSelectQuery -> {$n == null}? ^( IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) -> ^( NOT_IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) | BETWEEN betweenList -> {$n == null}? ^( BETWEEN concatenationExpr betweenList ) -> ^( NOT_BETWEEN concatenationExpr betweenList ) | LIKE concatenationExpr ( ESCAPE stringconstant )? -> {$n == null}? ^( LIKE ( concatenationExpr )* ( stringconstant )? ) -> ^( NOT_LIKE ( concatenationExpr )* ( stringconstant )? ) | REGEXP concatenationExpr -> {$n == null}? ^( REGEXP ( concatenationExpr )+ ) -> ^( NOT_REGEXP ( concatenationExpr )+ ) )
                    {
                    // EsperEPL2Grammar.g:927:6: (n= NOT_EXPR )?
                    int alt116=2;
                    int LA116_0 = input.LA(1);

                    if ( (LA116_0==NOT_EXPR) ) {
                        alt116=1;
                    }
                    switch (alt116) {
                        case 1 :
                            // EsperEPL2Grammar.g:927:7: n= NOT_EXPR
                            {
                            n=(Token)match(input,NOT_EXPR,FOLLOW_NOT_EXPR_in_evalRelationalExpression5175); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NOT_EXPR.add(n);


                            }
                            break;

                    }

                    // EsperEPL2Grammar.g:928:4: ( (i= IN_SET (l= LPAREN | l= LBRACK ) expression ( (col= COLON ( expression ) ) | ( ( COMMA expression )* ) ) (r= RPAREN | r= RBRACK ) ) -> {$col == null && $n == null}? ^( IN_SET concatenationExpr $l ( expression )+ $r) -> {$col == null && $n != null}? ^( NOT_IN_SET concatenationExpr $l ( expression )+ $r) -> {$col != null && $n == null}? ^( IN_RANGE concatenationExpr $l ( expression )+ $r) -> ^( NOT_IN_RANGE concatenationExpr $l ( expression )+ $r) | IN_SET inSubSelectQuery -> {$n == null}? ^( IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) -> ^( NOT_IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) | BETWEEN betweenList -> {$n == null}? ^( BETWEEN concatenationExpr betweenList ) -> ^( NOT_BETWEEN concatenationExpr betweenList ) | LIKE concatenationExpr ( ESCAPE stringconstant )? -> {$n == null}? ^( LIKE ( concatenationExpr )* ( stringconstant )? ) -> ^( NOT_LIKE ( concatenationExpr )* ( stringconstant )? ) | REGEXP concatenationExpr -> {$n == null}? ^( REGEXP ( concatenationExpr )+ ) -> ^( NOT_REGEXP ( concatenationExpr )+ ) )
                    int alt122=5;
                    switch ( input.LA(1) ) {
                    case IN_SET:
                        {
                        int LA122_1 = input.LA(2);

                        if ( (LA122_1==LPAREN) ) {
                            int LA122_5 = input.LA(3);

                            if ( (LA122_5==SELECT) ) {
                                alt122=2;
                            }
                            else if ( (LA122_5==WINDOW||LA122_5==ESCAPE||(LA122_5>=NOT_EXPR && LA122_5<=EVERY_EXPR)||(LA122_5>=SUM && LA122_5<=COUNT)||LA122_5==CASE||LA122_5==OUTER||(LA122_5>=JOIN && LA122_5<=FULL)||(LA122_5>=EVENTS && LA122_5<=LAST)||(LA122_5>=UNIDIRECTIONAL && LA122_5<=CURRENT_TIMESTAMP)||LA122_5==SNAPSHOT||(LA122_5>=VARIABLE && LA122_5<=AT)||(LA122_5>=BOOLEAN_TRUE && LA122_5<=VALUE_NULL)||LA122_5==NUM_DOUBLE||LA122_5==IDENT||LA122_5==LPAREN||(LA122_5>=STRING_LITERAL && LA122_5<=QUOTED_STRING_LITERAL)||(LA122_5>=PLUS && LA122_5<=MINUS)||LA122_5==LCURLY||LA122_5==NUM_INT||LA122_5==QUESTION||(LA122_5>=TICKED_STRING_LITERAL && LA122_5<=NUM_FLOAT)) ) {
                                alt122=1;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 122, 5, input);

                                throw nvae;
                            }
                        }
                        else if ( (LA122_1==LBRACK) ) {
                            alt122=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 122, 1, input);

                            throw nvae;
                        }
                        }
                        break;
                    case BETWEEN:
                        {
                        alt122=3;
                        }
                        break;
                    case LIKE:
                        {
                        alt122=4;
                        }
                        break;
                    case REGEXP:
                        {
                        alt122=5;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 122, 0, input);

                        throw nvae;
                    }

                    switch (alt122) {
                        case 1 :
                            // EsperEPL2Grammar.g:931:5: (i= IN_SET (l= LPAREN | l= LBRACK ) expression ( (col= COLON ( expression ) ) | ( ( COMMA expression )* ) ) (r= RPAREN | r= RBRACK ) )
                            {
                            // EsperEPL2Grammar.g:931:5: (i= IN_SET (l= LPAREN | l= LBRACK ) expression ( (col= COLON ( expression ) ) | ( ( COMMA expression )* ) ) (r= RPAREN | r= RBRACK ) )
                            // EsperEPL2Grammar.g:931:6: i= IN_SET (l= LPAREN | l= LBRACK ) expression ( (col= COLON ( expression ) ) | ( ( COMMA expression )* ) ) (r= RPAREN | r= RBRACK )
                            {
                            i=(Token)match(input,IN_SET,FOLLOW_IN_SET_in_evalRelationalExpression5202); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IN_SET.add(i);

                            // EsperEPL2Grammar.g:932:8: (l= LPAREN | l= LBRACK )
                            int alt117=2;
                            int LA117_0 = input.LA(1);

                            if ( (LA117_0==LPAREN) ) {
                                alt117=1;
                            }
                            else if ( (LA117_0==LBRACK) ) {
                                alt117=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 117, 0, input);

                                throw nvae;
                            }
                            switch (alt117) {
                                case 1 :
                                    // EsperEPL2Grammar.g:932:9: l= LPAREN
                                    {
                                    l=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_evalRelationalExpression5214); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_LPAREN.add(l);


                                    }
                                    break;
                                case 2 :
                                    // EsperEPL2Grammar.g:932:20: l= LBRACK
                                    {
                                    l=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_evalRelationalExpression5220); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_LBRACK.add(l);


                                    }
                                    break;

                            }

                            pushFollow(FOLLOW_expression_in_evalRelationalExpression5223);
                            expression278=expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(expression278.getTree());
                            // EsperEPL2Grammar.g:933:7: ( (col= COLON ( expression ) ) | ( ( COMMA expression )* ) )
                            int alt119=2;
                            int LA119_0 = input.LA(1);

                            if ( (LA119_0==COLON) ) {
                                alt119=1;
                            }
                            else if ( (LA119_0==COMMA||LA119_0==RPAREN||LA119_0==RBRACK) ) {
                                alt119=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 119, 0, input);

                                throw nvae;
                            }
                            switch (alt119) {
                                case 1 :
                                    // EsperEPL2Grammar.g:934:8: (col= COLON ( expression ) )
                                    {
                                    // EsperEPL2Grammar.g:934:8: (col= COLON ( expression ) )
                                    // EsperEPL2Grammar.g:934:10: col= COLON ( expression )
                                    {
                                    col=(Token)match(input,COLON,FOLLOW_COLON_in_evalRelationalExpression5245); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_COLON.add(col);

                                    // EsperEPL2Grammar.g:934:20: ( expression )
                                    // EsperEPL2Grammar.g:934:21: expression
                                    {
                                    pushFollow(FOLLOW_expression_in_evalRelationalExpression5248);
                                    expression279=expression();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_expression.add(expression279.getTree());

                                    }


                                    }


                                    }
                                    break;
                                case 2 :
                                    // EsperEPL2Grammar.g:936:8: ( ( COMMA expression )* )
                                    {
                                    // EsperEPL2Grammar.g:936:8: ( ( COMMA expression )* )
                                    // EsperEPL2Grammar.g:936:10: ( COMMA expression )*
                                    {
                                    // EsperEPL2Grammar.g:936:10: ( COMMA expression )*
                                    loop118:
                                    do {
                                        int alt118=2;
                                        int LA118_0 = input.LA(1);

                                        if ( (LA118_0==COMMA) ) {
                                            alt118=1;
                                        }


                                        switch (alt118) {
                                    	case 1 :
                                    	    // EsperEPL2Grammar.g:936:11: COMMA expression
                                    	    {
                                    	    COMMA280=(Token)match(input,COMMA,FOLLOW_COMMA_in_evalRelationalExpression5274); if (state.failed) return retval; 
                                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA280);

                                    	    pushFollow(FOLLOW_expression_in_evalRelationalExpression5276);
                                    	    expression281=expression();

                                    	    state._fsp--;
                                    	    if (state.failed) return retval;
                                    	    if ( state.backtracking==0 ) stream_expression.add(expression281.getTree());

                                    	    }
                                    	    break;

                                    	default :
                                    	    break loop118;
                                        }
                                    } while (true);


                                    }


                                    }
                                    break;

                            }

                            // EsperEPL2Grammar.g:938:8: (r= RPAREN | r= RBRACK )
                            int alt120=2;
                            int LA120_0 = input.LA(1);

                            if ( (LA120_0==RPAREN) ) {
                                alt120=1;
                            }
                            else if ( (LA120_0==RBRACK) ) {
                                alt120=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 120, 0, input);

                                throw nvae;
                            }
                            switch (alt120) {
                                case 1 :
                                    // EsperEPL2Grammar.g:938:9: r= RPAREN
                                    {
                                    r=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_evalRelationalExpression5302); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_RPAREN.add(r);


                                    }
                                    break;
                                case 2 :
                                    // EsperEPL2Grammar.g:938:20: r= RBRACK
                                    {
                                    r=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_evalRelationalExpression5308); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_RBRACK.add(r);


                                    }
                                    break;

                            }


                            }



                            // AST REWRITE
                            // elements: expression, expression, r, r, r, r, l, l, concatenationExpr, IN_SET, concatenationExpr, l, l, expression, concatenationExpr, expression, concatenationExpr
                            // token labels: r, l
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleTokenStream stream_r=new RewriteRuleTokenStream(adaptor,"token r",r);
                            RewriteRuleTokenStream stream_l=new RewriteRuleTokenStream(adaptor,"token l",l);
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 940:9: -> {$col == null && $n == null}? ^( IN_SET concatenationExpr $l ( expression )+ $r)
                            if (col == null && n == null) {
                                // EsperEPL2Grammar.g:940:42: ^( IN_SET concatenationExpr $l ( expression )+ $r)
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_IN_SET.nextNode(), root_1);

                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_l.nextNode());
                                if ( !(stream_expression.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_expression.hasNext() ) {
                                    adaptor.addChild(root_1, stream_expression.nextTree());

                                }
                                stream_expression.reset();
                                adaptor.addChild(root_1, stream_r.nextNode());

                                adaptor.addChild(root_0, root_1);
                                }

                            }
                            else // 941:9: -> {$col == null && $n != null}? ^( NOT_IN_SET concatenationExpr $l ( expression )+ $r)
                            if (col == null && n != null) {
                                // EsperEPL2Grammar.g:941:42: ^( NOT_IN_SET concatenationExpr $l ( expression )+ $r)
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_IN_SET, "NOT_IN_SET"), root_1);

                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_l.nextNode());
                                if ( !(stream_expression.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_expression.hasNext() ) {
                                    adaptor.addChild(root_1, stream_expression.nextTree());

                                }
                                stream_expression.reset();
                                adaptor.addChild(root_1, stream_r.nextNode());

                                adaptor.addChild(root_0, root_1);
                                }

                            }
                            else // 942:9: -> {$col != null && $n == null}? ^( IN_RANGE concatenationExpr $l ( expression )+ $r)
                            if (col != null && n == null) {
                                // EsperEPL2Grammar.g:942:42: ^( IN_RANGE concatenationExpr $l ( expression )+ $r)
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IN_RANGE, "IN_RANGE"), root_1);

                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_l.nextNode());
                                if ( !(stream_expression.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_expression.hasNext() ) {
                                    adaptor.addChild(root_1, stream_expression.nextTree());

                                }
                                stream_expression.reset();
                                adaptor.addChild(root_1, stream_r.nextNode());

                                adaptor.addChild(root_0, root_1);
                                }

                            }
                            else // 943:9: -> ^( NOT_IN_RANGE concatenationExpr $l ( expression )+ $r)
                            {
                                // EsperEPL2Grammar.g:943:12: ^( NOT_IN_RANGE concatenationExpr $l ( expression )+ $r)
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_IN_RANGE, "NOT_IN_RANGE"), root_1);

                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_l.nextNode());
                                if ( !(stream_expression.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_expression.hasNext() ) {
                                    adaptor.addChild(root_1, stream_expression.nextTree());

                                }
                                stream_expression.reset();
                                adaptor.addChild(root_1, stream_r.nextNode());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:944:7: IN_SET inSubSelectQuery
                            {
                            IN_SET282=(Token)match(input,IN_SET,FOLLOW_IN_SET_in_evalRelationalExpression5431); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IN_SET.add(IN_SET282);

                            pushFollow(FOLLOW_inSubSelectQuery_in_evalRelationalExpression5433);
                            inSubSelectQuery283=inSubSelectQuery();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_inSubSelectQuery.add(inSubSelectQuery283.getTree());


                            // AST REWRITE
                            // elements: concatenationExpr, concatenationExpr, inSubSelectQuery, inSubSelectQuery
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 945:9: -> {$n == null}? ^( IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery )
                            if (n == null) {
                                // EsperEPL2Grammar.g:945:26: ^( IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IN_SUBSELECT_EXPR, "IN_SUBSELECT_EXPR"), root_1);

                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_inSubSelectQuery.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }
                            else // 946:9: -> ^( NOT_IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery )
                            {
                                // EsperEPL2Grammar.g:946:12: ^( NOT_IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_IN_SUBSELECT_EXPR, "NOT_IN_SUBSELECT_EXPR"), root_1);

                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_inSubSelectQuery.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 3 :
                            // EsperEPL2Grammar.g:947:7: BETWEEN betweenList
                            {
                            BETWEEN284=(Token)match(input,BETWEEN,FOLLOW_BETWEEN_in_evalRelationalExpression5479); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_BETWEEN.add(BETWEEN284);

                            pushFollow(FOLLOW_betweenList_in_evalRelationalExpression5481);
                            betweenList285=betweenList();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_betweenList.add(betweenList285.getTree());


                            // AST REWRITE
                            // elements: concatenationExpr, BETWEEN, betweenList, betweenList, concatenationExpr
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 948:9: -> {$n == null}? ^( BETWEEN concatenationExpr betweenList )
                            if (n == null) {
                                // EsperEPL2Grammar.g:948:26: ^( BETWEEN concatenationExpr betweenList )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_BETWEEN.nextNode(), root_1);

                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_betweenList.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }
                            else // 949:9: -> ^( NOT_BETWEEN concatenationExpr betweenList )
                            {
                                // EsperEPL2Grammar.g:949:12: ^( NOT_BETWEEN concatenationExpr betweenList )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_BETWEEN, "NOT_BETWEEN"), root_1);

                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_betweenList.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 4 :
                            // EsperEPL2Grammar.g:950:7: LIKE concatenationExpr ( ESCAPE stringconstant )?
                            {
                            LIKE286=(Token)match(input,LIKE,FOLLOW_LIKE_in_evalRelationalExpression5531); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_LIKE.add(LIKE286);

                            pushFollow(FOLLOW_concatenationExpr_in_evalRelationalExpression5533);
                            concatenationExpr287=concatenationExpr();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_concatenationExpr.add(concatenationExpr287.getTree());
                            // EsperEPL2Grammar.g:950:30: ( ESCAPE stringconstant )?
                            int alt121=2;
                            int LA121_0 = input.LA(1);

                            if ( (LA121_0==ESCAPE) ) {
                                alt121=1;
                            }
                            switch (alt121) {
                                case 1 :
                                    // EsperEPL2Grammar.g:950:31: ESCAPE stringconstant
                                    {
                                    ESCAPE288=(Token)match(input,ESCAPE,FOLLOW_ESCAPE_in_evalRelationalExpression5536); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_ESCAPE.add(ESCAPE288);

                                    pushFollow(FOLLOW_stringconstant_in_evalRelationalExpression5538);
                                    stringconstant289=stringconstant();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_stringconstant.add(stringconstant289.getTree());

                                    }
                                    break;

                            }



                            // AST REWRITE
                            // elements: stringconstant, LIKE, concatenationExpr, stringconstant, concatenationExpr
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 951:9: -> {$n == null}? ^( LIKE ( concatenationExpr )* ( stringconstant )? )
                            if (n == null) {
                                // EsperEPL2Grammar.g:951:26: ^( LIKE ( concatenationExpr )* ( stringconstant )? )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_LIKE.nextNode(), root_1);

                                // EsperEPL2Grammar.g:951:33: ( concatenationExpr )*
                                while ( stream_concatenationExpr.hasNext() ) {
                                    adaptor.addChild(root_1, stream_concatenationExpr.nextTree());

                                }
                                stream_concatenationExpr.reset();
                                // EsperEPL2Grammar.g:951:52: ( stringconstant )?
                                if ( stream_stringconstant.hasNext() ) {
                                    adaptor.addChild(root_1, stream_stringconstant.nextTree());

                                }
                                stream_stringconstant.reset();

                                adaptor.addChild(root_0, root_1);
                                }

                            }
                            else // 952:9: -> ^( NOT_LIKE ( concatenationExpr )* ( stringconstant )? )
                            {
                                // EsperEPL2Grammar.g:952:12: ^( NOT_LIKE ( concatenationExpr )* ( stringconstant )? )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_LIKE, "NOT_LIKE"), root_1);

                                // EsperEPL2Grammar.g:952:23: ( concatenationExpr )*
                                while ( stream_concatenationExpr.hasNext() ) {
                                    adaptor.addChild(root_1, stream_concatenationExpr.nextTree());

                                }
                                stream_concatenationExpr.reset();
                                // EsperEPL2Grammar.g:952:42: ( stringconstant )?
                                if ( stream_stringconstant.hasNext() ) {
                                    adaptor.addChild(root_1, stream_stringconstant.nextTree());

                                }
                                stream_stringconstant.reset();

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 5 :
                            // EsperEPL2Grammar.g:953:7: REGEXP concatenationExpr
                            {
                            REGEXP290=(Token)match(input,REGEXP,FOLLOW_REGEXP_in_evalRelationalExpression5590); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_REGEXP.add(REGEXP290);

                            pushFollow(FOLLOW_concatenationExpr_in_evalRelationalExpression5592);
                            concatenationExpr291=concatenationExpr();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_concatenationExpr.add(concatenationExpr291.getTree());


                            // AST REWRITE
                            // elements: concatenationExpr, REGEXP, concatenationExpr
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 954:9: -> {$n == null}? ^( REGEXP ( concatenationExpr )+ )
                            if (n == null) {
                                // EsperEPL2Grammar.g:954:26: ^( REGEXP ( concatenationExpr )+ )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_REGEXP.nextNode(), root_1);

                                if ( !(stream_concatenationExpr.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_concatenationExpr.hasNext() ) {
                                    adaptor.addChild(root_1, stream_concatenationExpr.nextTree());

                                }
                                stream_concatenationExpr.reset();

                                adaptor.addChild(root_0, root_1);
                                }

                            }
                            else // 955:9: -> ^( NOT_REGEXP ( concatenationExpr )+ )
                            {
                                // EsperEPL2Grammar.g:955:12: ^( NOT_REGEXP ( concatenationExpr )+ )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_REGEXP, "NOT_REGEXP"), root_1);

                                if ( !(stream_concatenationExpr.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_concatenationExpr.hasNext() ) {
                                    adaptor.addChild(root_1, stream_concatenationExpr.nextTree());

                                }
                                stream_concatenationExpr.reset();

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "evalRelationalExpression"

    public static class inSubSelectQuery_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inSubSelectQuery"
    // EsperEPL2Grammar.g:960:1: inSubSelectQuery : subQueryExpr -> ^( IN_SUBSELECT_QUERY_EXPR subQueryExpr ) ;
    public final EsperEPL2GrammarParser.inSubSelectQuery_return inSubSelectQuery() throws RecognitionException {
        EsperEPL2GrammarParser.inSubSelectQuery_return retval = new EsperEPL2GrammarParser.inSubSelectQuery_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr292 = null;


        RewriteRuleSubtreeStream stream_subQueryExpr=new RewriteRuleSubtreeStream(adaptor,"rule subQueryExpr");
        try {
            // EsperEPL2Grammar.g:961:2: ( subQueryExpr -> ^( IN_SUBSELECT_QUERY_EXPR subQueryExpr ) )
            // EsperEPL2Grammar.g:961:4: subQueryExpr
            {
            pushFollow(FOLLOW_subQueryExpr_in_inSubSelectQuery5654);
            subQueryExpr292=subQueryExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_subQueryExpr.add(subQueryExpr292.getTree());


            // AST REWRITE
            // elements: subQueryExpr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 962:4: -> ^( IN_SUBSELECT_QUERY_EXPR subQueryExpr )
            {
                // EsperEPL2Grammar.g:962:7: ^( IN_SUBSELECT_QUERY_EXPR subQueryExpr )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IN_SUBSELECT_QUERY_EXPR, "IN_SUBSELECT_QUERY_EXPR"), root_1);

                adaptor.addChild(root_1, stream_subQueryExpr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "inSubSelectQuery"

    public static class concatenationExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "concatenationExpr"
    // EsperEPL2Grammar.g:965:1: concatenationExpr : additiveExpression (c= LOR additiveExpression ( LOR additiveExpression )* )? -> {$c != null}? ^( CONCAT ( additiveExpression )+ ) -> additiveExpression ;
    public final EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr() throws RecognitionException {
        EsperEPL2GrammarParser.concatenationExpr_return retval = new EsperEPL2GrammarParser.concatenationExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token c=null;
        Token LOR295=null;
        EsperEPL2GrammarParser.additiveExpression_return additiveExpression293 = null;

        EsperEPL2GrammarParser.additiveExpression_return additiveExpression294 = null;

        EsperEPL2GrammarParser.additiveExpression_return additiveExpression296 = null;


        CommonTree c_tree=null;
        CommonTree LOR295_tree=null;
        RewriteRuleTokenStream stream_LOR=new RewriteRuleTokenStream(adaptor,"token LOR");
        RewriteRuleSubtreeStream stream_additiveExpression=new RewriteRuleSubtreeStream(adaptor,"rule additiveExpression");
        try {
            // EsperEPL2Grammar.g:966:2: ( additiveExpression (c= LOR additiveExpression ( LOR additiveExpression )* )? -> {$c != null}? ^( CONCAT ( additiveExpression )+ ) -> additiveExpression )
            // EsperEPL2Grammar.g:966:4: additiveExpression (c= LOR additiveExpression ( LOR additiveExpression )* )?
            {
            pushFollow(FOLLOW_additiveExpression_in_concatenationExpr5679);
            additiveExpression293=additiveExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_additiveExpression.add(additiveExpression293.getTree());
            // EsperEPL2Grammar.g:966:23: (c= LOR additiveExpression ( LOR additiveExpression )* )?
            int alt125=2;
            int LA125_0 = input.LA(1);

            if ( (LA125_0==LOR) ) {
                alt125=1;
            }
            switch (alt125) {
                case 1 :
                    // EsperEPL2Grammar.g:966:25: c= LOR additiveExpression ( LOR additiveExpression )*
                    {
                    c=(Token)match(input,LOR,FOLLOW_LOR_in_concatenationExpr5685); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LOR.add(c);

                    pushFollow(FOLLOW_additiveExpression_in_concatenationExpr5687);
                    additiveExpression294=additiveExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_additiveExpression.add(additiveExpression294.getTree());
                    // EsperEPL2Grammar.g:966:50: ( LOR additiveExpression )*
                    loop124:
                    do {
                        int alt124=2;
                        int LA124_0 = input.LA(1);

                        if ( (LA124_0==LOR) ) {
                            alt124=1;
                        }


                        switch (alt124) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:966:52: LOR additiveExpression
                    	    {
                    	    LOR295=(Token)match(input,LOR,FOLLOW_LOR_in_concatenationExpr5691); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_LOR.add(LOR295);

                    	    pushFollow(FOLLOW_additiveExpression_in_concatenationExpr5693);
                    	    additiveExpression296=additiveExpression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_additiveExpression.add(additiveExpression296.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop124;
                        }
                    } while (true);


                    }
                    break;

            }



            // AST REWRITE
            // elements: additiveExpression, additiveExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 967:6: -> {$c != null}? ^( CONCAT ( additiveExpression )+ )
            if (c != null) {
                // EsperEPL2Grammar.g:967:23: ^( CONCAT ( additiveExpression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CONCAT, "CONCAT"), root_1);

                if ( !(stream_additiveExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_additiveExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_additiveExpression.nextTree());

                }
                stream_additiveExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 968:6: -> additiveExpression
            {
                adaptor.addChild(root_0, stream_additiveExpression.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "concatenationExpr"

    public static class additiveExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "additiveExpression"
    // EsperEPL2Grammar.g:971:1: additiveExpression : multiplyExpression ( ( PLUS | MINUS ) multiplyExpression )* ;
    public final EsperEPL2GrammarParser.additiveExpression_return additiveExpression() throws RecognitionException {
        EsperEPL2GrammarParser.additiveExpression_return retval = new EsperEPL2GrammarParser.additiveExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token PLUS298=null;
        Token MINUS299=null;
        EsperEPL2GrammarParser.multiplyExpression_return multiplyExpression297 = null;

        EsperEPL2GrammarParser.multiplyExpression_return multiplyExpression300 = null;


        CommonTree PLUS298_tree=null;
        CommonTree MINUS299_tree=null;

        try {
            // EsperEPL2Grammar.g:972:2: ( multiplyExpression ( ( PLUS | MINUS ) multiplyExpression )* )
            // EsperEPL2Grammar.g:972:4: multiplyExpression ( ( PLUS | MINUS ) multiplyExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_multiplyExpression_in_additiveExpression5734);
            multiplyExpression297=multiplyExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, multiplyExpression297.getTree());
            // EsperEPL2Grammar.g:972:23: ( ( PLUS | MINUS ) multiplyExpression )*
            loop127:
            do {
                int alt127=2;
                int LA127_0 = input.LA(1);

                if ( ((LA127_0>=PLUS && LA127_0<=MINUS)) ) {
                    alt127=1;
                }


                switch (alt127) {
            	case 1 :
            	    // EsperEPL2Grammar.g:972:25: ( PLUS | MINUS ) multiplyExpression
            	    {
            	    // EsperEPL2Grammar.g:972:25: ( PLUS | MINUS )
            	    int alt126=2;
            	    int LA126_0 = input.LA(1);

            	    if ( (LA126_0==PLUS) ) {
            	        alt126=1;
            	    }
            	    else if ( (LA126_0==MINUS) ) {
            	        alt126=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 126, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt126) {
            	        case 1 :
            	            // EsperEPL2Grammar.g:972:26: PLUS
            	            {
            	            PLUS298=(Token)match(input,PLUS,FOLLOW_PLUS_in_additiveExpression5739); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            PLUS298_tree = (CommonTree)adaptor.create(PLUS298);
            	            root_0 = (CommonTree)adaptor.becomeRoot(PLUS298_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // EsperEPL2Grammar.g:972:32: MINUS
            	            {
            	            MINUS299=(Token)match(input,MINUS,FOLLOW_MINUS_in_additiveExpression5742); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            MINUS299_tree = (CommonTree)adaptor.create(MINUS299);
            	            root_0 = (CommonTree)adaptor.becomeRoot(MINUS299_tree, root_0);
            	            }

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_multiplyExpression_in_additiveExpression5746);
            	    multiplyExpression300=multiplyExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, multiplyExpression300.getTree());

            	    }
            	    break;

            	default :
            	    break loop127;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "additiveExpression"

    public static class multiplyExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "multiplyExpression"
    // EsperEPL2Grammar.g:975:1: multiplyExpression : unaryExpression ( ( STAR | DIV | MOD ) unaryExpression )* ;
    public final EsperEPL2GrammarParser.multiplyExpression_return multiplyExpression() throws RecognitionException {
        EsperEPL2GrammarParser.multiplyExpression_return retval = new EsperEPL2GrammarParser.multiplyExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token STAR302=null;
        Token DIV303=null;
        Token MOD304=null;
        EsperEPL2GrammarParser.unaryExpression_return unaryExpression301 = null;

        EsperEPL2GrammarParser.unaryExpression_return unaryExpression305 = null;


        CommonTree STAR302_tree=null;
        CommonTree DIV303_tree=null;
        CommonTree MOD304_tree=null;

        try {
            // EsperEPL2Grammar.g:976:2: ( unaryExpression ( ( STAR | DIV | MOD ) unaryExpression )* )
            // EsperEPL2Grammar.g:976:4: unaryExpression ( ( STAR | DIV | MOD ) unaryExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_unaryExpression_in_multiplyExpression5760);
            unaryExpression301=unaryExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpression301.getTree());
            // EsperEPL2Grammar.g:976:20: ( ( STAR | DIV | MOD ) unaryExpression )*
            loop129:
            do {
                int alt129=2;
                int LA129_0 = input.LA(1);

                if ( (LA129_0==STAR||(LA129_0>=DIV && LA129_0<=MOD)) ) {
                    alt129=1;
                }


                switch (alt129) {
            	case 1 :
            	    // EsperEPL2Grammar.g:976:22: ( STAR | DIV | MOD ) unaryExpression
            	    {
            	    // EsperEPL2Grammar.g:976:22: ( STAR | DIV | MOD )
            	    int alt128=3;
            	    switch ( input.LA(1) ) {
            	    case STAR:
            	        {
            	        alt128=1;
            	        }
            	        break;
            	    case DIV:
            	        {
            	        alt128=2;
            	        }
            	        break;
            	    case MOD:
            	        {
            	        alt128=3;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 128, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt128) {
            	        case 1 :
            	            // EsperEPL2Grammar.g:976:23: STAR
            	            {
            	            STAR302=(Token)match(input,STAR,FOLLOW_STAR_in_multiplyExpression5765); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            STAR302_tree = (CommonTree)adaptor.create(STAR302);
            	            root_0 = (CommonTree)adaptor.becomeRoot(STAR302_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // EsperEPL2Grammar.g:976:29: DIV
            	            {
            	            DIV303=(Token)match(input,DIV,FOLLOW_DIV_in_multiplyExpression5768); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            DIV303_tree = (CommonTree)adaptor.create(DIV303);
            	            root_0 = (CommonTree)adaptor.becomeRoot(DIV303_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 3 :
            	            // EsperEPL2Grammar.g:976:34: MOD
            	            {
            	            MOD304=(Token)match(input,MOD,FOLLOW_MOD_in_multiplyExpression5771); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            MOD304_tree = (CommonTree)adaptor.create(MOD304);
            	            root_0 = (CommonTree)adaptor.becomeRoot(MOD304_tree, root_0);
            	            }

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_unaryExpression_in_multiplyExpression5775);
            	    unaryExpression305=unaryExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpression305.getTree());

            	    }
            	    break;

            	default :
            	    break loop129;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "multiplyExpression"

    public static class unaryExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unaryExpression"
    // EsperEPL2Grammar.g:979:1: unaryExpression : ( MINUS eventProperty -> ^( UNARY_MINUS eventProperty ) | constant | substitution | LPAREN expression RPAREN | eventPropertyOrLibFunction | ( builtinFunc )=> ( builtinFunc ) | arrayExpression | subSelectExpression | existsSubSelectExpression );
    public final EsperEPL2GrammarParser.unaryExpression_return unaryExpression() throws RecognitionException {
        EsperEPL2GrammarParser.unaryExpression_return retval = new EsperEPL2GrammarParser.unaryExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token MINUS306=null;
        Token LPAREN310=null;
        Token RPAREN312=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty307 = null;

        EsperEPL2GrammarParser.constant_return constant308 = null;

        EsperEPL2GrammarParser.substitution_return substitution309 = null;

        EsperEPL2GrammarParser.expression_return expression311 = null;

        EsperEPL2GrammarParser.eventPropertyOrLibFunction_return eventPropertyOrLibFunction313 = null;

        EsperEPL2GrammarParser.builtinFunc_return builtinFunc314 = null;

        EsperEPL2GrammarParser.arrayExpression_return arrayExpression315 = null;

        EsperEPL2GrammarParser.subSelectExpression_return subSelectExpression316 = null;

        EsperEPL2GrammarParser.existsSubSelectExpression_return existsSubSelectExpression317 = null;


        CommonTree MINUS306_tree=null;
        CommonTree LPAREN310_tree=null;
        CommonTree RPAREN312_tree=null;
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleSubtreeStream stream_eventProperty=new RewriteRuleSubtreeStream(adaptor,"rule eventProperty");
        try {
            // EsperEPL2Grammar.g:980:2: ( MINUS eventProperty -> ^( UNARY_MINUS eventProperty ) | constant | substitution | LPAREN expression RPAREN | eventPropertyOrLibFunction | ( builtinFunc )=> ( builtinFunc ) | arrayExpression | subSelectExpression | existsSubSelectExpression )
            int alt130=9;
            alt130 = dfa130.predict(input);
            switch (alt130) {
                case 1 :
                    // EsperEPL2Grammar.g:980:4: MINUS eventProperty
                    {
                    MINUS306=(Token)match(input,MINUS,FOLLOW_MINUS_in_unaryExpression5790); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MINUS.add(MINUS306);

                    pushFollow(FOLLOW_eventProperty_in_unaryExpression5792);
                    eventProperty307=eventProperty();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_eventProperty.add(eventProperty307.getTree());


                    // AST REWRITE
                    // elements: eventProperty
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 980:24: -> ^( UNARY_MINUS eventProperty )
                    {
                        // EsperEPL2Grammar.g:980:27: ^( UNARY_MINUS eventProperty )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(UNARY_MINUS, "UNARY_MINUS"), root_1);

                        adaptor.addChild(root_1, stream_eventProperty.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:981:4: constant
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_constant_in_unaryExpression5805);
                    constant308=constant();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constant308.getTree());

                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:982:4: substitution
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_substitution_in_unaryExpression5810);
                    substitution309=substitution();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, substitution309.getTree());

                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:983:4: LPAREN expression RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    LPAREN310=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_unaryExpression5815); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_unaryExpression5818);
                    expression311=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression311.getTree());
                    RPAREN312=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_unaryExpression5820); if (state.failed) return retval;

                    }
                    break;
                case 5 :
                    // EsperEPL2Grammar.g:984:4: eventPropertyOrLibFunction
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_eventPropertyOrLibFunction_in_unaryExpression5826);
                    eventPropertyOrLibFunction313=eventPropertyOrLibFunction();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, eventPropertyOrLibFunction313.getTree());

                    }
                    break;
                case 6 :
                    // EsperEPL2Grammar.g:985:4: ( builtinFunc )=> ( builtinFunc )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // EsperEPL2Grammar.g:985:21: ( builtinFunc )
                    // EsperEPL2Grammar.g:985:22: builtinFunc
                    {
                    pushFollow(FOLLOW_builtinFunc_in_unaryExpression5838);
                    builtinFunc314=builtinFunc();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, builtinFunc314.getTree());

                    }


                    }
                    break;
                case 7 :
                    // EsperEPL2Grammar.g:986:4: arrayExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_arrayExpression_in_unaryExpression5844);
                    arrayExpression315=arrayExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arrayExpression315.getTree());

                    }
                    break;
                case 8 :
                    // EsperEPL2Grammar.g:987:4: subSelectExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_subSelectExpression_in_unaryExpression5849);
                    subSelectExpression316=subSelectExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, subSelectExpression316.getTree());

                    }
                    break;
                case 9 :
                    // EsperEPL2Grammar.g:988:4: existsSubSelectExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_existsSubSelectExpression_in_unaryExpression5854);
                    existsSubSelectExpression317=existsSubSelectExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, existsSubSelectExpression317.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "unaryExpression"

    public static class subSelectExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "subSelectExpression"
    // EsperEPL2Grammar.g:991:1: subSelectExpression : subQueryExpr -> ^( SUBSELECT_EXPR subQueryExpr ) ;
    public final EsperEPL2GrammarParser.subSelectExpression_return subSelectExpression() throws RecognitionException {
        EsperEPL2GrammarParser.subSelectExpression_return retval = new EsperEPL2GrammarParser.subSelectExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr318 = null;


        RewriteRuleSubtreeStream stream_subQueryExpr=new RewriteRuleSubtreeStream(adaptor,"rule subQueryExpr");
        try {
            // EsperEPL2Grammar.g:992:2: ( subQueryExpr -> ^( SUBSELECT_EXPR subQueryExpr ) )
            // EsperEPL2Grammar.g:992:4: subQueryExpr
            {
            pushFollow(FOLLOW_subQueryExpr_in_subSelectExpression5871);
            subQueryExpr318=subQueryExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_subQueryExpr.add(subQueryExpr318.getTree());


            // AST REWRITE
            // elements: subQueryExpr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 993:3: -> ^( SUBSELECT_EXPR subQueryExpr )
            {
                // EsperEPL2Grammar.g:993:6: ^( SUBSELECT_EXPR subQueryExpr )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SUBSELECT_EXPR, "SUBSELECT_EXPR"), root_1);

                adaptor.addChild(root_1, stream_subQueryExpr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "subSelectExpression"

    public static class subSelectGroupExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "subSelectGroupExpression"
    // EsperEPL2Grammar.g:996:1: subSelectGroupExpression : subQueryExpr -> ^( SUBSELECT_GROUP_EXPR subQueryExpr ) ;
    public final EsperEPL2GrammarParser.subSelectGroupExpression_return subSelectGroupExpression() throws RecognitionException {
        EsperEPL2GrammarParser.subSelectGroupExpression_return retval = new EsperEPL2GrammarParser.subSelectGroupExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr319 = null;


        RewriteRuleSubtreeStream stream_subQueryExpr=new RewriteRuleSubtreeStream(adaptor,"rule subQueryExpr");
        try {
            // EsperEPL2Grammar.g:997:2: ( subQueryExpr -> ^( SUBSELECT_GROUP_EXPR subQueryExpr ) )
            // EsperEPL2Grammar.g:997:4: subQueryExpr
            {
            pushFollow(FOLLOW_subQueryExpr_in_subSelectGroupExpression5893);
            subQueryExpr319=subQueryExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_subQueryExpr.add(subQueryExpr319.getTree());


            // AST REWRITE
            // elements: subQueryExpr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 998:3: -> ^( SUBSELECT_GROUP_EXPR subQueryExpr )
            {
                // EsperEPL2Grammar.g:998:6: ^( SUBSELECT_GROUP_EXPR subQueryExpr )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SUBSELECT_GROUP_EXPR, "SUBSELECT_GROUP_EXPR"), root_1);

                adaptor.addChild(root_1, stream_subQueryExpr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "subSelectGroupExpression"

    public static class existsSubSelectExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "existsSubSelectExpression"
    // EsperEPL2Grammar.g:1001:1: existsSubSelectExpression : EXISTS subQueryExpr -> ^( EXISTS_SUBSELECT_EXPR subQueryExpr ) ;
    public final EsperEPL2GrammarParser.existsSubSelectExpression_return existsSubSelectExpression() throws RecognitionException {
        EsperEPL2GrammarParser.existsSubSelectExpression_return retval = new EsperEPL2GrammarParser.existsSubSelectExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token EXISTS320=null;
        EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr321 = null;


        CommonTree EXISTS320_tree=null;
        RewriteRuleTokenStream stream_EXISTS=new RewriteRuleTokenStream(adaptor,"token EXISTS");
        RewriteRuleSubtreeStream stream_subQueryExpr=new RewriteRuleSubtreeStream(adaptor,"rule subQueryExpr");
        try {
            // EsperEPL2Grammar.g:1002:2: ( EXISTS subQueryExpr -> ^( EXISTS_SUBSELECT_EXPR subQueryExpr ) )
            // EsperEPL2Grammar.g:1002:4: EXISTS subQueryExpr
            {
            EXISTS320=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_existsSubSelectExpression5915); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EXISTS.add(EXISTS320);

            pushFollow(FOLLOW_subQueryExpr_in_existsSubSelectExpression5917);
            subQueryExpr321=subQueryExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_subQueryExpr.add(subQueryExpr321.getTree());


            // AST REWRITE
            // elements: subQueryExpr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1003:3: -> ^( EXISTS_SUBSELECT_EXPR subQueryExpr )
            {
                // EsperEPL2Grammar.g:1003:6: ^( EXISTS_SUBSELECT_EXPR subQueryExpr )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EXISTS_SUBSELECT_EXPR, "EXISTS_SUBSELECT_EXPR"), root_1);

                adaptor.addChild(root_1, stream_subQueryExpr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "existsSubSelectExpression"

    public static class subQueryExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "subQueryExpr"
    // EsperEPL2Grammar.g:1006:1: subQueryExpr : LPAREN SELECT selectionListElement FROM subSelectFilterExpr ( WHERE whereClause )? RPAREN ;
    public final EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr() throws RecognitionException {
        EsperEPL2GrammarParser.subQueryExpr_return retval = new EsperEPL2GrammarParser.subQueryExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LPAREN322=null;
        Token SELECT323=null;
        Token FROM325=null;
        Token WHERE327=null;
        Token RPAREN329=null;
        EsperEPL2GrammarParser.selectionListElement_return selectionListElement324 = null;

        EsperEPL2GrammarParser.subSelectFilterExpr_return subSelectFilterExpr326 = null;

        EsperEPL2GrammarParser.whereClause_return whereClause328 = null;


        CommonTree LPAREN322_tree=null;
        CommonTree SELECT323_tree=null;
        CommonTree FROM325_tree=null;
        CommonTree WHERE327_tree=null;
        CommonTree RPAREN329_tree=null;

         paraphrases.push("subquery"); 
        try {
            // EsperEPL2Grammar.g:1009:2: ( LPAREN SELECT selectionListElement FROM subSelectFilterExpr ( WHERE whereClause )? RPAREN )
            // EsperEPL2Grammar.g:1009:4: LPAREN SELECT selectionListElement FROM subSelectFilterExpr ( WHERE whereClause )? RPAREN
            {
            root_0 = (CommonTree)adaptor.nil();

            LPAREN322=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_subQueryExpr5950); if (state.failed) return retval;
            SELECT323=(Token)match(input,SELECT,FOLLOW_SELECT_in_subQueryExpr5956); if (state.failed) return retval;
            pushFollow(FOLLOW_selectionListElement_in_subQueryExpr5959);
            selectionListElement324=selectionListElement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, selectionListElement324.getTree());
            FROM325=(Token)match(input,FROM,FOLLOW_FROM_in_subQueryExpr5966); if (state.failed) return retval;
            pushFollow(FOLLOW_subSelectFilterExpr_in_subQueryExpr5969);
            subSelectFilterExpr326=subSelectFilterExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, subSelectFilterExpr326.getTree());
            // EsperEPL2Grammar.g:1012:6: ( WHERE whereClause )?
            int alt131=2;
            int LA131_0 = input.LA(1);

            if ( (LA131_0==WHERE) ) {
                alt131=1;
            }
            switch (alt131) {
                case 1 :
                    // EsperEPL2Grammar.g:1012:7: WHERE whereClause
                    {
                    WHERE327=(Token)match(input,WHERE,FOLLOW_WHERE_in_subQueryExpr5977); if (state.failed) return retval;
                    pushFollow(FOLLOW_whereClause_in_subQueryExpr5980);
                    whereClause328=whereClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, whereClause328.getTree());

                    }
                    break;

            }

            RPAREN329=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_subQueryExpr5989); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "subQueryExpr"

    public static class subSelectFilterExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "subSelectFilterExpr"
    // EsperEPL2Grammar.g:1016:1: subSelectFilterExpr : eventFilterExpression ( DOT viewExpression ( DOT viewExpression )* )? ( AS i= IDENT | i= IDENT )? (ru= RETAINUNION | ri= RETAININTERSECTION )? -> ^( STREAM_EXPR eventFilterExpression ( viewExpression )* ( $i)? ( $ru)? ( $ri)? ) ;
    public final EsperEPL2GrammarParser.subSelectFilterExpr_return subSelectFilterExpr() throws RecognitionException {
        EsperEPL2GrammarParser.subSelectFilterExpr_return retval = new EsperEPL2GrammarParser.subSelectFilterExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token ru=null;
        Token ri=null;
        Token DOT331=null;
        Token DOT333=null;
        Token AS335=null;
        EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression330 = null;

        EsperEPL2GrammarParser.viewExpression_return viewExpression332 = null;

        EsperEPL2GrammarParser.viewExpression_return viewExpression334 = null;


        CommonTree i_tree=null;
        CommonTree ru_tree=null;
        CommonTree ri_tree=null;
        CommonTree DOT331_tree=null;
        CommonTree DOT333_tree=null;
        CommonTree AS335_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RETAINUNION=new RewriteRuleTokenStream(adaptor,"token RETAINUNION");
        RewriteRuleTokenStream stream_RETAININTERSECTION=new RewriteRuleTokenStream(adaptor,"token RETAININTERSECTION");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_viewExpression=new RewriteRuleSubtreeStream(adaptor,"rule viewExpression");
        RewriteRuleSubtreeStream stream_eventFilterExpression=new RewriteRuleSubtreeStream(adaptor,"rule eventFilterExpression");
         paraphrases.push("subquery filter specification"); 
        try {
            // EsperEPL2Grammar.g:1019:2: ( eventFilterExpression ( DOT viewExpression ( DOT viewExpression )* )? ( AS i= IDENT | i= IDENT )? (ru= RETAINUNION | ri= RETAININTERSECTION )? -> ^( STREAM_EXPR eventFilterExpression ( viewExpression )* ( $i)? ( $ru)? ( $ri)? ) )
            // EsperEPL2Grammar.g:1019:4: eventFilterExpression ( DOT viewExpression ( DOT viewExpression )* )? ( AS i= IDENT | i= IDENT )? (ru= RETAINUNION | ri= RETAININTERSECTION )?
            {
            pushFollow(FOLLOW_eventFilterExpression_in_subSelectFilterExpr6013);
            eventFilterExpression330=eventFilterExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventFilterExpression.add(eventFilterExpression330.getTree());
            // EsperEPL2Grammar.g:1020:3: ( DOT viewExpression ( DOT viewExpression )* )?
            int alt133=2;
            int LA133_0 = input.LA(1);

            if ( (LA133_0==DOT) ) {
                alt133=1;
            }
            switch (alt133) {
                case 1 :
                    // EsperEPL2Grammar.g:1020:4: DOT viewExpression ( DOT viewExpression )*
                    {
                    DOT331=(Token)match(input,DOT,FOLLOW_DOT_in_subSelectFilterExpr6018); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT331);

                    pushFollow(FOLLOW_viewExpression_in_subSelectFilterExpr6020);
                    viewExpression332=viewExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression332.getTree());
                    // EsperEPL2Grammar.g:1020:23: ( DOT viewExpression )*
                    loop132:
                    do {
                        int alt132=2;
                        int LA132_0 = input.LA(1);

                        if ( (LA132_0==DOT) ) {
                            alt132=1;
                        }


                        switch (alt132) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:1020:24: DOT viewExpression
                    	    {
                    	    DOT333=(Token)match(input,DOT,FOLLOW_DOT_in_subSelectFilterExpr6023); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_DOT.add(DOT333);

                    	    pushFollow(FOLLOW_viewExpression_in_subSelectFilterExpr6025);
                    	    viewExpression334=viewExpression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression334.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop132;
                        }
                    } while (true);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:1020:47: ( AS i= IDENT | i= IDENT )?
            int alt134=3;
            int LA134_0 = input.LA(1);

            if ( (LA134_0==AS) ) {
                alt134=1;
            }
            else if ( (LA134_0==IDENT) ) {
                alt134=2;
            }
            switch (alt134) {
                case 1 :
                    // EsperEPL2Grammar.g:1020:48: AS i= IDENT
                    {
                    AS335=(Token)match(input,AS,FOLLOW_AS_in_subSelectFilterExpr6032); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS335);

                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_subSelectFilterExpr6036); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1020:61: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_subSelectFilterExpr6042); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:1020:71: (ru= RETAINUNION | ri= RETAININTERSECTION )?
            int alt135=3;
            int LA135_0 = input.LA(1);

            if ( (LA135_0==RETAINUNION) ) {
                alt135=1;
            }
            else if ( (LA135_0==RETAININTERSECTION) ) {
                alt135=2;
            }
            switch (alt135) {
                case 1 :
                    // EsperEPL2Grammar.g:1020:72: ru= RETAINUNION
                    {
                    ru=(Token)match(input,RETAINUNION,FOLLOW_RETAINUNION_in_subSelectFilterExpr6049); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAINUNION.add(ru);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1020:87: ri= RETAININTERSECTION
                    {
                    ri=(Token)match(input,RETAININTERSECTION,FOLLOW_RETAININTERSECTION_in_subSelectFilterExpr6053); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAININTERSECTION.add(ri);


                    }
                    break;

            }



            // AST REWRITE
            // elements: i, ru, ri, viewExpression, eventFilterExpression
            // token labels: ri, ru, i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_ri=new RewriteRuleTokenStream(adaptor,"token ri",ri);
            RewriteRuleTokenStream stream_ru=new RewriteRuleTokenStream(adaptor,"token ru",ru);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1021:3: -> ^( STREAM_EXPR eventFilterExpression ( viewExpression )* ( $i)? ( $ru)? ( $ri)? )
            {
                // EsperEPL2Grammar.g:1021:6: ^( STREAM_EXPR eventFilterExpression ( viewExpression )* ( $i)? ( $ru)? ( $ri)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STREAM_EXPR, "STREAM_EXPR"), root_1);

                adaptor.addChild(root_1, stream_eventFilterExpression.nextTree());
                // EsperEPL2Grammar.g:1021:42: ( viewExpression )*
                while ( stream_viewExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_viewExpression.nextTree());

                }
                stream_viewExpression.reset();
                // EsperEPL2Grammar.g:1021:58: ( $i)?
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());

                }
                stream_i.reset();
                // EsperEPL2Grammar.g:1021:62: ( $ru)?
                if ( stream_ru.hasNext() ) {
                    adaptor.addChild(root_1, stream_ru.nextNode());

                }
                stream_ru.reset();
                // EsperEPL2Grammar.g:1021:67: ( $ri)?
                if ( stream_ri.hasNext() ) {
                    adaptor.addChild(root_1, stream_ri.nextNode());

                }
                stream_ri.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "subSelectFilterExpr"

    public static class arrayExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "arrayExpression"
    // EsperEPL2Grammar.g:1024:1: arrayExpression : LCURLY ( expression ( COMMA expression )* )? RCURLY -> ^( ARRAY_EXPR ( expression )* ) ;
    public final EsperEPL2GrammarParser.arrayExpression_return arrayExpression() throws RecognitionException {
        EsperEPL2GrammarParser.arrayExpression_return retval = new EsperEPL2GrammarParser.arrayExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LCURLY336=null;
        Token COMMA338=null;
        Token RCURLY340=null;
        EsperEPL2GrammarParser.expression_return expression337 = null;

        EsperEPL2GrammarParser.expression_return expression339 = null;


        CommonTree LCURLY336_tree=null;
        CommonTree COMMA338_tree=null;
        CommonTree RCURLY340_tree=null;
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            // EsperEPL2Grammar.g:1025:2: ( LCURLY ( expression ( COMMA expression )* )? RCURLY -> ^( ARRAY_EXPR ( expression )* ) )
            // EsperEPL2Grammar.g:1025:4: LCURLY ( expression ( COMMA expression )* )? RCURLY
            {
            LCURLY336=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_arrayExpression6093); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCURLY.add(LCURLY336);

            // EsperEPL2Grammar.g:1025:11: ( expression ( COMMA expression )* )?
            int alt137=2;
            int LA137_0 = input.LA(1);

            if ( (LA137_0==WINDOW||LA137_0==ESCAPE||(LA137_0>=NOT_EXPR && LA137_0<=EVERY_EXPR)||(LA137_0>=SUM && LA137_0<=COUNT)||LA137_0==CASE||LA137_0==OUTER||(LA137_0>=JOIN && LA137_0<=FULL)||(LA137_0>=EVENTS && LA137_0<=LAST)||(LA137_0>=UNIDIRECTIONAL && LA137_0<=CURRENT_TIMESTAMP)||LA137_0==SNAPSHOT||(LA137_0>=VARIABLE && LA137_0<=AT)||(LA137_0>=BOOLEAN_TRUE && LA137_0<=VALUE_NULL)||LA137_0==NUM_DOUBLE||LA137_0==IDENT||LA137_0==LPAREN||(LA137_0>=STRING_LITERAL && LA137_0<=QUOTED_STRING_LITERAL)||(LA137_0>=PLUS && LA137_0<=MINUS)||LA137_0==LCURLY||LA137_0==NUM_INT||LA137_0==QUESTION||(LA137_0>=TICKED_STRING_LITERAL && LA137_0<=NUM_FLOAT)) ) {
                alt137=1;
            }
            switch (alt137) {
                case 1 :
                    // EsperEPL2Grammar.g:1025:12: expression ( COMMA expression )*
                    {
                    pushFollow(FOLLOW_expression_in_arrayExpression6096);
                    expression337=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression337.getTree());
                    // EsperEPL2Grammar.g:1025:23: ( COMMA expression )*
                    loop136:
                    do {
                        int alt136=2;
                        int LA136_0 = input.LA(1);

                        if ( (LA136_0==COMMA) ) {
                            alt136=1;
                        }


                        switch (alt136) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:1025:24: COMMA expression
                    	    {
                    	    COMMA338=(Token)match(input,COMMA,FOLLOW_COMMA_in_arrayExpression6099); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA338);

                    	    pushFollow(FOLLOW_expression_in_arrayExpression6101);
                    	    expression339=expression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_expression.add(expression339.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop136;
                        }
                    } while (true);


                    }
                    break;

            }

            RCURLY340=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_arrayExpression6108); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCURLY.add(RCURLY340);



            // AST REWRITE
            // elements: expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1026:4: -> ^( ARRAY_EXPR ( expression )* )
            {
                // EsperEPL2Grammar.g:1026:7: ^( ARRAY_EXPR ( expression )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ARRAY_EXPR, "ARRAY_EXPR"), root_1);

                // EsperEPL2Grammar.g:1026:20: ( expression )*
                while ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());

                }
                stream_expression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "arrayExpression"

    public static class builtinFunc_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "builtinFunc"
    // EsperEPL2Grammar.g:1029:1: builtinFunc : ( SUM LPAREN ( ALL | DISTINCT )? expression RPAREN | AVG LPAREN ( ALL | DISTINCT )? expression RPAREN | COUNT LPAREN ( ( ( ALL | DISTINCT )? expression ) | ( STAR ) ) RPAREN | MEDIAN LPAREN ( ALL | DISTINCT )? expression RPAREN | STDDEV LPAREN ( ALL | DISTINCT )? expression RPAREN | AVEDEV LPAREN ( ALL | DISTINCT )? expression RPAREN | COALESCE LPAREN expression COMMA expression ( COMMA expression )* RPAREN | PREVIOUS LPAREN expression COMMA eventProperty RPAREN | PRIOR LPAREN NUM_INT COMMA eventProperty RPAREN | INSTANCEOF LPAREN expression COMMA classIdentifier ( COMMA classIdentifier )* RPAREN | CAST LPAREN expression ( COMMA | AS ) classIdentifier RPAREN | EXISTS LPAREN eventProperty RPAREN | CURRENT_TIMESTAMP ( LPAREN RPAREN )? );
    public final EsperEPL2GrammarParser.builtinFunc_return builtinFunc() throws RecognitionException {
        EsperEPL2GrammarParser.builtinFunc_return retval = new EsperEPL2GrammarParser.builtinFunc_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token SUM341=null;
        Token LPAREN342=null;
        Token ALL343=null;
        Token DISTINCT344=null;
        Token RPAREN346=null;
        Token AVG347=null;
        Token LPAREN348=null;
        Token ALL349=null;
        Token DISTINCT350=null;
        Token RPAREN352=null;
        Token COUNT353=null;
        Token LPAREN354=null;
        Token ALL355=null;
        Token DISTINCT356=null;
        Token STAR358=null;
        Token RPAREN359=null;
        Token MEDIAN360=null;
        Token LPAREN361=null;
        Token ALL362=null;
        Token DISTINCT363=null;
        Token RPAREN365=null;
        Token STDDEV366=null;
        Token LPAREN367=null;
        Token ALL368=null;
        Token DISTINCT369=null;
        Token RPAREN371=null;
        Token AVEDEV372=null;
        Token LPAREN373=null;
        Token ALL374=null;
        Token DISTINCT375=null;
        Token RPAREN377=null;
        Token COALESCE378=null;
        Token LPAREN379=null;
        Token COMMA381=null;
        Token COMMA383=null;
        Token RPAREN385=null;
        Token PREVIOUS386=null;
        Token LPAREN387=null;
        Token COMMA389=null;
        Token RPAREN391=null;
        Token PRIOR392=null;
        Token LPAREN393=null;
        Token NUM_INT394=null;
        Token COMMA395=null;
        Token RPAREN397=null;
        Token INSTANCEOF398=null;
        Token LPAREN399=null;
        Token COMMA401=null;
        Token COMMA403=null;
        Token RPAREN405=null;
        Token CAST406=null;
        Token LPAREN407=null;
        Token COMMA409=null;
        Token AS410=null;
        Token RPAREN412=null;
        Token EXISTS413=null;
        Token LPAREN414=null;
        Token RPAREN416=null;
        Token CURRENT_TIMESTAMP417=null;
        Token LPAREN418=null;
        Token RPAREN419=null;
        EsperEPL2GrammarParser.expression_return expression345 = null;

        EsperEPL2GrammarParser.expression_return expression351 = null;

        EsperEPL2GrammarParser.expression_return expression357 = null;

        EsperEPL2GrammarParser.expression_return expression364 = null;

        EsperEPL2GrammarParser.expression_return expression370 = null;

        EsperEPL2GrammarParser.expression_return expression376 = null;

        EsperEPL2GrammarParser.expression_return expression380 = null;

        EsperEPL2GrammarParser.expression_return expression382 = null;

        EsperEPL2GrammarParser.expression_return expression384 = null;

        EsperEPL2GrammarParser.expression_return expression388 = null;

        EsperEPL2GrammarParser.eventProperty_return eventProperty390 = null;

        EsperEPL2GrammarParser.eventProperty_return eventProperty396 = null;

        EsperEPL2GrammarParser.expression_return expression400 = null;

        EsperEPL2GrammarParser.classIdentifier_return classIdentifier402 = null;

        EsperEPL2GrammarParser.classIdentifier_return classIdentifier404 = null;

        EsperEPL2GrammarParser.expression_return expression408 = null;

        EsperEPL2GrammarParser.classIdentifier_return classIdentifier411 = null;

        EsperEPL2GrammarParser.eventProperty_return eventProperty415 = null;


        CommonTree SUM341_tree=null;
        CommonTree LPAREN342_tree=null;
        CommonTree ALL343_tree=null;
        CommonTree DISTINCT344_tree=null;
        CommonTree RPAREN346_tree=null;
        CommonTree AVG347_tree=null;
        CommonTree LPAREN348_tree=null;
        CommonTree ALL349_tree=null;
        CommonTree DISTINCT350_tree=null;
        CommonTree RPAREN352_tree=null;
        CommonTree COUNT353_tree=null;
        CommonTree LPAREN354_tree=null;
        CommonTree ALL355_tree=null;
        CommonTree DISTINCT356_tree=null;
        CommonTree STAR358_tree=null;
        CommonTree RPAREN359_tree=null;
        CommonTree MEDIAN360_tree=null;
        CommonTree LPAREN361_tree=null;
        CommonTree ALL362_tree=null;
        CommonTree DISTINCT363_tree=null;
        CommonTree RPAREN365_tree=null;
        CommonTree STDDEV366_tree=null;
        CommonTree LPAREN367_tree=null;
        CommonTree ALL368_tree=null;
        CommonTree DISTINCT369_tree=null;
        CommonTree RPAREN371_tree=null;
        CommonTree AVEDEV372_tree=null;
        CommonTree LPAREN373_tree=null;
        CommonTree ALL374_tree=null;
        CommonTree DISTINCT375_tree=null;
        CommonTree RPAREN377_tree=null;
        CommonTree COALESCE378_tree=null;
        CommonTree LPAREN379_tree=null;
        CommonTree COMMA381_tree=null;
        CommonTree COMMA383_tree=null;
        CommonTree RPAREN385_tree=null;
        CommonTree PREVIOUS386_tree=null;
        CommonTree LPAREN387_tree=null;
        CommonTree COMMA389_tree=null;
        CommonTree RPAREN391_tree=null;
        CommonTree PRIOR392_tree=null;
        CommonTree LPAREN393_tree=null;
        CommonTree NUM_INT394_tree=null;
        CommonTree COMMA395_tree=null;
        CommonTree RPAREN397_tree=null;
        CommonTree INSTANCEOF398_tree=null;
        CommonTree LPAREN399_tree=null;
        CommonTree COMMA401_tree=null;
        CommonTree COMMA403_tree=null;
        CommonTree RPAREN405_tree=null;
        CommonTree CAST406_tree=null;
        CommonTree LPAREN407_tree=null;
        CommonTree COMMA409_tree=null;
        CommonTree AS410_tree=null;
        CommonTree RPAREN412_tree=null;
        CommonTree EXISTS413_tree=null;
        CommonTree LPAREN414_tree=null;
        CommonTree RPAREN416_tree=null;
        CommonTree CURRENT_TIMESTAMP417_tree=null;
        CommonTree LPAREN418_tree=null;
        CommonTree RPAREN419_tree=null;

        try {
            // EsperEPL2Grammar.g:1030:2: ( SUM LPAREN ( ALL | DISTINCT )? expression RPAREN | AVG LPAREN ( ALL | DISTINCT )? expression RPAREN | COUNT LPAREN ( ( ( ALL | DISTINCT )? expression ) | ( STAR ) ) RPAREN | MEDIAN LPAREN ( ALL | DISTINCT )? expression RPAREN | STDDEV LPAREN ( ALL | DISTINCT )? expression RPAREN | AVEDEV LPAREN ( ALL | DISTINCT )? expression RPAREN | COALESCE LPAREN expression COMMA expression ( COMMA expression )* RPAREN | PREVIOUS LPAREN expression COMMA eventProperty RPAREN | PRIOR LPAREN NUM_INT COMMA eventProperty RPAREN | INSTANCEOF LPAREN expression COMMA classIdentifier ( COMMA classIdentifier )* RPAREN | CAST LPAREN expression ( COMMA | AS ) classIdentifier RPAREN | EXISTS LPAREN eventProperty RPAREN | CURRENT_TIMESTAMP ( LPAREN RPAREN )? )
            int alt149=13;
            switch ( input.LA(1) ) {
            case SUM:
                {
                alt149=1;
                }
                break;
            case AVG:
                {
                alt149=2;
                }
                break;
            case COUNT:
                {
                alt149=3;
                }
                break;
            case MEDIAN:
                {
                alt149=4;
                }
                break;
            case STDDEV:
                {
                alt149=5;
                }
                break;
            case AVEDEV:
                {
                alt149=6;
                }
                break;
            case COALESCE:
                {
                alt149=7;
                }
                break;
            case PREVIOUS:
                {
                alt149=8;
                }
                break;
            case PRIOR:
                {
                alt149=9;
                }
                break;
            case INSTANCEOF:
                {
                alt149=10;
                }
                break;
            case CAST:
                {
                alt149=11;
                }
                break;
            case EXISTS:
                {
                alt149=12;
                }
                break;
            case CURRENT_TIMESTAMP:
                {
                alt149=13;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 149, 0, input);

                throw nvae;
            }

            switch (alt149) {
                case 1 :
                    // EsperEPL2Grammar.g:1030:4: SUM LPAREN ( ALL | DISTINCT )? expression RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    SUM341=(Token)match(input,SUM,FOLLOW_SUM_in_builtinFunc6131); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SUM341_tree = (CommonTree)adaptor.create(SUM341);
                    root_0 = (CommonTree)adaptor.becomeRoot(SUM341_tree, root_0);
                    }
                    LPAREN342=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc6134); if (state.failed) return retval;
                    // EsperEPL2Grammar.g:1030:17: ( ALL | DISTINCT )?
                    int alt138=3;
                    int LA138_0 = input.LA(1);

                    if ( (LA138_0==ALL) ) {
                        alt138=1;
                    }
                    else if ( (LA138_0==DISTINCT) ) {
                        alt138=2;
                    }
                    switch (alt138) {
                        case 1 :
                            // EsperEPL2Grammar.g:1030:18: ALL
                            {
                            ALL343=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc6138); if (state.failed) return retval;

                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1030:25: DISTINCT
                            {
                            DISTINCT344=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc6143); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT344_tree = (CommonTree)adaptor.create(DISTINCT344);
                            adaptor.addChild(root_0, DISTINCT344_tree);
                            }

                            }
                            break;

                    }

                    pushFollow(FOLLOW_expression_in_builtinFunc6147);
                    expression345=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression345.getTree());
                    RPAREN346=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc6149); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1031:4: AVG LPAREN ( ALL | DISTINCT )? expression RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    AVG347=(Token)match(input,AVG,FOLLOW_AVG_in_builtinFunc6155); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AVG347_tree = (CommonTree)adaptor.create(AVG347);
                    root_0 = (CommonTree)adaptor.becomeRoot(AVG347_tree, root_0);
                    }
                    LPAREN348=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc6158); if (state.failed) return retval;
                    // EsperEPL2Grammar.g:1031:17: ( ALL | DISTINCT )?
                    int alt139=3;
                    int LA139_0 = input.LA(1);

                    if ( (LA139_0==ALL) ) {
                        alt139=1;
                    }
                    else if ( (LA139_0==DISTINCT) ) {
                        alt139=2;
                    }
                    switch (alt139) {
                        case 1 :
                            // EsperEPL2Grammar.g:1031:18: ALL
                            {
                            ALL349=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc6162); if (state.failed) return retval;

                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1031:25: DISTINCT
                            {
                            DISTINCT350=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc6167); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT350_tree = (CommonTree)adaptor.create(DISTINCT350);
                            adaptor.addChild(root_0, DISTINCT350_tree);
                            }

                            }
                            break;

                    }

                    pushFollow(FOLLOW_expression_in_builtinFunc6171);
                    expression351=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression351.getTree());
                    RPAREN352=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc6173); if (state.failed) return retval;

                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1032:4: COUNT LPAREN ( ( ( ALL | DISTINCT )? expression ) | ( STAR ) ) RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    COUNT353=(Token)match(input,COUNT,FOLLOW_COUNT_in_builtinFunc6179); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COUNT353_tree = (CommonTree)adaptor.create(COUNT353);
                    root_0 = (CommonTree)adaptor.becomeRoot(COUNT353_tree, root_0);
                    }
                    LPAREN354=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc6182); if (state.failed) return retval;
                    // EsperEPL2Grammar.g:1033:3: ( ( ( ALL | DISTINCT )? expression ) | ( STAR ) )
                    int alt141=2;
                    int LA141_0 = input.LA(1);

                    if ( (LA141_0==WINDOW||LA141_0==ESCAPE||(LA141_0>=NOT_EXPR && LA141_0<=EVERY_EXPR)||(LA141_0>=SUM && LA141_0<=COUNT)||LA141_0==CASE||LA141_0==OUTER||(LA141_0>=JOIN && LA141_0<=FULL)||(LA141_0>=DISTINCT && LA141_0<=ALL)||(LA141_0>=EVENTS && LA141_0<=LAST)||(LA141_0>=UNIDIRECTIONAL && LA141_0<=CURRENT_TIMESTAMP)||LA141_0==SNAPSHOT||(LA141_0>=VARIABLE && LA141_0<=AT)||(LA141_0>=BOOLEAN_TRUE && LA141_0<=VALUE_NULL)||LA141_0==NUM_DOUBLE||LA141_0==IDENT||LA141_0==LPAREN||(LA141_0>=STRING_LITERAL && LA141_0<=QUOTED_STRING_LITERAL)||(LA141_0>=PLUS && LA141_0<=MINUS)||LA141_0==LCURLY||LA141_0==NUM_INT||LA141_0==QUESTION||(LA141_0>=TICKED_STRING_LITERAL && LA141_0<=NUM_FLOAT)) ) {
                        alt141=1;
                    }
                    else if ( (LA141_0==STAR) ) {
                        alt141=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 141, 0, input);

                        throw nvae;
                    }
                    switch (alt141) {
                        case 1 :
                            // EsperEPL2Grammar.g:1034:4: ( ( ALL | DISTINCT )? expression )
                            {
                            // EsperEPL2Grammar.g:1034:4: ( ( ALL | DISTINCT )? expression )
                            // EsperEPL2Grammar.g:1034:5: ( ALL | DISTINCT )? expression
                            {
                            // EsperEPL2Grammar.g:1034:5: ( ALL | DISTINCT )?
                            int alt140=3;
                            int LA140_0 = input.LA(1);

                            if ( (LA140_0==ALL) ) {
                                alt140=1;
                            }
                            else if ( (LA140_0==DISTINCT) ) {
                                alt140=2;
                            }
                            switch (alt140) {
                                case 1 :
                                    // EsperEPL2Grammar.g:1034:6: ALL
                                    {
                                    ALL355=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc6194); if (state.failed) return retval;

                                    }
                                    break;
                                case 2 :
                                    // EsperEPL2Grammar.g:1034:13: DISTINCT
                                    {
                                    DISTINCT356=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc6199); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                    DISTINCT356_tree = (CommonTree)adaptor.create(DISTINCT356);
                                    adaptor.addChild(root_0, DISTINCT356_tree);
                                    }

                                    }
                                    break;

                            }

                            pushFollow(FOLLOW_expression_in_builtinFunc6203);
                            expression357=expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression357.getTree());

                            }


                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1036:4: ( STAR )
                            {
                            // EsperEPL2Grammar.g:1036:4: ( STAR )
                            // EsperEPL2Grammar.g:1036:5: STAR
                            {
                            STAR358=(Token)match(input,STAR,FOLLOW_STAR_in_builtinFunc6214); if (state.failed) return retval;

                            }


                            }
                            break;

                    }

                    RPAREN359=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc6225); if (state.failed) return retval;

                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:1039:4: MEDIAN LPAREN ( ALL | DISTINCT )? expression RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    MEDIAN360=(Token)match(input,MEDIAN,FOLLOW_MEDIAN_in_builtinFunc6231); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MEDIAN360_tree = (CommonTree)adaptor.create(MEDIAN360);
                    root_0 = (CommonTree)adaptor.becomeRoot(MEDIAN360_tree, root_0);
                    }
                    LPAREN361=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc6234); if (state.failed) return retval;
                    // EsperEPL2Grammar.g:1039:20: ( ALL | DISTINCT )?
                    int alt142=3;
                    int LA142_0 = input.LA(1);

                    if ( (LA142_0==ALL) ) {
                        alt142=1;
                    }
                    else if ( (LA142_0==DISTINCT) ) {
                        alt142=2;
                    }
                    switch (alt142) {
                        case 1 :
                            // EsperEPL2Grammar.g:1039:21: ALL
                            {
                            ALL362=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc6238); if (state.failed) return retval;

                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1039:28: DISTINCT
                            {
                            DISTINCT363=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc6243); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT363_tree = (CommonTree)adaptor.create(DISTINCT363);
                            adaptor.addChild(root_0, DISTINCT363_tree);
                            }

                            }
                            break;

                    }

                    pushFollow(FOLLOW_expression_in_builtinFunc6247);
                    expression364=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression364.getTree());
                    RPAREN365=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc6249); if (state.failed) return retval;

                    }
                    break;
                case 5 :
                    // EsperEPL2Grammar.g:1040:4: STDDEV LPAREN ( ALL | DISTINCT )? expression RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    STDDEV366=(Token)match(input,STDDEV,FOLLOW_STDDEV_in_builtinFunc6255); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STDDEV366_tree = (CommonTree)adaptor.create(STDDEV366);
                    root_0 = (CommonTree)adaptor.becomeRoot(STDDEV366_tree, root_0);
                    }
                    LPAREN367=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc6258); if (state.failed) return retval;
                    // EsperEPL2Grammar.g:1040:20: ( ALL | DISTINCT )?
                    int alt143=3;
                    int LA143_0 = input.LA(1);

                    if ( (LA143_0==ALL) ) {
                        alt143=1;
                    }
                    else if ( (LA143_0==DISTINCT) ) {
                        alt143=2;
                    }
                    switch (alt143) {
                        case 1 :
                            // EsperEPL2Grammar.g:1040:21: ALL
                            {
                            ALL368=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc6262); if (state.failed) return retval;

                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1040:28: DISTINCT
                            {
                            DISTINCT369=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc6267); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT369_tree = (CommonTree)adaptor.create(DISTINCT369);
                            adaptor.addChild(root_0, DISTINCT369_tree);
                            }

                            }
                            break;

                    }

                    pushFollow(FOLLOW_expression_in_builtinFunc6271);
                    expression370=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression370.getTree());
                    RPAREN371=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc6273); if (state.failed) return retval;

                    }
                    break;
                case 6 :
                    // EsperEPL2Grammar.g:1041:4: AVEDEV LPAREN ( ALL | DISTINCT )? expression RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    AVEDEV372=(Token)match(input,AVEDEV,FOLLOW_AVEDEV_in_builtinFunc6279); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AVEDEV372_tree = (CommonTree)adaptor.create(AVEDEV372);
                    root_0 = (CommonTree)adaptor.becomeRoot(AVEDEV372_tree, root_0);
                    }
                    LPAREN373=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc6282); if (state.failed) return retval;
                    // EsperEPL2Grammar.g:1041:20: ( ALL | DISTINCT )?
                    int alt144=3;
                    int LA144_0 = input.LA(1);

                    if ( (LA144_0==ALL) ) {
                        alt144=1;
                    }
                    else if ( (LA144_0==DISTINCT) ) {
                        alt144=2;
                    }
                    switch (alt144) {
                        case 1 :
                            // EsperEPL2Grammar.g:1041:21: ALL
                            {
                            ALL374=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc6286); if (state.failed) return retval;

                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1041:28: DISTINCT
                            {
                            DISTINCT375=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc6291); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT375_tree = (CommonTree)adaptor.create(DISTINCT375);
                            adaptor.addChild(root_0, DISTINCT375_tree);
                            }

                            }
                            break;

                    }

                    pushFollow(FOLLOW_expression_in_builtinFunc6295);
                    expression376=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression376.getTree());
                    RPAREN377=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc6297); if (state.failed) return retval;

                    }
                    break;
                case 7 :
                    // EsperEPL2Grammar.g:1042:4: COALESCE LPAREN expression COMMA expression ( COMMA expression )* RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    COALESCE378=(Token)match(input,COALESCE,FOLLOW_COALESCE_in_builtinFunc6303); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COALESCE378_tree = (CommonTree)adaptor.create(COALESCE378);
                    root_0 = (CommonTree)adaptor.becomeRoot(COALESCE378_tree, root_0);
                    }
                    LPAREN379=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc6306); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc6309);
                    expression380=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression380.getTree());
                    COMMA381=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc6311); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc6314);
                    expression382=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression382.getTree());
                    // EsperEPL2Grammar.g:1042:51: ( COMMA expression )*
                    loop145:
                    do {
                        int alt145=2;
                        int LA145_0 = input.LA(1);

                        if ( (LA145_0==COMMA) ) {
                            alt145=1;
                        }


                        switch (alt145) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:1042:52: COMMA expression
                    	    {
                    	    COMMA383=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc6317); if (state.failed) return retval;
                    	    pushFollow(FOLLOW_expression_in_builtinFunc6320);
                    	    expression384=expression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression384.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop145;
                        }
                    } while (true);

                    RPAREN385=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc6324); if (state.failed) return retval;

                    }
                    break;
                case 8 :
                    // EsperEPL2Grammar.g:1043:4: PREVIOUS LPAREN expression COMMA eventProperty RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    PREVIOUS386=(Token)match(input,PREVIOUS,FOLLOW_PREVIOUS_in_builtinFunc6330); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PREVIOUS386_tree = (CommonTree)adaptor.create(PREVIOUS386);
                    root_0 = (CommonTree)adaptor.becomeRoot(PREVIOUS386_tree, root_0);
                    }
                    LPAREN387=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc6333); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc6336);
                    expression388=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression388.getTree());
                    COMMA389=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc6338); if (state.failed) return retval;
                    pushFollow(FOLLOW_eventProperty_in_builtinFunc6341);
                    eventProperty390=eventProperty();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty390.getTree());
                    RPAREN391=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc6343); if (state.failed) return retval;

                    }
                    break;
                case 9 :
                    // EsperEPL2Grammar.g:1044:4: PRIOR LPAREN NUM_INT COMMA eventProperty RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    PRIOR392=(Token)match(input,PRIOR,FOLLOW_PRIOR_in_builtinFunc6349); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PRIOR392_tree = (CommonTree)adaptor.create(PRIOR392);
                    root_0 = (CommonTree)adaptor.becomeRoot(PRIOR392_tree, root_0);
                    }
                    LPAREN393=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc6352); if (state.failed) return retval;
                    NUM_INT394=(Token)match(input,NUM_INT,FOLLOW_NUM_INT_in_builtinFunc6355); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NUM_INT394_tree = (CommonTree)adaptor.create(NUM_INT394);
                    adaptor.addChild(root_0, NUM_INT394_tree);
                    }
                    COMMA395=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc6357); if (state.failed) return retval;
                    pushFollow(FOLLOW_eventProperty_in_builtinFunc6360);
                    eventProperty396=eventProperty();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty396.getTree());
                    RPAREN397=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc6362); if (state.failed) return retval;

                    }
                    break;
                case 10 :
                    // EsperEPL2Grammar.g:1047:4: INSTANCEOF LPAREN expression COMMA classIdentifier ( COMMA classIdentifier )* RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    INSTANCEOF398=(Token)match(input,INSTANCEOF,FOLLOW_INSTANCEOF_in_builtinFunc6372); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INSTANCEOF398_tree = (CommonTree)adaptor.create(INSTANCEOF398);
                    root_0 = (CommonTree)adaptor.becomeRoot(INSTANCEOF398_tree, root_0);
                    }
                    LPAREN399=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc6375); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc6378);
                    expression400=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression400.getTree());
                    COMMA401=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc6380); if (state.failed) return retval;
                    pushFollow(FOLLOW_classIdentifier_in_builtinFunc6383);
                    classIdentifier402=classIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier402.getTree());
                    // EsperEPL2Grammar.g:1047:58: ( COMMA classIdentifier )*
                    loop146:
                    do {
                        int alt146=2;
                        int LA146_0 = input.LA(1);

                        if ( (LA146_0==COMMA) ) {
                            alt146=1;
                        }


                        switch (alt146) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:1047:59: COMMA classIdentifier
                    	    {
                    	    COMMA403=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc6386); if (state.failed) return retval;
                    	    pushFollow(FOLLOW_classIdentifier_in_builtinFunc6389);
                    	    classIdentifier404=classIdentifier();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier404.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop146;
                        }
                    } while (true);

                    RPAREN405=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc6393); if (state.failed) return retval;

                    }
                    break;
                case 11 :
                    // EsperEPL2Grammar.g:1048:4: CAST LPAREN expression ( COMMA | AS ) classIdentifier RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    CAST406=(Token)match(input,CAST,FOLLOW_CAST_in_builtinFunc6399); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CAST406_tree = (CommonTree)adaptor.create(CAST406);
                    root_0 = (CommonTree)adaptor.becomeRoot(CAST406_tree, root_0);
                    }
                    LPAREN407=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc6402); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc6405);
                    expression408=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression408.getTree());
                    // EsperEPL2Grammar.g:1048:29: ( COMMA | AS )
                    int alt147=2;
                    int LA147_0 = input.LA(1);

                    if ( (LA147_0==COMMA) ) {
                        alt147=1;
                    }
                    else if ( (LA147_0==AS) ) {
                        alt147=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 147, 0, input);

                        throw nvae;
                    }
                    switch (alt147) {
                        case 1 :
                            // EsperEPL2Grammar.g:1048:30: COMMA
                            {
                            COMMA409=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc6408); if (state.failed) return retval;

                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1048:39: AS
                            {
                            AS410=(Token)match(input,AS,FOLLOW_AS_in_builtinFunc6413); if (state.failed) return retval;

                            }
                            break;

                    }

                    pushFollow(FOLLOW_classIdentifier_in_builtinFunc6417);
                    classIdentifier411=classIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier411.getTree());
                    RPAREN412=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc6419); if (state.failed) return retval;

                    }
                    break;
                case 12 :
                    // EsperEPL2Grammar.g:1049:4: EXISTS LPAREN eventProperty RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    EXISTS413=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_builtinFunc6425); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EXISTS413_tree = (CommonTree)adaptor.create(EXISTS413);
                    root_0 = (CommonTree)adaptor.becomeRoot(EXISTS413_tree, root_0);
                    }
                    LPAREN414=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc6428); if (state.failed) return retval;
                    pushFollow(FOLLOW_eventProperty_in_builtinFunc6431);
                    eventProperty415=eventProperty();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty415.getTree());
                    RPAREN416=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc6433); if (state.failed) return retval;

                    }
                    break;
                case 13 :
                    // EsperEPL2Grammar.g:1050:4: CURRENT_TIMESTAMP ( LPAREN RPAREN )?
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    CURRENT_TIMESTAMP417=(Token)match(input,CURRENT_TIMESTAMP,FOLLOW_CURRENT_TIMESTAMP_in_builtinFunc6439); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CURRENT_TIMESTAMP417_tree = (CommonTree)adaptor.create(CURRENT_TIMESTAMP417);
                    root_0 = (CommonTree)adaptor.becomeRoot(CURRENT_TIMESTAMP417_tree, root_0);
                    }
                    // EsperEPL2Grammar.g:1050:23: ( LPAREN RPAREN )?
                    int alt148=2;
                    int LA148_0 = input.LA(1);

                    if ( (LA148_0==LPAREN) ) {
                        alt148=1;
                    }
                    switch (alt148) {
                        case 1 :
                            // EsperEPL2Grammar.g:1050:24: LPAREN RPAREN
                            {
                            LPAREN418=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc6443); if (state.failed) return retval;
                            RPAREN419=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc6446); if (state.failed) return retval;

                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "builtinFunc"

    public static class maxFunc_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "maxFunc"
    // EsperEPL2Grammar.g:1053:1: maxFunc : ( MAX | MIN ) LPAREN expression ( COMMA expression ( COMMA expression )* )? RPAREN ;
    public final EsperEPL2GrammarParser.maxFunc_return maxFunc() throws RecognitionException {
        EsperEPL2GrammarParser.maxFunc_return retval = new EsperEPL2GrammarParser.maxFunc_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token MAX420=null;
        Token MIN421=null;
        Token LPAREN422=null;
        Token COMMA424=null;
        Token COMMA426=null;
        Token RPAREN428=null;
        EsperEPL2GrammarParser.expression_return expression423 = null;

        EsperEPL2GrammarParser.expression_return expression425 = null;

        EsperEPL2GrammarParser.expression_return expression427 = null;


        CommonTree MAX420_tree=null;
        CommonTree MIN421_tree=null;
        CommonTree LPAREN422_tree=null;
        CommonTree COMMA424_tree=null;
        CommonTree COMMA426_tree=null;
        CommonTree RPAREN428_tree=null;

        try {
            // EsperEPL2Grammar.g:1054:2: ( ( MAX | MIN ) LPAREN expression ( COMMA expression ( COMMA expression )* )? RPAREN )
            // EsperEPL2Grammar.g:1054:4: ( MAX | MIN ) LPAREN expression ( COMMA expression ( COMMA expression )* )? RPAREN
            {
            root_0 = (CommonTree)adaptor.nil();

            // EsperEPL2Grammar.g:1054:4: ( MAX | MIN )
            int alt150=2;
            int LA150_0 = input.LA(1);

            if ( (LA150_0==MAX) ) {
                alt150=1;
            }
            else if ( (LA150_0==MIN) ) {
                alt150=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 150, 0, input);

                throw nvae;
            }
            switch (alt150) {
                case 1 :
                    // EsperEPL2Grammar.g:1054:5: MAX
                    {
                    MAX420=(Token)match(input,MAX,FOLLOW_MAX_in_maxFunc6462); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MAX420_tree = (CommonTree)adaptor.create(MAX420);
                    root_0 = (CommonTree)adaptor.becomeRoot(MAX420_tree, root_0);
                    }

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1054:12: MIN
                    {
                    MIN421=(Token)match(input,MIN,FOLLOW_MIN_in_maxFunc6467); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MIN421_tree = (CommonTree)adaptor.create(MIN421);
                    root_0 = (CommonTree)adaptor.becomeRoot(MIN421_tree, root_0);
                    }

                    }
                    break;

            }

            LPAREN422=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_maxFunc6471); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_maxFunc6474);
            expression423=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression423.getTree());
            // EsperEPL2Grammar.g:1054:37: ( COMMA expression ( COMMA expression )* )?
            int alt152=2;
            int LA152_0 = input.LA(1);

            if ( (LA152_0==COMMA) ) {
                alt152=1;
            }
            switch (alt152) {
                case 1 :
                    // EsperEPL2Grammar.g:1054:38: COMMA expression ( COMMA expression )*
                    {
                    COMMA424=(Token)match(input,COMMA,FOLLOW_COMMA_in_maxFunc6477); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_maxFunc6480);
                    expression425=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression425.getTree());
                    // EsperEPL2Grammar.g:1054:56: ( COMMA expression )*
                    loop151:
                    do {
                        int alt151=2;
                        int LA151_0 = input.LA(1);

                        if ( (LA151_0==COMMA) ) {
                            alt151=1;
                        }


                        switch (alt151) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:1054:57: COMMA expression
                    	    {
                    	    COMMA426=(Token)match(input,COMMA,FOLLOW_COMMA_in_maxFunc6483); if (state.failed) return retval;
                    	    pushFollow(FOLLOW_expression_in_maxFunc6486);
                    	    expression427=expression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression427.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop151;
                        }
                    } while (true);


                    }
                    break;

            }

            RPAREN428=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_maxFunc6493); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "maxFunc"

    public static class eventPropertyOrLibFunction_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "eventPropertyOrLibFunction"
    // EsperEPL2Grammar.g:1057:1: eventPropertyOrLibFunction : ( ( eventProperty )=> eventProperty | libFunction );
    public final EsperEPL2GrammarParser.eventPropertyOrLibFunction_return eventPropertyOrLibFunction() throws RecognitionException {
        EsperEPL2GrammarParser.eventPropertyOrLibFunction_return retval = new EsperEPL2GrammarParser.eventPropertyOrLibFunction_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.eventProperty_return eventProperty429 = null;

        EsperEPL2GrammarParser.libFunction_return libFunction430 = null;



        try {
            // EsperEPL2Grammar.g:1058:2: ( ( eventProperty )=> eventProperty | libFunction )
            int alt153=2;
            alt153 = dfa153.predict(input);
            switch (alt153) {
                case 1 :
                    // EsperEPL2Grammar.g:1058:4: ( eventProperty )=> eventProperty
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_eventProperty_in_eventPropertyOrLibFunction6512);
                    eventProperty429=eventProperty();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty429.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1059:4: libFunction
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_libFunction_in_eventPropertyOrLibFunction6517);
                    libFunction430=libFunction();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, libFunction430.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "eventPropertyOrLibFunction"

    public static class libFunction_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "libFunction"
    // EsperEPL2Grammar.g:1062:1: libFunction : ( classIdentifierNonGreedy DOT )? funcIdent LPAREN ( libFunctionArgs )? RPAREN -> ^( LIB_FUNCTION ( classIdentifierNonGreedy )? funcIdent ( libFunctionArgs )? ) ;
    public final EsperEPL2GrammarParser.libFunction_return libFunction() throws RecognitionException {
        EsperEPL2GrammarParser.libFunction_return retval = new EsperEPL2GrammarParser.libFunction_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token DOT432=null;
        Token LPAREN434=null;
        Token RPAREN436=null;
        EsperEPL2GrammarParser.classIdentifierNonGreedy_return classIdentifierNonGreedy431 = null;

        EsperEPL2GrammarParser.funcIdent_return funcIdent433 = null;

        EsperEPL2GrammarParser.libFunctionArgs_return libFunctionArgs435 = null;


        CommonTree DOT432_tree=null;
        CommonTree LPAREN434_tree=null;
        CommonTree RPAREN436_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_libFunctionArgs=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionArgs");
        RewriteRuleSubtreeStream stream_classIdentifierNonGreedy=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifierNonGreedy");
        RewriteRuleSubtreeStream stream_funcIdent=new RewriteRuleSubtreeStream(adaptor,"rule funcIdent");
        try {
            // EsperEPL2Grammar.g:1063:2: ( ( classIdentifierNonGreedy DOT )? funcIdent LPAREN ( libFunctionArgs )? RPAREN -> ^( LIB_FUNCTION ( classIdentifierNonGreedy )? funcIdent ( libFunctionArgs )? ) )
            // EsperEPL2Grammar.g:1063:4: ( classIdentifierNonGreedy DOT )? funcIdent LPAREN ( libFunctionArgs )? RPAREN
            {
            // EsperEPL2Grammar.g:1063:4: ( classIdentifierNonGreedy DOT )?
            int alt154=2;
            int LA154_0 = input.LA(1);

            if ( (LA154_0==IDENT) ) {
                int LA154_1 = input.LA(2);

                if ( (LA154_1==DOT) ) {
                    alt154=1;
                }
            }
            else if ( (LA154_0==TICKED_STRING_LITERAL) ) {
                alt154=1;
            }
            switch (alt154) {
                case 1 :
                    // EsperEPL2Grammar.g:1063:5: classIdentifierNonGreedy DOT
                    {
                    pushFollow(FOLLOW_classIdentifierNonGreedy_in_libFunction6530);
                    classIdentifierNonGreedy431=classIdentifierNonGreedy();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_classIdentifierNonGreedy.add(classIdentifierNonGreedy431.getTree());
                    DOT432=(Token)match(input,DOT,FOLLOW_DOT_in_libFunction6532); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT432);


                    }
                    break;

            }

            pushFollow(FOLLOW_funcIdent_in_libFunction6536);
            funcIdent433=funcIdent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_funcIdent.add(funcIdent433.getTree());
            LPAREN434=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_libFunction6538); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN434);

            // EsperEPL2Grammar.g:1063:53: ( libFunctionArgs )?
            int alt155=2;
            int LA155_0 = input.LA(1);

            if ( (LA155_0==WINDOW||LA155_0==ESCAPE||(LA155_0>=NOT_EXPR && LA155_0<=EVERY_EXPR)||(LA155_0>=SUM && LA155_0<=COUNT)||LA155_0==CASE||LA155_0==OUTER||(LA155_0>=JOIN && LA155_0<=FULL)||(LA155_0>=DISTINCT && LA155_0<=ALL)||(LA155_0>=EVENTS && LA155_0<=LAST)||(LA155_0>=UNIDIRECTIONAL && LA155_0<=CURRENT_TIMESTAMP)||LA155_0==SNAPSHOT||(LA155_0>=VARIABLE && LA155_0<=AT)||(LA155_0>=BOOLEAN_TRUE && LA155_0<=VALUE_NULL)||LA155_0==NUM_DOUBLE||LA155_0==IDENT||LA155_0==LPAREN||(LA155_0>=STRING_LITERAL && LA155_0<=QUOTED_STRING_LITERAL)||(LA155_0>=PLUS && LA155_0<=MINUS)||LA155_0==LCURLY||LA155_0==NUM_INT||LA155_0==QUESTION||(LA155_0>=TICKED_STRING_LITERAL && LA155_0<=NUM_FLOAT)) ) {
                alt155=1;
            }
            switch (alt155) {
                case 1 :
                    // EsperEPL2Grammar.g:1063:54: libFunctionArgs
                    {
                    pushFollow(FOLLOW_libFunctionArgs_in_libFunction6541);
                    libFunctionArgs435=libFunctionArgs();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_libFunctionArgs.add(libFunctionArgs435.getTree());

                    }
                    break;

            }

            RPAREN436=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_libFunction6545); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN436);



            // AST REWRITE
            // elements: classIdentifierNonGreedy, funcIdent, libFunctionArgs
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1064:4: -> ^( LIB_FUNCTION ( classIdentifierNonGreedy )? funcIdent ( libFunctionArgs )? )
            {
                // EsperEPL2Grammar.g:1064:7: ^( LIB_FUNCTION ( classIdentifierNonGreedy )? funcIdent ( libFunctionArgs )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LIB_FUNCTION, "LIB_FUNCTION"), root_1);

                // EsperEPL2Grammar.g:1064:22: ( classIdentifierNonGreedy )?
                if ( stream_classIdentifierNonGreedy.hasNext() ) {
                    adaptor.addChild(root_1, stream_classIdentifierNonGreedy.nextTree());

                }
                stream_classIdentifierNonGreedy.reset();
                adaptor.addChild(root_1, stream_funcIdent.nextTree());
                // EsperEPL2Grammar.g:1064:58: ( libFunctionArgs )?
                if ( stream_libFunctionArgs.hasNext() ) {
                    adaptor.addChild(root_1, stream_libFunctionArgs.nextTree());

                }
                stream_libFunctionArgs.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "libFunction"

    public static class funcIdent_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "funcIdent"
    // EsperEPL2Grammar.g:1067:1: funcIdent : ( IDENT | max= MAX -> IDENT[$max] | min= MIN -> IDENT[$min] );
    public final EsperEPL2GrammarParser.funcIdent_return funcIdent() throws RecognitionException {
        EsperEPL2GrammarParser.funcIdent_return retval = new EsperEPL2GrammarParser.funcIdent_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token max=null;
        Token min=null;
        Token IDENT437=null;

        CommonTree max_tree=null;
        CommonTree min_tree=null;
        CommonTree IDENT437_tree=null;
        RewriteRuleTokenStream stream_MAX=new RewriteRuleTokenStream(adaptor,"token MAX");
        RewriteRuleTokenStream stream_MIN=new RewriteRuleTokenStream(adaptor,"token MIN");

        try {
            // EsperEPL2Grammar.g:1068:2: ( IDENT | max= MAX -> IDENT[$max] | min= MIN -> IDENT[$min] )
            int alt156=3;
            switch ( input.LA(1) ) {
            case IDENT:
                {
                alt156=1;
                }
                break;
            case MAX:
                {
                alt156=2;
                }
                break;
            case MIN:
                {
                alt156=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 156, 0, input);

                throw nvae;
            }

            switch (alt156) {
                case 1 :
                    // EsperEPL2Grammar.g:1068:4: IDENT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    IDENT437=(Token)match(input,IDENT,FOLLOW_IDENT_in_funcIdent6575); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IDENT437_tree = (CommonTree)adaptor.create(IDENT437);
                    adaptor.addChild(root_0, IDENT437_tree);
                    }

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1069:4: max= MAX
                    {
                    max=(Token)match(input,MAX,FOLLOW_MAX_in_funcIdent6582); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MAX.add(max);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1069:12: -> IDENT[$max]
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(IDENT, max));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1070:4: min= MIN
                    {
                    min=(Token)match(input,MIN,FOLLOW_MIN_in_funcIdent6594); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MIN.add(min);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1070:12: -> IDENT[$min]
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(IDENT, min));

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "funcIdent"

    public static class libFunctionArgs_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "libFunctionArgs"
    // EsperEPL2Grammar.g:1073:1: libFunctionArgs : ( ALL | DISTINCT )? expression ( COMMA expression )* ;
    public final EsperEPL2GrammarParser.libFunctionArgs_return libFunctionArgs() throws RecognitionException {
        EsperEPL2GrammarParser.libFunctionArgs_return retval = new EsperEPL2GrammarParser.libFunctionArgs_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token ALL438=null;
        Token DISTINCT439=null;
        Token COMMA441=null;
        EsperEPL2GrammarParser.expression_return expression440 = null;

        EsperEPL2GrammarParser.expression_return expression442 = null;


        CommonTree ALL438_tree=null;
        CommonTree DISTINCT439_tree=null;
        CommonTree COMMA441_tree=null;

        try {
            // EsperEPL2Grammar.g:1074:2: ( ( ALL | DISTINCT )? expression ( COMMA expression )* )
            // EsperEPL2Grammar.g:1074:4: ( ALL | DISTINCT )? expression ( COMMA expression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            // EsperEPL2Grammar.g:1074:4: ( ALL | DISTINCT )?
            int alt157=3;
            int LA157_0 = input.LA(1);

            if ( (LA157_0==ALL) ) {
                alt157=1;
            }
            else if ( (LA157_0==DISTINCT) ) {
                alt157=2;
            }
            switch (alt157) {
                case 1 :
                    // EsperEPL2Grammar.g:1074:5: ALL
                    {
                    ALL438=(Token)match(input,ALL,FOLLOW_ALL_in_libFunctionArgs6612); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1074:12: DISTINCT
                    {
                    DISTINCT439=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_libFunctionArgs6617); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DISTINCT439_tree = (CommonTree)adaptor.create(DISTINCT439);
                    adaptor.addChild(root_0, DISTINCT439_tree);
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_expression_in_libFunctionArgs6621);
            expression440=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression440.getTree());
            // EsperEPL2Grammar.g:1074:34: ( COMMA expression )*
            loop158:
            do {
                int alt158=2;
                int LA158_0 = input.LA(1);

                if ( (LA158_0==COMMA) ) {
                    alt158=1;
                }


                switch (alt158) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1074:35: COMMA expression
            	    {
            	    COMMA441=(Token)match(input,COMMA,FOLLOW_COMMA_in_libFunctionArgs6624); if (state.failed) return retval;
            	    pushFollow(FOLLOW_expression_in_libFunctionArgs6627);
            	    expression442=expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression442.getTree());

            	    }
            	    break;

            	default :
            	    break loop158;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "libFunctionArgs"

    public static class betweenList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "betweenList"
    // EsperEPL2Grammar.g:1077:1: betweenList : concatenationExpr AND_EXPR concatenationExpr ;
    public final EsperEPL2GrammarParser.betweenList_return betweenList() throws RecognitionException {
        EsperEPL2GrammarParser.betweenList_return retval = new EsperEPL2GrammarParser.betweenList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token AND_EXPR444=null;
        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr443 = null;

        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr445 = null;


        CommonTree AND_EXPR444_tree=null;

        try {
            // EsperEPL2Grammar.g:1078:2: ( concatenationExpr AND_EXPR concatenationExpr )
            // EsperEPL2Grammar.g:1078:4: concatenationExpr AND_EXPR concatenationExpr
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_concatenationExpr_in_betweenList6641);
            concatenationExpr443=concatenationExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, concatenationExpr443.getTree());
            AND_EXPR444=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_betweenList6643); if (state.failed) return retval;
            pushFollow(FOLLOW_concatenationExpr_in_betweenList6646);
            concatenationExpr445=concatenationExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, concatenationExpr445.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "betweenList"

    public static class patternExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "patternExpression"
    // EsperEPL2Grammar.g:1087:1: patternExpression : followedByExpression ;
    public final EsperEPL2GrammarParser.patternExpression_return patternExpression() throws RecognitionException {
        EsperEPL2GrammarParser.patternExpression_return retval = new EsperEPL2GrammarParser.patternExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.followedByExpression_return followedByExpression446 = null;



         paraphrases.push("pattern expression"); 
        try {
            // EsperEPL2Grammar.g:1090:2: ( followedByExpression )
            // EsperEPL2Grammar.g:1090:4: followedByExpression
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_followedByExpression_in_patternExpression6674);
            followedByExpression446=followedByExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, followedByExpression446.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "patternExpression"

    public static class followedByExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "followedByExpression"
    // EsperEPL2Grammar.g:1093:1: followedByExpression : orExpression (f= FOLLOWED_BY orExpression )* -> {$f != null}? ^( FOLLOWED_BY_EXPR ( orExpression )+ ) -> orExpression ;
    public final EsperEPL2GrammarParser.followedByExpression_return followedByExpression() throws RecognitionException {
        EsperEPL2GrammarParser.followedByExpression_return retval = new EsperEPL2GrammarParser.followedByExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token f=null;
        EsperEPL2GrammarParser.orExpression_return orExpression447 = null;

        EsperEPL2GrammarParser.orExpression_return orExpression448 = null;


        CommonTree f_tree=null;
        RewriteRuleTokenStream stream_FOLLOWED_BY=new RewriteRuleTokenStream(adaptor,"token FOLLOWED_BY");
        RewriteRuleSubtreeStream stream_orExpression=new RewriteRuleSubtreeStream(adaptor,"rule orExpression");
        try {
            // EsperEPL2Grammar.g:1094:2: ( orExpression (f= FOLLOWED_BY orExpression )* -> {$f != null}? ^( FOLLOWED_BY_EXPR ( orExpression )+ ) -> orExpression )
            // EsperEPL2Grammar.g:1094:4: orExpression (f= FOLLOWED_BY orExpression )*
            {
            pushFollow(FOLLOW_orExpression_in_followedByExpression6686);
            orExpression447=orExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_orExpression.add(orExpression447.getTree());
            // EsperEPL2Grammar.g:1094:17: (f= FOLLOWED_BY orExpression )*
            loop159:
            do {
                int alt159=2;
                int LA159_0 = input.LA(1);

                if ( (LA159_0==FOLLOWED_BY) ) {
                    alt159=1;
                }


                switch (alt159) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1094:18: f= FOLLOWED_BY orExpression
            	    {
            	    f=(Token)match(input,FOLLOWED_BY,FOLLOW_FOLLOWED_BY_in_followedByExpression6691); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_FOLLOWED_BY.add(f);

            	    pushFollow(FOLLOW_orExpression_in_followedByExpression6693);
            	    orExpression448=orExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_orExpression.add(orExpression448.getTree());

            	    }
            	    break;

            	default :
            	    break loop159;
                }
            } while (true);



            // AST REWRITE
            // elements: orExpression, orExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1095:6: -> {$f != null}? ^( FOLLOWED_BY_EXPR ( orExpression )+ )
            if (f != null) {
                // EsperEPL2Grammar.g:1095:23: ^( FOLLOWED_BY_EXPR ( orExpression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FOLLOWED_BY_EXPR, "FOLLOWED_BY_EXPR"), root_1);

                if ( !(stream_orExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_orExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_orExpression.nextTree());

                }
                stream_orExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1096:6: -> orExpression
            {
                adaptor.addChild(root_0, stream_orExpression.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "followedByExpression"

    public static class orExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "orExpression"
    // EsperEPL2Grammar.g:1099:1: orExpression : andExpression (o= OR_EXPR andExpression )* -> {$o != null}? ^( OR_EXPR ( andExpression )+ ) -> andExpression ;
    public final EsperEPL2GrammarParser.orExpression_return orExpression() throws RecognitionException {
        EsperEPL2GrammarParser.orExpression_return retval = new EsperEPL2GrammarParser.orExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token o=null;
        EsperEPL2GrammarParser.andExpression_return andExpression449 = null;

        EsperEPL2GrammarParser.andExpression_return andExpression450 = null;


        CommonTree o_tree=null;
        RewriteRuleTokenStream stream_OR_EXPR=new RewriteRuleTokenStream(adaptor,"token OR_EXPR");
        RewriteRuleSubtreeStream stream_andExpression=new RewriteRuleSubtreeStream(adaptor,"rule andExpression");
        try {
            // EsperEPL2Grammar.g:1100:2: ( andExpression (o= OR_EXPR andExpression )* -> {$o != null}? ^( OR_EXPR ( andExpression )+ ) -> andExpression )
            // EsperEPL2Grammar.g:1100:4: andExpression (o= OR_EXPR andExpression )*
            {
            pushFollow(FOLLOW_andExpression_in_orExpression6732);
            andExpression449=andExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_andExpression.add(andExpression449.getTree());
            // EsperEPL2Grammar.g:1100:18: (o= OR_EXPR andExpression )*
            loop160:
            do {
                int alt160=2;
                int LA160_0 = input.LA(1);

                if ( (LA160_0==OR_EXPR) ) {
                    alt160=1;
                }


                switch (alt160) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1100:19: o= OR_EXPR andExpression
            	    {
            	    o=(Token)match(input,OR_EXPR,FOLLOW_OR_EXPR_in_orExpression6737); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_OR_EXPR.add(o);

            	    pushFollow(FOLLOW_andExpression_in_orExpression6739);
            	    andExpression450=andExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_andExpression.add(andExpression450.getTree());

            	    }
            	    break;

            	default :
            	    break loop160;
                }
            } while (true);



            // AST REWRITE
            // elements: andExpression, OR_EXPR, andExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1101:3: -> {$o != null}? ^( OR_EXPR ( andExpression )+ )
            if (o != null) {
                // EsperEPL2Grammar.g:1101:20: ^( OR_EXPR ( andExpression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_OR_EXPR.nextNode(), root_1);

                if ( !(stream_andExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_andExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_andExpression.nextTree());

                }
                stream_andExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1102:3: -> andExpression
            {
                adaptor.addChild(root_0, stream_andExpression.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "orExpression"

    public static class andExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "andExpression"
    // EsperEPL2Grammar.g:1105:1: andExpression : matchUntilExpression (a= AND_EXPR matchUntilExpression )* -> {$a != null}? ^( AND_EXPR ( matchUntilExpression )+ ) -> matchUntilExpression ;
    public final EsperEPL2GrammarParser.andExpression_return andExpression() throws RecognitionException {
        EsperEPL2GrammarParser.andExpression_return retval = new EsperEPL2GrammarParser.andExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token a=null;
        EsperEPL2GrammarParser.matchUntilExpression_return matchUntilExpression451 = null;

        EsperEPL2GrammarParser.matchUntilExpression_return matchUntilExpression452 = null;


        CommonTree a_tree=null;
        RewriteRuleTokenStream stream_AND_EXPR=new RewriteRuleTokenStream(adaptor,"token AND_EXPR");
        RewriteRuleSubtreeStream stream_matchUntilExpression=new RewriteRuleSubtreeStream(adaptor,"rule matchUntilExpression");
        try {
            // EsperEPL2Grammar.g:1106:2: ( matchUntilExpression (a= AND_EXPR matchUntilExpression )* -> {$a != null}? ^( AND_EXPR ( matchUntilExpression )+ ) -> matchUntilExpression )
            // EsperEPL2Grammar.g:1106:4: matchUntilExpression (a= AND_EXPR matchUntilExpression )*
            {
            pushFollow(FOLLOW_matchUntilExpression_in_andExpression6771);
            matchUntilExpression451=matchUntilExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchUntilExpression.add(matchUntilExpression451.getTree());
            // EsperEPL2Grammar.g:1106:25: (a= AND_EXPR matchUntilExpression )*
            loop161:
            do {
                int alt161=2;
                int LA161_0 = input.LA(1);

                if ( (LA161_0==AND_EXPR) ) {
                    alt161=1;
                }


                switch (alt161) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1106:26: a= AND_EXPR matchUntilExpression
            	    {
            	    a=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_andExpression6776); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_AND_EXPR.add(a);

            	    pushFollow(FOLLOW_matchUntilExpression_in_andExpression6778);
            	    matchUntilExpression452=matchUntilExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_matchUntilExpression.add(matchUntilExpression452.getTree());

            	    }
            	    break;

            	default :
            	    break loop161;
                }
            } while (true);



            // AST REWRITE
            // elements: matchUntilExpression, AND_EXPR, matchUntilExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1107:3: -> {$a != null}? ^( AND_EXPR ( matchUntilExpression )+ )
            if (a != null) {
                // EsperEPL2Grammar.g:1107:20: ^( AND_EXPR ( matchUntilExpression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_AND_EXPR.nextNode(), root_1);

                if ( !(stream_matchUntilExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_matchUntilExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchUntilExpression.nextTree());

                }
                stream_matchUntilExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1108:3: -> matchUntilExpression
            {
                adaptor.addChild(root_0, stream_matchUntilExpression.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "andExpression"

    public static class matchUntilExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchUntilExpression"
    // EsperEPL2Grammar.g:1111:1: matchUntilExpression : (r= matchUntilRange )? qualifyExpression (a= UNTIL qualifyExpression )? -> {r != null && a != null}? ^( MATCH_UNTIL_EXPR matchUntilRange ( qualifyExpression )+ ) -> {r != null && a == null}? ^( MATCH_UNTIL_EXPR matchUntilRange qualifyExpression ) -> {$a != null}? ^( MATCH_UNTIL_EXPR ( qualifyExpression )+ ) -> qualifyExpression ;
    public final EsperEPL2GrammarParser.matchUntilExpression_return matchUntilExpression() throws RecognitionException {
        EsperEPL2GrammarParser.matchUntilExpression_return retval = new EsperEPL2GrammarParser.matchUntilExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token a=null;
        EsperEPL2GrammarParser.matchUntilRange_return r = null;

        EsperEPL2GrammarParser.qualifyExpression_return qualifyExpression453 = null;

        EsperEPL2GrammarParser.qualifyExpression_return qualifyExpression454 = null;


        CommonTree a_tree=null;
        RewriteRuleTokenStream stream_UNTIL=new RewriteRuleTokenStream(adaptor,"token UNTIL");
        RewriteRuleSubtreeStream stream_qualifyExpression=new RewriteRuleSubtreeStream(adaptor,"rule qualifyExpression");
        RewriteRuleSubtreeStream stream_matchUntilRange=new RewriteRuleSubtreeStream(adaptor,"rule matchUntilRange");
        try {
            // EsperEPL2Grammar.g:1112:2: ( (r= matchUntilRange )? qualifyExpression (a= UNTIL qualifyExpression )? -> {r != null && a != null}? ^( MATCH_UNTIL_EXPR matchUntilRange ( qualifyExpression )+ ) -> {r != null && a == null}? ^( MATCH_UNTIL_EXPR matchUntilRange qualifyExpression ) -> {$a != null}? ^( MATCH_UNTIL_EXPR ( qualifyExpression )+ ) -> qualifyExpression )
            // EsperEPL2Grammar.g:1112:4: (r= matchUntilRange )? qualifyExpression (a= UNTIL qualifyExpression )?
            {
            // EsperEPL2Grammar.g:1112:4: (r= matchUntilRange )?
            int alt162=2;
            int LA162_0 = input.LA(1);

            if ( (LA162_0==LBRACK) ) {
                alt162=1;
            }
            switch (alt162) {
                case 1 :
                    // EsperEPL2Grammar.g:1112:5: r= matchUntilRange
                    {
                    pushFollow(FOLLOW_matchUntilRange_in_matchUntilExpression6813);
                    r=matchUntilRange();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_matchUntilRange.add(r.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_qualifyExpression_in_matchUntilExpression6817);
            qualifyExpression453=qualifyExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_qualifyExpression.add(qualifyExpression453.getTree());
            // EsperEPL2Grammar.g:1112:43: (a= UNTIL qualifyExpression )?
            int alt163=2;
            int LA163_0 = input.LA(1);

            if ( (LA163_0==UNTIL) ) {
                alt163=1;
            }
            switch (alt163) {
                case 1 :
                    // EsperEPL2Grammar.g:1112:44: a= UNTIL qualifyExpression
                    {
                    a=(Token)match(input,UNTIL,FOLLOW_UNTIL_in_matchUntilExpression6822); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_UNTIL.add(a);

                    pushFollow(FOLLOW_qualifyExpression_in_matchUntilExpression6824);
                    qualifyExpression454=qualifyExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_qualifyExpression.add(qualifyExpression454.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: qualifyExpression, qualifyExpression, qualifyExpression, matchUntilRange, matchUntilRange, qualifyExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1113:3: -> {r != null && a != null}? ^( MATCH_UNTIL_EXPR matchUntilRange ( qualifyExpression )+ )
            if (r != null && a != null) {
                // EsperEPL2Grammar.g:1113:32: ^( MATCH_UNTIL_EXPR matchUntilRange ( qualifyExpression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_1);

                adaptor.addChild(root_1, stream_matchUntilRange.nextTree());
                if ( !(stream_qualifyExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_qualifyExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_qualifyExpression.nextTree());

                }
                stream_qualifyExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1114:3: -> {r != null && a == null}? ^( MATCH_UNTIL_EXPR matchUntilRange qualifyExpression )
            if (r != null && a == null) {
                // EsperEPL2Grammar.g:1114:32: ^( MATCH_UNTIL_EXPR matchUntilRange qualifyExpression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_1);

                adaptor.addChild(root_1, stream_matchUntilRange.nextTree());
                adaptor.addChild(root_1, stream_qualifyExpression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1115:3: -> {$a != null}? ^( MATCH_UNTIL_EXPR ( qualifyExpression )+ )
            if (a != null) {
                // EsperEPL2Grammar.g:1115:20: ^( MATCH_UNTIL_EXPR ( qualifyExpression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_1);

                if ( !(stream_qualifyExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_qualifyExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_qualifyExpression.nextTree());

                }
                stream_qualifyExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1116:3: -> qualifyExpression
            {
                adaptor.addChild(root_0, stream_qualifyExpression.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchUntilExpression"

    public static class qualifyExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "qualifyExpression"
    // EsperEPL2Grammar.g:1119:1: qualifyExpression : ( (e= EVERY_EXPR | s= RESUME_EXPR | n= NOT_EXPR ) (r= matchUntilRange )? )? guardPostFix -> {e != null && r == null}? ^( EVERY_EXPR guardPostFix ) -> {n != null && r == null}? ^( PATTERN_NOT_EXPR guardPostFix ) -> {s != null && r == null}? ^( RESUME_EXPR guardPostFix ) -> {e != null && r != null}? ^( EVERY_EXPR ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix ) ) -> {n != null && r != null}? ^( PATTERN_NOT_EXPR ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix ) ) -> {s != null && r != null}? ^( RESUME_EXPR ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix ) ) -> guardPostFix ;
    public final EsperEPL2GrammarParser.qualifyExpression_return qualifyExpression() throws RecognitionException {
        EsperEPL2GrammarParser.qualifyExpression_return retval = new EsperEPL2GrammarParser.qualifyExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token e=null;
        Token s=null;
        Token n=null;
        EsperEPL2GrammarParser.matchUntilRange_return r = null;

        EsperEPL2GrammarParser.guardPostFix_return guardPostFix455 = null;


        CommonTree e_tree=null;
        CommonTree s_tree=null;
        CommonTree n_tree=null;
        RewriteRuleTokenStream stream_NOT_EXPR=new RewriteRuleTokenStream(adaptor,"token NOT_EXPR");
        RewriteRuleTokenStream stream_EVERY_EXPR=new RewriteRuleTokenStream(adaptor,"token EVERY_EXPR");
        RewriteRuleTokenStream stream_RESUME_EXPR=new RewriteRuleTokenStream(adaptor,"token RESUME_EXPR");
        RewriteRuleSubtreeStream stream_guardPostFix=new RewriteRuleSubtreeStream(adaptor,"rule guardPostFix");
        RewriteRuleSubtreeStream stream_matchUntilRange=new RewriteRuleSubtreeStream(adaptor,"rule matchUntilRange");
        try {
            // EsperEPL2Grammar.g:1120:2: ( ( (e= EVERY_EXPR | s= RESUME_EXPR | n= NOT_EXPR ) (r= matchUntilRange )? )? guardPostFix -> {e != null && r == null}? ^( EVERY_EXPR guardPostFix ) -> {n != null && r == null}? ^( PATTERN_NOT_EXPR guardPostFix ) -> {s != null && r == null}? ^( RESUME_EXPR guardPostFix ) -> {e != null && r != null}? ^( EVERY_EXPR ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix ) ) -> {n != null && r != null}? ^( PATTERN_NOT_EXPR ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix ) ) -> {s != null && r != null}? ^( RESUME_EXPR ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix ) ) -> guardPostFix )
            // EsperEPL2Grammar.g:1120:4: ( (e= EVERY_EXPR | s= RESUME_EXPR | n= NOT_EXPR ) (r= matchUntilRange )? )? guardPostFix
            {
            // EsperEPL2Grammar.g:1120:4: ( (e= EVERY_EXPR | s= RESUME_EXPR | n= NOT_EXPR ) (r= matchUntilRange )? )?
            int alt166=2;
            int LA166_0 = input.LA(1);

            if ( ((LA166_0>=NOT_EXPR && LA166_0<=RESUME_EXPR)) ) {
                alt166=1;
            }
            switch (alt166) {
                case 1 :
                    // EsperEPL2Grammar.g:1120:5: (e= EVERY_EXPR | s= RESUME_EXPR | n= NOT_EXPR ) (r= matchUntilRange )?
                    {
                    // EsperEPL2Grammar.g:1120:5: (e= EVERY_EXPR | s= RESUME_EXPR | n= NOT_EXPR )
                    int alt164=3;
                    switch ( input.LA(1) ) {
                    case EVERY_EXPR:
                        {
                        alt164=1;
                        }
                        break;
                    case RESUME_EXPR:
                        {
                        alt164=2;
                        }
                        break;
                    case NOT_EXPR:
                        {
                        alt164=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 164, 0, input);

                        throw nvae;
                    }

                    switch (alt164) {
                        case 1 :
                            // EsperEPL2Grammar.g:1120:6: e= EVERY_EXPR
                            {
                            e=(Token)match(input,EVERY_EXPR,FOLLOW_EVERY_EXPR_in_qualifyExpression6889); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_EVERY_EXPR.add(e);


                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1120:21: s= RESUME_EXPR
                            {
                            s=(Token)match(input,RESUME_EXPR,FOLLOW_RESUME_EXPR_in_qualifyExpression6895); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_RESUME_EXPR.add(s);


                            }
                            break;
                        case 3 :
                            // EsperEPL2Grammar.g:1120:37: n= NOT_EXPR
                            {
                            n=(Token)match(input,NOT_EXPR,FOLLOW_NOT_EXPR_in_qualifyExpression6901); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NOT_EXPR.add(n);


                            }
                            break;

                    }

                    // EsperEPL2Grammar.g:1120:49: (r= matchUntilRange )?
                    int alt165=2;
                    int LA165_0 = input.LA(1);

                    if ( (LA165_0==LBRACK) ) {
                        alt165=1;
                    }
                    switch (alt165) {
                        case 1 :
                            // EsperEPL2Grammar.g:1120:50: r= matchUntilRange
                            {
                            pushFollow(FOLLOW_matchUntilRange_in_qualifyExpression6907);
                            r=matchUntilRange();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_matchUntilRange.add(r.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }

            pushFollow(FOLLOW_guardPostFix_in_qualifyExpression6916);
            guardPostFix455=guardPostFix();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_guardPostFix.add(guardPostFix455.getTree());


            // AST REWRITE
            // elements: guardPostFix, guardPostFix, matchUntilRange, guardPostFix, guardPostFix, RESUME_EXPR, matchUntilRange, EVERY_EXPR, EVERY_EXPR, guardPostFix, RESUME_EXPR, guardPostFix, guardPostFix, matchUntilRange
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1122:3: -> {e != null && r == null}? ^( EVERY_EXPR guardPostFix )
            if (e != null && r == null) {
                // EsperEPL2Grammar.g:1122:32: ^( EVERY_EXPR guardPostFix )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_EVERY_EXPR.nextNode(), root_1);

                adaptor.addChild(root_1, stream_guardPostFix.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1123:3: -> {n != null && r == null}? ^( PATTERN_NOT_EXPR guardPostFix )
            if (n != null && r == null) {
                // EsperEPL2Grammar.g:1123:32: ^( PATTERN_NOT_EXPR guardPostFix )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATTERN_NOT_EXPR, "PATTERN_NOT_EXPR"), root_1);

                adaptor.addChild(root_1, stream_guardPostFix.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1124:3: -> {s != null && r == null}? ^( RESUME_EXPR guardPostFix )
            if (s != null && r == null) {
                // EsperEPL2Grammar.g:1124:32: ^( RESUME_EXPR guardPostFix )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_RESUME_EXPR.nextNode(), root_1);

                adaptor.addChild(root_1, stream_guardPostFix.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1125:3: -> {e != null && r != null}? ^( EVERY_EXPR ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix ) )
            if (e != null && r != null) {
                // EsperEPL2Grammar.g:1125:32: ^( EVERY_EXPR ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_EVERY_EXPR.nextNode(), root_1);

                // EsperEPL2Grammar.g:1125:45: ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_2);

                adaptor.addChild(root_2, stream_matchUntilRange.nextTree());
                adaptor.addChild(root_2, stream_guardPostFix.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1126:3: -> {n != null && r != null}? ^( PATTERN_NOT_EXPR ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix ) )
            if (n != null && r != null) {
                // EsperEPL2Grammar.g:1126:32: ^( PATTERN_NOT_EXPR ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATTERN_NOT_EXPR, "PATTERN_NOT_EXPR"), root_1);

                // EsperEPL2Grammar.g:1126:51: ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_2);

                adaptor.addChild(root_2, stream_matchUntilRange.nextTree());
                adaptor.addChild(root_2, stream_guardPostFix.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1127:3: -> {s != null && r != null}? ^( RESUME_EXPR ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix ) )
            if (s != null && r != null) {
                // EsperEPL2Grammar.g:1127:32: ^( RESUME_EXPR ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_RESUME_EXPR.nextNode(), root_1);

                // EsperEPL2Grammar.g:1127:46: ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_2);

                adaptor.addChild(root_2, stream_matchUntilRange.nextTree());
                adaptor.addChild(root_2, stream_guardPostFix.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1128:3: -> guardPostFix
            {
                adaptor.addChild(root_0, stream_guardPostFix.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "qualifyExpression"

    public static class guardPostFix_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "guardPostFix"
    // EsperEPL2Grammar.g:1131:1: guardPostFix : ( atomicExpression | l= LPAREN patternExpression RPAREN ) (w= WHERE guardExpression )? -> {$w != null}? ^( GUARD_EXPR ( atomicExpression )? ( patternExpression )? guardExpression ) -> ( atomicExpression )? ( patternExpression )? ;
    public final EsperEPL2GrammarParser.guardPostFix_return guardPostFix() throws RecognitionException {
        EsperEPL2GrammarParser.guardPostFix_return retval = new EsperEPL2GrammarParser.guardPostFix_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token l=null;
        Token w=null;
        Token RPAREN458=null;
        EsperEPL2GrammarParser.atomicExpression_return atomicExpression456 = null;

        EsperEPL2GrammarParser.patternExpression_return patternExpression457 = null;

        EsperEPL2GrammarParser.guardExpression_return guardExpression459 = null;


        CommonTree l_tree=null;
        CommonTree w_tree=null;
        CommonTree RPAREN458_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_guardExpression=new RewriteRuleSubtreeStream(adaptor,"rule guardExpression");
        RewriteRuleSubtreeStream stream_atomicExpression=new RewriteRuleSubtreeStream(adaptor,"rule atomicExpression");
        RewriteRuleSubtreeStream stream_patternExpression=new RewriteRuleSubtreeStream(adaptor,"rule patternExpression");
        try {
            // EsperEPL2Grammar.g:1132:2: ( ( atomicExpression | l= LPAREN patternExpression RPAREN ) (w= WHERE guardExpression )? -> {$w != null}? ^( GUARD_EXPR ( atomicExpression )? ( patternExpression )? guardExpression ) -> ( atomicExpression )? ( patternExpression )? )
            // EsperEPL2Grammar.g:1132:4: ( atomicExpression | l= LPAREN patternExpression RPAREN ) (w= WHERE guardExpression )?
            {
            // EsperEPL2Grammar.g:1132:4: ( atomicExpression | l= LPAREN patternExpression RPAREN )
            int alt167=2;
            int LA167_0 = input.LA(1);

            if ( (LA167_0==IDENT||LA167_0==TICKED_STRING_LITERAL) ) {
                alt167=1;
            }
            else if ( (LA167_0==LPAREN) ) {
                alt167=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 167, 0, input);

                throw nvae;
            }
            switch (alt167) {
                case 1 :
                    // EsperEPL2Grammar.g:1132:5: atomicExpression
                    {
                    pushFollow(FOLLOW_atomicExpression_in_guardPostFix7028);
                    atomicExpression456=atomicExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_atomicExpression.add(atomicExpression456.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1132:24: l= LPAREN patternExpression RPAREN
                    {
                    l=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_guardPostFix7034); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(l);

                    pushFollow(FOLLOW_patternExpression_in_guardPostFix7036);
                    patternExpression457=patternExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_patternExpression.add(patternExpression457.getTree());
                    RPAREN458=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_guardPostFix7038); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN458);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:1132:59: (w= WHERE guardExpression )?
            int alt168=2;
            int LA168_0 = input.LA(1);

            if ( (LA168_0==WHERE) ) {
                alt168=1;
            }
            switch (alt168) {
                case 1 :
                    // EsperEPL2Grammar.g:1132:60: w= WHERE guardExpression
                    {
                    w=(Token)match(input,WHERE,FOLLOW_WHERE_in_guardPostFix7044); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(w);

                    pushFollow(FOLLOW_guardExpression_in_guardPostFix7046);
                    guardExpression459=guardExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_guardExpression.add(guardExpression459.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: patternExpression, atomicExpression, patternExpression, guardExpression, atomicExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1133:3: -> {$w != null}? ^( GUARD_EXPR ( atomicExpression )? ( patternExpression )? guardExpression )
            if (w != null) {
                // EsperEPL2Grammar.g:1133:20: ^( GUARD_EXPR ( atomicExpression )? ( patternExpression )? guardExpression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GUARD_EXPR, "GUARD_EXPR"), root_1);

                // EsperEPL2Grammar.g:1133:33: ( atomicExpression )?
                if ( stream_atomicExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_atomicExpression.nextTree());

                }
                stream_atomicExpression.reset();
                // EsperEPL2Grammar.g:1133:51: ( patternExpression )?
                if ( stream_patternExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_patternExpression.nextTree());

                }
                stream_patternExpression.reset();
                adaptor.addChild(root_1, stream_guardExpression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1134:3: -> ( atomicExpression )? ( patternExpression )?
            {
                // EsperEPL2Grammar.g:1134:6: ( atomicExpression )?
                if ( stream_atomicExpression.hasNext() ) {
                    adaptor.addChild(root_0, stream_atomicExpression.nextTree());

                }
                stream_atomicExpression.reset();
                // EsperEPL2Grammar.g:1134:24: ( patternExpression )?
                if ( stream_patternExpression.hasNext() ) {
                    adaptor.addChild(root_0, stream_patternExpression.nextTree());

                }
                stream_patternExpression.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "guardPostFix"

    public static class atomicExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "atomicExpression"
    // EsperEPL2Grammar.g:1137:1: atomicExpression : ( observerExpression | patternFilterExpression );
    public final EsperEPL2GrammarParser.atomicExpression_return atomicExpression() throws RecognitionException {
        EsperEPL2GrammarParser.atomicExpression_return retval = new EsperEPL2GrammarParser.atomicExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.observerExpression_return observerExpression460 = null;

        EsperEPL2GrammarParser.patternFilterExpression_return patternFilterExpression461 = null;



        try {
            // EsperEPL2Grammar.g:1138:2: ( observerExpression | patternFilterExpression )
            int alt169=2;
            int LA169_0 = input.LA(1);

            if ( (LA169_0==IDENT) ) {
                int LA169_1 = input.LA(2);

                if ( (LA169_1==COLON) ) {
                    alt169=1;
                }
                else if ( (LA169_1==EOF||(LA169_1>=OR_EXPR && LA169_1<=AND_EXPR)||LA169_1==WHERE||LA169_1==DISTINCT||LA169_1==UNTIL||(LA169_1>=EQUALS && LA169_1<=RPAREN)||(LA169_1>=LBRACK && LA169_1<=RBRACK)||LA169_1==FOLLOWED_BY) ) {
                    alt169=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 169, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA169_0==TICKED_STRING_LITERAL) ) {
                alt169=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 169, 0, input);

                throw nvae;
            }
            switch (alt169) {
                case 1 :
                    // EsperEPL2Grammar.g:1138:4: observerExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_observerExpression_in_atomicExpression7088);
                    observerExpression460=observerExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, observerExpression460.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1138:25: patternFilterExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_patternFilterExpression_in_atomicExpression7092);
                    patternFilterExpression461=patternFilterExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, patternFilterExpression461.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "atomicExpression"

    public static class observerExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "observerExpression"
    // EsperEPL2Grammar.g:1141:1: observerExpression : ns= IDENT COLON (nm= IDENT | a= AT ) LPAREN ( expressionWithTimeList )? RPAREN -> {$a != null}? ^( OBSERVER_EXPR $ns ^( IDENT[$a.text] ) ( expressionWithTimeList )? ) -> ^( OBSERVER_EXPR $ns $nm ( expressionWithTimeList )? ) ;
    public final EsperEPL2GrammarParser.observerExpression_return observerExpression() throws RecognitionException {
        EsperEPL2GrammarParser.observerExpression_return retval = new EsperEPL2GrammarParser.observerExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token ns=null;
        Token nm=null;
        Token a=null;
        Token COLON462=null;
        Token LPAREN463=null;
        Token RPAREN465=null;
        EsperEPL2GrammarParser.expressionWithTimeList_return expressionWithTimeList464 = null;


        CommonTree ns_tree=null;
        CommonTree nm_tree=null;
        CommonTree a_tree=null;
        CommonTree COLON462_tree=null;
        CommonTree LPAREN463_tree=null;
        CommonTree RPAREN465_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_AT=new RewriteRuleTokenStream(adaptor,"token AT");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionWithTimeList=new RewriteRuleSubtreeStream(adaptor,"rule expressionWithTimeList");
        try {
            // EsperEPL2Grammar.g:1142:2: (ns= IDENT COLON (nm= IDENT | a= AT ) LPAREN ( expressionWithTimeList )? RPAREN -> {$a != null}? ^( OBSERVER_EXPR $ns ^( IDENT[$a.text] ) ( expressionWithTimeList )? ) -> ^( OBSERVER_EXPR $ns $nm ( expressionWithTimeList )? ) )
            // EsperEPL2Grammar.g:1142:4: ns= IDENT COLON (nm= IDENT | a= AT ) LPAREN ( expressionWithTimeList )? RPAREN
            {
            ns=(Token)match(input,IDENT,FOLLOW_IDENT_in_observerExpression7107); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(ns);

            COLON462=(Token)match(input,COLON,FOLLOW_COLON_in_observerExpression7109); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON462);

            // EsperEPL2Grammar.g:1142:19: (nm= IDENT | a= AT )
            int alt170=2;
            int LA170_0 = input.LA(1);

            if ( (LA170_0==IDENT) ) {
                alt170=1;
            }
            else if ( (LA170_0==AT) ) {
                alt170=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 170, 0, input);

                throw nvae;
            }
            switch (alt170) {
                case 1 :
                    // EsperEPL2Grammar.g:1142:20: nm= IDENT
                    {
                    nm=(Token)match(input,IDENT,FOLLOW_IDENT_in_observerExpression7114); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(nm);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1142:31: a= AT
                    {
                    a=(Token)match(input,AT,FOLLOW_AT_in_observerExpression7120); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AT.add(a);


                    }
                    break;

            }

            LPAREN463=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_observerExpression7123); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN463);

            // EsperEPL2Grammar.g:1142:44: ( expressionWithTimeList )?
            int alt171=2;
            int LA171_0 = input.LA(1);

            if ( (LA171_0==WINDOW||LA171_0==ESCAPE||(LA171_0>=NOT_EXPR && LA171_0<=EVERY_EXPR)||(LA171_0>=SUM && LA171_0<=COUNT)||LA171_0==CASE||LA171_0==OUTER||(LA171_0>=JOIN && LA171_0<=FULL)||(LA171_0>=EVENTS && LA171_0<=LAST)||(LA171_0>=UNIDIRECTIONAL && LA171_0<=CURRENT_TIMESTAMP)||LA171_0==SNAPSHOT||(LA171_0>=VARIABLE && LA171_0<=AT)||(LA171_0>=BOOLEAN_TRUE && LA171_0<=VALUE_NULL)||LA171_0==NUM_DOUBLE||LA171_0==IDENT||LA171_0==LPAREN||(LA171_0>=STAR && LA171_0<=LBRACK)||(LA171_0>=STRING_LITERAL && LA171_0<=QUOTED_STRING_LITERAL)||(LA171_0>=PLUS && LA171_0<=MINUS)||LA171_0==LCURLY||LA171_0==NUM_INT||LA171_0==QUESTION||(LA171_0>=TICKED_STRING_LITERAL && LA171_0<=NUM_FLOAT)) ) {
                alt171=1;
            }
            switch (alt171) {
                case 1 :
                    // EsperEPL2Grammar.g:1142:44: expressionWithTimeList
                    {
                    pushFollow(FOLLOW_expressionWithTimeList_in_observerExpression7125);
                    expressionWithTimeList464=expressionWithTimeList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expressionWithTimeList.add(expressionWithTimeList464.getTree());

                    }
                    break;

            }

            RPAREN465=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_observerExpression7128); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN465);



            // AST REWRITE
            // elements: ns, nm, expressionWithTimeList, ns, IDENT, expressionWithTimeList
            // token labels: ns, nm
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_ns=new RewriteRuleTokenStream(adaptor,"token ns",ns);
            RewriteRuleTokenStream stream_nm=new RewriteRuleTokenStream(adaptor,"token nm",nm);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1143:3: -> {$a != null}? ^( OBSERVER_EXPR $ns ^( IDENT[$a.text] ) ( expressionWithTimeList )? )
            if (a != null) {
                // EsperEPL2Grammar.g:1143:20: ^( OBSERVER_EXPR $ns ^( IDENT[$a.text] ) ( expressionWithTimeList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(OBSERVER_EXPR, "OBSERVER_EXPR"), root_1);

                adaptor.addChild(root_1, stream_ns.nextNode());
                // EsperEPL2Grammar.g:1143:40: ^( IDENT[$a.text] )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IDENT, (a!=null?a.getText():null)), root_2);

                adaptor.addChild(root_1, root_2);
                }
                // EsperEPL2Grammar.g:1143:58: ( expressionWithTimeList )?
                if ( stream_expressionWithTimeList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionWithTimeList.nextTree());

                }
                stream_expressionWithTimeList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1144:3: -> ^( OBSERVER_EXPR $ns $nm ( expressionWithTimeList )? )
            {
                // EsperEPL2Grammar.g:1144:6: ^( OBSERVER_EXPR $ns $nm ( expressionWithTimeList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(OBSERVER_EXPR, "OBSERVER_EXPR"), root_1);

                adaptor.addChild(root_1, stream_ns.nextNode());
                adaptor.addChild(root_1, stream_nm.nextNode());
                // EsperEPL2Grammar.g:1144:30: ( expressionWithTimeList )?
                if ( stream_expressionWithTimeList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionWithTimeList.nextTree());

                }
                stream_expressionWithTimeList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "observerExpression"

    public static class guardExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "guardExpression"
    // EsperEPL2Grammar.g:1147:1: guardExpression : IDENT COLON IDENT LPAREN ( expressionWithTimeList )? RPAREN ;
    public final EsperEPL2GrammarParser.guardExpression_return guardExpression() throws RecognitionException {
        EsperEPL2GrammarParser.guardExpression_return retval = new EsperEPL2GrammarParser.guardExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token IDENT466=null;
        Token COLON467=null;
        Token IDENT468=null;
        Token LPAREN469=null;
        Token RPAREN471=null;
        EsperEPL2GrammarParser.expressionWithTimeList_return expressionWithTimeList470 = null;


        CommonTree IDENT466_tree=null;
        CommonTree COLON467_tree=null;
        CommonTree IDENT468_tree=null;
        CommonTree LPAREN469_tree=null;
        CommonTree RPAREN471_tree=null;

        try {
            // EsperEPL2Grammar.g:1148:2: ( IDENT COLON IDENT LPAREN ( expressionWithTimeList )? RPAREN )
            // EsperEPL2Grammar.g:1148:4: IDENT COLON IDENT LPAREN ( expressionWithTimeList )? RPAREN
            {
            root_0 = (CommonTree)adaptor.nil();

            IDENT466=(Token)match(input,IDENT,FOLLOW_IDENT_in_guardExpression7177); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IDENT466_tree = (CommonTree)adaptor.create(IDENT466);
            adaptor.addChild(root_0, IDENT466_tree);
            }
            COLON467=(Token)match(input,COLON,FOLLOW_COLON_in_guardExpression7179); if (state.failed) return retval;
            IDENT468=(Token)match(input,IDENT,FOLLOW_IDENT_in_guardExpression7182); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IDENT468_tree = (CommonTree)adaptor.create(IDENT468);
            adaptor.addChild(root_0, IDENT468_tree);
            }
            LPAREN469=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_guardExpression7184); if (state.failed) return retval;
            // EsperEPL2Grammar.g:1148:31: ( expressionWithTimeList )?
            int alt172=2;
            int LA172_0 = input.LA(1);

            if ( (LA172_0==WINDOW||LA172_0==ESCAPE||(LA172_0>=NOT_EXPR && LA172_0<=EVERY_EXPR)||(LA172_0>=SUM && LA172_0<=COUNT)||LA172_0==CASE||LA172_0==OUTER||(LA172_0>=JOIN && LA172_0<=FULL)||(LA172_0>=EVENTS && LA172_0<=LAST)||(LA172_0>=UNIDIRECTIONAL && LA172_0<=CURRENT_TIMESTAMP)||LA172_0==SNAPSHOT||(LA172_0>=VARIABLE && LA172_0<=AT)||(LA172_0>=BOOLEAN_TRUE && LA172_0<=VALUE_NULL)||LA172_0==NUM_DOUBLE||LA172_0==IDENT||LA172_0==LPAREN||(LA172_0>=STAR && LA172_0<=LBRACK)||(LA172_0>=STRING_LITERAL && LA172_0<=QUOTED_STRING_LITERAL)||(LA172_0>=PLUS && LA172_0<=MINUS)||LA172_0==LCURLY||LA172_0==NUM_INT||LA172_0==QUESTION||(LA172_0>=TICKED_STRING_LITERAL && LA172_0<=NUM_FLOAT)) ) {
                alt172=1;
            }
            switch (alt172) {
                case 1 :
                    // EsperEPL2Grammar.g:1148:32: expressionWithTimeList
                    {
                    pushFollow(FOLLOW_expressionWithTimeList_in_guardExpression7188);
                    expressionWithTimeList470=expressionWithTimeList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionWithTimeList470.getTree());

                    }
                    break;

            }

            RPAREN471=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_guardExpression7192); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "guardExpression"

    public static class matchUntilRange_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchUntilRange"
    // EsperEPL2Grammar.g:1152:1: matchUntilRange : LBRACK (l= NUM_INT ( (d1= DOT DOT (r= NUM_INT )? ) | (c1= COLON r= NUM_INT ) )? | db= NUM_DOUBLE (d1= DOT (r= NUM_INT )? | db2= NUM_DOUBLE )? | DOT DOT r= NUM_INT | DOT db3= NUM_DOUBLE ) RBRACK -> {$l != null && d1 != null && r != null}? ^( MATCH_UNTIL_RANGE_CLOSED $l $r) -> {$l != null && d1 != null}? ^( MATCH_UNTIL_RANGE_HALFOPEN $l) -> {$l != null && c1 != null}? ^( MATCH_UNTIL_RANGE_CLOSED $l $r) -> {$l != null}? ^( MATCH_UNTIL_RANGE_BOUNDED $l) -> {$db != null && d1 != null && r != null}? ^( MATCH_UNTIL_RANGE_CLOSED $db $r) -> {$db != null && d1 != null}? ^( MATCH_UNTIL_RANGE_HALFOPEN $db) -> {$db != null && db2 != null}? ^( MATCH_UNTIL_RANGE_CLOSED $db $db2) -> {$db3 != null}? ^( MATCH_UNTIL_RANGE_HALFCLOSED $db3) -> {$r != null}? ^( MATCH_UNTIL_RANGE_HALFCLOSED $r) -> ^( MATCH_UNTIL_RANGE_HALFCLOSED $db) ;
    public final EsperEPL2GrammarParser.matchUntilRange_return matchUntilRange() throws RecognitionException {
        EsperEPL2GrammarParser.matchUntilRange_return retval = new EsperEPL2GrammarParser.matchUntilRange_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token l=null;
        Token d1=null;
        Token r=null;
        Token c1=null;
        Token db=null;
        Token db2=null;
        Token db3=null;
        Token LBRACK472=null;
        Token DOT473=null;
        Token DOT474=null;
        Token DOT475=null;
        Token DOT476=null;
        Token RBRACK477=null;

        CommonTree l_tree=null;
        CommonTree d1_tree=null;
        CommonTree r_tree=null;
        CommonTree c1_tree=null;
        CommonTree db_tree=null;
        CommonTree db2_tree=null;
        CommonTree db3_tree=null;
        CommonTree LBRACK472_tree=null;
        CommonTree DOT473_tree=null;
        CommonTree DOT474_tree=null;
        CommonTree DOT475_tree=null;
        CommonTree DOT476_tree=null;
        CommonTree RBRACK477_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_NUM_DOUBLE=new RewriteRuleTokenStream(adaptor,"token NUM_DOUBLE");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_NUM_INT=new RewriteRuleTokenStream(adaptor,"token NUM_INT");

        try {
            // EsperEPL2Grammar.g:1153:2: ( LBRACK (l= NUM_INT ( (d1= DOT DOT (r= NUM_INT )? ) | (c1= COLON r= NUM_INT ) )? | db= NUM_DOUBLE (d1= DOT (r= NUM_INT )? | db2= NUM_DOUBLE )? | DOT DOT r= NUM_INT | DOT db3= NUM_DOUBLE ) RBRACK -> {$l != null && d1 != null && r != null}? ^( MATCH_UNTIL_RANGE_CLOSED $l $r) -> {$l != null && d1 != null}? ^( MATCH_UNTIL_RANGE_HALFOPEN $l) -> {$l != null && c1 != null}? ^( MATCH_UNTIL_RANGE_CLOSED $l $r) -> {$l != null}? ^( MATCH_UNTIL_RANGE_BOUNDED $l) -> {$db != null && d1 != null && r != null}? ^( MATCH_UNTIL_RANGE_CLOSED $db $r) -> {$db != null && d1 != null}? ^( MATCH_UNTIL_RANGE_HALFOPEN $db) -> {$db != null && db2 != null}? ^( MATCH_UNTIL_RANGE_CLOSED $db $db2) -> {$db3 != null}? ^( MATCH_UNTIL_RANGE_HALFCLOSED $db3) -> {$r != null}? ^( MATCH_UNTIL_RANGE_HALFCLOSED $r) -> ^( MATCH_UNTIL_RANGE_HALFCLOSED $db) )
            // EsperEPL2Grammar.g:1153:4: LBRACK (l= NUM_INT ( (d1= DOT DOT (r= NUM_INT )? ) | (c1= COLON r= NUM_INT ) )? | db= NUM_DOUBLE (d1= DOT (r= NUM_INT )? | db2= NUM_DOUBLE )? | DOT DOT r= NUM_INT | DOT db3= NUM_DOUBLE ) RBRACK
            {
            LBRACK472=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_matchUntilRange7206); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK472);

            // EsperEPL2Grammar.g:1153:11: (l= NUM_INT ( (d1= DOT DOT (r= NUM_INT )? ) | (c1= COLON r= NUM_INT ) )? | db= NUM_DOUBLE (d1= DOT (r= NUM_INT )? | db2= NUM_DOUBLE )? | DOT DOT r= NUM_INT | DOT db3= NUM_DOUBLE )
            int alt177=4;
            switch ( input.LA(1) ) {
            case NUM_INT:
                {
                alt177=1;
                }
                break;
            case NUM_DOUBLE:
                {
                alt177=2;
                }
                break;
            case DOT:
                {
                int LA177_3 = input.LA(2);

                if ( (LA177_3==DOT) ) {
                    alt177=3;
                }
                else if ( (LA177_3==NUM_DOUBLE) ) {
                    alt177=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 177, 3, input);

                    throw nvae;
                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 177, 0, input);

                throw nvae;
            }

            switch (alt177) {
                case 1 :
                    // EsperEPL2Grammar.g:1154:4: l= NUM_INT ( (d1= DOT DOT (r= NUM_INT )? ) | (c1= COLON r= NUM_INT ) )?
                    {
                    l=(Token)match(input,NUM_INT,FOLLOW_NUM_INT_in_matchUntilRange7215); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_INT.add(l);

                    // EsperEPL2Grammar.g:1154:14: ( (d1= DOT DOT (r= NUM_INT )? ) | (c1= COLON r= NUM_INT ) )?
                    int alt174=3;
                    int LA174_0 = input.LA(1);

                    if ( (LA174_0==DOT) ) {
                        alt174=1;
                    }
                    else if ( (LA174_0==COLON) ) {
                        alt174=2;
                    }
                    switch (alt174) {
                        case 1 :
                            // EsperEPL2Grammar.g:1154:17: (d1= DOT DOT (r= NUM_INT )? )
                            {
                            // EsperEPL2Grammar.g:1154:17: (d1= DOT DOT (r= NUM_INT )? )
                            // EsperEPL2Grammar.g:1154:18: d1= DOT DOT (r= NUM_INT )?
                            {
                            d1=(Token)match(input,DOT,FOLLOW_DOT_in_matchUntilRange7223); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DOT.add(d1);

                            DOT473=(Token)match(input,DOT,FOLLOW_DOT_in_matchUntilRange7225); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DOT.add(DOT473);

                            // EsperEPL2Grammar.g:1154:30: (r= NUM_INT )?
                            int alt173=2;
                            int LA173_0 = input.LA(1);

                            if ( (LA173_0==NUM_INT) ) {
                                alt173=1;
                            }
                            switch (alt173) {
                                case 1 :
                                    // EsperEPL2Grammar.g:1154:30: r= NUM_INT
                                    {
                                    r=(Token)match(input,NUM_INT,FOLLOW_NUM_INT_in_matchUntilRange7229); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_NUM_INT.add(r);


                                    }
                                    break;

                            }


                            }


                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1155:17: (c1= COLON r= NUM_INT )
                            {
                            // EsperEPL2Grammar.g:1155:17: (c1= COLON r= NUM_INT )
                            // EsperEPL2Grammar.g:1155:18: c1= COLON r= NUM_INT
                            {
                            c1=(Token)match(input,COLON,FOLLOW_COLON_in_matchUntilRange7253); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COLON.add(c1);

                            r=(Token)match(input,NUM_INT,FOLLOW_NUM_INT_in_matchUntilRange7257); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NUM_INT.add(r);


                            }


                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1157:8: db= NUM_DOUBLE (d1= DOT (r= NUM_INT )? | db2= NUM_DOUBLE )?
                    {
                    db=(Token)match(input,NUM_DOUBLE,FOLLOW_NUM_DOUBLE_in_matchUntilRange7279); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_DOUBLE.add(db);

                    // EsperEPL2Grammar.g:1157:22: (d1= DOT (r= NUM_INT )? | db2= NUM_DOUBLE )?
                    int alt176=3;
                    int LA176_0 = input.LA(1);

                    if ( (LA176_0==DOT) ) {
                        alt176=1;
                    }
                    else if ( (LA176_0==NUM_DOUBLE) ) {
                        alt176=2;
                    }
                    switch (alt176) {
                        case 1 :
                            // EsperEPL2Grammar.g:1158:27: d1= DOT (r= NUM_INT )?
                            {
                            d1=(Token)match(input,DOT,FOLLOW_DOT_in_matchUntilRange7311); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DOT.add(d1);

                            // EsperEPL2Grammar.g:1158:35: (r= NUM_INT )?
                            int alt175=2;
                            int LA175_0 = input.LA(1);

                            if ( (LA175_0==NUM_INT) ) {
                                alt175=1;
                            }
                            switch (alt175) {
                                case 1 :
                                    // EsperEPL2Grammar.g:1158:35: r= NUM_INT
                                    {
                                    r=(Token)match(input,NUM_INT,FOLLOW_NUM_INT_in_matchUntilRange7315); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_NUM_INT.add(r);


                                    }
                                    break;

                            }


                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1160:27: db2= NUM_DOUBLE
                            {
                            db2=(Token)match(input,NUM_DOUBLE,FOLLOW_NUM_DOUBLE_in_matchUntilRange7375); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NUM_DOUBLE.add(db2);


                            }
                            break;

                    }


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1162:8: DOT DOT r= NUM_INT
                    {
                    DOT474=(Token)match(input,DOT,FOLLOW_DOT_in_matchUntilRange7412); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT474);

                    DOT475=(Token)match(input,DOT,FOLLOW_DOT_in_matchUntilRange7414); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT475);

                    r=(Token)match(input,NUM_INT,FOLLOW_NUM_INT_in_matchUntilRange7418); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_INT.add(r);


                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:1163:8: DOT db3= NUM_DOUBLE
                    {
                    DOT476=(Token)match(input,DOT,FOLLOW_DOT_in_matchUntilRange7427); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT476);

                    db3=(Token)match(input,NUM_DOUBLE,FOLLOW_NUM_DOUBLE_in_matchUntilRange7431); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_DOUBLE.add(db3);


                    }
                    break;

            }

            RBRACK477=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_matchUntilRange7442); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK477);



            // AST REWRITE
            // elements: db, l, db2, r, l, db, r, db, r, r, l, db, l, db3
            // token labels: db, r, l, db2, db3
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_db=new RewriteRuleTokenStream(adaptor,"token db",db);
            RewriteRuleTokenStream stream_r=new RewriteRuleTokenStream(adaptor,"token r",r);
            RewriteRuleTokenStream stream_l=new RewriteRuleTokenStream(adaptor,"token l",l);
            RewriteRuleTokenStream stream_db2=new RewriteRuleTokenStream(adaptor,"token db2",db2);
            RewriteRuleTokenStream stream_db3=new RewriteRuleTokenStream(adaptor,"token db3",db3);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1166:3: -> {$l != null && d1 != null && r != null}? ^( MATCH_UNTIL_RANGE_CLOSED $l $r)
            if (l != null && d1 != null && r != null) {
                // EsperEPL2Grammar.g:1166:47: ^( MATCH_UNTIL_RANGE_CLOSED $l $r)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_CLOSED, "MATCH_UNTIL_RANGE_CLOSED"), root_1);

                adaptor.addChild(root_1, stream_l.nextNode());
                adaptor.addChild(root_1, stream_r.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1167:3: -> {$l != null && d1 != null}? ^( MATCH_UNTIL_RANGE_HALFOPEN $l)
            if (l != null && d1 != null) {
                // EsperEPL2Grammar.g:1167:34: ^( MATCH_UNTIL_RANGE_HALFOPEN $l)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_HALFOPEN, "MATCH_UNTIL_RANGE_HALFOPEN"), root_1);

                adaptor.addChild(root_1, stream_l.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1168:3: -> {$l != null && c1 != null}? ^( MATCH_UNTIL_RANGE_CLOSED $l $r)
            if (l != null && c1 != null) {
                // EsperEPL2Grammar.g:1168:34: ^( MATCH_UNTIL_RANGE_CLOSED $l $r)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_CLOSED, "MATCH_UNTIL_RANGE_CLOSED"), root_1);

                adaptor.addChild(root_1, stream_l.nextNode());
                adaptor.addChild(root_1, stream_r.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1169:3: -> {$l != null}? ^( MATCH_UNTIL_RANGE_BOUNDED $l)
            if (l != null) {
                // EsperEPL2Grammar.g:1169:20: ^( MATCH_UNTIL_RANGE_BOUNDED $l)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_BOUNDED, "MATCH_UNTIL_RANGE_BOUNDED"), root_1);

                adaptor.addChild(root_1, stream_l.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1170:3: -> {$db != null && d1 != null && r != null}? ^( MATCH_UNTIL_RANGE_CLOSED $db $r)
            if (db != null && d1 != null && r != null) {
                // EsperEPL2Grammar.g:1170:48: ^( MATCH_UNTIL_RANGE_CLOSED $db $r)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_CLOSED, "MATCH_UNTIL_RANGE_CLOSED"), root_1);

                adaptor.addChild(root_1, stream_db.nextNode());
                adaptor.addChild(root_1, stream_r.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1171:3: -> {$db != null && d1 != null}? ^( MATCH_UNTIL_RANGE_HALFOPEN $db)
            if (db != null && d1 != null) {
                // EsperEPL2Grammar.g:1171:35: ^( MATCH_UNTIL_RANGE_HALFOPEN $db)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_HALFOPEN, "MATCH_UNTIL_RANGE_HALFOPEN"), root_1);

                adaptor.addChild(root_1, stream_db.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1172:3: -> {$db != null && db2 != null}? ^( MATCH_UNTIL_RANGE_CLOSED $db $db2)
            if (db != null && db2 != null) {
                // EsperEPL2Grammar.g:1172:36: ^( MATCH_UNTIL_RANGE_CLOSED $db $db2)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_CLOSED, "MATCH_UNTIL_RANGE_CLOSED"), root_1);

                adaptor.addChild(root_1, stream_db.nextNode());
                adaptor.addChild(root_1, stream_db2.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1173:3: -> {$db3 != null}? ^( MATCH_UNTIL_RANGE_HALFCLOSED $db3)
            if (db3 != null) {
                // EsperEPL2Grammar.g:1173:22: ^( MATCH_UNTIL_RANGE_HALFCLOSED $db3)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_HALFCLOSED, "MATCH_UNTIL_RANGE_HALFCLOSED"), root_1);

                adaptor.addChild(root_1, stream_db3.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1174:3: -> {$r != null}? ^( MATCH_UNTIL_RANGE_HALFCLOSED $r)
            if (r != null) {
                // EsperEPL2Grammar.g:1174:20: ^( MATCH_UNTIL_RANGE_HALFCLOSED $r)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_HALFCLOSED, "MATCH_UNTIL_RANGE_HALFCLOSED"), root_1);

                adaptor.addChild(root_1, stream_r.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1175:3: -> ^( MATCH_UNTIL_RANGE_HALFCLOSED $db)
            {
                // EsperEPL2Grammar.g:1175:6: ^( MATCH_UNTIL_RANGE_HALFCLOSED $db)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_HALFCLOSED, "MATCH_UNTIL_RANGE_HALFCLOSED"), root_1);

                adaptor.addChild(root_1, stream_db.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchUntilRange"

    public static class eventFilterExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "eventFilterExpression"
    // EsperEPL2Grammar.g:1183:1: eventFilterExpression : (i= IDENT EQUALS )? classIdentifier ( LPAREN ( expressionList )? RPAREN )? ( propertyExpression )? -> ^( EVENT_FILTER_EXPR ( $i)? classIdentifier ( propertyExpression )? ( expressionList )? ) ;
    public final EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression() throws RecognitionException {
        EsperEPL2GrammarParser.eventFilterExpression_return retval = new EsperEPL2GrammarParser.eventFilterExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token EQUALS478=null;
        Token LPAREN480=null;
        Token RPAREN482=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier479 = null;

        EsperEPL2GrammarParser.expressionList_return expressionList481 = null;

        EsperEPL2GrammarParser.propertyExpression_return propertyExpression483 = null;


        CommonTree i_tree=null;
        CommonTree EQUALS478_tree=null;
        CommonTree LPAREN480_tree=null;
        CommonTree RPAREN482_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_propertyExpression=new RewriteRuleSubtreeStream(adaptor,"rule propertyExpression");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
         paraphrases.push("filter specification"); 
        try {
            // EsperEPL2Grammar.g:1186:5: ( (i= IDENT EQUALS )? classIdentifier ( LPAREN ( expressionList )? RPAREN )? ( propertyExpression )? -> ^( EVENT_FILTER_EXPR ( $i)? classIdentifier ( propertyExpression )? ( expressionList )? ) )
            // EsperEPL2Grammar.g:1186:9: (i= IDENT EQUALS )? classIdentifier ( LPAREN ( expressionList )? RPAREN )? ( propertyExpression )?
            {
            // EsperEPL2Grammar.g:1186:9: (i= IDENT EQUALS )?
            int alt178=2;
            int LA178_0 = input.LA(1);

            if ( (LA178_0==IDENT) ) {
                int LA178_1 = input.LA(2);

                if ( (LA178_1==EQUALS) ) {
                    alt178=1;
                }
            }
            switch (alt178) {
                case 1 :
                    // EsperEPL2Grammar.g:1186:10: i= IDENT EQUALS
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_eventFilterExpression7627); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);

                    EQUALS478=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_eventFilterExpression7629); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS478);


                    }
                    break;

            }

            pushFollow(FOLLOW_classIdentifier_in_eventFilterExpression7638);
            classIdentifier479=classIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier479.getTree());
            // EsperEPL2Grammar.g:1188:9: ( LPAREN ( expressionList )? RPAREN )?
            int alt180=2;
            int LA180_0 = input.LA(1);

            if ( (LA180_0==LPAREN) ) {
                alt180=1;
            }
            switch (alt180) {
                case 1 :
                    // EsperEPL2Grammar.g:1188:10: LPAREN ( expressionList )? RPAREN
                    {
                    LPAREN480=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_eventFilterExpression7649); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN480);

                    // EsperEPL2Grammar.g:1188:17: ( expressionList )?
                    int alt179=2;
                    int LA179_0 = input.LA(1);

                    if ( (LA179_0==WINDOW||LA179_0==ESCAPE||(LA179_0>=NOT_EXPR && LA179_0<=EVERY_EXPR)||(LA179_0>=SUM && LA179_0<=COUNT)||LA179_0==CASE||LA179_0==OUTER||(LA179_0>=JOIN && LA179_0<=FULL)||(LA179_0>=EVENTS && LA179_0<=LAST)||(LA179_0>=UNIDIRECTIONAL && LA179_0<=CURRENT_TIMESTAMP)||LA179_0==SNAPSHOT||(LA179_0>=VARIABLE && LA179_0<=AT)||(LA179_0>=BOOLEAN_TRUE && LA179_0<=VALUE_NULL)||LA179_0==NUM_DOUBLE||LA179_0==IDENT||LA179_0==LPAREN||(LA179_0>=STRING_LITERAL && LA179_0<=QUOTED_STRING_LITERAL)||(LA179_0>=PLUS && LA179_0<=MINUS)||LA179_0==LCURLY||LA179_0==NUM_INT||LA179_0==QUESTION||(LA179_0>=TICKED_STRING_LITERAL && LA179_0<=NUM_FLOAT)) ) {
                        alt179=1;
                    }
                    switch (alt179) {
                        case 1 :
                            // EsperEPL2Grammar.g:1188:17: expressionList
                            {
                            pushFollow(FOLLOW_expressionList_in_eventFilterExpression7651);
                            expressionList481=expressionList();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList481.getTree());

                            }
                            break;

                    }

                    RPAREN482=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_eventFilterExpression7654); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN482);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:1189:9: ( propertyExpression )?
            int alt181=2;
            int LA181_0 = input.LA(1);

            if ( (LA181_0==LBRACK) ) {
                alt181=1;
            }
            switch (alt181) {
                case 1 :
                    // EsperEPL2Grammar.g:1189:9: propertyExpression
                    {
                    pushFollow(FOLLOW_propertyExpression_in_eventFilterExpression7666);
                    propertyExpression483=propertyExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_propertyExpression.add(propertyExpression483.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: expressionList, propertyExpression, classIdentifier, i
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1190:9: -> ^( EVENT_FILTER_EXPR ( $i)? classIdentifier ( propertyExpression )? ( expressionList )? )
            {
                // EsperEPL2Grammar.g:1190:12: ^( EVENT_FILTER_EXPR ( $i)? classIdentifier ( propertyExpression )? ( expressionList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_FILTER_EXPR, "EVENT_FILTER_EXPR"), root_1);

                // EsperEPL2Grammar.g:1190:32: ( $i)?
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());

                }
                stream_i.reset();
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                // EsperEPL2Grammar.g:1190:52: ( propertyExpression )?
                if ( stream_propertyExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_propertyExpression.nextTree());

                }
                stream_propertyExpression.reset();
                // EsperEPL2Grammar.g:1190:72: ( expressionList )?
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());

                }
                stream_expressionList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "eventFilterExpression"

    public static class propertyExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "propertyExpression"
    // EsperEPL2Grammar.g:1193:1: propertyExpression : propertyExpressionAtomic ( propertyExpressionAtomic )* -> ^( EVENT_FILTER_PROPERTY_EXPR ( propertyExpressionAtomic )+ ) ;
    public final EsperEPL2GrammarParser.propertyExpression_return propertyExpression() throws RecognitionException {
        EsperEPL2GrammarParser.propertyExpression_return retval = new EsperEPL2GrammarParser.propertyExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.propertyExpressionAtomic_return propertyExpressionAtomic484 = null;

        EsperEPL2GrammarParser.propertyExpressionAtomic_return propertyExpressionAtomic485 = null;


        RewriteRuleSubtreeStream stream_propertyExpressionAtomic=new RewriteRuleSubtreeStream(adaptor,"rule propertyExpressionAtomic");
        try {
            // EsperEPL2Grammar.g:1194:2: ( propertyExpressionAtomic ( propertyExpressionAtomic )* -> ^( EVENT_FILTER_PROPERTY_EXPR ( propertyExpressionAtomic )+ ) )
            // EsperEPL2Grammar.g:1194:4: propertyExpressionAtomic ( propertyExpressionAtomic )*
            {
            pushFollow(FOLLOW_propertyExpressionAtomic_in_propertyExpression7711);
            propertyExpressionAtomic484=propertyExpressionAtomic();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_propertyExpressionAtomic.add(propertyExpressionAtomic484.getTree());
            // EsperEPL2Grammar.g:1194:29: ( propertyExpressionAtomic )*
            loop182:
            do {
                int alt182=2;
                int LA182_0 = input.LA(1);

                if ( (LA182_0==LBRACK) ) {
                    alt182=1;
                }


                switch (alt182) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1194:30: propertyExpressionAtomic
            	    {
            	    pushFollow(FOLLOW_propertyExpressionAtomic_in_propertyExpression7714);
            	    propertyExpressionAtomic485=propertyExpressionAtomic();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_propertyExpressionAtomic.add(propertyExpressionAtomic485.getTree());

            	    }
            	    break;

            	default :
            	    break loop182;
                }
            } while (true);



            // AST REWRITE
            // elements: propertyExpressionAtomic
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1195:9: -> ^( EVENT_FILTER_PROPERTY_EXPR ( propertyExpressionAtomic )+ )
            {
                // EsperEPL2Grammar.g:1195:12: ^( EVENT_FILTER_PROPERTY_EXPR ( propertyExpressionAtomic )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_FILTER_PROPERTY_EXPR, "EVENT_FILTER_PROPERTY_EXPR"), root_1);

                if ( !(stream_propertyExpressionAtomic.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_propertyExpressionAtomic.hasNext() ) {
                    adaptor.addChild(root_1, stream_propertyExpressionAtomic.nextTree());

                }
                stream_propertyExpressionAtomic.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "propertyExpression"

    public static class propertyExpressionAtomic_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "propertyExpressionAtomic"
    // EsperEPL2Grammar.g:1198:1: propertyExpressionAtomic : LBRACK ( SELECT propertySelectionList FROM )? eventProperty ( AS IDENT )? ( WHERE expression )? RBRACK -> ^( EVENT_FILTER_PROPERTY_EXPR_ATOM ( propertySelectionList )? eventProperty ( IDENT )? ^( WHERE_EXPR ( expression )? ) ) ;
    public final EsperEPL2GrammarParser.propertyExpressionAtomic_return propertyExpressionAtomic() throws RecognitionException {
        EsperEPL2GrammarParser.propertyExpressionAtomic_return retval = new EsperEPL2GrammarParser.propertyExpressionAtomic_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LBRACK486=null;
        Token SELECT487=null;
        Token FROM489=null;
        Token AS491=null;
        Token IDENT492=null;
        Token WHERE493=null;
        Token RBRACK495=null;
        EsperEPL2GrammarParser.propertySelectionList_return propertySelectionList488 = null;

        EsperEPL2GrammarParser.eventProperty_return eventProperty490 = null;

        EsperEPL2GrammarParser.expression_return expression494 = null;


        CommonTree LBRACK486_tree=null;
        CommonTree SELECT487_tree=null;
        CommonTree FROM489_tree=null;
        CommonTree AS491_tree=null;
        CommonTree IDENT492_tree=null;
        CommonTree WHERE493_tree=null;
        CommonTree RBRACK495_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_FROM=new RewriteRuleTokenStream(adaptor,"token FROM");
        RewriteRuleTokenStream stream_SELECT=new RewriteRuleTokenStream(adaptor,"token SELECT");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_propertySelectionList=new RewriteRuleSubtreeStream(adaptor,"rule propertySelectionList");
        RewriteRuleSubtreeStream stream_eventProperty=new RewriteRuleSubtreeStream(adaptor,"rule eventProperty");
        try {
            // EsperEPL2Grammar.g:1199:2: ( LBRACK ( SELECT propertySelectionList FROM )? eventProperty ( AS IDENT )? ( WHERE expression )? RBRACK -> ^( EVENT_FILTER_PROPERTY_EXPR_ATOM ( propertySelectionList )? eventProperty ( IDENT )? ^( WHERE_EXPR ( expression )? ) ) )
            // EsperEPL2Grammar.g:1199:4: LBRACK ( SELECT propertySelectionList FROM )? eventProperty ( AS IDENT )? ( WHERE expression )? RBRACK
            {
            LBRACK486=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_propertyExpressionAtomic7744); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK486);

            // EsperEPL2Grammar.g:1199:11: ( SELECT propertySelectionList FROM )?
            int alt183=2;
            int LA183_0 = input.LA(1);

            if ( (LA183_0==SELECT) ) {
                alt183=1;
            }
            switch (alt183) {
                case 1 :
                    // EsperEPL2Grammar.g:1199:12: SELECT propertySelectionList FROM
                    {
                    SELECT487=(Token)match(input,SELECT,FOLLOW_SELECT_in_propertyExpressionAtomic7747); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SELECT.add(SELECT487);

                    pushFollow(FOLLOW_propertySelectionList_in_propertyExpressionAtomic7749);
                    propertySelectionList488=propertySelectionList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_propertySelectionList.add(propertySelectionList488.getTree());
                    FROM489=(Token)match(input,FROM,FOLLOW_FROM_in_propertyExpressionAtomic7751); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FROM.add(FROM489);


                    }
                    break;

            }

            pushFollow(FOLLOW_eventProperty_in_propertyExpressionAtomic7755);
            eventProperty490=eventProperty();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventProperty.add(eventProperty490.getTree());
            // EsperEPL2Grammar.g:1199:62: ( AS IDENT )?
            int alt184=2;
            int LA184_0 = input.LA(1);

            if ( (LA184_0==AS) ) {
                alt184=1;
            }
            switch (alt184) {
                case 1 :
                    // EsperEPL2Grammar.g:1199:63: AS IDENT
                    {
                    AS491=(Token)match(input,AS,FOLLOW_AS_in_propertyExpressionAtomic7758); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS491);

                    IDENT492=(Token)match(input,IDENT,FOLLOW_IDENT_in_propertyExpressionAtomic7760); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT492);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:1199:74: ( WHERE expression )?
            int alt185=2;
            int LA185_0 = input.LA(1);

            if ( (LA185_0==WHERE) ) {
                alt185=1;
            }
            switch (alt185) {
                case 1 :
                    // EsperEPL2Grammar.g:1199:75: WHERE expression
                    {
                    WHERE493=(Token)match(input,WHERE,FOLLOW_WHERE_in_propertyExpressionAtomic7765); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE493);

                    pushFollow(FOLLOW_expression_in_propertyExpressionAtomic7767);
                    expression494=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression494.getTree());

                    }
                    break;

            }

            RBRACK495=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_propertyExpressionAtomic7771); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK495);



            // AST REWRITE
            // elements: eventProperty, propertySelectionList, IDENT, expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1200:9: -> ^( EVENT_FILTER_PROPERTY_EXPR_ATOM ( propertySelectionList )? eventProperty ( IDENT )? ^( WHERE_EXPR ( expression )? ) )
            {
                // EsperEPL2Grammar.g:1200:12: ^( EVENT_FILTER_PROPERTY_EXPR_ATOM ( propertySelectionList )? eventProperty ( IDENT )? ^( WHERE_EXPR ( expression )? ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_FILTER_PROPERTY_EXPR_ATOM, "EVENT_FILTER_PROPERTY_EXPR_ATOM"), root_1);

                // EsperEPL2Grammar.g:1200:46: ( propertySelectionList )?
                if ( stream_propertySelectionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_propertySelectionList.nextTree());

                }
                stream_propertySelectionList.reset();
                adaptor.addChild(root_1, stream_eventProperty.nextTree());
                // EsperEPL2Grammar.g:1200:83: ( IDENT )?
                if ( stream_IDENT.hasNext() ) {
                    adaptor.addChild(root_1, stream_IDENT.nextNode());

                }
                stream_IDENT.reset();
                // EsperEPL2Grammar.g:1200:90: ^( WHERE_EXPR ( expression )? )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WHERE_EXPR, "WHERE_EXPR"), root_2);

                // EsperEPL2Grammar.g:1200:103: ( expression )?
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_2, stream_expression.nextTree());

                }
                stream_expression.reset();

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "propertyExpressionAtomic"

    public static class propertySelectionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "propertySelectionList"
    // EsperEPL2Grammar.g:1203:1: propertySelectionList : propertySelectionListElement ( COMMA propertySelectionListElement )* ;
    public final EsperEPL2GrammarParser.propertySelectionList_return propertySelectionList() throws RecognitionException {
        EsperEPL2GrammarParser.propertySelectionList_return retval = new EsperEPL2GrammarParser.propertySelectionList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA497=null;
        EsperEPL2GrammarParser.propertySelectionListElement_return propertySelectionListElement496 = null;

        EsperEPL2GrammarParser.propertySelectionListElement_return propertySelectionListElement498 = null;


        CommonTree COMMA497_tree=null;

        try {
            // EsperEPL2Grammar.g:1204:2: ( propertySelectionListElement ( COMMA propertySelectionListElement )* )
            // EsperEPL2Grammar.g:1204:4: propertySelectionListElement ( COMMA propertySelectionListElement )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_propertySelectionListElement_in_propertySelectionList7821);
            propertySelectionListElement496=propertySelectionListElement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, propertySelectionListElement496.getTree());
            // EsperEPL2Grammar.g:1204:33: ( COMMA propertySelectionListElement )*
            loop186:
            do {
                int alt186=2;
                int LA186_0 = input.LA(1);

                if ( (LA186_0==COMMA) ) {
                    alt186=1;
                }


                switch (alt186) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1204:34: COMMA propertySelectionListElement
            	    {
            	    COMMA497=(Token)match(input,COMMA,FOLLOW_COMMA_in_propertySelectionList7824); if (state.failed) return retval;
            	    pushFollow(FOLLOW_propertySelectionListElement_in_propertySelectionList7827);
            	    propertySelectionListElement498=propertySelectionListElement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, propertySelectionListElement498.getTree());

            	    }
            	    break;

            	default :
            	    break loop186;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "propertySelectionList"

    public static class propertySelectionListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "propertySelectionListElement"
    // EsperEPL2Grammar.g:1207:1: propertySelectionListElement : (s= STAR -> PROPERTY_WILDCARD_SELECT[$s] | ( propertyStreamSelector )=> propertyStreamSelector | expression ( AS i= keywordAllowedIdent )? -> {identifier != null}? ^( PROPERTY_SELECTION_ELEMENT_EXPR expression IDENT[identifier] ) -> ^( PROPERTY_SELECTION_ELEMENT_EXPR expression ) );
    public final EsperEPL2GrammarParser.propertySelectionListElement_return propertySelectionListElement() throws RecognitionException {
        EsperEPL2GrammarParser.propertySelectionListElement_return retval = new EsperEPL2GrammarParser.propertySelectionListElement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token s=null;
        Token AS501=null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i = null;

        EsperEPL2GrammarParser.propertyStreamSelector_return propertyStreamSelector499 = null;

        EsperEPL2GrammarParser.expression_return expression500 = null;


        CommonTree s_tree=null;
        CommonTree AS501_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_keywordAllowedIdent=new RewriteRuleSubtreeStream(adaptor,"rule keywordAllowedIdent");
         String identifier = null; 
        try {
            // EsperEPL2Grammar.g:1209:2: (s= STAR -> PROPERTY_WILDCARD_SELECT[$s] | ( propertyStreamSelector )=> propertyStreamSelector | expression ( AS i= keywordAllowedIdent )? -> {identifier != null}? ^( PROPERTY_SELECTION_ELEMENT_EXPR expression IDENT[identifier] ) -> ^( PROPERTY_SELECTION_ELEMENT_EXPR expression ) )
            int alt188=3;
            alt188 = dfa188.predict(input);
            switch (alt188) {
                case 1 :
                    // EsperEPL2Grammar.g:1209:7: s= STAR
                    {
                    s=(Token)match(input,STAR,FOLLOW_STAR_in_propertySelectionListElement7853); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STAR.add(s);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1209:14: -> PROPERTY_WILDCARD_SELECT[$s]
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(PROPERTY_WILDCARD_SELECT, s));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1210:4: ( propertyStreamSelector )=> propertyStreamSelector
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_propertyStreamSelector_in_propertySelectionListElement7869);
                    propertyStreamSelector499=propertyStreamSelector();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, propertyStreamSelector499.getTree());

                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1211:4: expression ( AS i= keywordAllowedIdent )?
                    {
                    pushFollow(FOLLOW_expression_in_propertySelectionListElement7874);
                    expression500=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression500.getTree());
                    // EsperEPL2Grammar.g:1211:15: ( AS i= keywordAllowedIdent )?
                    int alt187=2;
                    int LA187_0 = input.LA(1);

                    if ( (LA187_0==AS) ) {
                        alt187=1;
                    }
                    switch (alt187) {
                        case 1 :
                            // EsperEPL2Grammar.g:1211:16: AS i= keywordAllowedIdent
                            {
                            AS501=(Token)match(input,AS,FOLLOW_AS_in_propertySelectionListElement7877); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_AS.add(AS501);

                            pushFollow(FOLLOW_keywordAllowedIdent_in_propertySelectionListElement7881);
                            i=keywordAllowedIdent();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i.getTree());
                            if ( state.backtracking==0 ) {
                               identifier = i.getTree().toString(); 
                            }

                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: expression, expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1212:3: -> {identifier != null}? ^( PROPERTY_SELECTION_ELEMENT_EXPR expression IDENT[identifier] )
                    if (identifier != null) {
                        // EsperEPL2Grammar.g:1212:28: ^( PROPERTY_SELECTION_ELEMENT_EXPR expression IDENT[identifier] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PROPERTY_SELECTION_ELEMENT_EXPR, "PROPERTY_SELECTION_ELEMENT_EXPR"), root_1);

                        adaptor.addChild(root_1, stream_expression.nextTree());
                        adaptor.addChild(root_1, (CommonTree)adaptor.create(IDENT, identifier));

                        adaptor.addChild(root_0, root_1);
                        }

                    }
                    else // 1213:3: -> ^( PROPERTY_SELECTION_ELEMENT_EXPR expression )
                    {
                        // EsperEPL2Grammar.g:1213:6: ^( PROPERTY_SELECTION_ELEMENT_EXPR expression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PROPERTY_SELECTION_ELEMENT_EXPR, "PROPERTY_SELECTION_ELEMENT_EXPR"), root_1);

                        adaptor.addChild(root_1, stream_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "propertySelectionListElement"

    public static class propertyStreamSelector_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "propertyStreamSelector"
    // EsperEPL2Grammar.g:1216:1: propertyStreamSelector : s= IDENT DOT STAR ( AS i= IDENT )? -> ^( PROPERTY_SELECTION_STREAM $s ( $i)? ) ;
    public final EsperEPL2GrammarParser.propertyStreamSelector_return propertyStreamSelector() throws RecognitionException {
        EsperEPL2GrammarParser.propertyStreamSelector_return retval = new EsperEPL2GrammarParser.propertyStreamSelector_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token s=null;
        Token i=null;
        Token DOT502=null;
        Token STAR503=null;
        Token AS504=null;

        CommonTree s_tree=null;
        CommonTree i_tree=null;
        CommonTree DOT502_tree=null;
        CommonTree STAR503_tree=null;
        CommonTree AS504_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");

        try {
            // EsperEPL2Grammar.g:1217:2: (s= IDENT DOT STAR ( AS i= IDENT )? -> ^( PROPERTY_SELECTION_STREAM $s ( $i)? ) )
            // EsperEPL2Grammar.g:1217:4: s= IDENT DOT STAR ( AS i= IDENT )?
            {
            s=(Token)match(input,IDENT,FOLLOW_IDENT_in_propertyStreamSelector7925); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(s);

            DOT502=(Token)match(input,DOT,FOLLOW_DOT_in_propertyStreamSelector7927); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DOT.add(DOT502);

            STAR503=(Token)match(input,STAR,FOLLOW_STAR_in_propertyStreamSelector7929); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_STAR.add(STAR503);

            // EsperEPL2Grammar.g:1217:21: ( AS i= IDENT )?
            int alt189=2;
            int LA189_0 = input.LA(1);

            if ( (LA189_0==AS) ) {
                alt189=1;
            }
            switch (alt189) {
                case 1 :
                    // EsperEPL2Grammar.g:1217:22: AS i= IDENT
                    {
                    AS504=(Token)match(input,AS,FOLLOW_AS_in_propertyStreamSelector7932); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS504);

                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_propertyStreamSelector7936); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;

            }



            // AST REWRITE
            // elements: s, i
            // token labels: s, i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1218:3: -> ^( PROPERTY_SELECTION_STREAM $s ( $i)? )
            {
                // EsperEPL2Grammar.g:1218:6: ^( PROPERTY_SELECTION_STREAM $s ( $i)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PROPERTY_SELECTION_STREAM, "PROPERTY_SELECTION_STREAM"), root_1);

                adaptor.addChild(root_1, stream_s.nextNode());
                // EsperEPL2Grammar.g:1218:37: ( $i)?
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());

                }
                stream_i.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "propertyStreamSelector"

    public static class patternFilterExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "patternFilterExpression"
    // EsperEPL2Grammar.g:1221:1: patternFilterExpression : (i= IDENT EQUALS )? classIdentifier ( LPAREN ( expressionList )? RPAREN )? ( propertyExpression )? ( distinctExpression )? -> ^( PATTERN_FILTER_EXPR ( $i)? classIdentifier ( propertyExpression )? ( distinctExpression )? ( expressionList )? ) ;
    public final EsperEPL2GrammarParser.patternFilterExpression_return patternFilterExpression() throws RecognitionException {
        EsperEPL2GrammarParser.patternFilterExpression_return retval = new EsperEPL2GrammarParser.patternFilterExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token EQUALS505=null;
        Token LPAREN507=null;
        Token RPAREN509=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier506 = null;

        EsperEPL2GrammarParser.expressionList_return expressionList508 = null;

        EsperEPL2GrammarParser.propertyExpression_return propertyExpression510 = null;

        EsperEPL2GrammarParser.distinctExpression_return distinctExpression511 = null;


        CommonTree i_tree=null;
        CommonTree EQUALS505_tree=null;
        CommonTree LPAREN507_tree=null;
        CommonTree RPAREN509_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_distinctExpression=new RewriteRuleSubtreeStream(adaptor,"rule distinctExpression");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_propertyExpression=new RewriteRuleSubtreeStream(adaptor,"rule propertyExpression");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
         paraphrases.push("filter specification"); 
        try {
            // EsperEPL2Grammar.g:1224:5: ( (i= IDENT EQUALS )? classIdentifier ( LPAREN ( expressionList )? RPAREN )? ( propertyExpression )? ( distinctExpression )? -> ^( PATTERN_FILTER_EXPR ( $i)? classIdentifier ( propertyExpression )? ( distinctExpression )? ( expressionList )? ) )
            // EsperEPL2Grammar.g:1224:9: (i= IDENT EQUALS )? classIdentifier ( LPAREN ( expressionList )? RPAREN )? ( propertyExpression )? ( distinctExpression )?
            {
            // EsperEPL2Grammar.g:1224:9: (i= IDENT EQUALS )?
            int alt190=2;
            int LA190_0 = input.LA(1);

            if ( (LA190_0==IDENT) ) {
                int LA190_1 = input.LA(2);

                if ( (LA190_1==EQUALS) ) {
                    alt190=1;
                }
            }
            switch (alt190) {
                case 1 :
                    // EsperEPL2Grammar.g:1224:10: i= IDENT EQUALS
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_patternFilterExpression7983); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);

                    EQUALS505=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_patternFilterExpression7985); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS505);


                    }
                    break;

            }

            pushFollow(FOLLOW_classIdentifier_in_patternFilterExpression7994);
            classIdentifier506=classIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier506.getTree());
            // EsperEPL2Grammar.g:1226:9: ( LPAREN ( expressionList )? RPAREN )?
            int alt192=2;
            int LA192_0 = input.LA(1);

            if ( (LA192_0==LPAREN) ) {
                alt192=1;
            }
            switch (alt192) {
                case 1 :
                    // EsperEPL2Grammar.g:1226:10: LPAREN ( expressionList )? RPAREN
                    {
                    LPAREN507=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_patternFilterExpression8005); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN507);

                    // EsperEPL2Grammar.g:1226:17: ( expressionList )?
                    int alt191=2;
                    int LA191_0 = input.LA(1);

                    if ( (LA191_0==WINDOW||LA191_0==ESCAPE||(LA191_0>=NOT_EXPR && LA191_0<=EVERY_EXPR)||(LA191_0>=SUM && LA191_0<=COUNT)||LA191_0==CASE||LA191_0==OUTER||(LA191_0>=JOIN && LA191_0<=FULL)||(LA191_0>=EVENTS && LA191_0<=LAST)||(LA191_0>=UNIDIRECTIONAL && LA191_0<=CURRENT_TIMESTAMP)||LA191_0==SNAPSHOT||(LA191_0>=VARIABLE && LA191_0<=AT)||(LA191_0>=BOOLEAN_TRUE && LA191_0<=VALUE_NULL)||LA191_0==NUM_DOUBLE||LA191_0==IDENT||LA191_0==LPAREN||(LA191_0>=STRING_LITERAL && LA191_0<=QUOTED_STRING_LITERAL)||(LA191_0>=PLUS && LA191_0<=MINUS)||LA191_0==LCURLY||LA191_0==NUM_INT||LA191_0==QUESTION||(LA191_0>=TICKED_STRING_LITERAL && LA191_0<=NUM_FLOAT)) ) {
                        alt191=1;
                    }
                    switch (alt191) {
                        case 1 :
                            // EsperEPL2Grammar.g:1226:17: expressionList
                            {
                            pushFollow(FOLLOW_expressionList_in_patternFilterExpression8007);
                            expressionList508=expressionList();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList508.getTree());

                            }
                            break;

                    }

                    RPAREN509=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_patternFilterExpression8010); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN509);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:1227:9: ( propertyExpression )?
            int alt193=2;
            int LA193_0 = input.LA(1);

            if ( (LA193_0==LBRACK) ) {
                alt193=1;
            }
            switch (alt193) {
                case 1 :
                    // EsperEPL2Grammar.g:1227:9: propertyExpression
                    {
                    pushFollow(FOLLOW_propertyExpression_in_patternFilterExpression8022);
                    propertyExpression510=propertyExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_propertyExpression.add(propertyExpression510.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:1228:9: ( distinctExpression )?
            int alt194=2;
            int LA194_0 = input.LA(1);

            if ( (LA194_0==DISTINCT) ) {
                alt194=1;
            }
            switch (alt194) {
                case 1 :
                    // EsperEPL2Grammar.g:1228:9: distinctExpression
                    {
                    pushFollow(FOLLOW_distinctExpression_in_patternFilterExpression8033);
                    distinctExpression511=distinctExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_distinctExpression.add(distinctExpression511.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: propertyExpression, distinctExpression, classIdentifier, expressionList, i
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1229:9: -> ^( PATTERN_FILTER_EXPR ( $i)? classIdentifier ( propertyExpression )? ( distinctExpression )? ( expressionList )? )
            {
                // EsperEPL2Grammar.g:1229:12: ^( PATTERN_FILTER_EXPR ( $i)? classIdentifier ( propertyExpression )? ( distinctExpression )? ( expressionList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATTERN_FILTER_EXPR, "PATTERN_FILTER_EXPR"), root_1);

                // EsperEPL2Grammar.g:1229:34: ( $i)?
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());

                }
                stream_i.reset();
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                // EsperEPL2Grammar.g:1229:54: ( propertyExpression )?
                if ( stream_propertyExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_propertyExpression.nextTree());

                }
                stream_propertyExpression.reset();
                // EsperEPL2Grammar.g:1229:74: ( distinctExpression )?
                if ( stream_distinctExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_distinctExpression.nextTree());

                }
                stream_distinctExpression.reset();
                // EsperEPL2Grammar.g:1229:94: ( expressionList )?
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());

                }
                stream_expressionList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "patternFilterExpression"

    public static class distinctExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "distinctExpression"
    // EsperEPL2Grammar.g:1232:1: distinctExpression : DISTINCT ( LBRACK number RBRACK )? LPAREN distinctExpressionAtom ( COMMA distinctExpressionAtom )* RPAREN -> ^( EVENT_FILTER_DISTINCT_EXPR ( number )? ( distinctExpressionAtom )* ) ;
    public final EsperEPL2GrammarParser.distinctExpression_return distinctExpression() throws RecognitionException {
        EsperEPL2GrammarParser.distinctExpression_return retval = new EsperEPL2GrammarParser.distinctExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token DISTINCT512=null;
        Token LBRACK513=null;
        Token RBRACK515=null;
        Token LPAREN516=null;
        Token COMMA518=null;
        Token RPAREN520=null;
        EsperEPL2GrammarParser.number_return number514 = null;

        EsperEPL2GrammarParser.distinctExpressionAtom_return distinctExpressionAtom517 = null;

        EsperEPL2GrammarParser.distinctExpressionAtom_return distinctExpressionAtom519 = null;


        CommonTree DISTINCT512_tree=null;
        CommonTree LBRACK513_tree=null;
        CommonTree RBRACK515_tree=null;
        CommonTree LPAREN516_tree=null;
        CommonTree COMMA518_tree=null;
        CommonTree RPAREN520_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_DISTINCT=new RewriteRuleTokenStream(adaptor,"token DISTINCT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_distinctExpressionAtom=new RewriteRuleSubtreeStream(adaptor,"rule distinctExpressionAtom");
        try {
            // EsperEPL2Grammar.g:1233:2: ( DISTINCT ( LBRACK number RBRACK )? LPAREN distinctExpressionAtom ( COMMA distinctExpressionAtom )* RPAREN -> ^( EVENT_FILTER_DISTINCT_EXPR ( number )? ( distinctExpressionAtom )* ) )
            // EsperEPL2Grammar.g:1233:4: DISTINCT ( LBRACK number RBRACK )? LPAREN distinctExpressionAtom ( COMMA distinctExpressionAtom )* RPAREN
            {
            DISTINCT512=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_distinctExpression8077); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DISTINCT.add(DISTINCT512);

            // EsperEPL2Grammar.g:1233:13: ( LBRACK number RBRACK )?
            int alt195=2;
            int LA195_0 = input.LA(1);

            if ( (LA195_0==LBRACK) ) {
                alt195=1;
            }
            switch (alt195) {
                case 1 :
                    // EsperEPL2Grammar.g:1233:14: LBRACK number RBRACK
                    {
                    LBRACK513=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_distinctExpression8080); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK513);

                    pushFollow(FOLLOW_number_in_distinctExpression8082);
                    number514=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number514.getTree());
                    RBRACK515=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_distinctExpression8084); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK515);


                    }
                    break;

            }

            LPAREN516=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_distinctExpression8088); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN516);

            pushFollow(FOLLOW_distinctExpressionAtom_in_distinctExpression8090);
            distinctExpressionAtom517=distinctExpressionAtom();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_distinctExpressionAtom.add(distinctExpressionAtom517.getTree());
            // EsperEPL2Grammar.g:1233:67: ( COMMA distinctExpressionAtom )*
            loop196:
            do {
                int alt196=2;
                int LA196_0 = input.LA(1);

                if ( (LA196_0==COMMA) ) {
                    alt196=1;
                }


                switch (alt196) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1233:68: COMMA distinctExpressionAtom
            	    {
            	    COMMA518=(Token)match(input,COMMA,FOLLOW_COMMA_in_distinctExpression8093); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA518);

            	    pushFollow(FOLLOW_distinctExpressionAtom_in_distinctExpression8095);
            	    distinctExpressionAtom519=distinctExpressionAtom();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_distinctExpressionAtom.add(distinctExpressionAtom519.getTree());

            	    }
            	    break;

            	default :
            	    break loop196;
                }
            } while (true);

            RPAREN520=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_distinctExpression8099); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN520);



            // AST REWRITE
            // elements: distinctExpressionAtom, number
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1234:2: -> ^( EVENT_FILTER_DISTINCT_EXPR ( number )? ( distinctExpressionAtom )* )
            {
                // EsperEPL2Grammar.g:1234:5: ^( EVENT_FILTER_DISTINCT_EXPR ( number )? ( distinctExpressionAtom )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_FILTER_DISTINCT_EXPR, "EVENT_FILTER_DISTINCT_EXPR"), root_1);

                // EsperEPL2Grammar.g:1234:34: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:1234:42: ( distinctExpressionAtom )*
                while ( stream_distinctExpressionAtom.hasNext() ) {
                    adaptor.addChild(root_1, stream_distinctExpressionAtom.nextTree());

                }
                stream_distinctExpressionAtom.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "distinctExpression"

    public static class distinctExpressionAtom_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "distinctExpressionAtom"
    // EsperEPL2Grammar.g:1237:1: distinctExpressionAtom : expression -> ^( EVENT_FILTER_DISTINCT_EXPR_ATOM expression ) ;
    public final EsperEPL2GrammarParser.distinctExpressionAtom_return distinctExpressionAtom() throws RecognitionException {
        EsperEPL2GrammarParser.distinctExpressionAtom_return retval = new EsperEPL2GrammarParser.distinctExpressionAtom_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.expression_return expression521 = null;


        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            // EsperEPL2Grammar.g:1238:2: ( expression -> ^( EVENT_FILTER_DISTINCT_EXPR_ATOM expression ) )
            // EsperEPL2Grammar.g:1238:4: expression
            {
            pushFollow(FOLLOW_expression_in_distinctExpressionAtom8123);
            expression521=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression521.getTree());


            // AST REWRITE
            // elements: expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1239:2: -> ^( EVENT_FILTER_DISTINCT_EXPR_ATOM expression )
            {
                // EsperEPL2Grammar.g:1239:5: ^( EVENT_FILTER_DISTINCT_EXPR_ATOM expression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_FILTER_DISTINCT_EXPR_ATOM, "EVENT_FILTER_DISTINCT_EXPR_ATOM"), root_1);

                adaptor.addChild(root_1, stream_expression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "distinctExpressionAtom"

    public static class classIdentifier_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "classIdentifier"
    // EsperEPL2Grammar.g:1243:1: classIdentifier : i1= escapableIdent ( DOT i2= escapableIdent )* -> ^( CLASS_IDENT[identifier] ) ;
    public final EsperEPL2GrammarParser.classIdentifier_return classIdentifier() throws RecognitionException {
        EsperEPL2GrammarParser.classIdentifier_return retval = new EsperEPL2GrammarParser.classIdentifier_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token DOT522=null;
        EsperEPL2GrammarParser.escapableIdent_return i1 = null;

        EsperEPL2GrammarParser.escapableIdent_return i2 = null;


        CommonTree DOT522_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_escapableIdent=new RewriteRuleSubtreeStream(adaptor,"rule escapableIdent");
         String identifier = ""; 
        try {
            // EsperEPL2Grammar.g:1245:2: (i1= escapableIdent ( DOT i2= escapableIdent )* -> ^( CLASS_IDENT[identifier] ) )
            // EsperEPL2Grammar.g:1245:4: i1= escapableIdent ( DOT i2= escapableIdent )*
            {
            pushFollow(FOLLOW_escapableIdent_in_classIdentifier8160);
            i1=escapableIdent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_escapableIdent.add(i1.getTree());
            if ( state.backtracking==0 ) {
               identifier = (i1!=null?i1.result:null); 
            }
            // EsperEPL2Grammar.g:1246:6: ( DOT i2= escapableIdent )*
            loop197:
            do {
                int alt197=2;
                int LA197_0 = input.LA(1);

                if ( (LA197_0==DOT) ) {
                    int LA197_17 = input.LA(2);

                    if ( (LA197_17==IDENT) ) {
                        int LA197_41 = input.LA(3);

                        if ( (LA197_41==EOF||LA197_41==CREATE||(LA197_41>=OR_EXPR && LA197_41<=AS)||LA197_41==SELECT||(LA197_41>=INNER && LA197_41<=ON)||(LA197_41>=GROUP && LA197_41<=DISTINCT)||LA197_41==OUTPUT||LA197_41==INSERT||LA197_41==ORDER||(LA197_41>=UNIDIRECTIONAL && LA197_41<=RETAININTERSECTION)||LA197_41==DELETE||LA197_41==SET||LA197_41==UNTIL||LA197_41==ROW_LIMIT_EXPR||(LA197_41>=COMMA && LA197_41<=IDENT)||(LA197_41>=DOT && LA197_41<=RPAREN)||(LA197_41>=LBRACK && LA197_41<=RBRACK)||LA197_41==RCURLY||LA197_41==FOLLOWED_BY||LA197_41==TICKED_STRING_LITERAL||LA197_41==EMAILAT) ) {
                            alt197=1;
                        }


                    }
                    else if ( (LA197_17==TICKED_STRING_LITERAL) ) {
                        alt197=1;
                    }


                }


                switch (alt197) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1247:8: DOT i2= escapableIdent
            	    {
            	    DOT522=(Token)match(input,DOT,FOLLOW_DOT_in_classIdentifier8179); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT522);

            	    pushFollow(FOLLOW_escapableIdent_in_classIdentifier8183);
            	    i2=escapableIdent();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_escapableIdent.add(i2.getTree());
            	    if ( state.backtracking==0 ) {
            	       identifier += "." + (i2!=null?i2.result:null); 
            	    }

            	    }
            	    break;

            	default :
            	    break loop197;
                }
            } while (true);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1249:6: -> ^( CLASS_IDENT[identifier] )
            {
                // EsperEPL2Grammar.g:1249:9: ^( CLASS_IDENT[identifier] )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CLASS_IDENT, identifier), root_1);

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "classIdentifier"

    public static class classIdentifierNonGreedy_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "classIdentifierNonGreedy"
    // EsperEPL2Grammar.g:1252:1: classIdentifierNonGreedy : i1= escapableIdent ( options {greedy=false; } : DOT i2= escapableIdent )* -> ^( CLASS_IDENT[identifier] ) ;
    public final EsperEPL2GrammarParser.classIdentifierNonGreedy_return classIdentifierNonGreedy() throws RecognitionException {
        EsperEPL2GrammarParser.classIdentifierNonGreedy_return retval = new EsperEPL2GrammarParser.classIdentifierNonGreedy_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token DOT523=null;
        EsperEPL2GrammarParser.escapableIdent_return i1 = null;

        EsperEPL2GrammarParser.escapableIdent_return i2 = null;


        CommonTree DOT523_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_escapableIdent=new RewriteRuleSubtreeStream(adaptor,"rule escapableIdent");
         String identifier = ""; 
        try {
            // EsperEPL2Grammar.g:1254:2: (i1= escapableIdent ( options {greedy=false; } : DOT i2= escapableIdent )* -> ^( CLASS_IDENT[identifier] ) )
            // EsperEPL2Grammar.g:1254:4: i1= escapableIdent ( options {greedy=false; } : DOT i2= escapableIdent )*
            {
            pushFollow(FOLLOW_escapableIdent_in_classIdentifierNonGreedy8228);
            i1=escapableIdent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_escapableIdent.add(i1.getTree());
            if ( state.backtracking==0 ) {
               identifier = (i1!=null?i1.result:null); 
            }
            // EsperEPL2Grammar.g:1255:6: ( options {greedy=false; } : DOT i2= escapableIdent )*
            loop198:
            do {
                int alt198=2;
                int LA198_0 = input.LA(1);

                if ( (LA198_0==DOT) ) {
                    switch ( input.LA(2) ) {
                    case IDENT:
                        {
                        int LA198_2 = input.LA(3);

                        if ( (LA198_2==LPAREN) ) {
                            alt198=2;
                        }
                        else if ( (LA198_2==DOT) ) {
                            alt198=1;
                        }


                        }
                        break;
                    case MAX:
                    case MIN:
                        {
                        alt198=2;
                        }
                        break;
                    case TICKED_STRING_LITERAL:
                        {
                        alt198=1;
                        }
                        break;

                    }

                }


                switch (alt198) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1257:8: DOT i2= escapableIdent
            	    {
            	    DOT523=(Token)match(input,DOT,FOLLOW_DOT_in_classIdentifierNonGreedy8263); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT523);

            	    pushFollow(FOLLOW_escapableIdent_in_classIdentifierNonGreedy8267);
            	    i2=escapableIdent();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_escapableIdent.add(i2.getTree());
            	    if ( state.backtracking==0 ) {
            	       identifier += "." + (i2!=null?i2.result:null); 
            	    }

            	    }
            	    break;

            	default :
            	    break loop198;
                }
            } while (true);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1259:6: -> ^( CLASS_IDENT[identifier] )
            {
                // EsperEPL2Grammar.g:1259:9: ^( CLASS_IDENT[identifier] )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CLASS_IDENT, identifier), root_1);

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "classIdentifierNonGreedy"

    public static class expressionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expressionList"
    // EsperEPL2Grammar.g:1262:1: expressionList : expression ( COMMA expression )* ;
    public final EsperEPL2GrammarParser.expressionList_return expressionList() throws RecognitionException {
        EsperEPL2GrammarParser.expressionList_return retval = new EsperEPL2GrammarParser.expressionList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA525=null;
        EsperEPL2GrammarParser.expression_return expression524 = null;

        EsperEPL2GrammarParser.expression_return expression526 = null;


        CommonTree COMMA525_tree=null;

        try {
            // EsperEPL2Grammar.g:1263:6: ( expression ( COMMA expression )* )
            // EsperEPL2Grammar.g:1263:11: expression ( COMMA expression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_expression_in_expressionList8309);
            expression524=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression524.getTree());
            // EsperEPL2Grammar.g:1263:22: ( COMMA expression )*
            loop199:
            do {
                int alt199=2;
                int LA199_0 = input.LA(1);

                if ( (LA199_0==COMMA) ) {
                    alt199=1;
                }


                switch (alt199) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1263:23: COMMA expression
            	    {
            	    COMMA525=(Token)match(input,COMMA,FOLLOW_COMMA_in_expressionList8312); if (state.failed) return retval;
            	    pushFollow(FOLLOW_expression_in_expressionList8315);
            	    expression526=expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression526.getTree());

            	    }
            	    break;

            	default :
            	    break loop199;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "expressionList"

    public static class expressionWithTimeList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expressionWithTimeList"
    // EsperEPL2Grammar.g:1266:1: expressionWithTimeList : expressionWithTime ( COMMA expressionWithTime )* ;
    public final EsperEPL2GrammarParser.expressionWithTimeList_return expressionWithTimeList() throws RecognitionException {
        EsperEPL2GrammarParser.expressionWithTimeList_return retval = new EsperEPL2GrammarParser.expressionWithTimeList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA528=null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime527 = null;

        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime529 = null;


        CommonTree COMMA528_tree=null;

        try {
            // EsperEPL2Grammar.g:1267:6: ( expressionWithTime ( COMMA expressionWithTime )* )
            // EsperEPL2Grammar.g:1267:11: expressionWithTime ( COMMA expressionWithTime )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_expressionWithTime_in_expressionWithTimeList8343);
            expressionWithTime527=expressionWithTime();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionWithTime527.getTree());
            // EsperEPL2Grammar.g:1267:30: ( COMMA expressionWithTime )*
            loop200:
            do {
                int alt200=2;
                int LA200_0 = input.LA(1);

                if ( (LA200_0==COMMA) ) {
                    alt200=1;
                }


                switch (alt200) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1267:31: COMMA expressionWithTime
            	    {
            	    COMMA528=(Token)match(input,COMMA,FOLLOW_COMMA_in_expressionWithTimeList8346); if (state.failed) return retval;
            	    pushFollow(FOLLOW_expressionWithTime_in_expressionWithTimeList8349);
            	    expressionWithTime529=expressionWithTime();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionWithTime529.getTree());

            	    }
            	    break;

            	default :
            	    break loop200;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "expressionWithTimeList"

    public static class expressionWithTime_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expressionWithTime"
    // EsperEPL2Grammar.g:1270:1: expressionWithTime : ( ( lastOperand )=> lastOperand | ( lastWeekdayOperand )=> lastWeekdayOperand | ( timePeriod )=> timePeriod | ( expressionQualifyable )=> expressionQualifyable | ( rangeOperand )=> rangeOperand | ( frequencyOperand )=> frequencyOperand | ( lastOperator )=> lastOperator | ( weekDayOperator )=> weekDayOperator | ( numericParameterList )=> numericParameterList | numberSetStar );
    public final EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime() throws RecognitionException {
        EsperEPL2GrammarParser.expressionWithTime_return retval = new EsperEPL2GrammarParser.expressionWithTime_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.lastOperand_return lastOperand530 = null;

        EsperEPL2GrammarParser.lastWeekdayOperand_return lastWeekdayOperand531 = null;

        EsperEPL2GrammarParser.timePeriod_return timePeriod532 = null;

        EsperEPL2GrammarParser.expressionQualifyable_return expressionQualifyable533 = null;

        EsperEPL2GrammarParser.rangeOperand_return rangeOperand534 = null;

        EsperEPL2GrammarParser.frequencyOperand_return frequencyOperand535 = null;

        EsperEPL2GrammarParser.lastOperator_return lastOperator536 = null;

        EsperEPL2GrammarParser.weekDayOperator_return weekDayOperator537 = null;

        EsperEPL2GrammarParser.numericParameterList_return numericParameterList538 = null;

        EsperEPL2GrammarParser.numberSetStar_return numberSetStar539 = null;



        try {
            // EsperEPL2Grammar.g:1271:2: ( ( lastOperand )=> lastOperand | ( lastWeekdayOperand )=> lastWeekdayOperand | ( timePeriod )=> timePeriod | ( expressionQualifyable )=> expressionQualifyable | ( rangeOperand )=> rangeOperand | ( frequencyOperand )=> frequencyOperand | ( lastOperator )=> lastOperator | ( weekDayOperator )=> weekDayOperator | ( numericParameterList )=> numericParameterList | numberSetStar )
            int alt201=10;
            alt201 = dfa201.predict(input);
            switch (alt201) {
                case 1 :
                    // EsperEPL2Grammar.g:1271:7: ( lastOperand )=> lastOperand
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_lastOperand_in_expressionWithTime8375);
                    lastOperand530=lastOperand();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lastOperand530.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1272:4: ( lastWeekdayOperand )=> lastWeekdayOperand
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_lastWeekdayOperand_in_expressionWithTime8386);
                    lastWeekdayOperand531=lastWeekdayOperand();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lastWeekdayOperand531.getTree());

                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1273:4: ( timePeriod )=> timePeriod
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_timePeriod_in_expressionWithTime8397);
                    timePeriod532=timePeriod();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, timePeriod532.getTree());

                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:1274:4: ( expressionQualifyable )=> expressionQualifyable
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_expressionQualifyable_in_expressionWithTime8408);
                    expressionQualifyable533=expressionQualifyable();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionQualifyable533.getTree());

                    }
                    break;
                case 5 :
                    // EsperEPL2Grammar.g:1275:4: ( rangeOperand )=> rangeOperand
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_rangeOperand_in_expressionWithTime8419);
                    rangeOperand534=rangeOperand();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rangeOperand534.getTree());

                    }
                    break;
                case 6 :
                    // EsperEPL2Grammar.g:1276:5: ( frequencyOperand )=> frequencyOperand
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_frequencyOperand_in_expressionWithTime8431);
                    frequencyOperand535=frequencyOperand();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, frequencyOperand535.getTree());

                    }
                    break;
                case 7 :
                    // EsperEPL2Grammar.g:1277:4: ( lastOperator )=> lastOperator
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_lastOperator_in_expressionWithTime8442);
                    lastOperator536=lastOperator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lastOperator536.getTree());

                    }
                    break;
                case 8 :
                    // EsperEPL2Grammar.g:1278:4: ( weekDayOperator )=> weekDayOperator
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_weekDayOperator_in_expressionWithTime8454);
                    weekDayOperator537=weekDayOperator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, weekDayOperator537.getTree());

                    }
                    break;
                case 9 :
                    // EsperEPL2Grammar.g:1279:5: ( numericParameterList )=> numericParameterList
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_numericParameterList_in_expressionWithTime8466);
                    numericParameterList538=numericParameterList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numericParameterList538.getTree());

                    }
                    break;
                case 10 :
                    // EsperEPL2Grammar.g:1280:4: numberSetStar
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_numberSetStar_in_expressionWithTime8471);
                    numberSetStar539=numberSetStar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numberSetStar539.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "expressionWithTime"

    public static class expressionQualifyable_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expressionQualifyable"
    // EsperEPL2Grammar.g:1283:1: expressionQualifyable : expression (a= ASC | d= DESC | s= TIMEPERIOD_SECONDS | s= TIMEPERIOD_SECOND | s= TIMEPERIOD_SEC )? -> {d != null || a != null}? ^( OBJECT_PARAM_ORDERED_EXPR expression ( $a)? ( $d)? ) -> {s != null}? ^( TIME_PERIOD ^( SECOND_PART expression ) ) -> expression ;
    public final EsperEPL2GrammarParser.expressionQualifyable_return expressionQualifyable() throws RecognitionException {
        EsperEPL2GrammarParser.expressionQualifyable_return retval = new EsperEPL2GrammarParser.expressionQualifyable_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token a=null;
        Token d=null;
        Token s=null;
        EsperEPL2GrammarParser.expression_return expression540 = null;


        CommonTree a_tree=null;
        CommonTree d_tree=null;
        CommonTree s_tree=null;
        RewriteRuleTokenStream stream_TIMEPERIOD_SEC=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SEC");
        RewriteRuleTokenStream stream_TIMEPERIOD_SECOND=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SECOND");
        RewriteRuleTokenStream stream_ASC=new RewriteRuleTokenStream(adaptor,"token ASC");
        RewriteRuleTokenStream stream_DESC=new RewriteRuleTokenStream(adaptor,"token DESC");
        RewriteRuleTokenStream stream_TIMEPERIOD_SECONDS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SECONDS");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            // EsperEPL2Grammar.g:1284:2: ( expression (a= ASC | d= DESC | s= TIMEPERIOD_SECONDS | s= TIMEPERIOD_SECOND | s= TIMEPERIOD_SEC )? -> {d != null || a != null}? ^( OBJECT_PARAM_ORDERED_EXPR expression ( $a)? ( $d)? ) -> {s != null}? ^( TIME_PERIOD ^( SECOND_PART expression ) ) -> expression )
            // EsperEPL2Grammar.g:1284:4: expression (a= ASC | d= DESC | s= TIMEPERIOD_SECONDS | s= TIMEPERIOD_SECOND | s= TIMEPERIOD_SEC )?
            {
            pushFollow(FOLLOW_expression_in_expressionQualifyable8482);
            expression540=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression540.getTree());
            // EsperEPL2Grammar.g:1284:15: (a= ASC | d= DESC | s= TIMEPERIOD_SECONDS | s= TIMEPERIOD_SECOND | s= TIMEPERIOD_SEC )?
            int alt202=6;
            switch ( input.LA(1) ) {
                case ASC:
                    {
                    alt202=1;
                    }
                    break;
                case DESC:
                    {
                    alt202=2;
                    }
                    break;
                case TIMEPERIOD_SECONDS:
                    {
                    alt202=3;
                    }
                    break;
                case TIMEPERIOD_SECOND:
                    {
                    alt202=4;
                    }
                    break;
                case TIMEPERIOD_SEC:
                    {
                    alt202=5;
                    }
                    break;
            }

            switch (alt202) {
                case 1 :
                    // EsperEPL2Grammar.g:1284:16: a= ASC
                    {
                    a=(Token)match(input,ASC,FOLLOW_ASC_in_expressionQualifyable8487); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASC.add(a);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1284:22: d= DESC
                    {
                    d=(Token)match(input,DESC,FOLLOW_DESC_in_expressionQualifyable8491); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DESC.add(d);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1284:29: s= TIMEPERIOD_SECONDS
                    {
                    s=(Token)match(input,TIMEPERIOD_SECONDS,FOLLOW_TIMEPERIOD_SECONDS_in_expressionQualifyable8495); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SECONDS.add(s);


                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:1284:50: s= TIMEPERIOD_SECOND
                    {
                    s=(Token)match(input,TIMEPERIOD_SECOND,FOLLOW_TIMEPERIOD_SECOND_in_expressionQualifyable8499); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SECOND.add(s);


                    }
                    break;
                case 5 :
                    // EsperEPL2Grammar.g:1284:70: s= TIMEPERIOD_SEC
                    {
                    s=(Token)match(input,TIMEPERIOD_SEC,FOLLOW_TIMEPERIOD_SEC_in_expressionQualifyable8503); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SEC.add(s);


                    }
                    break;

            }



            // AST REWRITE
            // elements: expression, a, expression, expression, d
            // token labels: d, a
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_d=new RewriteRuleTokenStream(adaptor,"token d",d);
            RewriteRuleTokenStream stream_a=new RewriteRuleTokenStream(adaptor,"token a",a);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1285:3: -> {d != null || a != null}? ^( OBJECT_PARAM_ORDERED_EXPR expression ( $a)? ( $d)? )
            if (d != null || a != null) {
                // EsperEPL2Grammar.g:1285:32: ^( OBJECT_PARAM_ORDERED_EXPR expression ( $a)? ( $d)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(OBJECT_PARAM_ORDERED_EXPR, "OBJECT_PARAM_ORDERED_EXPR"), root_1);

                adaptor.addChild(root_1, stream_expression.nextTree());
                // EsperEPL2Grammar.g:1285:71: ( $a)?
                if ( stream_a.hasNext() ) {
                    adaptor.addChild(root_1, stream_a.nextNode());

                }
                stream_a.reset();
                // EsperEPL2Grammar.g:1285:75: ( $d)?
                if ( stream_d.hasNext() ) {
                    adaptor.addChild(root_1, stream_d.nextNode());

                }
                stream_d.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1286:3: -> {s != null}? ^( TIME_PERIOD ^( SECOND_PART expression ) )
            if (s != null) {
                // EsperEPL2Grammar.g:1286:19: ^( TIME_PERIOD ^( SECOND_PART expression ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TIME_PERIOD, "TIME_PERIOD"), root_1);

                // EsperEPL2Grammar.g:1286:33: ^( SECOND_PART expression )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SECOND_PART, "SECOND_PART"), root_2);

                adaptor.addChild(root_2, stream_expression.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1287:3: -> expression
            {
                adaptor.addChild(root_0, stream_expression.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "expressionQualifyable"

    public static class numberSetStar_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "numberSetStar"
    // EsperEPL2Grammar.g:1291:1: numberSetStar : STAR -> ^( NUMBERSETSTAR ) ;
    public final EsperEPL2GrammarParser.numberSetStar_return numberSetStar() throws RecognitionException {
        EsperEPL2GrammarParser.numberSetStar_return retval = new EsperEPL2GrammarParser.numberSetStar_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token STAR541=null;

        CommonTree STAR541_tree=null;
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");

        try {
            // EsperEPL2Grammar.g:1292:2: ( STAR -> ^( NUMBERSETSTAR ) )
            // EsperEPL2Grammar.g:1292:4: STAR
            {
            STAR541=(Token)match(input,STAR,FOLLOW_STAR_in_numberSetStar8560); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_STAR.add(STAR541);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1293:3: -> ^( NUMBERSETSTAR )
            {
                // EsperEPL2Grammar.g:1293:6: ^( NUMBERSETSTAR )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMBERSETSTAR, "NUMBERSETSTAR"), root_1);

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "numberSetStar"

    public static class lastWeekdayOperand_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lastWeekdayOperand"
    // EsperEPL2Grammar.g:1296:1: lastWeekdayOperand : LW ;
    public final EsperEPL2GrammarParser.lastWeekdayOperand_return lastWeekdayOperand() throws RecognitionException {
        EsperEPL2GrammarParser.lastWeekdayOperand_return retval = new EsperEPL2GrammarParser.lastWeekdayOperand_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LW542=null;

        CommonTree LW542_tree=null;

        try {
            // EsperEPL2Grammar.g:1297:2: ( LW )
            // EsperEPL2Grammar.g:1297:4: LW
            {
            root_0 = (CommonTree)adaptor.nil();

            LW542=(Token)match(input,LW,FOLLOW_LW_in_lastWeekdayOperand8580); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LW542_tree = (CommonTree)adaptor.create(LW542);
            root_0 = (CommonTree)adaptor.becomeRoot(LW542_tree, root_0);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lastWeekdayOperand"

    public static class lastOperand_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lastOperand"
    // EsperEPL2Grammar.g:1300:1: lastOperand : LAST ;
    public final EsperEPL2GrammarParser.lastOperand_return lastOperand() throws RecognitionException {
        EsperEPL2GrammarParser.lastOperand_return retval = new EsperEPL2GrammarParser.lastOperand_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LAST543=null;

        CommonTree LAST543_tree=null;

        try {
            // EsperEPL2Grammar.g:1301:2: ( LAST )
            // EsperEPL2Grammar.g:1301:4: LAST
            {
            root_0 = (CommonTree)adaptor.nil();

            LAST543=(Token)match(input,LAST,FOLLOW_LAST_in_lastOperand8593); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LAST543_tree = (CommonTree)adaptor.create(LAST543);
            root_0 = (CommonTree)adaptor.becomeRoot(LAST543_tree, root_0);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lastOperand"

    public static class frequencyOperand_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "frequencyOperand"
    // EsperEPL2Grammar.g:1304:1: frequencyOperand : STAR DIV ( number | i= IDENT | substitution ) -> {i!= null}? ^( NUMERIC_PARAM_FREQUENCY ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( NUMERIC_PARAM_FREQUENCY ( number )? ( substitution )? ) ;
    public final EsperEPL2GrammarParser.frequencyOperand_return frequencyOperand() throws RecognitionException {
        EsperEPL2GrammarParser.frequencyOperand_return retval = new EsperEPL2GrammarParser.frequencyOperand_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token STAR544=null;
        Token DIV545=null;
        EsperEPL2GrammarParser.number_return number546 = null;

        EsperEPL2GrammarParser.substitution_return substitution547 = null;


        CommonTree i_tree=null;
        CommonTree STAR544_tree=null;
        CommonTree DIV545_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_DIV=new RewriteRuleTokenStream(adaptor,"token DIV");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            // EsperEPL2Grammar.g:1305:2: ( STAR DIV ( number | i= IDENT | substitution ) -> {i!= null}? ^( NUMERIC_PARAM_FREQUENCY ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( NUMERIC_PARAM_FREQUENCY ( number )? ( substitution )? ) )
            // EsperEPL2Grammar.g:1305:4: STAR DIV ( number | i= IDENT | substitution )
            {
            STAR544=(Token)match(input,STAR,FOLLOW_STAR_in_frequencyOperand8605); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_STAR.add(STAR544);

            DIV545=(Token)match(input,DIV,FOLLOW_DIV_in_frequencyOperand8607); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DIV.add(DIV545);

            // EsperEPL2Grammar.g:1305:13: ( number | i= IDENT | substitution )
            int alt203=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt203=1;
                }
                break;
            case IDENT:
                {
                alt203=2;
                }
                break;
            case QUESTION:
                {
                alt203=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 203, 0, input);

                throw nvae;
            }

            switch (alt203) {
                case 1 :
                    // EsperEPL2Grammar.g:1305:14: number
                    {
                    pushFollow(FOLLOW_number_in_frequencyOperand8610);
                    number546=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number546.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1305:21: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_frequencyOperand8614); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1305:29: substitution
                    {
                    pushFollow(FOLLOW_substitution_in_frequencyOperand8616);
                    substitution547=substitution();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution547.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: i, substitution, number
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1306:3: -> {i!= null}? ^( NUMERIC_PARAM_FREQUENCY ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
            if (i!= null) {
                // EsperEPL2Grammar.g:1306:18: ^( NUMERIC_PARAM_FREQUENCY ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_FREQUENCY, "NUMERIC_PARAM_FREQUENCY"), root_1);

                // EsperEPL2Grammar.g:1306:44: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1306:62: ^( EVENT_PROP_SIMPLE $i)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1307:3: -> ^( NUMERIC_PARAM_FREQUENCY ( number )? ( substitution )? )
            {
                // EsperEPL2Grammar.g:1307:6: ^( NUMERIC_PARAM_FREQUENCY ( number )? ( substitution )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_FREQUENCY, "NUMERIC_PARAM_FREQUENCY"), root_1);

                // EsperEPL2Grammar.g:1307:32: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:1307:40: ( substitution )?
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());

                }
                stream_substitution.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "frequencyOperand"

    public static class rangeOperand_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rangeOperand"
    // EsperEPL2Grammar.g:1310:1: rangeOperand : ( number | i1= IDENT | substitution ) COLON ( number | i2= IDENT | substitution ) -> {i1 != null && i2 != null}? ^( NUMERIC_PARAM_RANGE ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i1) ) ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i2) ) ) -> {i1 != null && i2 == null}? ^( NUMERIC_PARAM_RANGE ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i1) ) ( number )? ( substitution )? ) -> {i1 == null && i2 != null}? ^( NUMERIC_PARAM_RANGE ( number )? ( substitution )? ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i2) ) ) -> ^( NUMERIC_PARAM_RANGE ( number )* ( substitution )* ) ;
    public final EsperEPL2GrammarParser.rangeOperand_return rangeOperand() throws RecognitionException {
        EsperEPL2GrammarParser.rangeOperand_return retval = new EsperEPL2GrammarParser.rangeOperand_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i1=null;
        Token i2=null;
        Token COLON550=null;
        EsperEPL2GrammarParser.number_return number548 = null;

        EsperEPL2GrammarParser.substitution_return substitution549 = null;

        EsperEPL2GrammarParser.number_return number551 = null;

        EsperEPL2GrammarParser.substitution_return substitution552 = null;


        CommonTree i1_tree=null;
        CommonTree i2_tree=null;
        CommonTree COLON550_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            // EsperEPL2Grammar.g:1311:2: ( ( number | i1= IDENT | substitution ) COLON ( number | i2= IDENT | substitution ) -> {i1 != null && i2 != null}? ^( NUMERIC_PARAM_RANGE ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i1) ) ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i2) ) ) -> {i1 != null && i2 == null}? ^( NUMERIC_PARAM_RANGE ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i1) ) ( number )? ( substitution )? ) -> {i1 == null && i2 != null}? ^( NUMERIC_PARAM_RANGE ( number )? ( substitution )? ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i2) ) ) -> ^( NUMERIC_PARAM_RANGE ( number )* ( substitution )* ) )
            // EsperEPL2Grammar.g:1311:4: ( number | i1= IDENT | substitution ) COLON ( number | i2= IDENT | substitution )
            {
            // EsperEPL2Grammar.g:1311:4: ( number | i1= IDENT | substitution )
            int alt204=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt204=1;
                }
                break;
            case IDENT:
                {
                alt204=2;
                }
                break;
            case QUESTION:
                {
                alt204=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 204, 0, input);

                throw nvae;
            }

            switch (alt204) {
                case 1 :
                    // EsperEPL2Grammar.g:1311:5: number
                    {
                    pushFollow(FOLLOW_number_in_rangeOperand8665);
                    number548=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number548.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1311:12: i1= IDENT
                    {
                    i1=(Token)match(input,IDENT,FOLLOW_IDENT_in_rangeOperand8669); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i1);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1311:21: substitution
                    {
                    pushFollow(FOLLOW_substitution_in_rangeOperand8671);
                    substitution549=substitution();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution549.getTree());

                    }
                    break;

            }

            COLON550=(Token)match(input,COLON,FOLLOW_COLON_in_rangeOperand8674); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON550);

            // EsperEPL2Grammar.g:1311:41: ( number | i2= IDENT | substitution )
            int alt205=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt205=1;
                }
                break;
            case IDENT:
                {
                alt205=2;
                }
                break;
            case QUESTION:
                {
                alt205=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 205, 0, input);

                throw nvae;
            }

            switch (alt205) {
                case 1 :
                    // EsperEPL2Grammar.g:1311:42: number
                    {
                    pushFollow(FOLLOW_number_in_rangeOperand8677);
                    number551=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number551.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1311:49: i2= IDENT
                    {
                    i2=(Token)match(input,IDENT,FOLLOW_IDENT_in_rangeOperand8681); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i2);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1311:58: substitution
                    {
                    pushFollow(FOLLOW_substitution_in_rangeOperand8683);
                    substitution552=substitution();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution552.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: number, number, i1, number, substitution, substitution, i2, i2, substitution, i1
            // token labels: i2, i1
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i2=new RewriteRuleTokenStream(adaptor,"token i2",i2);
            RewriteRuleTokenStream stream_i1=new RewriteRuleTokenStream(adaptor,"token i1",i1);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1312:3: -> {i1 != null && i2 != null}? ^( NUMERIC_PARAM_RANGE ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i1) ) ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i2) ) )
            if (i1 != null && i2 != null) {
                // EsperEPL2Grammar.g:1312:34: ^( NUMERIC_PARAM_RANGE ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i1) ) ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i2) ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_RANGE, "NUMERIC_PARAM_RANGE"), root_1);

                // EsperEPL2Grammar.g:1312:56: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i1) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1312:74: ^( EVENT_PROP_SIMPLE $i1)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i1.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }
                // EsperEPL2Grammar.g:1312:100: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i2) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1312:118: ^( EVENT_PROP_SIMPLE $i2)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i2.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1313:3: -> {i1 != null && i2 == null}? ^( NUMERIC_PARAM_RANGE ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i1) ) ( number )? ( substitution )? )
            if (i1 != null && i2 == null) {
                // EsperEPL2Grammar.g:1313:34: ^( NUMERIC_PARAM_RANGE ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i1) ) ( number )? ( substitution )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_RANGE, "NUMERIC_PARAM_RANGE"), root_1);

                // EsperEPL2Grammar.g:1313:56: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i1) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1313:74: ^( EVENT_PROP_SIMPLE $i1)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i1.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }
                // EsperEPL2Grammar.g:1313:100: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:1313:108: ( substitution )?
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());

                }
                stream_substitution.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1314:3: -> {i1 == null && i2 != null}? ^( NUMERIC_PARAM_RANGE ( number )? ( substitution )? ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i2) ) )
            if (i1 == null && i2 != null) {
                // EsperEPL2Grammar.g:1314:34: ^( NUMERIC_PARAM_RANGE ( number )? ( substitution )? ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i2) ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_RANGE, "NUMERIC_PARAM_RANGE"), root_1);

                // EsperEPL2Grammar.g:1314:56: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:1314:64: ( substitution )?
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());

                }
                stream_substitution.reset();
                // EsperEPL2Grammar.g:1314:78: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i2) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1314:96: ^( EVENT_PROP_SIMPLE $i2)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i2.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1315:3: -> ^( NUMERIC_PARAM_RANGE ( number )* ( substitution )* )
            {
                // EsperEPL2Grammar.g:1315:6: ^( NUMERIC_PARAM_RANGE ( number )* ( substitution )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_RANGE, "NUMERIC_PARAM_RANGE"), root_1);

                // EsperEPL2Grammar.g:1315:28: ( number )*
                while ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:1315:36: ( substitution )*
                while ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());

                }
                stream_substitution.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "rangeOperand"

    public static class lastOperator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lastOperator"
    // EsperEPL2Grammar.g:1318:1: lastOperator : ( number | i= IDENT | substitution ) LAST -> {i!= null}? ^( LAST_OPERATOR ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( LAST_OPERATOR ( number )? ( substitution )? ) ;
    public final EsperEPL2GrammarParser.lastOperator_return lastOperator() throws RecognitionException {
        EsperEPL2GrammarParser.lastOperator_return retval = new EsperEPL2GrammarParser.lastOperator_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token LAST555=null;
        EsperEPL2GrammarParser.number_return number553 = null;

        EsperEPL2GrammarParser.substitution_return substitution554 = null;


        CommonTree i_tree=null;
        CommonTree LAST555_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_LAST=new RewriteRuleTokenStream(adaptor,"token LAST");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            // EsperEPL2Grammar.g:1319:2: ( ( number | i= IDENT | substitution ) LAST -> {i!= null}? ^( LAST_OPERATOR ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( LAST_OPERATOR ( number )? ( substitution )? ) )
            // EsperEPL2Grammar.g:1319:4: ( number | i= IDENT | substitution ) LAST
            {
            // EsperEPL2Grammar.g:1319:4: ( number | i= IDENT | substitution )
            int alt206=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt206=1;
                }
                break;
            case IDENT:
                {
                alt206=2;
                }
                break;
            case QUESTION:
                {
                alt206=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 206, 0, input);

                throw nvae;
            }

            switch (alt206) {
                case 1 :
                    // EsperEPL2Grammar.g:1319:5: number
                    {
                    pushFollow(FOLLOW_number_in_lastOperator8797);
                    number553=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number553.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1319:12: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_lastOperator8801); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1319:20: substitution
                    {
                    pushFollow(FOLLOW_substitution_in_lastOperator8803);
                    substitution554=substitution();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution554.getTree());

                    }
                    break;

            }

            LAST555=(Token)match(input,LAST,FOLLOW_LAST_in_lastOperator8806); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LAST.add(LAST555);



            // AST REWRITE
            // elements: i, substitution, number
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1320:3: -> {i!= null}? ^( LAST_OPERATOR ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
            if (i!= null) {
                // EsperEPL2Grammar.g:1320:18: ^( LAST_OPERATOR ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LAST_OPERATOR, "LAST_OPERATOR"), root_1);

                // EsperEPL2Grammar.g:1320:34: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1320:52: ^( EVENT_PROP_SIMPLE $i)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1321:3: -> ^( LAST_OPERATOR ( number )? ( substitution )? )
            {
                // EsperEPL2Grammar.g:1321:6: ^( LAST_OPERATOR ( number )? ( substitution )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LAST_OPERATOR, "LAST_OPERATOR"), root_1);

                // EsperEPL2Grammar.g:1321:22: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:1321:30: ( substitution )?
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());

                }
                stream_substitution.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lastOperator"

    public static class weekDayOperator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "weekDayOperator"
    // EsperEPL2Grammar.g:1324:1: weekDayOperator : ( number | i= IDENT | substitution ) WEEKDAY -> {i!= null}? ^( WEEKDAY_OPERATOR ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( WEEKDAY_OPERATOR ( number )? ( substitution )? ) ;
    public final EsperEPL2GrammarParser.weekDayOperator_return weekDayOperator() throws RecognitionException {
        EsperEPL2GrammarParser.weekDayOperator_return retval = new EsperEPL2GrammarParser.weekDayOperator_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token WEEKDAY558=null;
        EsperEPL2GrammarParser.number_return number556 = null;

        EsperEPL2GrammarParser.substitution_return substitution557 = null;


        CommonTree i_tree=null;
        CommonTree WEEKDAY558_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_WEEKDAY=new RewriteRuleTokenStream(adaptor,"token WEEKDAY");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            // EsperEPL2Grammar.g:1325:2: ( ( number | i= IDENT | substitution ) WEEKDAY -> {i!= null}? ^( WEEKDAY_OPERATOR ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( WEEKDAY_OPERATOR ( number )? ( substitution )? ) )
            // EsperEPL2Grammar.g:1325:4: ( number | i= IDENT | substitution ) WEEKDAY
            {
            // EsperEPL2Grammar.g:1325:4: ( number | i= IDENT | substitution )
            int alt207=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt207=1;
                }
                break;
            case IDENT:
                {
                alt207=2;
                }
                break;
            case QUESTION:
                {
                alt207=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 207, 0, input);

                throw nvae;
            }

            switch (alt207) {
                case 1 :
                    // EsperEPL2Grammar.g:1325:5: number
                    {
                    pushFollow(FOLLOW_number_in_weekDayOperator8854);
                    number556=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number556.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1325:12: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_weekDayOperator8858); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1325:20: substitution
                    {
                    pushFollow(FOLLOW_substitution_in_weekDayOperator8860);
                    substitution557=substitution();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution557.getTree());

                    }
                    break;

            }

            WEEKDAY558=(Token)match(input,WEEKDAY,FOLLOW_WEEKDAY_in_weekDayOperator8863); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_WEEKDAY.add(WEEKDAY558);



            // AST REWRITE
            // elements: substitution, i, number
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1326:3: -> {i!= null}? ^( WEEKDAY_OPERATOR ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
            if (i!= null) {
                // EsperEPL2Grammar.g:1326:18: ^( WEEKDAY_OPERATOR ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WEEKDAY_OPERATOR, "WEEKDAY_OPERATOR"), root_1);

                // EsperEPL2Grammar.g:1326:37: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1326:55: ^( EVENT_PROP_SIMPLE $i)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1327:3: -> ^( WEEKDAY_OPERATOR ( number )? ( substitution )? )
            {
                // EsperEPL2Grammar.g:1327:6: ^( WEEKDAY_OPERATOR ( number )? ( substitution )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WEEKDAY_OPERATOR, "WEEKDAY_OPERATOR"), root_1);

                // EsperEPL2Grammar.g:1327:25: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:1327:33: ( substitution )?
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());

                }
                stream_substitution.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "weekDayOperator"

    public static class numericParameterList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "numericParameterList"
    // EsperEPL2Grammar.g:1330:1: numericParameterList : LBRACK numericListParameter ( COMMA numericListParameter )* RBRACK -> ^( NUMERIC_PARAM_LIST ( numericListParameter )+ ) ;
    public final EsperEPL2GrammarParser.numericParameterList_return numericParameterList() throws RecognitionException {
        EsperEPL2GrammarParser.numericParameterList_return retval = new EsperEPL2GrammarParser.numericParameterList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LBRACK559=null;
        Token COMMA561=null;
        Token RBRACK563=null;
        EsperEPL2GrammarParser.numericListParameter_return numericListParameter560 = null;

        EsperEPL2GrammarParser.numericListParameter_return numericListParameter562 = null;


        CommonTree LBRACK559_tree=null;
        CommonTree COMMA561_tree=null;
        CommonTree RBRACK563_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_numericListParameter=new RewriteRuleSubtreeStream(adaptor,"rule numericListParameter");
        try {
            // EsperEPL2Grammar.g:1331:2: ( LBRACK numericListParameter ( COMMA numericListParameter )* RBRACK -> ^( NUMERIC_PARAM_LIST ( numericListParameter )+ ) )
            // EsperEPL2Grammar.g:1331:4: LBRACK numericListParameter ( COMMA numericListParameter )* RBRACK
            {
            LBRACK559=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_numericParameterList8910); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK559);

            pushFollow(FOLLOW_numericListParameter_in_numericParameterList8912);
            numericListParameter560=numericListParameter();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_numericListParameter.add(numericListParameter560.getTree());
            // EsperEPL2Grammar.g:1331:32: ( COMMA numericListParameter )*
            loop208:
            do {
                int alt208=2;
                int LA208_0 = input.LA(1);

                if ( (LA208_0==COMMA) ) {
                    alt208=1;
                }


                switch (alt208) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1331:33: COMMA numericListParameter
            	    {
            	    COMMA561=(Token)match(input,COMMA,FOLLOW_COMMA_in_numericParameterList8915); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA561);

            	    pushFollow(FOLLOW_numericListParameter_in_numericParameterList8917);
            	    numericListParameter562=numericListParameter();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_numericListParameter.add(numericListParameter562.getTree());

            	    }
            	    break;

            	default :
            	    break loop208;
                }
            } while (true);

            RBRACK563=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_numericParameterList8921); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK563);



            // AST REWRITE
            // elements: numericListParameter
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1332:3: -> ^( NUMERIC_PARAM_LIST ( numericListParameter )+ )
            {
                // EsperEPL2Grammar.g:1332:6: ^( NUMERIC_PARAM_LIST ( numericListParameter )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_LIST, "NUMERIC_PARAM_LIST"), root_1);

                if ( !(stream_numericListParameter.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_numericListParameter.hasNext() ) {
                    adaptor.addChild(root_1, stream_numericListParameter.nextTree());

                }
                stream_numericListParameter.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "numericParameterList"

    public static class numericListParameter_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "numericListParameter"
    // EsperEPL2Grammar.g:1335:1: numericListParameter : ( rangeOperand | frequencyOperand | numberconstant );
    public final EsperEPL2GrammarParser.numericListParameter_return numericListParameter() throws RecognitionException {
        EsperEPL2GrammarParser.numericListParameter_return retval = new EsperEPL2GrammarParser.numericListParameter_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.rangeOperand_return rangeOperand564 = null;

        EsperEPL2GrammarParser.frequencyOperand_return frequencyOperand565 = null;

        EsperEPL2GrammarParser.numberconstant_return numberconstant566 = null;



        try {
            // EsperEPL2Grammar.g:1336:2: ( rangeOperand | frequencyOperand | numberconstant )
            int alt209=3;
            switch ( input.LA(1) ) {
            case NUM_INT:
                {
                int LA209_1 = input.LA(2);

                if ( (LA209_1==COMMA||LA209_1==RBRACK) ) {
                    alt209=3;
                }
                else if ( (LA209_1==COLON) ) {
                    alt209=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 209, 1, input);

                    throw nvae;
                }
                }
                break;
            case NUM_LONG:
                {
                int LA209_2 = input.LA(2);

                if ( (LA209_2==COLON) ) {
                    alt209=1;
                }
                else if ( (LA209_2==COMMA||LA209_2==RBRACK) ) {
                    alt209=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 209, 2, input);

                    throw nvae;
                }
                }
                break;
            case NUM_FLOAT:
                {
                int LA209_3 = input.LA(2);

                if ( (LA209_3==COLON) ) {
                    alt209=1;
                }
                else if ( (LA209_3==COMMA||LA209_3==RBRACK) ) {
                    alt209=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 209, 3, input);

                    throw nvae;
                }
                }
                break;
            case NUM_DOUBLE:
                {
                int LA209_4 = input.LA(2);

                if ( (LA209_4==COMMA||LA209_4==RBRACK) ) {
                    alt209=3;
                }
                else if ( (LA209_4==COLON) ) {
                    alt209=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 209, 4, input);

                    throw nvae;
                }
                }
                break;
            case IDENT:
            case QUESTION:
                {
                alt209=1;
                }
                break;
            case STAR:
                {
                alt209=2;
                }
                break;
            case PLUS:
            case MINUS:
                {
                alt209=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 209, 0, input);

                throw nvae;
            }

            switch (alt209) {
                case 1 :
                    // EsperEPL2Grammar.g:1336:4: rangeOperand
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_rangeOperand_in_numericListParameter8943);
                    rangeOperand564=rangeOperand();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rangeOperand564.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1337:5: frequencyOperand
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_frequencyOperand_in_numericListParameter8949);
                    frequencyOperand565=frequencyOperand();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, frequencyOperand565.getTree());

                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1338:4: numberconstant
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_numberconstant_in_numericListParameter8954);
                    numberconstant566=numberconstant();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numberconstant566.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "numericListParameter"

    public static class eventProperty_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "eventProperty"
    // EsperEPL2Grammar.g:1341:1: eventProperty : eventPropertyAtomic ( DOT eventPropertyAtomic )* -> ^( EVENT_PROP_EXPR ( eventPropertyAtomic )+ ) ;
    public final EsperEPL2GrammarParser.eventProperty_return eventProperty() throws RecognitionException {
        EsperEPL2GrammarParser.eventProperty_return retval = new EsperEPL2GrammarParser.eventProperty_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token DOT568=null;
        EsperEPL2GrammarParser.eventPropertyAtomic_return eventPropertyAtomic567 = null;

        EsperEPL2GrammarParser.eventPropertyAtomic_return eventPropertyAtomic569 = null;


        CommonTree DOT568_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_eventPropertyAtomic=new RewriteRuleSubtreeStream(adaptor,"rule eventPropertyAtomic");
        try {
            // EsperEPL2Grammar.g:1342:2: ( eventPropertyAtomic ( DOT eventPropertyAtomic )* -> ^( EVENT_PROP_EXPR ( eventPropertyAtomic )+ ) )
            // EsperEPL2Grammar.g:1342:4: eventPropertyAtomic ( DOT eventPropertyAtomic )*
            {
            pushFollow(FOLLOW_eventPropertyAtomic_in_eventProperty8970);
            eventPropertyAtomic567=eventPropertyAtomic();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventPropertyAtomic.add(eventPropertyAtomic567.getTree());
            // EsperEPL2Grammar.g:1342:24: ( DOT eventPropertyAtomic )*
            loop210:
            do {
                int alt210=2;
                int LA210_0 = input.LA(1);

                if ( (LA210_0==DOT) ) {
                    alt210=1;
                }


                switch (alt210) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1342:25: DOT eventPropertyAtomic
            	    {
            	    DOT568=(Token)match(input,DOT,FOLLOW_DOT_in_eventProperty8973); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT568);

            	    pushFollow(FOLLOW_eventPropertyAtomic_in_eventProperty8975);
            	    eventPropertyAtomic569=eventPropertyAtomic();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_eventPropertyAtomic.add(eventPropertyAtomic569.getTree());

            	    }
            	    break;

            	default :
            	    break loop210;
                }
            } while (true);



            // AST REWRITE
            // elements: eventPropertyAtomic
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1343:3: -> ^( EVENT_PROP_EXPR ( eventPropertyAtomic )+ )
            {
                // EsperEPL2Grammar.g:1343:6: ^( EVENT_PROP_EXPR ( eventPropertyAtomic )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_1);

                if ( !(stream_eventPropertyAtomic.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_eventPropertyAtomic.hasNext() ) {
                    adaptor.addChild(root_1, stream_eventPropertyAtomic.nextTree());

                }
                stream_eventPropertyAtomic.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "eventProperty"

    public static class eventPropertyAtomic_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "eventPropertyAtomic"
    // EsperEPL2Grammar.g:1346:1: eventPropertyAtomic : eventPropertyIdent (lb= LBRACK ni= NUM_INT RBRACK (q= QUESTION )? | lp= LPAREN (s= STRING_LITERAL | s= QUOTED_STRING_LITERAL ) RPAREN (q= QUESTION )? | q1= QUESTION )? -> {lb!= null && $q == null}? ^( EVENT_PROP_INDEXED eventPropertyIdent $ni) -> {lb!= null && $q != null}? ^( EVENT_PROP_DYNAMIC_INDEXED eventPropertyIdent $ni) -> {lp!= null && $q == null}? ^( EVENT_PROP_MAPPED eventPropertyIdent $s) -> {lp!= null && $q != null}? ^( EVENT_PROP_DYNAMIC_MAPPED eventPropertyIdent $s) -> {q1 != null}? ^( EVENT_PROP_DYNAMIC_SIMPLE eventPropertyIdent ) -> ^( EVENT_PROP_SIMPLE eventPropertyIdent ) ;
    public final EsperEPL2GrammarParser.eventPropertyAtomic_return eventPropertyAtomic() throws RecognitionException {
        EsperEPL2GrammarParser.eventPropertyAtomic_return retval = new EsperEPL2GrammarParser.eventPropertyAtomic_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token lb=null;
        Token ni=null;
        Token q=null;
        Token lp=null;
        Token s=null;
        Token q1=null;
        Token RBRACK571=null;
        Token RPAREN572=null;
        EsperEPL2GrammarParser.eventPropertyIdent_return eventPropertyIdent570 = null;


        CommonTree lb_tree=null;
        CommonTree ni_tree=null;
        CommonTree q_tree=null;
        CommonTree lp_tree=null;
        CommonTree s_tree=null;
        CommonTree q1_tree=null;
        CommonTree RBRACK571_tree=null;
        CommonTree RPAREN572_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token STRING_LITERAL");
        RewriteRuleTokenStream stream_QUESTION=new RewriteRuleTokenStream(adaptor,"token QUESTION");
        RewriteRuleTokenStream stream_QUOTED_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token QUOTED_STRING_LITERAL");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_NUM_INT=new RewriteRuleTokenStream(adaptor,"token NUM_INT");
        RewriteRuleSubtreeStream stream_eventPropertyIdent=new RewriteRuleSubtreeStream(adaptor,"rule eventPropertyIdent");
        try {
            // EsperEPL2Grammar.g:1347:2: ( eventPropertyIdent (lb= LBRACK ni= NUM_INT RBRACK (q= QUESTION )? | lp= LPAREN (s= STRING_LITERAL | s= QUOTED_STRING_LITERAL ) RPAREN (q= QUESTION )? | q1= QUESTION )? -> {lb!= null && $q == null}? ^( EVENT_PROP_INDEXED eventPropertyIdent $ni) -> {lb!= null && $q != null}? ^( EVENT_PROP_DYNAMIC_INDEXED eventPropertyIdent $ni) -> {lp!= null && $q == null}? ^( EVENT_PROP_MAPPED eventPropertyIdent $s) -> {lp!= null && $q != null}? ^( EVENT_PROP_DYNAMIC_MAPPED eventPropertyIdent $s) -> {q1 != null}? ^( EVENT_PROP_DYNAMIC_SIMPLE eventPropertyIdent ) -> ^( EVENT_PROP_SIMPLE eventPropertyIdent ) )
            // EsperEPL2Grammar.g:1347:4: eventPropertyIdent (lb= LBRACK ni= NUM_INT RBRACK (q= QUESTION )? | lp= LPAREN (s= STRING_LITERAL | s= QUOTED_STRING_LITERAL ) RPAREN (q= QUESTION )? | q1= QUESTION )?
            {
            pushFollow(FOLLOW_eventPropertyIdent_in_eventPropertyAtomic9001);
            eventPropertyIdent570=eventPropertyIdent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventPropertyIdent.add(eventPropertyIdent570.getTree());
            // EsperEPL2Grammar.g:1347:23: (lb= LBRACK ni= NUM_INT RBRACK (q= QUESTION )? | lp= LPAREN (s= STRING_LITERAL | s= QUOTED_STRING_LITERAL ) RPAREN (q= QUESTION )? | q1= QUESTION )?
            int alt214=4;
            switch ( input.LA(1) ) {
                case LBRACK:
                    {
                    alt214=1;
                    }
                    break;
                case LPAREN:
                    {
                    alt214=2;
                    }
                    break;
                case QUESTION:
                    {
                    alt214=3;
                    }
                    break;
            }

            switch (alt214) {
                case 1 :
                    // EsperEPL2Grammar.g:1348:4: lb= LBRACK ni= NUM_INT RBRACK (q= QUESTION )?
                    {
                    lb=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_eventPropertyAtomic9010); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LBRACK.add(lb);

                    ni=(Token)match(input,NUM_INT,FOLLOW_NUM_INT_in_eventPropertyAtomic9014); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_INT.add(ni);

                    RBRACK571=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_eventPropertyAtomic9016); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK571);

                    // EsperEPL2Grammar.g:1348:32: (q= QUESTION )?
                    int alt211=2;
                    int LA211_0 = input.LA(1);

                    if ( (LA211_0==QUESTION) ) {
                        alt211=1;
                    }
                    switch (alt211) {
                        case 1 :
                            // EsperEPL2Grammar.g:1348:33: q= QUESTION
                            {
                            q=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_eventPropertyAtomic9021); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUESTION.add(q);


                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1350:4: lp= LPAREN (s= STRING_LITERAL | s= QUOTED_STRING_LITERAL ) RPAREN (q= QUESTION )?
                    {
                    lp=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_eventPropertyAtomic9035); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(lp);

                    // EsperEPL2Grammar.g:1350:14: (s= STRING_LITERAL | s= QUOTED_STRING_LITERAL )
                    int alt212=2;
                    int LA212_0 = input.LA(1);

                    if ( (LA212_0==STRING_LITERAL) ) {
                        alt212=1;
                    }
                    else if ( (LA212_0==QUOTED_STRING_LITERAL) ) {
                        alt212=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 212, 0, input);

                        throw nvae;
                    }
                    switch (alt212) {
                        case 1 :
                            // EsperEPL2Grammar.g:1350:15: s= STRING_LITERAL
                            {
                            s=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_eventPropertyAtomic9040); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_STRING_LITERAL.add(s);


                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1350:34: s= QUOTED_STRING_LITERAL
                            {
                            s=(Token)match(input,QUOTED_STRING_LITERAL,FOLLOW_QUOTED_STRING_LITERAL_in_eventPropertyAtomic9046); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUOTED_STRING_LITERAL.add(s);


                            }
                            break;

                    }

                    RPAREN572=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_eventPropertyAtomic9049); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN572);

                    // EsperEPL2Grammar.g:1350:66: (q= QUESTION )?
                    int alt213=2;
                    int LA213_0 = input.LA(1);

                    if ( (LA213_0==QUESTION) ) {
                        alt213=1;
                    }
                    switch (alt213) {
                        case 1 :
                            // EsperEPL2Grammar.g:1350:67: q= QUESTION
                            {
                            q=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_eventPropertyAtomic9054); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUESTION.add(q);


                            }
                            break;

                    }


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1352:4: q1= QUESTION
                    {
                    q1=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_eventPropertyAtomic9068); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUESTION.add(q1);


                    }
                    break;

            }



            // AST REWRITE
            // elements: s, s, eventPropertyIdent, eventPropertyIdent, eventPropertyIdent, eventPropertyIdent, ni, eventPropertyIdent, ni, eventPropertyIdent
            // token labels: s, ni
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_ni=new RewriteRuleTokenStream(adaptor,"token ni",ni);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1355:3: -> {lb!= null && $q == null}? ^( EVENT_PROP_INDEXED eventPropertyIdent $ni)
            if (lb!= null && q == null) {
                // EsperEPL2Grammar.g:1355:33: ^( EVENT_PROP_INDEXED eventPropertyIdent $ni)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_INDEXED, "EVENT_PROP_INDEXED"), root_1);

                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_1, stream_ni.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1356:3: -> {lb!= null && $q != null}? ^( EVENT_PROP_DYNAMIC_INDEXED eventPropertyIdent $ni)
            if (lb!= null && q != null) {
                // EsperEPL2Grammar.g:1356:33: ^( EVENT_PROP_DYNAMIC_INDEXED eventPropertyIdent $ni)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_DYNAMIC_INDEXED, "EVENT_PROP_DYNAMIC_INDEXED"), root_1);

                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_1, stream_ni.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1357:3: -> {lp!= null && $q == null}? ^( EVENT_PROP_MAPPED eventPropertyIdent $s)
            if (lp!= null && q == null) {
                // EsperEPL2Grammar.g:1357:33: ^( EVENT_PROP_MAPPED eventPropertyIdent $s)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_MAPPED, "EVENT_PROP_MAPPED"), root_1);

                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_1, stream_s.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1358:3: -> {lp!= null && $q != null}? ^( EVENT_PROP_DYNAMIC_MAPPED eventPropertyIdent $s)
            if (lp!= null && q != null) {
                // EsperEPL2Grammar.g:1358:33: ^( EVENT_PROP_DYNAMIC_MAPPED eventPropertyIdent $s)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_DYNAMIC_MAPPED, "EVENT_PROP_DYNAMIC_MAPPED"), root_1);

                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_1, stream_s.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1359:3: -> {q1 != null}? ^( EVENT_PROP_DYNAMIC_SIMPLE eventPropertyIdent )
            if (q1 != null) {
                // EsperEPL2Grammar.g:1359:27: ^( EVENT_PROP_DYNAMIC_SIMPLE eventPropertyIdent )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_DYNAMIC_SIMPLE, "EVENT_PROP_DYNAMIC_SIMPLE"), root_1);

                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1360:3: -> ^( EVENT_PROP_SIMPLE eventPropertyIdent )
            {
                // EsperEPL2Grammar.g:1360:6: ^( EVENT_PROP_SIMPLE eventPropertyIdent )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_1);

                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "eventPropertyAtomic"

    public static class eventPropertyIdent_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "eventPropertyIdent"
    // EsperEPL2Grammar.g:1363:1: eventPropertyIdent : ipi= keywordAllowedIdent ( ESCAPECHAR DOT (ipi2= keywordAllowedIdent )? )* -> ^( IDENT[identifier] ) ;
    public final EsperEPL2GrammarParser.eventPropertyIdent_return eventPropertyIdent() throws RecognitionException {
        EsperEPL2GrammarParser.eventPropertyIdent_return retval = new EsperEPL2GrammarParser.eventPropertyIdent_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token ESCAPECHAR573=null;
        Token DOT574=null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return ipi = null;

        EsperEPL2GrammarParser.keywordAllowedIdent_return ipi2 = null;


        CommonTree ESCAPECHAR573_tree=null;
        CommonTree DOT574_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_ESCAPECHAR=new RewriteRuleTokenStream(adaptor,"token ESCAPECHAR");
        RewriteRuleSubtreeStream stream_keywordAllowedIdent=new RewriteRuleSubtreeStream(adaptor,"rule keywordAllowedIdent");
         String identifier = ""; 
        try {
            // EsperEPL2Grammar.g:1365:2: (ipi= keywordAllowedIdent ( ESCAPECHAR DOT (ipi2= keywordAllowedIdent )? )* -> ^( IDENT[identifier] ) )
            // EsperEPL2Grammar.g:1365:4: ipi= keywordAllowedIdent ( ESCAPECHAR DOT (ipi2= keywordAllowedIdent )? )*
            {
            pushFollow(FOLLOW_keywordAllowedIdent_in_eventPropertyIdent9191);
            ipi=keywordAllowedIdent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(ipi.getTree());
            if ( state.backtracking==0 ) {
               identifier = ipi.result; 
            }
            // EsperEPL2Grammar.g:1366:3: ( ESCAPECHAR DOT (ipi2= keywordAllowedIdent )? )*
            loop216:
            do {
                int alt216=2;
                int LA216_0 = input.LA(1);

                if ( (LA216_0==ESCAPECHAR) ) {
                    alt216=1;
                }


                switch (alt216) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1367:5: ESCAPECHAR DOT (ipi2= keywordAllowedIdent )?
            	    {
            	    ESCAPECHAR573=(Token)match(input,ESCAPECHAR,FOLLOW_ESCAPECHAR_in_eventPropertyIdent9203); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_ESCAPECHAR.add(ESCAPECHAR573);

            	    DOT574=(Token)match(input,DOT,FOLLOW_DOT_in_eventPropertyIdent9205); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT574);

            	    // EsperEPL2Grammar.g:1367:24: (ipi2= keywordAllowedIdent )?
            	    int alt215=2;
            	    alt215 = dfa215.predict(input);
            	    switch (alt215) {
            	        case 1 :
            	            // EsperEPL2Grammar.g:1367:24: ipi2= keywordAllowedIdent
            	            {
            	            pushFollow(FOLLOW_keywordAllowedIdent_in_eventPropertyIdent9209);
            	            ipi2=keywordAllowedIdent();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(ipi2.getTree());

            	            }
            	            break;

            	    }

            	    if ( state.backtracking==0 ) {
            	       identifier += "."; if (ipi2 != null) identifier += ipi2.result; 
            	    }

            	    }
            	    break;

            	default :
            	    break loop216;
                }
            } while (true);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1369:7: -> ^( IDENT[identifier] )
            {
                // EsperEPL2Grammar.g:1369:10: ^( IDENT[identifier] )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IDENT, identifier), root_1);

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "eventPropertyIdent"

    public static class keywordAllowedIdent_return extends ParserRuleReturnScope {
        public String result;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keywordAllowedIdent"
    // EsperEPL2Grammar.g:1372:1: keywordAllowedIdent returns [String result] : (i1= IDENT | i2= TICKED_STRING_LITERAL | AT | COUNT | ESCAPE | EVERY_EXPR | SUM | AVG | MAX | MIN | COALESCE | MEDIAN | STDDEV | AVEDEV | EVENTS | FIRST | LAST | UNIDIRECTIONAL | RETAINUNION | RETAININTERSECTION | UNTIL | PATTERN | SQL | METADATASQL | PREVIOUS | PRIOR | WEEKDAY | LW | INSTANCEOF | CAST | SNAPSHOT | VARIABLE | WINDOW | LEFT | RIGHT | OUTER | FULL | JOIN );
    public final EsperEPL2GrammarParser.keywordAllowedIdent_return keywordAllowedIdent() throws RecognitionException {
        EsperEPL2GrammarParser.keywordAllowedIdent_return retval = new EsperEPL2GrammarParser.keywordAllowedIdent_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i1=null;
        Token i2=null;
        Token AT575=null;
        Token COUNT576=null;
        Token ESCAPE577=null;
        Token EVERY_EXPR578=null;
        Token SUM579=null;
        Token AVG580=null;
        Token MAX581=null;
        Token MIN582=null;
        Token COALESCE583=null;
        Token MEDIAN584=null;
        Token STDDEV585=null;
        Token AVEDEV586=null;
        Token EVENTS587=null;
        Token FIRST588=null;
        Token LAST589=null;
        Token UNIDIRECTIONAL590=null;
        Token RETAINUNION591=null;
        Token RETAININTERSECTION592=null;
        Token UNTIL593=null;
        Token PATTERN594=null;
        Token SQL595=null;
        Token METADATASQL596=null;
        Token PREVIOUS597=null;
        Token PRIOR598=null;
        Token WEEKDAY599=null;
        Token LW600=null;
        Token INSTANCEOF601=null;
        Token CAST602=null;
        Token SNAPSHOT603=null;
        Token VARIABLE604=null;
        Token WINDOW605=null;
        Token LEFT606=null;
        Token RIGHT607=null;
        Token OUTER608=null;
        Token FULL609=null;
        Token JOIN610=null;

        CommonTree i1_tree=null;
        CommonTree i2_tree=null;
        CommonTree AT575_tree=null;
        CommonTree COUNT576_tree=null;
        CommonTree ESCAPE577_tree=null;
        CommonTree EVERY_EXPR578_tree=null;
        CommonTree SUM579_tree=null;
        CommonTree AVG580_tree=null;
        CommonTree MAX581_tree=null;
        CommonTree MIN582_tree=null;
        CommonTree COALESCE583_tree=null;
        CommonTree MEDIAN584_tree=null;
        CommonTree STDDEV585_tree=null;
        CommonTree AVEDEV586_tree=null;
        CommonTree EVENTS587_tree=null;
        CommonTree FIRST588_tree=null;
        CommonTree LAST589_tree=null;
        CommonTree UNIDIRECTIONAL590_tree=null;
        CommonTree RETAINUNION591_tree=null;
        CommonTree RETAININTERSECTION592_tree=null;
        CommonTree UNTIL593_tree=null;
        CommonTree PATTERN594_tree=null;
        CommonTree SQL595_tree=null;
        CommonTree METADATASQL596_tree=null;
        CommonTree PREVIOUS597_tree=null;
        CommonTree PRIOR598_tree=null;
        CommonTree WEEKDAY599_tree=null;
        CommonTree LW600_tree=null;
        CommonTree INSTANCEOF601_tree=null;
        CommonTree CAST602_tree=null;
        CommonTree SNAPSHOT603_tree=null;
        CommonTree VARIABLE604_tree=null;
        CommonTree WINDOW605_tree=null;
        CommonTree LEFT606_tree=null;
        CommonTree RIGHT607_tree=null;
        CommonTree OUTER608_tree=null;
        CommonTree FULL609_tree=null;
        CommonTree JOIN610_tree=null;

        try {
            // EsperEPL2Grammar.g:1373:2: (i1= IDENT | i2= TICKED_STRING_LITERAL | AT | COUNT | ESCAPE | EVERY_EXPR | SUM | AVG | MAX | MIN | COALESCE | MEDIAN | STDDEV | AVEDEV | EVENTS | FIRST | LAST | UNIDIRECTIONAL | RETAINUNION | RETAININTERSECTION | UNTIL | PATTERN | SQL | METADATASQL | PREVIOUS | PRIOR | WEEKDAY | LW | INSTANCEOF | CAST | SNAPSHOT | VARIABLE | WINDOW | LEFT | RIGHT | OUTER | FULL | JOIN )
            int alt217=38;
            switch ( input.LA(1) ) {
            case IDENT:
                {
                alt217=1;
                }
                break;
            case TICKED_STRING_LITERAL:
                {
                alt217=2;
                }
                break;
            case AT:
                {
                alt217=3;
                }
                break;
            case COUNT:
                {
                alt217=4;
                }
                break;
            case ESCAPE:
                {
                alt217=5;
                }
                break;
            case EVERY_EXPR:
                {
                alt217=6;
                }
                break;
            case SUM:
                {
                alt217=7;
                }
                break;
            case AVG:
                {
                alt217=8;
                }
                break;
            case MAX:
                {
                alt217=9;
                }
                break;
            case MIN:
                {
                alt217=10;
                }
                break;
            case COALESCE:
                {
                alt217=11;
                }
                break;
            case MEDIAN:
                {
                alt217=12;
                }
                break;
            case STDDEV:
                {
                alt217=13;
                }
                break;
            case AVEDEV:
                {
                alt217=14;
                }
                break;
            case EVENTS:
                {
                alt217=15;
                }
                break;
            case FIRST:
                {
                alt217=16;
                }
                break;
            case LAST:
                {
                alt217=17;
                }
                break;
            case UNIDIRECTIONAL:
                {
                alt217=18;
                }
                break;
            case RETAINUNION:
                {
                alt217=19;
                }
                break;
            case RETAININTERSECTION:
                {
                alt217=20;
                }
                break;
            case UNTIL:
                {
                alt217=21;
                }
                break;
            case PATTERN:
                {
                alt217=22;
                }
                break;
            case SQL:
                {
                alt217=23;
                }
                break;
            case METADATASQL:
                {
                alt217=24;
                }
                break;
            case PREVIOUS:
                {
                alt217=25;
                }
                break;
            case PRIOR:
                {
                alt217=26;
                }
                break;
            case WEEKDAY:
                {
                alt217=27;
                }
                break;
            case LW:
                {
                alt217=28;
                }
                break;
            case INSTANCEOF:
                {
                alt217=29;
                }
                break;
            case CAST:
                {
                alt217=30;
                }
                break;
            case SNAPSHOT:
                {
                alt217=31;
                }
                break;
            case VARIABLE:
                {
                alt217=32;
                }
                break;
            case WINDOW:
                {
                alt217=33;
                }
                break;
            case LEFT:
                {
                alt217=34;
                }
                break;
            case RIGHT:
                {
                alt217=35;
                }
                break;
            case OUTER:
                {
                alt217=36;
                }
                break;
            case FULL:
                {
                alt217=37;
                }
                break;
            case JOIN:
                {
                alt217=38;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 217, 0, input);

                throw nvae;
            }

            switch (alt217) {
                case 1 :
                    // EsperEPL2Grammar.g:1373:4: i1= IDENT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    i1=(Token)match(input,IDENT,FOLLOW_IDENT_in_keywordAllowedIdent9248); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    i1_tree = (CommonTree)adaptor.create(i1);
                    adaptor.addChild(root_0, i1_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = i1.getText(); 
                    }

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1374:4: i2= TICKED_STRING_LITERAL
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    i2=(Token)match(input,TICKED_STRING_LITERAL,FOLLOW_TICKED_STRING_LITERAL_in_keywordAllowedIdent9257); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    i2_tree = (CommonTree)adaptor.create(i2);
                    adaptor.addChild(root_0, i2_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = removeTicks(i2.getText()); 
                    }

                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1375:4: AT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    AT575=(Token)match(input,AT,FOLLOW_AT_in_keywordAllowedIdent9264); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AT575_tree = (CommonTree)adaptor.create(AT575);
                    adaptor.addChild(root_0, AT575_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "at"; 
                    }

                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:1376:4: COUNT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    COUNT576=(Token)match(input,COUNT,FOLLOW_COUNT_in_keywordAllowedIdent9271); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COUNT576_tree = (CommonTree)adaptor.create(COUNT576);
                    adaptor.addChild(root_0, COUNT576_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "count"; 
                    }

                    }
                    break;
                case 5 :
                    // EsperEPL2Grammar.g:1377:4: ESCAPE
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    ESCAPE577=(Token)match(input,ESCAPE,FOLLOW_ESCAPE_in_keywordAllowedIdent9278); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ESCAPE577_tree = (CommonTree)adaptor.create(ESCAPE577);
                    adaptor.addChild(root_0, ESCAPE577_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "escape"; 
                    }

                    }
                    break;
                case 6 :
                    // EsperEPL2Grammar.g:1378:8: EVERY_EXPR
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    EVERY_EXPR578=(Token)match(input,EVERY_EXPR,FOLLOW_EVERY_EXPR_in_keywordAllowedIdent9289); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EVERY_EXPR578_tree = (CommonTree)adaptor.create(EVERY_EXPR578);
                    adaptor.addChild(root_0, EVERY_EXPR578_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "every"; 
                    }

                    }
                    break;
                case 7 :
                    // EsperEPL2Grammar.g:1379:4: SUM
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    SUM579=(Token)match(input,SUM,FOLLOW_SUM_in_keywordAllowedIdent9296); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SUM579_tree = (CommonTree)adaptor.create(SUM579);
                    adaptor.addChild(root_0, SUM579_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "sum"; 
                    }

                    }
                    break;
                case 8 :
                    // EsperEPL2Grammar.g:1380:4: AVG
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    AVG580=(Token)match(input,AVG,FOLLOW_AVG_in_keywordAllowedIdent9303); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AVG580_tree = (CommonTree)adaptor.create(AVG580);
                    adaptor.addChild(root_0, AVG580_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "avg"; 
                    }

                    }
                    break;
                case 9 :
                    // EsperEPL2Grammar.g:1381:4: MAX
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    MAX581=(Token)match(input,MAX,FOLLOW_MAX_in_keywordAllowedIdent9310); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MAX581_tree = (CommonTree)adaptor.create(MAX581);
                    adaptor.addChild(root_0, MAX581_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "max"; 
                    }

                    }
                    break;
                case 10 :
                    // EsperEPL2Grammar.g:1382:4: MIN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    MIN582=(Token)match(input,MIN,FOLLOW_MIN_in_keywordAllowedIdent9317); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MIN582_tree = (CommonTree)adaptor.create(MIN582);
                    adaptor.addChild(root_0, MIN582_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "min"; 
                    }

                    }
                    break;
                case 11 :
                    // EsperEPL2Grammar.g:1383:4: COALESCE
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    COALESCE583=(Token)match(input,COALESCE,FOLLOW_COALESCE_in_keywordAllowedIdent9324); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COALESCE583_tree = (CommonTree)adaptor.create(COALESCE583);
                    adaptor.addChild(root_0, COALESCE583_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "coalesce"; 
                    }

                    }
                    break;
                case 12 :
                    // EsperEPL2Grammar.g:1384:4: MEDIAN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    MEDIAN584=(Token)match(input,MEDIAN,FOLLOW_MEDIAN_in_keywordAllowedIdent9331); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MEDIAN584_tree = (CommonTree)adaptor.create(MEDIAN584);
                    adaptor.addChild(root_0, MEDIAN584_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "median"; 
                    }

                    }
                    break;
                case 13 :
                    // EsperEPL2Grammar.g:1385:4: STDDEV
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    STDDEV585=(Token)match(input,STDDEV,FOLLOW_STDDEV_in_keywordAllowedIdent9338); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STDDEV585_tree = (CommonTree)adaptor.create(STDDEV585);
                    adaptor.addChild(root_0, STDDEV585_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "stddev"; 
                    }

                    }
                    break;
                case 14 :
                    // EsperEPL2Grammar.g:1386:4: AVEDEV
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    AVEDEV586=(Token)match(input,AVEDEV,FOLLOW_AVEDEV_in_keywordAllowedIdent9345); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AVEDEV586_tree = (CommonTree)adaptor.create(AVEDEV586);
                    adaptor.addChild(root_0, AVEDEV586_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "avedev"; 
                    }

                    }
                    break;
                case 15 :
                    // EsperEPL2Grammar.g:1387:4: EVENTS
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    EVENTS587=(Token)match(input,EVENTS,FOLLOW_EVENTS_in_keywordAllowedIdent9352); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EVENTS587_tree = (CommonTree)adaptor.create(EVENTS587);
                    adaptor.addChild(root_0, EVENTS587_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "events"; 
                    }

                    }
                    break;
                case 16 :
                    // EsperEPL2Grammar.g:1388:4: FIRST
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    FIRST588=(Token)match(input,FIRST,FOLLOW_FIRST_in_keywordAllowedIdent9359); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FIRST588_tree = (CommonTree)adaptor.create(FIRST588);
                    adaptor.addChild(root_0, FIRST588_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "first"; 
                    }

                    }
                    break;
                case 17 :
                    // EsperEPL2Grammar.g:1389:4: LAST
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    LAST589=(Token)match(input,LAST,FOLLOW_LAST_in_keywordAllowedIdent9366); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LAST589_tree = (CommonTree)adaptor.create(LAST589);
                    adaptor.addChild(root_0, LAST589_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "last"; 
                    }

                    }
                    break;
                case 18 :
                    // EsperEPL2Grammar.g:1390:4: UNIDIRECTIONAL
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    UNIDIRECTIONAL590=(Token)match(input,UNIDIRECTIONAL,FOLLOW_UNIDIRECTIONAL_in_keywordAllowedIdent9373); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    UNIDIRECTIONAL590_tree = (CommonTree)adaptor.create(UNIDIRECTIONAL590);
                    adaptor.addChild(root_0, UNIDIRECTIONAL590_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "unidirectional"; 
                    }

                    }
                    break;
                case 19 :
                    // EsperEPL2Grammar.g:1391:4: RETAINUNION
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    RETAINUNION591=(Token)match(input,RETAINUNION,FOLLOW_RETAINUNION_in_keywordAllowedIdent9380); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RETAINUNION591_tree = (CommonTree)adaptor.create(RETAINUNION591);
                    adaptor.addChild(root_0, RETAINUNION591_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "retain-union"; 
                    }

                    }
                    break;
                case 20 :
                    // EsperEPL2Grammar.g:1392:4: RETAININTERSECTION
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    RETAININTERSECTION592=(Token)match(input,RETAININTERSECTION,FOLLOW_RETAININTERSECTION_in_keywordAllowedIdent9387); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RETAININTERSECTION592_tree = (CommonTree)adaptor.create(RETAININTERSECTION592);
                    adaptor.addChild(root_0, RETAININTERSECTION592_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "retain-intersection"; 
                    }

                    }
                    break;
                case 21 :
                    // EsperEPL2Grammar.g:1393:4: UNTIL
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    UNTIL593=(Token)match(input,UNTIL,FOLLOW_UNTIL_in_keywordAllowedIdent9394); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    UNTIL593_tree = (CommonTree)adaptor.create(UNTIL593);
                    adaptor.addChild(root_0, UNTIL593_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "until"; 
                    }

                    }
                    break;
                case 22 :
                    // EsperEPL2Grammar.g:1394:4: PATTERN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    PATTERN594=(Token)match(input,PATTERN,FOLLOW_PATTERN_in_keywordAllowedIdent9401); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PATTERN594_tree = (CommonTree)adaptor.create(PATTERN594);
                    adaptor.addChild(root_0, PATTERN594_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "pattern"; 
                    }

                    }
                    break;
                case 23 :
                    // EsperEPL2Grammar.g:1395:4: SQL
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    SQL595=(Token)match(input,SQL,FOLLOW_SQL_in_keywordAllowedIdent9408); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SQL595_tree = (CommonTree)adaptor.create(SQL595);
                    adaptor.addChild(root_0, SQL595_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "sql"; 
                    }

                    }
                    break;
                case 24 :
                    // EsperEPL2Grammar.g:1396:4: METADATASQL
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    METADATASQL596=(Token)match(input,METADATASQL,FOLLOW_METADATASQL_in_keywordAllowedIdent9415); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    METADATASQL596_tree = (CommonTree)adaptor.create(METADATASQL596);
                    adaptor.addChild(root_0, METADATASQL596_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "metadatasql"; 
                    }

                    }
                    break;
                case 25 :
                    // EsperEPL2Grammar.g:1397:4: PREVIOUS
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    PREVIOUS597=(Token)match(input,PREVIOUS,FOLLOW_PREVIOUS_in_keywordAllowedIdent9422); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PREVIOUS597_tree = (CommonTree)adaptor.create(PREVIOUS597);
                    adaptor.addChild(root_0, PREVIOUS597_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "prev"; 
                    }

                    }
                    break;
                case 26 :
                    // EsperEPL2Grammar.g:1398:4: PRIOR
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    PRIOR598=(Token)match(input,PRIOR,FOLLOW_PRIOR_in_keywordAllowedIdent9429); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PRIOR598_tree = (CommonTree)adaptor.create(PRIOR598);
                    adaptor.addChild(root_0, PRIOR598_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "prior"; 
                    }

                    }
                    break;
                case 27 :
                    // EsperEPL2Grammar.g:1399:4: WEEKDAY
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    WEEKDAY599=(Token)match(input,WEEKDAY,FOLLOW_WEEKDAY_in_keywordAllowedIdent9436); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    WEEKDAY599_tree = (CommonTree)adaptor.create(WEEKDAY599);
                    adaptor.addChild(root_0, WEEKDAY599_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "weekday"; 
                    }

                    }
                    break;
                case 28 :
                    // EsperEPL2Grammar.g:1400:4: LW
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    LW600=(Token)match(input,LW,FOLLOW_LW_in_keywordAllowedIdent9443); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LW600_tree = (CommonTree)adaptor.create(LW600);
                    adaptor.addChild(root_0, LW600_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "lastweekday"; 
                    }

                    }
                    break;
                case 29 :
                    // EsperEPL2Grammar.g:1401:4: INSTANCEOF
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    INSTANCEOF601=(Token)match(input,INSTANCEOF,FOLLOW_INSTANCEOF_in_keywordAllowedIdent9450); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INSTANCEOF601_tree = (CommonTree)adaptor.create(INSTANCEOF601);
                    adaptor.addChild(root_0, INSTANCEOF601_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "instanceof"; 
                    }

                    }
                    break;
                case 30 :
                    // EsperEPL2Grammar.g:1402:4: CAST
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    CAST602=(Token)match(input,CAST,FOLLOW_CAST_in_keywordAllowedIdent9457); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CAST602_tree = (CommonTree)adaptor.create(CAST602);
                    adaptor.addChild(root_0, CAST602_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "cast"; 
                    }

                    }
                    break;
                case 31 :
                    // EsperEPL2Grammar.g:1403:4: SNAPSHOT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    SNAPSHOT603=(Token)match(input,SNAPSHOT,FOLLOW_SNAPSHOT_in_keywordAllowedIdent9464); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SNAPSHOT603_tree = (CommonTree)adaptor.create(SNAPSHOT603);
                    adaptor.addChild(root_0, SNAPSHOT603_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "snapshot"; 
                    }

                    }
                    break;
                case 32 :
                    // EsperEPL2Grammar.g:1404:4: VARIABLE
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    VARIABLE604=(Token)match(input,VARIABLE,FOLLOW_VARIABLE_in_keywordAllowedIdent9471); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    VARIABLE604_tree = (CommonTree)adaptor.create(VARIABLE604);
                    adaptor.addChild(root_0, VARIABLE604_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "variable"; 
                    }

                    }
                    break;
                case 33 :
                    // EsperEPL2Grammar.g:1405:4: WINDOW
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    WINDOW605=(Token)match(input,WINDOW,FOLLOW_WINDOW_in_keywordAllowedIdent9480); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    WINDOW605_tree = (CommonTree)adaptor.create(WINDOW605);
                    adaptor.addChild(root_0, WINDOW605_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "window"; 
                    }

                    }
                    break;
                case 34 :
                    // EsperEPL2Grammar.g:1406:4: LEFT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    LEFT606=(Token)match(input,LEFT,FOLLOW_LEFT_in_keywordAllowedIdent9487); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LEFT606_tree = (CommonTree)adaptor.create(LEFT606);
                    adaptor.addChild(root_0, LEFT606_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "left"; 
                    }

                    }
                    break;
                case 35 :
                    // EsperEPL2Grammar.g:1407:4: RIGHT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    RIGHT607=(Token)match(input,RIGHT,FOLLOW_RIGHT_in_keywordAllowedIdent9494); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RIGHT607_tree = (CommonTree)adaptor.create(RIGHT607);
                    adaptor.addChild(root_0, RIGHT607_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "right"; 
                    }

                    }
                    break;
                case 36 :
                    // EsperEPL2Grammar.g:1408:4: OUTER
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    OUTER608=(Token)match(input,OUTER,FOLLOW_OUTER_in_keywordAllowedIdent9501); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    OUTER608_tree = (CommonTree)adaptor.create(OUTER608);
                    adaptor.addChild(root_0, OUTER608_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "outer"; 
                    }

                    }
                    break;
                case 37 :
                    // EsperEPL2Grammar.g:1409:4: FULL
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    FULL609=(Token)match(input,FULL,FOLLOW_FULL_in_keywordAllowedIdent9508); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FULL609_tree = (CommonTree)adaptor.create(FULL609);
                    adaptor.addChild(root_0, FULL609_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "full"; 
                    }

                    }
                    break;
                case 38 :
                    // EsperEPL2Grammar.g:1410:4: JOIN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    JOIN610=(Token)match(input,JOIN,FOLLOW_JOIN_in_keywordAllowedIdent9515); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    JOIN610_tree = (CommonTree)adaptor.create(JOIN610);
                    adaptor.addChild(root_0, JOIN610_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "join"; 
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "keywordAllowedIdent"

    public static class escapableIdent_return extends ParserRuleReturnScope {
        public String result;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "escapableIdent"
    // EsperEPL2Grammar.g:1413:1: escapableIdent returns [String result] : (i1= IDENT | i2= TICKED_STRING_LITERAL );
    public final EsperEPL2GrammarParser.escapableIdent_return escapableIdent() throws RecognitionException {
        EsperEPL2GrammarParser.escapableIdent_return retval = new EsperEPL2GrammarParser.escapableIdent_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i1=null;
        Token i2=null;

        CommonTree i1_tree=null;
        CommonTree i2_tree=null;

        try {
            // EsperEPL2Grammar.g:1414:2: (i1= IDENT | i2= TICKED_STRING_LITERAL )
            int alt218=2;
            int LA218_0 = input.LA(1);

            if ( (LA218_0==IDENT) ) {
                alt218=1;
            }
            else if ( (LA218_0==TICKED_STRING_LITERAL) ) {
                alt218=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 218, 0, input);

                throw nvae;
            }
            switch (alt218) {
                case 1 :
                    // EsperEPL2Grammar.g:1414:4: i1= IDENT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    i1=(Token)match(input,IDENT,FOLLOW_IDENT_in_escapableIdent9536); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    i1_tree = (CommonTree)adaptor.create(i1);
                    adaptor.addChild(root_0, i1_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = i1.getText(); 
                    }

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1415:4: i2= TICKED_STRING_LITERAL
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    i2=(Token)match(input,TICKED_STRING_LITERAL,FOLLOW_TICKED_STRING_LITERAL_in_escapableIdent9545); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    i2_tree = (CommonTree)adaptor.create(i2);
                    adaptor.addChild(root_0, i2_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = removeTicks(i2.getText()); 
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "escapableIdent"

    public static class timePeriod_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "timePeriod"
    // EsperEPL2Grammar.g:1418:1: timePeriod : ( dayPart ( hourPart )? ( minutePart )? ( secondPart )? ( millisecondPart )? | hourPart ( minutePart )? ( secondPart )? ( millisecondPart )? | minutePart ( secondPart )? ( millisecondPart )? | secondPart ( millisecondPart )? | millisecondPart ) -> ^( TIME_PERIOD ( dayPart )? ( hourPart )? ( minutePart )? ( secondPart )? ( millisecondPart )? ) ;
    public final EsperEPL2GrammarParser.timePeriod_return timePeriod() throws RecognitionException {
        EsperEPL2GrammarParser.timePeriod_return retval = new EsperEPL2GrammarParser.timePeriod_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.dayPart_return dayPart611 = null;

        EsperEPL2GrammarParser.hourPart_return hourPart612 = null;

        EsperEPL2GrammarParser.minutePart_return minutePart613 = null;

        EsperEPL2GrammarParser.secondPart_return secondPart614 = null;

        EsperEPL2GrammarParser.millisecondPart_return millisecondPart615 = null;

        EsperEPL2GrammarParser.hourPart_return hourPart616 = null;

        EsperEPL2GrammarParser.minutePart_return minutePart617 = null;

        EsperEPL2GrammarParser.secondPart_return secondPart618 = null;

        EsperEPL2GrammarParser.millisecondPart_return millisecondPart619 = null;

        EsperEPL2GrammarParser.minutePart_return minutePart620 = null;

        EsperEPL2GrammarParser.secondPart_return secondPart621 = null;

        EsperEPL2GrammarParser.millisecondPart_return millisecondPart622 = null;

        EsperEPL2GrammarParser.secondPart_return secondPart623 = null;

        EsperEPL2GrammarParser.millisecondPart_return millisecondPart624 = null;

        EsperEPL2GrammarParser.millisecondPart_return millisecondPart625 = null;


        RewriteRuleSubtreeStream stream_secondPart=new RewriteRuleSubtreeStream(adaptor,"rule secondPart");
        RewriteRuleSubtreeStream stream_minutePart=new RewriteRuleSubtreeStream(adaptor,"rule minutePart");
        RewriteRuleSubtreeStream stream_millisecondPart=new RewriteRuleSubtreeStream(adaptor,"rule millisecondPart");
        RewriteRuleSubtreeStream stream_dayPart=new RewriteRuleSubtreeStream(adaptor,"rule dayPart");
        RewriteRuleSubtreeStream stream_hourPart=new RewriteRuleSubtreeStream(adaptor,"rule hourPart");
        try {
            // EsperEPL2Grammar.g:1419:2: ( ( dayPart ( hourPart )? ( minutePart )? ( secondPart )? ( millisecondPart )? | hourPart ( minutePart )? ( secondPart )? ( millisecondPart )? | minutePart ( secondPart )? ( millisecondPart )? | secondPart ( millisecondPart )? | millisecondPart ) -> ^( TIME_PERIOD ( dayPart )? ( hourPart )? ( minutePart )? ( secondPart )? ( millisecondPart )? ) )
            // EsperEPL2Grammar.g:1420:2: ( dayPart ( hourPart )? ( minutePart )? ( secondPart )? ( millisecondPart )? | hourPart ( minutePart )? ( secondPart )? ( millisecondPart )? | minutePart ( secondPart )? ( millisecondPart )? | secondPart ( millisecondPart )? | millisecondPart )
            {
            // EsperEPL2Grammar.g:1420:2: ( dayPart ( hourPart )? ( minutePart )? ( secondPart )? ( millisecondPart )? | hourPart ( minutePart )? ( secondPart )? ( millisecondPart )? | minutePart ( secondPart )? ( millisecondPart )? | secondPart ( millisecondPart )? | millisecondPart )
            int alt229=5;
            switch ( input.LA(1) ) {
            case NUM_INT:
                {
                switch ( input.LA(2) ) {
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt229=2;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt229=1;
                    }
                    break;
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt229=5;
                    }
                    break;
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt229=4;
                    }
                    break;
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt229=3;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 229, 1, input);

                    throw nvae;
                }

                }
                break;
            case NUM_LONG:
                {
                switch ( input.LA(2) ) {
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt229=2;
                    }
                    break;
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt229=3;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt229=1;
                    }
                    break;
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt229=4;
                    }
                    break;
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt229=5;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 229, 2, input);

                    throw nvae;
                }

                }
                break;
            case NUM_FLOAT:
                {
                switch ( input.LA(2) ) {
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt229=2;
                    }
                    break;
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt229=3;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt229=1;
                    }
                    break;
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt229=5;
                    }
                    break;
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt229=4;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 229, 3, input);

                    throw nvae;
                }

                }
                break;
            case NUM_DOUBLE:
                {
                switch ( input.LA(2) ) {
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt229=4;
                    }
                    break;
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt229=2;
                    }
                    break;
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt229=5;
                    }
                    break;
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt229=3;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt229=1;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 229, 4, input);

                    throw nvae;
                }

                }
                break;
            case IDENT:
                {
                switch ( input.LA(2) ) {
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt229=4;
                    }
                    break;
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt229=5;
                    }
                    break;
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt229=2;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt229=1;
                    }
                    break;
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt229=3;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 229, 5, input);

                    throw nvae;
                }

                }
                break;
            case QUESTION:
                {
                switch ( input.LA(2) ) {
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt229=3;
                    }
                    break;
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt229=2;
                    }
                    break;
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt229=5;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt229=1;
                    }
                    break;
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt229=4;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 229, 6, input);

                    throw nvae;
                }

                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 229, 0, input);

                throw nvae;
            }

            switch (alt229) {
                case 1 :
                    // EsperEPL2Grammar.g:1421:3: dayPart ( hourPart )? ( minutePart )? ( secondPart )? ( millisecondPart )?
                    {
                    pushFollow(FOLLOW_dayPart_in_timePeriod9568);
                    dayPart611=dayPart();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_dayPart.add(dayPart611.getTree());
                    // EsperEPL2Grammar.g:1421:11: ( hourPart )?
                    int alt219=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA219_1 = input.LA(2);

                            if ( ((LA219_1>=TIMEPERIOD_HOUR && LA219_1<=TIMEPERIOD_HOURS)) ) {
                                alt219=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA219_2 = input.LA(2);

                            if ( ((LA219_2>=TIMEPERIOD_HOUR && LA219_2<=TIMEPERIOD_HOURS)) ) {
                                alt219=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA219_3 = input.LA(2);

                            if ( ((LA219_3>=TIMEPERIOD_HOUR && LA219_3<=TIMEPERIOD_HOURS)) ) {
                                alt219=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA219_4 = input.LA(2);

                            if ( ((LA219_4>=TIMEPERIOD_HOUR && LA219_4<=TIMEPERIOD_HOURS)) ) {
                                alt219=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA219_5 = input.LA(2);

                            if ( ((LA219_5>=TIMEPERIOD_HOUR && LA219_5<=TIMEPERIOD_HOURS)) ) {
                                alt219=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA219_6 = input.LA(2);

                            if ( ((LA219_6>=TIMEPERIOD_HOUR && LA219_6<=TIMEPERIOD_HOURS)) ) {
                                alt219=1;
                            }
                            }
                            break;
                    }

                    switch (alt219) {
                        case 1 :
                            // EsperEPL2Grammar.g:1421:11: hourPart
                            {
                            pushFollow(FOLLOW_hourPart_in_timePeriod9570);
                            hourPart612=hourPart();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_hourPart.add(hourPart612.getTree());

                            }
                            break;

                    }

                    // EsperEPL2Grammar.g:1421:21: ( minutePart )?
                    int alt220=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA220_1 = input.LA(2);

                            if ( (LA220_1==MIN||(LA220_1>=TIMEPERIOD_MINUTE && LA220_1<=TIMEPERIOD_MINUTES)) ) {
                                alt220=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA220_2 = input.LA(2);

                            if ( (LA220_2==MIN||(LA220_2>=TIMEPERIOD_MINUTE && LA220_2<=TIMEPERIOD_MINUTES)) ) {
                                alt220=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA220_3 = input.LA(2);

                            if ( (LA220_3==MIN||(LA220_3>=TIMEPERIOD_MINUTE && LA220_3<=TIMEPERIOD_MINUTES)) ) {
                                alt220=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA220_4 = input.LA(2);

                            if ( (LA220_4==MIN||(LA220_4>=TIMEPERIOD_MINUTE && LA220_4<=TIMEPERIOD_MINUTES)) ) {
                                alt220=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA220_5 = input.LA(2);

                            if ( (LA220_5==MIN||(LA220_5>=TIMEPERIOD_MINUTE && LA220_5<=TIMEPERIOD_MINUTES)) ) {
                                alt220=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA220_6 = input.LA(2);

                            if ( (LA220_6==MIN||(LA220_6>=TIMEPERIOD_MINUTE && LA220_6<=TIMEPERIOD_MINUTES)) ) {
                                alt220=1;
                            }
                            }
                            break;
                    }

                    switch (alt220) {
                        case 1 :
                            // EsperEPL2Grammar.g:1421:21: minutePart
                            {
                            pushFollow(FOLLOW_minutePart_in_timePeriod9573);
                            minutePart613=minutePart();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_minutePart.add(minutePart613.getTree());

                            }
                            break;

                    }

                    // EsperEPL2Grammar.g:1421:33: ( secondPart )?
                    int alt221=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA221_1 = input.LA(2);

                            if ( ((LA221_1>=TIMEPERIOD_SEC && LA221_1<=TIMEPERIOD_SECONDS)) ) {
                                alt221=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA221_2 = input.LA(2);

                            if ( ((LA221_2>=TIMEPERIOD_SEC && LA221_2<=TIMEPERIOD_SECONDS)) ) {
                                alt221=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA221_3 = input.LA(2);

                            if ( ((LA221_3>=TIMEPERIOD_SEC && LA221_3<=TIMEPERIOD_SECONDS)) ) {
                                alt221=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA221_4 = input.LA(2);

                            if ( ((LA221_4>=TIMEPERIOD_SEC && LA221_4<=TIMEPERIOD_SECONDS)) ) {
                                alt221=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA221_5 = input.LA(2);

                            if ( ((LA221_5>=TIMEPERIOD_SEC && LA221_5<=TIMEPERIOD_SECONDS)) ) {
                                alt221=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA221_6 = input.LA(2);

                            if ( ((LA221_6>=TIMEPERIOD_SEC && LA221_6<=TIMEPERIOD_SECONDS)) ) {
                                alt221=1;
                            }
                            }
                            break;
                    }

                    switch (alt221) {
                        case 1 :
                            // EsperEPL2Grammar.g:1421:33: secondPart
                            {
                            pushFollow(FOLLOW_secondPart_in_timePeriod9576);
                            secondPart614=secondPart();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_secondPart.add(secondPart614.getTree());

                            }
                            break;

                    }

                    // EsperEPL2Grammar.g:1421:45: ( millisecondPart )?
                    int alt222=2;
                    int LA222_0 = input.LA(1);

                    if ( (LA222_0==NUM_DOUBLE||LA222_0==IDENT||LA222_0==NUM_INT||LA222_0==QUESTION||(LA222_0>=NUM_LONG && LA222_0<=NUM_FLOAT)) ) {
                        alt222=1;
                    }
                    switch (alt222) {
                        case 1 :
                            // EsperEPL2Grammar.g:1421:45: millisecondPart
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod9579);
                            millisecondPart615=millisecondPart();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart615.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1422:4: hourPart ( minutePart )? ( secondPart )? ( millisecondPart )?
                    {
                    pushFollow(FOLLOW_hourPart_in_timePeriod9585);
                    hourPart616=hourPart();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_hourPart.add(hourPart616.getTree());
                    // EsperEPL2Grammar.g:1422:13: ( minutePart )?
                    int alt223=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA223_1 = input.LA(2);

                            if ( (LA223_1==MIN||(LA223_1>=TIMEPERIOD_MINUTE && LA223_1<=TIMEPERIOD_MINUTES)) ) {
                                alt223=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA223_2 = input.LA(2);

                            if ( (LA223_2==MIN||(LA223_2>=TIMEPERIOD_MINUTE && LA223_2<=TIMEPERIOD_MINUTES)) ) {
                                alt223=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA223_3 = input.LA(2);

                            if ( (LA223_3==MIN||(LA223_3>=TIMEPERIOD_MINUTE && LA223_3<=TIMEPERIOD_MINUTES)) ) {
                                alt223=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA223_4 = input.LA(2);

                            if ( (LA223_4==MIN||(LA223_4>=TIMEPERIOD_MINUTE && LA223_4<=TIMEPERIOD_MINUTES)) ) {
                                alt223=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA223_5 = input.LA(2);

                            if ( (LA223_5==MIN||(LA223_5>=TIMEPERIOD_MINUTE && LA223_5<=TIMEPERIOD_MINUTES)) ) {
                                alt223=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA223_6 = input.LA(2);

                            if ( (LA223_6==MIN||(LA223_6>=TIMEPERIOD_MINUTE && LA223_6<=TIMEPERIOD_MINUTES)) ) {
                                alt223=1;
                            }
                            }
                            break;
                    }

                    switch (alt223) {
                        case 1 :
                            // EsperEPL2Grammar.g:1422:13: minutePart
                            {
                            pushFollow(FOLLOW_minutePart_in_timePeriod9587);
                            minutePart617=minutePart();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_minutePart.add(minutePart617.getTree());

                            }
                            break;

                    }

                    // EsperEPL2Grammar.g:1422:25: ( secondPart )?
                    int alt224=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA224_1 = input.LA(2);

                            if ( ((LA224_1>=TIMEPERIOD_SEC && LA224_1<=TIMEPERIOD_SECONDS)) ) {
                                alt224=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA224_2 = input.LA(2);

                            if ( ((LA224_2>=TIMEPERIOD_SEC && LA224_2<=TIMEPERIOD_SECONDS)) ) {
                                alt224=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA224_3 = input.LA(2);

                            if ( ((LA224_3>=TIMEPERIOD_SEC && LA224_3<=TIMEPERIOD_SECONDS)) ) {
                                alt224=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA224_4 = input.LA(2);

                            if ( ((LA224_4>=TIMEPERIOD_SEC && LA224_4<=TIMEPERIOD_SECONDS)) ) {
                                alt224=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA224_5 = input.LA(2);

                            if ( ((LA224_5>=TIMEPERIOD_SEC && LA224_5<=TIMEPERIOD_SECONDS)) ) {
                                alt224=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA224_6 = input.LA(2);

                            if ( ((LA224_6>=TIMEPERIOD_SEC && LA224_6<=TIMEPERIOD_SECONDS)) ) {
                                alt224=1;
                            }
                            }
                            break;
                    }

                    switch (alt224) {
                        case 1 :
                            // EsperEPL2Grammar.g:1422:25: secondPart
                            {
                            pushFollow(FOLLOW_secondPart_in_timePeriod9590);
                            secondPart618=secondPart();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_secondPart.add(secondPart618.getTree());

                            }
                            break;

                    }

                    // EsperEPL2Grammar.g:1422:37: ( millisecondPart )?
                    int alt225=2;
                    int LA225_0 = input.LA(1);

                    if ( (LA225_0==NUM_DOUBLE||LA225_0==IDENT||LA225_0==NUM_INT||LA225_0==QUESTION||(LA225_0>=NUM_LONG && LA225_0<=NUM_FLOAT)) ) {
                        alt225=1;
                    }
                    switch (alt225) {
                        case 1 :
                            // EsperEPL2Grammar.g:1422:37: millisecondPart
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod9593);
                            millisecondPart619=millisecondPart();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart619.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1423:4: minutePart ( secondPart )? ( millisecondPart )?
                    {
                    pushFollow(FOLLOW_minutePart_in_timePeriod9599);
                    minutePart620=minutePart();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_minutePart.add(minutePart620.getTree());
                    // EsperEPL2Grammar.g:1423:15: ( secondPart )?
                    int alt226=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA226_1 = input.LA(2);

                            if ( ((LA226_1>=TIMEPERIOD_SEC && LA226_1<=TIMEPERIOD_SECONDS)) ) {
                                alt226=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA226_2 = input.LA(2);

                            if ( ((LA226_2>=TIMEPERIOD_SEC && LA226_2<=TIMEPERIOD_SECONDS)) ) {
                                alt226=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA226_3 = input.LA(2);

                            if ( ((LA226_3>=TIMEPERIOD_SEC && LA226_3<=TIMEPERIOD_SECONDS)) ) {
                                alt226=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA226_4 = input.LA(2);

                            if ( ((LA226_4>=TIMEPERIOD_SEC && LA226_4<=TIMEPERIOD_SECONDS)) ) {
                                alt226=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA226_5 = input.LA(2);

                            if ( ((LA226_5>=TIMEPERIOD_SEC && LA226_5<=TIMEPERIOD_SECONDS)) ) {
                                alt226=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA226_6 = input.LA(2);

                            if ( ((LA226_6>=TIMEPERIOD_SEC && LA226_6<=TIMEPERIOD_SECONDS)) ) {
                                alt226=1;
                            }
                            }
                            break;
                    }

                    switch (alt226) {
                        case 1 :
                            // EsperEPL2Grammar.g:1423:15: secondPart
                            {
                            pushFollow(FOLLOW_secondPart_in_timePeriod9601);
                            secondPart621=secondPart();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_secondPart.add(secondPart621.getTree());

                            }
                            break;

                    }

                    // EsperEPL2Grammar.g:1423:27: ( millisecondPart )?
                    int alt227=2;
                    int LA227_0 = input.LA(1);

                    if ( (LA227_0==NUM_DOUBLE||LA227_0==IDENT||LA227_0==NUM_INT||LA227_0==QUESTION||(LA227_0>=NUM_LONG && LA227_0<=NUM_FLOAT)) ) {
                        alt227=1;
                    }
                    switch (alt227) {
                        case 1 :
                            // EsperEPL2Grammar.g:1423:27: millisecondPart
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod9604);
                            millisecondPart622=millisecondPart();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart622.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:1424:4: secondPart ( millisecondPart )?
                    {
                    pushFollow(FOLLOW_secondPart_in_timePeriod9610);
                    secondPart623=secondPart();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_secondPart.add(secondPart623.getTree());
                    // EsperEPL2Grammar.g:1424:15: ( millisecondPart )?
                    int alt228=2;
                    int LA228_0 = input.LA(1);

                    if ( (LA228_0==NUM_DOUBLE||LA228_0==IDENT||LA228_0==NUM_INT||LA228_0==QUESTION||(LA228_0>=NUM_LONG && LA228_0<=NUM_FLOAT)) ) {
                        alt228=1;
                    }
                    switch (alt228) {
                        case 1 :
                            // EsperEPL2Grammar.g:1424:15: millisecondPart
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod9612);
                            millisecondPart624=millisecondPart();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart624.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 5 :
                    // EsperEPL2Grammar.g:1425:4: millisecondPart
                    {
                    pushFollow(FOLLOW_millisecondPart_in_timePeriod9618);
                    millisecondPart625=millisecondPart();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart625.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: hourPart, millisecondPart, secondPart, minutePart, dayPart
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1427:3: -> ^( TIME_PERIOD ( dayPart )? ( hourPart )? ( minutePart )? ( secondPart )? ( millisecondPart )? )
            {
                // EsperEPL2Grammar.g:1427:6: ^( TIME_PERIOD ( dayPart )? ( hourPart )? ( minutePart )? ( secondPart )? ( millisecondPart )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TIME_PERIOD, "TIME_PERIOD"), root_1);

                // EsperEPL2Grammar.g:1427:20: ( dayPart )?
                if ( stream_dayPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_dayPart.nextTree());

                }
                stream_dayPart.reset();
                // EsperEPL2Grammar.g:1427:29: ( hourPart )?
                if ( stream_hourPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_hourPart.nextTree());

                }
                stream_hourPart.reset();
                // EsperEPL2Grammar.g:1427:39: ( minutePart )?
                if ( stream_minutePart.hasNext() ) {
                    adaptor.addChild(root_1, stream_minutePart.nextTree());

                }
                stream_minutePart.reset();
                // EsperEPL2Grammar.g:1427:51: ( secondPart )?
                if ( stream_secondPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_secondPart.nextTree());

                }
                stream_secondPart.reset();
                // EsperEPL2Grammar.g:1427:63: ( millisecondPart )?
                if ( stream_millisecondPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_millisecondPart.nextTree());

                }
                stream_millisecondPart.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "timePeriod"

    public static class dayPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dayPart"
    // EsperEPL2Grammar.g:1430:1: dayPart : ( number | i= IDENT | substitution ) ( TIMEPERIOD_DAYS | TIMEPERIOD_DAY ) -> {i!= null}? ^( DAY_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( DAY_PART ( number )? ( substitution )? ) ;
    public final EsperEPL2GrammarParser.dayPart_return dayPart() throws RecognitionException {
        EsperEPL2GrammarParser.dayPart_return retval = new EsperEPL2GrammarParser.dayPart_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token TIMEPERIOD_DAYS628=null;
        Token TIMEPERIOD_DAY629=null;
        EsperEPL2GrammarParser.number_return number626 = null;

        EsperEPL2GrammarParser.substitution_return substitution627 = null;


        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_DAYS628_tree=null;
        CommonTree TIMEPERIOD_DAY629_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_DAY=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_DAY");
        RewriteRuleTokenStream stream_TIMEPERIOD_DAYS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_DAYS");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            // EsperEPL2Grammar.g:1431:2: ( ( number | i= IDENT | substitution ) ( TIMEPERIOD_DAYS | TIMEPERIOD_DAY ) -> {i!= null}? ^( DAY_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( DAY_PART ( number )? ( substitution )? ) )
            // EsperEPL2Grammar.g:1431:4: ( number | i= IDENT | substitution ) ( TIMEPERIOD_DAYS | TIMEPERIOD_DAY )
            {
            // EsperEPL2Grammar.g:1431:4: ( number | i= IDENT | substitution )
            int alt230=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt230=1;
                }
                break;
            case IDENT:
                {
                alt230=2;
                }
                break;
            case QUESTION:
                {
                alt230=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 230, 0, input);

                throw nvae;
            }

            switch (alt230) {
                case 1 :
                    // EsperEPL2Grammar.g:1431:5: number
                    {
                    pushFollow(FOLLOW_number_in_dayPart9656);
                    number626=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number626.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1431:12: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_dayPart9660); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1431:20: substitution
                    {
                    pushFollow(FOLLOW_substitution_in_dayPart9662);
                    substitution627=substitution();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution627.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:1431:34: ( TIMEPERIOD_DAYS | TIMEPERIOD_DAY )
            int alt231=2;
            int LA231_0 = input.LA(1);

            if ( (LA231_0==TIMEPERIOD_DAYS) ) {
                alt231=1;
            }
            else if ( (LA231_0==TIMEPERIOD_DAY) ) {
                alt231=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 231, 0, input);

                throw nvae;
            }
            switch (alt231) {
                case 1 :
                    // EsperEPL2Grammar.g:1431:35: TIMEPERIOD_DAYS
                    {
                    TIMEPERIOD_DAYS628=(Token)match(input,TIMEPERIOD_DAYS,FOLLOW_TIMEPERIOD_DAYS_in_dayPart9666); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_DAYS.add(TIMEPERIOD_DAYS628);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1431:53: TIMEPERIOD_DAY
                    {
                    TIMEPERIOD_DAY629=(Token)match(input,TIMEPERIOD_DAY,FOLLOW_TIMEPERIOD_DAY_in_dayPart9670); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_DAY.add(TIMEPERIOD_DAY629);


                    }
                    break;

            }



            // AST REWRITE
            // elements: number, substitution, i
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1432:3: -> {i!= null}? ^( DAY_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
            if (i!= null) {
                // EsperEPL2Grammar.g:1432:18: ^( DAY_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DAY_PART, "DAY_PART"), root_1);

                // EsperEPL2Grammar.g:1432:29: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1432:47: ^( EVENT_PROP_SIMPLE $i)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1433:3: -> ^( DAY_PART ( number )? ( substitution )? )
            {
                // EsperEPL2Grammar.g:1433:6: ^( DAY_PART ( number )? ( substitution )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DAY_PART, "DAY_PART"), root_1);

                // EsperEPL2Grammar.g:1433:17: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:1433:25: ( substitution )?
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());

                }
                stream_substitution.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "dayPart"

    public static class hourPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "hourPart"
    // EsperEPL2Grammar.g:1436:1: hourPart : ( number | i= IDENT | substitution ) ( TIMEPERIOD_HOURS | TIMEPERIOD_HOUR ) -> {i!= null}? ^( HOUR_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( HOUR_PART ( number )? ( substitution )? ) ;
    public final EsperEPL2GrammarParser.hourPart_return hourPart() throws RecognitionException {
        EsperEPL2GrammarParser.hourPart_return retval = new EsperEPL2GrammarParser.hourPart_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token TIMEPERIOD_HOURS632=null;
        Token TIMEPERIOD_HOUR633=null;
        EsperEPL2GrammarParser.number_return number630 = null;

        EsperEPL2GrammarParser.substitution_return substitution631 = null;


        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_HOURS632_tree=null;
        CommonTree TIMEPERIOD_HOUR633_tree=null;
        RewriteRuleTokenStream stream_TIMEPERIOD_HOURS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_HOURS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_HOUR=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_HOUR");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            // EsperEPL2Grammar.g:1437:2: ( ( number | i= IDENT | substitution ) ( TIMEPERIOD_HOURS | TIMEPERIOD_HOUR ) -> {i!= null}? ^( HOUR_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( HOUR_PART ( number )? ( substitution )? ) )
            // EsperEPL2Grammar.g:1437:4: ( number | i= IDENT | substitution ) ( TIMEPERIOD_HOURS | TIMEPERIOD_HOUR )
            {
            // EsperEPL2Grammar.g:1437:4: ( number | i= IDENT | substitution )
            int alt232=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt232=1;
                }
                break;
            case IDENT:
                {
                alt232=2;
                }
                break;
            case QUESTION:
                {
                alt232=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 232, 0, input);

                throw nvae;
            }

            switch (alt232) {
                case 1 :
                    // EsperEPL2Grammar.g:1437:5: number
                    {
                    pushFollow(FOLLOW_number_in_hourPart9719);
                    number630=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number630.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1437:12: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_hourPart9723); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1437:20: substitution
                    {
                    pushFollow(FOLLOW_substitution_in_hourPart9725);
                    substitution631=substitution();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution631.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:1437:34: ( TIMEPERIOD_HOURS | TIMEPERIOD_HOUR )
            int alt233=2;
            int LA233_0 = input.LA(1);

            if ( (LA233_0==TIMEPERIOD_HOURS) ) {
                alt233=1;
            }
            else if ( (LA233_0==TIMEPERIOD_HOUR) ) {
                alt233=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 233, 0, input);

                throw nvae;
            }
            switch (alt233) {
                case 1 :
                    // EsperEPL2Grammar.g:1437:35: TIMEPERIOD_HOURS
                    {
                    TIMEPERIOD_HOURS632=(Token)match(input,TIMEPERIOD_HOURS,FOLLOW_TIMEPERIOD_HOURS_in_hourPart9729); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_HOURS.add(TIMEPERIOD_HOURS632);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1437:54: TIMEPERIOD_HOUR
                    {
                    TIMEPERIOD_HOUR633=(Token)match(input,TIMEPERIOD_HOUR,FOLLOW_TIMEPERIOD_HOUR_in_hourPart9733); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_HOUR.add(TIMEPERIOD_HOUR633);


                    }
                    break;

            }



            // AST REWRITE
            // elements: i, number, substitution
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1438:3: -> {i!= null}? ^( HOUR_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
            if (i!= null) {
                // EsperEPL2Grammar.g:1438:18: ^( HOUR_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(HOUR_PART, "HOUR_PART"), root_1);

                // EsperEPL2Grammar.g:1438:30: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1438:48: ^( EVENT_PROP_SIMPLE $i)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1439:3: -> ^( HOUR_PART ( number )? ( substitution )? )
            {
                // EsperEPL2Grammar.g:1439:6: ^( HOUR_PART ( number )? ( substitution )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(HOUR_PART, "HOUR_PART"), root_1);

                // EsperEPL2Grammar.g:1439:18: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:1439:26: ( substitution )?
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());

                }
                stream_substitution.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "hourPart"

    public static class minutePart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "minutePart"
    // EsperEPL2Grammar.g:1442:1: minutePart : ( number | i= IDENT | substitution ) ( TIMEPERIOD_MINUTES | TIMEPERIOD_MINUTE | MIN ) -> {i!= null}? ^( MINUTE_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( MINUTE_PART ( number )? ( substitution )? ) ;
    public final EsperEPL2GrammarParser.minutePart_return minutePart() throws RecognitionException {
        EsperEPL2GrammarParser.minutePart_return retval = new EsperEPL2GrammarParser.minutePart_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token TIMEPERIOD_MINUTES636=null;
        Token TIMEPERIOD_MINUTE637=null;
        Token MIN638=null;
        EsperEPL2GrammarParser.number_return number634 = null;

        EsperEPL2GrammarParser.substitution_return substitution635 = null;


        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_MINUTES636_tree=null;
        CommonTree TIMEPERIOD_MINUTE637_tree=null;
        CommonTree MIN638_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_MINUTE=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MINUTE");
        RewriteRuleTokenStream stream_MIN=new RewriteRuleTokenStream(adaptor,"token MIN");
        RewriteRuleTokenStream stream_TIMEPERIOD_MINUTES=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MINUTES");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            // EsperEPL2Grammar.g:1443:2: ( ( number | i= IDENT | substitution ) ( TIMEPERIOD_MINUTES | TIMEPERIOD_MINUTE | MIN ) -> {i!= null}? ^( MINUTE_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( MINUTE_PART ( number )? ( substitution )? ) )
            // EsperEPL2Grammar.g:1443:4: ( number | i= IDENT | substitution ) ( TIMEPERIOD_MINUTES | TIMEPERIOD_MINUTE | MIN )
            {
            // EsperEPL2Grammar.g:1443:4: ( number | i= IDENT | substitution )
            int alt234=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt234=1;
                }
                break;
            case IDENT:
                {
                alt234=2;
                }
                break;
            case QUESTION:
                {
                alt234=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 234, 0, input);

                throw nvae;
            }

            switch (alt234) {
                case 1 :
                    // EsperEPL2Grammar.g:1443:5: number
                    {
                    pushFollow(FOLLOW_number_in_minutePart9782);
                    number634=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number634.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1443:12: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_minutePart9786); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1443:20: substitution
                    {
                    pushFollow(FOLLOW_substitution_in_minutePart9788);
                    substitution635=substitution();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution635.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:1443:34: ( TIMEPERIOD_MINUTES | TIMEPERIOD_MINUTE | MIN )
            int alt235=3;
            switch ( input.LA(1) ) {
            case TIMEPERIOD_MINUTES:
                {
                alt235=1;
                }
                break;
            case TIMEPERIOD_MINUTE:
                {
                alt235=2;
                }
                break;
            case MIN:
                {
                alt235=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 235, 0, input);

                throw nvae;
            }

            switch (alt235) {
                case 1 :
                    // EsperEPL2Grammar.g:1443:35: TIMEPERIOD_MINUTES
                    {
                    TIMEPERIOD_MINUTES636=(Token)match(input,TIMEPERIOD_MINUTES,FOLLOW_TIMEPERIOD_MINUTES_in_minutePart9792); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MINUTES.add(TIMEPERIOD_MINUTES636);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1443:56: TIMEPERIOD_MINUTE
                    {
                    TIMEPERIOD_MINUTE637=(Token)match(input,TIMEPERIOD_MINUTE,FOLLOW_TIMEPERIOD_MINUTE_in_minutePart9796); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MINUTE.add(TIMEPERIOD_MINUTE637);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1443:76: MIN
                    {
                    MIN638=(Token)match(input,MIN,FOLLOW_MIN_in_minutePart9800); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MIN.add(MIN638);


                    }
                    break;

            }



            // AST REWRITE
            // elements: substitution, i, number
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1444:3: -> {i!= null}? ^( MINUTE_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
            if (i!= null) {
                // EsperEPL2Grammar.g:1444:18: ^( MINUTE_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MINUTE_PART, "MINUTE_PART"), root_1);

                // EsperEPL2Grammar.g:1444:32: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1444:50: ^( EVENT_PROP_SIMPLE $i)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1445:3: -> ^( MINUTE_PART ( number )? ( substitution )? )
            {
                // EsperEPL2Grammar.g:1445:6: ^( MINUTE_PART ( number )? ( substitution )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MINUTE_PART, "MINUTE_PART"), root_1);

                // EsperEPL2Grammar.g:1445:20: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:1445:28: ( substitution )?
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());

                }
                stream_substitution.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "minutePart"

    public static class secondPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "secondPart"
    // EsperEPL2Grammar.g:1448:1: secondPart : ( number | i= IDENT | substitution ) ( TIMEPERIOD_SECONDS | TIMEPERIOD_SECOND | TIMEPERIOD_SEC ) -> {i!= null}? ^( SECOND_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( SECOND_PART ( number )? ( substitution )? ) ;
    public final EsperEPL2GrammarParser.secondPart_return secondPart() throws RecognitionException {
        EsperEPL2GrammarParser.secondPart_return retval = new EsperEPL2GrammarParser.secondPart_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token TIMEPERIOD_SECONDS641=null;
        Token TIMEPERIOD_SECOND642=null;
        Token TIMEPERIOD_SEC643=null;
        EsperEPL2GrammarParser.number_return number639 = null;

        EsperEPL2GrammarParser.substitution_return substitution640 = null;


        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_SECONDS641_tree=null;
        CommonTree TIMEPERIOD_SECOND642_tree=null;
        CommonTree TIMEPERIOD_SEC643_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_SEC=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SEC");
        RewriteRuleTokenStream stream_TIMEPERIOD_SECOND=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SECOND");
        RewriteRuleTokenStream stream_TIMEPERIOD_SECONDS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SECONDS");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            // EsperEPL2Grammar.g:1449:2: ( ( number | i= IDENT | substitution ) ( TIMEPERIOD_SECONDS | TIMEPERIOD_SECOND | TIMEPERIOD_SEC ) -> {i!= null}? ^( SECOND_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( SECOND_PART ( number )? ( substitution )? ) )
            // EsperEPL2Grammar.g:1449:4: ( number | i= IDENT | substitution ) ( TIMEPERIOD_SECONDS | TIMEPERIOD_SECOND | TIMEPERIOD_SEC )
            {
            // EsperEPL2Grammar.g:1449:4: ( number | i= IDENT | substitution )
            int alt236=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt236=1;
                }
                break;
            case IDENT:
                {
                alt236=2;
                }
                break;
            case QUESTION:
                {
                alt236=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 236, 0, input);

                throw nvae;
            }

            switch (alt236) {
                case 1 :
                    // EsperEPL2Grammar.g:1449:5: number
                    {
                    pushFollow(FOLLOW_number_in_secondPart9850);
                    number639=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number639.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1449:12: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_secondPart9854); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1449:20: substitution
                    {
                    pushFollow(FOLLOW_substitution_in_secondPart9856);
                    substitution640=substitution();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution640.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:1449:34: ( TIMEPERIOD_SECONDS | TIMEPERIOD_SECOND | TIMEPERIOD_SEC )
            int alt237=3;
            switch ( input.LA(1) ) {
            case TIMEPERIOD_SECONDS:
                {
                alt237=1;
                }
                break;
            case TIMEPERIOD_SECOND:
                {
                alt237=2;
                }
                break;
            case TIMEPERIOD_SEC:
                {
                alt237=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 237, 0, input);

                throw nvae;
            }

            switch (alt237) {
                case 1 :
                    // EsperEPL2Grammar.g:1449:35: TIMEPERIOD_SECONDS
                    {
                    TIMEPERIOD_SECONDS641=(Token)match(input,TIMEPERIOD_SECONDS,FOLLOW_TIMEPERIOD_SECONDS_in_secondPart9860); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SECONDS.add(TIMEPERIOD_SECONDS641);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1449:56: TIMEPERIOD_SECOND
                    {
                    TIMEPERIOD_SECOND642=(Token)match(input,TIMEPERIOD_SECOND,FOLLOW_TIMEPERIOD_SECOND_in_secondPart9864); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SECOND.add(TIMEPERIOD_SECOND642);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1449:76: TIMEPERIOD_SEC
                    {
                    TIMEPERIOD_SEC643=(Token)match(input,TIMEPERIOD_SEC,FOLLOW_TIMEPERIOD_SEC_in_secondPart9868); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SEC.add(TIMEPERIOD_SEC643);


                    }
                    break;

            }



            // AST REWRITE
            // elements: i, number, substitution
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1450:3: -> {i!= null}? ^( SECOND_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
            if (i!= null) {
                // EsperEPL2Grammar.g:1450:18: ^( SECOND_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SECOND_PART, "SECOND_PART"), root_1);

                // EsperEPL2Grammar.g:1450:32: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1450:50: ^( EVENT_PROP_SIMPLE $i)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1451:3: -> ^( SECOND_PART ( number )? ( substitution )? )
            {
                // EsperEPL2Grammar.g:1451:6: ^( SECOND_PART ( number )? ( substitution )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SECOND_PART, "SECOND_PART"), root_1);

                // EsperEPL2Grammar.g:1451:20: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:1451:28: ( substitution )?
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());

                }
                stream_substitution.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "secondPart"

    public static class millisecondPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "millisecondPart"
    // EsperEPL2Grammar.g:1454:1: millisecondPart : ( number | i= IDENT | substitution ) ( TIMEPERIOD_MILLISECONDS | TIMEPERIOD_MILLISECOND | TIMEPERIOD_MILLISEC ) -> {i!= null}? ^( MILLISECOND_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( MILLISECOND_PART ( number )? ( substitution )? ) ;
    public final EsperEPL2GrammarParser.millisecondPart_return millisecondPart() throws RecognitionException {
        EsperEPL2GrammarParser.millisecondPart_return retval = new EsperEPL2GrammarParser.millisecondPart_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token TIMEPERIOD_MILLISECONDS646=null;
        Token TIMEPERIOD_MILLISECOND647=null;
        Token TIMEPERIOD_MILLISEC648=null;
        EsperEPL2GrammarParser.number_return number644 = null;

        EsperEPL2GrammarParser.substitution_return substitution645 = null;


        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_MILLISECONDS646_tree=null;
        CommonTree TIMEPERIOD_MILLISECOND647_tree=null;
        CommonTree TIMEPERIOD_MILLISEC648_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_MILLISEC=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MILLISEC");
        RewriteRuleTokenStream stream_TIMEPERIOD_MILLISECOND=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MILLISECOND");
        RewriteRuleTokenStream stream_TIMEPERIOD_MILLISECONDS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MILLISECONDS");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            // EsperEPL2Grammar.g:1455:2: ( ( number | i= IDENT | substitution ) ( TIMEPERIOD_MILLISECONDS | TIMEPERIOD_MILLISECOND | TIMEPERIOD_MILLISEC ) -> {i!= null}? ^( MILLISECOND_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( MILLISECOND_PART ( number )? ( substitution )? ) )
            // EsperEPL2Grammar.g:1455:4: ( number | i= IDENT | substitution ) ( TIMEPERIOD_MILLISECONDS | TIMEPERIOD_MILLISECOND | TIMEPERIOD_MILLISEC )
            {
            // EsperEPL2Grammar.g:1455:4: ( number | i= IDENT | substitution )
            int alt238=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt238=1;
                }
                break;
            case IDENT:
                {
                alt238=2;
                }
                break;
            case QUESTION:
                {
                alt238=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 238, 0, input);

                throw nvae;
            }

            switch (alt238) {
                case 1 :
                    // EsperEPL2Grammar.g:1455:5: number
                    {
                    pushFollow(FOLLOW_number_in_millisecondPart9918);
                    number644=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number644.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1455:12: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_millisecondPart9922); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1455:20: substitution
                    {
                    pushFollow(FOLLOW_substitution_in_millisecondPart9924);
                    substitution645=substitution();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution645.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:1455:34: ( TIMEPERIOD_MILLISECONDS | TIMEPERIOD_MILLISECOND | TIMEPERIOD_MILLISEC )
            int alt239=3;
            switch ( input.LA(1) ) {
            case TIMEPERIOD_MILLISECONDS:
                {
                alt239=1;
                }
                break;
            case TIMEPERIOD_MILLISECOND:
                {
                alt239=2;
                }
                break;
            case TIMEPERIOD_MILLISEC:
                {
                alt239=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 239, 0, input);

                throw nvae;
            }

            switch (alt239) {
                case 1 :
                    // EsperEPL2Grammar.g:1455:35: TIMEPERIOD_MILLISECONDS
                    {
                    TIMEPERIOD_MILLISECONDS646=(Token)match(input,TIMEPERIOD_MILLISECONDS,FOLLOW_TIMEPERIOD_MILLISECONDS_in_millisecondPart9928); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MILLISECONDS.add(TIMEPERIOD_MILLISECONDS646);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1455:61: TIMEPERIOD_MILLISECOND
                    {
                    TIMEPERIOD_MILLISECOND647=(Token)match(input,TIMEPERIOD_MILLISECOND,FOLLOW_TIMEPERIOD_MILLISECOND_in_millisecondPart9932); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MILLISECOND.add(TIMEPERIOD_MILLISECOND647);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1455:86: TIMEPERIOD_MILLISEC
                    {
                    TIMEPERIOD_MILLISEC648=(Token)match(input,TIMEPERIOD_MILLISEC,FOLLOW_TIMEPERIOD_MILLISEC_in_millisecondPart9936); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MILLISEC.add(TIMEPERIOD_MILLISEC648);


                    }
                    break;

            }



            // AST REWRITE
            // elements: substitution, number, i
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1456:3: -> {i!= null}? ^( MILLISECOND_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
            if (i!= null) {
                // EsperEPL2Grammar.g:1456:18: ^( MILLISECOND_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MILLISECOND_PART, "MILLISECOND_PART"), root_1);

                // EsperEPL2Grammar.g:1456:37: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1456:55: ^( EVENT_PROP_SIMPLE $i)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1457:3: -> ^( MILLISECOND_PART ( number )? ( substitution )? )
            {
                // EsperEPL2Grammar.g:1457:6: ^( MILLISECOND_PART ( number )? ( substitution )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MILLISECOND_PART, "MILLISECOND_PART"), root_1);

                // EsperEPL2Grammar.g:1457:25: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:1457:33: ( substitution )?
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());

                }
                stream_substitution.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "millisecondPart"

    public static class number_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "number"
    // EsperEPL2Grammar.g:1460:1: number : (ni= NUM_INT -> INT_TYPE[$ni] | nl= NUM_LONG -> LONG_TYPE[$nl] | nf= NUM_FLOAT -> FLOAT_TYPE[$nf] | nd= NUM_DOUBLE -> DOUBLE_TYPE[$nd] );
    public final EsperEPL2GrammarParser.number_return number() throws RecognitionException {
        EsperEPL2GrammarParser.number_return retval = new EsperEPL2GrammarParser.number_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token ni=null;
        Token nl=null;
        Token nf=null;
        Token nd=null;

        CommonTree ni_tree=null;
        CommonTree nl_tree=null;
        CommonTree nf_tree=null;
        CommonTree nd_tree=null;
        RewriteRuleTokenStream stream_NUM_LONG=new RewriteRuleTokenStream(adaptor,"token NUM_LONG");
        RewriteRuleTokenStream stream_NUM_DOUBLE=new RewriteRuleTokenStream(adaptor,"token NUM_DOUBLE");
        RewriteRuleTokenStream stream_NUM_FLOAT=new RewriteRuleTokenStream(adaptor,"token NUM_FLOAT");
        RewriteRuleTokenStream stream_NUM_INT=new RewriteRuleTokenStream(adaptor,"token NUM_INT");

        try {
            // EsperEPL2Grammar.g:1461:5: (ni= NUM_INT -> INT_TYPE[$ni] | nl= NUM_LONG -> LONG_TYPE[$nl] | nf= NUM_FLOAT -> FLOAT_TYPE[$nf] | nd= NUM_DOUBLE -> DOUBLE_TYPE[$nd] )
            int alt240=4;
            switch ( input.LA(1) ) {
            case NUM_INT:
                {
                alt240=1;
                }
                break;
            case NUM_LONG:
                {
                alt240=2;
                }
                break;
            case NUM_FLOAT:
                {
                alt240=3;
                }
                break;
            case NUM_DOUBLE:
                {
                alt240=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 240, 0, input);

                throw nvae;
            }

            switch (alt240) {
                case 1 :
                    // EsperEPL2Grammar.g:1461:9: ni= NUM_INT
                    {
                    ni=(Token)match(input,NUM_INT,FOLLOW_NUM_INT_in_number9991); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_INT.add(ni);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1461:20: -> INT_TYPE[$ni]
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(INT_TYPE, ni));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1462:9: nl= NUM_LONG
                    {
                    nl=(Token)match(input,NUM_LONG,FOLLOW_NUM_LONG_in_number10008); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_LONG.add(nl);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1462:21: -> LONG_TYPE[$nl]
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(LONG_TYPE, nl));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1463:9: nf= NUM_FLOAT
                    {
                    nf=(Token)match(input,NUM_FLOAT,FOLLOW_NUM_FLOAT_in_number10025); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_FLOAT.add(nf);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1463:22: -> FLOAT_TYPE[$nf]
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(FLOAT_TYPE, nf));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:1464:9: nd= NUM_DOUBLE
                    {
                    nd=(Token)match(input,NUM_DOUBLE,FOLLOW_NUM_DOUBLE_in_number10042); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_DOUBLE.add(nd);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1464:23: -> DOUBLE_TYPE[$nd]
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(DOUBLE_TYPE, nd));

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "number"

    public static class substitution_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "substitution"
    // EsperEPL2Grammar.g:1467:1: substitution : q= QUESTION -> SUBSTITUTION[$q] ;
    public final EsperEPL2GrammarParser.substitution_return substitution() throws RecognitionException {
        EsperEPL2GrammarParser.substitution_return retval = new EsperEPL2GrammarParser.substitution_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token q=null;

        CommonTree q_tree=null;
        RewriteRuleTokenStream stream_QUESTION=new RewriteRuleTokenStream(adaptor,"token QUESTION");

        try {
            // EsperEPL2Grammar.g:1468:2: (q= QUESTION -> SUBSTITUTION[$q] )
            // EsperEPL2Grammar.g:1468:4: q= QUESTION
            {
            q=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_substitution10063); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_QUESTION.add(q);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1468:15: -> SUBSTITUTION[$q]
            {
                adaptor.addChild(root_0, (CommonTree)adaptor.create(SUBSTITUTION, q));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "substitution"

    public static class constant_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "constant"
    // EsperEPL2Grammar.g:1471:1: constant : ( numberconstant | stringconstant | t= BOOLEAN_TRUE -> ^( BOOL_TYPE[$t] ) | f= BOOLEAN_FALSE -> ^( BOOL_TYPE[$f] ) | nu= VALUE_NULL -> ^( NULL_TYPE[$nu] ) );
    public final EsperEPL2GrammarParser.constant_return constant() throws RecognitionException {
        EsperEPL2GrammarParser.constant_return retval = new EsperEPL2GrammarParser.constant_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token t=null;
        Token f=null;
        Token nu=null;
        EsperEPL2GrammarParser.numberconstant_return numberconstant649 = null;

        EsperEPL2GrammarParser.stringconstant_return stringconstant650 = null;


        CommonTree t_tree=null;
        CommonTree f_tree=null;
        CommonTree nu_tree=null;
        RewriteRuleTokenStream stream_BOOLEAN_TRUE=new RewriteRuleTokenStream(adaptor,"token BOOLEAN_TRUE");
        RewriteRuleTokenStream stream_VALUE_NULL=new RewriteRuleTokenStream(adaptor,"token VALUE_NULL");
        RewriteRuleTokenStream stream_BOOLEAN_FALSE=new RewriteRuleTokenStream(adaptor,"token BOOLEAN_FALSE");

        try {
            // EsperEPL2Grammar.g:1472:2: ( numberconstant | stringconstant | t= BOOLEAN_TRUE -> ^( BOOL_TYPE[$t] ) | f= BOOLEAN_FALSE -> ^( BOOL_TYPE[$f] ) | nu= VALUE_NULL -> ^( NULL_TYPE[$nu] ) )
            int alt241=5;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case PLUS:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt241=1;
                }
                break;
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
                {
                alt241=2;
                }
                break;
            case BOOLEAN_TRUE:
                {
                alt241=3;
                }
                break;
            case BOOLEAN_FALSE:
                {
                alt241=4;
                }
                break;
            case VALUE_NULL:
                {
                alt241=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 241, 0, input);

                throw nvae;
            }

            switch (alt241) {
                case 1 :
                    // EsperEPL2Grammar.g:1472:6: numberconstant
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_numberconstant_in_constant10082);
                    numberconstant649=numberconstant();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numberconstant649.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1473:6: stringconstant
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_stringconstant_in_constant10089);
                    stringconstant650=stringconstant();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stringconstant650.getTree());

                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1474:10: t= BOOLEAN_TRUE
                    {
                    t=(Token)match(input,BOOLEAN_TRUE,FOLLOW_BOOLEAN_TRUE_in_constant10102); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BOOLEAN_TRUE.add(t);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1474:25: -> ^( BOOL_TYPE[$t] )
                    {
                        // EsperEPL2Grammar.g:1474:28: ^( BOOL_TYPE[$t] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BOOL_TYPE, t), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:1475:10: f= BOOLEAN_FALSE
                    {
                    f=(Token)match(input,BOOLEAN_FALSE,FOLLOW_BOOLEAN_FALSE_in_constant10122); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BOOLEAN_FALSE.add(f);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1475:26: -> ^( BOOL_TYPE[$f] )
                    {
                        // EsperEPL2Grammar.g:1475:29: ^( BOOL_TYPE[$f] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BOOL_TYPE, f), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    // EsperEPL2Grammar.g:1476:10: nu= VALUE_NULL
                    {
                    nu=(Token)match(input,VALUE_NULL,FOLLOW_VALUE_NULL_in_constant10142); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_VALUE_NULL.add(nu);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1476:24: -> ^( NULL_TYPE[$nu] )
                    {
                        // EsperEPL2Grammar.g:1476:27: ^( NULL_TYPE[$nu] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NULL_TYPE, nu), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "constant"

    public static class numberconstant_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "numberconstant"
    // EsperEPL2Grammar.g:1479:1: numberconstant : (m= MINUS | p= PLUS )? number -> {$m != null}? -> number ;
    public final EsperEPL2GrammarParser.numberconstant_return numberconstant() throws RecognitionException {
        EsperEPL2GrammarParser.numberconstant_return retval = new EsperEPL2GrammarParser.numberconstant_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token m=null;
        Token p=null;
        EsperEPL2GrammarParser.number_return number651 = null;


        CommonTree m_tree=null;
        CommonTree p_tree=null;
        RewriteRuleTokenStream stream_PLUS=new RewriteRuleTokenStream(adaptor,"token PLUS");
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        try {
            // EsperEPL2Grammar.g:1480:2: ( (m= MINUS | p= PLUS )? number -> {$m != null}? -> number )
            // EsperEPL2Grammar.g:1480:5: (m= MINUS | p= PLUS )? number
            {
            // EsperEPL2Grammar.g:1480:5: (m= MINUS | p= PLUS )?
            int alt242=3;
            int LA242_0 = input.LA(1);

            if ( (LA242_0==MINUS) ) {
                alt242=1;
            }
            else if ( (LA242_0==PLUS) ) {
                alt242=2;
            }
            switch (alt242) {
                case 1 :
                    // EsperEPL2Grammar.g:1480:6: m= MINUS
                    {
                    m=(Token)match(input,MINUS,FOLLOW_MINUS_in_numberconstant10164); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MINUS.add(m);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1480:16: p= PLUS
                    {
                    p=(Token)match(input,PLUS,FOLLOW_PLUS_in_numberconstant10170); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PLUS.add(p);


                    }
                    break;

            }

            pushFollow(FOLLOW_number_in_numberconstant10174);
            number651=number();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_number.add(number651.getTree());


            // AST REWRITE
            // elements: number
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1481:3: -> {$m != null}?
            if (m != null) {
                adaptor.addChild(root_0, adaptor.create((number651!=null?((CommonTree)number651.tree):null).getType(), "-" + (number651!=null?input.toString(number651.start,number651.stop):null)));

            }
            else // 1482:3: -> number
            {
                adaptor.addChild(root_0, stream_number.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "numberconstant"

    public static class stringconstant_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "stringconstant"
    // EsperEPL2Grammar.g:1485:1: stringconstant : (sl= STRING_LITERAL -> ^( STRING_TYPE[$sl] ) | qsl= QUOTED_STRING_LITERAL -> ^( STRING_TYPE[$qsl] ) );
    public final EsperEPL2GrammarParser.stringconstant_return stringconstant() throws RecognitionException {
        EsperEPL2GrammarParser.stringconstant_return retval = new EsperEPL2GrammarParser.stringconstant_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token sl=null;
        Token qsl=null;

        CommonTree sl_tree=null;
        CommonTree qsl_tree=null;
        RewriteRuleTokenStream stream_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token STRING_LITERAL");
        RewriteRuleTokenStream stream_QUOTED_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token QUOTED_STRING_LITERAL");

        try {
            // EsperEPL2Grammar.g:1486:2: (sl= STRING_LITERAL -> ^( STRING_TYPE[$sl] ) | qsl= QUOTED_STRING_LITERAL -> ^( STRING_TYPE[$qsl] ) )
            int alt243=2;
            int LA243_0 = input.LA(1);

            if ( (LA243_0==STRING_LITERAL) ) {
                alt243=1;
            }
            else if ( (LA243_0==QUOTED_STRING_LITERAL) ) {
                alt243=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 243, 0, input);

                throw nvae;
            }
            switch (alt243) {
                case 1 :
                    // EsperEPL2Grammar.g:1486:6: sl= STRING_LITERAL
                    {
                    sl=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_stringconstant10203); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STRING_LITERAL.add(sl);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1486:24: -> ^( STRING_TYPE[$sl] )
                    {
                        // EsperEPL2Grammar.g:1486:27: ^( STRING_TYPE[$sl] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STRING_TYPE, sl), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1487:6: qsl= QUOTED_STRING_LITERAL
                    {
                    qsl=(Token)match(input,QUOTED_STRING_LITERAL,FOLLOW_QUOTED_STRING_LITERAL_in_stringconstant10219); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUOTED_STRING_LITERAL.add(qsl);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1487:32: -> ^( STRING_TYPE[$qsl] )
                    {
                        // EsperEPL2Grammar.g:1487:35: ^( STRING_TYPE[$qsl] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STRING_TYPE, qsl), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "stringconstant"

    // $ANTLR start synpred1_EsperEPL2Grammar
    public final void synpred1_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:745:4: ( streamSelector )
        // EsperEPL2Grammar.g:745:5: streamSelector
        {
        pushFollow(FOLLOW_streamSelector_in_synpred1_EsperEPL2Grammar3413);
        streamSelector();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred1_EsperEPL2Grammar

    // $ANTLR start synpred2_EsperEPL2Grammar
    public final void synpred2_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:823:7: ( timePeriod )
        // EsperEPL2Grammar.g:823:8: timePeriod
        {
        pushFollow(FOLLOW_timePeriod_in_synpred2_EsperEPL2Grammar4101);
        timePeriod();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred2_EsperEPL2Grammar

    // $ANTLR start synpred3_EsperEPL2Grammar
    public final void synpred3_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:985:4: ( builtinFunc )
        // EsperEPL2Grammar.g:985:5: builtinFunc
        {
        pushFollow(FOLLOW_builtinFunc_in_synpred3_EsperEPL2Grammar5832);
        builtinFunc();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred3_EsperEPL2Grammar

    // $ANTLR start synpred4_EsperEPL2Grammar
    public final void synpred4_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1058:4: ( eventProperty )
        // EsperEPL2Grammar.g:1058:5: eventProperty
        {
        pushFollow(FOLLOW_eventProperty_in_synpred4_EsperEPL2Grammar6507);
        eventProperty();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred4_EsperEPL2Grammar

    // $ANTLR start synpred5_EsperEPL2Grammar
    public final void synpred5_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1210:4: ( propertyStreamSelector )
        // EsperEPL2Grammar.g:1210:5: propertyStreamSelector
        {
        pushFollow(FOLLOW_propertyStreamSelector_in_synpred5_EsperEPL2Grammar7864);
        propertyStreamSelector();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred5_EsperEPL2Grammar

    // $ANTLR start synpred6_EsperEPL2Grammar
    public final void synpred6_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1271:7: ( lastOperand )
        // EsperEPL2Grammar.g:1271:8: lastOperand
        {
        pushFollow(FOLLOW_lastOperand_in_synpred6_EsperEPL2Grammar8370);
        lastOperand();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred6_EsperEPL2Grammar

    // $ANTLR start synpred7_EsperEPL2Grammar
    public final void synpred7_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1272:4: ( lastWeekdayOperand )
        // EsperEPL2Grammar.g:1272:5: lastWeekdayOperand
        {
        pushFollow(FOLLOW_lastWeekdayOperand_in_synpred7_EsperEPL2Grammar8381);
        lastWeekdayOperand();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred7_EsperEPL2Grammar

    // $ANTLR start synpred8_EsperEPL2Grammar
    public final void synpred8_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1273:4: ( timePeriod )
        // EsperEPL2Grammar.g:1273:5: timePeriod
        {
        pushFollow(FOLLOW_timePeriod_in_synpred8_EsperEPL2Grammar8392);
        timePeriod();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred8_EsperEPL2Grammar

    // $ANTLR start synpred9_EsperEPL2Grammar
    public final void synpred9_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1274:4: ( expressionQualifyable )
        // EsperEPL2Grammar.g:1274:5: expressionQualifyable
        {
        pushFollow(FOLLOW_expressionQualifyable_in_synpred9_EsperEPL2Grammar8403);
        expressionQualifyable();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred9_EsperEPL2Grammar

    // $ANTLR start synpred10_EsperEPL2Grammar
    public final void synpred10_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1275:4: ( rangeOperand )
        // EsperEPL2Grammar.g:1275:5: rangeOperand
        {
        pushFollow(FOLLOW_rangeOperand_in_synpred10_EsperEPL2Grammar8414);
        rangeOperand();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred10_EsperEPL2Grammar

    // $ANTLR start synpred11_EsperEPL2Grammar
    public final void synpred11_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1276:5: ( frequencyOperand )
        // EsperEPL2Grammar.g:1276:6: frequencyOperand
        {
        pushFollow(FOLLOW_frequencyOperand_in_synpred11_EsperEPL2Grammar8426);
        frequencyOperand();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred11_EsperEPL2Grammar

    // $ANTLR start synpred12_EsperEPL2Grammar
    public final void synpred12_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1277:4: ( lastOperator )
        // EsperEPL2Grammar.g:1277:5: lastOperator
        {
        pushFollow(FOLLOW_lastOperator_in_synpred12_EsperEPL2Grammar8437);
        lastOperator();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred12_EsperEPL2Grammar

    // $ANTLR start synpred13_EsperEPL2Grammar
    public final void synpred13_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1278:4: ( weekDayOperator )
        // EsperEPL2Grammar.g:1278:5: weekDayOperator
        {
        pushFollow(FOLLOW_weekDayOperator_in_synpred13_EsperEPL2Grammar8448);
        weekDayOperator();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred13_EsperEPL2Grammar

    // $ANTLR start synpred14_EsperEPL2Grammar
    public final void synpred14_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1279:5: ( numericParameterList )
        // EsperEPL2Grammar.g:1279:6: numericParameterList
        {
        pushFollow(FOLLOW_numericParameterList_in_synpred14_EsperEPL2Grammar8461);
        numericParameterList();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred14_EsperEPL2Grammar

    // Delegated rules

    public final boolean synpred3_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred3_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred5_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred5_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred4_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred4_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred7_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred7_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred11_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred11_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred14_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred14_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred2_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred2_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred12_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred12_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred13_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred13_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred6_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred6_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred10_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred10_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred1_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred1_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred8_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred8_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred9_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred9_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA67 dfa67 = new DFA67(this);
    protected DFA98 dfa98 = new DFA98(this);
    protected DFA130 dfa130 = new DFA130(this);
    protected DFA153 dfa153 = new DFA153(this);
    protected DFA188 dfa188 = new DFA188(this);
    protected DFA201 dfa201 = new DFA201(this);
    protected DFA215 dfa215 = new DFA215(this);
    static final String DFA67_eotS =
        "\u0088\uffff";
    static final String DFA67_eofS =
        "\2\uffff\1\3\u0085\uffff";
    static final String DFA67_minS =
        "\1\5\1\uffff\1\6\67\uffff\1\5\115\uffff";
    static final String DFA67_maxS =
        "\1\u0105\1\uffff\1\u0102\67\uffff\1\u0103\115\uffff";
    static final String DFA67_acceptS =
        "\1\uffff\1\1\1\uffff\1\3\135\uffff\1\2\46\uffff";
    static final String DFA67_specialS =
        "\72\uffff\1\0\115\uffff}>";
    static final String[] DFA67_transitionS = {
            "\1\3\4\uffff\1\3\2\uffff\2\3\3\uffff\11\3\1\uffff\1\3\6\uffff"+
            "\1\3\1\uffff\4\3\12\uffff\3\3\10\uffff\16\3\1\uffff\1\3\1\uffff"+
            "\3\3\14\uffff\3\3\u0080\uffff\1\3\2\uffff\1\2\2\uffff\1\3\1"+
            "\uffff\1\1\3\uffff\2\3\12\uffff\2\3\2\uffff\1\3\1\uffff\1\3"+
            "\1\uffff\1\3\1\uffff\3\3",
            "",
            "\4\3\1\uffff\3\3\2\uffff\2\3\20\uffff\1\3\7\uffff\1\3\1\uffff"+
            "\2\3\4\uffff\1\3\3\uffff\1\3\1\uffff\1\3\u00aa\uffff\1\3\1\uffff"+
            "\1\3\1\72\1\3\1\uffff\2\3\4\uffff\16\3\4\uffff\2\3",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\3\4\uffff\1\3\3\uffff\1\3\3\uffff\11\3\10\uffff\1\3\1\uffff"+
            "\4\3\12\uffff\3\3\10\uffff\10\3\1\uffff\4\3\2\uffff\1\3\1\uffff"+
            "\3\3\u0092\uffff\1\3\4\uffff\1\141\31\uffff\1\3",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA67_eot = DFA.unpackEncodedString(DFA67_eotS);
    static final short[] DFA67_eof = DFA.unpackEncodedString(DFA67_eofS);
    static final char[] DFA67_min = DFA.unpackEncodedStringToUnsignedChars(DFA67_minS);
    static final char[] DFA67_max = DFA.unpackEncodedStringToUnsignedChars(DFA67_maxS);
    static final short[] DFA67_accept = DFA.unpackEncodedString(DFA67_acceptS);
    static final short[] DFA67_special = DFA.unpackEncodedString(DFA67_specialS);
    static final short[][] DFA67_transition;

    static {
        int numStates = DFA67_transitionS.length;
        DFA67_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA67_transition[i] = DFA.unpackEncodedString(DFA67_transitionS[i]);
        }
    }

    class DFA67 extends DFA {

        public DFA67(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 67;
            this.eot = DFA67_eot;
            this.eof = DFA67_eof;
            this.min = DFA67_min;
            this.max = DFA67_max;
            this.accept = DFA67_accept;
            this.special = DFA67_special;
            this.transition = DFA67_transition;
        }
        public String getDescription() {
            return "742:1: selectionListElement : (s= STAR -> WILDCARD_SELECT[$s] | ( streamSelector )=> streamSelector | expression ( AS i= keywordAllowedIdent )? -> {identifier != null}? ^( SELECTION_ELEMENT_EXPR expression IDENT[identifier] ) -> {identifier == null}? ^( SELECTION_ELEMENT_EXPR expression ) -> ^( SELECTION_ELEMENT_EXPR expression ) );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA67_58 = input.LA(1);

                         
                        int index67_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA67_58==STAR) && (synpred1_EsperEPL2Grammar())) {s = 97;}

                        else if ( (LA67_58==WINDOW||LA67_58==ESCAPE||LA67_58==EVERY_EXPR||(LA67_58>=SUM && LA67_58<=COUNT)||LA67_58==OUTER||(LA67_58>=JOIN && LA67_58<=FULL)||(LA67_58>=EVENTS && LA67_58<=LAST)||(LA67_58>=UNIDIRECTIONAL && LA67_58<=PRIOR)||(LA67_58>=WEEKDAY && LA67_58<=CAST)||LA67_58==SNAPSHOT||(LA67_58>=VARIABLE && LA67_58<=AT)||LA67_58==IDENT||LA67_58==TICKED_STRING_LITERAL) ) {s = 3;}

                         
                        input.seek(index67_58);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 67, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA98_eotS =
        "\162\uffff";
    static final String DFA98_eofS =
        "\162\uffff";
    static final String DFA98_minS =
        "\2\5\160\uffff";
    static final String DFA98_maxS =
        "\2\u0105\160\uffff";
    static final String DFA98_acceptS =
        "\2\uffff\1\3\66\uffff\1\2\67\uffff\1\1";
    static final String DFA98_specialS =
        "\162\uffff}>";
    static final String[] DFA98_transitionS = {
            "\1\2\4\uffff\1\2\2\uffff\2\2\3\uffff\11\2\1\uffff\1\1\6\uffff"+
            "\1\2\1\uffff\4\2\12\uffff\3\2\10\uffff\16\2\1\uffff\1\2\1\uffff"+
            "\3\2\14\uffff\3\2\u0080\uffff\1\2\2\uffff\1\2\2\uffff\1\2\5"+
            "\uffff\2\2\12\uffff\2\2\2\uffff\1\2\1\uffff\1\2\1\uffff\1\2"+
            "\1\uffff\3\2",
            "\1\71\4\uffff\1\71\2\uffff\2\71\3\uffff\11\71\1\uffff\1\71"+
            "\2\uffff\1\161\3\uffff\1\71\1\uffff\4\71\12\uffff\3\71\10\uffff"+
            "\16\71\1\uffff\1\71\1\uffff\3\71\14\uffff\3\71\u0080\uffff\1"+
            "\71\2\uffff\1\71\2\uffff\1\71\5\uffff\2\71\12\uffff\2\71\2\uffff"+
            "\1\71\1\uffff\1\71\1\uffff\1\71\1\uffff\3\71",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA98_eot = DFA.unpackEncodedString(DFA98_eotS);
    static final short[] DFA98_eof = DFA.unpackEncodedString(DFA98_eofS);
    static final char[] DFA98_min = DFA.unpackEncodedStringToUnsignedChars(DFA98_minS);
    static final char[] DFA98_max = DFA.unpackEncodedStringToUnsignedChars(DFA98_maxS);
    static final short[] DFA98_accept = DFA.unpackEncodedString(DFA98_acceptS);
    static final short[] DFA98_special = DFA.unpackEncodedString(DFA98_specialS);
    static final short[][] DFA98_transition;

    static {
        int numStates = DFA98_transitionS.length;
        DFA98_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA98_transition[i] = DFA.unpackEncodedString(DFA98_transitionS[i]);
        }
    }

    class DFA98 extends DFA {

        public DFA98(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 98;
            this.eot = DFA98_eot;
            this.eof = DFA98_eof;
            this.min = DFA98_min;
            this.max = DFA98_max;
            this.accept = DFA98_accept;
            this.special = DFA98_special;
            this.transition = DFA98_transition;
        }
        public String getDescription() {
            return "863:1: caseExpression : ( CASE ( whenClause )+ ( elseClause )? END | CASE expression ( whenClause )+ ( elseClause )? END -> ^( CASE2 expression ( whenClause )+ ( elseClause )? ) | evalOrExpression );";
        }
    }
    static final String DFA130_eotS =
        "\u0752\uffff";
    static final String DFA130_eofS =
        "\21\uffff\1\16\2\uffff\2\16\2\uffff\4\16\12\uffff\2\16\2\uffff"+
        "\2\16\u0726\uffff";
    static final String DFA130_minS =
        "\2\5\13\uffff\1\5\3\uffff\1\6\2\uffff\2\6\2\uffff\4\6\12\uffff"+
        "\2\6\2\uffff\2\6\10\uffff\1\u00e7\145\uffff\1\5\65\uffff\1\5\65"+
        "\uffff\1\5\65\uffff\1\5\65\uffff\1\5\65\uffff\1\5\65\uffff\1\5\65"+
        "\uffff\1\5\65\uffff\1\u00ed\65\uffff\1\5\65\uffff\1\5\65\uffff\1"+
        "\5\2\6\102\uffff\2\6\70\uffff\2\6\66\uffff\2\6\70\uffff\2\6\70\uffff"+
        "\2\6\70\uffff\2\6\66\uffff\2\6\71\uffff\2\6\66\uffff\2\6\126\uffff"+
        "\1\0\53\uffff\1\0\5\uffff\1\0\30\uffff\1\0\30\uffff\1\0\53\uffff"+
        "\1\0\71\uffff\1\0\30\uffff\1\0\30\uffff\1\0\30\uffff\1\0\30\uffff"+
        "\1\0\30\uffff\1\0\u00b6\uffff";
    static final String DFA130_maxS =
        "\2\u0105\13\uffff\1\u0105\3\uffff\1\u0102\2\uffff\2\u0102\2\uffff"+
        "\4\u0102\12\uffff\2\u0102\2\uffff\2\u0102\10\uffff\1\u00e7\145\uffff"+
        "\1\u0105\65\uffff\1\u0105\65\uffff\1\u0105\65\uffff\1\u0105\65\uffff"+
        "\1\u0105\65\uffff\1\u0105\65\uffff\1\u0105\65\uffff\1\u0105\65\uffff"+
        "\1\u00ff\65\uffff\1\u0105\65\uffff\1\u0105\65\uffff\1\u0103\2\u00fc"+
        "\102\uffff\2\u00fc\70\uffff\2\u00fc\66\uffff\2\u00fc\70\uffff\2"+
        "\u00fc\70\uffff\2\u00fc\70\uffff\2\u00fc\66\uffff\2\u00fc\71\uffff"+
        "\2\u00fc\66\uffff\2\u00fc\126\uffff\1\0\53\uffff\1\0\5\uffff\1\0"+
        "\30\uffff\1\0\30\uffff\1\0\53\uffff\1\0\71\uffff\1\0\30\uffff\1"+
        "\0\30\uffff\1\0\30\uffff\1\0\30\uffff\1\0\30\uffff\1\0\u00b6\uffff";
    static final String DFA130_acceptS =
        "\2\uffff\1\2\11\uffff\1\3\1\uffff\1\5\46\uffff\1\6\1\7\1\1\51\uffff"+
        "\1\10\1\4\u028c\uffff\102\6\2\uffff\70\6\2\uffff\66\6\2\uffff\70"+
        "\6\2\uffff\70\6\2\uffff\70\6\2\uffff\66\6\2\uffff\60\6\2\uffff\7"+
        "\6\2\uffff\66\6\2\uffff\57\6\1\11\46\6\1\uffff\53\6\1\uffff\5\6"+
        "\1\uffff\30\6\1\uffff\30\6\1\uffff\53\6\1\uffff\5\6\1\uffff\31\6"+
        "\1\uffff\31\6\1\uffff\30\6\1\uffff\30\6\1\uffff\30\6\1\uffff\30"+
        "\6\1\uffff\30\6\1\uffff\30\6\1\uffff\31\6\1\uffff\62\6\1\uffff\31"+
        "\6\2\uffff\32\6\1\uffff\32\6";
    static final String DFA130_specialS =
        "\1\0\u0099\uffff\1\1\65\uffff\1\2\65\uffff\1\3\65\uffff\1\4\65"+
        "\uffff\1\5\65\uffff\1\6\65\uffff\1\7\65\uffff\1\10\65\uffff\1\11"+
        "\65\uffff\1\12\65\uffff\1\13\65\uffff\1\14\1\15\1\16\102\uffff\1"+
        "\17\1\20\70\uffff\1\21\1\22\66\uffff\1\23\1\24\70\uffff\1\25\1\26"+
        "\70\uffff\1\27\1\30\70\uffff\1\31\1\32\66\uffff\1\33\1\34\71\uffff"+
        "\1\35\1\36\66\uffff\1\37\1\40\126\uffff\1\41\53\uffff\1\42\5\uffff"+
        "\1\43\30\uffff\1\44\30\uffff\1\45\53\uffff\1\46\71\uffff\1\47\30"+
        "\uffff\1\50\30\uffff\1\51\30\uffff\1\52\30\uffff\1\53\30\uffff\1"+
        "\54\u00b6\uffff}>";
    static final String[] DFA130_transitionS = {
            "\1\16\4\uffff\1\16\3\uffff\1\16\3\uffff\1\24\1\25\2\16\1\30"+
            "\1\31\1\32\1\33\1\21\10\uffff\1\16\1\uffff\4\16\12\uffff\3\16"+
            "\10\uffff\6\16\1\46\1\47\1\64\2\16\1\52\1\53\1\65\1\uffff\1"+
            "\16\1\uffff\3\16\14\uffff\3\2\u0080\uffff\1\2\2\uffff\1\16\2"+
            "\uffff\1\15\5\uffff\2\2\12\uffff\1\2\1\1\2\uffff\1\66\1\uffff"+
            "\1\2\1\uffff\1\14\1\uffff\1\16\2\2",
            "\1\67\4\uffff\1\67\3\uffff\1\67\3\uffff\11\67\10\uffff\1\67"+
            "\1\uffff\4\67\12\uffff\3\67\10\uffff\10\67\1\uffff\4\67\2\uffff"+
            "\1\67\1\uffff\3\67\u008f\uffff\1\2\2\uffff\1\67\32\uffff\1\2"+
            "\3\uffff\1\67\2\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\142\4\uffff\1\142\2\uffff\2\142\3\uffff\11\142\1\141\1"+
            "\142\6\uffff\1\142\1\uffff\4\142\12\uffff\3\142\10\uffff\16"+
            "\142\1\uffff\1\142\1\uffff\3\142\14\uffff\3\142\u0080\uffff"+
            "\1\142\2\uffff\1\142\2\uffff\1\142\5\uffff\2\142\12\uffff\2"+
            "\142\2\uffff\1\142\1\uffff\1\142\1\uffff\1\142\1\uffff\3\142",
            "",
            "",
            "",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\4\uffff\1\16\3\uffff\1\16\1\uffff\3\16\35\uffff\3\16\6\uffff"+
            "\1\16\u0081\uffff\1\16\1\uffff\2\16\1\u009a\5\16\2\uffff\16"+
            "\16\1\uffff\1\16\2\uffff\2\16",
            "",
            "",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\4\uffff\1\16\3\uffff\1\16\1\uffff\3\16\35\uffff\3\16\6\uffff"+
            "\1\16\u0081\uffff\1\16\1\uffff\2\16\1\u00d0\5\16\2\uffff\16"+
            "\16\1\uffff\1\16\2\uffff\2\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\4\uffff\1\16\3\uffff\1\16\1\uffff\3\16\35\uffff\3\16\6\uffff"+
            "\1\16\u0081\uffff\1\16\1\uffff\2\16\1\u0106\5\16\2\uffff\16"+
            "\16\1\uffff\1\16\2\uffff\2\16",
            "",
            "",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\4\uffff\1\16\3\uffff\1\16\1\uffff\3\16\35\uffff\3\16\6\uffff"+
            "\1\16\u0081\uffff\1\16\1\uffff\2\16\1\u013c\5\16\2\uffff\16"+
            "\16\1\uffff\1\16\2\uffff\2\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\4\uffff\1\16\3\uffff\1\16\1\uffff\3\16\35\uffff\3\16\6\uffff"+
            "\1\16\u0081\uffff\1\16\1\uffff\2\16\1\u0172\5\16\2\uffff\16"+
            "\16\1\uffff\1\16\2\uffff\2\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\4\uffff\1\16\3\uffff\1\16\1\uffff\3\16\35\uffff\3\16\6\uffff"+
            "\1\16\u0081\uffff\1\16\1\uffff\2\16\1\u01a8\5\16\2\uffff\16"+
            "\16\1\uffff\1\16\2\uffff\2\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\4\uffff\1\16\3\uffff\1\16\1\uffff\3\16\35\uffff\3\16\6\uffff"+
            "\1\16\u0081\uffff\1\16\1\uffff\2\16\1\u01de\5\16\2\uffff\16"+
            "\16\1\uffff\1\16\2\uffff\2\16",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\4\uffff\1\16\3\uffff\1\16\1\uffff\3\16\35\uffff\3\16\6\uffff"+
            "\1\16\u0081\uffff\1\16\1\uffff\2\16\1\u0214\5\16\2\uffff\16"+
            "\16\1\uffff\1\16\2\uffff\2\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\4\uffff\1\16\3\uffff\1\16\1\uffff\3\16\35\uffff\3\16\6\uffff"+
            "\1\16\u0081\uffff\1\16\1\uffff\2\16\1\u024a\5\16\2\uffff\16"+
            "\16\1\uffff\1\16\2\uffff\2\16",
            "",
            "",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\4\uffff\1\16\3\uffff\1\16\1\uffff\3\16\35\uffff\3\16\6\uffff"+
            "\1\16\u0081\uffff\1\16\1\uffff\2\16\1\u0280\5\16\2\uffff\16"+
            "\16\1\uffff\1\16\2\uffff\2\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\4\uffff\1\16\3\uffff\1\16\1\uffff\3\16\35\uffff\3\16\6\uffff"+
            "\1\16\u0081\uffff\1\16\1\uffff\2\16\1\u02b6\5\16\2\uffff\16"+
            "\16\1\uffff\1\16\2\uffff\2\16",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u02ec",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u031d\4\uffff\1\u0301\2\uffff\1\u0326\1\u0302\3\uffff\1"+
            "\u0303\1\u0304\1\u0305\1\u0306\1\u0307\1\u0308\1\u0309\1\u030a"+
            "\1\u0300\1\uffff\1\u02f1\6\uffff\1\u0320\1\uffff\1\u0322\1\u031e"+
            "\1\u031f\1\u0321\5\uffff\1\u02f0\1\u02ef\3\uffff\1\u030b\1\u030c"+
            "\1\u030d\10\uffff\1\u030e\1\u030f\1\u0310\1\u0312\1\u0313\1"+
            "\u0314\1\u0315\1\u0316\1\u0323\1\u0317\1\u0318\1\u0319\1\u031a"+
            "\1\u0324\1\uffff\1\u031b\1\uffff\1\u031c\1\u0311\1\u02ff\14"+
            "\uffff\1\u02f8\1\u02f9\1\u02fa\u0080\uffff\1\u02f7\2\uffff\1"+
            "\u02fd\2\uffff\1\u02fc\1\uffff\1\u0327\3\uffff\1\u02ed\1\u02ee"+
            "\12\uffff\1\u02f3\1\u02f2\2\uffff\1\u0325\1\uffff\1\u02f4\1"+
            "\uffff\1\u02fb\1\uffff\1\u02fe\1\u02f5\1\u02f6",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0358\4\uffff\1\u033c\2\uffff\1\u0361\1\u033d\3\uffff\1"+
            "\u033e\1\u033f\1\u0340\1\u0341\1\u0342\1\u0343\1\u0344\1\u0345"+
            "\1\u033b\1\uffff\1\u032a\6\uffff\1\u035b\1\uffff\1\u035d\1\u0359"+
            "\1\u035a\1\u035c\5\uffff\1\u0329\1\u0328\3\uffff\1\u0346\1\u0347"+
            "\1\u0348\10\uffff\1\u0349\1\u034a\1\u034b\1\u034d\1\u034e\1"+
            "\u034f\1\u0350\1\u0351\1\u035e\1\u0352\1\u0353\1\u0354\1\u0355"+
            "\1\u035f\1\uffff\1\u0356\1\uffff\1\u0357\1\u034c\1\u033a\14"+
            "\uffff\1\u0333\1\u0334\1\u0335\u0080\uffff\1\u0330\2\uffff\1"+
            "\u0338\2\uffff\1\u0337\5\uffff\1\u0331\1\u0332\12\uffff\1\u032c"+
            "\1\u032b\2\uffff\1\u0360\1\uffff\1\u032d\1\uffff\1\u0336\1\uffff"+
            "\1\u0339\1\u032e\1\u032f",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0392\4\uffff\1\u0376\2\uffff\1\u039b\1\u0377\3\uffff\1"+
            "\u0378\1\u0379\1\u037a\1\u037b\1\u037c\1\u037d\1\u037e\1\u037f"+
            "\1\u0375\1\uffff\1\u0364\6\uffff\1\u0395\1\uffff\1\u0397\1\u0393"+
            "\1\u0394\1\u0396\5\uffff\1\u0363\1\u0362\3\uffff\1\u0380\1\u0381"+
            "\1\u0382\10\uffff\1\u0383\1\u0384\1\u0385\1\u0387\1\u0388\1"+
            "\u0389\1\u038a\1\u038b\1\u0398\1\u038c\1\u038d\1\u038e\1\u038f"+
            "\1\u0399\1\uffff\1\u0390\1\uffff\1\u0391\1\u0386\1\u0374\14"+
            "\uffff\1\u036d\1\u036e\1\u036f\u0080\uffff\1\u036a\2\uffff\1"+
            "\u0372\2\uffff\1\u0371\5\uffff\1\u036b\1\u036c\12\uffff\1\u0366"+
            "\1\u0365\2\uffff\1\u039a\1\uffff\1\u0367\1\uffff\1\u0370\1\uffff"+
            "\1\u0373\1\u0368\1\u0369",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u03ca\4\uffff\1\u03ae\2\uffff\1\u03d3\1\u03af\3\uffff\1"+
            "\u03b0\1\u03b1\1\u03b2\1\u03b3\1\u03b4\1\u03b5\1\u03b6\1\u03b7"+
            "\1\u03ad\1\uffff\1\u039c\6\uffff\1\u03cd\1\uffff\1\u03cf\1\u03cb"+
            "\1\u03cc\1\u03ce\12\uffff\1\u03b8\1\u03b9\1\u03ba\10\uffff\1"+
            "\u03bb\1\u03bc\1\u03bd\1\u03bf\1\u03c0\1\u03c1\1\u03c2\1\u03c3"+
            "\1\u03d0\1\u03c4\1\u03c5\1\u03c6\1\u03c7\1\u03d1\1\uffff\1\u03c8"+
            "\1\uffff\1\u03c9\1\u03be\1\u03ac\14\uffff\1\u03a5\1\u03a6\1"+
            "\u03a7\u0080\uffff\1\u03a2\2\uffff\1\u03aa\2\uffff\1\u03a9\5"+
            "\uffff\1\u03a3\1\u03a4\12\uffff\1\u039e\1\u039d\2\uffff\1\u03d2"+
            "\1\uffff\1\u039f\1\uffff\1\u03a8\1\uffff\1\u03ab\1\u03a0\1\u03a1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0404\4\uffff\1\u03e8\2\uffff\1\u040d\1\u03e9\3\uffff\1"+
            "\u03ea\1\u03eb\1\u03ec\1\u03ed\1\u03ee\1\u03ef\1\u03f0\1\u03f1"+
            "\1\u03e7\1\uffff\1\u03d6\6\uffff\1\u0407\1\uffff\1\u0409\1\u0405"+
            "\1\u0406\1\u0408\5\uffff\1\u03d5\1\u03d4\3\uffff\1\u03f2\1\u03f3"+
            "\1\u03f4\10\uffff\1\u03f5\1\u03f6\1\u03f7\1\u03f9\1\u03fa\1"+
            "\u03fb\1\u03fc\1\u03fd\1\u040a\1\u03fe\1\u03ff\1\u0400\1\u0401"+
            "\1\u040b\1\uffff\1\u0402\1\uffff\1\u0403\1\u03f8\1\u03e6\14"+
            "\uffff\1\u03df\1\u03e0\1\u03e1\u0080\uffff\1\u03dc\2\uffff\1"+
            "\u03e4\2\uffff\1\u03e3\5\uffff\1\u03dd\1\u03de\12\uffff\1\u03d8"+
            "\1\u03d7\2\uffff\1\u040c\1\uffff\1\u03d9\1\uffff\1\u03e2\1\uffff"+
            "\1\u03e5\1\u03da\1\u03db",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u043e\4\uffff\1\u0422\2\uffff\1\u0447\1\u0423\3\uffff\1"+
            "\u0424\1\u0425\1\u0426\1\u0427\1\u0428\1\u0429\1\u042a\1\u042b"+
            "\1\u0421\1\uffff\1\u0410\6\uffff\1\u0441\1\uffff\1\u0443\1\u043f"+
            "\1\u0440\1\u0442\5\uffff\1\u040f\1\u040e\3\uffff\1\u042c\1\u042d"+
            "\1\u042e\10\uffff\1\u042f\1\u0430\1\u0431\1\u0433\1\u0434\1"+
            "\u0435\1\u0436\1\u0437\1\u0444\1\u0438\1\u0439\1\u043a\1\u043b"+
            "\1\u0445\1\uffff\1\u043c\1\uffff\1\u043d\1\u0432\1\u0420\14"+
            "\uffff\1\u0419\1\u041a\1\u041b\u0080\uffff\1\u0416\2\uffff\1"+
            "\u041e\2\uffff\1\u041d\5\uffff\1\u0417\1\u0418\12\uffff\1\u0412"+
            "\1\u0411\2\uffff\1\u0446\1\uffff\1\u0413\1\uffff\1\u041c\1\uffff"+
            "\1\u041f\1\u0414\1\u0415",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0478\4\uffff\1\u045c\2\uffff\1\u0481\1\u045d\3\uffff\1"+
            "\u045e\1\u045f\1\u0460\1\u0461\1\u0462\1\u0463\1\u0464\1\u0465"+
            "\1\u045b\1\uffff\1\u044a\6\uffff\1\u047b\1\uffff\1\u047d\1\u0479"+
            "\1\u047a\1\u047c\5\uffff\1\u0449\1\u0448\3\uffff\1\u0466\1\u0467"+
            "\1\u0468\10\uffff\1\u0469\1\u046a\1\u046b\1\u046d\1\u046e\1"+
            "\u046f\1\u0470\1\u0471\1\u047e\1\u0472\1\u0473\1\u0474\1\u0475"+
            "\1\u047f\1\uffff\1\u0476\1\uffff\1\u0477\1\u046c\1\u045a\14"+
            "\uffff\1\u0453\1\u0454\1\u0455\u0080\uffff\1\u0450\2\uffff\1"+
            "\u0458\2\uffff\1\u0457\5\uffff\1\u0451\1\u0452\12\uffff\1\u044c"+
            "\1\u044b\2\uffff\1\u0480\1\uffff\1\u044d\1\uffff\1\u0456\1\uffff"+
            "\1\u0459\1\u044e\1\u044f",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u04b0\4\uffff\1\u0494\2\uffff\1\u04b9\1\u0495\3\uffff\1"+
            "\u0496\1\u0497\1\u0498\1\u0499\1\u049a\1\u049b\1\u049c\1\u049d"+
            "\1\u0493\1\uffff\1\u0482\6\uffff\1\u04b3\1\uffff\1\u04b5\1\u04b1"+
            "\1\u04b2\1\u04b4\12\uffff\1\u049e\1\u049f\1\u04a0\10\uffff\1"+
            "\u04a1\1\u04a2\1\u04a3\1\u04a5\1\u04a6\1\u04a7\1\u04a8\1\u04a9"+
            "\1\u04b6\1\u04aa\1\u04ab\1\u04ac\1\u04ad\1\u04b7\1\uffff\1\u04ae"+
            "\1\uffff\1\u04af\1\u04a4\1\u0492\14\uffff\1\u048b\1\u048c\1"+
            "\u048d\u0080\uffff\1\u0488\2\uffff\1\u0490\2\uffff\1\u048f\5"+
            "\uffff\1\u0489\1\u048a\12\uffff\1\u0484\1\u0483\2\uffff\1\u04b8"+
            "\1\uffff\1\u0485\1\uffff\1\u048e\1\uffff\1\u0491\1\u0486\1\u0487",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\2\16\20\uffff\1\u04ba",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u04eb\4\uffff\1\u04cf\2\uffff\1\u04f4\1\u04d0\3\uffff\1"+
            "\u04d1\1\u04d2\1\u04d3\1\u04d4\1\u04d5\1\u04d6\1\u04d7\1\u04d8"+
            "\1\u04ce\1\uffff\1\u04bd\6\uffff\1\u04ee\1\uffff\1\u04f0\1\u04ec"+
            "\1\u04ed\1\u04ef\12\uffff\1\u04d9\1\u04da\1\u04db\10\uffff\1"+
            "\u04dc\1\u04dd\1\u04de\1\u04e0\1\u04e1\1\u04e2\1\u04e3\1\u04e4"+
            "\1\u04f1\1\u04e5\1\u04e6\1\u04e7\1\u04e8\1\u04f2\1\uffff\1\u04e9"+
            "\1\uffff\1\u04ea\1\u04df\1\u04cd\14\uffff\1\u04c6\1\u04c7\1"+
            "\u04c8\u0080\uffff\1\u04c3\2\uffff\1\u04cb\2\uffff\1\u04ca\5"+
            "\uffff\1\u04c4\1\u04c5\12\uffff\1\u04bf\1\u04be\2\uffff\1\u04f3"+
            "\1\uffff\1\u04c0\1\uffff\1\u04c9\1\uffff\1\u04cc\1\u04c1\1\u04c2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0523\4\uffff\1\u0507\2\uffff\1\u052c\1\u0508\3\uffff\1"+
            "\u0509\1\u050a\1\u050b\1\u050c\1\u050d\1\u050e\1\u050f\1\u0510"+
            "\1\u0506\1\uffff\1\u04f5\6\uffff\1\u0526\1\uffff\1\u0528\1\u0524"+
            "\1\u0525\1\u0527\12\uffff\1\u0511\1\u0512\1\u0513\10\uffff\1"+
            "\u0514\1\u0515\1\u0516\1\u0518\1\u0519\1\u051a\1\u051b\1\u051c"+
            "\1\u0529\1\u051d\1\u051e\1\u051f\1\u0520\1\u052a\1\uffff\1\u0521"+
            "\1\uffff\1\u0522\1\u0517\1\u0505\14\uffff\1\u04fe\1\u04ff\1"+
            "\u0500\u0080\uffff\1\u04fb\2\uffff\1\u0503\2\uffff\1\u0502\5"+
            "\uffff\1\u04fc\1\u04fd\12\uffff\1\u04f7\1\u04f6\2\uffff\1\u052b"+
            "\1\uffff\1\u04f8\1\uffff\1\u0501\1\uffff\1\u0504\1\u04f9\1\u04fa",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u054e\4\uffff\1\u0532\3\uffff\1\u0533\3\uffff\1\u0534\1"+
            "\u0535\1\u0536\1\u0537\1\u0538\1\u0539\1\u053a\1\u053b\1\u0531"+
            "\1\u052d\7\uffff\1\u0551\1\uffff\1\u0553\1\u054f\1\u0550\1\u0552"+
            "\12\uffff\1\u053c\1\u053d\1\u053e\10\uffff\1\u053f\1\u0540\1"+
            "\u0541\1\u0543\1\u0544\1\u0545\1\u0546\1\u0547\1\uffff\1\u0548"+
            "\1\u0549\1\u054a\1\u054b\2\uffff\1\u054c\1\uffff\1\u054d\1\u0542"+
            "\1\u0530\u0092\uffff\1\u052e\36\uffff\1\u052f",
            "\1\u0569\1\u056a\1\u056b\1\u056c\1\uffff\1\u0567\1\u0566\1"+
            "\u0568\34\uffff\1\u0560\u00ba\uffff\1\u055f\2\uffff\1\u0554"+
            "\1\u0555\5\uffff\1\u0563\1\u0564\1\u0565\1\u0561\1\u0562\1\u055b"+
            "\1\u055c\1\u055d\1\u055e\1\u055a\1\u0558\1\u0559\1\u0556\1\u0557",
            "\1\u0582\1\u0583\1\u0584\1\u0585\1\uffff\1\u057f\1\u057e\1"+
            "\u0581\34\uffff\1\u0578\u00ba\uffff\1\u0577\2\uffff\1\u0580"+
            "\1\u056d\5\uffff\1\u057b\1\u057c\1\u057d\1\u0579\1\u057a\1\u0573"+
            "\1\u0574\1\u0575\1\u0576\1\u0572\1\u0570\1\u0571\1\u056e\1\u056f",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u059b\1\u059c\1\u059d\1\u059e\1\uffff\1\u0599\1\u0598\1"+
            "\u059a\34\uffff\1\u0592\u00ba\uffff\1\u0591\2\uffff\1\u0586"+
            "\1\u0587\5\uffff\1\u0595\1\u0596\1\u0597\1\u0593\1\u0594\1\u058d"+
            "\1\u058e\1\u058f\1\u0590\1\u058c\1\u058a\1\u058b\1\u0588\1\u0589",
            "\1\u05b4\1\u05b5\1\u05b6\1\u05b7\1\uffff\1\u05b2\1\u05b1\1"+
            "\u05b3\34\uffff\1\u05ab\u00ba\uffff\1\u05aa\2\uffff\1\u059f"+
            "\1\u05a0\5\uffff\1\u05ae\1\u05af\1\u05b0\1\u05ac\1\u05ad\1\u05a6"+
            "\1\u05a7\1\u05a8\1\u05a9\1\u05a5\1\u05a3\1\u05a4\1\u05a1\1\u05a2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u05cd\1\u05ce\1\u05cf\1\u05d0\1\uffff\1\u05cb\1\u05ca\1"+
            "\u05cc\34\uffff\1\u05c4\u00ba\uffff\1\u05c3\2\uffff\1\u05b8"+
            "\1\u05b9\5\uffff\1\u05c7\1\u05c8\1\u05c9\1\u05c5\1\u05c6\1\u05bf"+
            "\1\u05c0\1\u05c1\1\u05c2\1\u05be\1\u05bc\1\u05bd\1\u05ba\1\u05bb",
            "\1\u05e6\1\u05e7\1\u05e8\1\u05e9\1\uffff\1\u05e3\1\u05e2\1"+
            "\u05e5\34\uffff\1\u05dc\u00ba\uffff\1\u05db\2\uffff\1\u05e4"+
            "\1\u05d1\5\uffff\1\u05df\1\u05e0\1\u05e1\1\u05dd\1\u05de\1\u05d7"+
            "\1\u05d8\1\u05d9\1\u05da\1\u05d6\1\u05d4\1\u05d5\1\u05d2\1\u05d3",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0600\1\u0601\1\u0602\1\u0603\1\uffff\1\u05fd\1\u05fc\1"+
            "\u05ff\34\uffff\1\u05f6\u00b8\uffff\1\u05fe\1\uffff\1\u05f5"+
            "\2\uffff\1\16\1\u05eb\5\uffff\1\u05f9\1\u05fa\1\u05fb\1\u05f7"+
            "\1\u05f8\1\u05f1\1\u05f2\1\u05f3\1\u05f4\1\u05f0\1\u05ee\1\u05ef"+
            "\1\u05ec\1\u05ed",
            "\1\u061a\1\u061b\1\u061c\1\u061d\1\uffff\1\u0617\1\u0616\1"+
            "\u0619\34\uffff\1\u0610\u00b8\uffff\1\u0618\1\uffff\1\u060f"+
            "\2\uffff\1\16\1\u0605\5\uffff\1\u0613\1\u0614\1\u0615\1\u0611"+
            "\1\u0612\1\u060b\1\u060c\1\u060d\1\u060e\1\u060a\1\u0608\1\u0609"+
            "\1\u0606\1\u0607",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0633\1\u0634\1\u0635\1\u0636\1\uffff\1\u0631\1\u0630\1"+
            "\u0632\34\uffff\1\u062a\u00ba\uffff\1\u0629\2\uffff\1\u061e"+
            "\1\u061f\5\uffff\1\u062d\1\u062e\1\u062f\1\u062b\1\u062c\1\u0625"+
            "\1\u0626\1\u0627\1\u0628\1\u0624\1\u0622\1\u0623\1\u0620\1\u0621",
            "\1\u064c\1\u064d\1\u064e\1\u064f\1\uffff\1\u064a\1\u0649\1"+
            "\u064b\34\uffff\1\u0643\u00ba\uffff\1\u0642\2\uffff\1\u0637"+
            "\1\u0638\5\uffff\1\u0646\1\u0647\1\u0648\1\u0644\1\u0645\1\u063e"+
            "\1\u063f\1\u0640\1\u0641\1\u063d\1\u063b\1\u063c\1\u0639\1\u063a",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0665\1\u0666\1\u0667\1\u0668\1\uffff\1\u0663\1\u0662\1"+
            "\u0664\34\uffff\1\u065c\u00ba\uffff\1\u065b\2\uffff\1\u0650"+
            "\1\u0651\5\uffff\1\u065f\1\u0660\1\u0661\1\u065d\1\u065e\1\u0657"+
            "\1\u0658\1\u0659\1\u065a\1\u0656\1\u0654\1\u0655\1\u0652\1\u0653",
            "\1\u067e\1\u067f\1\u0680\1\u0681\1\uffff\1\u067c\1\u067b\1"+
            "\u067d\34\uffff\1\u0675\u00ba\uffff\1\u0674\2\uffff\1\u0669"+
            "\1\u066a\5\uffff\1\u0678\1\u0679\1\u067a\1\u0676\1\u0677\1\u0670"+
            "\1\u0671\1\u0672\1\u0673\1\u066f\1\u066d\1\u066e\1\u066b\1\u066c",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0697\1\u0698\1\u0699\1\u069a\1\uffff\1\u0695\1\u0694\1"+
            "\u0696\34\uffff\1\u068e\u00ba\uffff\1\u068d\2\uffff\1\u0682"+
            "\1\u0683\5\uffff\1\u0691\1\u0692\1\u0693\1\u068f\1\u0690\1\u0689"+
            "\1\u068a\1\u068b\1\u068c\1\u0688\1\u0686\1\u0687\1\u0684\1\u0685",
            "\1\u06b0\1\u06b1\1\u06b2\1\u06b3\1\uffff\1\u06ae\1\u06ad\1"+
            "\u06af\34\uffff\1\u06a7\u00ba\uffff\1\u06a6\2\uffff\1\u069b"+
            "\1\u069c\5\uffff\1\u06aa\1\u06ab\1\u06ac\1\u06a8\1\u06a9\1\u06a2"+
            "\1\u06a3\1\u06a4\1\u06a5\1\u06a1\1\u069f\1\u06a0\1\u069d\1\u069e",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u06ca\1\u06cb\1\u06cc\1\u06cd\1\uffff\1\u06c7\1\u06c6\1"+
            "\u06c9\34\uffff\1\u06c0\u00b8\uffff\1\u06c8\1\uffff\1\u06bf"+
            "\2\uffff\1\16\1\u06b5\5\uffff\1\u06c3\1\u06c4\1\u06c5\1\u06c1"+
            "\1\u06c2\1\u06bb\1\u06bc\1\u06bd\1\u06be\1\u06ba\1\u06b8\1\u06b9"+
            "\1\u06b6\1\u06b7",
            "\1\u06e4\1\u06e5\1\u06e6\1\u06e7\1\uffff\1\u06e1\1\u06e0\1"+
            "\u06e3\34\uffff\1\u06da\u00b8\uffff\1\u06e2\1\uffff\1\u06d9"+
            "\2\uffff\1\16\1\u06cf\5\uffff\1\u06dd\1\u06de\1\u06df\1\u06db"+
            "\1\u06dc\1\u06d5\1\u06d6\1\u06d7\1\u06d8\1\u06d4\1\u06d2\1\u06d3"+
            "\1\u06d0\1\u06d1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u06fd\1\u06fe\1\u06ff\1\u0700\1\uffff\1\u06fa\1\u06f9\1"+
            "\u06fc\34\uffff\1\u06f3\u00b8\uffff\1\u06fb\1\uffff\1\u06f2"+
            "\2\uffff\1\16\1\u06e8\5\uffff\1\u06f6\1\u06f7\1\u06f8\1\u06f4"+
            "\1\u06f5\1\u06ee\1\u06ef\1\u06f0\1\u06f1\1\u06ed\1\u06eb\1\u06ec"+
            "\1\u06e9\1\u06ea",
            "\1\u0717\1\u0718\1\u0719\1\u071a\1\uffff\1\u0714\1\u0713\1"+
            "\u0716\34\uffff\1\u070d\u00b8\uffff\1\u0715\1\uffff\1\u070c"+
            "\2\uffff\1\16\1\u0702\5\uffff\1\u0710\1\u0711\1\u0712\1\u070e"+
            "\1\u070f\1\u0708\1\u0709\1\u070a\1\u070b\1\u0707\1\u0705\1\u0706"+
            "\1\u0703\1\u0704",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0733\1\u0734\1\u0735\1\u0736\1\uffff\1\u072f\1\u072e\1"+
            "\u0732\3\uffff\1\u0731\30\uffff\1\u0728\u00b8\uffff\1\u0730"+
            "\1\uffff\1\u0727\2\uffff\1\16\1\u071d\5\uffff\1\u072b\1\u072c"+
            "\1\u072d\1\u0729\1\u072a\1\u0723\1\u0724\1\u0725\1\u0726\1\u0722"+
            "\1\u0720\1\u0721\1\u071e\1\u071f",
            "\1\u074e\1\u074f\1\u0750\1\u0751\1\uffff\1\u074a\1\u0749\1"+
            "\u074d\3\uffff\1\u074c\30\uffff\1\u0743\u00b8\uffff\1\u074b"+
            "\1\uffff\1\u0742\2\uffff\1\16\1\u0738\5\uffff\1\u0746\1\u0747"+
            "\1\u0748\1\u0744\1\u0745\1\u073e\1\u073f\1\u0740\1\u0741\1\u073d"+
            "\1\u073b\1\u073c\1\u0739\1\u073a",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA130_eot = DFA.unpackEncodedString(DFA130_eotS);
    static final short[] DFA130_eof = DFA.unpackEncodedString(DFA130_eofS);
    static final char[] DFA130_min = DFA.unpackEncodedStringToUnsignedChars(DFA130_minS);
    static final char[] DFA130_max = DFA.unpackEncodedStringToUnsignedChars(DFA130_maxS);
    static final short[] DFA130_accept = DFA.unpackEncodedString(DFA130_acceptS);
    static final short[] DFA130_special = DFA.unpackEncodedString(DFA130_specialS);
    static final short[][] DFA130_transition;

    static {
        int numStates = DFA130_transitionS.length;
        DFA130_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA130_transition[i] = DFA.unpackEncodedString(DFA130_transitionS[i]);
        }
    }

    class DFA130 extends DFA {

        public DFA130(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 130;
            this.eot = DFA130_eot;
            this.eof = DFA130_eof;
            this.min = DFA130_min;
            this.max = DFA130_max;
            this.accept = DFA130_accept;
            this.special = DFA130_special;
            this.transition = DFA130_transition;
        }
        public String getDescription() {
            return "979:1: unaryExpression : ( MINUS eventProperty -> ^( UNARY_MINUS eventProperty ) | constant | substitution | LPAREN expression RPAREN | eventPropertyOrLibFunction | ( builtinFunc )=> ( builtinFunc ) | arrayExpression | subSelectExpression | existsSubSelectExpression );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA130_0 = input.LA(1);

                         
                        int index130_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA130_0==MINUS) ) {s = 1;}

                        else if ( ((LA130_0>=BOOLEAN_TRUE && LA130_0<=VALUE_NULL)||LA130_0==NUM_DOUBLE||(LA130_0>=STRING_LITERAL && LA130_0<=QUOTED_STRING_LITERAL)||LA130_0==PLUS||LA130_0==NUM_INT||(LA130_0>=NUM_LONG && LA130_0<=NUM_FLOAT)) ) {s = 2;}

                        else if ( (LA130_0==QUESTION) ) {s = 12;}

                        else if ( (LA130_0==LPAREN) ) {s = 13;}

                        else if ( (LA130_0==WINDOW||LA130_0==ESCAPE||LA130_0==EVERY_EXPR||(LA130_0>=MAX && LA130_0<=MIN)||LA130_0==OUTER||(LA130_0>=JOIN && LA130_0<=FULL)||(LA130_0>=EVENTS && LA130_0<=LAST)||(LA130_0>=UNIDIRECTIONAL && LA130_0<=METADATASQL)||(LA130_0>=WEEKDAY && LA130_0<=LW)||LA130_0==SNAPSHOT||(LA130_0>=VARIABLE && LA130_0<=AT)||LA130_0==IDENT||LA130_0==TICKED_STRING_LITERAL) ) {s = 14;}

                        else if ( (LA130_0==COUNT) ) {s = 17;}

                        else if ( (LA130_0==SUM) ) {s = 20;}

                        else if ( (LA130_0==AVG) ) {s = 21;}

                        else if ( (LA130_0==COALESCE) ) {s = 24;}

                        else if ( (LA130_0==MEDIAN) ) {s = 25;}

                        else if ( (LA130_0==STDDEV) ) {s = 26;}

                        else if ( (LA130_0==AVEDEV) ) {s = 27;}

                        else if ( (LA130_0==PREVIOUS) ) {s = 38;}

                        else if ( (LA130_0==PRIOR) ) {s = 39;}

                        else if ( (LA130_0==INSTANCEOF) ) {s = 42;}

                        else if ( (LA130_0==CAST) ) {s = 43;}

                        else if ( (LA130_0==EXISTS) ) {s = 52;}

                        else if ( (LA130_0==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 53;}

                        else if ( (LA130_0==LCURLY) ) {s = 54;}

                         
                        input.seek(index130_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA130_154 = input.LA(1);

                         
                        int index130_154 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA130_154==STRING_LITERAL) ) {s = 749;}

                        else if ( (LA130_154==QUOTED_STRING_LITERAL) ) {s = 750;}

                        else if ( (LA130_154==ALL) && (synpred3_EsperEPL2Grammar())) {s = 751;}

                        else if ( (LA130_154==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 752;}

                        else if ( (LA130_154==CASE) && (synpred3_EsperEPL2Grammar())) {s = 753;}

                        else if ( (LA130_154==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 754;}

                        else if ( (LA130_154==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 755;}

                        else if ( (LA130_154==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 756;}

                        else if ( (LA130_154==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 757;}

                        else if ( (LA130_154==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 758;}

                        else if ( (LA130_154==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 759;}

                        else if ( (LA130_154==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 760;}

                        else if ( (LA130_154==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 761;}

                        else if ( (LA130_154==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 762;}

                        else if ( (LA130_154==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 763;}

                        else if ( (LA130_154==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 764;}

                        else if ( (LA130_154==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 765;}

                        else if ( (LA130_154==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 766;}

                        else if ( (LA130_154==AT) && (synpred3_EsperEPL2Grammar())) {s = 767;}

                        else if ( (LA130_154==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 768;}

                        else if ( (LA130_154==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 769;}

                        else if ( (LA130_154==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 770;}

                        else if ( (LA130_154==SUM) && (synpred3_EsperEPL2Grammar())) {s = 771;}

                        else if ( (LA130_154==AVG) && (synpred3_EsperEPL2Grammar())) {s = 772;}

                        else if ( (LA130_154==MAX) && (synpred3_EsperEPL2Grammar())) {s = 773;}

                        else if ( (LA130_154==MIN) && (synpred3_EsperEPL2Grammar())) {s = 774;}

                        else if ( (LA130_154==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 775;}

                        else if ( (LA130_154==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 776;}

                        else if ( (LA130_154==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 777;}

                        else if ( (LA130_154==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 778;}

                        else if ( (LA130_154==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 779;}

                        else if ( (LA130_154==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 780;}

                        else if ( (LA130_154==LAST) && (synpred3_EsperEPL2Grammar())) {s = 781;}

                        else if ( (LA130_154==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 782;}

                        else if ( (LA130_154==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 783;}

                        else if ( (LA130_154==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 784;}

                        else if ( (LA130_154==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 785;}

                        else if ( (LA130_154==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 786;}

                        else if ( (LA130_154==SQL) && (synpred3_EsperEPL2Grammar())) {s = 787;}

                        else if ( (LA130_154==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 788;}

                        else if ( (LA130_154==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 789;}

                        else if ( (LA130_154==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 790;}

                        else if ( (LA130_154==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 791;}

                        else if ( (LA130_154==LW) && (synpred3_EsperEPL2Grammar())) {s = 792;}

                        else if ( (LA130_154==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 793;}

                        else if ( (LA130_154==CAST) && (synpred3_EsperEPL2Grammar())) {s = 794;}

                        else if ( (LA130_154==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 795;}

                        else if ( (LA130_154==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 796;}

                        else if ( (LA130_154==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 797;}

                        else if ( (LA130_154==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 798;}

                        else if ( (LA130_154==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 799;}

                        else if ( (LA130_154==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 800;}

                        else if ( (LA130_154==FULL) && (synpred3_EsperEPL2Grammar())) {s = 801;}

                        else if ( (LA130_154==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 802;}

                        else if ( (LA130_154==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 803;}

                        else if ( (LA130_154==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 804;}

                        else if ( (LA130_154==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 805;}

                        else if ( (LA130_154==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 806;}

                        else if ( (LA130_154==STAR) && (synpred3_EsperEPL2Grammar())) {s = 807;}

                         
                        input.seek(index130_154);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA130_208 = input.LA(1);

                         
                        int index130_208 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA130_208==ALL) && (synpred3_EsperEPL2Grammar())) {s = 808;}

                        else if ( (LA130_208==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 809;}

                        else if ( (LA130_208==CASE) && (synpred3_EsperEPL2Grammar())) {s = 810;}

                        else if ( (LA130_208==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 811;}

                        else if ( (LA130_208==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 812;}

                        else if ( (LA130_208==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 813;}

                        else if ( (LA130_208==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 814;}

                        else if ( (LA130_208==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 815;}

                        else if ( (LA130_208==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 816;}

                        else if ( (LA130_208==STRING_LITERAL) ) {s = 817;}

                        else if ( (LA130_208==QUOTED_STRING_LITERAL) ) {s = 818;}

                        else if ( (LA130_208==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 819;}

                        else if ( (LA130_208==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 820;}

                        else if ( (LA130_208==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 821;}

                        else if ( (LA130_208==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 822;}

                        else if ( (LA130_208==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 823;}

                        else if ( (LA130_208==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 824;}

                        else if ( (LA130_208==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 825;}

                        else if ( (LA130_208==AT) && (synpred3_EsperEPL2Grammar())) {s = 826;}

                        else if ( (LA130_208==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 827;}

                        else if ( (LA130_208==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 828;}

                        else if ( (LA130_208==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 829;}

                        else if ( (LA130_208==SUM) && (synpred3_EsperEPL2Grammar())) {s = 830;}

                        else if ( (LA130_208==AVG) && (synpred3_EsperEPL2Grammar())) {s = 831;}

                        else if ( (LA130_208==MAX) && (synpred3_EsperEPL2Grammar())) {s = 832;}

                        else if ( (LA130_208==MIN) && (synpred3_EsperEPL2Grammar())) {s = 833;}

                        else if ( (LA130_208==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 834;}

                        else if ( (LA130_208==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 835;}

                        else if ( (LA130_208==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 836;}

                        else if ( (LA130_208==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 837;}

                        else if ( (LA130_208==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 838;}

                        else if ( (LA130_208==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 839;}

                        else if ( (LA130_208==LAST) && (synpred3_EsperEPL2Grammar())) {s = 840;}

                        else if ( (LA130_208==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 841;}

                        else if ( (LA130_208==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 842;}

                        else if ( (LA130_208==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 843;}

                        else if ( (LA130_208==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 844;}

                        else if ( (LA130_208==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 845;}

                        else if ( (LA130_208==SQL) && (synpred3_EsperEPL2Grammar())) {s = 846;}

                        else if ( (LA130_208==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 847;}

                        else if ( (LA130_208==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 848;}

                        else if ( (LA130_208==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 849;}

                        else if ( (LA130_208==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 850;}

                        else if ( (LA130_208==LW) && (synpred3_EsperEPL2Grammar())) {s = 851;}

                        else if ( (LA130_208==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 852;}

                        else if ( (LA130_208==CAST) && (synpred3_EsperEPL2Grammar())) {s = 853;}

                        else if ( (LA130_208==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 854;}

                        else if ( (LA130_208==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 855;}

                        else if ( (LA130_208==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 856;}

                        else if ( (LA130_208==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 857;}

                        else if ( (LA130_208==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 858;}

                        else if ( (LA130_208==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 859;}

                        else if ( (LA130_208==FULL) && (synpred3_EsperEPL2Grammar())) {s = 860;}

                        else if ( (LA130_208==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 861;}

                        else if ( (LA130_208==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 862;}

                        else if ( (LA130_208==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 863;}

                        else if ( (LA130_208==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 864;}

                        else if ( (LA130_208==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 865;}

                         
                        input.seek(index130_208);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA130_262 = input.LA(1);

                         
                        int index130_262 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA130_262==ALL) && (synpred3_EsperEPL2Grammar())) {s = 866;}

                        else if ( (LA130_262==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 867;}

                        else if ( (LA130_262==CASE) && (synpred3_EsperEPL2Grammar())) {s = 868;}

                        else if ( (LA130_262==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 869;}

                        else if ( (LA130_262==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 870;}

                        else if ( (LA130_262==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 871;}

                        else if ( (LA130_262==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 872;}

                        else if ( (LA130_262==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 873;}

                        else if ( (LA130_262==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 874;}

                        else if ( (LA130_262==STRING_LITERAL) ) {s = 875;}

                        else if ( (LA130_262==QUOTED_STRING_LITERAL) ) {s = 876;}

                        else if ( (LA130_262==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 877;}

                        else if ( (LA130_262==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 878;}

                        else if ( (LA130_262==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 879;}

                        else if ( (LA130_262==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 880;}

                        else if ( (LA130_262==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 881;}

                        else if ( (LA130_262==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 882;}

                        else if ( (LA130_262==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 883;}

                        else if ( (LA130_262==AT) && (synpred3_EsperEPL2Grammar())) {s = 884;}

                        else if ( (LA130_262==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 885;}

                        else if ( (LA130_262==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 886;}

                        else if ( (LA130_262==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 887;}

                        else if ( (LA130_262==SUM) && (synpred3_EsperEPL2Grammar())) {s = 888;}

                        else if ( (LA130_262==AVG) && (synpred3_EsperEPL2Grammar())) {s = 889;}

                        else if ( (LA130_262==MAX) && (synpred3_EsperEPL2Grammar())) {s = 890;}

                        else if ( (LA130_262==MIN) && (synpred3_EsperEPL2Grammar())) {s = 891;}

                        else if ( (LA130_262==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 892;}

                        else if ( (LA130_262==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 893;}

                        else if ( (LA130_262==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 894;}

                        else if ( (LA130_262==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 895;}

                        else if ( (LA130_262==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 896;}

                        else if ( (LA130_262==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 897;}

                        else if ( (LA130_262==LAST) && (synpred3_EsperEPL2Grammar())) {s = 898;}

                        else if ( (LA130_262==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 899;}

                        else if ( (LA130_262==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 900;}

                        else if ( (LA130_262==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 901;}

                        else if ( (LA130_262==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 902;}

                        else if ( (LA130_262==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 903;}

                        else if ( (LA130_262==SQL) && (synpred3_EsperEPL2Grammar())) {s = 904;}

                        else if ( (LA130_262==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 905;}

                        else if ( (LA130_262==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 906;}

                        else if ( (LA130_262==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 907;}

                        else if ( (LA130_262==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 908;}

                        else if ( (LA130_262==LW) && (synpred3_EsperEPL2Grammar())) {s = 909;}

                        else if ( (LA130_262==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 910;}

                        else if ( (LA130_262==CAST) && (synpred3_EsperEPL2Grammar())) {s = 911;}

                        else if ( (LA130_262==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 912;}

                        else if ( (LA130_262==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 913;}

                        else if ( (LA130_262==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 914;}

                        else if ( (LA130_262==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 915;}

                        else if ( (LA130_262==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 916;}

                        else if ( (LA130_262==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 917;}

                        else if ( (LA130_262==FULL) && (synpred3_EsperEPL2Grammar())) {s = 918;}

                        else if ( (LA130_262==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 919;}

                        else if ( (LA130_262==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 920;}

                        else if ( (LA130_262==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 921;}

                        else if ( (LA130_262==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 922;}

                        else if ( (LA130_262==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 923;}

                         
                        input.seek(index130_262);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA130_316 = input.LA(1);

                         
                        int index130_316 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA130_316==CASE) && (synpred3_EsperEPL2Grammar())) {s = 924;}

                        else if ( (LA130_316==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 925;}

                        else if ( (LA130_316==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 926;}

                        else if ( (LA130_316==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 927;}

                        else if ( (LA130_316==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 928;}

                        else if ( (LA130_316==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 929;}

                        else if ( (LA130_316==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 930;}

                        else if ( (LA130_316==STRING_LITERAL) ) {s = 931;}

                        else if ( (LA130_316==QUOTED_STRING_LITERAL) ) {s = 932;}

                        else if ( (LA130_316==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 933;}

                        else if ( (LA130_316==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 934;}

                        else if ( (LA130_316==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 935;}

                        else if ( (LA130_316==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 936;}

                        else if ( (LA130_316==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 937;}

                        else if ( (LA130_316==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 938;}

                        else if ( (LA130_316==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 939;}

                        else if ( (LA130_316==AT) && (synpred3_EsperEPL2Grammar())) {s = 940;}

                        else if ( (LA130_316==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 941;}

                        else if ( (LA130_316==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 942;}

                        else if ( (LA130_316==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 943;}

                        else if ( (LA130_316==SUM) && (synpred3_EsperEPL2Grammar())) {s = 944;}

                        else if ( (LA130_316==AVG) && (synpred3_EsperEPL2Grammar())) {s = 945;}

                        else if ( (LA130_316==MAX) && (synpred3_EsperEPL2Grammar())) {s = 946;}

                        else if ( (LA130_316==MIN) && (synpred3_EsperEPL2Grammar())) {s = 947;}

                        else if ( (LA130_316==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 948;}

                        else if ( (LA130_316==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 949;}

                        else if ( (LA130_316==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 950;}

                        else if ( (LA130_316==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 951;}

                        else if ( (LA130_316==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 952;}

                        else if ( (LA130_316==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 953;}

                        else if ( (LA130_316==LAST) && (synpred3_EsperEPL2Grammar())) {s = 954;}

                        else if ( (LA130_316==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 955;}

                        else if ( (LA130_316==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 956;}

                        else if ( (LA130_316==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 957;}

                        else if ( (LA130_316==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 958;}

                        else if ( (LA130_316==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 959;}

                        else if ( (LA130_316==SQL) && (synpred3_EsperEPL2Grammar())) {s = 960;}

                        else if ( (LA130_316==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 961;}

                        else if ( (LA130_316==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 962;}

                        else if ( (LA130_316==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 963;}

                        else if ( (LA130_316==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 964;}

                        else if ( (LA130_316==LW) && (synpred3_EsperEPL2Grammar())) {s = 965;}

                        else if ( (LA130_316==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 966;}

                        else if ( (LA130_316==CAST) && (synpred3_EsperEPL2Grammar())) {s = 967;}

                        else if ( (LA130_316==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 968;}

                        else if ( (LA130_316==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 969;}

                        else if ( (LA130_316==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 970;}

                        else if ( (LA130_316==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 971;}

                        else if ( (LA130_316==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 972;}

                        else if ( (LA130_316==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 973;}

                        else if ( (LA130_316==FULL) && (synpred3_EsperEPL2Grammar())) {s = 974;}

                        else if ( (LA130_316==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 975;}

                        else if ( (LA130_316==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 976;}

                        else if ( (LA130_316==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 977;}

                        else if ( (LA130_316==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 978;}

                        else if ( (LA130_316==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 979;}

                         
                        input.seek(index130_316);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA130_370 = input.LA(1);

                         
                        int index130_370 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA130_370==ALL) && (synpred3_EsperEPL2Grammar())) {s = 980;}

                        else if ( (LA130_370==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 981;}

                        else if ( (LA130_370==CASE) && (synpred3_EsperEPL2Grammar())) {s = 982;}

                        else if ( (LA130_370==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 983;}

                        else if ( (LA130_370==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 984;}

                        else if ( (LA130_370==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 985;}

                        else if ( (LA130_370==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 986;}

                        else if ( (LA130_370==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 987;}

                        else if ( (LA130_370==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 988;}

                        else if ( (LA130_370==STRING_LITERAL) ) {s = 989;}

                        else if ( (LA130_370==QUOTED_STRING_LITERAL) ) {s = 990;}

                        else if ( (LA130_370==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 991;}

                        else if ( (LA130_370==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 992;}

                        else if ( (LA130_370==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 993;}

                        else if ( (LA130_370==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 994;}

                        else if ( (LA130_370==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 995;}

                        else if ( (LA130_370==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 996;}

                        else if ( (LA130_370==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 997;}

                        else if ( (LA130_370==AT) && (synpred3_EsperEPL2Grammar())) {s = 998;}

                        else if ( (LA130_370==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 999;}

                        else if ( (LA130_370==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1000;}

                        else if ( (LA130_370==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1001;}

                        else if ( (LA130_370==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1002;}

                        else if ( (LA130_370==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1003;}

                        else if ( (LA130_370==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1004;}

                        else if ( (LA130_370==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1005;}

                        else if ( (LA130_370==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1006;}

                        else if ( (LA130_370==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1007;}

                        else if ( (LA130_370==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1008;}

                        else if ( (LA130_370==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1009;}

                        else if ( (LA130_370==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1010;}

                        else if ( (LA130_370==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1011;}

                        else if ( (LA130_370==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1012;}

                        else if ( (LA130_370==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1013;}

                        else if ( (LA130_370==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1014;}

                        else if ( (LA130_370==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1015;}

                        else if ( (LA130_370==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1016;}

                        else if ( (LA130_370==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1017;}

                        else if ( (LA130_370==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1018;}

                        else if ( (LA130_370==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1019;}

                        else if ( (LA130_370==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1020;}

                        else if ( (LA130_370==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1021;}

                        else if ( (LA130_370==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1022;}

                        else if ( (LA130_370==LW) && (synpred3_EsperEPL2Grammar())) {s = 1023;}

                        else if ( (LA130_370==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1024;}

                        else if ( (LA130_370==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1025;}

                        else if ( (LA130_370==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1026;}

                        else if ( (LA130_370==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1027;}

                        else if ( (LA130_370==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1028;}

                        else if ( (LA130_370==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1029;}

                        else if ( (LA130_370==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1030;}

                        else if ( (LA130_370==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1031;}

                        else if ( (LA130_370==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1032;}

                        else if ( (LA130_370==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1033;}

                        else if ( (LA130_370==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1034;}

                        else if ( (LA130_370==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1035;}

                        else if ( (LA130_370==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1036;}

                        else if ( (LA130_370==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1037;}

                         
                        input.seek(index130_370);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA130_424 = input.LA(1);

                         
                        int index130_424 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA130_424==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1038;}

                        else if ( (LA130_424==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1039;}

                        else if ( (LA130_424==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1040;}

                        else if ( (LA130_424==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1041;}

                        else if ( (LA130_424==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1042;}

                        else if ( (LA130_424==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1043;}

                        else if ( (LA130_424==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1044;}

                        else if ( (LA130_424==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1045;}

                        else if ( (LA130_424==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1046;}

                        else if ( (LA130_424==STRING_LITERAL) ) {s = 1047;}

                        else if ( (LA130_424==QUOTED_STRING_LITERAL) ) {s = 1048;}

                        else if ( (LA130_424==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1049;}

                        else if ( (LA130_424==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1050;}

                        else if ( (LA130_424==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1051;}

                        else if ( (LA130_424==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1052;}

                        else if ( (LA130_424==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1053;}

                        else if ( (LA130_424==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1054;}

                        else if ( (LA130_424==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1055;}

                        else if ( (LA130_424==AT) && (synpred3_EsperEPL2Grammar())) {s = 1056;}

                        else if ( (LA130_424==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1057;}

                        else if ( (LA130_424==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1058;}

                        else if ( (LA130_424==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1059;}

                        else if ( (LA130_424==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1060;}

                        else if ( (LA130_424==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1061;}

                        else if ( (LA130_424==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1062;}

                        else if ( (LA130_424==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1063;}

                        else if ( (LA130_424==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1064;}

                        else if ( (LA130_424==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1065;}

                        else if ( (LA130_424==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1066;}

                        else if ( (LA130_424==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1067;}

                        else if ( (LA130_424==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1068;}

                        else if ( (LA130_424==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1069;}

                        else if ( (LA130_424==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1070;}

                        else if ( (LA130_424==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1071;}

                        else if ( (LA130_424==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1072;}

                        else if ( (LA130_424==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1073;}

                        else if ( (LA130_424==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1074;}

                        else if ( (LA130_424==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1075;}

                        else if ( (LA130_424==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1076;}

                        else if ( (LA130_424==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1077;}

                        else if ( (LA130_424==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1078;}

                        else if ( (LA130_424==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1079;}

                        else if ( (LA130_424==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1080;}

                        else if ( (LA130_424==LW) && (synpred3_EsperEPL2Grammar())) {s = 1081;}

                        else if ( (LA130_424==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1082;}

                        else if ( (LA130_424==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1083;}

                        else if ( (LA130_424==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1084;}

                        else if ( (LA130_424==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1085;}

                        else if ( (LA130_424==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1086;}

                        else if ( (LA130_424==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1087;}

                        else if ( (LA130_424==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1088;}

                        else if ( (LA130_424==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1089;}

                        else if ( (LA130_424==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1090;}

                        else if ( (LA130_424==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1091;}

                        else if ( (LA130_424==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1092;}

                        else if ( (LA130_424==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1093;}

                        else if ( (LA130_424==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1094;}

                        else if ( (LA130_424==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1095;}

                         
                        input.seek(index130_424);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA130_478 = input.LA(1);

                         
                        int index130_478 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA130_478==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1096;}

                        else if ( (LA130_478==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1097;}

                        else if ( (LA130_478==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1098;}

                        else if ( (LA130_478==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1099;}

                        else if ( (LA130_478==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1100;}

                        else if ( (LA130_478==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1101;}

                        else if ( (LA130_478==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1102;}

                        else if ( (LA130_478==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1103;}

                        else if ( (LA130_478==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1104;}

                        else if ( (LA130_478==STRING_LITERAL) ) {s = 1105;}

                        else if ( (LA130_478==QUOTED_STRING_LITERAL) ) {s = 1106;}

                        else if ( (LA130_478==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1107;}

                        else if ( (LA130_478==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1108;}

                        else if ( (LA130_478==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1109;}

                        else if ( (LA130_478==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1110;}

                        else if ( (LA130_478==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1111;}

                        else if ( (LA130_478==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1112;}

                        else if ( (LA130_478==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1113;}

                        else if ( (LA130_478==AT) && (synpred3_EsperEPL2Grammar())) {s = 1114;}

                        else if ( (LA130_478==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1115;}

                        else if ( (LA130_478==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1116;}

                        else if ( (LA130_478==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1117;}

                        else if ( (LA130_478==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1118;}

                        else if ( (LA130_478==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1119;}

                        else if ( (LA130_478==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1120;}

                        else if ( (LA130_478==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1121;}

                        else if ( (LA130_478==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1122;}

                        else if ( (LA130_478==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1123;}

                        else if ( (LA130_478==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1124;}

                        else if ( (LA130_478==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1125;}

                        else if ( (LA130_478==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1126;}

                        else if ( (LA130_478==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1127;}

                        else if ( (LA130_478==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1128;}

                        else if ( (LA130_478==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1129;}

                        else if ( (LA130_478==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1130;}

                        else if ( (LA130_478==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1131;}

                        else if ( (LA130_478==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1132;}

                        else if ( (LA130_478==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1133;}

                        else if ( (LA130_478==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1134;}

                        else if ( (LA130_478==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1135;}

                        else if ( (LA130_478==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1136;}

                        else if ( (LA130_478==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1137;}

                        else if ( (LA130_478==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1138;}

                        else if ( (LA130_478==LW) && (synpred3_EsperEPL2Grammar())) {s = 1139;}

                        else if ( (LA130_478==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1140;}

                        else if ( (LA130_478==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1141;}

                        else if ( (LA130_478==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1142;}

                        else if ( (LA130_478==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1143;}

                        else if ( (LA130_478==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1144;}

                        else if ( (LA130_478==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1145;}

                        else if ( (LA130_478==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1146;}

                        else if ( (LA130_478==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1147;}

                        else if ( (LA130_478==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1148;}

                        else if ( (LA130_478==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1149;}

                        else if ( (LA130_478==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1150;}

                        else if ( (LA130_478==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1151;}

                        else if ( (LA130_478==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1152;}

                        else if ( (LA130_478==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1153;}

                         
                        input.seek(index130_478);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA130_532 = input.LA(1);

                         
                        int index130_532 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA130_532==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1154;}

                        else if ( (LA130_532==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1155;}

                        else if ( (LA130_532==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1156;}

                        else if ( (LA130_532==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1157;}

                        else if ( (LA130_532==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1158;}

                        else if ( (LA130_532==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1159;}

                        else if ( (LA130_532==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1160;}

                        else if ( (LA130_532==STRING_LITERAL) ) {s = 1161;}

                        else if ( (LA130_532==QUOTED_STRING_LITERAL) ) {s = 1162;}

                        else if ( (LA130_532==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1163;}

                        else if ( (LA130_532==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1164;}

                        else if ( (LA130_532==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1165;}

                        else if ( (LA130_532==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1166;}

                        else if ( (LA130_532==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1167;}

                        else if ( (LA130_532==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1168;}

                        else if ( (LA130_532==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1169;}

                        else if ( (LA130_532==AT) && (synpred3_EsperEPL2Grammar())) {s = 1170;}

                        else if ( (LA130_532==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1171;}

                        else if ( (LA130_532==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1172;}

                        else if ( (LA130_532==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1173;}

                        else if ( (LA130_532==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1174;}

                        else if ( (LA130_532==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1175;}

                        else if ( (LA130_532==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1176;}

                        else if ( (LA130_532==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1177;}

                        else if ( (LA130_532==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1178;}

                        else if ( (LA130_532==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1179;}

                        else if ( (LA130_532==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1180;}

                        else if ( (LA130_532==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1181;}

                        else if ( (LA130_532==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1182;}

                        else if ( (LA130_532==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1183;}

                        else if ( (LA130_532==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1184;}

                        else if ( (LA130_532==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1185;}

                        else if ( (LA130_532==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1186;}

                        else if ( (LA130_532==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1187;}

                        else if ( (LA130_532==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1188;}

                        else if ( (LA130_532==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1189;}

                        else if ( (LA130_532==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1190;}

                        else if ( (LA130_532==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1191;}

                        else if ( (LA130_532==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1192;}

                        else if ( (LA130_532==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1193;}

                        else if ( (LA130_532==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1194;}

                        else if ( (LA130_532==LW) && (synpred3_EsperEPL2Grammar())) {s = 1195;}

                        else if ( (LA130_532==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1196;}

                        else if ( (LA130_532==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1197;}

                        else if ( (LA130_532==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1198;}

                        else if ( (LA130_532==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1199;}

                        else if ( (LA130_532==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1200;}

                        else if ( (LA130_532==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1201;}

                        else if ( (LA130_532==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1202;}

                        else if ( (LA130_532==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1203;}

                        else if ( (LA130_532==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1204;}

                        else if ( (LA130_532==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1205;}

                        else if ( (LA130_532==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1206;}

                        else if ( (LA130_532==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1207;}

                        else if ( (LA130_532==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1208;}

                        else if ( (LA130_532==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1209;}

                         
                        input.seek(index130_532);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA130_586 = input.LA(1);

                         
                        int index130_586 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA130_586==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1210;}

                        else if ( ((LA130_586>=STRING_LITERAL && LA130_586<=QUOTED_STRING_LITERAL)) ) {s = 14;}

                         
                        input.seek(index130_586);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA130_640 = input.LA(1);

                         
                        int index130_640 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA130_640==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1213;}

                        else if ( (LA130_640==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1214;}

                        else if ( (LA130_640==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1215;}

                        else if ( (LA130_640==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1216;}

                        else if ( (LA130_640==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1217;}

                        else if ( (LA130_640==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1218;}

                        else if ( (LA130_640==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1219;}

                        else if ( (LA130_640==STRING_LITERAL) ) {s = 1220;}

                        else if ( (LA130_640==QUOTED_STRING_LITERAL) ) {s = 1221;}

                        else if ( (LA130_640==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1222;}

                        else if ( (LA130_640==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1223;}

                        else if ( (LA130_640==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1224;}

                        else if ( (LA130_640==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1225;}

                        else if ( (LA130_640==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1226;}

                        else if ( (LA130_640==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1227;}

                        else if ( (LA130_640==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1228;}

                        else if ( (LA130_640==AT) && (synpred3_EsperEPL2Grammar())) {s = 1229;}

                        else if ( (LA130_640==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1230;}

                        else if ( (LA130_640==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1231;}

                        else if ( (LA130_640==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1232;}

                        else if ( (LA130_640==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1233;}

                        else if ( (LA130_640==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1234;}

                        else if ( (LA130_640==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1235;}

                        else if ( (LA130_640==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1236;}

                        else if ( (LA130_640==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1237;}

                        else if ( (LA130_640==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1238;}

                        else if ( (LA130_640==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1239;}

                        else if ( (LA130_640==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1240;}

                        else if ( (LA130_640==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1241;}

                        else if ( (LA130_640==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1242;}

                        else if ( (LA130_640==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1243;}

                        else if ( (LA130_640==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1244;}

                        else if ( (LA130_640==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1245;}

                        else if ( (LA130_640==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1246;}

                        else if ( (LA130_640==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1247;}

                        else if ( (LA130_640==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1248;}

                        else if ( (LA130_640==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1249;}

                        else if ( (LA130_640==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1250;}

                        else if ( (LA130_640==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1251;}

                        else if ( (LA130_640==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1252;}

                        else if ( (LA130_640==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1253;}

                        else if ( (LA130_640==LW) && (synpred3_EsperEPL2Grammar())) {s = 1254;}

                        else if ( (LA130_640==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1255;}

                        else if ( (LA130_640==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1256;}

                        else if ( (LA130_640==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1257;}

                        else if ( (LA130_640==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1258;}

                        else if ( (LA130_640==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1259;}

                        else if ( (LA130_640==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1260;}

                        else if ( (LA130_640==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1261;}

                        else if ( (LA130_640==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1262;}

                        else if ( (LA130_640==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1263;}

                        else if ( (LA130_640==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1264;}

                        else if ( (LA130_640==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1265;}

                        else if ( (LA130_640==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1266;}

                        else if ( (LA130_640==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1267;}

                        else if ( (LA130_640==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1268;}

                         
                        input.seek(index130_640);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA130_694 = input.LA(1);

                         
                        int index130_694 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA130_694==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1269;}

                        else if ( (LA130_694==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1270;}

                        else if ( (LA130_694==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1271;}

                        else if ( (LA130_694==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1272;}

                        else if ( (LA130_694==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1273;}

                        else if ( (LA130_694==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1274;}

                        else if ( (LA130_694==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1275;}

                        else if ( (LA130_694==STRING_LITERAL) ) {s = 1276;}

                        else if ( (LA130_694==QUOTED_STRING_LITERAL) ) {s = 1277;}

                        else if ( (LA130_694==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1278;}

                        else if ( (LA130_694==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1279;}

                        else if ( (LA130_694==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1280;}

                        else if ( (LA130_694==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1281;}

                        else if ( (LA130_694==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1282;}

                        else if ( (LA130_694==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1283;}

                        else if ( (LA130_694==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1284;}

                        else if ( (LA130_694==AT) && (synpred3_EsperEPL2Grammar())) {s = 1285;}

                        else if ( (LA130_694==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1286;}

                        else if ( (LA130_694==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1287;}

                        else if ( (LA130_694==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1288;}

                        else if ( (LA130_694==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1289;}

                        else if ( (LA130_694==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1290;}

                        else if ( (LA130_694==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1291;}

                        else if ( (LA130_694==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1292;}

                        else if ( (LA130_694==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1293;}

                        else if ( (LA130_694==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1294;}

                        else if ( (LA130_694==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1295;}

                        else if ( (LA130_694==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1296;}

                        else if ( (LA130_694==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1297;}

                        else if ( (LA130_694==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1298;}

                        else if ( (LA130_694==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1299;}

                        else if ( (LA130_694==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1300;}

                        else if ( (LA130_694==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1301;}

                        else if ( (LA130_694==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1302;}

                        else if ( (LA130_694==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1303;}

                        else if ( (LA130_694==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1304;}

                        else if ( (LA130_694==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1305;}

                        else if ( (LA130_694==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1306;}

                        else if ( (LA130_694==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1307;}

                        else if ( (LA130_694==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1308;}

                        else if ( (LA130_694==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1309;}

                        else if ( (LA130_694==LW) && (synpred3_EsperEPL2Grammar())) {s = 1310;}

                        else if ( (LA130_694==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1311;}

                        else if ( (LA130_694==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1312;}

                        else if ( (LA130_694==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1313;}

                        else if ( (LA130_694==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1314;}

                        else if ( (LA130_694==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1315;}

                        else if ( (LA130_694==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1316;}

                        else if ( (LA130_694==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1317;}

                        else if ( (LA130_694==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1318;}

                        else if ( (LA130_694==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1319;}

                        else if ( (LA130_694==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1320;}

                        else if ( (LA130_694==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1321;}

                        else if ( (LA130_694==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1322;}

                        else if ( (LA130_694==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1323;}

                        else if ( (LA130_694==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1324;}

                         
                        input.seek(index130_694);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA130_748 = input.LA(1);

                         
                        int index130_748 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA130_748==SELECT) ) {s = 1325;}

                        else if ( (LA130_748==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1326;}

                        else if ( (LA130_748==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1327;}

                        else if ( (LA130_748==AT) && (synpred3_EsperEPL2Grammar())) {s = 1328;}

                        else if ( (LA130_748==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1329;}

                        else if ( (LA130_748==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1330;}

                        else if ( (LA130_748==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1331;}

                        else if ( (LA130_748==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1332;}

                        else if ( (LA130_748==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1333;}

                        else if ( (LA130_748==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1334;}

                        else if ( (LA130_748==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1335;}

                        else if ( (LA130_748==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1336;}

                        else if ( (LA130_748==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1337;}

                        else if ( (LA130_748==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1338;}

                        else if ( (LA130_748==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1339;}

                        else if ( (LA130_748==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1340;}

                        else if ( (LA130_748==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1341;}

                        else if ( (LA130_748==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1342;}

                        else if ( (LA130_748==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1343;}

                        else if ( (LA130_748==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1344;}

                        else if ( (LA130_748==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1345;}

                        else if ( (LA130_748==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1346;}

                        else if ( (LA130_748==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1347;}

                        else if ( (LA130_748==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1348;}

                        else if ( (LA130_748==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1349;}

                        else if ( (LA130_748==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1350;}

                        else if ( (LA130_748==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1351;}

                        else if ( (LA130_748==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1352;}

                        else if ( (LA130_748==LW) && (synpred3_EsperEPL2Grammar())) {s = 1353;}

                        else if ( (LA130_748==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1354;}

                        else if ( (LA130_748==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1355;}

                        else if ( (LA130_748==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1356;}

                        else if ( (LA130_748==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1357;}

                        else if ( (LA130_748==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1358;}

                        else if ( (LA130_748==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1359;}

                        else if ( (LA130_748==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1360;}

                        else if ( (LA130_748==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1361;}

                        else if ( (LA130_748==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1362;}

                        else if ( (LA130_748==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1363;}

                         
                        input.seek(index130_748);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA130_749 = input.LA(1);

                         
                        int index130_749 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA130_749==RPAREN) ) {s = 1364;}

                        else if ( (LA130_749==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1365;}

                        else if ( (LA130_749==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1366;}

                        else if ( (LA130_749==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1367;}

                        else if ( (LA130_749==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1368;}

                        else if ( (LA130_749==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1369;}

                        else if ( (LA130_749==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1370;}

                        else if ( (LA130_749==LT) && (synpred3_EsperEPL2Grammar())) {s = 1371;}

                        else if ( (LA130_749==GT) && (synpred3_EsperEPL2Grammar())) {s = 1372;}

                        else if ( (LA130_749==LE) && (synpred3_EsperEPL2Grammar())) {s = 1373;}

                        else if ( (LA130_749==GE) && (synpred3_EsperEPL2Grammar())) {s = 1374;}

                        else if ( (LA130_749==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1375;}

                        else if ( (LA130_749==IS) && (synpred3_EsperEPL2Grammar())) {s = 1376;}

                        else if ( (LA130_749==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1377;}

                        else if ( (LA130_749==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1378;}

                        else if ( (LA130_749==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1379;}

                        else if ( (LA130_749==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1380;}

                        else if ( (LA130_749==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1381;}

                        else if ( (LA130_749==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1382;}

                        else if ( (LA130_749==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1383;}

                        else if ( (LA130_749==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1384;}

                        else if ( (LA130_749==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1385;}

                        else if ( (LA130_749==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1386;}

                        else if ( (LA130_749==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1387;}

                        else if ( (LA130_749==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1388;}

                         
                        input.seek(index130_749);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA130_750 = input.LA(1);

                         
                        int index130_750 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA130_750==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1389;}

                        else if ( (LA130_750==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1390;}

                        else if ( (LA130_750==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1391;}

                        else if ( (LA130_750==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1392;}

                        else if ( (LA130_750==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1393;}

                        else if ( (LA130_750==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1394;}

                        else if ( (LA130_750==LT) && (synpred3_EsperEPL2Grammar())) {s = 1395;}

                        else if ( (LA130_750==GT) && (synpred3_EsperEPL2Grammar())) {s = 1396;}

                        else if ( (LA130_750==LE) && (synpred3_EsperEPL2Grammar())) {s = 1397;}

                        else if ( (LA130_750==GE) && (synpred3_EsperEPL2Grammar())) {s = 1398;}

                        else if ( (LA130_750==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1399;}

                        else if ( (LA130_750==IS) && (synpred3_EsperEPL2Grammar())) {s = 1400;}

                        else if ( (LA130_750==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1401;}

                        else if ( (LA130_750==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1402;}

                        else if ( (LA130_750==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1403;}

                        else if ( (LA130_750==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1404;}

                        else if ( (LA130_750==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1405;}

                        else if ( (LA130_750==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1406;}

                        else if ( (LA130_750==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1407;}

                        else if ( (LA130_750==RPAREN) ) {s = 1408;}

                        else if ( (LA130_750==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1409;}

                        else if ( (LA130_750==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1410;}

                        else if ( (LA130_750==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1411;}

                        else if ( (LA130_750==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1412;}

                        else if ( (LA130_750==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1413;}

                         
                        input.seek(index130_750);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA130_817 = input.LA(1);

                         
                        int index130_817 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA130_817==RPAREN) ) {s = 1414;}

                        else if ( (LA130_817==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1415;}

                        else if ( (LA130_817==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1416;}

                        else if ( (LA130_817==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1417;}

                        else if ( (LA130_817==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1418;}

                        else if ( (LA130_817==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1419;}

                        else if ( (LA130_817==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1420;}

                        else if ( (LA130_817==LT) && (synpred3_EsperEPL2Grammar())) {s = 1421;}

                        else if ( (LA130_817==GT) && (synpred3_EsperEPL2Grammar())) {s = 1422;}

                        else if ( (LA130_817==LE) && (synpred3_EsperEPL2Grammar())) {s = 1423;}

                        else if ( (LA130_817==GE) && (synpred3_EsperEPL2Grammar())) {s = 1424;}

                        else if ( (LA130_817==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1425;}

                        else if ( (LA130_817==IS) && (synpred3_EsperEPL2Grammar())) {s = 1426;}

                        else if ( (LA130_817==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1427;}

                        else if ( (LA130_817==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1428;}

                        else if ( (LA130_817==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1429;}

                        else if ( (LA130_817==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1430;}

                        else if ( (LA130_817==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1431;}

                        else if ( (LA130_817==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1432;}

                        else if ( (LA130_817==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1433;}

                        else if ( (LA130_817==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1434;}

                        else if ( (LA130_817==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1435;}

                        else if ( (LA130_817==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1436;}

                        else if ( (LA130_817==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1437;}

                        else if ( (LA130_817==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1438;}

                         
                        input.seek(index130_817);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA130_818 = input.LA(1);

                         
                        int index130_818 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA130_818==RPAREN) ) {s = 1439;}

                        else if ( (LA130_818==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1440;}

                        else if ( (LA130_818==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1441;}

                        else if ( (LA130_818==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1442;}

                        else if ( (LA130_818==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1443;}

                        else if ( (LA130_818==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1444;}

                        else if ( (LA130_818==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1445;}

                        else if ( (LA130_818==LT) && (synpred3_EsperEPL2Grammar())) {s = 1446;}

                        else if ( (LA130_818==GT) && (synpred3_EsperEPL2Grammar())) {s = 1447;}

                        else if ( (LA130_818==LE) && (synpred3_EsperEPL2Grammar())) {s = 1448;}

                        else if ( (LA130_818==GE) && (synpred3_EsperEPL2Grammar())) {s = 1449;}

                        else if ( (LA130_818==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1450;}

                        else if ( (LA130_818==IS) && (synpred3_EsperEPL2Grammar())) {s = 1451;}

                        else if ( (LA130_818==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1452;}

                        else if ( (LA130_818==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1453;}

                        else if ( (LA130_818==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1454;}

                        else if ( (LA130_818==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1455;}

                        else if ( (LA130_818==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1456;}

                        else if ( (LA130_818==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1457;}

                        else if ( (LA130_818==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1458;}

                        else if ( (LA130_818==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1459;}

                        else if ( (LA130_818==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1460;}

                        else if ( (LA130_818==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1461;}

                        else if ( (LA130_818==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1462;}

                        else if ( (LA130_818==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1463;}

                         
                        input.seek(index130_818);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA130_875 = input.LA(1);

                         
                        int index130_875 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA130_875==RPAREN) ) {s = 1464;}

                        else if ( (LA130_875==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1465;}

                        else if ( (LA130_875==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1466;}

                        else if ( (LA130_875==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1467;}

                        else if ( (LA130_875==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1468;}

                        else if ( (LA130_875==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1469;}

                        else if ( (LA130_875==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1470;}

                        else if ( (LA130_875==LT) && (synpred3_EsperEPL2Grammar())) {s = 1471;}

                        else if ( (LA130_875==GT) && (synpred3_EsperEPL2Grammar())) {s = 1472;}

                        else if ( (LA130_875==LE) && (synpred3_EsperEPL2Grammar())) {s = 1473;}

                        else if ( (LA130_875==GE) && (synpred3_EsperEPL2Grammar())) {s = 1474;}

                        else if ( (LA130_875==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1475;}

                        else if ( (LA130_875==IS) && (synpred3_EsperEPL2Grammar())) {s = 1476;}

                        else if ( (LA130_875==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1477;}

                        else if ( (LA130_875==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1478;}

                        else if ( (LA130_875==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1479;}

                        else if ( (LA130_875==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1480;}

                        else if ( (LA130_875==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1481;}

                        else if ( (LA130_875==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1482;}

                        else if ( (LA130_875==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1483;}

                        else if ( (LA130_875==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1484;}

                        else if ( (LA130_875==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1485;}

                        else if ( (LA130_875==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1486;}

                        else if ( (LA130_875==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1487;}

                        else if ( (LA130_875==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1488;}

                         
                        input.seek(index130_875);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA130_876 = input.LA(1);

                         
                        int index130_876 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA130_876==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1489;}

                        else if ( (LA130_876==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1490;}

                        else if ( (LA130_876==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1491;}

                        else if ( (LA130_876==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1492;}

                        else if ( (LA130_876==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1493;}

                        else if ( (LA130_876==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1494;}

                        else if ( (LA130_876==LT) && (synpred3_EsperEPL2Grammar())) {s = 1495;}

                        else if ( (LA130_876==GT) && (synpred3_EsperEPL2Grammar())) {s = 1496;}

                        else if ( (LA130_876==LE) && (synpred3_EsperEPL2Grammar())) {s = 1497;}

                        else if ( (LA130_876==GE) && (synpred3_EsperEPL2Grammar())) {s = 1498;}

                        else if ( (LA130_876==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1499;}

                        else if ( (LA130_876==IS) && (synpred3_EsperEPL2Grammar())) {s = 1500;}

                        else if ( (LA130_876==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1501;}

                        else if ( (LA130_876==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1502;}

                        else if ( (LA130_876==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1503;}

                        else if ( (LA130_876==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1504;}

                        else if ( (LA130_876==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1505;}

                        else if ( (LA130_876==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1506;}

                        else if ( (LA130_876==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1507;}

                        else if ( (LA130_876==RPAREN) ) {s = 1508;}

                        else if ( (LA130_876==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1509;}

                        else if ( (LA130_876==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1510;}

                        else if ( (LA130_876==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1511;}

                        else if ( (LA130_876==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1512;}

                        else if ( (LA130_876==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1513;}

                         
                        input.seek(index130_876);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA130_931 = input.LA(1);

                         
                        int index130_931 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA130_931==RPAREN) ) {s = 14;}

                        else if ( (LA130_931==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1515;}

                        else if ( (LA130_931==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1516;}

                        else if ( (LA130_931==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1517;}

                        else if ( (LA130_931==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1518;}

                        else if ( (LA130_931==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1519;}

                        else if ( (LA130_931==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1520;}

                        else if ( (LA130_931==LT) && (synpred3_EsperEPL2Grammar())) {s = 1521;}

                        else if ( (LA130_931==GT) && (synpred3_EsperEPL2Grammar())) {s = 1522;}

                        else if ( (LA130_931==LE) && (synpred3_EsperEPL2Grammar())) {s = 1523;}

                        else if ( (LA130_931==GE) && (synpred3_EsperEPL2Grammar())) {s = 1524;}

                        else if ( (LA130_931==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1525;}

                        else if ( (LA130_931==IS) && (synpred3_EsperEPL2Grammar())) {s = 1526;}

                        else if ( (LA130_931==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1527;}

                        else if ( (LA130_931==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1528;}

                        else if ( (LA130_931==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1529;}

                        else if ( (LA130_931==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1530;}

                        else if ( (LA130_931==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1531;}

                        else if ( (LA130_931==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1532;}

                        else if ( (LA130_931==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1533;}

                        else if ( (LA130_931==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 1534;}

                        else if ( (LA130_931==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1535;}

                        else if ( (LA130_931==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1536;}

                        else if ( (LA130_931==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1537;}

                        else if ( (LA130_931==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1538;}

                        else if ( (LA130_931==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1539;}

                         
                        input.seek(index130_931);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA130_932 = input.LA(1);

                         
                        int index130_932 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA130_932==RPAREN) ) {s = 14;}

                        else if ( (LA130_932==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1541;}

                        else if ( (LA130_932==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1542;}

                        else if ( (LA130_932==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1543;}

                        else if ( (LA130_932==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1544;}

                        else if ( (LA130_932==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1545;}

                        else if ( (LA130_932==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1546;}

                        else if ( (LA130_932==LT) && (synpred3_EsperEPL2Grammar())) {s = 1547;}

                        else if ( (LA130_932==GT) && (synpred3_EsperEPL2Grammar())) {s = 1548;}

                        else if ( (LA130_932==LE) && (synpred3_EsperEPL2Grammar())) {s = 1549;}

                        else if ( (LA130_932==GE) && (synpred3_EsperEPL2Grammar())) {s = 1550;}

                        else if ( (LA130_932==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1551;}

                        else if ( (LA130_932==IS) && (synpred3_EsperEPL2Grammar())) {s = 1552;}

                        else if ( (LA130_932==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1553;}

                        else if ( (LA130_932==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1554;}

                        else if ( (LA130_932==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1555;}

                        else if ( (LA130_932==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1556;}

                        else if ( (LA130_932==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1557;}

                        else if ( (LA130_932==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1558;}

                        else if ( (LA130_932==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1559;}

                        else if ( (LA130_932==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 1560;}

                        else if ( (LA130_932==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1561;}

                        else if ( (LA130_932==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1562;}

                        else if ( (LA130_932==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1563;}

                        else if ( (LA130_932==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1564;}

                        else if ( (LA130_932==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1565;}

                         
                        input.seek(index130_932);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA130_989 = input.LA(1);

                         
                        int index130_989 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA130_989==RPAREN) ) {s = 1566;}

                        else if ( (LA130_989==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1567;}

                        else if ( (LA130_989==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1568;}

                        else if ( (LA130_989==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1569;}

                        else if ( (LA130_989==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1570;}

                        else if ( (LA130_989==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1571;}

                        else if ( (LA130_989==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1572;}

                        else if ( (LA130_989==LT) && (synpred3_EsperEPL2Grammar())) {s = 1573;}

                        else if ( (LA130_989==GT) && (synpred3_EsperEPL2Grammar())) {s = 1574;}

                        else if ( (LA130_989==LE) && (synpred3_EsperEPL2Grammar())) {s = 1575;}

                        else if ( (LA130_989==GE) && (synpred3_EsperEPL2Grammar())) {s = 1576;}

                        else if ( (LA130_989==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1577;}

                        else if ( (LA130_989==IS) && (synpred3_EsperEPL2Grammar())) {s = 1578;}

                        else if ( (LA130_989==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1579;}

                        else if ( (LA130_989==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1580;}

                        else if ( (LA130_989==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1581;}

                        else if ( (LA130_989==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1582;}

                        else if ( (LA130_989==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1583;}

                        else if ( (LA130_989==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1584;}

                        else if ( (LA130_989==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1585;}

                        else if ( (LA130_989==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1586;}

                        else if ( (LA130_989==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1587;}

                        else if ( (LA130_989==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1588;}

                        else if ( (LA130_989==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1589;}

                        else if ( (LA130_989==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1590;}

                         
                        input.seek(index130_989);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA130_990 = input.LA(1);

                         
                        int index130_990 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA130_990==RPAREN) ) {s = 1591;}

                        else if ( (LA130_990==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1592;}

                        else if ( (LA130_990==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1593;}

                        else if ( (LA130_990==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1594;}

                        else if ( (LA130_990==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1595;}

                        else if ( (LA130_990==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1596;}

                        else if ( (LA130_990==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1597;}

                        else if ( (LA130_990==LT) && (synpred3_EsperEPL2Grammar())) {s = 1598;}

                        else if ( (LA130_990==GT) && (synpred3_EsperEPL2Grammar())) {s = 1599;}

                        else if ( (LA130_990==LE) && (synpred3_EsperEPL2Grammar())) {s = 1600;}

                        else if ( (LA130_990==GE) && (synpred3_EsperEPL2Grammar())) {s = 1601;}

                        else if ( (LA130_990==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1602;}

                        else if ( (LA130_990==IS) && (synpred3_EsperEPL2Grammar())) {s = 1603;}

                        else if ( (LA130_990==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1604;}

                        else if ( (LA130_990==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1605;}

                        else if ( (LA130_990==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1606;}

                        else if ( (LA130_990==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1607;}

                        else if ( (LA130_990==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1608;}

                        else if ( (LA130_990==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1609;}

                        else if ( (LA130_990==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1610;}

                        else if ( (LA130_990==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1611;}

                        else if ( (LA130_990==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1612;}

                        else if ( (LA130_990==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1613;}

                        else if ( (LA130_990==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1614;}

                        else if ( (LA130_990==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1615;}

                         
                        input.seek(index130_990);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA130_1047 = input.LA(1);

                         
                        int index130_1047 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA130_1047==RPAREN) ) {s = 1616;}

                        else if ( (LA130_1047==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1617;}

                        else if ( (LA130_1047==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1618;}

                        else if ( (LA130_1047==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1619;}

                        else if ( (LA130_1047==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1620;}

                        else if ( (LA130_1047==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1621;}

                        else if ( (LA130_1047==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1622;}

                        else if ( (LA130_1047==LT) && (synpred3_EsperEPL2Grammar())) {s = 1623;}

                        else if ( (LA130_1047==GT) && (synpred3_EsperEPL2Grammar())) {s = 1624;}

                        else if ( (LA130_1047==LE) && (synpred3_EsperEPL2Grammar())) {s = 1625;}

                        else if ( (LA130_1047==GE) && (synpred3_EsperEPL2Grammar())) {s = 1626;}

                        else if ( (LA130_1047==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1627;}

                        else if ( (LA130_1047==IS) && (synpred3_EsperEPL2Grammar())) {s = 1628;}

                        else if ( (LA130_1047==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1629;}

                        else if ( (LA130_1047==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1630;}

                        else if ( (LA130_1047==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1631;}

                        else if ( (LA130_1047==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1632;}

                        else if ( (LA130_1047==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1633;}

                        else if ( (LA130_1047==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1634;}

                        else if ( (LA130_1047==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1635;}

                        else if ( (LA130_1047==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1636;}

                        else if ( (LA130_1047==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1637;}

                        else if ( (LA130_1047==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1638;}

                        else if ( (LA130_1047==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1639;}

                        else if ( (LA130_1047==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1640;}

                         
                        input.seek(index130_1047);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA130_1048 = input.LA(1);

                         
                        int index130_1048 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA130_1048==RPAREN) ) {s = 1641;}

                        else if ( (LA130_1048==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1642;}

                        else if ( (LA130_1048==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1643;}

                        else if ( (LA130_1048==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1644;}

                        else if ( (LA130_1048==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1645;}

                        else if ( (LA130_1048==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1646;}

                        else if ( (LA130_1048==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1647;}

                        else if ( (LA130_1048==LT) && (synpred3_EsperEPL2Grammar())) {s = 1648;}

                        else if ( (LA130_1048==GT) && (synpred3_EsperEPL2Grammar())) {s = 1649;}

                        else if ( (LA130_1048==LE) && (synpred3_EsperEPL2Grammar())) {s = 1650;}

                        else if ( (LA130_1048==GE) && (synpred3_EsperEPL2Grammar())) {s = 1651;}

                        else if ( (LA130_1048==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1652;}

                        else if ( (LA130_1048==IS) && (synpred3_EsperEPL2Grammar())) {s = 1653;}

                        else if ( (LA130_1048==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1654;}

                        else if ( (LA130_1048==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1655;}

                        else if ( (LA130_1048==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1656;}

                        else if ( (LA130_1048==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1657;}

                        else if ( (LA130_1048==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1658;}

                        else if ( (LA130_1048==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1659;}

                        else if ( (LA130_1048==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1660;}

                        else if ( (LA130_1048==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1661;}

                        else if ( (LA130_1048==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1662;}

                        else if ( (LA130_1048==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1663;}

                        else if ( (LA130_1048==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1664;}

                        else if ( (LA130_1048==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1665;}

                         
                        input.seek(index130_1048);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA130_1105 = input.LA(1);

                         
                        int index130_1105 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA130_1105==RPAREN) ) {s = 1666;}

                        else if ( (LA130_1105==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1667;}

                        else if ( (LA130_1105==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1668;}

                        else if ( (LA130_1105==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1669;}

                        else if ( (LA130_1105==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1670;}

                        else if ( (LA130_1105==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1671;}

                        else if ( (LA130_1105==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1672;}

                        else if ( (LA130_1105==LT) && (synpred3_EsperEPL2Grammar())) {s = 1673;}

                        else if ( (LA130_1105==GT) && (synpred3_EsperEPL2Grammar())) {s = 1674;}

                        else if ( (LA130_1105==LE) && (synpred3_EsperEPL2Grammar())) {s = 1675;}

                        else if ( (LA130_1105==GE) && (synpred3_EsperEPL2Grammar())) {s = 1676;}

                        else if ( (LA130_1105==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1677;}

                        else if ( (LA130_1105==IS) && (synpred3_EsperEPL2Grammar())) {s = 1678;}

                        else if ( (LA130_1105==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1679;}

                        else if ( (LA130_1105==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1680;}

                        else if ( (LA130_1105==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1681;}

                        else if ( (LA130_1105==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1682;}

                        else if ( (LA130_1105==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1683;}

                        else if ( (LA130_1105==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1684;}

                        else if ( (LA130_1105==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1685;}

                        else if ( (LA130_1105==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1686;}

                        else if ( (LA130_1105==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1687;}

                        else if ( (LA130_1105==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1688;}

                        else if ( (LA130_1105==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1689;}

                        else if ( (LA130_1105==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1690;}

                         
                        input.seek(index130_1105);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA130_1106 = input.LA(1);

                         
                        int index130_1106 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA130_1106==RPAREN) ) {s = 1691;}

                        else if ( (LA130_1106==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1692;}

                        else if ( (LA130_1106==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1693;}

                        else if ( (LA130_1106==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1694;}

                        else if ( (LA130_1106==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1695;}

                        else if ( (LA130_1106==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1696;}

                        else if ( (LA130_1106==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1697;}

                        else if ( (LA130_1106==LT) && (synpred3_EsperEPL2Grammar())) {s = 1698;}

                        else if ( (LA130_1106==GT) && (synpred3_EsperEPL2Grammar())) {s = 1699;}

                        else if ( (LA130_1106==LE) && (synpred3_EsperEPL2Grammar())) {s = 1700;}

                        else if ( (LA130_1106==GE) && (synpred3_EsperEPL2Grammar())) {s = 1701;}

                        else if ( (LA130_1106==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1702;}

                        else if ( (LA130_1106==IS) && (synpred3_EsperEPL2Grammar())) {s = 1703;}

                        else if ( (LA130_1106==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1704;}

                        else if ( (LA130_1106==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1705;}

                        else if ( (LA130_1106==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1706;}

                        else if ( (LA130_1106==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1707;}

                        else if ( (LA130_1106==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1708;}

                        else if ( (LA130_1106==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1709;}

                        else if ( (LA130_1106==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1710;}

                        else if ( (LA130_1106==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1711;}

                        else if ( (LA130_1106==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1712;}

                        else if ( (LA130_1106==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1713;}

                        else if ( (LA130_1106==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1714;}

                        else if ( (LA130_1106==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1715;}

                         
                        input.seek(index130_1106);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA130_1161 = input.LA(1);

                         
                        int index130_1161 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA130_1161==RPAREN) ) {s = 14;}

                        else if ( (LA130_1161==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1717;}

                        else if ( (LA130_1161==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1718;}

                        else if ( (LA130_1161==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1719;}

                        else if ( (LA130_1161==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1720;}

                        else if ( (LA130_1161==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1721;}

                        else if ( (LA130_1161==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1722;}

                        else if ( (LA130_1161==LT) && (synpred3_EsperEPL2Grammar())) {s = 1723;}

                        else if ( (LA130_1161==GT) && (synpred3_EsperEPL2Grammar())) {s = 1724;}

                        else if ( (LA130_1161==LE) && (synpred3_EsperEPL2Grammar())) {s = 1725;}

                        else if ( (LA130_1161==GE) && (synpred3_EsperEPL2Grammar())) {s = 1726;}

                        else if ( (LA130_1161==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1727;}

                        else if ( (LA130_1161==IS) && (synpred3_EsperEPL2Grammar())) {s = 1728;}

                        else if ( (LA130_1161==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1729;}

                        else if ( (LA130_1161==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1730;}

                        else if ( (LA130_1161==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1731;}

                        else if ( (LA130_1161==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1732;}

                        else if ( (LA130_1161==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1733;}

                        else if ( (LA130_1161==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1734;}

                        else if ( (LA130_1161==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1735;}

                        else if ( (LA130_1161==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 1736;}

                        else if ( (LA130_1161==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1737;}

                        else if ( (LA130_1161==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1738;}

                        else if ( (LA130_1161==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1739;}

                        else if ( (LA130_1161==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1740;}

                        else if ( (LA130_1161==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1741;}

                         
                        input.seek(index130_1161);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA130_1162 = input.LA(1);

                         
                        int index130_1162 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA130_1162==RPAREN) ) {s = 14;}

                        else if ( (LA130_1162==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1743;}

                        else if ( (LA130_1162==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1744;}

                        else if ( (LA130_1162==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1745;}

                        else if ( (LA130_1162==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1746;}

                        else if ( (LA130_1162==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1747;}

                        else if ( (LA130_1162==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1748;}

                        else if ( (LA130_1162==LT) && (synpred3_EsperEPL2Grammar())) {s = 1749;}

                        else if ( (LA130_1162==GT) && (synpred3_EsperEPL2Grammar())) {s = 1750;}

                        else if ( (LA130_1162==LE) && (synpred3_EsperEPL2Grammar())) {s = 1751;}

                        else if ( (LA130_1162==GE) && (synpred3_EsperEPL2Grammar())) {s = 1752;}

                        else if ( (LA130_1162==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1753;}

                        else if ( (LA130_1162==IS) && (synpred3_EsperEPL2Grammar())) {s = 1754;}

                        else if ( (LA130_1162==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1755;}

                        else if ( (LA130_1162==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1756;}

                        else if ( (LA130_1162==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1757;}

                        else if ( (LA130_1162==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1758;}

                        else if ( (LA130_1162==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1759;}

                        else if ( (LA130_1162==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1760;}

                        else if ( (LA130_1162==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1761;}

                        else if ( (LA130_1162==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 1762;}

                        else if ( (LA130_1162==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1763;}

                        else if ( (LA130_1162==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1764;}

                        else if ( (LA130_1162==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1765;}

                        else if ( (LA130_1162==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1766;}

                        else if ( (LA130_1162==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1767;}

                         
                        input.seek(index130_1162);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA130_1220 = input.LA(1);

                         
                        int index130_1220 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA130_1220==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1768;}

                        else if ( (LA130_1220==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1769;}

                        else if ( (LA130_1220==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1770;}

                        else if ( (LA130_1220==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1771;}

                        else if ( (LA130_1220==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1772;}

                        else if ( (LA130_1220==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1773;}

                        else if ( (LA130_1220==LT) && (synpred3_EsperEPL2Grammar())) {s = 1774;}

                        else if ( (LA130_1220==GT) && (synpred3_EsperEPL2Grammar())) {s = 1775;}

                        else if ( (LA130_1220==LE) && (synpred3_EsperEPL2Grammar())) {s = 1776;}

                        else if ( (LA130_1220==GE) && (synpred3_EsperEPL2Grammar())) {s = 1777;}

                        else if ( (LA130_1220==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1778;}

                        else if ( (LA130_1220==IS) && (synpred3_EsperEPL2Grammar())) {s = 1779;}

                        else if ( (LA130_1220==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1780;}

                        else if ( (LA130_1220==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1781;}

                        else if ( (LA130_1220==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1782;}

                        else if ( (LA130_1220==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1783;}

                        else if ( (LA130_1220==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1784;}

                        else if ( (LA130_1220==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1785;}

                        else if ( (LA130_1220==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1786;}

                        else if ( (LA130_1220==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 1787;}

                        else if ( (LA130_1220==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1788;}

                        else if ( (LA130_1220==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1789;}

                        else if ( (LA130_1220==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1790;}

                        else if ( (LA130_1220==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1791;}

                        else if ( (LA130_1220==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1792;}

                        else if ( (LA130_1220==RPAREN) ) {s = 14;}

                         
                        input.seek(index130_1220);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA130_1221 = input.LA(1);

                         
                        int index130_1221 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA130_1221==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1794;}

                        else if ( (LA130_1221==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1795;}

                        else if ( (LA130_1221==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1796;}

                        else if ( (LA130_1221==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1797;}

                        else if ( (LA130_1221==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1798;}

                        else if ( (LA130_1221==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1799;}

                        else if ( (LA130_1221==LT) && (synpred3_EsperEPL2Grammar())) {s = 1800;}

                        else if ( (LA130_1221==GT) && (synpred3_EsperEPL2Grammar())) {s = 1801;}

                        else if ( (LA130_1221==LE) && (synpred3_EsperEPL2Grammar())) {s = 1802;}

                        else if ( (LA130_1221==GE) && (synpred3_EsperEPL2Grammar())) {s = 1803;}

                        else if ( (LA130_1221==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1804;}

                        else if ( (LA130_1221==IS) && (synpred3_EsperEPL2Grammar())) {s = 1805;}

                        else if ( (LA130_1221==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1806;}

                        else if ( (LA130_1221==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1807;}

                        else if ( (LA130_1221==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1808;}

                        else if ( (LA130_1221==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1809;}

                        else if ( (LA130_1221==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1810;}

                        else if ( (LA130_1221==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1811;}

                        else if ( (LA130_1221==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1812;}

                        else if ( (LA130_1221==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 1813;}

                        else if ( (LA130_1221==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1814;}

                        else if ( (LA130_1221==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1815;}

                        else if ( (LA130_1221==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1816;}

                        else if ( (LA130_1221==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1817;}

                        else if ( (LA130_1221==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1818;}

                        else if ( (LA130_1221==RPAREN) ) {s = 14;}

                         
                        input.seek(index130_1221);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA130_1276 = input.LA(1);

                         
                        int index130_1276 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA130_1276==RPAREN) ) {s = 14;}

                        else if ( (LA130_1276==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1821;}

                        else if ( (LA130_1276==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1822;}

                        else if ( (LA130_1276==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1823;}

                        else if ( (LA130_1276==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1824;}

                        else if ( (LA130_1276==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1825;}

                        else if ( (LA130_1276==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1826;}

                        else if ( (LA130_1276==LT) && (synpred3_EsperEPL2Grammar())) {s = 1827;}

                        else if ( (LA130_1276==GT) && (synpred3_EsperEPL2Grammar())) {s = 1828;}

                        else if ( (LA130_1276==LE) && (synpred3_EsperEPL2Grammar())) {s = 1829;}

                        else if ( (LA130_1276==GE) && (synpred3_EsperEPL2Grammar())) {s = 1830;}

                        else if ( (LA130_1276==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1831;}

                        else if ( (LA130_1276==IS) && (synpred3_EsperEPL2Grammar())) {s = 1832;}

                        else if ( (LA130_1276==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1833;}

                        else if ( (LA130_1276==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1834;}

                        else if ( (LA130_1276==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1835;}

                        else if ( (LA130_1276==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1836;}

                        else if ( (LA130_1276==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1837;}

                        else if ( (LA130_1276==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1838;}

                        else if ( (LA130_1276==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1839;}

                        else if ( (LA130_1276==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 1840;}

                        else if ( (LA130_1276==AS) && (synpred3_EsperEPL2Grammar())) {s = 1841;}

                        else if ( (LA130_1276==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1842;}

                        else if ( (LA130_1276==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1843;}

                        else if ( (LA130_1276==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1844;}

                        else if ( (LA130_1276==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1845;}

                        else if ( (LA130_1276==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1846;}

                         
                        input.seek(index130_1276);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA130_1277 = input.LA(1);

                         
                        int index130_1277 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA130_1277==RPAREN) ) {s = 14;}

                        else if ( (LA130_1277==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1848;}

                        else if ( (LA130_1277==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1849;}

                        else if ( (LA130_1277==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1850;}

                        else if ( (LA130_1277==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1851;}

                        else if ( (LA130_1277==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1852;}

                        else if ( (LA130_1277==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1853;}

                        else if ( (LA130_1277==LT) && (synpred3_EsperEPL2Grammar())) {s = 1854;}

                        else if ( (LA130_1277==GT) && (synpred3_EsperEPL2Grammar())) {s = 1855;}

                        else if ( (LA130_1277==LE) && (synpred3_EsperEPL2Grammar())) {s = 1856;}

                        else if ( (LA130_1277==GE) && (synpred3_EsperEPL2Grammar())) {s = 1857;}

                        else if ( (LA130_1277==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1858;}

                        else if ( (LA130_1277==IS) && (synpred3_EsperEPL2Grammar())) {s = 1859;}

                        else if ( (LA130_1277==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1860;}

                        else if ( (LA130_1277==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1861;}

                        else if ( (LA130_1277==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1862;}

                        else if ( (LA130_1277==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1863;}

                        else if ( (LA130_1277==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1864;}

                        else if ( (LA130_1277==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1865;}

                        else if ( (LA130_1277==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1866;}

                        else if ( (LA130_1277==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 1867;}

                        else if ( (LA130_1277==AS) && (synpred3_EsperEPL2Grammar())) {s = 1868;}

                        else if ( (LA130_1277==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1869;}

                        else if ( (LA130_1277==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1870;}

                        else if ( (LA130_1277==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1871;}

                        else if ( (LA130_1277==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1872;}

                        else if ( (LA130_1277==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1873;}

                         
                        input.seek(index130_1277);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA130_1364 = input.LA(1);

                         
                        int index130_1364 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 1873;}

                         
                        input.seek(index130_1364);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA130_1408 = input.LA(1);

                         
                        int index130_1408 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 1873;}

                         
                        input.seek(index130_1408);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA130_1414 = input.LA(1);

                         
                        int index130_1414 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 1873;}

                         
                        input.seek(index130_1414);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA130_1439 = input.LA(1);

                         
                        int index130_1439 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 1873;}

                         
                        input.seek(index130_1439);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA130_1464 = input.LA(1);

                         
                        int index130_1464 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 1873;}

                         
                        input.seek(index130_1464);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA130_1508 = input.LA(1);

                         
                        int index130_1508 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 1873;}

                         
                        input.seek(index130_1508);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA130_1566 = input.LA(1);

                         
                        int index130_1566 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 1873;}

                         
                        input.seek(index130_1566);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA130_1591 = input.LA(1);

                         
                        int index130_1591 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 1873;}

                         
                        input.seek(index130_1591);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA130_1616 = input.LA(1);

                         
                        int index130_1616 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 1873;}

                         
                        input.seek(index130_1616);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA130_1641 = input.LA(1);

                         
                        int index130_1641 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 1873;}

                         
                        input.seek(index130_1641);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA130_1666 = input.LA(1);

                         
                        int index130_1666 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 1873;}

                         
                        input.seek(index130_1666);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA130_1691 = input.LA(1);

                         
                        int index130_1691 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 1873;}

                         
                        input.seek(index130_1691);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 130, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA153_eotS =
        "\u0448\uffff";
    static final String DFA153_eofS =
        "\1\uffff\1\104\1\172\6\uffff\1\u00b0\1\u00e6\u012f\uffff\1\u024d"+
        "\1\u0282\1\u02b8\1\u02ee\42\uffff\1\u0325\1\u035a\1\u0390\1\u03c6"+
        "\u02e4\uffff";
    static final String DFA153_minS =
        "\1\5\2\6\6\uffff\2\6\34\uffff\2\5\70\uffff\1\5\61\uffff\1\5\67"+
        "\uffff\1\5\63\uffff\2\6\71\uffff\4\6\42\uffff\4\6\42\uffff\2\6\102"+
        "\uffff\2\6\104\uffff\1\0\31\uffff\1\0\5\uffff\2\0\64\uffff\1\0\67"+
        "\uffff\1\0\150\uffff\3\0\64\uffff\1\0\67\uffff\1\0\150\uffff\1\0"+
        "\24\uffff\1\0\31\uffff\1\0\31\uffff\1\0\5\uffff\1\0\31\uffff";
    static final String DFA153_maxS =
        "\1\u0103\2\u0102\6\uffff\2\u0102\34\uffff\1\u0105\1\u0103\70\uffff"+
        "\1\u0103\61\uffff\1\u0105\67\uffff\1\u0105\63\uffff\2\u00fc\71\uffff"+
        "\4\u0102\42\uffff\4\u0102\42\uffff\2\u00fc\102\uffff\2\u00fc\104"+
        "\uffff\1\0\31\uffff\1\0\5\uffff\2\0\64\uffff\1\0\67\uffff\1\0\150"+
        "\uffff\3\0\64\uffff\1\0\67\uffff\1\0\150\uffff\1\0\24\uffff\1\0"+
        "\31\uffff\1\0\31\uffff\1\0\5\uffff\1\0\31\uffff";
    static final String DFA153_acceptS =
        "\3\uffff\6\1\2\uffff\34\1\2\uffff\70\1\1\uffff\61\1\1\uffff\67"+
        "\1\1\uffff\63\1\2\uffff\1\2\74\uffff\42\1\4\uffff\42\1\u00ac\uffff"+
        "\64\1\1\uffff\67\1\1\uffff\150\1\3\uffff\64\1\1\uffff\67\1\1\uffff"+
        "\150\1\151\uffff";
    static final String DFA153_specialS =
        "\1\0\1\1\1\2\6\uffff\1\3\1\4\35\uffff\1\5\70\uffff\1\6\u00d8\uffff"+
        "\1\7\1\10\1\11\1\12\42\uffff\1\13\1\14\1\15\1\16\u00ac\uffff\1\17"+
        "\31\uffff\1\20\5\uffff\1\21\1\22\64\uffff\1\23\67\uffff\1\24\150"+
        "\uffff\1\25\1\26\1\27\64\uffff\1\30\67\uffff\1\31\150\uffff\1\32"+
        "\24\uffff\1\33\31\uffff\1\34\31\uffff\1\35\5\uffff\1\36\31\uffff}>";
    static final String[] DFA153_transitionS = {
            "\1\41\4\uffff\1\5\3\uffff\1\6\3\uffff\1\7\1\10\1\11\1\12\1"+
            "\13\1\14\1\15\1\16\1\4\10\uffff\1\44\1\uffff\1\46\1\42\1\43"+
            "\1\45\12\uffff\1\17\1\20\1\21\10\uffff\1\22\1\23\1\24\1\26\1"+
            "\27\1\30\1\31\1\32\1\uffff\1\33\1\34\1\35\1\36\2\uffff\1\37"+
            "\1\uffff\1\40\1\25\1\3\u0092\uffff\1\1\36\uffff\1\2",
            "\1\130\1\131\1\132\1\133\1\134\1\76\1\75\1\127\2\uffff\1\112"+
            "\1\110\14\uffff\1\116\1\120\1\115\1\117\1\111\7\uffff\1\67\1"+
            "\uffff\1\77\1\100\4\uffff\1\101\3\uffff\1\105\1\uffff\1\102"+
            "\1\113\1\114\35\uffff\1\126\1\125\1\124\6\uffff\1\103\u0081"+
            "\uffff\1\107\1\uffff\1\66\1\50\1\47\1\106\1\54\1\52\1\122\1"+
            "\121\2\uffff\1\72\1\73\1\74\1\70\1\71\1\62\1\63\1\64\1\65\1"+
            "\61\1\57\1\60\1\55\1\56\1\uffff\1\123\2\uffff\1\53\1\51",
            "\1\u008e\1\u008f\1\u0090\1\u0091\1\u0092\1\164\1\163\1\u008d"+
            "\2\uffff\1\u0080\1\176\14\uffff\1\u0084\1\u0086\1\u0083\1\u0085"+
            "\1\177\7\uffff\1\155\1\uffff\1\165\1\166\4\uffff\1\167\3\uffff"+
            "\1\173\1\uffff\1\170\1\u0081\1\u0082\35\uffff\1\u008c\1\u008b"+
            "\1\u008a\6\uffff\1\171\u0081\uffff\1\175\1\uffff\1\154\1\141"+
            "\1\137\1\174\1\142\1\136\1\u0088\1\u0087\2\uffff\1\160\1\161"+
            "\1\162\1\156\1\157\1\150\1\151\1\152\1\153\1\147\1\145\1\146"+
            "\1\143\1\144\1\uffff\1\u0089\2\uffff\1\140\1\135",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u00c4\1\u00c5\1\u00c6\1\u00c7\1\u00c8\1\u00aa\1\u00a9\1"+
            "\u00c3\2\uffff\1\u00b6\1\u00b4\14\uffff\1\u00ba\1\u00bc\1\u00b9"+
            "\1\u00bb\1\u00b5\7\uffff\1\u00a3\1\uffff\1\u00ab\1\u00ac\4\uffff"+
            "\1\u00ad\3\uffff\1\u00b1\1\uffff\1\u00ae\1\u00b7\1\u00b8\35"+
            "\uffff\1\u00c2\1\u00c1\1\u00c0\6\uffff\1\u00af\u0081\uffff\1"+
            "\u00b3\1\uffff\1\u00a2\1\u0097\1\u0093\1\u00b2\1\u0098\1\u0095"+
            "\1\u00be\1\u00bd\2\uffff\1\u00a6\1\u00a7\1\u00a8\1\u00a4\1\u00a5"+
            "\1\u009e\1\u009f\1\u00a0\1\u00a1\1\u009d\1\u009b\1\u009c\1\u0099"+
            "\1\u009a\1\uffff\1\u00bf\2\uffff\1\u0096\1\u0094",
            "\1\u00fa\1\u00fb\1\u00fc\1\u00fd\1\u00fe\1\u00e0\1\u00df\1"+
            "\u00f9\2\uffff\1\u00ec\1\u00ea\14\uffff\1\u00f0\1\u00f2\1\u00ef"+
            "\1\u00f1\1\u00eb\7\uffff\1\u00d9\1\uffff\1\u00e1\1\u00e2\4\uffff"+
            "\1\u00e3\3\uffff\1\u00e7\1\uffff\1\u00e4\1\u00ed\1\u00ee\35"+
            "\uffff\1\u00f8\1\u00f7\1\u00f6\6\uffff\1\u00e5\u0081\uffff\1"+
            "\u00e9\1\uffff\1\u00d8\1\u00cd\1\u00cb\1\u00e8\1\u00ce\1\u00ca"+
            "\1\u00f4\1\u00f3\2\uffff\1\u00dc\1\u00dd\1\u00de\1\u00da\1\u00db"+
            "\1\u00d4\1\u00d5\1\u00d6\1\u00d7\1\u00d3\1\u00d1\1\u00d2\1\u00cf"+
            "\1\u00d0\1\uffff\1\u00f5\2\uffff\1\u00cc\1\u00c9",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0101\4\uffff\1\u0101\2\uffff\2\u0101\3\uffff\11\u0101"+
            "\1\uffff\1\u0101\6\uffff\1\u0101\1\uffff\4\u0101\5\uffff\2\u0101"+
            "\3\uffff\3\u0101\10\uffff\16\u0101\1\uffff\1\u0101\1\uffff\3"+
            "\u0101\14\uffff\3\u0101\u0080\uffff\1\u0101\2\uffff\1\u0101"+
            "\2\uffff\2\u0101\4\uffff\1\u00ff\1\u0100\12\uffff\2\u0101\2"+
            "\uffff\1\u0101\1\uffff\1\u0101\1\uffff\1\u0101\1\uffff\3\u0101",
            "\1\u015a\4\uffff\1\u0140\3\uffff\1\u0141\3\uffff\1\u0142\1"+
            "\u0143\1\u013b\1\u013c\1\u0144\1\u0145\1\u0146\1\u0147\1\u013f"+
            "\10\uffff\1\u015d\1\uffff\1\u015f\1\u015b\1\u015c\1\u015e\12"+
            "\uffff\1\u0148\1\u0149\1\u014a\10\uffff\1\u014b\1\u014c\1\u014d"+
            "\1\u014f\1\u0150\1\u0151\1\u0152\1\u0153\1\uffff\1\u0154\1\u0155"+
            "\1\u0156\1\u0157\2\uffff\1\u0158\1\uffff\1\u0159\1\u014e\1\u013e"+
            "\u0092\uffff\1\u013a\36\uffff\1\u013d",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0180\4\uffff\1\u0166\3\uffff\1\u0167\3\uffff\1\u0168\1"+
            "\u0169\1\u0161\1\u0162\1\u016a\1\u016b\1\u016c\1\u016d\1\u0165"+
            "\10\uffff\1\u0183\1\uffff\1\u0185\1\u0181\1\u0182\1\u0184\12"+
            "\uffff\1\u016e\1\u016f\1\u0170\10\uffff\1\u0171\1\u0172\1\u0173"+
            "\1\u0175\1\u0176\1\u0177\1\u0178\1\u0179\1\uffff\1\u017a\1\u017b"+
            "\1\u017c\1\u017d\2\uffff\1\u017e\1\uffff\1\u017f\1\u0174\1\u0164"+
            "\u0092\uffff\1\u0160\36\uffff\1\u0163",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0101\4\uffff\1\u0101\2\uffff\2\u0101\3\uffff\11\u0101"+
            "\1\uffff\1\u0101\6\uffff\1\u0101\1\uffff\4\u0101\5\uffff\2\u0101"+
            "\3\uffff\3\u0101\10\uffff\16\u0101\1\uffff\1\u0101\1\uffff\3"+
            "\u0101\14\uffff\3\u0101\u0080\uffff\1\u0101\2\uffff\1\u0101"+
            "\2\uffff\2\u0101\4\uffff\1\u0186\1\u0187\12\uffff\2\u0101\2"+
            "\uffff\1\u0101\1\uffff\1\u0101\1\uffff\1\u0101\1\uffff\3\u0101",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0101\4\uffff\1\u0101\2\uffff\2\u0101\3\uffff\11\u0101"+
            "\1\uffff\1\u0101\6\uffff\1\u0101\1\uffff\4\u0101\5\uffff\2\u0101"+
            "\3\uffff\3\u0101\10\uffff\16\u0101\1\uffff\1\u0101\1\uffff\3"+
            "\u0101\14\uffff\3\u0101\u0080\uffff\1\u0101\2\uffff\1\u0101"+
            "\2\uffff\2\u0101\4\uffff\1\u01ca\1\u01cb\12\uffff\2\u0101\2"+
            "\uffff\1\u0101\1\uffff\1\u0101\1\uffff\1\u0101\1\uffff\3\u0101",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\4\u0101\1\uffff\3\u0101\34\uffff\1\u0101\u00b8\uffff\1\u0101"+
            "\1\uffff\1\u0101\2\uffff\1\u0210\1\u0101\5\uffff\16\u0101",
            "\4\u0101\1\uffff\3\u0101\34\uffff\1\u0101\u00b8\uffff\1\u0101"+
            "\1\uffff\1\u0101\2\uffff\1\u022a\1\u0101\5\uffff\16\u0101",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0261\1\u0262\1\u0263\1\u0264\1\u0265\1\u0247\1\u0246\1"+
            "\u0260\2\uffff\1\u0253\1\u0251\14\uffff\1\u0257\1\u0259\1\u0256"+
            "\1\u0258\1\u0252\7\uffff\1\u0240\1\uffff\1\u0248\1\u0249\4\uffff"+
            "\1\u024a\3\uffff\1\u024e\1\uffff\1\u024b\1\u0254\1\u0255\35"+
            "\uffff\1\u025f\1\u025e\1\u025d\6\uffff\1\u024c\u0081\uffff\1"+
            "\u0250\1\uffff\1\u023f\1\u0231\1\u0230\1\u024f\1\u0235\1\u0233"+
            "\1\u025b\1\u025a\2\uffff\1\u0243\1\u0244\1\u0245\1\u0241\1\u0242"+
            "\1\u023b\1\u023c\1\u023d\1\u023e\1\u023a\1\u0238\1\u0239\1\u0236"+
            "\1\u0237\1\uffff\1\u025c\2\uffff\1\u0234\1\u0232",
            "\1\u0296\1\u0297\1\u0298\1\u0299\1\u029a\1\u027c\1\u027b\1"+
            "\u0295\2\uffff\1\u0288\1\u0286\14\uffff\1\u028c\1\u028e\1\u028b"+
            "\1\u028d\1\u0287\7\uffff\1\u0275\1\uffff\1\u027d\1\u027e\4\uffff"+
            "\1\u027f\3\uffff\1\u0283\1\uffff\1\u0280\1\u0289\1\u028a\35"+
            "\uffff\1\u0294\1\u0293\1\u0292\6\uffff\1\u0281\u0081\uffff\1"+
            "\u0285\1\uffff\1\u0274\1\u029b\1\u0266\1\u0284\1\u026a\1\u0268"+
            "\1\u0290\1\u028f\2\uffff\1\u0278\1\u0279\1\u027a\1\u0276\1\u0277"+
            "\1\u0270\1\u0271\1\u0272\1\u0273\1\u026f\1\u026d\1\u026e\1\u026b"+
            "\1\u026c\1\uffff\1\u0291\2\uffff\1\u0269\1\u0267",
            "\1\u02cc\1\u02cd\1\u02ce\1\u02cf\1\u02d0\1\u02b2\1\u02b1\1"+
            "\u02cb\2\uffff\1\u02be\1\u02bc\14\uffff\1\u02c2\1\u02c4\1\u02c1"+
            "\1\u02c3\1\u02bd\7\uffff\1\u02ab\1\uffff\1\u02b3\1\u02b4\4\uffff"+
            "\1\u02b5\3\uffff\1\u02b9\1\uffff\1\u02b6\1\u02bf\1\u02c0\35"+
            "\uffff\1\u02ca\1\u02c9\1\u02c8\6\uffff\1\u02b7\u0081\uffff\1"+
            "\u02bb\1\uffff\1\u02aa\1\u02d1\1\u029e\1\u02ba\1\u02a0\1\u029d"+
            "\1\u02c6\1\u02c5\2\uffff\1\u02ae\1\u02af\1\u02b0\1\u02ac\1\u02ad"+
            "\1\u02a6\1\u02a7\1\u02a8\1\u02a9\1\u02a5\1\u02a3\1\u02a4\1\u02a1"+
            "\1\u02a2\1\uffff\1\u02c7\2\uffff\1\u029f\1\u029c",
            "\1\u0302\1\u0303\1\u0304\1\u0305\1\u0306\1\u02e8\1\u02e7\1"+
            "\u0301\2\uffff\1\u02f4\1\u02f2\14\uffff\1\u02f8\1\u02fa\1\u02f7"+
            "\1\u02f9\1\u02f3\7\uffff\1\u02e1\1\uffff\1\u02e9\1\u02ea\4\uffff"+
            "\1\u02eb\3\uffff\1\u02ef\1\uffff\1\u02ec\1\u02f5\1\u02f6\35"+
            "\uffff\1\u0300\1\u02ff\1\u02fe\6\uffff\1\u02ed\u0081\uffff\1"+
            "\u02f1\1\uffff\1\u02e0\1\u0307\1\u02d4\1\u02f0\1\u02d6\1\u02d3"+
            "\1\u02fc\1\u02fb\2\uffff\1\u02e4\1\u02e5\1\u02e6\1\u02e2\1\u02e3"+
            "\1\u02dc\1\u02dd\1\u02de\1\u02df\1\u02db\1\u02d9\1\u02da\1\u02d7"+
            "\1\u02d8\1\uffff\1\u02fd\2\uffff\1\u02d5\1\u02d2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0339\1\u033a\1\u033b\1\u033c\1\u033d\1\u031f\1\u031e\1"+
            "\u0338\2\uffff\1\u032b\1\u0329\14\uffff\1\u032f\1\u0331\1\u032e"+
            "\1\u0330\1\u032a\7\uffff\1\u0318\1\uffff\1\u0320\1\u0321\4\uffff"+
            "\1\u0322\3\uffff\1\u0326\1\uffff\1\u0323\1\u032c\1\u032d\35"+
            "\uffff\1\u0337\1\u0336\1\u0335\6\uffff\1\u0324\u0081\uffff\1"+
            "\u0328\1\uffff\1\u0317\1\u0309\1\u0308\1\u0327\1\u030d\1\u030b"+
            "\1\u0333\1\u0332\2\uffff\1\u031b\1\u031c\1\u031d\1\u0319\1\u031a"+
            "\1\u0313\1\u0314\1\u0315\1\u0316\1\u0312\1\u0310\1\u0311\1\u030e"+
            "\1\u030f\1\uffff\1\u0334\2\uffff\1\u030c\1\u030a",
            "\1\u036e\1\u036f\1\u0370\1\u0371\1\u0372\1\u0354\1\u0353\1"+
            "\u036d\2\uffff\1\u0360\1\u035e\14\uffff\1\u0364\1\u0366\1\u0363"+
            "\1\u0365\1\u035f\7\uffff\1\u034d\1\uffff\1\u0355\1\u0356\4\uffff"+
            "\1\u0357\3\uffff\1\u035b\1\uffff\1\u0358\1\u0361\1\u0362\35"+
            "\uffff\1\u036c\1\u036b\1\u036a\6\uffff\1\u0359\u0081\uffff\1"+
            "\u035d\1\uffff\1\u034c\1\u0373\1\u033e\1\u035c\1\u0342\1\u0340"+
            "\1\u0368\1\u0367\2\uffff\1\u0350\1\u0351\1\u0352\1\u034e\1\u034f"+
            "\1\u0348\1\u0349\1\u034a\1\u034b\1\u0347\1\u0345\1\u0346\1\u0343"+
            "\1\u0344\1\uffff\1\u0369\2\uffff\1\u0341\1\u033f",
            "\1\u03a4\1\u03a5\1\u03a6\1\u03a7\1\u03a8\1\u038a\1\u0389\1"+
            "\u03a3\2\uffff\1\u0396\1\u0394\14\uffff\1\u039a\1\u039c\1\u0399"+
            "\1\u039b\1\u0395\7\uffff\1\u0383\1\uffff\1\u038b\1\u038c\4\uffff"+
            "\1\u038d\3\uffff\1\u0391\1\uffff\1\u038e\1\u0397\1\u0398\35"+
            "\uffff\1\u03a2\1\u03a1\1\u03a0\6\uffff\1\u038f\u0081\uffff\1"+
            "\u0393\1\uffff\1\u0382\1\u03a9\1\u0376\1\u0392\1\u0378\1\u0375"+
            "\1\u039e\1\u039d\2\uffff\1\u0386\1\u0387\1\u0388\1\u0384\1\u0385"+
            "\1\u037e\1\u037f\1\u0380\1\u0381\1\u037d\1\u037b\1\u037c\1\u0379"+
            "\1\u037a\1\uffff\1\u039f\2\uffff\1\u0377\1\u0374",
            "\1\u03da\1\u03db\1\u03dc\1\u03dd\1\u03de\1\u03c0\1\u03bf\1"+
            "\u03d9\2\uffff\1\u03cc\1\u03ca\14\uffff\1\u03d0\1\u03d2\1\u03cf"+
            "\1\u03d1\1\u03cb\7\uffff\1\u03b9\1\uffff\1\u03c1\1\u03c2\4\uffff"+
            "\1\u03c3\3\uffff\1\u03c7\1\uffff\1\u03c4\1\u03cd\1\u03ce\35"+
            "\uffff\1\u03d8\1\u03d7\1\u03d6\6\uffff\1\u03c5\u0081\uffff\1"+
            "\u03c9\1\uffff\1\u03b8\1\u03df\1\u03ac\1\u03c8\1\u03ae\1\u03ab"+
            "\1\u03d4\1\u03d3\2\uffff\1\u03bc\1\u03bd\1\u03be\1\u03ba\1\u03bb"+
            "\1\u03b4\1\u03b5\1\u03b6\1\u03b7\1\u03b3\1\u03b1\1\u03b2\1\u03af"+
            "\1\u03b0\1\uffff\1\u03d5\2\uffff\1\u03ad\1\u03aa",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\4\u0101\1\uffff\3\u0101\34\uffff\1\u0101\u00b8\uffff\1\u0101"+
            "\1\uffff\1\u0101\2\uffff\1\u03f4\1\u0101\5\uffff\16\u0101",
            "\4\u0101\1\uffff\3\u0101\34\uffff\1\u0101\u00b8\uffff\1\u0101"+
            "\1\uffff\1\u0101\2\uffff\1\u040e\1\u0101\5\uffff\16\u0101",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\4\u0101\1\uffff\3\u0101\34\uffff\1\u0101\u00b8\uffff\1\u0101"+
            "\1\uffff\1\u0101\2\uffff\1\u0428\1\u0101\5\uffff\16\u0101",
            "\4\u0101\1\uffff\3\u0101\34\uffff\1\u0101\u00b8\uffff\1\u0101"+
            "\1\uffff\1\u0101\2\uffff\1\u042e\1\u0101\5\uffff\16\u0101",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA153_eot = DFA.unpackEncodedString(DFA153_eotS);
    static final short[] DFA153_eof = DFA.unpackEncodedString(DFA153_eofS);
    static final char[] DFA153_min = DFA.unpackEncodedStringToUnsignedChars(DFA153_minS);
    static final char[] DFA153_max = DFA.unpackEncodedStringToUnsignedChars(DFA153_maxS);
    static final short[] DFA153_accept = DFA.unpackEncodedString(DFA153_acceptS);
    static final short[] DFA153_special = DFA.unpackEncodedString(DFA153_specialS);
    static final short[][] DFA153_transition;

    static {
        int numStates = DFA153_transitionS.length;
        DFA153_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA153_transition[i] = DFA.unpackEncodedString(DFA153_transitionS[i]);
        }
    }

    class DFA153 extends DFA {

        public DFA153(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 153;
            this.eot = DFA153_eot;
            this.eof = DFA153_eof;
            this.min = DFA153_min;
            this.max = DFA153_max;
            this.accept = DFA153_accept;
            this.special = DFA153_special;
            this.transition = DFA153_transition;
        }
        public String getDescription() {
            return "1057:1: eventPropertyOrLibFunction : ( ( eventProperty )=> eventProperty | libFunction );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA153_0 = input.LA(1);

                         
                        int index153_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA153_0==IDENT) ) {s = 1;}

                        else if ( (LA153_0==TICKED_STRING_LITERAL) ) {s = 2;}

                        else if ( (LA153_0==AT) && (synpred4_EsperEPL2Grammar())) {s = 3;}

                        else if ( (LA153_0==COUNT) && (synpred4_EsperEPL2Grammar())) {s = 4;}

                        else if ( (LA153_0==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 5;}

                        else if ( (LA153_0==EVERY_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 6;}

                        else if ( (LA153_0==SUM) && (synpred4_EsperEPL2Grammar())) {s = 7;}

                        else if ( (LA153_0==AVG) && (synpred4_EsperEPL2Grammar())) {s = 8;}

                        else if ( (LA153_0==MAX) ) {s = 9;}

                        else if ( (LA153_0==MIN) ) {s = 10;}

                        else if ( (LA153_0==COALESCE) && (synpred4_EsperEPL2Grammar())) {s = 11;}

                        else if ( (LA153_0==MEDIAN) && (synpred4_EsperEPL2Grammar())) {s = 12;}

                        else if ( (LA153_0==STDDEV) && (synpred4_EsperEPL2Grammar())) {s = 13;}

                        else if ( (LA153_0==AVEDEV) && (synpred4_EsperEPL2Grammar())) {s = 14;}

                        else if ( (LA153_0==EVENTS) && (synpred4_EsperEPL2Grammar())) {s = 15;}

                        else if ( (LA153_0==FIRST) && (synpred4_EsperEPL2Grammar())) {s = 16;}

                        else if ( (LA153_0==LAST) && (synpred4_EsperEPL2Grammar())) {s = 17;}

                        else if ( (LA153_0==UNIDIRECTIONAL) && (synpred4_EsperEPL2Grammar())) {s = 18;}

                        else if ( (LA153_0==RETAINUNION) && (synpred4_EsperEPL2Grammar())) {s = 19;}

                        else if ( (LA153_0==RETAININTERSECTION) && (synpred4_EsperEPL2Grammar())) {s = 20;}

                        else if ( (LA153_0==UNTIL) && (synpred4_EsperEPL2Grammar())) {s = 21;}

                        else if ( (LA153_0==PATTERN) && (synpred4_EsperEPL2Grammar())) {s = 22;}

                        else if ( (LA153_0==SQL) && (synpred4_EsperEPL2Grammar())) {s = 23;}

                        else if ( (LA153_0==METADATASQL) && (synpred4_EsperEPL2Grammar())) {s = 24;}

                        else if ( (LA153_0==PREVIOUS) && (synpred4_EsperEPL2Grammar())) {s = 25;}

                        else if ( (LA153_0==PRIOR) && (synpred4_EsperEPL2Grammar())) {s = 26;}

                        else if ( (LA153_0==WEEKDAY) && (synpred4_EsperEPL2Grammar())) {s = 27;}

                        else if ( (LA153_0==LW) && (synpred4_EsperEPL2Grammar())) {s = 28;}

                        else if ( (LA153_0==INSTANCEOF) && (synpred4_EsperEPL2Grammar())) {s = 29;}

                        else if ( (LA153_0==CAST) && (synpred4_EsperEPL2Grammar())) {s = 30;}

                        else if ( (LA153_0==SNAPSHOT) && (synpred4_EsperEPL2Grammar())) {s = 31;}

                        else if ( (LA153_0==VARIABLE) && (synpred4_EsperEPL2Grammar())) {s = 32;}

                        else if ( (LA153_0==WINDOW) && (synpred4_EsperEPL2Grammar())) {s = 33;}

                        else if ( (LA153_0==LEFT) && (synpred4_EsperEPL2Grammar())) {s = 34;}

                        else if ( (LA153_0==RIGHT) && (synpred4_EsperEPL2Grammar())) {s = 35;}

                        else if ( (LA153_0==OUTER) && (synpred4_EsperEPL2Grammar())) {s = 36;}

                        else if ( (LA153_0==FULL) && (synpred4_EsperEPL2Grammar())) {s = 37;}

                        else if ( (LA153_0==JOIN) && (synpred4_EsperEPL2Grammar())) {s = 38;}

                         
                        input.seek(index153_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA153_1 = input.LA(1);

                         
                        int index153_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA153_1==LPAREN) ) {s = 39;}

                        else if ( (LA153_1==DOT) ) {s = 40;}

                        else if ( (LA153_1==ESCAPECHAR) && (synpred4_EsperEPL2Grammar())) {s = 41;}

                        else if ( (LA153_1==LBRACK) && (synpred4_EsperEPL2Grammar())) {s = 42;}

                        else if ( (LA153_1==QUESTION) && (synpred4_EsperEPL2Grammar())) {s = 43;}

                        else if ( (LA153_1==STAR) && (synpred4_EsperEPL2Grammar())) {s = 44;}

                        else if ( (LA153_1==DIV) && (synpred4_EsperEPL2Grammar())) {s = 45;}

                        else if ( (LA153_1==MOD) && (synpred4_EsperEPL2Grammar())) {s = 46;}

                        else if ( (LA153_1==PLUS) && (synpred4_EsperEPL2Grammar())) {s = 47;}

                        else if ( (LA153_1==MINUS) && (synpred4_EsperEPL2Grammar())) {s = 48;}

                        else if ( (LA153_1==LOR) && (synpred4_EsperEPL2Grammar())) {s = 49;}

                        else if ( (LA153_1==LT) && (synpred4_EsperEPL2Grammar())) {s = 50;}

                        else if ( (LA153_1==GT) && (synpred4_EsperEPL2Grammar())) {s = 51;}

                        else if ( (LA153_1==LE) && (synpred4_EsperEPL2Grammar())) {s = 52;}

                        else if ( (LA153_1==GE) && (synpred4_EsperEPL2Grammar())) {s = 53;}

                        else if ( (LA153_1==EQUALS) && (synpred4_EsperEPL2Grammar())) {s = 54;}

                        else if ( (LA153_1==IS) && (synpred4_EsperEPL2Grammar())) {s = 55;}

                        else if ( (LA153_1==SQL_NE) && (synpred4_EsperEPL2Grammar())) {s = 56;}

                        else if ( (LA153_1==NOT_EQUAL) && (synpred4_EsperEPL2Grammar())) {s = 57;}

                        else if ( (LA153_1==BAND) && (synpred4_EsperEPL2Grammar())) {s = 58;}

                        else if ( (LA153_1==BOR) && (synpred4_EsperEPL2Grammar())) {s = 59;}

                        else if ( (LA153_1==BXOR) && (synpred4_EsperEPL2Grammar())) {s = 60;}

                        else if ( (LA153_1==AND_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 61;}

                        else if ( (LA153_1==OR_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 62;}

                        else if ( (LA153_1==GROUP) && (synpred4_EsperEPL2Grammar())) {s = 63;}

                        else if ( (LA153_1==HAVING) && (synpred4_EsperEPL2Grammar())) {s = 64;}

                        else if ( (LA153_1==OUTPUT) && (synpred4_EsperEPL2Grammar())) {s = 65;}

                        else if ( (LA153_1==ORDER) && (synpred4_EsperEPL2Grammar())) {s = 66;}

                        else if ( (LA153_1==ROW_LIMIT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 67;}

                        else if ( (LA153_1==EOF) && (synpred4_EsperEPL2Grammar())) {s = 68;}

                        else if ( (LA153_1==INSERT) && (synpred4_EsperEPL2Grammar())) {s = 69;}

                        else if ( (LA153_1==RPAREN) && (synpred4_EsperEPL2Grammar())) {s = 70;}

                        else if ( (LA153_1==COMMA) && (synpred4_EsperEPL2Grammar())) {s = 71;}

                        else if ( (LA153_1==AS) && (synpred4_EsperEPL2Grammar())) {s = 72;}

                        else if ( (LA153_1==FROM) && (synpred4_EsperEPL2Grammar())) {s = 73;}

                        else if ( (LA153_1==WHERE) && (synpred4_EsperEPL2Grammar())) {s = 74;}

                        else if ( (LA153_1==ASC) && (synpred4_EsperEPL2Grammar())) {s = 75;}

                        else if ( (LA153_1==DESC) && (synpred4_EsperEPL2Grammar())) {s = 76;}

                        else if ( (LA153_1==THEN) && (synpred4_EsperEPL2Grammar())) {s = 77;}

                        else if ( (LA153_1==ELSE) && (synpred4_EsperEPL2Grammar())) {s = 78;}

                        else if ( (LA153_1==END) && (synpred4_EsperEPL2Grammar())) {s = 79;}

                        else if ( (LA153_1==WHEN) && (synpred4_EsperEPL2Grammar())) {s = 80;}

                        else if ( (LA153_1==COLON) && (synpred4_EsperEPL2Grammar())) {s = 81;}

                        else if ( (LA153_1==RBRACK) && (synpred4_EsperEPL2Grammar())) {s = 82;}

                        else if ( (LA153_1==RCURLY) && (synpred4_EsperEPL2Grammar())) {s = 83;}

                        else if ( (LA153_1==TIMEPERIOD_SECONDS) && (synpred4_EsperEPL2Grammar())) {s = 84;}

                        else if ( (LA153_1==TIMEPERIOD_SECOND) && (synpred4_EsperEPL2Grammar())) {s = 85;}

                        else if ( (LA153_1==TIMEPERIOD_SEC) && (synpred4_EsperEPL2Grammar())) {s = 86;}

                        else if ( (LA153_1==NOT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 87;}

                        else if ( (LA153_1==IN_SET) && (synpred4_EsperEPL2Grammar())) {s = 88;}

                        else if ( (LA153_1==BETWEEN) && (synpred4_EsperEPL2Grammar())) {s = 89;}

                        else if ( (LA153_1==LIKE) && (synpred4_EsperEPL2Grammar())) {s = 90;}

                        else if ( (LA153_1==REGEXP) && (synpred4_EsperEPL2Grammar())) {s = 91;}

                        else if ( (LA153_1==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 92;}

                         
                        input.seek(index153_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA153_2 = input.LA(1);

                         
                        int index153_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA153_2==ESCAPECHAR) && (synpred4_EsperEPL2Grammar())) {s = 93;}

                        else if ( (LA153_2==LBRACK) && (synpred4_EsperEPL2Grammar())) {s = 94;}

                        else if ( (LA153_2==LPAREN) && (synpred4_EsperEPL2Grammar())) {s = 95;}

                        else if ( (LA153_2==QUESTION) && (synpred4_EsperEPL2Grammar())) {s = 96;}

                        else if ( (LA153_2==DOT) ) {s = 97;}

                        else if ( (LA153_2==STAR) && (synpred4_EsperEPL2Grammar())) {s = 98;}

                        else if ( (LA153_2==DIV) && (synpred4_EsperEPL2Grammar())) {s = 99;}

                        else if ( (LA153_2==MOD) && (synpred4_EsperEPL2Grammar())) {s = 100;}

                        else if ( (LA153_2==PLUS) && (synpred4_EsperEPL2Grammar())) {s = 101;}

                        else if ( (LA153_2==MINUS) && (synpred4_EsperEPL2Grammar())) {s = 102;}

                        else if ( (LA153_2==LOR) && (synpred4_EsperEPL2Grammar())) {s = 103;}

                        else if ( (LA153_2==LT) && (synpred4_EsperEPL2Grammar())) {s = 104;}

                        else if ( (LA153_2==GT) && (synpred4_EsperEPL2Grammar())) {s = 105;}

                        else if ( (LA153_2==LE) && (synpred4_EsperEPL2Grammar())) {s = 106;}

                        else if ( (LA153_2==GE) && (synpred4_EsperEPL2Grammar())) {s = 107;}

                        else if ( (LA153_2==EQUALS) && (synpred4_EsperEPL2Grammar())) {s = 108;}

                        else if ( (LA153_2==IS) && (synpred4_EsperEPL2Grammar())) {s = 109;}

                        else if ( (LA153_2==SQL_NE) && (synpred4_EsperEPL2Grammar())) {s = 110;}

                        else if ( (LA153_2==NOT_EQUAL) && (synpred4_EsperEPL2Grammar())) {s = 111;}

                        else if ( (LA153_2==BAND) && (synpred4_EsperEPL2Grammar())) {s = 112;}

                        else if ( (LA153_2==BOR) && (synpred4_EsperEPL2Grammar())) {s = 113;}

                        else if ( (LA153_2==BXOR) && (synpred4_EsperEPL2Grammar())) {s = 114;}

                        else if ( (LA153_2==AND_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 115;}

                        else if ( (LA153_2==OR_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 116;}

                        else if ( (LA153_2==GROUP) && (synpred4_EsperEPL2Grammar())) {s = 117;}

                        else if ( (LA153_2==HAVING) && (synpred4_EsperEPL2Grammar())) {s = 118;}

                        else if ( (LA153_2==OUTPUT) && (synpred4_EsperEPL2Grammar())) {s = 119;}

                        else if ( (LA153_2==ORDER) && (synpred4_EsperEPL2Grammar())) {s = 120;}

                        else if ( (LA153_2==ROW_LIMIT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 121;}

                        else if ( (LA153_2==EOF) && (synpred4_EsperEPL2Grammar())) {s = 122;}

                        else if ( (LA153_2==INSERT) && (synpred4_EsperEPL2Grammar())) {s = 123;}

                        else if ( (LA153_2==RPAREN) && (synpred4_EsperEPL2Grammar())) {s = 124;}

                        else if ( (LA153_2==COMMA) && (synpred4_EsperEPL2Grammar())) {s = 125;}

                        else if ( (LA153_2==AS) && (synpred4_EsperEPL2Grammar())) {s = 126;}

                        else if ( (LA153_2==FROM) && (synpred4_EsperEPL2Grammar())) {s = 127;}

                        else if ( (LA153_2==WHERE) && (synpred4_EsperEPL2Grammar())) {s = 128;}

                        else if ( (LA153_2==ASC) && (synpred4_EsperEPL2Grammar())) {s = 129;}

                        else if ( (LA153_2==DESC) && (synpred4_EsperEPL2Grammar())) {s = 130;}

                        else if ( (LA153_2==THEN) && (synpred4_EsperEPL2Grammar())) {s = 131;}

                        else if ( (LA153_2==ELSE) && (synpred4_EsperEPL2Grammar())) {s = 132;}

                        else if ( (LA153_2==END) && (synpred4_EsperEPL2Grammar())) {s = 133;}

                        else if ( (LA153_2==WHEN) && (synpred4_EsperEPL2Grammar())) {s = 134;}

                        else if ( (LA153_2==COLON) && (synpred4_EsperEPL2Grammar())) {s = 135;}

                        else if ( (LA153_2==RBRACK) && (synpred4_EsperEPL2Grammar())) {s = 136;}

                        else if ( (LA153_2==RCURLY) && (synpred4_EsperEPL2Grammar())) {s = 137;}

                        else if ( (LA153_2==TIMEPERIOD_SECONDS) && (synpred4_EsperEPL2Grammar())) {s = 138;}

                        else if ( (LA153_2==TIMEPERIOD_SECOND) && (synpred4_EsperEPL2Grammar())) {s = 139;}

                        else if ( (LA153_2==TIMEPERIOD_SEC) && (synpred4_EsperEPL2Grammar())) {s = 140;}

                        else if ( (LA153_2==NOT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 141;}

                        else if ( (LA153_2==IN_SET) && (synpred4_EsperEPL2Grammar())) {s = 142;}

                        else if ( (LA153_2==BETWEEN) && (synpred4_EsperEPL2Grammar())) {s = 143;}

                        else if ( (LA153_2==LIKE) && (synpred4_EsperEPL2Grammar())) {s = 144;}

                        else if ( (LA153_2==REGEXP) && (synpred4_EsperEPL2Grammar())) {s = 145;}

                        else if ( (LA153_2==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 146;}

                         
                        input.seek(index153_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA153_9 = input.LA(1);

                         
                        int index153_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA153_9==LPAREN) ) {s = 147;}

                        else if ( (LA153_9==ESCAPECHAR) && (synpred4_EsperEPL2Grammar())) {s = 148;}

                        else if ( (LA153_9==LBRACK) && (synpred4_EsperEPL2Grammar())) {s = 149;}

                        else if ( (LA153_9==QUESTION) && (synpred4_EsperEPL2Grammar())) {s = 150;}

                        else if ( (LA153_9==DOT) && (synpred4_EsperEPL2Grammar())) {s = 151;}

                        else if ( (LA153_9==STAR) && (synpred4_EsperEPL2Grammar())) {s = 152;}

                        else if ( (LA153_9==DIV) && (synpred4_EsperEPL2Grammar())) {s = 153;}

                        else if ( (LA153_9==MOD) && (synpred4_EsperEPL2Grammar())) {s = 154;}

                        else if ( (LA153_9==PLUS) && (synpred4_EsperEPL2Grammar())) {s = 155;}

                        else if ( (LA153_9==MINUS) && (synpred4_EsperEPL2Grammar())) {s = 156;}

                        else if ( (LA153_9==LOR) && (synpred4_EsperEPL2Grammar())) {s = 157;}

                        else if ( (LA153_9==LT) && (synpred4_EsperEPL2Grammar())) {s = 158;}

                        else if ( (LA153_9==GT) && (synpred4_EsperEPL2Grammar())) {s = 159;}

                        else if ( (LA153_9==LE) && (synpred4_EsperEPL2Grammar())) {s = 160;}

                        else if ( (LA153_9==GE) && (synpred4_EsperEPL2Grammar())) {s = 161;}

                        else if ( (LA153_9==EQUALS) && (synpred4_EsperEPL2Grammar())) {s = 162;}

                        else if ( (LA153_9==IS) && (synpred4_EsperEPL2Grammar())) {s = 163;}

                        else if ( (LA153_9==SQL_NE) && (synpred4_EsperEPL2Grammar())) {s = 164;}

                        else if ( (LA153_9==NOT_EQUAL) && (synpred4_EsperEPL2Grammar())) {s = 165;}

                        else if ( (LA153_9==BAND) && (synpred4_EsperEPL2Grammar())) {s = 166;}

                        else if ( (LA153_9==BOR) && (synpred4_EsperEPL2Grammar())) {s = 167;}

                        else if ( (LA153_9==BXOR) && (synpred4_EsperEPL2Grammar())) {s = 168;}

                        else if ( (LA153_9==AND_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 169;}

                        else if ( (LA153_9==OR_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 170;}

                        else if ( (LA153_9==GROUP) && (synpred4_EsperEPL2Grammar())) {s = 171;}

                        else if ( (LA153_9==HAVING) && (synpred4_EsperEPL2Grammar())) {s = 172;}

                        else if ( (LA153_9==OUTPUT) && (synpred4_EsperEPL2Grammar())) {s = 173;}

                        else if ( (LA153_9==ORDER) && (synpred4_EsperEPL2Grammar())) {s = 174;}

                        else if ( (LA153_9==ROW_LIMIT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 175;}

                        else if ( (LA153_9==EOF) && (synpred4_EsperEPL2Grammar())) {s = 176;}

                        else if ( (LA153_9==INSERT) && (synpred4_EsperEPL2Grammar())) {s = 177;}

                        else if ( (LA153_9==RPAREN) && (synpred4_EsperEPL2Grammar())) {s = 178;}

                        else if ( (LA153_9==COMMA) && (synpred4_EsperEPL2Grammar())) {s = 179;}

                        else if ( (LA153_9==AS) && (synpred4_EsperEPL2Grammar())) {s = 180;}

                        else if ( (LA153_9==FROM) && (synpred4_EsperEPL2Grammar())) {s = 181;}

                        else if ( (LA153_9==WHERE) && (synpred4_EsperEPL2Grammar())) {s = 182;}

                        else if ( (LA153_9==ASC) && (synpred4_EsperEPL2Grammar())) {s = 183;}

                        else if ( (LA153_9==DESC) && (synpred4_EsperEPL2Grammar())) {s = 184;}

                        else if ( (LA153_9==THEN) && (synpred4_EsperEPL2Grammar())) {s = 185;}

                        else if ( (LA153_9==ELSE) && (synpred4_EsperEPL2Grammar())) {s = 186;}

                        else if ( (LA153_9==END) && (synpred4_EsperEPL2Grammar())) {s = 187;}

                        else if ( (LA153_9==WHEN) && (synpred4_EsperEPL2Grammar())) {s = 188;}

                        else if ( (LA153_9==COLON) && (synpred4_EsperEPL2Grammar())) {s = 189;}

                        else if ( (LA153_9==RBRACK) && (synpred4_EsperEPL2Grammar())) {s = 190;}

                        else if ( (LA153_9==RCURLY) && (synpred4_EsperEPL2Grammar())) {s = 191;}

                        else if ( (LA153_9==TIMEPERIOD_SECONDS) && (synpred4_EsperEPL2Grammar())) {s = 192;}

                        else if ( (LA153_9==TIMEPERIOD_SECOND) && (synpred4_EsperEPL2Grammar())) {s = 193;}

                        else if ( (LA153_9==TIMEPERIOD_SEC) && (synpred4_EsperEPL2Grammar())) {s = 194;}

                        else if ( (LA153_9==NOT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 195;}

                        else if ( (LA153_9==IN_SET) && (synpred4_EsperEPL2Grammar())) {s = 196;}

                        else if ( (LA153_9==BETWEEN) && (synpred4_EsperEPL2Grammar())) {s = 197;}

                        else if ( (LA153_9==LIKE) && (synpred4_EsperEPL2Grammar())) {s = 198;}

                        else if ( (LA153_9==REGEXP) && (synpred4_EsperEPL2Grammar())) {s = 199;}

                        else if ( (LA153_9==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 200;}

                         
                        input.seek(index153_9);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA153_10 = input.LA(1);

                         
                        int index153_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA153_10==ESCAPECHAR) && (synpred4_EsperEPL2Grammar())) {s = 201;}

                        else if ( (LA153_10==LBRACK) && (synpred4_EsperEPL2Grammar())) {s = 202;}

                        else if ( (LA153_10==LPAREN) ) {s = 203;}

                        else if ( (LA153_10==QUESTION) && (synpred4_EsperEPL2Grammar())) {s = 204;}

                        else if ( (LA153_10==DOT) && (synpred4_EsperEPL2Grammar())) {s = 205;}

                        else if ( (LA153_10==STAR) && (synpred4_EsperEPL2Grammar())) {s = 206;}

                        else if ( (LA153_10==DIV) && (synpred4_EsperEPL2Grammar())) {s = 207;}

                        else if ( (LA153_10==MOD) && (synpred4_EsperEPL2Grammar())) {s = 208;}

                        else if ( (LA153_10==PLUS) && (synpred4_EsperEPL2Grammar())) {s = 209;}

                        else if ( (LA153_10==MINUS) && (synpred4_EsperEPL2Grammar())) {s = 210;}

                        else if ( (LA153_10==LOR) && (synpred4_EsperEPL2Grammar())) {s = 211;}

                        else if ( (LA153_10==LT) && (synpred4_EsperEPL2Grammar())) {s = 212;}

                        else if ( (LA153_10==GT) && (synpred4_EsperEPL2Grammar())) {s = 213;}

                        else if ( (LA153_10==LE) && (synpred4_EsperEPL2Grammar())) {s = 214;}

                        else if ( (LA153_10==GE) && (synpred4_EsperEPL2Grammar())) {s = 215;}

                        else if ( (LA153_10==EQUALS) && (synpred4_EsperEPL2Grammar())) {s = 216;}

                        else if ( (LA153_10==IS) && (synpred4_EsperEPL2Grammar())) {s = 217;}

                        else if ( (LA153_10==SQL_NE) && (synpred4_EsperEPL2Grammar())) {s = 218;}

                        else if ( (LA153_10==NOT_EQUAL) && (synpred4_EsperEPL2Grammar())) {s = 219;}

                        else if ( (LA153_10==BAND) && (synpred4_EsperEPL2Grammar())) {s = 220;}

                        else if ( (LA153_10==BOR) && (synpred4_EsperEPL2Grammar())) {s = 221;}

                        else if ( (LA153_10==BXOR) && (synpred4_EsperEPL2Grammar())) {s = 222;}

                        else if ( (LA153_10==AND_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 223;}

                        else if ( (LA153_10==OR_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 224;}

                        else if ( (LA153_10==GROUP) && (synpred4_EsperEPL2Grammar())) {s = 225;}

                        else if ( (LA153_10==HAVING) && (synpred4_EsperEPL2Grammar())) {s = 226;}

                        else if ( (LA153_10==OUTPUT) && (synpred4_EsperEPL2Grammar())) {s = 227;}

                        else if ( (LA153_10==ORDER) && (synpred4_EsperEPL2Grammar())) {s = 228;}

                        else if ( (LA153_10==ROW_LIMIT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 229;}

                        else if ( (LA153_10==EOF) && (synpred4_EsperEPL2Grammar())) {s = 230;}

                        else if ( (LA153_10==INSERT) && (synpred4_EsperEPL2Grammar())) {s = 231;}

                        else if ( (LA153_10==RPAREN) && (synpred4_EsperEPL2Grammar())) {s = 232;}

                        else if ( (LA153_10==COMMA) && (synpred4_EsperEPL2Grammar())) {s = 233;}

                        else if ( (LA153_10==AS) && (synpred4_EsperEPL2Grammar())) {s = 234;}

                        else if ( (LA153_10==FROM) && (synpred4_EsperEPL2Grammar())) {s = 235;}

                        else if ( (LA153_10==WHERE) && (synpred4_EsperEPL2Grammar())) {s = 236;}

                        else if ( (LA153_10==ASC) && (synpred4_EsperEPL2Grammar())) {s = 237;}

                        else if ( (LA153_10==DESC) && (synpred4_EsperEPL2Grammar())) {s = 238;}

                        else if ( (LA153_10==THEN) && (synpred4_EsperEPL2Grammar())) {s = 239;}

                        else if ( (LA153_10==ELSE) && (synpred4_EsperEPL2Grammar())) {s = 240;}

                        else if ( (LA153_10==END) && (synpred4_EsperEPL2Grammar())) {s = 241;}

                        else if ( (LA153_10==WHEN) && (synpred4_EsperEPL2Grammar())) {s = 242;}

                        else if ( (LA153_10==COLON) && (synpred4_EsperEPL2Grammar())) {s = 243;}

                        else if ( (LA153_10==RBRACK) && (synpred4_EsperEPL2Grammar())) {s = 244;}

                        else if ( (LA153_10==RCURLY) && (synpred4_EsperEPL2Grammar())) {s = 245;}

                        else if ( (LA153_10==TIMEPERIOD_SECONDS) && (synpred4_EsperEPL2Grammar())) {s = 246;}

                        else if ( (LA153_10==TIMEPERIOD_SECOND) && (synpred4_EsperEPL2Grammar())) {s = 247;}

                        else if ( (LA153_10==TIMEPERIOD_SEC) && (synpred4_EsperEPL2Grammar())) {s = 248;}

                        else if ( (LA153_10==NOT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 249;}

                        else if ( (LA153_10==IN_SET) && (synpred4_EsperEPL2Grammar())) {s = 250;}

                        else if ( (LA153_10==BETWEEN) && (synpred4_EsperEPL2Grammar())) {s = 251;}

                        else if ( (LA153_10==LIKE) && (synpred4_EsperEPL2Grammar())) {s = 252;}

                        else if ( (LA153_10==REGEXP) && (synpred4_EsperEPL2Grammar())) {s = 253;}

                        else if ( (LA153_10==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 254;}

                         
                        input.seek(index153_10);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA153_40 = input.LA(1);

                         
                        int index153_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA153_40==IDENT) ) {s = 314;}

                        else if ( (LA153_40==MAX) ) {s = 315;}

                        else if ( (LA153_40==MIN) ) {s = 316;}

                        else if ( (LA153_40==TICKED_STRING_LITERAL) ) {s = 317;}

                        else if ( (LA153_40==AT) && (synpred4_EsperEPL2Grammar())) {s = 318;}

                        else if ( (LA153_40==COUNT) && (synpred4_EsperEPL2Grammar())) {s = 319;}

                        else if ( (LA153_40==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 320;}

                        else if ( (LA153_40==EVERY_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 321;}

                        else if ( (LA153_40==SUM) && (synpred4_EsperEPL2Grammar())) {s = 322;}

                        else if ( (LA153_40==AVG) && (synpred4_EsperEPL2Grammar())) {s = 323;}

                        else if ( (LA153_40==COALESCE) && (synpred4_EsperEPL2Grammar())) {s = 324;}

                        else if ( (LA153_40==MEDIAN) && (synpred4_EsperEPL2Grammar())) {s = 325;}

                        else if ( (LA153_40==STDDEV) && (synpred4_EsperEPL2Grammar())) {s = 326;}

                        else if ( (LA153_40==AVEDEV) && (synpred4_EsperEPL2Grammar())) {s = 327;}

                        else if ( (LA153_40==EVENTS) && (synpred4_EsperEPL2Grammar())) {s = 328;}

                        else if ( (LA153_40==FIRST) && (synpred4_EsperEPL2Grammar())) {s = 329;}

                        else if ( (LA153_40==LAST) && (synpred4_EsperEPL2Grammar())) {s = 330;}

                        else if ( (LA153_40==UNIDIRECTIONAL) && (synpred4_EsperEPL2Grammar())) {s = 331;}

                        else if ( (LA153_40==RETAINUNION) && (synpred4_EsperEPL2Grammar())) {s = 332;}

                        else if ( (LA153_40==RETAININTERSECTION) && (synpred4_EsperEPL2Grammar())) {s = 333;}

                        else if ( (LA153_40==UNTIL) && (synpred4_EsperEPL2Grammar())) {s = 334;}

                        else if ( (LA153_40==PATTERN) && (synpred4_EsperEPL2Grammar())) {s = 335;}

                        else if ( (LA153_40==SQL) && (synpred4_EsperEPL2Grammar())) {s = 336;}

                        else if ( (LA153_40==METADATASQL) && (synpred4_EsperEPL2Grammar())) {s = 337;}

                        else if ( (LA153_40==PREVIOUS) && (synpred4_EsperEPL2Grammar())) {s = 338;}

                        else if ( (LA153_40==PRIOR) && (synpred4_EsperEPL2Grammar())) {s = 339;}

                        else if ( (LA153_40==WEEKDAY) && (synpred4_EsperEPL2Grammar())) {s = 340;}

                        else if ( (LA153_40==LW) && (synpred4_EsperEPL2Grammar())) {s = 341;}

                        else if ( (LA153_40==INSTANCEOF) && (synpred4_EsperEPL2Grammar())) {s = 342;}

                        else if ( (LA153_40==CAST) && (synpred4_EsperEPL2Grammar())) {s = 343;}

                        else if ( (LA153_40==SNAPSHOT) && (synpred4_EsperEPL2Grammar())) {s = 344;}

                        else if ( (LA153_40==VARIABLE) && (synpred4_EsperEPL2Grammar())) {s = 345;}

                        else if ( (LA153_40==WINDOW) && (synpred4_EsperEPL2Grammar())) {s = 346;}

                        else if ( (LA153_40==LEFT) && (synpred4_EsperEPL2Grammar())) {s = 347;}

                        else if ( (LA153_40==RIGHT) && (synpred4_EsperEPL2Grammar())) {s = 348;}

                        else if ( (LA153_40==OUTER) && (synpred4_EsperEPL2Grammar())) {s = 349;}

                        else if ( (LA153_40==FULL) && (synpred4_EsperEPL2Grammar())) {s = 350;}

                        else if ( (LA153_40==JOIN) && (synpred4_EsperEPL2Grammar())) {s = 351;}

                         
                        input.seek(index153_40);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA153_97 = input.LA(1);

                         
                        int index153_97 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA153_97==IDENT) ) {s = 352;}

                        else if ( (LA153_97==MAX) ) {s = 353;}

                        else if ( (LA153_97==MIN) ) {s = 354;}

                        else if ( (LA153_97==TICKED_STRING_LITERAL) ) {s = 355;}

                        else if ( (LA153_97==AT) && (synpred4_EsperEPL2Grammar())) {s = 356;}

                        else if ( (LA153_97==COUNT) && (synpred4_EsperEPL2Grammar())) {s = 357;}

                        else if ( (LA153_97==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 358;}

                        else if ( (LA153_97==EVERY_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 359;}

                        else if ( (LA153_97==SUM) && (synpred4_EsperEPL2Grammar())) {s = 360;}

                        else if ( (LA153_97==AVG) && (synpred4_EsperEPL2Grammar())) {s = 361;}

                        else if ( (LA153_97==COALESCE) && (synpred4_EsperEPL2Grammar())) {s = 362;}

                        else if ( (LA153_97==MEDIAN) && (synpred4_EsperEPL2Grammar())) {s = 363;}

                        else if ( (LA153_97==STDDEV) && (synpred4_EsperEPL2Grammar())) {s = 364;}

                        else if ( (LA153_97==AVEDEV) && (synpred4_EsperEPL2Grammar())) {s = 365;}

                        else if ( (LA153_97==EVENTS) && (synpred4_EsperEPL2Grammar())) {s = 366;}

                        else if ( (LA153_97==FIRST) && (synpred4_EsperEPL2Grammar())) {s = 367;}

                        else if ( (LA153_97==LAST) && (synpred4_EsperEPL2Grammar())) {s = 368;}

                        else if ( (LA153_97==UNIDIRECTIONAL) && (synpred4_EsperEPL2Grammar())) {s = 369;}

                        else if ( (LA153_97==RETAINUNION) && (synpred4_EsperEPL2Grammar())) {s = 370;}

                        else if ( (LA153_97==RETAININTERSECTION) && (synpred4_EsperEPL2Grammar())) {s = 371;}

                        else if ( (LA153_97==UNTIL) && (synpred4_EsperEPL2Grammar())) {s = 372;}

                        else if ( (LA153_97==PATTERN) && (synpred4_EsperEPL2Grammar())) {s = 373;}

                        else if ( (LA153_97==SQL) && (synpred4_EsperEPL2Grammar())) {s = 374;}

                        else if ( (LA153_97==METADATASQL) && (synpred4_EsperEPL2Grammar())) {s = 375;}

                        else if ( (LA153_97==PREVIOUS) && (synpred4_EsperEPL2Grammar())) {s = 376;}

                        else if ( (LA153_97==PRIOR) && (synpred4_EsperEPL2Grammar())) {s = 377;}

                        else if ( (LA153_97==WEEKDAY) && (synpred4_EsperEPL2Grammar())) {s = 378;}

                        else if ( (LA153_97==LW) && (synpred4_EsperEPL2Grammar())) {s = 379;}

                        else if ( (LA153_97==INSTANCEOF) && (synpred4_EsperEPL2Grammar())) {s = 380;}

                        else if ( (LA153_97==CAST) && (synpred4_EsperEPL2Grammar())) {s = 381;}

                        else if ( (LA153_97==SNAPSHOT) && (synpred4_EsperEPL2Grammar())) {s = 382;}

                        else if ( (LA153_97==VARIABLE) && (synpred4_EsperEPL2Grammar())) {s = 383;}

                        else if ( (LA153_97==WINDOW) && (synpred4_EsperEPL2Grammar())) {s = 384;}

                        else if ( (LA153_97==LEFT) && (synpred4_EsperEPL2Grammar())) {s = 385;}

                        else if ( (LA153_97==RIGHT) && (synpred4_EsperEPL2Grammar())) {s = 386;}

                        else if ( (LA153_97==OUTER) && (synpred4_EsperEPL2Grammar())) {s = 387;}

                        else if ( (LA153_97==FULL) && (synpred4_EsperEPL2Grammar())) {s = 388;}

                        else if ( (LA153_97==JOIN) && (synpred4_EsperEPL2Grammar())) {s = 389;}

                         
                        input.seek(index153_97);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA153_314 = input.LA(1);

                         
                        int index153_314 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA153_314==LPAREN) ) {s = 560;}

                        else if ( (LA153_314==DOT) ) {s = 561;}

                        else if ( (LA153_314==ESCAPECHAR) && (synpred4_EsperEPL2Grammar())) {s = 562;}

                        else if ( (LA153_314==LBRACK) && (synpred4_EsperEPL2Grammar())) {s = 563;}

                        else if ( (LA153_314==QUESTION) && (synpred4_EsperEPL2Grammar())) {s = 564;}

                        else if ( (LA153_314==STAR) && (synpred4_EsperEPL2Grammar())) {s = 565;}

                        else if ( (LA153_314==DIV) && (synpred4_EsperEPL2Grammar())) {s = 566;}

                        else if ( (LA153_314==MOD) && (synpred4_EsperEPL2Grammar())) {s = 567;}

                        else if ( (LA153_314==PLUS) && (synpred4_EsperEPL2Grammar())) {s = 568;}

                        else if ( (LA153_314==MINUS) && (synpred4_EsperEPL2Grammar())) {s = 569;}

                        else if ( (LA153_314==LOR) && (synpred4_EsperEPL2Grammar())) {s = 570;}

                        else if ( (LA153_314==LT) && (synpred4_EsperEPL2Grammar())) {s = 571;}

                        else if ( (LA153_314==GT) && (synpred4_EsperEPL2Grammar())) {s = 572;}

                        else if ( (LA153_314==LE) && (synpred4_EsperEPL2Grammar())) {s = 573;}

                        else if ( (LA153_314==GE) && (synpred4_EsperEPL2Grammar())) {s = 574;}

                        else if ( (LA153_314==EQUALS) && (synpred4_EsperEPL2Grammar())) {s = 575;}

                        else if ( (LA153_314==IS) && (synpred4_EsperEPL2Grammar())) {s = 576;}

                        else if ( (LA153_314==SQL_NE) && (synpred4_EsperEPL2Grammar())) {s = 577;}

                        else if ( (LA153_314==NOT_EQUAL) && (synpred4_EsperEPL2Grammar())) {s = 578;}

                        else if ( (LA153_314==BAND) && (synpred4_EsperEPL2Grammar())) {s = 579;}

                        else if ( (LA153_314==BOR) && (synpred4_EsperEPL2Grammar())) {s = 580;}

                        else if ( (LA153_314==BXOR) && (synpred4_EsperEPL2Grammar())) {s = 581;}

                        else if ( (LA153_314==AND_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 582;}

                        else if ( (LA153_314==OR_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 583;}

                        else if ( (LA153_314==GROUP) && (synpred4_EsperEPL2Grammar())) {s = 584;}

                        else if ( (LA153_314==HAVING) && (synpred4_EsperEPL2Grammar())) {s = 585;}

                        else if ( (LA153_314==OUTPUT) && (synpred4_EsperEPL2Grammar())) {s = 586;}

                        else if ( (LA153_314==ORDER) && (synpred4_EsperEPL2Grammar())) {s = 587;}

                        else if ( (LA153_314==ROW_LIMIT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 588;}

                        else if ( (LA153_314==EOF) && (synpred4_EsperEPL2Grammar())) {s = 589;}

                        else if ( (LA153_314==INSERT) && (synpred4_EsperEPL2Grammar())) {s = 590;}

                        else if ( (LA153_314==RPAREN) && (synpred4_EsperEPL2Grammar())) {s = 591;}

                        else if ( (LA153_314==COMMA) && (synpred4_EsperEPL2Grammar())) {s = 592;}

                        else if ( (LA153_314==AS) && (synpred4_EsperEPL2Grammar())) {s = 593;}

                        else if ( (LA153_314==FROM) && (synpred4_EsperEPL2Grammar())) {s = 594;}

                        else if ( (LA153_314==WHERE) && (synpred4_EsperEPL2Grammar())) {s = 595;}

                        else if ( (LA153_314==ASC) && (synpred4_EsperEPL2Grammar())) {s = 596;}

                        else if ( (LA153_314==DESC) && (synpred4_EsperEPL2Grammar())) {s = 597;}

                        else if ( (LA153_314==THEN) && (synpred4_EsperEPL2Grammar())) {s = 598;}

                        else if ( (LA153_314==ELSE) && (synpred4_EsperEPL2Grammar())) {s = 599;}

                        else if ( (LA153_314==END) && (synpred4_EsperEPL2Grammar())) {s = 600;}

                        else if ( (LA153_314==WHEN) && (synpred4_EsperEPL2Grammar())) {s = 601;}

                        else if ( (LA153_314==COLON) && (synpred4_EsperEPL2Grammar())) {s = 602;}

                        else if ( (LA153_314==RBRACK) && (synpred4_EsperEPL2Grammar())) {s = 603;}

                        else if ( (LA153_314==RCURLY) && (synpred4_EsperEPL2Grammar())) {s = 604;}

                        else if ( (LA153_314==TIMEPERIOD_SECONDS) && (synpred4_EsperEPL2Grammar())) {s = 605;}

                        else if ( (LA153_314==TIMEPERIOD_SECOND) && (synpred4_EsperEPL2Grammar())) {s = 606;}

                        else if ( (LA153_314==TIMEPERIOD_SEC) && (synpred4_EsperEPL2Grammar())) {s = 607;}

                        else if ( (LA153_314==NOT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 608;}

                        else if ( (LA153_314==IN_SET) && (synpred4_EsperEPL2Grammar())) {s = 609;}

                        else if ( (LA153_314==BETWEEN) && (synpred4_EsperEPL2Grammar())) {s = 610;}

                        else if ( (LA153_314==LIKE) && (synpred4_EsperEPL2Grammar())) {s = 611;}

                        else if ( (LA153_314==REGEXP) && (synpred4_EsperEPL2Grammar())) {s = 612;}

                        else if ( (LA153_314==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 613;}

                         
                        input.seek(index153_314);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA153_315 = input.LA(1);

                         
                        int index153_315 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA153_315==LPAREN) ) {s = 614;}

                        else if ( (LA153_315==ESCAPECHAR) && (synpred4_EsperEPL2Grammar())) {s = 615;}

                        else if ( (LA153_315==LBRACK) && (synpred4_EsperEPL2Grammar())) {s = 616;}

                        else if ( (LA153_315==QUESTION) && (synpred4_EsperEPL2Grammar())) {s = 617;}

                        else if ( (LA153_315==STAR) && (synpred4_EsperEPL2Grammar())) {s = 618;}

                        else if ( (LA153_315==DIV) && (synpred4_EsperEPL2Grammar())) {s = 619;}

                        else if ( (LA153_315==MOD) && (synpred4_EsperEPL2Grammar())) {s = 620;}

                        else if ( (LA153_315==PLUS) && (synpred4_EsperEPL2Grammar())) {s = 621;}

                        else if ( (LA153_315==MINUS) && (synpred4_EsperEPL2Grammar())) {s = 622;}

                        else if ( (LA153_315==LOR) && (synpred4_EsperEPL2Grammar())) {s = 623;}

                        else if ( (LA153_315==LT) && (synpred4_EsperEPL2Grammar())) {s = 624;}

                        else if ( (LA153_315==GT) && (synpred4_EsperEPL2Grammar())) {s = 625;}

                        else if ( (LA153_315==LE) && (synpred4_EsperEPL2Grammar())) {s = 626;}

                        else if ( (LA153_315==GE) && (synpred4_EsperEPL2Grammar())) {s = 627;}

                        else if ( (LA153_315==EQUALS) && (synpred4_EsperEPL2Grammar())) {s = 628;}

                        else if ( (LA153_315==IS) && (synpred4_EsperEPL2Grammar())) {s = 629;}

                        else if ( (LA153_315==SQL_NE) && (synpred4_EsperEPL2Grammar())) {s = 630;}

                        else if ( (LA153_315==NOT_EQUAL) && (synpred4_EsperEPL2Grammar())) {s = 631;}

                        else if ( (LA153_315==BAND) && (synpred4_EsperEPL2Grammar())) {s = 632;}

                        else if ( (LA153_315==BOR) && (synpred4_EsperEPL2Grammar())) {s = 633;}

                        else if ( (LA153_315==BXOR) && (synpred4_EsperEPL2Grammar())) {s = 634;}

                        else if ( (LA153_315==AND_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 635;}

                        else if ( (LA153_315==OR_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 636;}

                        else if ( (LA153_315==GROUP) && (synpred4_EsperEPL2Grammar())) {s = 637;}

                        else if ( (LA153_315==HAVING) && (synpred4_EsperEPL2Grammar())) {s = 638;}

                        else if ( (LA153_315==OUTPUT) && (synpred4_EsperEPL2Grammar())) {s = 639;}

                        else if ( (LA153_315==ORDER) && (synpred4_EsperEPL2Grammar())) {s = 640;}

                        else if ( (LA153_315==ROW_LIMIT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 641;}

                        else if ( (LA153_315==EOF) && (synpred4_EsperEPL2Grammar())) {s = 642;}

                        else if ( (LA153_315==INSERT) && (synpred4_EsperEPL2Grammar())) {s = 643;}

                        else if ( (LA153_315==RPAREN) && (synpred4_EsperEPL2Grammar())) {s = 644;}

                        else if ( (LA153_315==COMMA) && (synpred4_EsperEPL2Grammar())) {s = 645;}

                        else if ( (LA153_315==AS) && (synpred4_EsperEPL2Grammar())) {s = 646;}

                        else if ( (LA153_315==FROM) && (synpred4_EsperEPL2Grammar())) {s = 647;}

                        else if ( (LA153_315==WHERE) && (synpred4_EsperEPL2Grammar())) {s = 648;}

                        else if ( (LA153_315==ASC) && (synpred4_EsperEPL2Grammar())) {s = 649;}

                        else if ( (LA153_315==DESC) && (synpred4_EsperEPL2Grammar())) {s = 650;}

                        else if ( (LA153_315==THEN) && (synpred4_EsperEPL2Grammar())) {s = 651;}

                        else if ( (LA153_315==ELSE) && (synpred4_EsperEPL2Grammar())) {s = 652;}

                        else if ( (LA153_315==END) && (synpred4_EsperEPL2Grammar())) {s = 653;}

                        else if ( (LA153_315==WHEN) && (synpred4_EsperEPL2Grammar())) {s = 654;}

                        else if ( (LA153_315==COLON) && (synpred4_EsperEPL2Grammar())) {s = 655;}

                        else if ( (LA153_315==RBRACK) && (synpred4_EsperEPL2Grammar())) {s = 656;}

                        else if ( (LA153_315==RCURLY) && (synpred4_EsperEPL2Grammar())) {s = 657;}

                        else if ( (LA153_315==TIMEPERIOD_SECONDS) && (synpred4_EsperEPL2Grammar())) {s = 658;}

                        else if ( (LA153_315==TIMEPERIOD_SECOND) && (synpred4_EsperEPL2Grammar())) {s = 659;}

                        else if ( (LA153_315==TIMEPERIOD_SEC) && (synpred4_EsperEPL2Grammar())) {s = 660;}

                        else if ( (LA153_315==NOT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 661;}

                        else if ( (LA153_315==IN_SET) && (synpred4_EsperEPL2Grammar())) {s = 662;}

                        else if ( (LA153_315==BETWEEN) && (synpred4_EsperEPL2Grammar())) {s = 663;}

                        else if ( (LA153_315==LIKE) && (synpred4_EsperEPL2Grammar())) {s = 664;}

                        else if ( (LA153_315==REGEXP) && (synpred4_EsperEPL2Grammar())) {s = 665;}

                        else if ( (LA153_315==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 666;}

                        else if ( (LA153_315==DOT) && (synpred4_EsperEPL2Grammar())) {s = 667;}

                         
                        input.seek(index153_315);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA153_316 = input.LA(1);

                         
                        int index153_316 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA153_316==ESCAPECHAR) && (synpred4_EsperEPL2Grammar())) {s = 668;}

                        else if ( (LA153_316==LBRACK) && (synpred4_EsperEPL2Grammar())) {s = 669;}

                        else if ( (LA153_316==LPAREN) ) {s = 670;}

                        else if ( (LA153_316==QUESTION) && (synpred4_EsperEPL2Grammar())) {s = 671;}

                        else if ( (LA153_316==STAR) && (synpred4_EsperEPL2Grammar())) {s = 672;}

                        else if ( (LA153_316==DIV) && (synpred4_EsperEPL2Grammar())) {s = 673;}

                        else if ( (LA153_316==MOD) && (synpred4_EsperEPL2Grammar())) {s = 674;}

                        else if ( (LA153_316==PLUS) && (synpred4_EsperEPL2Grammar())) {s = 675;}

                        else if ( (LA153_316==MINUS) && (synpred4_EsperEPL2Grammar())) {s = 676;}

                        else if ( (LA153_316==LOR) && (synpred4_EsperEPL2Grammar())) {s = 677;}

                        else if ( (LA153_316==LT) && (synpred4_EsperEPL2Grammar())) {s = 678;}

                        else if ( (LA153_316==GT) && (synpred4_EsperEPL2Grammar())) {s = 679;}

                        else if ( (LA153_316==LE) && (synpred4_EsperEPL2Grammar())) {s = 680;}

                        else if ( (LA153_316==GE) && (synpred4_EsperEPL2Grammar())) {s = 681;}

                        else if ( (LA153_316==EQUALS) && (synpred4_EsperEPL2Grammar())) {s = 682;}

                        else if ( (LA153_316==IS) && (synpred4_EsperEPL2Grammar())) {s = 683;}

                        else if ( (LA153_316==SQL_NE) && (synpred4_EsperEPL2Grammar())) {s = 684;}

                        else if ( (LA153_316==NOT_EQUAL) && (synpred4_EsperEPL2Grammar())) {s = 685;}

                        else if ( (LA153_316==BAND) && (synpred4_EsperEPL2Grammar())) {s = 686;}

                        else if ( (LA153_316==BOR) && (synpred4_EsperEPL2Grammar())) {s = 687;}

                        else if ( (LA153_316==BXOR) && (synpred4_EsperEPL2Grammar())) {s = 688;}

                        else if ( (LA153_316==AND_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 689;}

                        else if ( (LA153_316==OR_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 690;}

                        else if ( (LA153_316==GROUP) && (synpred4_EsperEPL2Grammar())) {s = 691;}

                        else if ( (LA153_316==HAVING) && (synpred4_EsperEPL2Grammar())) {s = 692;}

                        else if ( (LA153_316==OUTPUT) && (synpred4_EsperEPL2Grammar())) {s = 693;}

                        else if ( (LA153_316==ORDER) && (synpred4_EsperEPL2Grammar())) {s = 694;}

                        else if ( (LA153_316==ROW_LIMIT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 695;}

                        else if ( (LA153_316==EOF) && (synpred4_EsperEPL2Grammar())) {s = 696;}

                        else if ( (LA153_316==INSERT) && (synpred4_EsperEPL2Grammar())) {s = 697;}

                        else if ( (LA153_316==RPAREN) && (synpred4_EsperEPL2Grammar())) {s = 698;}

                        else if ( (LA153_316==COMMA) && (synpred4_EsperEPL2Grammar())) {s = 699;}

                        else if ( (LA153_316==AS) && (synpred4_EsperEPL2Grammar())) {s = 700;}

                        else if ( (LA153_316==FROM) && (synpred4_EsperEPL2Grammar())) {s = 701;}

                        else if ( (LA153_316==WHERE) && (synpred4_EsperEPL2Grammar())) {s = 702;}

                        else if ( (LA153_316==ASC) && (synpred4_EsperEPL2Grammar())) {s = 703;}

                        else if ( (LA153_316==DESC) && (synpred4_EsperEPL2Grammar())) {s = 704;}

                        else if ( (LA153_316==THEN) && (synpred4_EsperEPL2Grammar())) {s = 705;}

                        else if ( (LA153_316==ELSE) && (synpred4_EsperEPL2Grammar())) {s = 706;}

                        else if ( (LA153_316==END) && (synpred4_EsperEPL2Grammar())) {s = 707;}

                        else if ( (LA153_316==WHEN) && (synpred4_EsperEPL2Grammar())) {s = 708;}

                        else if ( (LA153_316==COLON) && (synpred4_EsperEPL2Grammar())) {s = 709;}

                        else if ( (LA153_316==RBRACK) && (synpred4_EsperEPL2Grammar())) {s = 710;}

                        else if ( (LA153_316==RCURLY) && (synpred4_EsperEPL2Grammar())) {s = 711;}

                        else if ( (LA153_316==TIMEPERIOD_SECONDS) && (synpred4_EsperEPL2Grammar())) {s = 712;}

                        else if ( (LA153_316==TIMEPERIOD_SECOND) && (synpred4_EsperEPL2Grammar())) {s = 713;}

                        else if ( (LA153_316==TIMEPERIOD_SEC) && (synpred4_EsperEPL2Grammar())) {s = 714;}

                        else if ( (LA153_316==NOT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 715;}

                        else if ( (LA153_316==IN_SET) && (synpred4_EsperEPL2Grammar())) {s = 716;}

                        else if ( (LA153_316==BETWEEN) && (synpred4_EsperEPL2Grammar())) {s = 717;}

                        else if ( (LA153_316==LIKE) && (synpred4_EsperEPL2Grammar())) {s = 718;}

                        else if ( (LA153_316==REGEXP) && (synpred4_EsperEPL2Grammar())) {s = 719;}

                        else if ( (LA153_316==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 720;}

                        else if ( (LA153_316==DOT) && (synpred4_EsperEPL2Grammar())) {s = 721;}

                         
                        input.seek(index153_316);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA153_317 = input.LA(1);

                         
                        int index153_317 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA153_317==ESCAPECHAR) && (synpred4_EsperEPL2Grammar())) {s = 722;}

                        else if ( (LA153_317==LBRACK) && (synpred4_EsperEPL2Grammar())) {s = 723;}

                        else if ( (LA153_317==LPAREN) && (synpred4_EsperEPL2Grammar())) {s = 724;}

                        else if ( (LA153_317==QUESTION) && (synpred4_EsperEPL2Grammar())) {s = 725;}

                        else if ( (LA153_317==STAR) && (synpred4_EsperEPL2Grammar())) {s = 726;}

                        else if ( (LA153_317==DIV) && (synpred4_EsperEPL2Grammar())) {s = 727;}

                        else if ( (LA153_317==MOD) && (synpred4_EsperEPL2Grammar())) {s = 728;}

                        else if ( (LA153_317==PLUS) && (synpred4_EsperEPL2Grammar())) {s = 729;}

                        else if ( (LA153_317==MINUS) && (synpred4_EsperEPL2Grammar())) {s = 730;}

                        else if ( (LA153_317==LOR) && (synpred4_EsperEPL2Grammar())) {s = 731;}

                        else if ( (LA153_317==LT) && (synpred4_EsperEPL2Grammar())) {s = 732;}

                        else if ( (LA153_317==GT) && (synpred4_EsperEPL2Grammar())) {s = 733;}

                        else if ( (LA153_317==LE) && (synpred4_EsperEPL2Grammar())) {s = 734;}

                        else if ( (LA153_317==GE) && (synpred4_EsperEPL2Grammar())) {s = 735;}

                        else if ( (LA153_317==EQUALS) && (synpred4_EsperEPL2Grammar())) {s = 736;}

                        else if ( (LA153_317==IS) && (synpred4_EsperEPL2Grammar())) {s = 737;}

                        else if ( (LA153_317==SQL_NE) && (synpred4_EsperEPL2Grammar())) {s = 738;}

                        else if ( (LA153_317==NOT_EQUAL) && (synpred4_EsperEPL2Grammar())) {s = 739;}

                        else if ( (LA153_317==BAND) && (synpred4_EsperEPL2Grammar())) {s = 740;}

                        else if ( (LA153_317==BOR) && (synpred4_EsperEPL2Grammar())) {s = 741;}

                        else if ( (LA153_317==BXOR) && (synpred4_EsperEPL2Grammar())) {s = 742;}

                        else if ( (LA153_317==AND_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 743;}

                        else if ( (LA153_317==OR_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 744;}

                        else if ( (LA153_317==GROUP) && (synpred4_EsperEPL2Grammar())) {s = 745;}

                        else if ( (LA153_317==HAVING) && (synpred4_EsperEPL2Grammar())) {s = 746;}

                        else if ( (LA153_317==OUTPUT) && (synpred4_EsperEPL2Grammar())) {s = 747;}

                        else if ( (LA153_317==ORDER) && (synpred4_EsperEPL2Grammar())) {s = 748;}

                        else if ( (LA153_317==ROW_LIMIT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 749;}

                        else if ( (LA153_317==EOF) && (synpred4_EsperEPL2Grammar())) {s = 750;}

                        else if ( (LA153_317==INSERT) && (synpred4_EsperEPL2Grammar())) {s = 751;}

                        else if ( (LA153_317==RPAREN) && (synpred4_EsperEPL2Grammar())) {s = 752;}

                        else if ( (LA153_317==COMMA) && (synpred4_EsperEPL2Grammar())) {s = 753;}

                        else if ( (LA153_317==AS) && (synpred4_EsperEPL2Grammar())) {s = 754;}

                        else if ( (LA153_317==FROM) && (synpred4_EsperEPL2Grammar())) {s = 755;}

                        else if ( (LA153_317==WHERE) && (synpred4_EsperEPL2Grammar())) {s = 756;}

                        else if ( (LA153_317==ASC) && (synpred4_EsperEPL2Grammar())) {s = 757;}

                        else if ( (LA153_317==DESC) && (synpred4_EsperEPL2Grammar())) {s = 758;}

                        else if ( (LA153_317==THEN) && (synpred4_EsperEPL2Grammar())) {s = 759;}

                        else if ( (LA153_317==ELSE) && (synpred4_EsperEPL2Grammar())) {s = 760;}

                        else if ( (LA153_317==END) && (synpred4_EsperEPL2Grammar())) {s = 761;}

                        else if ( (LA153_317==WHEN) && (synpred4_EsperEPL2Grammar())) {s = 762;}

                        else if ( (LA153_317==COLON) && (synpred4_EsperEPL2Grammar())) {s = 763;}

                        else if ( (LA153_317==RBRACK) && (synpred4_EsperEPL2Grammar())) {s = 764;}

                        else if ( (LA153_317==RCURLY) && (synpred4_EsperEPL2Grammar())) {s = 765;}

                        else if ( (LA153_317==TIMEPERIOD_SECONDS) && (synpred4_EsperEPL2Grammar())) {s = 766;}

                        else if ( (LA153_317==TIMEPERIOD_SECOND) && (synpred4_EsperEPL2Grammar())) {s = 767;}

                        else if ( (LA153_317==TIMEPERIOD_SEC) && (synpred4_EsperEPL2Grammar())) {s = 768;}

                        else if ( (LA153_317==NOT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 769;}

                        else if ( (LA153_317==IN_SET) && (synpred4_EsperEPL2Grammar())) {s = 770;}

                        else if ( (LA153_317==BETWEEN) && (synpred4_EsperEPL2Grammar())) {s = 771;}

                        else if ( (LA153_317==LIKE) && (synpred4_EsperEPL2Grammar())) {s = 772;}

                        else if ( (LA153_317==REGEXP) && (synpred4_EsperEPL2Grammar())) {s = 773;}

                        else if ( (LA153_317==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 774;}

                        else if ( (LA153_317==DOT) ) {s = 775;}

                         
                        input.seek(index153_317);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA153_352 = input.LA(1);

                         
                        int index153_352 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA153_352==LPAREN) ) {s = 776;}

                        else if ( (LA153_352==DOT) ) {s = 777;}

                        else if ( (LA153_352==ESCAPECHAR) && (synpred4_EsperEPL2Grammar())) {s = 778;}

                        else if ( (LA153_352==LBRACK) && (synpred4_EsperEPL2Grammar())) {s = 779;}

                        else if ( (LA153_352==QUESTION) && (synpred4_EsperEPL2Grammar())) {s = 780;}

                        else if ( (LA153_352==STAR) && (synpred4_EsperEPL2Grammar())) {s = 781;}

                        else if ( (LA153_352==DIV) && (synpred4_EsperEPL2Grammar())) {s = 782;}

                        else if ( (LA153_352==MOD) && (synpred4_EsperEPL2Grammar())) {s = 783;}

                        else if ( (LA153_352==PLUS) && (synpred4_EsperEPL2Grammar())) {s = 784;}

                        else if ( (LA153_352==MINUS) && (synpred4_EsperEPL2Grammar())) {s = 785;}

                        else if ( (LA153_352==LOR) && (synpred4_EsperEPL2Grammar())) {s = 786;}

                        else if ( (LA153_352==LT) && (synpred4_EsperEPL2Grammar())) {s = 787;}

                        else if ( (LA153_352==GT) && (synpred4_EsperEPL2Grammar())) {s = 788;}

                        else if ( (LA153_352==LE) && (synpred4_EsperEPL2Grammar())) {s = 789;}

                        else if ( (LA153_352==GE) && (synpred4_EsperEPL2Grammar())) {s = 790;}

                        else if ( (LA153_352==EQUALS) && (synpred4_EsperEPL2Grammar())) {s = 791;}

                        else if ( (LA153_352==IS) && (synpred4_EsperEPL2Grammar())) {s = 792;}

                        else if ( (LA153_352==SQL_NE) && (synpred4_EsperEPL2Grammar())) {s = 793;}

                        else if ( (LA153_352==NOT_EQUAL) && (synpred4_EsperEPL2Grammar())) {s = 794;}

                        else if ( (LA153_352==BAND) && (synpred4_EsperEPL2Grammar())) {s = 795;}

                        else if ( (LA153_352==BOR) && (synpred4_EsperEPL2Grammar())) {s = 796;}

                        else if ( (LA153_352==BXOR) && (synpred4_EsperEPL2Grammar())) {s = 797;}

                        else if ( (LA153_352==AND_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 798;}

                        else if ( (LA153_352==OR_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 799;}

                        else if ( (LA153_352==GROUP) && (synpred4_EsperEPL2Grammar())) {s = 800;}

                        else if ( (LA153_352==HAVING) && (synpred4_EsperEPL2Grammar())) {s = 801;}

                        else if ( (LA153_352==OUTPUT) && (synpred4_EsperEPL2Grammar())) {s = 802;}

                        else if ( (LA153_352==ORDER) && (synpred4_EsperEPL2Grammar())) {s = 803;}

                        else if ( (LA153_352==ROW_LIMIT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 804;}

                        else if ( (LA153_352==EOF) && (synpred4_EsperEPL2Grammar())) {s = 805;}

                        else if ( (LA153_352==INSERT) && (synpred4_EsperEPL2Grammar())) {s = 806;}

                        else if ( (LA153_352==RPAREN) && (synpred4_EsperEPL2Grammar())) {s = 807;}

                        else if ( (LA153_352==COMMA) && (synpred4_EsperEPL2Grammar())) {s = 808;}

                        else if ( (LA153_352==AS) && (synpred4_EsperEPL2Grammar())) {s = 809;}

                        else if ( (LA153_352==FROM) && (synpred4_EsperEPL2Grammar())) {s = 810;}

                        else if ( (LA153_352==WHERE) && (synpred4_EsperEPL2Grammar())) {s = 811;}

                        else if ( (LA153_352==ASC) && (synpred4_EsperEPL2Grammar())) {s = 812;}

                        else if ( (LA153_352==DESC) && (synpred4_EsperEPL2Grammar())) {s = 813;}

                        else if ( (LA153_352==THEN) && (synpred4_EsperEPL2Grammar())) {s = 814;}

                        else if ( (LA153_352==ELSE) && (synpred4_EsperEPL2Grammar())) {s = 815;}

                        else if ( (LA153_352==END) && (synpred4_EsperEPL2Grammar())) {s = 816;}

                        else if ( (LA153_352==WHEN) && (synpred4_EsperEPL2Grammar())) {s = 817;}

                        else if ( (LA153_352==COLON) && (synpred4_EsperEPL2Grammar())) {s = 818;}

                        else if ( (LA153_352==RBRACK) && (synpred4_EsperEPL2Grammar())) {s = 819;}

                        else if ( (LA153_352==RCURLY) && (synpred4_EsperEPL2Grammar())) {s = 820;}

                        else if ( (LA153_352==TIMEPERIOD_SECONDS) && (synpred4_EsperEPL2Grammar())) {s = 821;}

                        else if ( (LA153_352==TIMEPERIOD_SECOND) && (synpred4_EsperEPL2Grammar())) {s = 822;}

                        else if ( (LA153_352==TIMEPERIOD_SEC) && (synpred4_EsperEPL2Grammar())) {s = 823;}

                        else if ( (LA153_352==NOT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 824;}

                        else if ( (LA153_352==IN_SET) && (synpred4_EsperEPL2Grammar())) {s = 825;}

                        else if ( (LA153_352==BETWEEN) && (synpred4_EsperEPL2Grammar())) {s = 826;}

                        else if ( (LA153_352==LIKE) && (synpred4_EsperEPL2Grammar())) {s = 827;}

                        else if ( (LA153_352==REGEXP) && (synpred4_EsperEPL2Grammar())) {s = 828;}

                        else if ( (LA153_352==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 829;}

                         
                        input.seek(index153_352);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA153_353 = input.LA(1);

                         
                        int index153_353 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA153_353==LPAREN) ) {s = 830;}

                        else if ( (LA153_353==ESCAPECHAR) && (synpred4_EsperEPL2Grammar())) {s = 831;}

                        else if ( (LA153_353==LBRACK) && (synpred4_EsperEPL2Grammar())) {s = 832;}

                        else if ( (LA153_353==QUESTION) && (synpred4_EsperEPL2Grammar())) {s = 833;}

                        else if ( (LA153_353==STAR) && (synpred4_EsperEPL2Grammar())) {s = 834;}

                        else if ( (LA153_353==DIV) && (synpred4_EsperEPL2Grammar())) {s = 835;}

                        else if ( (LA153_353==MOD) && (synpred4_EsperEPL2Grammar())) {s = 836;}

                        else if ( (LA153_353==PLUS) && (synpred4_EsperEPL2Grammar())) {s = 837;}

                        else if ( (LA153_353==MINUS) && (synpred4_EsperEPL2Grammar())) {s = 838;}

                        else if ( (LA153_353==LOR) && (synpred4_EsperEPL2Grammar())) {s = 839;}

                        else if ( (LA153_353==LT) && (synpred4_EsperEPL2Grammar())) {s = 840;}

                        else if ( (LA153_353==GT) && (synpred4_EsperEPL2Grammar())) {s = 841;}

                        else if ( (LA153_353==LE) && (synpred4_EsperEPL2Grammar())) {s = 842;}

                        else if ( (LA153_353==GE) && (synpred4_EsperEPL2Grammar())) {s = 843;}

                        else if ( (LA153_353==EQUALS) && (synpred4_EsperEPL2Grammar())) {s = 844;}

                        else if ( (LA153_353==IS) && (synpred4_EsperEPL2Grammar())) {s = 845;}

                        else if ( (LA153_353==SQL_NE) && (synpred4_EsperEPL2Grammar())) {s = 846;}

                        else if ( (LA153_353==NOT_EQUAL) && (synpred4_EsperEPL2Grammar())) {s = 847;}

                        else if ( (LA153_353==BAND) && (synpred4_EsperEPL2Grammar())) {s = 848;}

                        else if ( (LA153_353==BOR) && (synpred4_EsperEPL2Grammar())) {s = 849;}

                        else if ( (LA153_353==BXOR) && (synpred4_EsperEPL2Grammar())) {s = 850;}

                        else if ( (LA153_353==AND_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 851;}

                        else if ( (LA153_353==OR_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 852;}

                        else if ( (LA153_353==GROUP) && (synpred4_EsperEPL2Grammar())) {s = 853;}

                        else if ( (LA153_353==HAVING) && (synpred4_EsperEPL2Grammar())) {s = 854;}

                        else if ( (LA153_353==OUTPUT) && (synpred4_EsperEPL2Grammar())) {s = 855;}

                        else if ( (LA153_353==ORDER) && (synpred4_EsperEPL2Grammar())) {s = 856;}

                        else if ( (LA153_353==ROW_LIMIT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 857;}

                        else if ( (LA153_353==EOF) && (synpred4_EsperEPL2Grammar())) {s = 858;}

                        else if ( (LA153_353==INSERT) && (synpred4_EsperEPL2Grammar())) {s = 859;}

                        else if ( (LA153_353==RPAREN) && (synpred4_EsperEPL2Grammar())) {s = 860;}

                        else if ( (LA153_353==COMMA) && (synpred4_EsperEPL2Grammar())) {s = 861;}

                        else if ( (LA153_353==AS) && (synpred4_EsperEPL2Grammar())) {s = 862;}

                        else if ( (LA153_353==FROM) && (synpred4_EsperEPL2Grammar())) {s = 863;}

                        else if ( (LA153_353==WHERE) && (synpred4_EsperEPL2Grammar())) {s = 864;}

                        else if ( (LA153_353==ASC) && (synpred4_EsperEPL2Grammar())) {s = 865;}

                        else if ( (LA153_353==DESC) && (synpred4_EsperEPL2Grammar())) {s = 866;}

                        else if ( (LA153_353==THEN) && (synpred4_EsperEPL2Grammar())) {s = 867;}

                        else if ( (LA153_353==ELSE) && (synpred4_EsperEPL2Grammar())) {s = 868;}

                        else if ( (LA153_353==END) && (synpred4_EsperEPL2Grammar())) {s = 869;}

                        else if ( (LA153_353==WHEN) && (synpred4_EsperEPL2Grammar())) {s = 870;}

                        else if ( (LA153_353==COLON) && (synpred4_EsperEPL2Grammar())) {s = 871;}

                        else if ( (LA153_353==RBRACK) && (synpred4_EsperEPL2Grammar())) {s = 872;}

                        else if ( (LA153_353==RCURLY) && (synpred4_EsperEPL2Grammar())) {s = 873;}

                        else if ( (LA153_353==TIMEPERIOD_SECONDS) && (synpred4_EsperEPL2Grammar())) {s = 874;}

                        else if ( (LA153_353==TIMEPERIOD_SECOND) && (synpred4_EsperEPL2Grammar())) {s = 875;}

                        else if ( (LA153_353==TIMEPERIOD_SEC) && (synpred4_EsperEPL2Grammar())) {s = 876;}

                        else if ( (LA153_353==NOT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 877;}

                        else if ( (LA153_353==IN_SET) && (synpred4_EsperEPL2Grammar())) {s = 878;}

                        else if ( (LA153_353==BETWEEN) && (synpred4_EsperEPL2Grammar())) {s = 879;}

                        else if ( (LA153_353==LIKE) && (synpred4_EsperEPL2Grammar())) {s = 880;}

                        else if ( (LA153_353==REGEXP) && (synpred4_EsperEPL2Grammar())) {s = 881;}

                        else if ( (LA153_353==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 882;}

                        else if ( (LA153_353==DOT) && (synpred4_EsperEPL2Grammar())) {s = 883;}

                         
                        input.seek(index153_353);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA153_354 = input.LA(1);

                         
                        int index153_354 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA153_354==ESCAPECHAR) && (synpred4_EsperEPL2Grammar())) {s = 884;}

                        else if ( (LA153_354==LBRACK) && (synpred4_EsperEPL2Grammar())) {s = 885;}

                        else if ( (LA153_354==LPAREN) ) {s = 886;}

                        else if ( (LA153_354==QUESTION) && (synpred4_EsperEPL2Grammar())) {s = 887;}

                        else if ( (LA153_354==STAR) && (synpred4_EsperEPL2Grammar())) {s = 888;}

                        else if ( (LA153_354==DIV) && (synpred4_EsperEPL2Grammar())) {s = 889;}

                        else if ( (LA153_354==MOD) && (synpred4_EsperEPL2Grammar())) {s = 890;}

                        else if ( (LA153_354==PLUS) && (synpred4_EsperEPL2Grammar())) {s = 891;}

                        else if ( (LA153_354==MINUS) && (synpred4_EsperEPL2Grammar())) {s = 892;}

                        else if ( (LA153_354==LOR) && (synpred4_EsperEPL2Grammar())) {s = 893;}

                        else if ( (LA153_354==LT) && (synpred4_EsperEPL2Grammar())) {s = 894;}

                        else if ( (LA153_354==GT) && (synpred4_EsperEPL2Grammar())) {s = 895;}

                        else if ( (LA153_354==LE) && (synpred4_EsperEPL2Grammar())) {s = 896;}

                        else if ( (LA153_354==GE) && (synpred4_EsperEPL2Grammar())) {s = 897;}

                        else if ( (LA153_354==EQUALS) && (synpred4_EsperEPL2Grammar())) {s = 898;}

                        else if ( (LA153_354==IS) && (synpred4_EsperEPL2Grammar())) {s = 899;}

                        else if ( (LA153_354==SQL_NE) && (synpred4_EsperEPL2Grammar())) {s = 900;}

                        else if ( (LA153_354==NOT_EQUAL) && (synpred4_EsperEPL2Grammar())) {s = 901;}

                        else if ( (LA153_354==BAND) && (synpred4_EsperEPL2Grammar())) {s = 902;}

                        else if ( (LA153_354==BOR) && (synpred4_EsperEPL2Grammar())) {s = 903;}

                        else if ( (LA153_354==BXOR) && (synpred4_EsperEPL2Grammar())) {s = 904;}

                        else if ( (LA153_354==AND_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 905;}

                        else if ( (LA153_354==OR_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 906;}

                        else if ( (LA153_354==GROUP) && (synpred4_EsperEPL2Grammar())) {s = 907;}

                        else if ( (LA153_354==HAVING) && (synpred4_EsperEPL2Grammar())) {s = 908;}

                        else if ( (LA153_354==OUTPUT) && (synpred4_EsperEPL2Grammar())) {s = 909;}

                        else if ( (LA153_354==ORDER) && (synpred4_EsperEPL2Grammar())) {s = 910;}

                        else if ( (LA153_354==ROW_LIMIT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 911;}

                        else if ( (LA153_354==EOF) && (synpred4_EsperEPL2Grammar())) {s = 912;}

                        else if ( (LA153_354==INSERT) && (synpred4_EsperEPL2Grammar())) {s = 913;}

                        else if ( (LA153_354==RPAREN) && (synpred4_EsperEPL2Grammar())) {s = 914;}

                        else if ( (LA153_354==COMMA) && (synpred4_EsperEPL2Grammar())) {s = 915;}

                        else if ( (LA153_354==AS) && (synpred4_EsperEPL2Grammar())) {s = 916;}

                        else if ( (LA153_354==FROM) && (synpred4_EsperEPL2Grammar())) {s = 917;}

                        else if ( (LA153_354==WHERE) && (synpred4_EsperEPL2Grammar())) {s = 918;}

                        else if ( (LA153_354==ASC) && (synpred4_EsperEPL2Grammar())) {s = 919;}

                        else if ( (LA153_354==DESC) && (synpred4_EsperEPL2Grammar())) {s = 920;}

                        else if ( (LA153_354==THEN) && (synpred4_EsperEPL2Grammar())) {s = 921;}

                        else if ( (LA153_354==ELSE) && (synpred4_EsperEPL2Grammar())) {s = 922;}

                        else if ( (LA153_354==END) && (synpred4_EsperEPL2Grammar())) {s = 923;}

                        else if ( (LA153_354==WHEN) && (synpred4_EsperEPL2Grammar())) {s = 924;}

                        else if ( (LA153_354==COLON) && (synpred4_EsperEPL2Grammar())) {s = 925;}

                        else if ( (LA153_354==RBRACK) && (synpred4_EsperEPL2Grammar())) {s = 926;}

                        else if ( (LA153_354==RCURLY) && (synpred4_EsperEPL2Grammar())) {s = 927;}

                        else if ( (LA153_354==TIMEPERIOD_SECONDS) && (synpred4_EsperEPL2Grammar())) {s = 928;}

                        else if ( (LA153_354==TIMEPERIOD_SECOND) && (synpred4_EsperEPL2Grammar())) {s = 929;}

                        else if ( (LA153_354==TIMEPERIOD_SEC) && (synpred4_EsperEPL2Grammar())) {s = 930;}

                        else if ( (LA153_354==NOT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 931;}

                        else if ( (LA153_354==IN_SET) && (synpred4_EsperEPL2Grammar())) {s = 932;}

                        else if ( (LA153_354==BETWEEN) && (synpred4_EsperEPL2Grammar())) {s = 933;}

                        else if ( (LA153_354==LIKE) && (synpred4_EsperEPL2Grammar())) {s = 934;}

                        else if ( (LA153_354==REGEXP) && (synpred4_EsperEPL2Grammar())) {s = 935;}

                        else if ( (LA153_354==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 936;}

                        else if ( (LA153_354==DOT) && (synpred4_EsperEPL2Grammar())) {s = 937;}

                         
                        input.seek(index153_354);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA153_355 = input.LA(1);

                         
                        int index153_355 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA153_355==ESCAPECHAR) && (synpred4_EsperEPL2Grammar())) {s = 938;}

                        else if ( (LA153_355==LBRACK) && (synpred4_EsperEPL2Grammar())) {s = 939;}

                        else if ( (LA153_355==LPAREN) && (synpred4_EsperEPL2Grammar())) {s = 940;}

                        else if ( (LA153_355==QUESTION) && (synpred4_EsperEPL2Grammar())) {s = 941;}

                        else if ( (LA153_355==STAR) && (synpred4_EsperEPL2Grammar())) {s = 942;}

                        else if ( (LA153_355==DIV) && (synpred4_EsperEPL2Grammar())) {s = 943;}

                        else if ( (LA153_355==MOD) && (synpred4_EsperEPL2Grammar())) {s = 944;}

                        else if ( (LA153_355==PLUS) && (synpred4_EsperEPL2Grammar())) {s = 945;}

                        else if ( (LA153_355==MINUS) && (synpred4_EsperEPL2Grammar())) {s = 946;}

                        else if ( (LA153_355==LOR) && (synpred4_EsperEPL2Grammar())) {s = 947;}

                        else if ( (LA153_355==LT) && (synpred4_EsperEPL2Grammar())) {s = 948;}

                        else if ( (LA153_355==GT) && (synpred4_EsperEPL2Grammar())) {s = 949;}

                        else if ( (LA153_355==LE) && (synpred4_EsperEPL2Grammar())) {s = 950;}

                        else if ( (LA153_355==GE) && (synpred4_EsperEPL2Grammar())) {s = 951;}

                        else if ( (LA153_355==EQUALS) && (synpred4_EsperEPL2Grammar())) {s = 952;}

                        else if ( (LA153_355==IS) && (synpred4_EsperEPL2Grammar())) {s = 953;}

                        else if ( (LA153_355==SQL_NE) && (synpred4_EsperEPL2Grammar())) {s = 954;}

                        else if ( (LA153_355==NOT_EQUAL) && (synpred4_EsperEPL2Grammar())) {s = 955;}

                        else if ( (LA153_355==BAND) && (synpred4_EsperEPL2Grammar())) {s = 956;}

                        else if ( (LA153_355==BOR) && (synpred4_EsperEPL2Grammar())) {s = 957;}

                        else if ( (LA153_355==BXOR) && (synpred4_EsperEPL2Grammar())) {s = 958;}

                        else if ( (LA153_355==AND_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 959;}

                        else if ( (LA153_355==OR_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 960;}

                        else if ( (LA153_355==GROUP) && (synpred4_EsperEPL2Grammar())) {s = 961;}

                        else if ( (LA153_355==HAVING) && (synpred4_EsperEPL2Grammar())) {s = 962;}

                        else if ( (LA153_355==OUTPUT) && (synpred4_EsperEPL2Grammar())) {s = 963;}

                        else if ( (LA153_355==ORDER) && (synpred4_EsperEPL2Grammar())) {s = 964;}

                        else if ( (LA153_355==ROW_LIMIT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 965;}

                        else if ( (LA153_355==EOF) && (synpred4_EsperEPL2Grammar())) {s = 966;}

                        else if ( (LA153_355==INSERT) && (synpred4_EsperEPL2Grammar())) {s = 967;}

                        else if ( (LA153_355==RPAREN) && (synpred4_EsperEPL2Grammar())) {s = 968;}

                        else if ( (LA153_355==COMMA) && (synpred4_EsperEPL2Grammar())) {s = 969;}

                        else if ( (LA153_355==AS) && (synpred4_EsperEPL2Grammar())) {s = 970;}

                        else if ( (LA153_355==FROM) && (synpred4_EsperEPL2Grammar())) {s = 971;}

                        else if ( (LA153_355==WHERE) && (synpred4_EsperEPL2Grammar())) {s = 972;}

                        else if ( (LA153_355==ASC) && (synpred4_EsperEPL2Grammar())) {s = 973;}

                        else if ( (LA153_355==DESC) && (synpred4_EsperEPL2Grammar())) {s = 974;}

                        else if ( (LA153_355==THEN) && (synpred4_EsperEPL2Grammar())) {s = 975;}

                        else if ( (LA153_355==ELSE) && (synpred4_EsperEPL2Grammar())) {s = 976;}

                        else if ( (LA153_355==END) && (synpred4_EsperEPL2Grammar())) {s = 977;}

                        else if ( (LA153_355==WHEN) && (synpred4_EsperEPL2Grammar())) {s = 978;}

                        else if ( (LA153_355==COLON) && (synpred4_EsperEPL2Grammar())) {s = 979;}

                        else if ( (LA153_355==RBRACK) && (synpred4_EsperEPL2Grammar())) {s = 980;}

                        else if ( (LA153_355==RCURLY) && (synpred4_EsperEPL2Grammar())) {s = 981;}

                        else if ( (LA153_355==TIMEPERIOD_SECONDS) && (synpred4_EsperEPL2Grammar())) {s = 982;}

                        else if ( (LA153_355==TIMEPERIOD_SECOND) && (synpred4_EsperEPL2Grammar())) {s = 983;}

                        else if ( (LA153_355==TIMEPERIOD_SEC) && (synpred4_EsperEPL2Grammar())) {s = 984;}

                        else if ( (LA153_355==NOT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 985;}

                        else if ( (LA153_355==IN_SET) && (synpred4_EsperEPL2Grammar())) {s = 986;}

                        else if ( (LA153_355==BETWEEN) && (synpred4_EsperEPL2Grammar())) {s = 987;}

                        else if ( (LA153_355==LIKE) && (synpred4_EsperEPL2Grammar())) {s = 988;}

                        else if ( (LA153_355==REGEXP) && (synpred4_EsperEPL2Grammar())) {s = 989;}

                        else if ( (LA153_355==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 990;}

                        else if ( (LA153_355==DOT) ) {s = 991;}

                         
                        input.seek(index153_355);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA153_528 = input.LA(1);

                         
                        int index153_528 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 990;}

                        else if ( (true) ) {s = 257;}

                         
                        input.seek(index153_528);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA153_554 = input.LA(1);

                         
                        int index153_554 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 990;}

                        else if ( (true) ) {s = 257;}

                         
                        input.seek(index153_554);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA153_560 = input.LA(1);

                         
                        int index153_560 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 990;}

                        else if ( (true) ) {s = 257;}

                         
                        input.seek(index153_560);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA153_561 = input.LA(1);

                         
                        int index153_561 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 990;}

                        else if ( (true) ) {s = 257;}

                         
                        input.seek(index153_561);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA153_614 = input.LA(1);

                         
                        int index153_614 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 990;}

                        else if ( (true) ) {s = 257;}

                         
                        input.seek(index153_614);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA153_670 = input.LA(1);

                         
                        int index153_670 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 990;}

                        else if ( (true) ) {s = 257;}

                         
                        input.seek(index153_670);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA153_775 = input.LA(1);

                         
                        int index153_775 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 990;}

                        else if ( (true) ) {s = 257;}

                         
                        input.seek(index153_775);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA153_776 = input.LA(1);

                         
                        int index153_776 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 990;}

                        else if ( (true) ) {s = 257;}

                         
                        input.seek(index153_776);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA153_777 = input.LA(1);

                         
                        int index153_777 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 990;}

                        else if ( (true) ) {s = 257;}

                         
                        input.seek(index153_777);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA153_830 = input.LA(1);

                         
                        int index153_830 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 990;}

                        else if ( (true) ) {s = 257;}

                         
                        input.seek(index153_830);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA153_886 = input.LA(1);

                         
                        int index153_886 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 990;}

                        else if ( (true) ) {s = 257;}

                         
                        input.seek(index153_886);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA153_991 = input.LA(1);

                         
                        int index153_991 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 990;}

                        else if ( (true) ) {s = 257;}

                         
                        input.seek(index153_991);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA153_1012 = input.LA(1);

                         
                        int index153_1012 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 990;}

                        else if ( (true) ) {s = 257;}

                         
                        input.seek(index153_1012);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA153_1038 = input.LA(1);

                         
                        int index153_1038 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 990;}

                        else if ( (true) ) {s = 257;}

                         
                        input.seek(index153_1038);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA153_1064 = input.LA(1);

                         
                        int index153_1064 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 990;}

                        else if ( (true) ) {s = 257;}

                         
                        input.seek(index153_1064);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA153_1070 = input.LA(1);

                         
                        int index153_1070 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 990;}

                        else if ( (true) ) {s = 257;}

                         
                        input.seek(index153_1070);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 153, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA188_eotS =
        "\u0081\uffff";
    static final String DFA188_eofS =
        "\u0081\uffff";
    static final String DFA188_minS =
        "\1\5\1\uffff\1\6\67\uffff\1\5\106\uffff";
    static final String DFA188_maxS =
        "\1\u0105\1\uffff\1\u0102\67\uffff\1\u0103\106\uffff";
    static final String DFA188_acceptS =
        "\1\uffff\1\1\1\uffff\1\3\126\uffff\1\2\46\uffff";
    static final String DFA188_specialS =
        "\72\uffff\1\0\106\uffff}>";
    static final String[] DFA188_transitionS = {
            "\1\3\4\uffff\1\3\2\uffff\2\3\3\uffff\11\3\1\uffff\1\3\6\uffff"+
            "\1\3\1\uffff\4\3\12\uffff\3\3\10\uffff\16\3\1\uffff\1\3\1\uffff"+
            "\3\3\14\uffff\3\3\u0080\uffff\1\3\2\uffff\1\2\2\uffff\1\3\1"+
            "\uffff\1\1\3\uffff\2\3\12\uffff\2\3\2\uffff\1\3\1\uffff\1\3"+
            "\1\uffff\1\3\1\uffff\3\3",
            "",
            "\4\3\1\uffff\3\3\3\uffff\1\3\20\uffff\1\3\7\uffff\1\3\u00b8"+
            "\uffff\1\3\1\uffff\1\3\1\72\1\3\1\uffff\2\3\4\uffff\16\3\4\uffff"+
            "\2\3",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\3\4\uffff\1\3\3\uffff\1\3\3\uffff\11\3\10\uffff\1\3\1\uffff"+
            "\4\3\12\uffff\3\3\10\uffff\10\3\1\uffff\4\3\2\uffff\1\3\1\uffff"+
            "\3\3\u0092\uffff\1\3\4\uffff\1\132\31\uffff\1\3",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA188_eot = DFA.unpackEncodedString(DFA188_eotS);
    static final short[] DFA188_eof = DFA.unpackEncodedString(DFA188_eofS);
    static final char[] DFA188_min = DFA.unpackEncodedStringToUnsignedChars(DFA188_minS);
    static final char[] DFA188_max = DFA.unpackEncodedStringToUnsignedChars(DFA188_maxS);
    static final short[] DFA188_accept = DFA.unpackEncodedString(DFA188_acceptS);
    static final short[] DFA188_special = DFA.unpackEncodedString(DFA188_specialS);
    static final short[][] DFA188_transition;

    static {
        int numStates = DFA188_transitionS.length;
        DFA188_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA188_transition[i] = DFA.unpackEncodedString(DFA188_transitionS[i]);
        }
    }

    class DFA188 extends DFA {

        public DFA188(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 188;
            this.eot = DFA188_eot;
            this.eof = DFA188_eof;
            this.min = DFA188_min;
            this.max = DFA188_max;
            this.accept = DFA188_accept;
            this.special = DFA188_special;
            this.transition = DFA188_transition;
        }
        public String getDescription() {
            return "1207:1: propertySelectionListElement : (s= STAR -> PROPERTY_WILDCARD_SELECT[$s] | ( propertyStreamSelector )=> propertyStreamSelector | expression ( AS i= keywordAllowedIdent )? -> {identifier != null}? ^( PROPERTY_SELECTION_ELEMENT_EXPR expression IDENT[identifier] ) -> ^( PROPERTY_SELECTION_ELEMENT_EXPR expression ) );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA188_58 = input.LA(1);

                         
                        int index188_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA188_58==STAR) && (synpred5_EsperEPL2Grammar())) {s = 90;}

                        else if ( (LA188_58==WINDOW||LA188_58==ESCAPE||LA188_58==EVERY_EXPR||(LA188_58>=SUM && LA188_58<=COUNT)||LA188_58==OUTER||(LA188_58>=JOIN && LA188_58<=FULL)||(LA188_58>=EVENTS && LA188_58<=LAST)||(LA188_58>=UNIDIRECTIONAL && LA188_58<=PRIOR)||(LA188_58>=WEEKDAY && LA188_58<=CAST)||LA188_58==SNAPSHOT||(LA188_58>=VARIABLE && LA188_58<=AT)||LA188_58==IDENT||LA188_58==TICKED_STRING_LITERAL) ) {s = 3;}

                         
                        input.seek(index188_58);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 188, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA201_eotS =
        "\u0225\uffff";
    static final String DFA201_eofS =
        "\u0225\uffff";
    static final String DFA201_minS =
        "\1\5\2\0\6\6\60\uffff\1\u00e3\120\uffff\3\0\50\uffff\3\0\74\uffff"+
        "\3\0\52\uffff\3\0\25\uffff\3\0\56\uffff\3\0\u00b8\uffff";
    static final String DFA201_maxS =
        "\1\u0105\2\0\4\u00fc\1\u0102\1\u00fc\60\uffff\1\u00fb\120\uffff"+
        "\3\0\50\uffff\3\0\74\uffff\3\0\52\uffff\3\0\25\uffff\3\0\56\uffff"+
        "\3\0\u00b8\uffff";
    static final String DFA201_acceptS =
        "\11\uffff\60\4\1\uffff\1\11\44\uffff\1\1\44\uffff\1\2\1\7\1\5\3"+
        "\3\3\uffff\4\3\34\4\3\3\1\10\1\5\3\3\3\uffff\4\3\1\7\34\4\3\3\1"+
        "\10\2\3\25\4\3\uffff\7\4\1\5\10\3\1\10\1\7\3\3\25\4\3\uffff\7\4"+
        "\1\5\5\3\1\10\1\7\5\3\1\7\3\uffff\3\3\1\4\2\3\1\10\1\4\1\5\2\3\37"+
        "\4\1\7\3\3\3\uffff\4\3\1\10\1\5\3\3\34\4\1\6\1\12\u0091\uffff";
    static final String DFA201_specialS =
        "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\60\uffff\1\11\120\uffff\1"+
        "\12\1\13\1\14\50\uffff\1\15\1\16\1\17\74\uffff\1\20\1\21\1\22\52"+
        "\uffff\1\23\1\24\1\25\25\uffff\1\26\1\27\1\30\56\uffff\1\31\1\32"+
        "\1\33\u00b8\uffff}>";
    static final String[] DFA201_transitionS = {
            "\1\57\4\uffff\1\25\2\uffff\1\70\1\26\3\uffff\1\27\1\30\1\31"+
            "\1\32\1\33\1\34\1\35\1\36\1\24\1\uffff\1\11\6\uffff\1\62\1\uffff"+
            "\1\64\1\60\1\61\1\63\12\uffff\1\37\1\40\1\1\10\uffff\1\41\1"+
            "\42\1\43\1\45\1\46\1\47\1\50\1\51\1\65\1\52\1\2\1\53\1\54\1"+
            "\66\1\uffff\1\55\1\uffff\1\56\1\44\1\23\14\uffff\1\16\1\17\1"+
            "\20\u0080\uffff\1\6\2\uffff\1\7\2\uffff\1\21\1\uffff\1\71\1"+
            "\72\2\uffff\1\14\1\15\12\uffff\1\13\1\12\2\uffff\1\67\1\uffff"+
            "\1\3\1\uffff\1\10\1\uffff\1\22\1\4\1\5",
            "\1\uffff",
            "\1\uffff",
            "\1\u00a9\1\u00aa\1\u00ab\1\u00ac\1\uffff\1\u00a3\1\u00a2\1"+
            "\u00a8\7\uffff\1\u00af\24\uffff\1\u009c\12\uffff\1\u0085\3\uffff"+
            "\1\u00a4\1\u00a5\14\uffff\1\u00b0\12\uffff\1\u008e\1\u008d\1"+
            "\u0090\1\u008f\1\u00ae\1\u00ad\1\u008c\1\u008b\1\u008a\1\u0089"+
            "\1\u0088\1\u0087\u0085\uffff\1\u00a6\1\uffff\1\u009b\2\uffff"+
            "\1\u00a7\1\u0091\2\uffff\1\u0086\2\uffff\1\u009f\1\u00a0\1\u00a1"+
            "\1\u009d\1\u009e\1\u0097\1\u0098\1\u0099\1\u009a\1\u0096\1\u0094"+
            "\1\u0095\1\u0092\1\u0093",
            "\1\u00d5\1\u00d6\1\u00d7\1\u00d8\1\uffff\1\u00cf\1\u00ce\1"+
            "\u00d4\7\uffff\1\u00db\24\uffff\1\u00c8\12\uffff\1\u00bc\3\uffff"+
            "\1\u00d0\1\u00d1\14\uffff\1\u00dc\12\uffff\1\u00bb\1\u00ba\1"+
            "\u00b9\1\u00b8\1\u00da\1\u00d9\1\u00b7\1\u00b6\1\u00b5\1\u00b4"+
            "\1\u00b3\1\u00b2\u0085\uffff\1\u00d2\1\uffff\1\u00c7\2\uffff"+
            "\1\u00d3\1\u00bd\2\uffff\1\u00b1\2\uffff\1\u00cb\1\u00cc\1\u00cd"+
            "\1\u00c9\1\u00ca\1\u00c3\1\u00c4\1\u00c5\1\u00c6\1\u00c2\1\u00c0"+
            "\1\u00c1\1\u00be\1\u00bf",
            "\1\u00fa\1\u00fb\1\u00fc\1\u00fd\1\uffff\1\u00f1\1\u00f0\1"+
            "\u00f9\7\uffff\1\u0106\24\uffff\1\u00ea\12\uffff\1\u0108\3\uffff"+
            "\1\u00f2\1\u00f3\14\uffff\1\u0107\12\uffff\1\u0103\1\u0102\1"+
            "\u00de\1\u00dd\1\u0105\1\u0104\1\u00f6\1\u00f5\1\u00f4\1\u0101"+
            "\1\u0100\1\u00ff\u0085\uffff\1\u00f7\1\uffff\1\u00e9\2\uffff"+
            "\1\u00f8\1\u00df\2\uffff\1\u00fe\2\uffff\1\u00ed\1\u00ee\1\u00ef"+
            "\1\u00eb\1\u00ec\1\u00e5\1\u00e6\1\u00e7\1\u00e8\1\u00e4\1\u00e2"+
            "\1\u00e3\1\u00e0\1\u00e1",
            "\1\u0127\1\u0128\1\u0129\1\u012a\1\uffff\1\u011e\1\u011d\1"+
            "\u0126\7\uffff\1\u010b\24\uffff\1\u0117\12\uffff\1\u0132\3\uffff"+
            "\1\u011f\1\u0120\14\uffff\1\u0131\12\uffff\1\u0130\1\u012f\1"+
            "\u0134\1\u0133\1\u010a\1\u0109\1\u0123\1\u0122\1\u0121\1\u012e"+
            "\1\u012d\1\u012c\u0085\uffff\1\u0124\1\uffff\1\u0116\2\uffff"+
            "\1\u0125\1\u010c\2\uffff\1\u012b\2\uffff\1\u011a\1\u011b\1\u011c"+
            "\1\u0118\1\u0119\1\u0112\1\u0113\1\u0114\1\u0115\1\u0111\1\u010f"+
            "\1\u0110\1\u010d\1\u010e",
            "\1\u0162\1\u0163\1\u0164\1\u0165\1\uffff\1\u015c\1\u015b\1"+
            "\u0161\7\uffff\1\u013e\24\uffff\1\u0155\12\uffff\1\u0138\3\uffff"+
            "\1\u015d\1\u015e\14\uffff\1\u0142\12\uffff\1\u0141\1\u0140\1"+
            "\u0146\1\u0145\1\u013d\1\u013c\1\u013b\1\u013a\1\u0139\1\u0137"+
            "\1\u0136\1\u0135\u0085\uffff\1\u015f\1\uffff\1\u0154\1\u0143"+
            "\1\u013f\1\u0160\1\u014a\1\u0148\1\uffff\1\u0144\2\uffff\1\u0158"+
            "\1\u0159\1\u015a\1\u0156\1\u0157\1\u0150\1\u0151\1\u0152\1\u0153"+
            "\1\u014f\1\u014d\1\u014e\1\u014b\1\u014c\4\uffff\1\u0149\1\u0147",
            "\1\u018e\1\u018f\1\u0190\1\u0191\1\uffff\1\u0188\1\u0187\1"+
            "\u018d\7\uffff\1\u0175\24\uffff\1\u0181\12\uffff\1\u0166\3\uffff"+
            "\1\u0189\1\u018a\14\uffff\1\u0171\12\uffff\1\u016e\1\u016d\1"+
            "\u0170\1\u016f\1\u0174\1\u0173\1\u016c\1\u016b\1\u016a\1\u0169"+
            "\1\u0168\1\u0167\u0085\uffff\1\u018b\1\uffff\1\u0180\2\uffff"+
            "\1\u018c\1\u0176\2\uffff\1\u0172\2\uffff\1\u0184\1\u0185\1\u0186"+
            "\1\u0182\1\u0183\1\u017c\1\u017d\1\u017e\1\u017f\1\u017b\1\u0179"+
            "\1\u017a\1\u0177\1\u0178",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0193\4\uffff\1\u0193\22\uffff\1\u0192",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA201_eot = DFA.unpackEncodedString(DFA201_eotS);
    static final short[] DFA201_eof = DFA.unpackEncodedString(DFA201_eofS);
    static final char[] DFA201_min = DFA.unpackEncodedStringToUnsignedChars(DFA201_minS);
    static final char[] DFA201_max = DFA.unpackEncodedStringToUnsignedChars(DFA201_maxS);
    static final short[] DFA201_accept = DFA.unpackEncodedString(DFA201_acceptS);
    static final short[] DFA201_special = DFA.unpackEncodedString(DFA201_specialS);
    static final short[][] DFA201_transition;

    static {
        int numStates = DFA201_transitionS.length;
        DFA201_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA201_transition[i] = DFA.unpackEncodedString(DFA201_transitionS[i]);
        }
    }

    class DFA201 extends DFA {

        public DFA201(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 201;
            this.eot = DFA201_eot;
            this.eof = DFA201_eof;
            this.min = DFA201_min;
            this.max = DFA201_max;
            this.accept = DFA201_accept;
            this.special = DFA201_special;
            this.transition = DFA201_transition;
        }
        public String getDescription() {
            return "1270:1: expressionWithTime : ( ( lastOperand )=> lastOperand | ( lastWeekdayOperand )=> lastWeekdayOperand | ( timePeriod )=> timePeriod | ( expressionQualifyable )=> expressionQualifyable | ( rangeOperand )=> rangeOperand | ( frequencyOperand )=> frequencyOperand | ( lastOperator )=> lastOperator | ( weekDayOperator )=> weekDayOperator | ( numericParameterList )=> numericParameterList | numberSetStar );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA201_0 = input.LA(1);

                         
                        int index201_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA201_0==LAST) ) {s = 1;}

                        else if ( (LA201_0==LW) ) {s = 2;}

                        else if ( (LA201_0==NUM_INT) ) {s = 3;}

                        else if ( (LA201_0==NUM_LONG) ) {s = 4;}

                        else if ( (LA201_0==NUM_FLOAT) ) {s = 5;}

                        else if ( (LA201_0==NUM_DOUBLE) ) {s = 6;}

                        else if ( (LA201_0==IDENT) ) {s = 7;}

                        else if ( (LA201_0==QUESTION) ) {s = 8;}

                        else if ( (LA201_0==CASE) && (synpred9_EsperEPL2Grammar())) {s = 9;}

                        else if ( (LA201_0==MINUS) && (synpred9_EsperEPL2Grammar())) {s = 10;}

                        else if ( (LA201_0==PLUS) && (synpred9_EsperEPL2Grammar())) {s = 11;}

                        else if ( (LA201_0==STRING_LITERAL) && (synpred9_EsperEPL2Grammar())) {s = 12;}

                        else if ( (LA201_0==QUOTED_STRING_LITERAL) && (synpred9_EsperEPL2Grammar())) {s = 13;}

                        else if ( (LA201_0==BOOLEAN_TRUE) && (synpred9_EsperEPL2Grammar())) {s = 14;}

                        else if ( (LA201_0==BOOLEAN_FALSE) && (synpred9_EsperEPL2Grammar())) {s = 15;}

                        else if ( (LA201_0==VALUE_NULL) && (synpred9_EsperEPL2Grammar())) {s = 16;}

                        else if ( (LA201_0==LPAREN) && (synpred9_EsperEPL2Grammar())) {s = 17;}

                        else if ( (LA201_0==TICKED_STRING_LITERAL) && (synpred9_EsperEPL2Grammar())) {s = 18;}

                        else if ( (LA201_0==AT) && (synpred9_EsperEPL2Grammar())) {s = 19;}

                        else if ( (LA201_0==COUNT) && (synpred9_EsperEPL2Grammar())) {s = 20;}

                        else if ( (LA201_0==ESCAPE) && (synpred9_EsperEPL2Grammar())) {s = 21;}

                        else if ( (LA201_0==EVERY_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 22;}

                        else if ( (LA201_0==SUM) && (synpred9_EsperEPL2Grammar())) {s = 23;}

                        else if ( (LA201_0==AVG) && (synpred9_EsperEPL2Grammar())) {s = 24;}

                        else if ( (LA201_0==MAX) && (synpred9_EsperEPL2Grammar())) {s = 25;}

                        else if ( (LA201_0==MIN) && (synpred9_EsperEPL2Grammar())) {s = 26;}

                        else if ( (LA201_0==COALESCE) && (synpred9_EsperEPL2Grammar())) {s = 27;}

                        else if ( (LA201_0==MEDIAN) && (synpred9_EsperEPL2Grammar())) {s = 28;}

                        else if ( (LA201_0==STDDEV) && (synpred9_EsperEPL2Grammar())) {s = 29;}

                        else if ( (LA201_0==AVEDEV) && (synpred9_EsperEPL2Grammar())) {s = 30;}

                        else if ( (LA201_0==EVENTS) && (synpred9_EsperEPL2Grammar())) {s = 31;}

                        else if ( (LA201_0==FIRST) && (synpred9_EsperEPL2Grammar())) {s = 32;}

                        else if ( (LA201_0==UNIDIRECTIONAL) && (synpred9_EsperEPL2Grammar())) {s = 33;}

                        else if ( (LA201_0==RETAINUNION) && (synpred9_EsperEPL2Grammar())) {s = 34;}

                        else if ( (LA201_0==RETAININTERSECTION) && (synpred9_EsperEPL2Grammar())) {s = 35;}

                        else if ( (LA201_0==UNTIL) && (synpred9_EsperEPL2Grammar())) {s = 36;}

                        else if ( (LA201_0==PATTERN) && (synpred9_EsperEPL2Grammar())) {s = 37;}

                        else if ( (LA201_0==SQL) && (synpred9_EsperEPL2Grammar())) {s = 38;}

                        else if ( (LA201_0==METADATASQL) && (synpred9_EsperEPL2Grammar())) {s = 39;}

                        else if ( (LA201_0==PREVIOUS) && (synpred9_EsperEPL2Grammar())) {s = 40;}

                        else if ( (LA201_0==PRIOR) && (synpred9_EsperEPL2Grammar())) {s = 41;}

                        else if ( (LA201_0==WEEKDAY) && (synpred9_EsperEPL2Grammar())) {s = 42;}

                        else if ( (LA201_0==INSTANCEOF) && (synpred9_EsperEPL2Grammar())) {s = 43;}

                        else if ( (LA201_0==CAST) && (synpred9_EsperEPL2Grammar())) {s = 44;}

                        else if ( (LA201_0==SNAPSHOT) && (synpred9_EsperEPL2Grammar())) {s = 45;}

                        else if ( (LA201_0==VARIABLE) && (synpred9_EsperEPL2Grammar())) {s = 46;}

                        else if ( (LA201_0==WINDOW) && (synpred9_EsperEPL2Grammar())) {s = 47;}

                        else if ( (LA201_0==LEFT) && (synpred9_EsperEPL2Grammar())) {s = 48;}

                        else if ( (LA201_0==RIGHT) && (synpred9_EsperEPL2Grammar())) {s = 49;}

                        else if ( (LA201_0==OUTER) && (synpred9_EsperEPL2Grammar())) {s = 50;}

                        else if ( (LA201_0==FULL) && (synpred9_EsperEPL2Grammar())) {s = 51;}

                        else if ( (LA201_0==JOIN) && (synpred9_EsperEPL2Grammar())) {s = 52;}

                        else if ( (LA201_0==EXISTS) && (synpred9_EsperEPL2Grammar())) {s = 53;}

                        else if ( (LA201_0==CURRENT_TIMESTAMP) && (synpred9_EsperEPL2Grammar())) {s = 54;}

                        else if ( (LA201_0==LCURLY) && (synpred9_EsperEPL2Grammar())) {s = 55;}

                        else if ( (LA201_0==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 56;}

                        else if ( (LA201_0==STAR) ) {s = 57;}

                        else if ( (LA201_0==LBRACK) && (synpred14_EsperEPL2Grammar())) {s = 58;}

                         
                        input.seek(index201_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA201_1 = input.LA(1);

                         
                        int index201_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_EsperEPL2Grammar()) ) {s = 95;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 56;}

                         
                        input.seek(index201_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA201_2 = input.LA(1);

                         
                        int index201_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_EsperEPL2Grammar()) ) {s = 132;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 56;}

                         
                        input.seek(index201_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA201_3 = input.LA(1);

                         
                        int index201_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA201_3==LAST) && (synpred12_EsperEPL2Grammar())) {s = 133;}

                        else if ( (LA201_3==COLON) && (synpred10_EsperEPL2Grammar())) {s = 134;}

                        else if ( (LA201_3==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {s = 135;}

                        else if ( (LA201_3==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {s = 136;}

                        else if ( (LA201_3==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {s = 137;}

                        else if ( (LA201_3==TIMEPERIOD_SECONDS) ) {s = 138;}

                        else if ( (LA201_3==TIMEPERIOD_SECOND) ) {s = 139;}

                        else if ( (LA201_3==TIMEPERIOD_SEC) ) {s = 140;}

                        else if ( (LA201_3==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {s = 141;}

                        else if ( (LA201_3==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {s = 142;}

                        else if ( (LA201_3==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {s = 143;}

                        else if ( (LA201_3==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {s = 144;}

                        else if ( (LA201_3==STAR) && (synpred9_EsperEPL2Grammar())) {s = 145;}

                        else if ( (LA201_3==DIV) && (synpred9_EsperEPL2Grammar())) {s = 146;}

                        else if ( (LA201_3==MOD) && (synpred9_EsperEPL2Grammar())) {s = 147;}

                        else if ( (LA201_3==PLUS) && (synpred9_EsperEPL2Grammar())) {s = 148;}

                        else if ( (LA201_3==MINUS) && (synpred9_EsperEPL2Grammar())) {s = 149;}

                        else if ( (LA201_3==LOR) && (synpred9_EsperEPL2Grammar())) {s = 150;}

                        else if ( (LA201_3==LT) && (synpred9_EsperEPL2Grammar())) {s = 151;}

                        else if ( (LA201_3==GT) && (synpred9_EsperEPL2Grammar())) {s = 152;}

                        else if ( (LA201_3==LE) && (synpred9_EsperEPL2Grammar())) {s = 153;}

                        else if ( (LA201_3==GE) && (synpred9_EsperEPL2Grammar())) {s = 154;}

                        else if ( (LA201_3==EQUALS) && (synpred9_EsperEPL2Grammar())) {s = 155;}

                        else if ( (LA201_3==IS) && (synpred9_EsperEPL2Grammar())) {s = 156;}

                        else if ( (LA201_3==SQL_NE) && (synpred9_EsperEPL2Grammar())) {s = 157;}

                        else if ( (LA201_3==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {s = 158;}

                        else if ( (LA201_3==BAND) && (synpred9_EsperEPL2Grammar())) {s = 159;}

                        else if ( (LA201_3==BOR) && (synpred9_EsperEPL2Grammar())) {s = 160;}

                        else if ( (LA201_3==BXOR) && (synpred9_EsperEPL2Grammar())) {s = 161;}

                        else if ( (LA201_3==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 162;}

                        else if ( (LA201_3==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 163;}

                        else if ( (LA201_3==ASC) && (synpred9_EsperEPL2Grammar())) {s = 164;}

                        else if ( (LA201_3==DESC) && (synpred9_EsperEPL2Grammar())) {s = 165;}

                        else if ( (LA201_3==COMMA) && (synpred9_EsperEPL2Grammar())) {s = 166;}

                        else if ( (LA201_3==RPAREN) && (synpred9_EsperEPL2Grammar())) {s = 167;}

                        else if ( (LA201_3==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 168;}

                        else if ( (LA201_3==IN_SET) && (synpred9_EsperEPL2Grammar())) {s = 169;}

                        else if ( (LA201_3==BETWEEN) && (synpred9_EsperEPL2Grammar())) {s = 170;}

                        else if ( (LA201_3==LIKE) && (synpred9_EsperEPL2Grammar())) {s = 171;}

                        else if ( (LA201_3==REGEXP) && (synpred9_EsperEPL2Grammar())) {s = 172;}

                        else if ( (LA201_3==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {s = 173;}

                        else if ( (LA201_3==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {s = 174;}

                        else if ( (LA201_3==MIN) && (synpred8_EsperEPL2Grammar())) {s = 175;}

                        else if ( (LA201_3==WEEKDAY) && (synpred13_EsperEPL2Grammar())) {s = 176;}

                         
                        input.seek(index201_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA201_4 = input.LA(1);

                         
                        int index201_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA201_4==COLON) && (synpred10_EsperEPL2Grammar())) {s = 177;}

                        else if ( (LA201_4==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {s = 178;}

                        else if ( (LA201_4==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {s = 179;}

                        else if ( (LA201_4==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {s = 180;}

                        else if ( (LA201_4==TIMEPERIOD_SECONDS) ) {s = 181;}

                        else if ( (LA201_4==TIMEPERIOD_SECOND) ) {s = 182;}

                        else if ( (LA201_4==TIMEPERIOD_SEC) ) {s = 183;}

                        else if ( (LA201_4==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {s = 184;}

                        else if ( (LA201_4==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {s = 185;}

                        else if ( (LA201_4==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {s = 186;}

                        else if ( (LA201_4==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {s = 187;}

                        else if ( (LA201_4==LAST) && (synpred12_EsperEPL2Grammar())) {s = 188;}

                        else if ( (LA201_4==STAR) && (synpred9_EsperEPL2Grammar())) {s = 189;}

                        else if ( (LA201_4==DIV) && (synpred9_EsperEPL2Grammar())) {s = 190;}

                        else if ( (LA201_4==MOD) && (synpred9_EsperEPL2Grammar())) {s = 191;}

                        else if ( (LA201_4==PLUS) && (synpred9_EsperEPL2Grammar())) {s = 192;}

                        else if ( (LA201_4==MINUS) && (synpred9_EsperEPL2Grammar())) {s = 193;}

                        else if ( (LA201_4==LOR) && (synpred9_EsperEPL2Grammar())) {s = 194;}

                        else if ( (LA201_4==LT) && (synpred9_EsperEPL2Grammar())) {s = 195;}

                        else if ( (LA201_4==GT) && (synpred9_EsperEPL2Grammar())) {s = 196;}

                        else if ( (LA201_4==LE) && (synpred9_EsperEPL2Grammar())) {s = 197;}

                        else if ( (LA201_4==GE) && (synpred9_EsperEPL2Grammar())) {s = 198;}

                        else if ( (LA201_4==EQUALS) && (synpred9_EsperEPL2Grammar())) {s = 199;}

                        else if ( (LA201_4==IS) && (synpred9_EsperEPL2Grammar())) {s = 200;}

                        else if ( (LA201_4==SQL_NE) && (synpred9_EsperEPL2Grammar())) {s = 201;}

                        else if ( (LA201_4==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {s = 202;}

                        else if ( (LA201_4==BAND) && (synpred9_EsperEPL2Grammar())) {s = 203;}

                        else if ( (LA201_4==BOR) && (synpred9_EsperEPL2Grammar())) {s = 204;}

                        else if ( (LA201_4==BXOR) && (synpred9_EsperEPL2Grammar())) {s = 205;}

                        else if ( (LA201_4==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 206;}

                        else if ( (LA201_4==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 207;}

                        else if ( (LA201_4==ASC) && (synpred9_EsperEPL2Grammar())) {s = 208;}

                        else if ( (LA201_4==DESC) && (synpred9_EsperEPL2Grammar())) {s = 209;}

                        else if ( (LA201_4==COMMA) && (synpred9_EsperEPL2Grammar())) {s = 210;}

                        else if ( (LA201_4==RPAREN) && (synpred9_EsperEPL2Grammar())) {s = 211;}

                        else if ( (LA201_4==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 212;}

                        else if ( (LA201_4==IN_SET) && (synpred9_EsperEPL2Grammar())) {s = 213;}

                        else if ( (LA201_4==BETWEEN) && (synpred9_EsperEPL2Grammar())) {s = 214;}

                        else if ( (LA201_4==LIKE) && (synpred9_EsperEPL2Grammar())) {s = 215;}

                        else if ( (LA201_4==REGEXP) && (synpred9_EsperEPL2Grammar())) {s = 216;}

                        else if ( (LA201_4==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {s = 217;}

                        else if ( (LA201_4==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {s = 218;}

                        else if ( (LA201_4==MIN) && (synpred8_EsperEPL2Grammar())) {s = 219;}

                        else if ( (LA201_4==WEEKDAY) && (synpred13_EsperEPL2Grammar())) {s = 220;}

                         
                        input.seek(index201_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA201_5 = input.LA(1);

                         
                        int index201_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA201_5==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {s = 221;}

                        else if ( (LA201_5==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {s = 222;}

                        else if ( (LA201_5==STAR) && (synpred9_EsperEPL2Grammar())) {s = 223;}

                        else if ( (LA201_5==DIV) && (synpred9_EsperEPL2Grammar())) {s = 224;}

                        else if ( (LA201_5==MOD) && (synpred9_EsperEPL2Grammar())) {s = 225;}

                        else if ( (LA201_5==PLUS) && (synpred9_EsperEPL2Grammar())) {s = 226;}

                        else if ( (LA201_5==MINUS) && (synpred9_EsperEPL2Grammar())) {s = 227;}

                        else if ( (LA201_5==LOR) && (synpred9_EsperEPL2Grammar())) {s = 228;}

                        else if ( (LA201_5==LT) && (synpred9_EsperEPL2Grammar())) {s = 229;}

                        else if ( (LA201_5==GT) && (synpred9_EsperEPL2Grammar())) {s = 230;}

                        else if ( (LA201_5==LE) && (synpred9_EsperEPL2Grammar())) {s = 231;}

                        else if ( (LA201_5==GE) && (synpred9_EsperEPL2Grammar())) {s = 232;}

                        else if ( (LA201_5==EQUALS) && (synpred9_EsperEPL2Grammar())) {s = 233;}

                        else if ( (LA201_5==IS) && (synpred9_EsperEPL2Grammar())) {s = 234;}

                        else if ( (LA201_5==SQL_NE) && (synpred9_EsperEPL2Grammar())) {s = 235;}

                        else if ( (LA201_5==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {s = 236;}

                        else if ( (LA201_5==BAND) && (synpred9_EsperEPL2Grammar())) {s = 237;}

                        else if ( (LA201_5==BOR) && (synpred9_EsperEPL2Grammar())) {s = 238;}

                        else if ( (LA201_5==BXOR) && (synpred9_EsperEPL2Grammar())) {s = 239;}

                        else if ( (LA201_5==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 240;}

                        else if ( (LA201_5==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 241;}

                        else if ( (LA201_5==ASC) && (synpred9_EsperEPL2Grammar())) {s = 242;}

                        else if ( (LA201_5==DESC) && (synpred9_EsperEPL2Grammar())) {s = 243;}

                        else if ( (LA201_5==TIMEPERIOD_SECONDS) ) {s = 244;}

                        else if ( (LA201_5==TIMEPERIOD_SECOND) ) {s = 245;}

                        else if ( (LA201_5==TIMEPERIOD_SEC) ) {s = 246;}

                        else if ( (LA201_5==COMMA) && (synpred9_EsperEPL2Grammar())) {s = 247;}

                        else if ( (LA201_5==RPAREN) && (synpred9_EsperEPL2Grammar())) {s = 248;}

                        else if ( (LA201_5==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 249;}

                        else if ( (LA201_5==IN_SET) && (synpred9_EsperEPL2Grammar())) {s = 250;}

                        else if ( (LA201_5==BETWEEN) && (synpred9_EsperEPL2Grammar())) {s = 251;}

                        else if ( (LA201_5==LIKE) && (synpred9_EsperEPL2Grammar())) {s = 252;}

                        else if ( (LA201_5==REGEXP) && (synpred9_EsperEPL2Grammar())) {s = 253;}

                        else if ( (LA201_5==COLON) && (synpred10_EsperEPL2Grammar())) {s = 254;}

                        else if ( (LA201_5==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {s = 255;}

                        else if ( (LA201_5==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {s = 256;}

                        else if ( (LA201_5==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {s = 257;}

                        else if ( (LA201_5==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {s = 258;}

                        else if ( (LA201_5==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {s = 259;}

                        else if ( (LA201_5==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {s = 260;}

                        else if ( (LA201_5==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {s = 261;}

                        else if ( (LA201_5==MIN) && (synpred8_EsperEPL2Grammar())) {s = 262;}

                        else if ( (LA201_5==WEEKDAY) && (synpred13_EsperEPL2Grammar())) {s = 263;}

                        else if ( (LA201_5==LAST) && (synpred12_EsperEPL2Grammar())) {s = 264;}

                         
                        input.seek(index201_5);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA201_6 = input.LA(1);

                         
                        int index201_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA201_6==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {s = 265;}

                        else if ( (LA201_6==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {s = 266;}

                        else if ( (LA201_6==MIN) && (synpred8_EsperEPL2Grammar())) {s = 267;}

                        else if ( (LA201_6==STAR) && (synpred9_EsperEPL2Grammar())) {s = 268;}

                        else if ( (LA201_6==DIV) && (synpred9_EsperEPL2Grammar())) {s = 269;}

                        else if ( (LA201_6==MOD) && (synpred9_EsperEPL2Grammar())) {s = 270;}

                        else if ( (LA201_6==PLUS) && (synpred9_EsperEPL2Grammar())) {s = 271;}

                        else if ( (LA201_6==MINUS) && (synpred9_EsperEPL2Grammar())) {s = 272;}

                        else if ( (LA201_6==LOR) && (synpred9_EsperEPL2Grammar())) {s = 273;}

                        else if ( (LA201_6==LT) && (synpred9_EsperEPL2Grammar())) {s = 274;}

                        else if ( (LA201_6==GT) && (synpred9_EsperEPL2Grammar())) {s = 275;}

                        else if ( (LA201_6==LE) && (synpred9_EsperEPL2Grammar())) {s = 276;}

                        else if ( (LA201_6==GE) && (synpred9_EsperEPL2Grammar())) {s = 277;}

                        else if ( (LA201_6==EQUALS) && (synpred9_EsperEPL2Grammar())) {s = 278;}

                        else if ( (LA201_6==IS) && (synpred9_EsperEPL2Grammar())) {s = 279;}

                        else if ( (LA201_6==SQL_NE) && (synpred9_EsperEPL2Grammar())) {s = 280;}

                        else if ( (LA201_6==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {s = 281;}

                        else if ( (LA201_6==BAND) && (synpred9_EsperEPL2Grammar())) {s = 282;}

                        else if ( (LA201_6==BOR) && (synpred9_EsperEPL2Grammar())) {s = 283;}

                        else if ( (LA201_6==BXOR) && (synpred9_EsperEPL2Grammar())) {s = 284;}

                        else if ( (LA201_6==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 285;}

                        else if ( (LA201_6==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 286;}

                        else if ( (LA201_6==ASC) && (synpred9_EsperEPL2Grammar())) {s = 287;}

                        else if ( (LA201_6==DESC) && (synpred9_EsperEPL2Grammar())) {s = 288;}

                        else if ( (LA201_6==TIMEPERIOD_SECONDS) ) {s = 289;}

                        else if ( (LA201_6==TIMEPERIOD_SECOND) ) {s = 290;}

                        else if ( (LA201_6==TIMEPERIOD_SEC) ) {s = 291;}

                        else if ( (LA201_6==COMMA) && (synpred9_EsperEPL2Grammar())) {s = 292;}

                        else if ( (LA201_6==RPAREN) && (synpred9_EsperEPL2Grammar())) {s = 293;}

                        else if ( (LA201_6==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 294;}

                        else if ( (LA201_6==IN_SET) && (synpred9_EsperEPL2Grammar())) {s = 295;}

                        else if ( (LA201_6==BETWEEN) && (synpred9_EsperEPL2Grammar())) {s = 296;}

                        else if ( (LA201_6==LIKE) && (synpred9_EsperEPL2Grammar())) {s = 297;}

                        else if ( (LA201_6==REGEXP) && (synpred9_EsperEPL2Grammar())) {s = 298;}

                        else if ( (LA201_6==COLON) && (synpred10_EsperEPL2Grammar())) {s = 299;}

                        else if ( (LA201_6==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {s = 300;}

                        else if ( (LA201_6==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {s = 301;}

                        else if ( (LA201_6==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {s = 302;}

                        else if ( (LA201_6==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {s = 303;}

                        else if ( (LA201_6==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {s = 304;}

                        else if ( (LA201_6==WEEKDAY) && (synpred13_EsperEPL2Grammar())) {s = 305;}

                        else if ( (LA201_6==LAST) && (synpred12_EsperEPL2Grammar())) {s = 306;}

                        else if ( (LA201_6==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {s = 307;}

                        else if ( (LA201_6==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {s = 308;}

                         
                        input.seek(index201_6);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA201_7 = input.LA(1);

                         
                        int index201_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA201_7==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {s = 309;}

                        else if ( (LA201_7==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {s = 310;}

                        else if ( (LA201_7==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {s = 311;}

                        else if ( (LA201_7==LAST) && (synpred12_EsperEPL2Grammar())) {s = 312;}

                        else if ( (LA201_7==TIMEPERIOD_SECONDS) ) {s = 313;}

                        else if ( (LA201_7==TIMEPERIOD_SECOND) ) {s = 314;}

                        else if ( (LA201_7==TIMEPERIOD_SEC) ) {s = 315;}

                        else if ( (LA201_7==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {s = 316;}

                        else if ( (LA201_7==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {s = 317;}

                        else if ( (LA201_7==MIN) && (synpred8_EsperEPL2Grammar())) {s = 318;}

                        else if ( (LA201_7==LPAREN) && (synpred9_EsperEPL2Grammar())) {s = 319;}

                        else if ( (LA201_7==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {s = 320;}

                        else if ( (LA201_7==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {s = 321;}

                        else if ( (LA201_7==WEEKDAY) && (synpred13_EsperEPL2Grammar())) {s = 322;}

                        else if ( (LA201_7==DOT) && (synpred9_EsperEPL2Grammar())) {s = 323;}

                        else if ( (LA201_7==COLON) && (synpred10_EsperEPL2Grammar())) {s = 324;}

                        else if ( (LA201_7==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {s = 325;}

                        else if ( (LA201_7==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {s = 326;}

                        else if ( (LA201_7==ESCAPECHAR) && (synpred9_EsperEPL2Grammar())) {s = 327;}

                        else if ( (LA201_7==LBRACK) && (synpred9_EsperEPL2Grammar())) {s = 328;}

                        else if ( (LA201_7==QUESTION) && (synpred9_EsperEPL2Grammar())) {s = 329;}

                        else if ( (LA201_7==STAR) && (synpred9_EsperEPL2Grammar())) {s = 330;}

                        else if ( (LA201_7==DIV) && (synpred9_EsperEPL2Grammar())) {s = 331;}

                        else if ( (LA201_7==MOD) && (synpred9_EsperEPL2Grammar())) {s = 332;}

                        else if ( (LA201_7==PLUS) && (synpred9_EsperEPL2Grammar())) {s = 333;}

                        else if ( (LA201_7==MINUS) && (synpred9_EsperEPL2Grammar())) {s = 334;}

                        else if ( (LA201_7==LOR) && (synpred9_EsperEPL2Grammar())) {s = 335;}

                        else if ( (LA201_7==LT) && (synpred9_EsperEPL2Grammar())) {s = 336;}

                        else if ( (LA201_7==GT) && (synpred9_EsperEPL2Grammar())) {s = 337;}

                        else if ( (LA201_7==LE) && (synpred9_EsperEPL2Grammar())) {s = 338;}

                        else if ( (LA201_7==GE) && (synpred9_EsperEPL2Grammar())) {s = 339;}

                        else if ( (LA201_7==EQUALS) && (synpred9_EsperEPL2Grammar())) {s = 340;}

                        else if ( (LA201_7==IS) && (synpred9_EsperEPL2Grammar())) {s = 341;}

                        else if ( (LA201_7==SQL_NE) && (synpred9_EsperEPL2Grammar())) {s = 342;}

                        else if ( (LA201_7==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {s = 343;}

                        else if ( (LA201_7==BAND) && (synpred9_EsperEPL2Grammar())) {s = 344;}

                        else if ( (LA201_7==BOR) && (synpred9_EsperEPL2Grammar())) {s = 345;}

                        else if ( (LA201_7==BXOR) && (synpred9_EsperEPL2Grammar())) {s = 346;}

                        else if ( (LA201_7==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 347;}

                        else if ( (LA201_7==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 348;}

                        else if ( (LA201_7==ASC) && (synpred9_EsperEPL2Grammar())) {s = 349;}

                        else if ( (LA201_7==DESC) && (synpred9_EsperEPL2Grammar())) {s = 350;}

                        else if ( (LA201_7==COMMA) && (synpred9_EsperEPL2Grammar())) {s = 351;}

                        else if ( (LA201_7==RPAREN) && (synpred9_EsperEPL2Grammar())) {s = 352;}

                        else if ( (LA201_7==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 353;}

                        else if ( (LA201_7==IN_SET) && (synpred9_EsperEPL2Grammar())) {s = 354;}

                        else if ( (LA201_7==BETWEEN) && (synpred9_EsperEPL2Grammar())) {s = 355;}

                        else if ( (LA201_7==LIKE) && (synpred9_EsperEPL2Grammar())) {s = 356;}

                        else if ( (LA201_7==REGEXP) && (synpred9_EsperEPL2Grammar())) {s = 357;}

                         
                        input.seek(index201_7);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA201_8 = input.LA(1);

                         
                        int index201_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA201_8==LAST) && (synpred12_EsperEPL2Grammar())) {s = 358;}

                        else if ( (LA201_8==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {s = 359;}

                        else if ( (LA201_8==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {s = 360;}

                        else if ( (LA201_8==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {s = 361;}

                        else if ( (LA201_8==TIMEPERIOD_SECONDS) ) {s = 362;}

                        else if ( (LA201_8==TIMEPERIOD_SECOND) ) {s = 363;}

                        else if ( (LA201_8==TIMEPERIOD_SEC) ) {s = 364;}

                        else if ( (LA201_8==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {s = 365;}

                        else if ( (LA201_8==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {s = 366;}

                        else if ( (LA201_8==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {s = 367;}

                        else if ( (LA201_8==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {s = 368;}

                        else if ( (LA201_8==WEEKDAY) && (synpred13_EsperEPL2Grammar())) {s = 369;}

                        else if ( (LA201_8==COLON) && (synpred10_EsperEPL2Grammar())) {s = 370;}

                        else if ( (LA201_8==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {s = 371;}

                        else if ( (LA201_8==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {s = 372;}

                        else if ( (LA201_8==MIN) && (synpred8_EsperEPL2Grammar())) {s = 373;}

                        else if ( (LA201_8==STAR) && (synpred9_EsperEPL2Grammar())) {s = 374;}

                        else if ( (LA201_8==DIV) && (synpred9_EsperEPL2Grammar())) {s = 375;}

                        else if ( (LA201_8==MOD) && (synpred9_EsperEPL2Grammar())) {s = 376;}

                        else if ( (LA201_8==PLUS) && (synpred9_EsperEPL2Grammar())) {s = 377;}

                        else if ( (LA201_8==MINUS) && (synpred9_EsperEPL2Grammar())) {s = 378;}

                        else if ( (LA201_8==LOR) && (synpred9_EsperEPL2Grammar())) {s = 379;}

                        else if ( (LA201_8==LT) && (synpred9_EsperEPL2Grammar())) {s = 380;}

                        else if ( (LA201_8==GT) && (synpred9_EsperEPL2Grammar())) {s = 381;}

                        else if ( (LA201_8==LE) && (synpred9_EsperEPL2Grammar())) {s = 382;}

                        else if ( (LA201_8==GE) && (synpred9_EsperEPL2Grammar())) {s = 383;}

                        else if ( (LA201_8==EQUALS) && (synpred9_EsperEPL2Grammar())) {s = 384;}

                        else if ( (LA201_8==IS) && (synpred9_EsperEPL2Grammar())) {s = 385;}

                        else if ( (LA201_8==SQL_NE) && (synpred9_EsperEPL2Grammar())) {s = 386;}

                        else if ( (LA201_8==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {s = 387;}

                        else if ( (LA201_8==BAND) && (synpred9_EsperEPL2Grammar())) {s = 388;}

                        else if ( (LA201_8==BOR) && (synpred9_EsperEPL2Grammar())) {s = 389;}

                        else if ( (LA201_8==BXOR) && (synpred9_EsperEPL2Grammar())) {s = 390;}

                        else if ( (LA201_8==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 391;}

                        else if ( (LA201_8==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 392;}

                        else if ( (LA201_8==ASC) && (synpred9_EsperEPL2Grammar())) {s = 393;}

                        else if ( (LA201_8==DESC) && (synpred9_EsperEPL2Grammar())) {s = 394;}

                        else if ( (LA201_8==COMMA) && (synpred9_EsperEPL2Grammar())) {s = 395;}

                        else if ( (LA201_8==RPAREN) && (synpred9_EsperEPL2Grammar())) {s = 396;}

                        else if ( (LA201_8==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 397;}

                        else if ( (LA201_8==IN_SET) && (synpred9_EsperEPL2Grammar())) {s = 398;}

                        else if ( (LA201_8==BETWEEN) && (synpred9_EsperEPL2Grammar())) {s = 399;}

                        else if ( (LA201_8==LIKE) && (synpred9_EsperEPL2Grammar())) {s = 400;}

                        else if ( (LA201_8==REGEXP) && (synpred9_EsperEPL2Grammar())) {s = 401;}

                         
                        input.seek(index201_8);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA201_57 = input.LA(1);

                         
                        int index201_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA201_57==DIV) && (synpred11_EsperEPL2Grammar())) {s = 402;}

                        else if ( (LA201_57==COMMA||LA201_57==RPAREN) ) {s = 403;}

                         
                        input.seek(index201_57);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA201_138 = input.LA(1);

                         
                        int index201_138 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 373;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 401;}

                         
                        input.seek(index201_138);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA201_139 = input.LA(1);

                         
                        int index201_139 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 373;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 401;}

                         
                        input.seek(index201_139);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA201_140 = input.LA(1);

                         
                        int index201_140 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 373;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 401;}

                         
                        input.seek(index201_140);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA201_181 = input.LA(1);

                         
                        int index201_181 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 373;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 401;}

                         
                        input.seek(index201_181);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA201_182 = input.LA(1);

                         
                        int index201_182 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 373;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 401;}

                         
                        input.seek(index201_182);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA201_183 = input.LA(1);

                         
                        int index201_183 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 373;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 401;}

                         
                        input.seek(index201_183);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA201_244 = input.LA(1);

                         
                        int index201_244 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 373;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 401;}

                         
                        input.seek(index201_244);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA201_245 = input.LA(1);

                         
                        int index201_245 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 373;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 401;}

                         
                        input.seek(index201_245);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA201_246 = input.LA(1);

                         
                        int index201_246 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 373;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 401;}

                         
                        input.seek(index201_246);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA201_289 = input.LA(1);

                         
                        int index201_289 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 373;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 401;}

                         
                        input.seek(index201_289);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA201_290 = input.LA(1);

                         
                        int index201_290 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 373;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 401;}

                         
                        input.seek(index201_290);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA201_291 = input.LA(1);

                         
                        int index201_291 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 373;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 401;}

                         
                        input.seek(index201_291);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA201_313 = input.LA(1);

                         
                        int index201_313 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 373;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 401;}

                         
                        input.seek(index201_313);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA201_314 = input.LA(1);

                         
                        int index201_314 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 373;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 401;}

                         
                        input.seek(index201_314);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA201_315 = input.LA(1);

                         
                        int index201_315 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 373;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 401;}

                         
                        input.seek(index201_315);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA201_362 = input.LA(1);

                         
                        int index201_362 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 373;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 401;}

                         
                        input.seek(index201_362);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA201_363 = input.LA(1);

                         
                        int index201_363 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 373;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 401;}

                         
                        input.seek(index201_363);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA201_364 = input.LA(1);

                         
                        int index201_364 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 373;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 401;}

                         
                        input.seek(index201_364);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 201, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA215_eotS =
        "\u018d\uffff";
    static final String DFA215_eofS =
        "\1\47\4\uffff\1\1\34\uffff\2\1\1\uffff\2\1\u0166\uffff";
    static final String DFA215_minS =
        "\1\5\4\uffff\1\6\34\uffff\2\6\1\uffff\2\6\u0166\uffff";
    static final String DFA215_maxS =
        "\1\u0103\4\uffff\1\u0102\34\uffff\2\u0102\1\uffff\1\u0102\1\u0103"+
        "\u0166\uffff";
    static final String DFA215_acceptS =
        "\1\uffff\1\1\45\uffff\1\2\u0165\uffff";
    static final String DFA215_specialS =
        "\u018d\uffff}>";
    static final String[] DFA215_transitionS = {
            "\1\1\4\47\1\5\3\47\1\1\1\uffff\2\47\11\1\3\uffff\5\47\1\1\1"+
            "\47\1\46\1\42\1\43\1\45\1\uffff\1\47\1\uffff\2\47\4\uffff\1"+
            "\47\3\1\1\47\1\uffff\3\47\3\uffff\10\1\1\uffff\4\1\2\uffff\1"+
            "\1\1\uffff\3\1\6\uffff\3\47\6\uffff\1\47\u0081\uffff\1\47\1"+
            "\1\10\47\2\uffff\16\47\1\uffff\1\47\2\uffff\2\47\1\1",
            "",
            "",
            "",
            "",
            "\10\1\2\uffff\2\1\14\uffff\5\1\1\uffff\5\1\1\uffff\1\1\1\uffff"+
            "\2\1\4\uffff\1\1\3\uffff\1\1\1\uffff\3\1\35\uffff\3\1\6\uffff"+
            "\1\1\u0081\uffff\1\1\1\uffff\10\1\2\47\16\1\1\uffff\1\1\2\uffff"+
            "\2\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\10\1\2\uffff\2\1\14\uffff\5\1\1\47\5\1\1\uffff\1\1\1\uffff"+
            "\2\1\4\uffff\1\1\3\uffff\1\1\1\uffff\3\1\35\uffff\3\1\6\uffff"+
            "\1\1\u0081\uffff\1\1\1\uffff\10\1\2\uffff\16\1\1\uffff\1\1\2"+
            "\uffff\2\1",
            "\10\1\2\uffff\2\1\14\uffff\5\1\1\47\5\1\1\uffff\1\1\1\uffff"+
            "\2\1\4\uffff\1\1\3\uffff\1\1\1\uffff\3\1\35\uffff\3\1\6\uffff"+
            "\1\1\u0081\uffff\1\1\1\uffff\10\1\2\uffff\16\1\1\uffff\1\1\2"+
            "\uffff\2\1",
            "",
            "\10\1\2\uffff\2\1\14\uffff\5\1\1\47\5\1\1\uffff\1\1\1\uffff"+
            "\2\1\4\uffff\1\1\3\uffff\1\1\1\uffff\3\1\35\uffff\3\1\6\uffff"+
            "\1\1\u0081\uffff\1\1\1\uffff\10\1\2\uffff\16\1\1\uffff\1\1\2"+
            "\uffff\2\1",
            "\10\1\2\uffff\2\1\14\uffff\5\1\1\uffff\5\1\1\uffff\1\1\1\uffff"+
            "\2\1\4\uffff\1\1\3\uffff\1\1\1\uffff\3\1\6\uffff\2\47\25\uffff"+
            "\3\1\6\uffff\1\1\u0081\uffff\1\1\1\47\10\1\2\uffff\16\1\1\uffff"+
            "\1\1\2\uffff\2\1\1\47",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA215_eot = DFA.unpackEncodedString(DFA215_eotS);
    static final short[] DFA215_eof = DFA.unpackEncodedString(DFA215_eofS);
    static final char[] DFA215_min = DFA.unpackEncodedStringToUnsignedChars(DFA215_minS);
    static final char[] DFA215_max = DFA.unpackEncodedStringToUnsignedChars(DFA215_maxS);
    static final short[] DFA215_accept = DFA.unpackEncodedString(DFA215_acceptS);
    static final short[] DFA215_special = DFA.unpackEncodedString(DFA215_specialS);
    static final short[][] DFA215_transition;

    static {
        int numStates = DFA215_transitionS.length;
        DFA215_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA215_transition[i] = DFA.unpackEncodedString(DFA215_transitionS[i]);
        }
    }

    class DFA215 extends DFA {

        public DFA215(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 215;
            this.eot = DFA215_eot;
            this.eof = DFA215_eof;
            this.min = DFA215_min;
            this.max = DFA215_max;
            this.accept = DFA215_accept;
            this.special = DFA215_special;
            this.transition = DFA215_transition;
        }
        public String getDescription() {
            return "1367:24: (ipi2= keywordAllowedIdent )?";
        }
    }
 

    public static final BitSet FOLLOW_annotationNoEnum_in_startPatternExpressionRule1401 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000049000000000L,0x0000000008000008L});
    public static final BitSet FOLLOW_patternExpression_in_startPatternExpressionRule1406 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_startPatternExpressionRule1410 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationEnum_in_startEPLExpressionRule1424 = new BitSet(new long[]{0x0040020008000010L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_eplExpression_in_startEPLExpressionRule1430 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_startEPLExpressionRule1434 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventProperty_in_startEventPropertyRule1460 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_startEventPropertyRule1464 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EMAILAT_in_annotationNoEnum1484 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_classIdentifier_in_annotationNoEnum1486 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_LPAREN_in_annotationNoEnum1490 = new BitSet(new long[]{0x0040020008000010L,0x00000001C0000000L,0x0000000000000000L,0xA600611200000000L,0x0000000008000030L});
    public static final BitSet FOLLOW_elementValuePairsNoEnum_in_annotationNoEnum1494 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_elementValueNoEnum_in_annotationNoEnum1498 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_RPAREN_in_annotationNoEnum1503 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EMAILAT_in_annotationEnum1544 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_classIdentifier_in_annotationEnum1546 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_LPAREN_in_annotationEnum1550 = new BitSet(new long[]{0x0040020008000010L,0x00000001C0000000L,0x0000000000000000L,0xA600611200000000L,0x0000000008000038L});
    public static final BitSet FOLLOW_elementValuePairsEnum_in_annotationEnum1554 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_elementValueEnum_in_annotationEnum1558 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_RPAREN_in_annotationEnum1563 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_elementValuePairEnum_in_elementValuePairsEnum1604 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_COMMA_in_elementValuePairsEnum1607 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_elementValuePairEnum_in_elementValuePairsEnum1610 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_IDENT_in_elementValuePairsNoEnum1633 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_EQUALS_in_elementValuePairsNoEnum1635 = new BitSet(new long[]{0x0040020008000010L,0x00000001C0000000L,0x0000000000000000L,0xA600600200000000L,0x0000000008000030L});
    public static final BitSet FOLLOW_elementValueNoEnum_in_elementValuePairsNoEnum1637 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_elementValuePairEnum1674 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_EQUALS_in_elementValuePairEnum1676 = new BitSet(new long[]{0x0040020008000010L,0x00000001C0000000L,0x0000000000000000L,0xA600601200000000L,0x0000000008000038L});
    public static final BitSet FOLLOW_elementValueEnum_in_elementValuePairEnum1678 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationEnum_in_elementValueNoEnum1709 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_elementValueArrayNoEnum_in_elementValueNoEnum1720 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constant_in_elementValueNoEnum1733 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationEnum_in_elementValueEnum1756 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_elementValueArrayEnum_in_elementValueEnum1767 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constant_in_elementValueEnum1780 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classIdentifier_in_elementValueEnum1788 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCURLY_in_elementValueArrayNoEnum1808 = new BitSet(new long[]{0x0040020008000010L,0x00000001C0000000L,0x0000000000000000L,0xE600600A00000000L,0x0000000008000030L});
    public static final BitSet FOLLOW_elementValueNoEnum_in_elementValueArrayNoEnum1811 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000800000000L});
    public static final BitSet FOLLOW_COMMA_in_elementValueArrayNoEnum1814 = new BitSet(new long[]{0x0040020008000010L,0x00000001C0000000L,0x0000000000000000L,0xA600600200000000L,0x0000000008000030L});
    public static final BitSet FOLLOW_elementValueNoEnum_in_elementValueArrayNoEnum1816 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000800000000L});
    public static final BitSet FOLLOW_COMMA_in_elementValueArrayNoEnum1823 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_RCURLY_in_elementValueArrayNoEnum1827 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCURLY_in_elementValueArrayEnum1856 = new BitSet(new long[]{0x0040020008000010L,0x00000001C0000000L,0x0000000000000000L,0xE600601A00000000L,0x0000000008000038L});
    public static final BitSet FOLLOW_elementValueEnum_in_elementValueArrayEnum1859 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000800000000L});
    public static final BitSet FOLLOW_COMMA_in_elementValueArrayEnum1862 = new BitSet(new long[]{0x0040020008000010L,0x00000001C0000000L,0x0000000000000000L,0xA600601200000000L,0x0000000008000038L});
    public static final BitSet FOLLOW_elementValueEnum_in_elementValueArrayEnum1864 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000800000000L});
    public static final BitSet FOLLOW_COMMA_in_elementValueArrayEnum1871 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_RCURLY_in_elementValueArrayEnum1875 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_selectExpr_in_eplExpression1907 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_createWindowExpr_in_eplExpression1912 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_createVariableExpr_in_eplExpression1917 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_onExpr_in_eplExpression1922 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSERT_in_selectExpr1935 = new BitSet(new long[]{0x1880000000000000L});
    public static final BitSet FOLLOW_insertIntoExpr_in_selectExpr1938 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_SELECT_in_selectExpr1944 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xA600629200000000L,0x000000000800003AL});
    public static final BitSet FOLLOW_selectClause_in_selectExpr1947 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_FROM_in_selectExpr1951 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000006L,0x0000000000000000L,0x0000001000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_fromClause_in_selectExpr1954 = new BitSet(new long[]{0x0104300000010002L,0x0000000200000000L});
    public static final BitSet FOLLOW_WHERE_in_selectExpr1959 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xA600629200000000L,0x000000000800003AL});
    public static final BitSet FOLLOW_whereClause_in_selectExpr1962 = new BitSet(new long[]{0x0104300000000002L,0x0000000200000000L});
    public static final BitSet FOLLOW_GROUP_in_selectExpr1969 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_BY_in_selectExpr1972 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xA600629200000000L,0x000000000800003AL});
    public static final BitSet FOLLOW_groupByListExpr_in_selectExpr1975 = new BitSet(new long[]{0x0104200000000002L,0x0000000200000000L});
    public static final BitSet FOLLOW_HAVING_in_selectExpr1982 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xA600629200000000L,0x000000000800003AL});
    public static final BitSet FOLLOW_havingClause_in_selectExpr1985 = new BitSet(new long[]{0x0104000000000002L,0x0000000200000000L});
    public static final BitSet FOLLOW_OUTPUT_in_selectExpr1992 = new BitSet(new long[]{0x0030800080004000L,0x0000000000022000L});
    public static final BitSet FOLLOW_outputLimit_in_selectExpr1995 = new BitSet(new long[]{0x0100000000000002L,0x0000000200000000L});
    public static final BitSet FOLLOW_ORDER_in_selectExpr2002 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_BY_in_selectExpr2005 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xA600629200000000L,0x000000000800003AL});
    public static final BitSet FOLLOW_orderByListExpr_in_selectExpr2008 = new BitSet(new long[]{0x0000000000000002L,0x0000000200000000L});
    public static final BitSet FOLLOW_ROW_LIMIT_EXPR_in_selectExpr2015 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8600001200000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_rowLimit_in_selectExpr2018 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ON_in_onExpr2033 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L,0x0000000000000000L,0x0000001000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_eventFilterExpression_in_onExpr2036 = new BitSet(new long[]{0x0040000008020000L,0x0000000000005000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_patternInclusionExpression_in_onExpr2040 = new BitSet(new long[]{0x0040000008020000L,0x0000000000005000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_AS_in_onExpr2044 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_onExpr2048 = new BitSet(new long[]{0x0040000008020000L,0x0000000000005000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_onExpr2054 = new BitSet(new long[]{0x0040000008020000L,0x0000000000005000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_onDeleteExpr_in_onExpr2062 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_onSelectExpr_in_onExpr2066 = new BitSet(new long[]{0x0040000000000002L});
    public static final BitSet FOLLOW_onSelectInsertExpr_in_onExpr2069 = new BitSet(new long[]{0x0044000000000002L});
    public static final BitSet FOLLOW_outputClauseInsert_in_onExpr2072 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_onSetExpr_in_onExpr2079 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSERT_in_onSelectExpr2138 = new BitSet(new long[]{0x1880000000000000L});
    public static final BitSet FOLLOW_insertIntoExpr_in_onSelectExpr2140 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_SELECT_in_onSelectExpr2146 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xA600629200000000L,0x000000000800003AL});
    public static final BitSet FOLLOW_selectionList_in_onSelectExpr2148 = new BitSet(new long[]{0x0100300400010002L});
    public static final BitSet FOLLOW_onExprFrom_in_onSelectExpr2152 = new BitSet(new long[]{0x0100300000010002L});
    public static final BitSet FOLLOW_WHERE_in_onSelectExpr2158 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xA600629200000000L,0x000000000800003AL});
    public static final BitSet FOLLOW_whereClause_in_onSelectExpr2160 = new BitSet(new long[]{0x0100300000000002L});
    public static final BitSet FOLLOW_GROUP_in_onSelectExpr2169 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_BY_in_onSelectExpr2171 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xA600629200000000L,0x000000000800003AL});
    public static final BitSet FOLLOW_groupByListExpr_in_onSelectExpr2173 = new BitSet(new long[]{0x0100200000000002L});
    public static final BitSet FOLLOW_HAVING_in_onSelectExpr2180 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xA600629200000000L,0x000000000800003AL});
    public static final BitSet FOLLOW_havingClause_in_onSelectExpr2182 = new BitSet(new long[]{0x0100000000000002L});
    public static final BitSet FOLLOW_ORDER_in_onSelectExpr2189 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_BY_in_onSelectExpr2191 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xA600629200000000L,0x000000000800003AL});
    public static final BitSet FOLLOW_orderByListExpr_in_onSelectExpr2193 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSERT_in_onSelectInsertExpr2246 = new BitSet(new long[]{0x1880000000000000L});
    public static final BitSet FOLLOW_insertIntoExpr_in_onSelectInsertExpr2248 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_SELECT_in_onSelectInsertExpr2252 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xA600629200000000L,0x000000000800003AL});
    public static final BitSet FOLLOW_selectionList_in_onSelectInsertExpr2254 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_WHERE_in_onSelectInsertExpr2259 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xA600629200000000L,0x000000000800003AL});
    public static final BitSet FOLLOW_whereClause_in_onSelectInsertExpr2261 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OUTPUT_in_outputClauseInsert2292 = new BitSet(new long[]{0x0010800000000000L});
    public static final BitSet FOLLOW_FIRST_in_outputClauseInsert2297 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALL_in_outputClauseInsert2303 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DELETE_in_onDeleteExpr2345 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_onExprFrom_in_onDeleteExpr2349 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_WHERE_in_onDeleteExpr2354 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xA600629200000000L,0x000000000800003AL});
    public static final BitSet FOLLOW_whereClause_in_onDeleteExpr2356 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SET_in_onSetExpr2396 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_onSetAssignment_in_onSetExpr2398 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_COMMA_in_onSetExpr2401 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_onSetAssignment_in_onSetExpr2403 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_IDENT_in_onSetAssignment2428 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_EQUALS_in_onSetAssignment2430 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xA600629200000000L,0x000000000800003AL});
    public static final BitSet FOLLOW_expression_in_onSetAssignment2433 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FROM_in_onExprFrom2446 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_onExprFrom2450 = new BitSet(new long[]{0x0000000000020002L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_AS_in_onExprFrom2453 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_onExprFrom2457 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_onExprFrom2463 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CREATE_in_createWindowExpr2491 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_WINDOW_in_createWindowExpr2493 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_createWindowExpr2497 = new BitSet(new long[]{0x8000000008020000L,0x0000000000000001L,0x0000000000000000L,0x000000D000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_DOT_in_createWindowExpr2500 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_viewExpression_in_createWindowExpr2502 = new BitSet(new long[]{0x8000000008020000L,0x0000000000000001L,0x0000000000000000L,0x000000D000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_DOT_in_createWindowExpr2505 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_viewExpression_in_createWindowExpr2507 = new BitSet(new long[]{0x8000000008020000L,0x0000000000000001L,0x0000000000000000L,0x000000D000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_RETAINUNION_in_createWindowExpr2516 = new BitSet(new long[]{0x0000000008020000L,0x0000000000000000L,0x0000000000000000L,0x0000009000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_RETAININTERSECTION_in_createWindowExpr2520 = new BitSet(new long[]{0x0000000008020000L,0x0000000000000000L,0x0000000000000000L,0x0000009000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_AS_in_createWindowExpr2524 = new BitSet(new long[]{0x0000000008000000L,0x0000000000000000L,0x0000000000000000L,0x0000009000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_createWindowExprModelAfter_in_createWindowExpr2539 = new BitSet(new long[]{0x0040000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_createWindowExpr2554 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_createWindowColumnList_in_createWindowExpr2556 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_RPAREN_in_createWindowExpr2558 = new BitSet(new long[]{0x0040000000000002L});
    public static final BitSet FOLLOW_INSERT_in_createWindowExpr2575 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_WHERE_in_createWindowExpr2578 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xA600629200000000L,0x000000000800003AL});
    public static final BitSet FOLLOW_expression_in_createWindowExpr2580 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SELECT_in_createWindowExprModelAfter2667 = new BitSet(new long[]{0xC07803E80FFC4430L,0x00000001C003A7BFL,0x0000000000000000L,0xA600621200000000L,0x0000000008000038L});
    public static final BitSet FOLLOW_createSelectionList_in_createWindowExprModelAfter2670 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_FROM_in_createWindowExprModelAfter2672 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_classIdentifier_in_createWindowExprModelAfter2677 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CREATE_in_createVariableExpr2690 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_VARIABLE_in_createVariableExpr2692 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_createVariableExpr2696 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_createVariableExpr2700 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_EQUALS_in_createVariableExpr2703 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xA600629200000000L,0x000000000800003AL});
    public static final BitSet FOLLOW_expression_in_createVariableExpr2705 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_createWindowColumnListElement_in_createWindowColumnList2748 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_COMMA_in_createWindowColumnList2751 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_createWindowColumnListElement_in_createWindowColumnList2753 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_IDENT_in_createWindowColumnListElement2783 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_createWindowColumnListElement2787 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_createSelectionListElement_in_createSelectionList2825 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_COMMA_in_createSelectionList2828 = new BitSet(new long[]{0xC07803E80FFC4430L,0x00000001C003A7BFL,0x0000000000000000L,0xA600621200000000L,0x0000000008000038L});
    public static final BitSet FOLLOW_createSelectionListElement_in_createSelectionList2830 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_STAR_in_createSelectionListElement2859 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventProperty_in_createSelectionListElement2871 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_AS_in_createSelectionListElement2874 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_createSelectionListElement2878 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constant_in_createSelectionListElement2899 = new BitSet(new long[]{0x0000000000020000L});
    public static final BitSet FOLLOW_AS_in_createSelectionListElement2901 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_createSelectionListElement2905 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ISTREAM_in_insertIntoExpr2944 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_RSTREAM_in_insertIntoExpr2950 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_INTO_in_insertIntoExpr2954 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_insertIntoExpr2958 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_insertIntoColumnList_in_insertIntoExpr2961 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_insertIntoColumnList2995 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_insertIntoColumnList2997 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010800000000L});
    public static final BitSet FOLLOW_COMMA_in_insertIntoColumnList3000 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_insertIntoColumnList3002 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010800000000L});
    public static final BitSet FOLLOW_RPAREN_in_insertIntoColumnList3006 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_streamExpression_in_fromClause3041 = new BitSet(new long[]{0x000001F000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_regularJoin_in_fromClause3044 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_outerJoinList_in_fromClause3048 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_regularJoin3062 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000006L,0x0000000000000000L,0x0000001000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_streamExpression_in_regularJoin3065 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_outerJoin_in_outerJoinList3079 = new BitSet(new long[]{0x000001F000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_outerJoin_in_outerJoinList3082 = new BitSet(new long[]{0x000001F000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_LEFT_in_outerJoin3125 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_RIGHT_in_outerJoin3129 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_FULL_in_outerJoin3133 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_OUTER_in_outerJoin3136 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_INNER_in_outerJoin3157 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_JOIN_in_outerJoin3171 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000006L,0x0000000000000000L,0x0000001000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_streamExpression_in_outerJoin3173 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_outerJoinIdent_in_outerJoin3175 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ON_in_outerJoinIdent3240 = new BitSet(new long[]{0xC03801E807FC4420L,0x000000000003A7BFL,0x0000000000000000L,0x0000001000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_outerJoinIdentPair_in_outerJoinIdent3243 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_AND_EXPR_in_outerJoinIdent3246 = new BitSet(new long[]{0xC03801E807FC4420L,0x000000000003A7BFL,0x0000000000000000L,0x0000001000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_outerJoinIdentPair_in_outerJoinIdent3249 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_eventProperty_in_outerJoinIdentPair3264 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_EQUALS_in_outerJoinIdentPair3266 = new BitSet(new long[]{0xC03801E807FC4420L,0x000000000003A7BFL,0x0000000000000000L,0x0000001000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_eventProperty_in_outerJoinIdentPair3269 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_evalOrExpression_in_whereClause3291 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RSTREAM_in_selectClause3327 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xA600629200000000L,0x000000000800003AL});
    public static final BitSet FOLLOW_ISTREAM_in_selectClause3333 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xA600629200000000L,0x000000000800003AL});
    public static final BitSet FOLLOW_IRSTREAM_in_selectClause3339 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xA600629200000000L,0x000000000800003AL});
    public static final BitSet FOLLOW_selectionList_in_selectClause3343 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_selectionListElement_in_selectionList3370 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_COMMA_in_selectionList3373 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xA600629200000000L,0x000000000800003AL});
    public static final BitSet FOLLOW_selectionListElement_in_selectionList3376 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_STAR_in_selectionListElement3402 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_streamSelector_in_selectionListElement3418 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_selectionListElement3423 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_AS_in_selectionListElement3426 = new BitSet(new long[]{0xC03801E807FC4420L,0x000000000003A7BFL,0x0000000000000000L,0x0000001000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_selectionListElement3430 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_streamSelector3486 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_DOT_in_streamSelector3488 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_STAR_in_streamSelector3490 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_AS_in_streamSelector3493 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_streamSelector3497 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventFilterExpression_in_streamExpression3527 = new BitSet(new long[]{0xC000000000020002L,0x0000000000000001L,0x0000000000000000L,0x0000005000000000L});
    public static final BitSet FOLLOW_patternInclusionExpression_in_streamExpression3531 = new BitSet(new long[]{0xC000000000020002L,0x0000000000000001L,0x0000000000000000L,0x0000005000000000L});
    public static final BitSet FOLLOW_databaseJoinExpression_in_streamExpression3535 = new BitSet(new long[]{0xC000000000020002L,0x0000000000000001L,0x0000000000000000L,0x0000005000000000L});
    public static final BitSet FOLLOW_methodJoinExpression_in_streamExpression3539 = new BitSet(new long[]{0xC000000000020002L,0x0000000000000001L,0x0000000000000000L,0x0000005000000000L});
    public static final BitSet FOLLOW_DOT_in_streamExpression3545 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_viewExpression_in_streamExpression3547 = new BitSet(new long[]{0xC000000000020002L,0x0000000000000001L,0x0000000000000000L,0x0000005000000000L});
    public static final BitSet FOLLOW_DOT_in_streamExpression3550 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_viewExpression_in_streamExpression3552 = new BitSet(new long[]{0xC000000000020002L,0x0000000000000001L,0x0000000000000000L,0x0000005000000000L});
    public static final BitSet FOLLOW_AS_in_streamExpression3559 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_streamExpression3563 = new BitSet(new long[]{0xC000000000000002L,0x0000000000000001L});
    public static final BitSet FOLLOW_IDENT_in_streamExpression3569 = new BitSet(new long[]{0xC000000000000002L,0x0000000000000001L});
    public static final BitSet FOLLOW_UNIDIRECTIONAL_in_streamExpression3576 = new BitSet(new long[]{0x8000000000000002L,0x0000000000000001L});
    public static final BitSet FOLLOW_RETAINUNION_in_streamExpression3583 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETAININTERSECTION_in_streamExpression3587 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PATTERN_in_patternInclusionExpression3644 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_LBRACK_in_patternInclusionExpression3646 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000049000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_patternExpression_in_patternInclusionExpression3648 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_RBRACK_in_patternInclusionExpression3650 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL_in_databaseJoinExpression3683 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_COLON_in_databaseJoinExpression3685 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_databaseJoinExpression3689 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_LBRACK_in_databaseJoinExpression3691 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000600000000000L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_databaseJoinExpression3696 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_QUOTED_STRING_LITERAL_in_databaseJoinExpression3702 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_METADATASQL_in_databaseJoinExpression3706 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000600000000000L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_databaseJoinExpression3711 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_QUOTED_STRING_LITERAL_in_databaseJoinExpression3717 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_RBRACK_in_databaseJoinExpression3722 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_methodJoinExpression3773 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_COLON_in_methodJoinExpression3775 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_classIdentifier_in_methodJoinExpression3777 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_LPAREN_in_methodJoinExpression3780 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xA600639200000000L,0x000000000800003AL});
    public static final BitSet FOLLOW_expressionList_in_methodJoinExpression3782 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_RPAREN_in_methodJoinExpression3785 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_viewExpression3838 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_COLON_in_viewExpression3840 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_viewExpression3844 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_LPAREN_in_viewExpression3846 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xA600679200000000L,0x000000000800003AL});
    public static final BitSet FOLLOW_expressionWithTimeList_in_viewExpression3848 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_RPAREN_in_viewExpression3851 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_groupByListExpr3890 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_COMMA_in_groupByListExpr3893 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xA600629200000000L,0x000000000800003AL});
    public static final BitSet FOLLOW_expression_in_groupByListExpr3895 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_orderByListElement_in_orderByListExpr3930 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_COMMA_in_orderByListExpr3933 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xA600629200000000L,0x000000000800003AL});
    public static final BitSet FOLLOW_orderByListElement_in_orderByListExpr3935 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_expression_in_orderByListElement3960 = new BitSet(new long[]{0x0600000000000002L});
    public static final BitSet FOLLOW_ASC_in_orderByListElement3965 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DESC_in_orderByListElement3969 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_evalOrExpression_in_havingClause4007 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALL_in_outputLimit4045 = new BitSet(new long[]{0x0000000080004000L,0x0000000000020000L});
    public static final BitSet FOLLOW_FIRST_in_outputLimit4049 = new BitSet(new long[]{0x0000000080004000L,0x0000000000020000L});
    public static final BitSet FOLLOW_LAST_in_outputLimit4053 = new BitSet(new long[]{0x0000000080004000L,0x0000000000020000L});
    public static final BitSet FOLLOW_SNAPSHOT_in_outputLimit4057 = new BitSet(new long[]{0x0000000080004000L,0x0000000000020000L});
    public static final BitSet FOLLOW_EVERY_EXPR_in_outputLimit4084 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8600001200000000L,0x0000000000000032L});
    public static final BitSet FOLLOW_timePeriod_in_outputLimit4106 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_outputLimit4115 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_IDENT_in_outputLimit4121 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_EVENTS_in_outputLimit4127 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AT_in_outputLimit4150 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_crontabLimitParameterSet_in_outputLimit4152 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHEN_in_outputLimit4166 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xA600629200000000L,0x000000000800003AL});
    public static final BitSet FOLLOW_expression_in_outputLimit4168 = new BitSet(new long[]{0x0000000100000002L});
    public static final BitSet FOLLOW_THEN_in_outputLimit4171 = new BitSet(new long[]{0x0040000008020000L,0x0000000000005000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_onSetExpr_in_outputLimit4173 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberconstant_in_rowLimit4302 = new BitSet(new long[]{0x0000000000000002L,0x0000000400000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_IDENT_in_rowLimit4308 = new BitSet(new long[]{0x0000000000000002L,0x0000000400000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_COMMA_in_rowLimit4315 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8600001200000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_OFFSET_in_rowLimit4321 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8600001200000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_numberconstant_in_rowLimit4327 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_rowLimit4333 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_crontabLimitParameterSet4385 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xA600669200000000L,0x000000000800003AL});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet4387 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_COMMA_in_crontabLimitParameterSet4389 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xA600669200000000L,0x000000000800003AL});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet4391 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_COMMA_in_crontabLimitParameterSet4393 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xA600669200000000L,0x000000000800003AL});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet4395 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_COMMA_in_crontabLimitParameterSet4397 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xA600669200000000L,0x000000000800003AL});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet4399 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_COMMA_in_crontabLimitParameterSet4401 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xA600669200000000L,0x000000000800003AL});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet4403 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010800000000L});
    public static final BitSet FOLLOW_COMMA_in_crontabLimitParameterSet4406 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xA600669200000000L,0x000000000800003AL});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet4408 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_RPAREN_in_crontabLimitParameterSet4412 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHEN_in_whenClause4442 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xA600629200000000L,0x000000000800003AL});
    public static final BitSet FOLLOW_expression_in_whenClause4445 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_THEN_in_whenClause4447 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xA600629200000000L,0x000000000800003AL});
    public static final BitSet FOLLOW_expression_in_whenClause4450 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ELSE_in_elseClause4463 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xA600629200000000L,0x000000000800003AL});
    public static final BitSet FOLLOW_expression_in_elseClause4466 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_caseExpression_in_expression4479 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CASE_in_caseExpression4493 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_whenClause_in_caseExpression4496 = new BitSet(new long[]{0x00000002C0000000L});
    public static final BitSet FOLLOW_elseClause_in_caseExpression4499 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_END_in_caseExpression4502 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CASE_in_caseExpression4513 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xA600629200000000L,0x000000000800003AL});
    public static final BitSet FOLLOW_expression_in_caseExpression4515 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_whenClause_in_caseExpression4517 = new BitSet(new long[]{0x00000002C0000000L});
    public static final BitSet FOLLOW_elseClause_in_caseExpression4520 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_END_in_caseExpression4523 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_evalOrExpression_in_caseExpression4547 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_evalAndExpression_in_evalOrExpression4558 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_OR_EXPR_in_evalOrExpression4563 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xA600629200000000L,0x000000000800003AL});
    public static final BitSet FOLLOW_evalAndExpression_in_evalOrExpression4565 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_bitWiseExpression_in_evalAndExpression4597 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_AND_EXPR_in_evalAndExpression4602 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xA600629200000000L,0x000000000800003AL});
    public static final BitSet FOLLOW_bitWiseExpression_in_evalAndExpression4604 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_negatedExpression_in_bitWiseExpression4636 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0003800000000000L});
    public static final BitSet FOLLOW_BAND_in_bitWiseExpression4641 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xA600629200000000L,0x000000000800003AL});
    public static final BitSet FOLLOW_BOR_in_bitWiseExpression4644 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xA600629200000000L,0x000000000800003AL});
    public static final BitSet FOLLOW_BXOR_in_bitWiseExpression4647 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xA600629200000000L,0x000000000800003AL});
    public static final BitSet FOLLOW_negatedExpression_in_bitWiseExpression4651 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0003800000000000L});
    public static final BitSet FOLLOW_evalEqualsExpression_in_negatedExpression4666 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_EXPR_in_negatedExpression4672 = new BitSet(new long[]{0xC07803E80FFC4430L,0x00000001C003AFFFL,0x0000000000000000L,0xA600609200000000L,0x000000000800003AL});
    public static final BitSet FOLLOW_evalEqualsExpression_in_negatedExpression4675 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_evalRelationalExpression_in_evalEqualsExpression4688 = new BitSet(new long[]{0x0000040000000002L,0x0000000000000000L,0x0000000000000000L,0x000C002000000000L});
    public static final BitSet FOLLOW_EQUALS_in_evalEqualsExpression4701 = new BitSet(new long[]{0xC07B83E80FFC4430L,0x00000001C003AFFFL,0x0000000000000000L,0xA600609200000000L,0x000000000800003AL});
    public static final BitSet FOLLOW_IS_in_evalEqualsExpression4719 = new BitSet(new long[]{0xC07B83E80FFC4430L,0x00000001C003AFFFL,0x0000000000000000L,0xA600609200000000L,0x000000000800003AL});
    public static final BitSet FOLLOW_IS_in_evalEqualsExpression4733 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_NOT_EXPR_in_evalEqualsExpression4735 = new BitSet(new long[]{0xC07B83E80FFC4430L,0x00000001C003AFFFL,0x0000000000000000L,0xA600609200000000L,0x000000000800003AL});
    public static final BitSet FOLLOW_SQL_NE_in_evalEqualsExpression4749 = new BitSet(new long[]{0xC07B83E80FFC4430L,0x00000001C003AFFFL,0x0000000000000000L,0xA600609200000000L,0x000000000800003AL});
    public static final BitSet FOLLOW_NOT_EQUAL_in_evalEqualsExpression4763 = new BitSet(new long[]{0xC07B83E80FFC4430L,0x00000001C003AFFFL,0x0000000000000000L,0xA600609200000000L,0x000000000800003AL});
    public static final BitSet FOLLOW_evalRelationalExpression_in_evalEqualsExpression4793 = new BitSet(new long[]{0x0000040000000002L,0x0000000000000000L,0x0000000000000000L,0x000C002000000000L});
    public static final BitSet FOLLOW_ANY_in_evalEqualsExpression4810 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_SOME_in_evalEqualsExpression4816 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_ALL_in_evalEqualsExpression4822 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_LPAREN_in_evalEqualsExpression4828 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xA600639200000000L,0x000000000800003AL});
    public static final BitSet FOLLOW_expressionList_in_evalEqualsExpression4830 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_RPAREN_in_evalEqualsExpression4833 = new BitSet(new long[]{0x0000040000000002L,0x0000000000000000L,0x0000000000000000L,0x000C002000000000L});
    public static final BitSet FOLLOW_subSelectGroupExpression_in_evalEqualsExpression4838 = new BitSet(new long[]{0x0000040000000002L,0x0000000000000000L,0x0000000000000000L,0x000C002000000000L});
    public static final BitSet FOLLOW_concatenationExpr_in_evalRelationalExpression4966 = new BitSet(new long[]{0x00000000000023C2L,0x0000000000000000L,0x0000000000000000L,0x00F0000000000000L});
    public static final BitSet FOLLOW_LT_in_evalRelationalExpression4998 = new BitSet(new long[]{0xC07B83E80FFC4430L,0x00000001C003AFFFL,0x0000000000000000L,0xA600609200000000L,0x000000000800003AL});
    public static final BitSet FOLLOW_GT_in_evalRelationalExpression5002 = new BitSet(new long[]{0xC07B83E80FFC4430L,0x00000001C003AFFFL,0x0000000000000000L,0xA600609200000000L,0x000000000800003AL});
    public static final BitSet FOLLOW_LE_in_evalRelationalExpression5006 = new BitSet(new long[]{0xC07B83E80FFC4430L,0x00000001C003AFFFL,0x0000000000000000L,0xA600609200000000L,0x000000000800003AL});
    public static final BitSet FOLLOW_GE_in_evalRelationalExpression5010 = new BitSet(new long[]{0xC07B83E80FFC4430L,0x00000001C003AFFFL,0x0000000000000000L,0xA600609200000000L,0x000000000800003AL});
    public static final BitSet FOLLOW_concatenationExpr_in_evalRelationalExpression5034 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x00F0000000000000L});
    public static final BitSet FOLLOW_ANY_in_evalRelationalExpression5051 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_SOME_in_evalRelationalExpression5057 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_ALL_in_evalRelationalExpression5063 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_LPAREN_in_evalRelationalExpression5069 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xA600639200000000L,0x000000000800003AL});
    public static final BitSet FOLLOW_expressionList_in_evalRelationalExpression5071 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_RPAREN_in_evalRelationalExpression5074 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x00F0000000000000L});
    public static final BitSet FOLLOW_subSelectGroupExpression_in_evalRelationalExpression5079 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x00F0000000000000L});
    public static final BitSet FOLLOW_NOT_EXPR_in_evalRelationalExpression5175 = new BitSet(new long[]{0x00000000000003C0L});
    public static final BitSet FOLLOW_IN_SET_in_evalRelationalExpression5202 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000048000000000L});
    public static final BitSet FOLLOW_LPAREN_in_evalRelationalExpression5214 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xA600629200000000L,0x000000000800003AL});
    public static final BitSet FOLLOW_LBRACK_in_evalRelationalExpression5220 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xA600629200000000L,0x000000000800003AL});
    public static final BitSet FOLLOW_expression_in_evalRelationalExpression5223 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000190800000000L});
    public static final BitSet FOLLOW_COLON_in_evalRelationalExpression5245 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xA600629200000000L,0x000000000800003AL});
    public static final BitSet FOLLOW_expression_in_evalRelationalExpression5248 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000090000000000L});
    public static final BitSet FOLLOW_COMMA_in_evalRelationalExpression5274 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xA600629200000000L,0x000000000800003AL});
    public static final BitSet FOLLOW_expression_in_evalRelationalExpression5276 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000090800000000L});
    public static final BitSet FOLLOW_RPAREN_in_evalRelationalExpression5302 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RBRACK_in_evalRelationalExpression5308 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IN_SET_in_evalRelationalExpression5431 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_inSubSelectQuery_in_evalRelationalExpression5433 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BETWEEN_in_evalRelationalExpression5479 = new BitSet(new long[]{0xC07803E80FFC4430L,0x00000001C003AFFFL,0x0000000000000000L,0xA600609200000000L,0x000000000800003AL});
    public static final BitSet FOLLOW_betweenList_in_evalRelationalExpression5481 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LIKE_in_evalRelationalExpression5531 = new BitSet(new long[]{0xC07803E80FFC4430L,0x00000001C003AFFFL,0x0000000000000000L,0xA600609200000000L,0x000000000800003AL});
    public static final BitSet FOLLOW_concatenationExpr_in_evalRelationalExpression5533 = new BitSet(new long[]{0x0000000000000402L});
    public static final BitSet FOLLOW_ESCAPE_in_evalRelationalExpression5536 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000600000000000L});
    public static final BitSet FOLLOW_stringconstant_in_evalRelationalExpression5538 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGEXP_in_evalRelationalExpression5590 = new BitSet(new long[]{0xC07803E80FFC4430L,0x00000001C003AFFFL,0x0000000000000000L,0xA600609200000000L,0x000000000800003AL});
    public static final BitSet FOLLOW_concatenationExpr_in_evalRelationalExpression5592 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subQueryExpr_in_inSubSelectQuery5654 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_additiveExpression_in_concatenationExpr5679 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_LOR_in_concatenationExpr5685 = new BitSet(new long[]{0xC07803E80FFC4430L,0x00000001C003AFFFL,0x0000000000000000L,0xA600609200000000L,0x000000000800003AL});
    public static final BitSet FOLLOW_additiveExpression_in_concatenationExpr5687 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_LOR_in_concatenationExpr5691 = new BitSet(new long[]{0xC07803E80FFC4430L,0x00000001C003AFFFL,0x0000000000000000L,0xA600609200000000L,0x000000000800003AL});
    public static final BitSet FOLLOW_additiveExpression_in_concatenationExpr5693 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_multiplyExpression_in_additiveExpression5734 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0600000000000000L});
    public static final BitSet FOLLOW_PLUS_in_additiveExpression5739 = new BitSet(new long[]{0xC07803E80FFC4430L,0x00000001C003AFFFL,0x0000000000000000L,0xA600609200000000L,0x000000000800003AL});
    public static final BitSet FOLLOW_MINUS_in_additiveExpression5742 = new BitSet(new long[]{0xC07803E80FFC4430L,0x00000001C003AFFFL,0x0000000000000000L,0xA600609200000000L,0x000000000800003AL});
    public static final BitSet FOLLOW_multiplyExpression_in_additiveExpression5746 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0600000000000000L});
    public static final BitSet FOLLOW_unaryExpression_in_multiplyExpression5760 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x1800020000000000L});
    public static final BitSet FOLLOW_STAR_in_multiplyExpression5765 = new BitSet(new long[]{0xC07803E80FFC4430L,0x00000001C003AFFFL,0x0000000000000000L,0xA600609200000000L,0x000000000800003AL});
    public static final BitSet FOLLOW_DIV_in_multiplyExpression5768 = new BitSet(new long[]{0xC07803E80FFC4430L,0x00000001C003AFFFL,0x0000000000000000L,0xA600609200000000L,0x000000000800003AL});
    public static final BitSet FOLLOW_MOD_in_multiplyExpression5771 = new BitSet(new long[]{0xC07803E80FFC4430L,0x00000001C003AFFFL,0x0000000000000000L,0xA600609200000000L,0x000000000800003AL});
    public static final BitSet FOLLOW_unaryExpression_in_multiplyExpression5775 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x1800020000000000L});
    public static final BitSet FOLLOW_MINUS_in_unaryExpression5790 = new BitSet(new long[]{0xC03801E807FC4420L,0x000000000003A7BFL,0x0000000000000000L,0x0000001000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_eventProperty_in_unaryExpression5792 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constant_in_unaryExpression5805 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_substitution_in_unaryExpression5810 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_unaryExpression5815 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xA600629200000000L,0x000000000800003AL});
    public static final BitSet FOLLOW_expression_in_unaryExpression5818 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_RPAREN_in_unaryExpression5820 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventPropertyOrLibFunction_in_unaryExpression5826 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_builtinFunc_in_unaryExpression5838 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arrayExpression_in_unaryExpression5844 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subSelectExpression_in_unaryExpression5849 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_existsSubSelectExpression_in_unaryExpression5854 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subQueryExpr_in_subSelectExpression5871 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subQueryExpr_in_subSelectGroupExpression5893 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXISTS_in_existsSubSelectExpression5915 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_subQueryExpr_in_existsSubSelectExpression5917 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_subQueryExpr5950 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_SELECT_in_subQueryExpr5956 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xA600629200000000L,0x000000000800003AL});
    public static final BitSet FOLLOW_selectionListElement_in_subQueryExpr5959 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_FROM_in_subQueryExpr5966 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_subSelectFilterExpr_in_subQueryExpr5969 = new BitSet(new long[]{0x0000000000010000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_WHERE_in_subQueryExpr5977 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xA600629200000000L,0x000000000800003AL});
    public static final BitSet FOLLOW_whereClause_in_subQueryExpr5980 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_RPAREN_in_subQueryExpr5989 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventFilterExpression_in_subSelectFilterExpr6013 = new BitSet(new long[]{0x8000000000020002L,0x0000000000000001L,0x0000000000000000L,0x0000005000000000L});
    public static final BitSet FOLLOW_DOT_in_subSelectFilterExpr6018 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_viewExpression_in_subSelectFilterExpr6020 = new BitSet(new long[]{0x8000000000020002L,0x0000000000000001L,0x0000000000000000L,0x0000005000000000L});
    public static final BitSet FOLLOW_DOT_in_subSelectFilterExpr6023 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_viewExpression_in_subSelectFilterExpr6025 = new BitSet(new long[]{0x8000000000020002L,0x0000000000000001L,0x0000000000000000L,0x0000005000000000L});
    public static final BitSet FOLLOW_AS_in_subSelectFilterExpr6032 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_subSelectFilterExpr6036 = new BitSet(new long[]{0x8000000000000002L,0x0000000000000001L});
    public static final BitSet FOLLOW_IDENT_in_subSelectFilterExpr6042 = new BitSet(new long[]{0x8000000000000002L,0x0000000000000001L});
    public static final BitSet FOLLOW_RETAINUNION_in_subSelectFilterExpr6049 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETAININTERSECTION_in_subSelectFilterExpr6053 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCURLY_in_arrayExpression6093 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xE600629200000000L,0x000000000800003AL});
    public static final BitSet FOLLOW_expression_in_arrayExpression6096 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000800000000L});
    public static final BitSet FOLLOW_COMMA_in_arrayExpression6099 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xA600629200000000L,0x000000000800003AL});
    public static final BitSet FOLLOW_expression_in_arrayExpression6101 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000800000000L});
    public static final BitSet FOLLOW_RCURLY_in_arrayExpression6108 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SUM_in_builtinFunc6131 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc6134 = new BitSet(new long[]{0xF878C3E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xA600629200000000L,0x000000000800003AL});
    public static final BitSet FOLLOW_ALL_in_builtinFunc6138 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xA600629200000000L,0x000000000800003AL});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc6143 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xA600629200000000L,0x000000000800003AL});
    public static final BitSet FOLLOW_expression_in_builtinFunc6147 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc6149 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AVG_in_builtinFunc6155 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc6158 = new BitSet(new long[]{0xF878C3E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xA600629200000000L,0x000000000800003AL});
    public static final BitSet FOLLOW_ALL_in_builtinFunc6162 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xA600629200000000L,0x000000000800003AL});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc6167 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xA600629200000000L,0x000000000800003AL});
    public static final BitSet FOLLOW_expression_in_builtinFunc6171 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc6173 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COUNT_in_builtinFunc6179 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc6182 = new BitSet(new long[]{0xF878C3E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xA600629200000000L,0x000000000800003AL});
    public static final BitSet FOLLOW_ALL_in_builtinFunc6194 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xA600629200000000L,0x000000000800003AL});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc6199 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xA600629200000000L,0x000000000800003AL});
    public static final BitSet FOLLOW_expression_in_builtinFunc6203 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_STAR_in_builtinFunc6214 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc6225 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MEDIAN_in_builtinFunc6231 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc6234 = new BitSet(new long[]{0xF878C3E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xA600629200000000L,0x000000000800003AL});
    public static final BitSet FOLLOW_ALL_in_builtinFunc6238 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xA600629200000000L,0x000000000800003AL});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc6243 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xA600629200000000L,0x000000000800003AL});
    public static final BitSet FOLLOW_expression_in_builtinFunc6247 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc6249 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STDDEV_in_builtinFunc6255 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc6258 = new BitSet(new long[]{0xF878C3E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xA600629200000000L,0x000000000800003AL});
    public static final BitSet FOLLOW_ALL_in_builtinFunc6262 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xA600629200000000L,0x000000000800003AL});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc6267 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xA600629200000000L,0x000000000800003AL});
    public static final BitSet FOLLOW_expression_in_builtinFunc6271 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc6273 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AVEDEV_in_builtinFunc6279 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc6282 = new BitSet(new long[]{0xF878C3E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xA600629200000000L,0x000000000800003AL});
    public static final BitSet FOLLOW_ALL_in_builtinFunc6286 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xA600629200000000L,0x000000000800003AL});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc6291 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xA600629200000000L,0x000000000800003AL});
    public static final BitSet FOLLOW_expression_in_builtinFunc6295 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc6297 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COALESCE_in_builtinFunc6303 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc6306 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xA600629200000000L,0x000000000800003AL});
    public static final BitSet FOLLOW_expression_in_builtinFunc6309 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc6311 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xA600629200000000L,0x000000000800003AL});
    public static final BitSet FOLLOW_expression_in_builtinFunc6314 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010800000000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc6317 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xA600629200000000L,0x000000000800003AL});
    public static final BitSet FOLLOW_expression_in_builtinFunc6320 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010800000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc6324 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PREVIOUS_in_builtinFunc6330 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc6333 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xA600629200000000L,0x000000000800003AL});
    public static final BitSet FOLLOW_expression_in_builtinFunc6336 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc6338 = new BitSet(new long[]{0xC03801E807FC4420L,0x000000000003A7BFL,0x0000000000000000L,0x0000001000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_eventProperty_in_builtinFunc6341 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc6343 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRIOR_in_builtinFunc6349 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc6352 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_NUM_INT_in_builtinFunc6355 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc6357 = new BitSet(new long[]{0xC03801E807FC4420L,0x000000000003A7BFL,0x0000000000000000L,0x0000001000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_eventProperty_in_builtinFunc6360 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc6362 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSTANCEOF_in_builtinFunc6372 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc6375 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xA600629200000000L,0x000000000800003AL});
    public static final BitSet FOLLOW_expression_in_builtinFunc6378 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc6380 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_classIdentifier_in_builtinFunc6383 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010800000000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc6386 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_classIdentifier_in_builtinFunc6389 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010800000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc6393 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CAST_in_builtinFunc6399 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc6402 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xA600629200000000L,0x000000000800003AL});
    public static final BitSet FOLLOW_expression_in_builtinFunc6405 = new BitSet(new long[]{0x0000000000020000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc6408 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_AS_in_builtinFunc6413 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_classIdentifier_in_builtinFunc6417 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc6419 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXISTS_in_builtinFunc6425 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc6428 = new BitSet(new long[]{0xC03801E807FC4420L,0x000000000003A7BFL,0x0000000000000000L,0x0000001000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_eventProperty_in_builtinFunc6431 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc6433 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CURRENT_TIMESTAMP_in_builtinFunc6439 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc6443 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc6446 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MAX_in_maxFunc6462 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_MIN_in_maxFunc6467 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_LPAREN_in_maxFunc6471 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xA600629200000000L,0x000000000800003AL});
    public static final BitSet FOLLOW_expression_in_maxFunc6474 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010800000000L});
    public static final BitSet FOLLOW_COMMA_in_maxFunc6477 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xA600629200000000L,0x000000000800003AL});
    public static final BitSet FOLLOW_expression_in_maxFunc6480 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010800000000L});
    public static final BitSet FOLLOW_COMMA_in_maxFunc6483 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xA600629200000000L,0x000000000800003AL});
    public static final BitSet FOLLOW_expression_in_maxFunc6486 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010800000000L});
    public static final BitSet FOLLOW_RPAREN_in_maxFunc6493 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventProperty_in_eventPropertyOrLibFunction6512 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_libFunction_in_eventPropertyOrLibFunction6517 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classIdentifierNonGreedy_in_libFunction6530 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_DOT_in_libFunction6532 = new BitSet(new long[]{0xC03801E807FC4420L,0x000000000003A7BFL,0x0000000000000000L,0x0000001000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_funcIdent_in_libFunction6536 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_LPAREN_in_libFunction6538 = new BitSet(new long[]{0xF878C3E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xA600639200000000L,0x000000000800003AL});
    public static final BitSet FOLLOW_libFunctionArgs_in_libFunction6541 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_RPAREN_in_libFunction6545 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_funcIdent6575 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MAX_in_funcIdent6582 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MIN_in_funcIdent6594 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALL_in_libFunctionArgs6612 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xA600629200000000L,0x000000000800003AL});
    public static final BitSet FOLLOW_DISTINCT_in_libFunctionArgs6617 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xA600629200000000L,0x000000000800003AL});
    public static final BitSet FOLLOW_expression_in_libFunctionArgs6621 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_COMMA_in_libFunctionArgs6624 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xA600629200000000L,0x000000000800003AL});
    public static final BitSet FOLLOW_expression_in_libFunctionArgs6627 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_concatenationExpr_in_betweenList6641 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_AND_EXPR_in_betweenList6643 = new BitSet(new long[]{0xC07803E80FFC4430L,0x00000001C003AFFFL,0x0000000000000000L,0xA600609200000000L,0x000000000800003AL});
    public static final BitSet FOLLOW_concatenationExpr_in_betweenList6646 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_followedByExpression_in_patternExpression6674 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_orExpression_in_followedByExpression6686 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_FOLLOWED_BY_in_followedByExpression6691 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000049000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_orExpression_in_followedByExpression6693 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_andExpression_in_orExpression6732 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_OR_EXPR_in_orExpression6737 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000049000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_andExpression_in_orExpression6739 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_matchUntilExpression_in_andExpression6771 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_AND_EXPR_in_andExpression6776 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000049000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_matchUntilExpression_in_andExpression6778 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_matchUntilRange_in_matchUntilExpression6813 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000049000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_qualifyExpression_in_matchUntilExpression6817 = new BitSet(new long[]{0x0000000000000002L,0x0000000000010000L});
    public static final BitSet FOLLOW_UNTIL_in_matchUntilExpression6822 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000049000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_qualifyExpression_in_matchUntilExpression6824 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EVERY_EXPR_in_qualifyExpression6889 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000049000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_RESUME_EXPR_in_qualifyExpression6895 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000049000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_NOT_EXPR_in_qualifyExpression6901 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000049000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_matchUntilRange_in_qualifyExpression6907 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000049000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_guardPostFix_in_qualifyExpression6916 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_atomicExpression_in_guardPostFix7028 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_LPAREN_in_guardPostFix7034 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000049000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_patternExpression_in_guardPostFix7036 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_RPAREN_in_guardPostFix7038 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_WHERE_in_guardPostFix7044 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_guardExpression_in_guardPostFix7046 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_observerExpression_in_atomicExpression7088 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_patternFilterExpression_in_atomicExpression7092 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_observerExpression7107 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_COLON_in_observerExpression7109 = new BitSet(new long[]{0x0000000000000000L,0x0000000000020000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_observerExpression7114 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_AT_in_observerExpression7120 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_LPAREN_in_observerExpression7123 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xA600679200000000L,0x000000000800003AL});
    public static final BitSet FOLLOW_expressionWithTimeList_in_observerExpression7125 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_RPAREN_in_observerExpression7128 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_guardExpression7177 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_COLON_in_guardExpression7179 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_guardExpression7182 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_LPAREN_in_guardExpression7184 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xA600679200000000L,0x000000000800003AL});
    public static final BitSet FOLLOW_expressionWithTimeList_in_guardExpression7188 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_RPAREN_in_guardExpression7192 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACK_in_matchUntilRange7206 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000004200000000L});
    public static final BitSet FOLLOW_NUM_INT_in_matchUntilRange7215 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000184000000000L});
    public static final BitSet FOLLOW_DOT_in_matchUntilRange7223 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_DOT_in_matchUntilRange7225 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000080000000000L});
    public static final BitSet FOLLOW_NUM_INT_in_matchUntilRange7229 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_COLON_in_matchUntilRange7253 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_NUM_INT_in_matchUntilRange7257 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_NUM_DOUBLE_in_matchUntilRange7279 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000084200000000L});
    public static final BitSet FOLLOW_DOT_in_matchUntilRange7311 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000080000000000L});
    public static final BitSet FOLLOW_NUM_INT_in_matchUntilRange7315 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_NUM_DOUBLE_in_matchUntilRange7375 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_DOT_in_matchUntilRange7412 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_DOT_in_matchUntilRange7414 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_NUM_INT_in_matchUntilRange7418 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_DOT_in_matchUntilRange7427 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_NUM_DOUBLE_in_matchUntilRange7431 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_RBRACK_in_matchUntilRange7442 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_eventFilterExpression7627 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_EQUALS_in_eventFilterExpression7629 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_classIdentifier_in_eventFilterExpression7638 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000048000000000L});
    public static final BitSet FOLLOW_LPAREN_in_eventFilterExpression7649 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xA600639200000000L,0x000000000800003AL});
    public static final BitSet FOLLOW_expressionList_in_eventFilterExpression7651 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_RPAREN_in_eventFilterExpression7654 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_propertyExpression_in_eventFilterExpression7666 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyExpressionAtomic_in_propertyExpression7711 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_propertyExpressionAtomic_in_propertyExpression7714 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_LBRACK_in_propertyExpressionAtomic7744 = new BitSet(new long[]{0xC03801E80FFC4420L,0x000000000003A7BFL,0x0000000000000000L,0x0000001000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_SELECT_in_propertyExpressionAtomic7747 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xA600629200000000L,0x000000000800003AL});
    public static final BitSet FOLLOW_propertySelectionList_in_propertyExpressionAtomic7749 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_FROM_in_propertyExpressionAtomic7751 = new BitSet(new long[]{0xC03801E807FC4420L,0x000000000003A7BFL,0x0000000000000000L,0x0000001000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_eventProperty_in_propertyExpressionAtomic7755 = new BitSet(new long[]{0x0000000000030000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_AS_in_propertyExpressionAtomic7758 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_propertyExpressionAtomic7760 = new BitSet(new long[]{0x0000000000010000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_WHERE_in_propertyExpressionAtomic7765 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xA600629200000000L,0x000000000800003AL});
    public static final BitSet FOLLOW_expression_in_propertyExpressionAtomic7767 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_RBRACK_in_propertyExpressionAtomic7771 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertySelectionListElement_in_propertySelectionList7821 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_COMMA_in_propertySelectionList7824 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xA600629200000000L,0x000000000800003AL});
    public static final BitSet FOLLOW_propertySelectionListElement_in_propertySelectionList7827 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_STAR_in_propertySelectionListElement7853 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyStreamSelector_in_propertySelectionListElement7869 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_propertySelectionListElement7874 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_AS_in_propertySelectionListElement7877 = new BitSet(new long[]{0xC03801E807FC4420L,0x000000000003A7BFL,0x0000000000000000L,0x0000001000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_propertySelectionListElement7881 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_propertyStreamSelector7925 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_DOT_in_propertyStreamSelector7927 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_STAR_in_propertyStreamSelector7929 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_AS_in_propertyStreamSelector7932 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_IDENT_in_propertyStreamSelector7936 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_patternFilterExpression7983 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_EQUALS_in_patternFilterExpression7985 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_classIdentifier_in_patternFilterExpression7994 = new BitSet(new long[]{0x0000400000000002L,0x0000000000000000L,0x0000000000000000L,0x0000048000000000L});
    public static final BitSet FOLLOW_LPAREN_in_patternFilterExpression8005 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xA600639200000000L,0x000000000800003AL});
    public static final BitSet FOLLOW_expressionList_in_patternFilterExpression8007 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_RPAREN_in_patternFilterExpression8010 = new BitSet(new long[]{0x0000400000000002L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_propertyExpression_in_patternFilterExpression8022 = new BitSet(new long[]{0x0000400000000002L});
    public static final BitSet FOLLOW_distinctExpression_in_patternFilterExpression8033 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DISTINCT_in_distinctExpression8077 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000048000000000L});
    public static final BitSet FOLLOW_LBRACK_in_distinctExpression8080 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8600000200000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_number_in_distinctExpression8082 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_RBRACK_in_distinctExpression8084 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_LPAREN_in_distinctExpression8088 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xA600629200000000L,0x000000000800003AL});
    public static final BitSet FOLLOW_distinctExpressionAtom_in_distinctExpression8090 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010800000000L});
    public static final BitSet FOLLOW_COMMA_in_distinctExpression8093 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xA600629200000000L,0x000000000800003AL});
    public static final BitSet FOLLOW_distinctExpressionAtom_in_distinctExpression8095 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010800000000L});
    public static final BitSet FOLLOW_RPAREN_in_distinctExpression8099 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_distinctExpressionAtom8123 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_escapableIdent_in_classIdentifier8160 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_DOT_in_classIdentifier8179 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_escapableIdent_in_classIdentifier8183 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_escapableIdent_in_classIdentifierNonGreedy8228 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_DOT_in_classIdentifierNonGreedy8263 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_escapableIdent_in_classIdentifierNonGreedy8267 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_expression_in_expressionList8309 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_COMMA_in_expressionList8312 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xA600629200000000L,0x000000000800003AL});
    public static final BitSet FOLLOW_expression_in_expressionList8315 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_expressionWithTime_in_expressionWithTimeList8343 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_COMMA_in_expressionWithTimeList8346 = new BitSet(new long[]{0xF87803E81FFC6430L,0x00000001C003AFFFL,0x0000000000000000L,0xA600669200000000L,0x000000000800003AL});
    public static final BitSet FOLLOW_expressionWithTime_in_expressionWithTimeList8349 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_lastOperand_in_expressionWithTime8375 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastWeekdayOperand_in_expressionWithTime8386 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_timePeriod_in_expressionWithTime8397 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expressionQualifyable_in_expressionWithTime8408 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rangeOperand_in_expressionWithTime8419 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_frequencyOperand_in_expressionWithTime8431 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastOperator_in_expressionWithTime8442 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_weekDayOperator_in_expressionWithTime8454 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numericParameterList_in_expressionWithTime8466 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberSetStar_in_expressionWithTime8471 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_expressionQualifyable8482 = new BitSet(new long[]{0x0600000000000002L,0x0000000007000000L});
    public static final BitSet FOLLOW_ASC_in_expressionQualifyable8487 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DESC_in_expressionQualifyable8491 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_SECONDS_in_expressionQualifyable8495 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_SECOND_in_expressionQualifyable8499 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_SEC_in_expressionQualifyable8503 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_numberSetStar8560 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LW_in_lastWeekdayOperand8580 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LAST_in_lastOperand8593 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_frequencyOperand8605 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_DIV_in_frequencyOperand8607 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8600001200000000L,0x0000000000000032L});
    public static final BitSet FOLLOW_number_in_frequencyOperand8610 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_frequencyOperand8614 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_substitution_in_frequencyOperand8616 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_rangeOperand8665 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_IDENT_in_rangeOperand8669 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_substitution_in_rangeOperand8671 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_COLON_in_rangeOperand8674 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8600001200000000L,0x0000000000000032L});
    public static final BitSet FOLLOW_number_in_rangeOperand8677 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_rangeOperand8681 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_substitution_in_rangeOperand8683 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_lastOperator8797 = new BitSet(new long[]{0x0020000000000000L});
    public static final BitSet FOLLOW_IDENT_in_lastOperator8801 = new BitSet(new long[]{0x0020000000000000L});
    public static final BitSet FOLLOW_substitution_in_lastOperator8803 = new BitSet(new long[]{0x0020000000000000L});
    public static final BitSet FOLLOW_LAST_in_lastOperator8806 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_weekDayOperator8854 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_IDENT_in_weekDayOperator8858 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_substitution_in_weekDayOperator8860 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_WEEKDAY_in_weekDayOperator8863 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACK_in_numericParameterList8910 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8600021200000000L,0x0000000000000032L});
    public static final BitSet FOLLOW_numericListParameter_in_numericParameterList8912 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080800000000L});
    public static final BitSet FOLLOW_COMMA_in_numericParameterList8915 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8600021200000000L,0x0000000000000032L});
    public static final BitSet FOLLOW_numericListParameter_in_numericParameterList8917 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080800000000L});
    public static final BitSet FOLLOW_RBRACK_in_numericParameterList8921 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rangeOperand_in_numericListParameter8943 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_frequencyOperand_in_numericListParameter8949 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberconstant_in_numericListParameter8954 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventPropertyAtomic_in_eventProperty8970 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_DOT_in_eventProperty8973 = new BitSet(new long[]{0xC03801E807FC4420L,0x000000000003A7BFL,0x0000000000000000L,0x0000001000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_eventPropertyAtomic_in_eventProperty8975 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_eventPropertyIdent_in_eventPropertyAtomic9001 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000048000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACK_in_eventPropertyAtomic9010 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_NUM_INT_in_eventPropertyAtomic9014 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_RBRACK_in_eventPropertyAtomic9016 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_QUESTION_in_eventPropertyAtomic9021 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_eventPropertyAtomic9035 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000600000000000L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_eventPropertyAtomic9040 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_QUOTED_STRING_LITERAL_in_eventPropertyAtomic9046 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_RPAREN_in_eventPropertyAtomic9049 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_QUESTION_in_eventPropertyAtomic9054 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUESTION_in_eventPropertyAtomic9068 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_eventPropertyIdent9191 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_ESCAPECHAR_in_eventPropertyIdent9203 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_DOT_in_eventPropertyIdent9205 = new BitSet(new long[]{0xC03801E807FC4422L,0x000000000003A7BFL,0x0000000000000000L,0x0000001000000000L,0x000000000000000CL});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_eventPropertyIdent9209 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_IDENT_in_keywordAllowedIdent9248 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TICKED_STRING_LITERAL_in_keywordAllowedIdent9257 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AT_in_keywordAllowedIdent9264 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COUNT_in_keywordAllowedIdent9271 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ESCAPE_in_keywordAllowedIdent9278 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EVERY_EXPR_in_keywordAllowedIdent9289 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SUM_in_keywordAllowedIdent9296 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AVG_in_keywordAllowedIdent9303 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MAX_in_keywordAllowedIdent9310 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MIN_in_keywordAllowedIdent9317 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COALESCE_in_keywordAllowedIdent9324 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MEDIAN_in_keywordAllowedIdent9331 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STDDEV_in_keywordAllowedIdent9338 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AVEDEV_in_keywordAllowedIdent9345 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EVENTS_in_keywordAllowedIdent9352 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FIRST_in_keywordAllowedIdent9359 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LAST_in_keywordAllowedIdent9366 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNIDIRECTIONAL_in_keywordAllowedIdent9373 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETAINUNION_in_keywordAllowedIdent9380 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETAININTERSECTION_in_keywordAllowedIdent9387 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNTIL_in_keywordAllowedIdent9394 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PATTERN_in_keywordAllowedIdent9401 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL_in_keywordAllowedIdent9408 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_METADATASQL_in_keywordAllowedIdent9415 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PREVIOUS_in_keywordAllowedIdent9422 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRIOR_in_keywordAllowedIdent9429 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WEEKDAY_in_keywordAllowedIdent9436 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LW_in_keywordAllowedIdent9443 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSTANCEOF_in_keywordAllowedIdent9450 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CAST_in_keywordAllowedIdent9457 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SNAPSHOT_in_keywordAllowedIdent9464 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VARIABLE_in_keywordAllowedIdent9471 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WINDOW_in_keywordAllowedIdent9480 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_in_keywordAllowedIdent9487 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RIGHT_in_keywordAllowedIdent9494 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OUTER_in_keywordAllowedIdent9501 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FULL_in_keywordAllowedIdent9508 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_JOIN_in_keywordAllowedIdent9515 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_escapableIdent9536 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TICKED_STRING_LITERAL_in_escapableIdent9545 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dayPart_in_timePeriod9568 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x8600001200000000L,0x0000000000000032L});
    public static final BitSet FOLLOW_hourPart_in_timePeriod9570 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x8600001200000000L,0x0000000000000032L});
    public static final BitSet FOLLOW_minutePart_in_timePeriod9573 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x8600001200000000L,0x0000000000000032L});
    public static final BitSet FOLLOW_secondPart_in_timePeriod9576 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x8600001200000000L,0x0000000000000032L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod9579 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_hourPart_in_timePeriod9585 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x8600001200000000L,0x0000000000000032L});
    public static final BitSet FOLLOW_minutePart_in_timePeriod9587 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x8600001200000000L,0x0000000000000032L});
    public static final BitSet FOLLOW_secondPart_in_timePeriod9590 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x8600001200000000L,0x0000000000000032L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod9593 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_minutePart_in_timePeriod9599 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x8600001200000000L,0x0000000000000032L});
    public static final BitSet FOLLOW_secondPart_in_timePeriod9601 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x8600001200000000L,0x0000000000000032L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod9604 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_secondPart_in_timePeriod9610 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x8600001200000000L,0x0000000000000032L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod9612 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod9618 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_dayPart9656 = new BitSet(new long[]{0x0000000000000000L,0x00000000000C0000L});
    public static final BitSet FOLLOW_IDENT_in_dayPart9660 = new BitSet(new long[]{0x0000000000000000L,0x00000000000C0000L});
    public static final BitSet FOLLOW_substitution_in_dayPart9662 = new BitSet(new long[]{0x0000000000000000L,0x00000000000C0000L});
    public static final BitSet FOLLOW_TIMEPERIOD_DAYS_in_dayPart9666 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_DAY_in_dayPart9670 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_hourPart9719 = new BitSet(new long[]{0x0000000000000000L,0x0000000000300000L});
    public static final BitSet FOLLOW_IDENT_in_hourPart9723 = new BitSet(new long[]{0x0000000000000000L,0x0000000000300000L});
    public static final BitSet FOLLOW_substitution_in_hourPart9725 = new BitSet(new long[]{0x0000000000000000L,0x0000000000300000L});
    public static final BitSet FOLLOW_TIMEPERIOD_HOURS_in_hourPart9729 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_HOUR_in_hourPart9733 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_minutePart9782 = new BitSet(new long[]{0x0000000000200000L,0x0000000000C00000L});
    public static final BitSet FOLLOW_IDENT_in_minutePart9786 = new BitSet(new long[]{0x0000000000200000L,0x0000000000C00000L});
    public static final BitSet FOLLOW_substitution_in_minutePart9788 = new BitSet(new long[]{0x0000000000200000L,0x0000000000C00000L});
    public static final BitSet FOLLOW_TIMEPERIOD_MINUTES_in_minutePart9792 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_MINUTE_in_minutePart9796 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MIN_in_minutePart9800 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_secondPart9850 = new BitSet(new long[]{0x0000000000000000L,0x0000000007000000L});
    public static final BitSet FOLLOW_IDENT_in_secondPart9854 = new BitSet(new long[]{0x0000000000000000L,0x0000000007000000L});
    public static final BitSet FOLLOW_substitution_in_secondPart9856 = new BitSet(new long[]{0x0000000000000000L,0x0000000007000000L});
    public static final BitSet FOLLOW_TIMEPERIOD_SECONDS_in_secondPart9860 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_SECOND_in_secondPart9864 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_SEC_in_secondPart9868 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_millisecondPart9918 = new BitSet(new long[]{0x0000000000000000L,0x0000000038000000L});
    public static final BitSet FOLLOW_IDENT_in_millisecondPart9922 = new BitSet(new long[]{0x0000000000000000L,0x0000000038000000L});
    public static final BitSet FOLLOW_substitution_in_millisecondPart9924 = new BitSet(new long[]{0x0000000000000000L,0x0000000038000000L});
    public static final BitSet FOLLOW_TIMEPERIOD_MILLISECONDS_in_millisecondPart9928 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_MILLISECOND_in_millisecondPart9932 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_MILLISEC_in_millisecondPart9936 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUM_INT_in_number9991 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUM_LONG_in_number10008 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUM_FLOAT_in_number10025 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUM_DOUBLE_in_number10042 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUESTION_in_substitution10063 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberconstant_in_constant10082 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stringconstant_in_constant10089 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BOOLEAN_TRUE_in_constant10102 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BOOLEAN_FALSE_in_constant10122 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VALUE_NULL_in_constant10142 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUS_in_numberconstant10164 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8600000200000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_PLUS_in_numberconstant10170 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8600000200000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_number_in_numberconstant10174 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_stringconstant10203 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUOTED_STRING_LITERAL_in_stringconstant10219 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_streamSelector_in_synpred1_EsperEPL2Grammar3413 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_timePeriod_in_synpred2_EsperEPL2Grammar4101 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_builtinFunc_in_synpred3_EsperEPL2Grammar5832 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventProperty_in_synpred4_EsperEPL2Grammar6507 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyStreamSelector_in_synpred5_EsperEPL2Grammar7864 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastOperand_in_synpred6_EsperEPL2Grammar8370 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastWeekdayOperand_in_synpred7_EsperEPL2Grammar8381 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_timePeriod_in_synpred8_EsperEPL2Grammar8392 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expressionQualifyable_in_synpred9_EsperEPL2Grammar8403 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rangeOperand_in_synpred10_EsperEPL2Grammar8414 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_frequencyOperand_in_synpred11_EsperEPL2Grammar8426 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastOperator_in_synpred12_EsperEPL2Grammar8437 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_weekDayOperator_in_synpred13_EsperEPL2Grammar8448 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numericParameterList_in_synpred14_EsperEPL2Grammar8461 = new BitSet(new long[]{0x0000000000000002L});

}
