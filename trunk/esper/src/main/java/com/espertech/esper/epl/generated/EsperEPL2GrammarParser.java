// $ANTLR 3.1.1 EsperEPL2Grammar.g 2009-05-03 17:33:14

  package com.espertech.esper.epl.generated;


import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.tree.*;

public class EsperEPL2GrammarParser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "CREATE", "WINDOW", "IN_SET", "BETWEEN", "LIKE", "REGEXP", "ESCAPE", "OR_EXPR", "AND_EXPR", "NOT_EXPR", "EVERY_EXPR", "WHERE", "AS", "SUM", "AVG", "MAX", "MIN", "COALESCE", "MEDIAN", "STDDEV", "AVEDEV", "COUNT", "SELECT", "CASE", "CASE2", "ELSE", "WHEN", "THEN", "END", "FROM", "OUTER", "INNER", "JOIN", "LEFT", "RIGHT", "FULL", "ON", "IS", "BY", "GROUP", "HAVING", "DISTINCT", "ALL", "ANY", "SOME", "OUTPUT", "EVENTS", "FIRST", "LAST", "INSERT", "INTO", "ORDER", "ASC", "DESC", "RSTREAM", "ISTREAM", "IRSTREAM", "UNIDIRECTIONAL", "RETAINUNION", "RETAININTERSECTION", "PATTERN", "SQL", "METADATASQL", "PREVIOUS", "PRIOR", "EXISTS", "WEEKDAY", "LW", "INSTANCEOF", "CAST", "CURRENT_TIMESTAMP", "DELETE", "SNAPSHOT", "SET", "VARIABLE", "UNTIL", "AT", "TIMEPERIOD_DAY", "TIMEPERIOD_DAYS", "TIMEPERIOD_HOUR", "TIMEPERIOD_HOURS", "TIMEPERIOD_MINUTE", "TIMEPERIOD_MINUTES", "TIMEPERIOD_SEC", "TIMEPERIOD_SECOND", "TIMEPERIOD_SECONDS", "TIMEPERIOD_MILLISEC", "TIMEPERIOD_MILLISECOND", "TIMEPERIOD_MILLISECONDS", "BOOLEAN_TRUE", "BOOLEAN_FALSE", "VALUE_NULL", "ROW_LIMIT_EXPR", "OFFSET", "NUMERIC_PARAM_RANGE", "NUMERIC_PARAM_LIST", "NUMERIC_PARAM_FREQUENCY", "OBJECT_PARAM_ORDERED_EXPR", "FOLLOWED_BY_EXPR", "ARRAY_PARAM_LIST", "PATTERN_FILTER_EXPR", "PATTERN_NOT_EXPR", "EVENT_FILTER_EXPR", "EVENT_FILTER_PROPERTY_EXPR", "EVENT_FILTER_PROPERTY_EXPR_ATOM", "PROPERTY_SELECTION_ELEMENT_EXPR", "PROPERTY_SELECTION_STREAM", "PROPERTY_WILDCARD_SELECT", "EVENT_FILTER_IDENT", "EVENT_FILTER_PARAM", "EVENT_FILTER_RANGE", "EVENT_FILTER_NOT_RANGE", "EVENT_FILTER_IN", "EVENT_FILTER_NOT_IN", "EVENT_FILTER_BETWEEN", "EVENT_FILTER_NOT_BETWEEN", "CLASS_IDENT", "GUARD_EXPR", "OBSERVER_EXPR", "VIEW_EXPR", "PATTERN_INCL_EXPR", "DATABASE_JOIN_EXPR", "WHERE_EXPR", "HAVING_EXPR", "EVAL_BITWISE_EXPR", "EVAL_AND_EXPR", "EVAL_OR_EXPR", "EVAL_EQUALS_EXPR", "EVAL_NOTEQUALS_EXPR", "EVAL_EQUALS_GROUP_EXPR", "EVAL_NOTEQUALS_GROUP_EXPR", "EVAL_IDENT", "SELECTION_EXPR", "SELECTION_ELEMENT_EXPR", "SELECTION_STREAM", "STREAM_EXPR", "OUTERJOIN_EXPR", "INNERJOIN_EXPR", "LEFT_OUTERJOIN_EXPR", "RIGHT_OUTERJOIN_EXPR", "FULL_OUTERJOIN_EXPR", "GROUP_BY_EXPR", "ORDER_BY_EXPR", "ORDER_ELEMENT_EXPR", "EVENT_PROP_EXPR", "EVENT_PROP_SIMPLE", "EVENT_PROP_MAPPED", "EVENT_PROP_INDEXED", "EVENT_PROP_DYNAMIC_SIMPLE", "EVENT_PROP_DYNAMIC_INDEXED", "EVENT_PROP_DYNAMIC_MAPPED", "EVENT_LIMIT_EXPR", "TIMEPERIOD_LIMIT_EXPR", "CRONTAB_LIMIT_EXPR", "CRONTAB_LIMIT_EXPR_PARAM", "WHEN_LIMIT_EXPR", "INSERTINTO_EXPR", "INSERTINTO_EXPRCOL", "CONCAT", "LIB_FUNCTION", "UNARY_MINUS", "TIME_PERIOD", "ARRAY_EXPR", "DAY_PART", "HOUR_PART", "MINUTE_PART", "SECOND_PART", "MILLISECOND_PART", "NOT_IN_SET", "NOT_BETWEEN", "NOT_LIKE", "NOT_REGEXP", "DBSELECT_EXPR", "DBFROM_CLAUSE", "DBWHERE_CLAUSE", "WILDCARD_SELECT", "INSERTINTO_STREAM_NAME", "IN_RANGE", "NOT_IN_RANGE", "SUBSELECT_EXPR", "SUBSELECT_GROUP_EXPR", "EXISTS_SUBSELECT_EXPR", "IN_SUBSELECT_EXPR", "NOT_IN_SUBSELECT_EXPR", "IN_SUBSELECT_QUERY_EXPR", "LAST_OPERATOR", "WEEKDAY_OPERATOR", "SUBSTITUTION", "CAST_EXPR", "CREATE_WINDOW_EXPR", "CREATE_WINDOW_SELECT_EXPR", "ON_EXPR", "ON_DELETE_EXPR", "ON_SELECT_EXPR", "ON_EXPR_FROM", "ON_SET_EXPR", "CREATE_VARIABLE_EXPR", "METHOD_JOIN_EXPR", "MATCH_UNTIL_EXPR", "MATCH_UNTIL_RANGE_HALFOPEN", "MATCH_UNTIL_RANGE_HALFCLOSED", "MATCH_UNTIL_RANGE_CLOSED", "MATCH_UNTIL_RANGE_BOUNDED", "CREATE_WINDOW_COL_TYPE_LIST", "CREATE_WINDOW_COL_TYPE", "NUMBERSETSTAR", "ANNOTATION", "ANNOTATION_ARRAY", "ANNOTATION_VALUE", "INT_TYPE", "LONG_TYPE", "FLOAT_TYPE", "DOUBLE_TYPE", "STRING_TYPE", "BOOL_TYPE", "NULL_TYPE", "NUM_DOUBLE", "EPL_EXPR", "COMMA", "IDENT", "EQUALS", "DOT", "LPAREN", "RPAREN", "STAR", "LBRACK", "RBRACK", "COLON", "STRING_LITERAL", "QUOTED_STRING_LITERAL", "BAND", "BOR", "BXOR", "SQL_NE", "NOT_EQUAL", "LT", "GT", "LE", "GE", "LOR", "PLUS", "MINUS", "DIV", "MOD", "LCURLY", "RCURLY", "NUM_INT", "FOLLOWED_BY", "QUESTION", "ESCAPECHAR", "TICKED_STRING_LITERAL", "NUM_LONG", "NUM_FLOAT", "EQUAL", "LNOT", "BNOT", "DIV_ASSIGN", "PLUS_ASSIGN", "INC", "MINUS_ASSIGN", "DEC", "STAR_ASSIGN", "MOD_ASSIGN", "SR", "SR_ASSIGN", "BSR", "BSR_ASSIGN", "SL", "SL_ASSIGN", "BXOR_ASSIGN", "BOR_ASSIGN", "BAND_ASSIGN", "LAND", "SEMI", "EMAILAT", "WS", "SL_COMMENT", "ML_COMMENT", "EscapeSequence", "UnicodeEscape", "OctalEscape", "HexDigit", "EXPONENT", "FLOAT_SUFFIX"
    };
    public static final int CRONTAB_LIMIT_EXPR=157;
    public static final int FLOAT_SUFFIX=287;
    public static final int STAR=228;
    public static final int NUMERIC_PARAM_LIST=99;
    public static final int MOD=247;
    public static final int ISTREAM=59;
    public static final int OUTERJOIN_EXPR=140;
    public static final int BSR=269;
    public static final int EOF=-1;
    public static final int LIB_FUNCTION=163;
    public static final int TIMEPERIOD_MILLISECONDS=92;
    public static final int FULL_OUTERJOIN_EXPR=144;
    public static final int INC=262;
    public static final int LNOT=258;
    public static final int RPAREN=227;
    public static final int CREATE=4;
    public static final int STRING_LITERAL=232;
    public static final int BSR_ASSIGN=270;
    public static final int CAST_EXPR=192;
    public static final int STREAM_EXPR=139;
    public static final int TIMEPERIOD_SECONDS=89;
    public static final int NOT_EQUAL=238;
    public static final int METADATASQL=66;
    public static final int EVENT_FILTER_PROPERTY_EXPR=107;
    public static final int REGEXP=9;
    public static final int FOLLOWED_BY_EXPR=102;
    public static final int FOLLOWED_BY=251;
    public static final int HOUR_PART=168;
    public static final int RBRACK=230;
    public static final int MATCH_UNTIL_RANGE_CLOSED=205;
    public static final int GE=242;
    public static final int METHOD_JOIN_EXPR=201;
    public static final int ASC=56;
    public static final int IN_SET=6;
    public static final int EVENT_FILTER_EXPR=106;
    public static final int MINUS_ASSIGN=263;
    public static final int ELSE=29;
    public static final int EVENT_FILTER_NOT_IN=117;
    public static final int NUM_DOUBLE=220;
    public static final int INSERTINTO_STREAM_NAME=180;
    public static final int LCURLY=248;
    public static final int TIMEPERIOD_MILLISEC=90;
    public static final int UNARY_MINUS=164;
    public static final int RETAINUNION=62;
    public static final int DBWHERE_CLAUSE=178;
    public static final int MEDIAN=22;
    public static final int EVENTS=50;
    public static final int AND_EXPR=12;
    public static final int GROUP=43;
    public static final int EVENT_FILTER_NOT_RANGE=115;
    public static final int WS=279;
    public static final int EMAILAT=278;
    public static final int SUBSELECT_GROUP_EXPR=184;
    public static final int ESCAPECHAR=253;
    public static final int SL_COMMENT=280;
    public static final int NULL_TYPE=219;
    public static final int MATCH_UNTIL_RANGE_HALFOPEN=203;
    public static final int GT=240;
    public static final int BNOT=259;
    public static final int WHERE_EXPR=126;
    public static final int END=32;
    public static final int LAND=276;
    public static final int INNERJOIN_EXPR=141;
    public static final int NOT_REGEXP=175;
    public static final int MATCH_UNTIL_EXPR=202;
    public static final int EVENT_PROP_EXPR=148;
    public static final int LBRACK=229;
    public static final int VIEW_EXPR=123;
    public static final int ANNOTATION=210;
    public static final int LONG_TYPE=214;
    public static final int EVENT_FILTER_PROPERTY_EXPR_ATOM=108;
    public static final int TIMEPERIOD_SEC=87;
    public static final int TICKED_STRING_LITERAL=254;
    public static final int ON_SELECT_EXPR=197;
    public static final int MINUTE_PART=169;
    public static final int PATTERN_NOT_EXPR=105;
    public static final int SQL_NE=237;
    public static final int SUM=17;
    public static final int HexDigit=285;
    public static final int LPAREN=226;
    public static final int AT=80;
    public static final int IN_SUBSELECT_EXPR=186;
    public static final int AS=16;
    public static final int OR_EXPR=11;
    public static final int BOOLEAN_TRUE=93;
    public static final int THEN=31;
    public static final int NOT_IN_RANGE=182;
    public static final int OFFSET=97;
    public static final int AVG=18;
    public static final int LEFT=37;
    public static final int PREVIOUS=67;
    public static final int SECOND_PART=170;
    public static final int IDENT=223;
    public static final int DATABASE_JOIN_EXPR=125;
    public static final int PLUS=244;
    public static final int BXOR=236;
    public static final int CASE2=28;
    public static final int TIMEPERIOD_DAY=81;
    public static final int EXISTS=69;
    public static final int EVENT_PROP_INDEXED=151;
    public static final int TIMEPERIOD_MILLISECOND=91;
    public static final int EVAL_NOTEQUALS_EXPR=132;
    public static final int MATCH_UNTIL_RANGE_HALFCLOSED=204;
    public static final int CREATE_VARIABLE_EXPR=200;
    public static final int CREATE_WINDOW_COL_TYPE=208;
    public static final int LIKE=8;
    public static final int OUTER=34;
    public static final int BY=42;
    public static final int ARRAY_PARAM_LIST=103;
    public static final int RIGHT_OUTERJOIN_EXPR=143;
    public static final int NUMBERSETSTAR=209;
    public static final int LAST_OPERATOR=189;
    public static final int PATTERN_FILTER_EXPR=104;
    public static final int EVAL_AND_EXPR=129;
    public static final int LEFT_OUTERJOIN_EXPR=142;
    public static final int EPL_EXPR=221;
    public static final int GROUP_BY_EXPR=145;
    public static final int SET=77;
    public static final int RIGHT=38;
    public static final int HAVING=44;
    public static final int INSTANCEOF=72;
    public static final int MIN=20;
    public static final int EVENT_PROP_SIMPLE=149;
    public static final int MINUS=245;
    public static final int SEMI=277;
    public static final int STAR_ASSIGN=265;
    public static final int COLON=231;
    public static final int EVAL_EQUALS_GROUP_EXPR=133;
    public static final int BAND_ASSIGN=275;
    public static final int CRONTAB_LIMIT_EXPR_PARAM=158;
    public static final int VALUE_NULL=95;
    public static final int NOT_IN_SET=172;
    public static final int EVENT_PROP_DYNAMIC_SIMPLE=152;
    public static final int SL=271;
    public static final int WHEN=30;
    public static final int NOT_IN_SUBSELECT_EXPR=187;
    public static final int GUARD_EXPR=121;
    public static final int SR=267;
    public static final int RCURLY=249;
    public static final int PLUS_ASSIGN=261;
    public static final int DAY_PART=167;
    public static final int EXISTS_SUBSELECT_EXPR=185;
    public static final int EVENT_FILTER_IN=116;
    public static final int DIV=246;
    public static final int OBJECT_PARAM_ORDERED_EXPR=101;
    public static final int OctalEscape=284;
    public static final int BETWEEN=7;
    public static final int MILLISECOND_PART=171;
    public static final int PRIOR=68;
    public static final int FIRST=51;
    public static final int ROW_LIMIT_EXPR=96;
    public static final int SELECTION_EXPR=136;
    public static final int LOR=243;
    public static final int CAST=73;
    public static final int LW=71;
    public static final int WILDCARD_SELECT=179;
    public static final int EXPONENT=286;
    public static final int LT=239;
    public static final int PATTERN_INCL_EXPR=124;
    public static final int ORDER_BY_EXPR=146;
    public static final int BOOL_TYPE=218;
    public static final int MOD_ASSIGN=266;
    public static final int ANNOTATION_ARRAY=211;
    public static final int CASE=27;
    public static final int IN_SUBSELECT_QUERY_EXPR=188;
    public static final int EQUALS=224;
    public static final int COUNT=25;
    public static final int RETAININTERSECTION=63;
    public static final int DIV_ASSIGN=260;
    public static final int SL_ASSIGN=272;
    public static final int PATTERN=64;
    public static final int SQL=65;
    public static final int WEEKDAY=70;
    public static final int FULL=39;
    public static final int INSERT=53;
    public static final int ESCAPE=10;
    public static final int ARRAY_EXPR=166;
    public static final int LAST=52;
    public static final int BOOLEAN_FALSE=94;
    public static final int EVAL_NOTEQUALS_GROUP_EXPR=134;
    public static final int SELECT=26;
    public static final int INTO=54;
    public static final int FLOAT_TYPE=215;
    public static final int TIMEPERIOD_SECOND=88;
    public static final int COALESCE=21;
    public static final int EVENT_FILTER_BETWEEN=118;
    public static final int ANNOTATION_VALUE=212;
    public static final int SUBSELECT_EXPR=183;
    public static final int NUMERIC_PARAM_RANGE=98;
    public static final int CONCAT=162;
    public static final int CLASS_IDENT=120;
    public static final int ON_EXPR=195;
    public static final int CREATE_WINDOW_EXPR=193;
    public static final int PROPERTY_SELECTION_STREAM=110;
    public static final int ON_DELETE_EXPR=196;
    public static final int NUM_LONG=255;
    public static final int ON=40;
    public static final int TIME_PERIOD=165;
    public static final int DOUBLE_TYPE=216;
    public static final int DELETE=75;
    public static final int INT_TYPE=213;
    public static final int EVERY_EXPR=14;
    public static final int EVAL_BITWISE_EXPR=128;
    public static final int ORDER_ELEMENT_EXPR=147;
    public static final int TIMEPERIOD_HOURS=84;
    public static final int VARIABLE=78;
    public static final int SUBSTITUTION=191;
    public static final int UNTIL=79;
    public static final int STRING_TYPE=217;
    public static final int NUM_INT=250;
    public static final int ON_SET_EXPR=199;
    public static final int STDDEV=23;
    public static final int NUM_FLOAT=256;
    public static final int ON_EXPR_FROM=198;
    public static final int FROM=33;
    public static final int DISTINCT=45;
    public static final int EscapeSequence=282;
    public static final int OUTPUT=49;
    public static final int PROPERTY_SELECTION_ELEMENT_EXPR=109;
    public static final int WEEKDAY_OPERATOR=190;
    public static final int DEC=264;
    public static final int CREATE_WINDOW_COL_TYPE_LIST=207;
    public static final int WHERE=15;
    public static final int INNER=35;
    public static final int BXOR_ASSIGN=273;
    public static final int NUMERIC_PARAM_FREQUENCY=100;
    public static final int SNAPSHOT=76;
    public static final int ORDER=55;
    public static final int EVENT_FILTER_PARAM=113;
    public static final int EVENT_PROP_DYNAMIC_MAPPED=154;
    public static final int IRSTREAM=60;
    public static final int MAX=19;
    public static final int TIMEPERIOD_DAYS=82;
    public static final int EVENT_FILTER_RANGE=114;
    public static final int ML_COMMENT=281;
    public static final int EVENT_PROP_DYNAMIC_INDEXED=153;
    public static final int BOR_ASSIGN=274;
    public static final int COMMA=222;
    public static final int IS=41;
    public static final int WHEN_LIMIT_EXPR=159;
    public static final int TIMEPERIOD_LIMIT_EXPR=156;
    public static final int SOME=48;
    public static final int EQUAL=257;
    public static final int BOR=235;
    public static final int TIMEPERIOD_HOUR=83;
    public static final int ALL=46;
    public static final int EVENT_FILTER_NOT_BETWEEN=119;
    public static final int IN_RANGE=181;
    public static final int DOT=225;
    public static final int CURRENT_TIMESTAMP=74;
    public static final int PROPERTY_WILDCARD_SELECT=111;
    public static final int INSERTINTO_EXPR=160;
    public static final int UNIDIRECTIONAL=61;
    public static final int HAVING_EXPR=127;
    public static final int MATCH_UNTIL_RANGE_BOUNDED=206;
    public static final int EVAL_EQUALS_EXPR=131;
    public static final int TIMEPERIOD_MINUTES=86;
    public static final int RSTREAM=58;
    public static final int NOT_LIKE=174;
    public static final int EVENT_LIMIT_EXPR=155;
    public static final int TIMEPERIOD_MINUTE=85;
    public static final int NOT_BETWEEN=173;
    public static final int EVAL_OR_EXPR=130;
    public static final int BAND=234;
    public static final int QUOTED_STRING_LITERAL=233;
    public static final int JOIN=36;
    public static final int ANY=47;
    public static final int NOT_EXPR=13;
    public static final int QUESTION=252;
    public static final int OBSERVER_EXPR=122;
    public static final int EVENT_FILTER_IDENT=112;
    public static final int EVENT_PROP_MAPPED=150;
    public static final int UnicodeEscape=283;
    public static final int AVEDEV=24;
    public static final int DBSELECT_EXPR=176;
    public static final int SELECTION_ELEMENT_EXPR=137;
    public static final int CREATE_WINDOW_SELECT_EXPR=194;
    public static final int WINDOW=5;
    public static final int INSERTINTO_EXPRCOL=161;
    public static final int DESC=57;
    public static final int SELECTION_STREAM=138;
    public static final int SR_ASSIGN=268;
    public static final int LE=241;
    public static final int DBFROM_CLAUSE=177;
    public static final int EVAL_IDENT=135;

    // delegates
    // delegators


        public EsperEPL2GrammarParser(TokenStream input) {
            this(input, new RecognizerSharedState());
        }
        public EsperEPL2GrammarParser(TokenStream input, RecognizerSharedState state) {
            super(input, state);
             
        }
        
    protected TreeAdaptor adaptor = new CommonTreeAdaptor();

    public void setTreeAdaptor(TreeAdaptor adaptor) {
        this.adaptor = adaptor;
    }
    public TreeAdaptor getTreeAdaptor() {
        return adaptor;
    }

    public String[] getTokenNames() { return EsperEPL2GrammarParser.tokenNames; }
    public String getGrammarFileName() { return "EsperEPL2Grammar.g"; }


      // provide nice error messages
      private Stack<String> paraphrases = new Stack<String>();
      
      // static information initialized once
      private static Map<Integer, String> lexerTokenParaphases = new HashMap<Integer, String>();
      private static Map<Integer, String> parserTokenParaphases = new HashMap<Integer, String>();
      private static java.util.Set<String> parserKeywordSet = new java.util.HashSet<String>();
        
      public Stack getParaphrases() {
        return paraphrases;
      }

      public java.util.Set<String> getKeywords() {
      	getParserTokenParaphrases();
      	return parserKeywordSet;
      }
      
      public String removeTicks(String tickedString) {
      	return com.espertech.esper.epl.parse.ASTConstantHelper.removeTicks(tickedString);
      }
      
      public Map<Integer, String> getLexerTokenParaphrases() {
        if (lexerTokenParaphases.size() == 0) {
          	lexerTokenParaphases.put(IDENT, "an identifier");
          	lexerTokenParaphases.put(NUM_INT, "a numeric literal");
    	lexerTokenParaphases.put(FOLLOWED_BY, "an followed-by '->'");
    	lexerTokenParaphases.put(EQUALS, "an equals '='");
    	lexerTokenParaphases.put(SQL_NE, "a sql-style not equals '<>'");
    	lexerTokenParaphases.put(QUESTION, "a questionmark '?'");
    	lexerTokenParaphases.put(LPAREN, "an opening parenthesis '('");
    	lexerTokenParaphases.put(RPAREN, "a closing parenthesis ')'");
    	lexerTokenParaphases.put(LBRACK, "a left angle bracket '['");
    	lexerTokenParaphases.put(RBRACK, "a right angle bracket ']'");
    	lexerTokenParaphases.put(LCURLY, "a left curly bracket '{'");
    	lexerTokenParaphases.put(RCURLY, "a right curly bracket '}'");
    	lexerTokenParaphases.put(COLON, "a colon ':'");
    	lexerTokenParaphases.put(COMMA, "a comma ','");
    	lexerTokenParaphases.put(EQUAL, "an equals compare '=='");
    	lexerTokenParaphases.put(LNOT, "a not '!'");
    	lexerTokenParaphases.put(BNOT, "a binary not '~'");
    	lexerTokenParaphases.put(NOT_EQUAL, "a not equals '!='");
    	lexerTokenParaphases.put(DIV, "a division operator '\'");
    	lexerTokenParaphases.put(DIV_ASSIGN, "a division assign '/='");
    	lexerTokenParaphases.put(PLUS, "a plus operator '+'");
    	lexerTokenParaphases.put(PLUS_ASSIGN, "a plus assign '+='");
    	lexerTokenParaphases.put(INC, "an increment operator '++'");
    	lexerTokenParaphases.put(MINUS, "a minus '-'");
    	lexerTokenParaphases.put(MINUS_ASSIGN, "a minus assign '-='");
    	lexerTokenParaphases.put(DEC, "a decrement operator '--'");
    	lexerTokenParaphases.put(STAR, "a star '*'");
    	lexerTokenParaphases.put(STAR_ASSIGN, "a star assign '*='");
    	lexerTokenParaphases.put(MOD, "a modulo");
    	lexerTokenParaphases.put(MOD_ASSIGN, "a modulo assign");
    	lexerTokenParaphases.put(SR, "a shift right '>>'");
    	lexerTokenParaphases.put(SR_ASSIGN, "a shift right assign '>>='");
    	lexerTokenParaphases.put(BSR, "a binary shift right '>>>'");
    	lexerTokenParaphases.put(BSR_ASSIGN, "a binary shift right assign '>>>='");
    	lexerTokenParaphases.put(GE, "a greater equals '>='");
    	lexerTokenParaphases.put(GT, "a greater then '>'");
    	lexerTokenParaphases.put(SL, "a shift left '<<'");
    	lexerTokenParaphases.put(SL_ASSIGN, "a shift left assign '<<='");
    	lexerTokenParaphases.put(LE, "a less equals '<='");
    	lexerTokenParaphases.put(LT, "a lesser then '<'");
    	lexerTokenParaphases.put(BXOR, "a binary xor '^'");
    	lexerTokenParaphases.put(BXOR_ASSIGN, "a binary xor assign '^='");
    	lexerTokenParaphases.put(BOR, "a binary or '|'");
    	lexerTokenParaphases.put(BOR_ASSIGN, "a binary or assign '|='");
    	lexerTokenParaphases.put(LOR, "a logical or '||'");
    	lexerTokenParaphases.put(BAND, "a binary and '&'");
    	lexerTokenParaphases.put(BAND_ASSIGN, "a binary and assign '&='");
    	lexerTokenParaphases.put(LAND, "a logical and '&&'");
    	lexerTokenParaphases.put(SEMI, "a semicolon ';'");
    	lexerTokenParaphases.put(DOT, "a dot '.'");		
        }
        return lexerTokenParaphases;
      }
      
      public Map<Integer, String> getParserTokenParaphrases() {
        if (parserTokenParaphases.size() == 0) {
    	parserTokenParaphases.put(CREATE, "'create'");
    	parserTokenParaphases.put(WINDOW, "'window'");
    	parserTokenParaphases.put(IN_SET, "'in'");
    	parserTokenParaphases.put(BETWEEN, "'between'");
    	parserTokenParaphases.put(LIKE, "'like'");
    	parserTokenParaphases.put(REGEXP, "'regexp'");
    	parserTokenParaphases.put(ESCAPE, "'escape'");
    	parserTokenParaphases.put(OR_EXPR, "'or'");
    	parserTokenParaphases.put(AND_EXPR, "'and'");
    	parserTokenParaphases.put(NOT_EXPR, "'not'");
    	parserTokenParaphases.put(EVERY_EXPR, "'every'");
    	parserTokenParaphases.put(WHERE, "'where'");
    	parserTokenParaphases.put(AS, "'as'");	
    	parserTokenParaphases.put(SUM, "'sum'");
    	parserTokenParaphases.put(AVG, "'avg'");
    	parserTokenParaphases.put(MAX, "'max'");
    	parserTokenParaphases.put(MIN, "'min'");
    	parserTokenParaphases.put(COALESCE, "'coalesce'");
    	parserTokenParaphases.put(MEDIAN, "'median'");
    	parserTokenParaphases.put(STDDEV, "'stddev'");
    	parserTokenParaphases.put(AVEDEV, "'avedev'");
    	parserTokenParaphases.put(COUNT, "'count'");
    	parserTokenParaphases.put(SELECT, "'select'");
    	parserTokenParaphases.put(CASE, "'case'");
    	parserTokenParaphases.put(CASE2, "'case'");
    	parserTokenParaphases.put(ELSE, "'else'");
    	parserTokenParaphases.put(WHEN, "'when'");
    	parserTokenParaphases.put(THEN, "'then'");
    	parserTokenParaphases.put(END, "'end'");
    	parserTokenParaphases.put(FROM, "'from'");
    	parserTokenParaphases.put(OUTER, "'outer'");
    	parserTokenParaphases.put(INNER, "'inner'");
    	parserTokenParaphases.put(JOIN, "'join'");
    	parserTokenParaphases.put(LEFT, "'left'");
    	parserTokenParaphases.put(RIGHT, "'right'");
    	parserTokenParaphases.put(FULL, "'full'");
    	parserTokenParaphases.put(ON, "'on'");	
    	parserTokenParaphases.put(IS, "'is'");
    	parserTokenParaphases.put(BY, "'by'");
    	parserTokenParaphases.put(GROUP, "'group'");
    	parserTokenParaphases.put(HAVING, "'having'");
    	parserTokenParaphases.put(DISTINCT, "'distinct'");
    	parserTokenParaphases.put(ALL, "'all'");
    	parserTokenParaphases.put(ANY, "'any'");
    	parserTokenParaphases.put(SOME, "'some'");
    	parserTokenParaphases.put(OUTPUT, "'output'");
    	parserTokenParaphases.put(EVENTS, "'events'");
    	parserTokenParaphases.put(FIRST, "'first'");
    	parserTokenParaphases.put(LAST, "'last'");
    	parserTokenParaphases.put(INSERT, "'insert'");
    	parserTokenParaphases.put(INTO, "'into'");
    	parserTokenParaphases.put(ORDER, "'order'");
    	parserTokenParaphases.put(ASC, "'asc'");
    	parserTokenParaphases.put(DESC, "'desc'");
    	parserTokenParaphases.put(RSTREAM, "'rstream'");
    	parserTokenParaphases.put(ISTREAM, "'istream'");
    	parserTokenParaphases.put(IRSTREAM, "'irstream'");
    	parserTokenParaphases.put(UNIDIRECTIONAL, "'unidirectional'");
    	parserTokenParaphases.put(RETAINUNION, "'retain-union'");
    	parserTokenParaphases.put(RETAININTERSECTION, "'retain-intersection'");
    	parserTokenParaphases.put(PATTERN, "'pattern'");
    	parserTokenParaphases.put(SQL, "'sql'");
    	parserTokenParaphases.put(METADATASQL, "'metadatasql'");
    	parserTokenParaphases.put(PREVIOUS, "'prev'");
    	parserTokenParaphases.put(PRIOR, "'prior'");
    	parserTokenParaphases.put(EXISTS, "'exists'");
    	parserTokenParaphases.put(WEEKDAY, "'weekday'");
    	parserTokenParaphases.put(LW, "'lastweekday'");
    	parserTokenParaphases.put(INSTANCEOF, "'instanceof'");
    	parserTokenParaphases.put(CAST, "'cast'");
    	parserTokenParaphases.put(CURRENT_TIMESTAMP, "'current_timestamp'");
    	parserTokenParaphases.put(DELETE, "'delete'");
    	parserTokenParaphases.put(SNAPSHOT, "'snapshot'");
    	parserTokenParaphases.put(SET, "'set'");
    	parserTokenParaphases.put(VARIABLE, "'variable'");
    	parserTokenParaphases.put(UNTIL, "'until'");
    	parserTokenParaphases.put(AT, "'at'");
    	parserTokenParaphases.put(TIMEPERIOD_DAY, "'day'");
    	parserTokenParaphases.put(TIMEPERIOD_DAYS, "'days'");
    	parserTokenParaphases.put(TIMEPERIOD_HOUR, "'hour'");
    	parserTokenParaphases.put(TIMEPERIOD_HOURS, "'hours'");
    	parserTokenParaphases.put(TIMEPERIOD_MINUTE, "'minute'");
    	parserTokenParaphases.put(TIMEPERIOD_MINUTES, "'minutes'");
    	parserTokenParaphases.put(TIMEPERIOD_SEC, "'sec'");
    	parserTokenParaphases.put(TIMEPERIOD_SECOND, "'second'");
    	parserTokenParaphases.put(TIMEPERIOD_SECONDS, "'seconds'");
    	parserTokenParaphases.put(TIMEPERIOD_MILLISEC, "'msec'");
    	parserTokenParaphases.put(TIMEPERIOD_MILLISECOND, "'millisecond'");
    	parserTokenParaphases.put(TIMEPERIOD_MILLISECONDS, "'milliseconds'");
    	parserTokenParaphases.put(BOOLEAN_TRUE, "'true'");
    	parserTokenParaphases.put(BOOLEAN_FALSE, "'false'");
    	parserTokenParaphases.put(VALUE_NULL, "'null'");
    	parserTokenParaphases.put(ROW_LIMIT_EXPR, "'limit'");
    	parserTokenParaphases.put(OFFSET, "'offset'");

    	parserKeywordSet = new java.util.TreeSet<String>(parserTokenParaphases.values());
        }
        return parserTokenParaphases;
      }

      protected void mismatch(IntStream input, int ttype, BitSet follow) throws RecognitionException {
        throw new MismatchedTokenException(ttype, input);  
      }

      public void recoverFromMismatchedToken(IntStream intStream, RecognitionException recognitionException, int i, BitSet bitSet) throws RecognitionException {
        throw recognitionException;
      }

      public Object recoverFromMismatchedSet(IntStream intStream, RecognitionException recognitionException, BitSet bitSet) throws RecognitionException {
        throw recognitionException;
      }

      protected boolean recoverFromMismatchedElement(IntStream intStream, RecognitionException recognitionException, BitSet bitSet) {
        throw new RuntimeException("Error recovering from mismatched element: " + recognitionException.getMessage(), recognitionException);
      }
      public void displayRecognitionError(String[] tokenNames,
                                            RecognitionException e) {
        throw new RuntimeException(e);
      }


    public static class startPatternExpressionRule_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "startPatternExpressionRule"
    // EsperEPL2Grammar.g:474:1: startPatternExpressionRule : ( annotationNoEnum )* patternExpression EOF ;
    public final EsperEPL2GrammarParser.startPatternExpressionRule_return startPatternExpressionRule() throws RecognitionException {
        EsperEPL2GrammarParser.startPatternExpressionRule_return retval = new EsperEPL2GrammarParser.startPatternExpressionRule_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token EOF3=null;
        EsperEPL2GrammarParser.annotationNoEnum_return annotationNoEnum1 = null;

        EsperEPL2GrammarParser.patternExpression_return patternExpression2 = null;


        CommonTree EOF3_tree=null;

        try {
            // EsperEPL2Grammar.g:475:2: ( ( annotationNoEnum )* patternExpression EOF )
            // EsperEPL2Grammar.g:475:4: ( annotationNoEnum )* patternExpression EOF
            {
            root_0 = (CommonTree)adaptor.nil();

            // EsperEPL2Grammar.g:475:4: ( annotationNoEnum )*
            loop1:
            do {
                int alt1=2;
                int LA1_0 = input.LA(1);

                if ( (LA1_0==EMAILAT) ) {
                    alt1=1;
                }


                switch (alt1) {
            	case 1 :
            	    // EsperEPL2Grammar.g:475:4: annotationNoEnum
            	    {
            	    pushFollow(FOLLOW_annotationNoEnum_in_startPatternExpressionRule1369);
            	    annotationNoEnum1=annotationNoEnum();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationNoEnum1.getTree());

            	    }
            	    break;

            	default :
            	    break loop1;
                }
            } while (true);

            pushFollow(FOLLOW_patternExpression_in_startPatternExpressionRule1374);
            patternExpression2=patternExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, patternExpression2.getTree());
            EOF3=(Token)match(input,EOF,FOLLOW_EOF_in_startPatternExpressionRule1378); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "startPatternExpressionRule"

    public static class startEPLExpressionRule_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "startEPLExpressionRule"
    // EsperEPL2Grammar.g:480:1: startEPLExpressionRule : ( annotationEnum )* eplExpression EOF -> ^( EPL_EXPR ( annotationEnum )* eplExpression ) ;
    public final EsperEPL2GrammarParser.startEPLExpressionRule_return startEPLExpressionRule() throws RecognitionException {
        EsperEPL2GrammarParser.startEPLExpressionRule_return retval = new EsperEPL2GrammarParser.startEPLExpressionRule_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token EOF6=null;
        EsperEPL2GrammarParser.annotationEnum_return annotationEnum4 = null;

        EsperEPL2GrammarParser.eplExpression_return eplExpression5 = null;


        CommonTree EOF6_tree=null;
        RewriteRuleTokenStream stream_EOF=new RewriteRuleTokenStream(adaptor,"token EOF");
        RewriteRuleSubtreeStream stream_annotationEnum=new RewriteRuleSubtreeStream(adaptor,"rule annotationEnum");
        RewriteRuleSubtreeStream stream_eplExpression=new RewriteRuleSubtreeStream(adaptor,"rule eplExpression");
        try {
            // EsperEPL2Grammar.g:481:2: ( ( annotationEnum )* eplExpression EOF -> ^( EPL_EXPR ( annotationEnum )* eplExpression ) )
            // EsperEPL2Grammar.g:481:4: ( annotationEnum )* eplExpression EOF
            {
            // EsperEPL2Grammar.g:481:4: ( annotationEnum )*
            loop2:
            do {
                int alt2=2;
                int LA2_0 = input.LA(1);

                if ( (LA2_0==EMAILAT) ) {
                    alt2=1;
                }


                switch (alt2) {
            	case 1 :
            	    // EsperEPL2Grammar.g:481:4: annotationEnum
            	    {
            	    pushFollow(FOLLOW_annotationEnum_in_startEPLExpressionRule1392);
            	    annotationEnum4=annotationEnum();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_annotationEnum.add(annotationEnum4.getTree());

            	    }
            	    break;

            	default :
            	    break loop2;
                }
            } while (true);

            pushFollow(FOLLOW_eplExpression_in_startEPLExpressionRule1398);
            eplExpression5=eplExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eplExpression.add(eplExpression5.getTree());
            EOF6=(Token)match(input,EOF,FOLLOW_EOF_in_startEPLExpressionRule1402); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EOF.add(EOF6);



            // AST REWRITE
            // elements: annotationEnum, eplExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 484:3: -> ^( EPL_EXPR ( annotationEnum )* eplExpression )
            {
                // EsperEPL2Grammar.g:484:6: ^( EPL_EXPR ( annotationEnum )* eplExpression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EPL_EXPR, "EPL_EXPR"), root_1);

                // EsperEPL2Grammar.g:484:17: ( annotationEnum )*
                while ( stream_annotationEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_annotationEnum.nextTree());

                }
                stream_annotationEnum.reset();
                adaptor.addChild(root_1, stream_eplExpression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "startEPLExpressionRule"

    public static class startEventPropertyRule_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "startEventPropertyRule"
    // EsperEPL2Grammar.g:487:1: startEventPropertyRule : eventProperty EOF ;
    public final EsperEPL2GrammarParser.startEventPropertyRule_return startEventPropertyRule() throws RecognitionException {
        EsperEPL2GrammarParser.startEventPropertyRule_return retval = new EsperEPL2GrammarParser.startEventPropertyRule_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token EOF8=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty7 = null;


        CommonTree EOF8_tree=null;

        try {
            // EsperEPL2Grammar.g:488:2: ( eventProperty EOF )
            // EsperEPL2Grammar.g:488:4: eventProperty EOF
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_eventProperty_in_startEventPropertyRule1428);
            eventProperty7=eventProperty();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty7.getTree());
            EOF8=(Token)match(input,EOF,FOLLOW_EOF_in_startEventPropertyRule1432); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "startEventPropertyRule"

    public static class annotationNoEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationNoEnum"
    // EsperEPL2Grammar.g:495:1: annotationNoEnum : '@' classIdentifier ( '(' ( elementValuePairsNoEnum | elementValueNoEnum )? ')' )? -> ^( ANNOTATION classIdentifier ( elementValuePairsNoEnum )? ( elementValueNoEnum )? ) ;
    public final EsperEPL2GrammarParser.annotationNoEnum_return annotationNoEnum() throws RecognitionException {
        EsperEPL2GrammarParser.annotationNoEnum_return retval = new EsperEPL2GrammarParser.annotationNoEnum_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token char_literal9=null;
        Token char_literal11=null;
        Token char_literal14=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier10 = null;

        EsperEPL2GrammarParser.elementValuePairsNoEnum_return elementValuePairsNoEnum12 = null;

        EsperEPL2GrammarParser.elementValueNoEnum_return elementValueNoEnum13 = null;


        CommonTree char_literal9_tree=null;
        CommonTree char_literal11_tree=null;
        CommonTree char_literal14_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_EMAILAT=new RewriteRuleTokenStream(adaptor,"token EMAILAT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_elementValuePairsNoEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValuePairsNoEnum");
        RewriteRuleSubtreeStream stream_elementValueNoEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueNoEnum");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            // EsperEPL2Grammar.g:496:5: ( '@' classIdentifier ( '(' ( elementValuePairsNoEnum | elementValueNoEnum )? ')' )? -> ^( ANNOTATION classIdentifier ( elementValuePairsNoEnum )? ( elementValueNoEnum )? ) )
            // EsperEPL2Grammar.g:496:9: '@' classIdentifier ( '(' ( elementValuePairsNoEnum | elementValueNoEnum )? ')' )?
            {
            char_literal9=(Token)match(input,EMAILAT,FOLLOW_EMAILAT_in_annotationNoEnum1452); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EMAILAT.add(char_literal9);

            pushFollow(FOLLOW_classIdentifier_in_annotationNoEnum1454);
            classIdentifier10=classIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier10.getTree());
            // EsperEPL2Grammar.g:496:29: ( '(' ( elementValuePairsNoEnum | elementValueNoEnum )? ')' )?
            int alt4=2;
            int LA4_0 = input.LA(1);

            if ( (LA4_0==LPAREN) ) {
                int LA4_1 = input.LA(2);

                if ( (LA4_1==IDENT) ) {
                    int LA4_11 = input.LA(3);

                    if ( (LA4_11==EQUALS) ) {
                        int LA4_29 = input.LA(4);

                        if ( ((LA4_29>=BOOLEAN_TRUE && LA4_29<=VALUE_NULL)||LA4_29==NUM_DOUBLE||(LA4_29>=STRING_LITERAL && LA4_29<=QUOTED_STRING_LITERAL)||(LA4_29>=PLUS && LA4_29<=MINUS)||LA4_29==LCURLY||LA4_29==NUM_INT||(LA4_29>=NUM_LONG && LA4_29<=NUM_FLOAT)||LA4_29==EMAILAT) ) {
                            alt4=1;
                        }
                    }
                }
                else if ( ((LA4_1>=BOOLEAN_TRUE && LA4_1<=VALUE_NULL)||LA4_1==NUM_DOUBLE||LA4_1==RPAREN||(LA4_1>=STRING_LITERAL && LA4_1<=QUOTED_STRING_LITERAL)||(LA4_1>=PLUS && LA4_1<=MINUS)||LA4_1==LCURLY||LA4_1==NUM_INT||(LA4_1>=NUM_LONG && LA4_1<=NUM_FLOAT)||LA4_1==EMAILAT) ) {
                    alt4=1;
                }
            }
            switch (alt4) {
                case 1 :
                    // EsperEPL2Grammar.g:496:31: '(' ( elementValuePairsNoEnum | elementValueNoEnum )? ')'
                    {
                    char_literal11=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_annotationNoEnum1458); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(char_literal11);

                    // EsperEPL2Grammar.g:496:35: ( elementValuePairsNoEnum | elementValueNoEnum )?
                    int alt3=3;
                    int LA3_0 = input.LA(1);

                    if ( (LA3_0==IDENT) ) {
                        alt3=1;
                    }
                    else if ( ((LA3_0>=BOOLEAN_TRUE && LA3_0<=VALUE_NULL)||LA3_0==NUM_DOUBLE||(LA3_0>=STRING_LITERAL && LA3_0<=QUOTED_STRING_LITERAL)||(LA3_0>=PLUS && LA3_0<=MINUS)||LA3_0==LCURLY||LA3_0==NUM_INT||(LA3_0>=NUM_LONG && LA3_0<=NUM_FLOAT)||LA3_0==EMAILAT) ) {
                        alt3=2;
                    }
                    switch (alt3) {
                        case 1 :
                            // EsperEPL2Grammar.g:496:37: elementValuePairsNoEnum
                            {
                            pushFollow(FOLLOW_elementValuePairsNoEnum_in_annotationNoEnum1462);
                            elementValuePairsNoEnum12=elementValuePairsNoEnum();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elementValuePairsNoEnum.add(elementValuePairsNoEnum12.getTree());

                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:496:63: elementValueNoEnum
                            {
                            pushFollow(FOLLOW_elementValueNoEnum_in_annotationNoEnum1466);
                            elementValueNoEnum13=elementValueNoEnum();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elementValueNoEnum.add(elementValueNoEnum13.getTree());

                            }
                            break;

                    }

                    char_literal14=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_annotationNoEnum1471); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(char_literal14);


                    }
                    break;

            }



            // AST REWRITE
            // elements: elementValueNoEnum, elementValuePairsNoEnum, classIdentifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 497:2: -> ^( ANNOTATION classIdentifier ( elementValuePairsNoEnum )? ( elementValueNoEnum )? )
            {
                // EsperEPL2Grammar.g:497:5: ^( ANNOTATION classIdentifier ( elementValuePairsNoEnum )? ( elementValueNoEnum )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION, "ANNOTATION"), root_1);

                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                // EsperEPL2Grammar.g:497:34: ( elementValuePairsNoEnum )?
                if ( stream_elementValuePairsNoEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValuePairsNoEnum.nextTree());

                }
                stream_elementValuePairsNoEnum.reset();
                // EsperEPL2Grammar.g:497:59: ( elementValueNoEnum )?
                if ( stream_elementValueNoEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValueNoEnum.nextTree());

                }
                stream_elementValueNoEnum.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "annotationNoEnum"

    public static class annotationEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationEnum"
    // EsperEPL2Grammar.g:500:1: annotationEnum : '@' classIdentifier ( '(' ( elementValuePairsEnum | elementValueEnum )? ')' )? -> ^( ANNOTATION classIdentifier ( elementValuePairsEnum )? ( elementValueEnum )? ) ;
    public final EsperEPL2GrammarParser.annotationEnum_return annotationEnum() throws RecognitionException {
        EsperEPL2GrammarParser.annotationEnum_return retval = new EsperEPL2GrammarParser.annotationEnum_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token char_literal15=null;
        Token char_literal17=null;
        Token char_literal20=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier16 = null;

        EsperEPL2GrammarParser.elementValuePairsEnum_return elementValuePairsEnum18 = null;

        EsperEPL2GrammarParser.elementValueEnum_return elementValueEnum19 = null;


        CommonTree char_literal15_tree=null;
        CommonTree char_literal17_tree=null;
        CommonTree char_literal20_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_EMAILAT=new RewriteRuleTokenStream(adaptor,"token EMAILAT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_elementValuePairsEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValuePairsEnum");
        RewriteRuleSubtreeStream stream_elementValueEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueEnum");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            // EsperEPL2Grammar.g:501:5: ( '@' classIdentifier ( '(' ( elementValuePairsEnum | elementValueEnum )? ')' )? -> ^( ANNOTATION classIdentifier ( elementValuePairsEnum )? ( elementValueEnum )? ) )
            // EsperEPL2Grammar.g:501:9: '@' classIdentifier ( '(' ( elementValuePairsEnum | elementValueEnum )? ')' )?
            {
            char_literal15=(Token)match(input,EMAILAT,FOLLOW_EMAILAT_in_annotationEnum1512); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EMAILAT.add(char_literal15);

            pushFollow(FOLLOW_classIdentifier_in_annotationEnum1514);
            classIdentifier16=classIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier16.getTree());
            // EsperEPL2Grammar.g:501:29: ( '(' ( elementValuePairsEnum | elementValueEnum )? ')' )?
            int alt6=2;
            int LA6_0 = input.LA(1);

            if ( (LA6_0==LPAREN) ) {
                alt6=1;
            }
            switch (alt6) {
                case 1 :
                    // EsperEPL2Grammar.g:501:31: '(' ( elementValuePairsEnum | elementValueEnum )? ')'
                    {
                    char_literal17=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_annotationEnum1518); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(char_literal17);

                    // EsperEPL2Grammar.g:501:35: ( elementValuePairsEnum | elementValueEnum )?
                    int alt5=3;
                    int LA5_0 = input.LA(1);

                    if ( (LA5_0==IDENT) ) {
                        int LA5_1 = input.LA(2);

                        if ( (LA5_1==EQUALS) ) {
                            alt5=1;
                        }
                        else if ( (LA5_1==DOT||LA5_1==RPAREN) ) {
                            alt5=2;
                        }
                    }
                    else if ( ((LA5_0>=BOOLEAN_TRUE && LA5_0<=VALUE_NULL)||LA5_0==NUM_DOUBLE||(LA5_0>=STRING_LITERAL && LA5_0<=QUOTED_STRING_LITERAL)||(LA5_0>=PLUS && LA5_0<=MINUS)||LA5_0==LCURLY||LA5_0==NUM_INT||(LA5_0>=TICKED_STRING_LITERAL && LA5_0<=NUM_FLOAT)||LA5_0==EMAILAT) ) {
                        alt5=2;
                    }
                    switch (alt5) {
                        case 1 :
                            // EsperEPL2Grammar.g:501:37: elementValuePairsEnum
                            {
                            pushFollow(FOLLOW_elementValuePairsEnum_in_annotationEnum1522);
                            elementValuePairsEnum18=elementValuePairsEnum();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elementValuePairsEnum.add(elementValuePairsEnum18.getTree());

                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:501:61: elementValueEnum
                            {
                            pushFollow(FOLLOW_elementValueEnum_in_annotationEnum1526);
                            elementValueEnum19=elementValueEnum();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elementValueEnum.add(elementValueEnum19.getTree());

                            }
                            break;

                    }

                    char_literal20=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_annotationEnum1531); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(char_literal20);


                    }
                    break;

            }



            // AST REWRITE
            // elements: elementValuePairsEnum, elementValueEnum, classIdentifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 502:2: -> ^( ANNOTATION classIdentifier ( elementValuePairsEnum )? ( elementValueEnum )? )
            {
                // EsperEPL2Grammar.g:502:5: ^( ANNOTATION classIdentifier ( elementValuePairsEnum )? ( elementValueEnum )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION, "ANNOTATION"), root_1);

                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                // EsperEPL2Grammar.g:502:34: ( elementValuePairsEnum )?
                if ( stream_elementValuePairsEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValuePairsEnum.nextTree());

                }
                stream_elementValuePairsEnum.reset();
                // EsperEPL2Grammar.g:502:57: ( elementValueEnum )?
                if ( stream_elementValueEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValueEnum.nextTree());

                }
                stream_elementValueEnum.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "annotationEnum"

    public static class elementValuePairsEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValuePairsEnum"
    // EsperEPL2Grammar.g:505:1: elementValuePairsEnum : elementValuePairEnum ( COMMA elementValuePairEnum )* ;
    public final EsperEPL2GrammarParser.elementValuePairsEnum_return elementValuePairsEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValuePairsEnum_return retval = new EsperEPL2GrammarParser.elementValuePairsEnum_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA22=null;
        EsperEPL2GrammarParser.elementValuePairEnum_return elementValuePairEnum21 = null;

        EsperEPL2GrammarParser.elementValuePairEnum_return elementValuePairEnum23 = null;


        CommonTree COMMA22_tree=null;

        try {
            // EsperEPL2Grammar.g:506:5: ( elementValuePairEnum ( COMMA elementValuePairEnum )* )
            // EsperEPL2Grammar.g:506:9: elementValuePairEnum ( COMMA elementValuePairEnum )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_elementValuePairEnum_in_elementValuePairsEnum1572);
            elementValuePairEnum21=elementValuePairEnum();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValuePairEnum21.getTree());
            // EsperEPL2Grammar.g:506:30: ( COMMA elementValuePairEnum )*
            loop7:
            do {
                int alt7=2;
                int LA7_0 = input.LA(1);

                if ( (LA7_0==COMMA) ) {
                    alt7=1;
                }


                switch (alt7) {
            	case 1 :
            	    // EsperEPL2Grammar.g:506:31: COMMA elementValuePairEnum
            	    {
            	    COMMA22=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValuePairsEnum1575); if (state.failed) return retval;
            	    pushFollow(FOLLOW_elementValuePairEnum_in_elementValuePairsEnum1578);
            	    elementValuePairEnum23=elementValuePairEnum();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValuePairEnum23.getTree());

            	    }
            	    break;

            	default :
            	    break loop7;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "elementValuePairsEnum"

    public static class elementValuePairsNoEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValuePairsNoEnum"
    // EsperEPL2Grammar.g:509:1: elementValuePairsNoEnum : i= IDENT '=' elementValueNoEnum -> ^( ANNOTATION_VALUE $i elementValueNoEnum ) ;
    public final EsperEPL2GrammarParser.elementValuePairsNoEnum_return elementValuePairsNoEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValuePairsNoEnum_return retval = new EsperEPL2GrammarParser.elementValuePairsNoEnum_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token char_literal24=null;
        EsperEPL2GrammarParser.elementValueNoEnum_return elementValueNoEnum25 = null;


        CommonTree i_tree=null;
        CommonTree char_literal24_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleSubtreeStream stream_elementValueNoEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueNoEnum");
        try {
            // EsperEPL2Grammar.g:510:5: (i= IDENT '=' elementValueNoEnum -> ^( ANNOTATION_VALUE $i elementValueNoEnum ) )
            // EsperEPL2Grammar.g:510:9: i= IDENT '=' elementValueNoEnum
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_elementValuePairsNoEnum1601); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);

            char_literal24=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_elementValuePairsNoEnum1603); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EQUALS.add(char_literal24);

            pushFollow(FOLLOW_elementValueNoEnum_in_elementValuePairsNoEnum1605);
            elementValueNoEnum25=elementValueNoEnum();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_elementValueNoEnum.add(elementValueNoEnum25.getTree());


            // AST REWRITE
            // elements: elementValueNoEnum, i
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 511:2: -> ^( ANNOTATION_VALUE $i elementValueNoEnum )
            {
                // EsperEPL2Grammar.g:511:5: ^( ANNOTATION_VALUE $i elementValueNoEnum )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION_VALUE, "ANNOTATION_VALUE"), root_1);

                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_elementValueNoEnum.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "elementValuePairsNoEnum"

    public static class elementValuePairEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValuePairEnum"
    // EsperEPL2Grammar.g:514:1: elementValuePairEnum : i= IDENT '=' elementValueEnum -> ^( ANNOTATION_VALUE $i elementValueEnum ) ;
    public final EsperEPL2GrammarParser.elementValuePairEnum_return elementValuePairEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValuePairEnum_return retval = new EsperEPL2GrammarParser.elementValuePairEnum_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token char_literal26=null;
        EsperEPL2GrammarParser.elementValueEnum_return elementValueEnum27 = null;


        CommonTree i_tree=null;
        CommonTree char_literal26_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleSubtreeStream stream_elementValueEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueEnum");
        try {
            // EsperEPL2Grammar.g:515:5: (i= IDENT '=' elementValueEnum -> ^( ANNOTATION_VALUE $i elementValueEnum ) )
            // EsperEPL2Grammar.g:515:9: i= IDENT '=' elementValueEnum
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_elementValuePairEnum1642); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);

            char_literal26=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_elementValuePairEnum1644); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EQUALS.add(char_literal26);

            pushFollow(FOLLOW_elementValueEnum_in_elementValuePairEnum1646);
            elementValueEnum27=elementValueEnum();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_elementValueEnum.add(elementValueEnum27.getTree());


            // AST REWRITE
            // elements: elementValueEnum, i
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 516:2: -> ^( ANNOTATION_VALUE $i elementValueEnum )
            {
                // EsperEPL2Grammar.g:516:5: ^( ANNOTATION_VALUE $i elementValueEnum )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION_VALUE, "ANNOTATION_VALUE"), root_1);

                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_elementValueEnum.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "elementValuePairEnum"

    public static class elementValueNoEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValueNoEnum"
    // EsperEPL2Grammar.g:519:1: elementValueNoEnum : ( annotationEnum | ( elementValueArrayNoEnum ) -> elementValueArrayNoEnum | constant );
    public final EsperEPL2GrammarParser.elementValueNoEnum_return elementValueNoEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValueNoEnum_return retval = new EsperEPL2GrammarParser.elementValueNoEnum_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.annotationEnum_return annotationEnum28 = null;

        EsperEPL2GrammarParser.elementValueArrayNoEnum_return elementValueArrayNoEnum29 = null;

        EsperEPL2GrammarParser.constant_return constant30 = null;


        RewriteRuleSubtreeStream stream_elementValueArrayNoEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueArrayNoEnum");
        try {
            // EsperEPL2Grammar.g:520:5: ( annotationEnum | ( elementValueArrayNoEnum ) -> elementValueArrayNoEnum | constant )
            int alt8=3;
            switch ( input.LA(1) ) {
            case EMAILAT:
                {
                alt8=1;
                }
                break;
            case LCURLY:
                {
                alt8=2;
                }
                break;
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case NUM_DOUBLE:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case PLUS:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt8=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 8, 0, input);

                throw nvae;
            }

            switch (alt8) {
                case 1 :
                    // EsperEPL2Grammar.g:520:9: annotationEnum
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_annotationEnum_in_elementValueNoEnum1677);
                    annotationEnum28=annotationEnum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationEnum28.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:521:9: ( elementValueArrayNoEnum )
                    {
                    // EsperEPL2Grammar.g:521:9: ( elementValueArrayNoEnum )
                    // EsperEPL2Grammar.g:521:10: elementValueArrayNoEnum
                    {
                    pushFollow(FOLLOW_elementValueArrayNoEnum_in_elementValueNoEnum1688);
                    elementValueArrayNoEnum29=elementValueArrayNoEnum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_elementValueArrayNoEnum.add(elementValueArrayNoEnum29.getTree());

                    }



                    // AST REWRITE
                    // elements: elementValueArrayNoEnum
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 521:35: -> elementValueArrayNoEnum
                    {
                        adaptor.addChild(root_0, stream_elementValueArrayNoEnum.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:522:7: constant
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_constant_in_elementValueNoEnum1701);
                    constant30=constant();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constant30.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "elementValueNoEnum"

    public static class elementValueEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValueEnum"
    // EsperEPL2Grammar.g:525:1: elementValueEnum : ( annotationEnum | ( elementValueArrayEnum ) -> elementValueArrayEnum | constant | classIdentifier );
    public final EsperEPL2GrammarParser.elementValueEnum_return elementValueEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValueEnum_return retval = new EsperEPL2GrammarParser.elementValueEnum_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.annotationEnum_return annotationEnum31 = null;

        EsperEPL2GrammarParser.elementValueArrayEnum_return elementValueArrayEnum32 = null;

        EsperEPL2GrammarParser.constant_return constant33 = null;

        EsperEPL2GrammarParser.classIdentifier_return classIdentifier34 = null;


        RewriteRuleSubtreeStream stream_elementValueArrayEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueArrayEnum");
        try {
            // EsperEPL2Grammar.g:526:5: ( annotationEnum | ( elementValueArrayEnum ) -> elementValueArrayEnum | constant | classIdentifier )
            int alt9=4;
            switch ( input.LA(1) ) {
            case EMAILAT:
                {
                alt9=1;
                }
                break;
            case LCURLY:
                {
                alt9=2;
                }
                break;
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case NUM_DOUBLE:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case PLUS:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt9=3;
                }
                break;
            case IDENT:
            case TICKED_STRING_LITERAL:
                {
                alt9=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 9, 0, input);

                throw nvae;
            }

            switch (alt9) {
                case 1 :
                    // EsperEPL2Grammar.g:526:9: annotationEnum
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_annotationEnum_in_elementValueEnum1724);
                    annotationEnum31=annotationEnum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationEnum31.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:527:9: ( elementValueArrayEnum )
                    {
                    // EsperEPL2Grammar.g:527:9: ( elementValueArrayEnum )
                    // EsperEPL2Grammar.g:527:10: elementValueArrayEnum
                    {
                    pushFollow(FOLLOW_elementValueArrayEnum_in_elementValueEnum1735);
                    elementValueArrayEnum32=elementValueArrayEnum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_elementValueArrayEnum.add(elementValueArrayEnum32.getTree());

                    }



                    // AST REWRITE
                    // elements: elementValueArrayEnum
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 527:33: -> elementValueArrayEnum
                    {
                        adaptor.addChild(root_0, stream_elementValueArrayEnum.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:528:7: constant
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_constant_in_elementValueEnum1748);
                    constant33=constant();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constant33.getTree());

                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:529:7: classIdentifier
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_classIdentifier_in_elementValueEnum1756);
                    classIdentifier34=classIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier34.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "elementValueEnum"

    public static class elementValueArrayNoEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValueArrayNoEnum"
    // EsperEPL2Grammar.g:532:1: elementValueArrayNoEnum : '{' ( elementValueNoEnum ( ',' elementValueNoEnum )* )? ( ',' )? '}' -> ^( ANNOTATION_ARRAY ( elementValueNoEnum )* ) ;
    public final EsperEPL2GrammarParser.elementValueArrayNoEnum_return elementValueArrayNoEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValueArrayNoEnum_return retval = new EsperEPL2GrammarParser.elementValueArrayNoEnum_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token char_literal35=null;
        Token char_literal37=null;
        Token char_literal39=null;
        Token char_literal40=null;
        EsperEPL2GrammarParser.elementValueNoEnum_return elementValueNoEnum36 = null;

        EsperEPL2GrammarParser.elementValueNoEnum_return elementValueNoEnum38 = null;


        CommonTree char_literal35_tree=null;
        CommonTree char_literal37_tree=null;
        CommonTree char_literal39_tree=null;
        CommonTree char_literal40_tree=null;
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_elementValueNoEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueNoEnum");
        try {
            // EsperEPL2Grammar.g:533:5: ( '{' ( elementValueNoEnum ( ',' elementValueNoEnum )* )? ( ',' )? '}' -> ^( ANNOTATION_ARRAY ( elementValueNoEnum )* ) )
            // EsperEPL2Grammar.g:533:9: '{' ( elementValueNoEnum ( ',' elementValueNoEnum )* )? ( ',' )? '}'
            {
            char_literal35=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_elementValueArrayNoEnum1776); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCURLY.add(char_literal35);

            // EsperEPL2Grammar.g:533:13: ( elementValueNoEnum ( ',' elementValueNoEnum )* )?
            int alt11=2;
            int LA11_0 = input.LA(1);

            if ( ((LA11_0>=BOOLEAN_TRUE && LA11_0<=VALUE_NULL)||LA11_0==NUM_DOUBLE||(LA11_0>=STRING_LITERAL && LA11_0<=QUOTED_STRING_LITERAL)||(LA11_0>=PLUS && LA11_0<=MINUS)||LA11_0==LCURLY||LA11_0==NUM_INT||(LA11_0>=NUM_LONG && LA11_0<=NUM_FLOAT)||LA11_0==EMAILAT) ) {
                alt11=1;
            }
            switch (alt11) {
                case 1 :
                    // EsperEPL2Grammar.g:533:14: elementValueNoEnum ( ',' elementValueNoEnum )*
                    {
                    pushFollow(FOLLOW_elementValueNoEnum_in_elementValueArrayNoEnum1779);
                    elementValueNoEnum36=elementValueNoEnum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_elementValueNoEnum.add(elementValueNoEnum36.getTree());
                    // EsperEPL2Grammar.g:533:33: ( ',' elementValueNoEnum )*
                    loop10:
                    do {
                        int alt10=2;
                        int LA10_0 = input.LA(1);

                        if ( (LA10_0==COMMA) ) {
                            int LA10_1 = input.LA(2);

                            if ( ((LA10_1>=BOOLEAN_TRUE && LA10_1<=VALUE_NULL)||LA10_1==NUM_DOUBLE||(LA10_1>=STRING_LITERAL && LA10_1<=QUOTED_STRING_LITERAL)||(LA10_1>=PLUS && LA10_1<=MINUS)||LA10_1==LCURLY||LA10_1==NUM_INT||(LA10_1>=NUM_LONG && LA10_1<=NUM_FLOAT)||LA10_1==EMAILAT) ) {
                                alt10=1;
                            }


                        }


                        switch (alt10) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:533:34: ',' elementValueNoEnum
                    	    {
                    	    char_literal37=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValueArrayNoEnum1782); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(char_literal37);

                    	    pushFollow(FOLLOW_elementValueNoEnum_in_elementValueArrayNoEnum1784);
                    	    elementValueNoEnum38=elementValueNoEnum();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_elementValueNoEnum.add(elementValueNoEnum38.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop10;
                        }
                    } while (true);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:533:61: ( ',' )?
            int alt12=2;
            int LA12_0 = input.LA(1);

            if ( (LA12_0==COMMA) ) {
                alt12=1;
            }
            switch (alt12) {
                case 1 :
                    // EsperEPL2Grammar.g:533:62: ','
                    {
                    char_literal39=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValueArrayNoEnum1791); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(char_literal39);


                    }
                    break;

            }

            char_literal40=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_elementValueArrayNoEnum1795); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCURLY.add(char_literal40);



            // AST REWRITE
            // elements: elementValueNoEnum
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 534:2: -> ^( ANNOTATION_ARRAY ( elementValueNoEnum )* )
            {
                // EsperEPL2Grammar.g:534:5: ^( ANNOTATION_ARRAY ( elementValueNoEnum )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION_ARRAY, "ANNOTATION_ARRAY"), root_1);

                // EsperEPL2Grammar.g:534:24: ( elementValueNoEnum )*
                while ( stream_elementValueNoEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValueNoEnum.nextTree());

                }
                stream_elementValueNoEnum.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "elementValueArrayNoEnum"

    public static class elementValueArrayEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValueArrayEnum"
    // EsperEPL2Grammar.g:537:1: elementValueArrayEnum : '{' ( elementValueEnum ( ',' elementValueEnum )* )? ( ',' )? '}' -> ^( ANNOTATION_ARRAY ( elementValueEnum )* ) ;
    public final EsperEPL2GrammarParser.elementValueArrayEnum_return elementValueArrayEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValueArrayEnum_return retval = new EsperEPL2GrammarParser.elementValueArrayEnum_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token char_literal41=null;
        Token char_literal43=null;
        Token char_literal45=null;
        Token char_literal46=null;
        EsperEPL2GrammarParser.elementValueEnum_return elementValueEnum42 = null;

        EsperEPL2GrammarParser.elementValueEnum_return elementValueEnum44 = null;


        CommonTree char_literal41_tree=null;
        CommonTree char_literal43_tree=null;
        CommonTree char_literal45_tree=null;
        CommonTree char_literal46_tree=null;
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_elementValueEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueEnum");
        try {
            // EsperEPL2Grammar.g:538:5: ( '{' ( elementValueEnum ( ',' elementValueEnum )* )? ( ',' )? '}' -> ^( ANNOTATION_ARRAY ( elementValueEnum )* ) )
            // EsperEPL2Grammar.g:538:9: '{' ( elementValueEnum ( ',' elementValueEnum )* )? ( ',' )? '}'
            {
            char_literal41=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_elementValueArrayEnum1824); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCURLY.add(char_literal41);

            // EsperEPL2Grammar.g:538:13: ( elementValueEnum ( ',' elementValueEnum )* )?
            int alt14=2;
            int LA14_0 = input.LA(1);

            if ( ((LA14_0>=BOOLEAN_TRUE && LA14_0<=VALUE_NULL)||LA14_0==NUM_DOUBLE||LA14_0==IDENT||(LA14_0>=STRING_LITERAL && LA14_0<=QUOTED_STRING_LITERAL)||(LA14_0>=PLUS && LA14_0<=MINUS)||LA14_0==LCURLY||LA14_0==NUM_INT||(LA14_0>=TICKED_STRING_LITERAL && LA14_0<=NUM_FLOAT)||LA14_0==EMAILAT) ) {
                alt14=1;
            }
            switch (alt14) {
                case 1 :
                    // EsperEPL2Grammar.g:538:14: elementValueEnum ( ',' elementValueEnum )*
                    {
                    pushFollow(FOLLOW_elementValueEnum_in_elementValueArrayEnum1827);
                    elementValueEnum42=elementValueEnum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_elementValueEnum.add(elementValueEnum42.getTree());
                    // EsperEPL2Grammar.g:538:31: ( ',' elementValueEnum )*
                    loop13:
                    do {
                        int alt13=2;
                        int LA13_0 = input.LA(1);

                        if ( (LA13_0==COMMA) ) {
                            int LA13_1 = input.LA(2);

                            if ( ((LA13_1>=BOOLEAN_TRUE && LA13_1<=VALUE_NULL)||LA13_1==NUM_DOUBLE||LA13_1==IDENT||(LA13_1>=STRING_LITERAL && LA13_1<=QUOTED_STRING_LITERAL)||(LA13_1>=PLUS && LA13_1<=MINUS)||LA13_1==LCURLY||LA13_1==NUM_INT||(LA13_1>=TICKED_STRING_LITERAL && LA13_1<=NUM_FLOAT)||LA13_1==EMAILAT) ) {
                                alt13=1;
                            }


                        }


                        switch (alt13) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:538:32: ',' elementValueEnum
                    	    {
                    	    char_literal43=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValueArrayEnum1830); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(char_literal43);

                    	    pushFollow(FOLLOW_elementValueEnum_in_elementValueArrayEnum1832);
                    	    elementValueEnum44=elementValueEnum();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_elementValueEnum.add(elementValueEnum44.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop13;
                        }
                    } while (true);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:538:57: ( ',' )?
            int alt15=2;
            int LA15_0 = input.LA(1);

            if ( (LA15_0==COMMA) ) {
                alt15=1;
            }
            switch (alt15) {
                case 1 :
                    // EsperEPL2Grammar.g:538:58: ','
                    {
                    char_literal45=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValueArrayEnum1839); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(char_literal45);


                    }
                    break;

            }

            char_literal46=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_elementValueArrayEnum1843); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCURLY.add(char_literal46);



            // AST REWRITE
            // elements: elementValueEnum
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 539:2: -> ^( ANNOTATION_ARRAY ( elementValueEnum )* )
            {
                // EsperEPL2Grammar.g:539:5: ^( ANNOTATION_ARRAY ( elementValueEnum )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION_ARRAY, "ANNOTATION_ARRAY"), root_1);

                // EsperEPL2Grammar.g:539:24: ( elementValueEnum )*
                while ( stream_elementValueEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValueEnum.nextTree());

                }
                stream_elementValueEnum.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "elementValueArrayEnum"

    public static class eplExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "eplExpression"
    // EsperEPL2Grammar.g:545:1: eplExpression : ( selectExpr | createWindowExpr | createVariableExpr | onExpr );
    public final EsperEPL2GrammarParser.eplExpression_return eplExpression() throws RecognitionException {
        EsperEPL2GrammarParser.eplExpression_return retval = new EsperEPL2GrammarParser.eplExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.selectExpr_return selectExpr47 = null;

        EsperEPL2GrammarParser.createWindowExpr_return createWindowExpr48 = null;

        EsperEPL2GrammarParser.createVariableExpr_return createVariableExpr49 = null;

        EsperEPL2GrammarParser.onExpr_return onExpr50 = null;



        try {
            // EsperEPL2Grammar.g:546:2: ( selectExpr | createWindowExpr | createVariableExpr | onExpr )
            int alt16=4;
            switch ( input.LA(1) ) {
            case SELECT:
            case INSERT:
                {
                alt16=1;
                }
                break;
            case CREATE:
                {
                int LA16_3 = input.LA(2);

                if ( (LA16_3==WINDOW) ) {
                    alt16=2;
                }
                else if ( (LA16_3==VARIABLE) ) {
                    alt16=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 16, 3, input);

                    throw nvae;
                }
                }
                break;
            case ON:
                {
                alt16=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 16, 0, input);

                throw nvae;
            }

            switch (alt16) {
                case 1 :
                    // EsperEPL2Grammar.g:546:4: selectExpr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_selectExpr_in_eplExpression1875);
                    selectExpr47=selectExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, selectExpr47.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:547:4: createWindowExpr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_createWindowExpr_in_eplExpression1880);
                    createWindowExpr48=createWindowExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createWindowExpr48.getTree());

                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:548:4: createVariableExpr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_createVariableExpr_in_eplExpression1885);
                    createVariableExpr49=createVariableExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createVariableExpr49.getTree());

                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:549:4: onExpr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_onExpr_in_eplExpression1890);
                    onExpr50=onExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, onExpr50.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "eplExpression"

    public static class selectExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "selectExpr"
    // EsperEPL2Grammar.g:552:1: selectExpr : ( INSERT insertIntoExpr )? SELECT selectClause FROM fromClause ( WHERE whereClause )? ( GROUP BY groupByListExpr )? ( HAVING havingClause )? ( OUTPUT outputLimit )? ( ORDER BY orderByListExpr )? ( ROW_LIMIT_EXPR rowLimit )? ;
    public final EsperEPL2GrammarParser.selectExpr_return selectExpr() throws RecognitionException {
        EsperEPL2GrammarParser.selectExpr_return retval = new EsperEPL2GrammarParser.selectExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token INSERT51=null;
        Token SELECT53=null;
        Token FROM55=null;
        Token WHERE57=null;
        Token GROUP59=null;
        Token BY60=null;
        Token HAVING62=null;
        Token OUTPUT64=null;
        Token ORDER66=null;
        Token BY67=null;
        Token ROW_LIMIT_EXPR69=null;
        EsperEPL2GrammarParser.insertIntoExpr_return insertIntoExpr52 = null;

        EsperEPL2GrammarParser.selectClause_return selectClause54 = null;

        EsperEPL2GrammarParser.fromClause_return fromClause56 = null;

        EsperEPL2GrammarParser.whereClause_return whereClause58 = null;

        EsperEPL2GrammarParser.groupByListExpr_return groupByListExpr61 = null;

        EsperEPL2GrammarParser.havingClause_return havingClause63 = null;

        EsperEPL2GrammarParser.outputLimit_return outputLimit65 = null;

        EsperEPL2GrammarParser.orderByListExpr_return orderByListExpr68 = null;

        EsperEPL2GrammarParser.rowLimit_return rowLimit70 = null;


        CommonTree INSERT51_tree=null;
        CommonTree SELECT53_tree=null;
        CommonTree FROM55_tree=null;
        CommonTree WHERE57_tree=null;
        CommonTree GROUP59_tree=null;
        CommonTree BY60_tree=null;
        CommonTree HAVING62_tree=null;
        CommonTree OUTPUT64_tree=null;
        CommonTree ORDER66_tree=null;
        CommonTree BY67_tree=null;
        CommonTree ROW_LIMIT_EXPR69_tree=null;

        try {
            // EsperEPL2Grammar.g:553:2: ( ( INSERT insertIntoExpr )? SELECT selectClause FROM fromClause ( WHERE whereClause )? ( GROUP BY groupByListExpr )? ( HAVING havingClause )? ( OUTPUT outputLimit )? ( ORDER BY orderByListExpr )? ( ROW_LIMIT_EXPR rowLimit )? )
            // EsperEPL2Grammar.g:553:4: ( INSERT insertIntoExpr )? SELECT selectClause FROM fromClause ( WHERE whereClause )? ( GROUP BY groupByListExpr )? ( HAVING havingClause )? ( OUTPUT outputLimit )? ( ORDER BY orderByListExpr )? ( ROW_LIMIT_EXPR rowLimit )?
            {
            root_0 = (CommonTree)adaptor.nil();

            // EsperEPL2Grammar.g:553:4: ( INSERT insertIntoExpr )?
            int alt17=2;
            int LA17_0 = input.LA(1);

            if ( (LA17_0==INSERT) ) {
                alt17=1;
            }
            switch (alt17) {
                case 1 :
                    // EsperEPL2Grammar.g:553:5: INSERT insertIntoExpr
                    {
                    INSERT51=(Token)match(input,INSERT,FOLLOW_INSERT_in_selectExpr1903); if (state.failed) return retval;
                    pushFollow(FOLLOW_insertIntoExpr_in_selectExpr1906);
                    insertIntoExpr52=insertIntoExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, insertIntoExpr52.getTree());

                    }
                    break;

            }

            SELECT53=(Token)match(input,SELECT,FOLLOW_SELECT_in_selectExpr1912); if (state.failed) return retval;
            pushFollow(FOLLOW_selectClause_in_selectExpr1915);
            selectClause54=selectClause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, selectClause54.getTree());
            FROM55=(Token)match(input,FROM,FOLLOW_FROM_in_selectExpr1919); if (state.failed) return retval;
            pushFollow(FOLLOW_fromClause_in_selectExpr1922);
            fromClause56=fromClause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, fromClause56.getTree());
            // EsperEPL2Grammar.g:556:3: ( WHERE whereClause )?
            int alt18=2;
            int LA18_0 = input.LA(1);

            if ( (LA18_0==WHERE) ) {
                alt18=1;
            }
            switch (alt18) {
                case 1 :
                    // EsperEPL2Grammar.g:556:4: WHERE whereClause
                    {
                    WHERE57=(Token)match(input,WHERE,FOLLOW_WHERE_in_selectExpr1927); if (state.failed) return retval;
                    pushFollow(FOLLOW_whereClause_in_selectExpr1930);
                    whereClause58=whereClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, whereClause58.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:557:3: ( GROUP BY groupByListExpr )?
            int alt19=2;
            int LA19_0 = input.LA(1);

            if ( (LA19_0==GROUP) ) {
                alt19=1;
            }
            switch (alt19) {
                case 1 :
                    // EsperEPL2Grammar.g:557:4: GROUP BY groupByListExpr
                    {
                    GROUP59=(Token)match(input,GROUP,FOLLOW_GROUP_in_selectExpr1937); if (state.failed) return retval;
                    BY60=(Token)match(input,BY,FOLLOW_BY_in_selectExpr1940); if (state.failed) return retval;
                    pushFollow(FOLLOW_groupByListExpr_in_selectExpr1943);
                    groupByListExpr61=groupByListExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, groupByListExpr61.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:558:3: ( HAVING havingClause )?
            int alt20=2;
            int LA20_0 = input.LA(1);

            if ( (LA20_0==HAVING) ) {
                alt20=1;
            }
            switch (alt20) {
                case 1 :
                    // EsperEPL2Grammar.g:558:4: HAVING havingClause
                    {
                    HAVING62=(Token)match(input,HAVING,FOLLOW_HAVING_in_selectExpr1950); if (state.failed) return retval;
                    pushFollow(FOLLOW_havingClause_in_selectExpr1953);
                    havingClause63=havingClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, havingClause63.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:559:3: ( OUTPUT outputLimit )?
            int alt21=2;
            int LA21_0 = input.LA(1);

            if ( (LA21_0==OUTPUT) ) {
                alt21=1;
            }
            switch (alt21) {
                case 1 :
                    // EsperEPL2Grammar.g:559:4: OUTPUT outputLimit
                    {
                    OUTPUT64=(Token)match(input,OUTPUT,FOLLOW_OUTPUT_in_selectExpr1960); if (state.failed) return retval;
                    pushFollow(FOLLOW_outputLimit_in_selectExpr1963);
                    outputLimit65=outputLimit();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, outputLimit65.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:560:3: ( ORDER BY orderByListExpr )?
            int alt22=2;
            int LA22_0 = input.LA(1);

            if ( (LA22_0==ORDER) ) {
                alt22=1;
            }
            switch (alt22) {
                case 1 :
                    // EsperEPL2Grammar.g:560:4: ORDER BY orderByListExpr
                    {
                    ORDER66=(Token)match(input,ORDER,FOLLOW_ORDER_in_selectExpr1970); if (state.failed) return retval;
                    BY67=(Token)match(input,BY,FOLLOW_BY_in_selectExpr1973); if (state.failed) return retval;
                    pushFollow(FOLLOW_orderByListExpr_in_selectExpr1976);
                    orderByListExpr68=orderByListExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, orderByListExpr68.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:561:3: ( ROW_LIMIT_EXPR rowLimit )?
            int alt23=2;
            int LA23_0 = input.LA(1);

            if ( (LA23_0==ROW_LIMIT_EXPR) ) {
                alt23=1;
            }
            switch (alt23) {
                case 1 :
                    // EsperEPL2Grammar.g:561:4: ROW_LIMIT_EXPR rowLimit
                    {
                    ROW_LIMIT_EXPR69=(Token)match(input,ROW_LIMIT_EXPR,FOLLOW_ROW_LIMIT_EXPR_in_selectExpr1983); if (state.failed) return retval;
                    pushFollow(FOLLOW_rowLimit_in_selectExpr1986);
                    rowLimit70=rowLimit();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rowLimit70.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "selectExpr"

    public static class onExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "onExpr"
    // EsperEPL2Grammar.g:564:1: onExpr : ON ( eventFilterExpression | patternInclusionExpression ) ( AS i= IDENT | i= IDENT )? ( onDeleteExpr | onSelectExpr | onSetExpr ) -> ^( ON_EXPR ( eventFilterExpression )? ( patternInclusionExpression )? ( $i)? ( onDeleteExpr )? ( onSelectExpr )? ( onSetExpr )? ) ;
    public final EsperEPL2GrammarParser.onExpr_return onExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onExpr_return retval = new EsperEPL2GrammarParser.onExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token ON71=null;
        Token AS74=null;
        EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression72 = null;

        EsperEPL2GrammarParser.patternInclusionExpression_return patternInclusionExpression73 = null;

        EsperEPL2GrammarParser.onDeleteExpr_return onDeleteExpr75 = null;

        EsperEPL2GrammarParser.onSelectExpr_return onSelectExpr76 = null;

        EsperEPL2GrammarParser.onSetExpr_return onSetExpr77 = null;


        CommonTree i_tree=null;
        CommonTree ON71_tree=null;
        CommonTree AS74_tree=null;
        RewriteRuleTokenStream stream_ON=new RewriteRuleTokenStream(adaptor,"token ON");
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_onSelectExpr=new RewriteRuleSubtreeStream(adaptor,"rule onSelectExpr");
        RewriteRuleSubtreeStream stream_onDeleteExpr=new RewriteRuleSubtreeStream(adaptor,"rule onDeleteExpr");
        RewriteRuleSubtreeStream stream_eventFilterExpression=new RewriteRuleSubtreeStream(adaptor,"rule eventFilterExpression");
        RewriteRuleSubtreeStream stream_onSetExpr=new RewriteRuleSubtreeStream(adaptor,"rule onSetExpr");
        RewriteRuleSubtreeStream stream_patternInclusionExpression=new RewriteRuleSubtreeStream(adaptor,"rule patternInclusionExpression");
        try {
            // EsperEPL2Grammar.g:565:2: ( ON ( eventFilterExpression | patternInclusionExpression ) ( AS i= IDENT | i= IDENT )? ( onDeleteExpr | onSelectExpr | onSetExpr ) -> ^( ON_EXPR ( eventFilterExpression )? ( patternInclusionExpression )? ( $i)? ( onDeleteExpr )? ( onSelectExpr )? ( onSetExpr )? ) )
            // EsperEPL2Grammar.g:565:4: ON ( eventFilterExpression | patternInclusionExpression ) ( AS i= IDENT | i= IDENT )? ( onDeleteExpr | onSelectExpr | onSetExpr )
            {
            ON71=(Token)match(input,ON,FOLLOW_ON_in_onExpr2001); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ON.add(ON71);

            // EsperEPL2Grammar.g:565:7: ( eventFilterExpression | patternInclusionExpression )
            int alt24=2;
            int LA24_0 = input.LA(1);

            if ( (LA24_0==IDENT||LA24_0==TICKED_STRING_LITERAL) ) {
                alt24=1;
            }
            else if ( (LA24_0==PATTERN) ) {
                alt24=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 24, 0, input);

                throw nvae;
            }
            switch (alt24) {
                case 1 :
                    // EsperEPL2Grammar.g:565:8: eventFilterExpression
                    {
                    pushFollow(FOLLOW_eventFilterExpression_in_onExpr2004);
                    eventFilterExpression72=eventFilterExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_eventFilterExpression.add(eventFilterExpression72.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:565:32: patternInclusionExpression
                    {
                    pushFollow(FOLLOW_patternInclusionExpression_in_onExpr2008);
                    patternInclusionExpression73=patternInclusionExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_patternInclusionExpression.add(patternInclusionExpression73.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:565:60: ( AS i= IDENT | i= IDENT )?
            int alt25=3;
            int LA25_0 = input.LA(1);

            if ( (LA25_0==AS) ) {
                alt25=1;
            }
            else if ( (LA25_0==IDENT) ) {
                alt25=2;
            }
            switch (alt25) {
                case 1 :
                    // EsperEPL2Grammar.g:565:61: AS i= IDENT
                    {
                    AS74=(Token)match(input,AS,FOLLOW_AS_in_onExpr2012); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS74);

                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onExpr2016); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:565:74: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onExpr2022); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:566:3: ( onDeleteExpr | onSelectExpr | onSetExpr )
            int alt26=3;
            switch ( input.LA(1) ) {
            case DELETE:
                {
                alt26=1;
                }
                break;
            case SELECT:
            case INSERT:
                {
                alt26=2;
                }
                break;
            case SET:
                {
                alt26=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 26, 0, input);

                throw nvae;
            }

            switch (alt26) {
                case 1 :
                    // EsperEPL2Grammar.g:566:4: onDeleteExpr
                    {
                    pushFollow(FOLLOW_onDeleteExpr_in_onExpr2030);
                    onDeleteExpr75=onDeleteExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onDeleteExpr.add(onDeleteExpr75.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:566:19: onSelectExpr
                    {
                    pushFollow(FOLLOW_onSelectExpr_in_onExpr2034);
                    onSelectExpr76=onSelectExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onSelectExpr.add(onSelectExpr76.getTree());

                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:566:34: onSetExpr
                    {
                    pushFollow(FOLLOW_onSetExpr_in_onExpr2038);
                    onSetExpr77=onSetExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onSetExpr.add(onSetExpr77.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: onSetExpr, onDeleteExpr, patternInclusionExpression, eventFilterExpression, onSelectExpr, i
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 567:3: -> ^( ON_EXPR ( eventFilterExpression )? ( patternInclusionExpression )? ( $i)? ( onDeleteExpr )? ( onSelectExpr )? ( onSetExpr )? )
            {
                // EsperEPL2Grammar.g:567:6: ^( ON_EXPR ( eventFilterExpression )? ( patternInclusionExpression )? ( $i)? ( onDeleteExpr )? ( onSelectExpr )? ( onSetExpr )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_EXPR, "ON_EXPR"), root_1);

                // EsperEPL2Grammar.g:567:16: ( eventFilterExpression )?
                if ( stream_eventFilterExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_eventFilterExpression.nextTree());

                }
                stream_eventFilterExpression.reset();
                // EsperEPL2Grammar.g:567:39: ( patternInclusionExpression )?
                if ( stream_patternInclusionExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_patternInclusionExpression.nextTree());

                }
                stream_patternInclusionExpression.reset();
                // EsperEPL2Grammar.g:567:67: ( $i)?
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());

                }
                stream_i.reset();
                // EsperEPL2Grammar.g:567:71: ( onDeleteExpr )?
                if ( stream_onDeleteExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onDeleteExpr.nextTree());

                }
                stream_onDeleteExpr.reset();
                // EsperEPL2Grammar.g:567:85: ( onSelectExpr )?
                if ( stream_onSelectExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSelectExpr.nextTree());

                }
                stream_onSelectExpr.reset();
                // EsperEPL2Grammar.g:567:99: ( onSetExpr )?
                if ( stream_onSetExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetExpr.nextTree());

                }
                stream_onSetExpr.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "onExpr"

    public static class onSelectExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "onSelectExpr"
    // EsperEPL2Grammar.g:570:1: onSelectExpr : ( INSERT insertIntoExpr )? SELECT selectionList onExprFrom ( WHERE whereClause )? ( GROUP BY groupByListExpr )? ( HAVING havingClause )? ( ORDER BY orderByListExpr )? -> ^( ON_SELECT_EXPR ( insertIntoExpr )? selectionList onExprFrom ( whereClause )? ( groupByListExpr )? ( havingClause )? ( orderByListExpr )? ) ;
    public final EsperEPL2GrammarParser.onSelectExpr_return onSelectExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onSelectExpr_return retval = new EsperEPL2GrammarParser.onSelectExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token INSERT78=null;
        Token SELECT80=null;
        Token WHERE83=null;
        Token GROUP85=null;
        Token BY86=null;
        Token HAVING88=null;
        Token ORDER90=null;
        Token BY91=null;
        EsperEPL2GrammarParser.insertIntoExpr_return insertIntoExpr79 = null;

        EsperEPL2GrammarParser.selectionList_return selectionList81 = null;

        EsperEPL2GrammarParser.onExprFrom_return onExprFrom82 = null;

        EsperEPL2GrammarParser.whereClause_return whereClause84 = null;

        EsperEPL2GrammarParser.groupByListExpr_return groupByListExpr87 = null;

        EsperEPL2GrammarParser.havingClause_return havingClause89 = null;

        EsperEPL2GrammarParser.orderByListExpr_return orderByListExpr92 = null;


        CommonTree INSERT78_tree=null;
        CommonTree SELECT80_tree=null;
        CommonTree WHERE83_tree=null;
        CommonTree GROUP85_tree=null;
        CommonTree BY86_tree=null;
        CommonTree HAVING88_tree=null;
        CommonTree ORDER90_tree=null;
        CommonTree BY91_tree=null;
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_GROUP=new RewriteRuleTokenStream(adaptor,"token GROUP");
        RewriteRuleTokenStream stream_BY=new RewriteRuleTokenStream(adaptor,"token BY");
        RewriteRuleTokenStream stream_HAVING=new RewriteRuleTokenStream(adaptor,"token HAVING");
        RewriteRuleTokenStream stream_INSERT=new RewriteRuleTokenStream(adaptor,"token INSERT");
        RewriteRuleTokenStream stream_ORDER=new RewriteRuleTokenStream(adaptor,"token ORDER");
        RewriteRuleTokenStream stream_SELECT=new RewriteRuleTokenStream(adaptor,"token SELECT");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_groupByListExpr=new RewriteRuleSubtreeStream(adaptor,"rule groupByListExpr");
        RewriteRuleSubtreeStream stream_insertIntoExpr=new RewriteRuleSubtreeStream(adaptor,"rule insertIntoExpr");
        RewriteRuleSubtreeStream stream_orderByListExpr=new RewriteRuleSubtreeStream(adaptor,"rule orderByListExpr");
        RewriteRuleSubtreeStream stream_selectionList=new RewriteRuleSubtreeStream(adaptor,"rule selectionList");
        RewriteRuleSubtreeStream stream_onExprFrom=new RewriteRuleSubtreeStream(adaptor,"rule onExprFrom");
        RewriteRuleSubtreeStream stream_havingClause=new RewriteRuleSubtreeStream(adaptor,"rule havingClause");
         paraphrases.push("on-select clause"); 
        try {
            // EsperEPL2Grammar.g:573:2: ( ( INSERT insertIntoExpr )? SELECT selectionList onExprFrom ( WHERE whereClause )? ( GROUP BY groupByListExpr )? ( HAVING havingClause )? ( ORDER BY orderByListExpr )? -> ^( ON_SELECT_EXPR ( insertIntoExpr )? selectionList onExprFrom ( whereClause )? ( groupByListExpr )? ( havingClause )? ( orderByListExpr )? ) )
            // EsperEPL2Grammar.g:573:4: ( INSERT insertIntoExpr )? SELECT selectionList onExprFrom ( WHERE whereClause )? ( GROUP BY groupByListExpr )? ( HAVING havingClause )? ( ORDER BY orderByListExpr )?
            {
            // EsperEPL2Grammar.g:573:4: ( INSERT insertIntoExpr )?
            int alt27=2;
            int LA27_0 = input.LA(1);

            if ( (LA27_0==INSERT) ) {
                alt27=1;
            }
            switch (alt27) {
                case 1 :
                    // EsperEPL2Grammar.g:573:5: INSERT insertIntoExpr
                    {
                    INSERT78=(Token)match(input,INSERT,FOLLOW_INSERT_in_onSelectExpr2091); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INSERT.add(INSERT78);

                    pushFollow(FOLLOW_insertIntoExpr_in_onSelectExpr2093);
                    insertIntoExpr79=insertIntoExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_insertIntoExpr.add(insertIntoExpr79.getTree());

                    }
                    break;

            }

            SELECT80=(Token)match(input,SELECT,FOLLOW_SELECT_in_onSelectExpr2099); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SELECT.add(SELECT80);

            pushFollow(FOLLOW_selectionList_in_onSelectExpr2101);
            selectionList81=selectionList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_selectionList.add(selectionList81.getTree());
            pushFollow(FOLLOW_onExprFrom_in_onSelectExpr2105);
            onExprFrom82=onExprFrom();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_onExprFrom.add(onExprFrom82.getTree());
            // EsperEPL2Grammar.g:576:3: ( WHERE whereClause )?
            int alt28=2;
            int LA28_0 = input.LA(1);

            if ( (LA28_0==WHERE) ) {
                alt28=1;
            }
            switch (alt28) {
                case 1 :
                    // EsperEPL2Grammar.g:576:4: WHERE whereClause
                    {
                    WHERE83=(Token)match(input,WHERE,FOLLOW_WHERE_in_onSelectExpr2110); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE83);

                    pushFollow(FOLLOW_whereClause_in_onSelectExpr2112);
                    whereClause84=whereClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause84.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:577:3: ( GROUP BY groupByListExpr )?
            int alt29=2;
            int LA29_0 = input.LA(1);

            if ( (LA29_0==GROUP) ) {
                alt29=1;
            }
            switch (alt29) {
                case 1 :
                    // EsperEPL2Grammar.g:577:4: GROUP BY groupByListExpr
                    {
                    GROUP85=(Token)match(input,GROUP,FOLLOW_GROUP_in_onSelectExpr2121); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_GROUP.add(GROUP85);

                    BY86=(Token)match(input,BY,FOLLOW_BY_in_onSelectExpr2123); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BY.add(BY86);

                    pushFollow(FOLLOW_groupByListExpr_in_onSelectExpr2125);
                    groupByListExpr87=groupByListExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_groupByListExpr.add(groupByListExpr87.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:578:3: ( HAVING havingClause )?
            int alt30=2;
            int LA30_0 = input.LA(1);

            if ( (LA30_0==HAVING) ) {
                alt30=1;
            }
            switch (alt30) {
                case 1 :
                    // EsperEPL2Grammar.g:578:4: HAVING havingClause
                    {
                    HAVING88=(Token)match(input,HAVING,FOLLOW_HAVING_in_onSelectExpr2132); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_HAVING.add(HAVING88);

                    pushFollow(FOLLOW_havingClause_in_onSelectExpr2134);
                    havingClause89=havingClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_havingClause.add(havingClause89.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:579:3: ( ORDER BY orderByListExpr )?
            int alt31=2;
            int LA31_0 = input.LA(1);

            if ( (LA31_0==ORDER) ) {
                alt31=1;
            }
            switch (alt31) {
                case 1 :
                    // EsperEPL2Grammar.g:579:4: ORDER BY orderByListExpr
                    {
                    ORDER90=(Token)match(input,ORDER,FOLLOW_ORDER_in_onSelectExpr2141); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ORDER.add(ORDER90);

                    BY91=(Token)match(input,BY,FOLLOW_BY_in_onSelectExpr2143); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BY.add(BY91);

                    pushFollow(FOLLOW_orderByListExpr_in_onSelectExpr2145);
                    orderByListExpr92=orderByListExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_orderByListExpr.add(orderByListExpr92.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: selectionList, groupByListExpr, whereClause, orderByListExpr, havingClause, onExprFrom, insertIntoExpr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 580:3: -> ^( ON_SELECT_EXPR ( insertIntoExpr )? selectionList onExprFrom ( whereClause )? ( groupByListExpr )? ( havingClause )? ( orderByListExpr )? )
            {
                // EsperEPL2Grammar.g:580:6: ^( ON_SELECT_EXPR ( insertIntoExpr )? selectionList onExprFrom ( whereClause )? ( groupByListExpr )? ( havingClause )? ( orderByListExpr )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_SELECT_EXPR, "ON_SELECT_EXPR"), root_1);

                // EsperEPL2Grammar.g:580:23: ( insertIntoExpr )?
                if ( stream_insertIntoExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_insertIntoExpr.nextTree());

                }
                stream_insertIntoExpr.reset();
                adaptor.addChild(root_1, stream_selectionList.nextTree());
                adaptor.addChild(root_1, stream_onExprFrom.nextTree());
                // EsperEPL2Grammar.g:580:64: ( whereClause )?
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());

                }
                stream_whereClause.reset();
                // EsperEPL2Grammar.g:580:77: ( groupByListExpr )?
                if ( stream_groupByListExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_groupByListExpr.nextTree());

                }
                stream_groupByListExpr.reset();
                // EsperEPL2Grammar.g:580:94: ( havingClause )?
                if ( stream_havingClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_havingClause.nextTree());

                }
                stream_havingClause.reset();
                // EsperEPL2Grammar.g:580:108: ( orderByListExpr )?
                if ( stream_orderByListExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_orderByListExpr.nextTree());

                }
                stream_orderByListExpr.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "onSelectExpr"

    public static class onDeleteExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "onDeleteExpr"
    // EsperEPL2Grammar.g:583:1: onDeleteExpr : DELETE onExprFrom ( WHERE whereClause )? -> ^( ON_DELETE_EXPR onExprFrom ( whereClause )? ) ;
    public final EsperEPL2GrammarParser.onDeleteExpr_return onDeleteExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onDeleteExpr_return retval = new EsperEPL2GrammarParser.onDeleteExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token DELETE93=null;
        Token WHERE95=null;
        EsperEPL2GrammarParser.onExprFrom_return onExprFrom94 = null;

        EsperEPL2GrammarParser.whereClause_return whereClause96 = null;


        CommonTree DELETE93_tree=null;
        CommonTree WHERE95_tree=null;
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_DELETE=new RewriteRuleTokenStream(adaptor,"token DELETE");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_onExprFrom=new RewriteRuleSubtreeStream(adaptor,"rule onExprFrom");
         paraphrases.push("on-delete clause"); 
        try {
            // EsperEPL2Grammar.g:586:2: ( DELETE onExprFrom ( WHERE whereClause )? -> ^( ON_DELETE_EXPR onExprFrom ( whereClause )? ) )
            // EsperEPL2Grammar.g:586:4: DELETE onExprFrom ( WHERE whereClause )?
            {
            DELETE93=(Token)match(input,DELETE,FOLLOW_DELETE_in_onDeleteExpr2198); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DELETE.add(DELETE93);

            pushFollow(FOLLOW_onExprFrom_in_onDeleteExpr2202);
            onExprFrom94=onExprFrom();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_onExprFrom.add(onExprFrom94.getTree());
            // EsperEPL2Grammar.g:588:3: ( WHERE whereClause )?
            int alt32=2;
            int LA32_0 = input.LA(1);

            if ( (LA32_0==WHERE) ) {
                alt32=1;
            }
            switch (alt32) {
                case 1 :
                    // EsperEPL2Grammar.g:588:4: WHERE whereClause
                    {
                    WHERE95=(Token)match(input,WHERE,FOLLOW_WHERE_in_onDeleteExpr2207); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE95);

                    pushFollow(FOLLOW_whereClause_in_onDeleteExpr2209);
                    whereClause96=whereClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause96.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: onExprFrom, whereClause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 589:3: -> ^( ON_DELETE_EXPR onExprFrom ( whereClause )? )
            {
                // EsperEPL2Grammar.g:589:6: ^( ON_DELETE_EXPR onExprFrom ( whereClause )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_DELETE_EXPR, "ON_DELETE_EXPR"), root_1);

                adaptor.addChild(root_1, stream_onExprFrom.nextTree());
                // EsperEPL2Grammar.g:589:34: ( whereClause )?
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());

                }
                stream_whereClause.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "onDeleteExpr"

    public static class onSetExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "onSetExpr"
    // EsperEPL2Grammar.g:592:1: onSetExpr : SET onSetAssignment ( COMMA onSetAssignment )* -> ^( ON_SET_EXPR ( onSetAssignment )+ ) ;
    public final EsperEPL2GrammarParser.onSetExpr_return onSetExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onSetExpr_return retval = new EsperEPL2GrammarParser.onSetExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token SET97=null;
        Token COMMA99=null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment98 = null;

        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment100 = null;


        CommonTree SET97_tree=null;
        CommonTree COMMA99_tree=null;
        RewriteRuleTokenStream stream_SET=new RewriteRuleTokenStream(adaptor,"token SET");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_onSetAssignment=new RewriteRuleSubtreeStream(adaptor,"rule onSetAssignment");
         paraphrases.push("on-set clause"); 
        try {
            // EsperEPL2Grammar.g:595:2: ( SET onSetAssignment ( COMMA onSetAssignment )* -> ^( ON_SET_EXPR ( onSetAssignment )+ ) )
            // EsperEPL2Grammar.g:595:4: SET onSetAssignment ( COMMA onSetAssignment )*
            {
            SET97=(Token)match(input,SET,FOLLOW_SET_in_onSetExpr2249); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SET.add(SET97);

            pushFollow(FOLLOW_onSetAssignment_in_onSetExpr2251);
            onSetAssignment98=onSetAssignment();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment98.getTree());
            // EsperEPL2Grammar.g:595:24: ( COMMA onSetAssignment )*
            loop33:
            do {
                int alt33=2;
                int LA33_0 = input.LA(1);

                if ( (LA33_0==COMMA) ) {
                    alt33=1;
                }


                switch (alt33) {
            	case 1 :
            	    // EsperEPL2Grammar.g:595:25: COMMA onSetAssignment
            	    {
            	    COMMA99=(Token)match(input,COMMA,FOLLOW_COMMA_in_onSetExpr2254); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA99);

            	    pushFollow(FOLLOW_onSetAssignment_in_onSetExpr2256);
            	    onSetAssignment100=onSetAssignment();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment100.getTree());

            	    }
            	    break;

            	default :
            	    break loop33;
                }
            } while (true);



            // AST REWRITE
            // elements: onSetAssignment
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 596:3: -> ^( ON_SET_EXPR ( onSetAssignment )+ )
            {
                // EsperEPL2Grammar.g:596:6: ^( ON_SET_EXPR ( onSetAssignment )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_SET_EXPR, "ON_SET_EXPR"), root_1);

                if ( !(stream_onSetAssignment.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_onSetAssignment.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetAssignment.nextTree());

                }
                stream_onSetAssignment.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "onSetExpr"

    public static class onSetAssignment_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "onSetAssignment"
    // EsperEPL2Grammar.g:599:1: onSetAssignment : IDENT EQUALS expression ;
    public final EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment() throws RecognitionException {
        EsperEPL2GrammarParser.onSetAssignment_return retval = new EsperEPL2GrammarParser.onSetAssignment_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token IDENT101=null;
        Token EQUALS102=null;
        EsperEPL2GrammarParser.expression_return expression103 = null;


        CommonTree IDENT101_tree=null;
        CommonTree EQUALS102_tree=null;

        try {
            // EsperEPL2Grammar.g:600:2: ( IDENT EQUALS expression )
            // EsperEPL2Grammar.g:600:4: IDENT EQUALS expression
            {
            root_0 = (CommonTree)adaptor.nil();

            IDENT101=(Token)match(input,IDENT,FOLLOW_IDENT_in_onSetAssignment2281); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IDENT101_tree = (CommonTree)adaptor.create(IDENT101);
            adaptor.addChild(root_0, IDENT101_tree);
            }
            EQUALS102=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_onSetAssignment2283); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_onSetAssignment2286);
            expression103=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression103.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "onSetAssignment"

    public static class onExprFrom_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "onExprFrom"
    // EsperEPL2Grammar.g:603:1: onExprFrom : FROM n= IDENT ( AS i= IDENT | i= IDENT )? -> ^( ON_EXPR_FROM $n ( $i)? ) ;
    public final EsperEPL2GrammarParser.onExprFrom_return onExprFrom() throws RecognitionException {
        EsperEPL2GrammarParser.onExprFrom_return retval = new EsperEPL2GrammarParser.onExprFrom_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token n=null;
        Token i=null;
        Token FROM104=null;
        Token AS105=null;

        CommonTree n_tree=null;
        CommonTree i_tree=null;
        CommonTree FROM104_tree=null;
        CommonTree AS105_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_FROM=new RewriteRuleTokenStream(adaptor,"token FROM");

        try {
            // EsperEPL2Grammar.g:604:2: ( FROM n= IDENT ( AS i= IDENT | i= IDENT )? -> ^( ON_EXPR_FROM $n ( $i)? ) )
            // EsperEPL2Grammar.g:604:4: FROM n= IDENT ( AS i= IDENT | i= IDENT )?
            {
            FROM104=(Token)match(input,FROM,FOLLOW_FROM_in_onExprFrom2299); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_FROM.add(FROM104);

            n=(Token)match(input,IDENT,FOLLOW_IDENT_in_onExprFrom2303); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(n);

            // EsperEPL2Grammar.g:604:17: ( AS i= IDENT | i= IDENT )?
            int alt34=3;
            int LA34_0 = input.LA(1);

            if ( (LA34_0==AS) ) {
                alt34=1;
            }
            else if ( (LA34_0==IDENT) ) {
                alt34=2;
            }
            switch (alt34) {
                case 1 :
                    // EsperEPL2Grammar.g:604:18: AS i= IDENT
                    {
                    AS105=(Token)match(input,AS,FOLLOW_AS_in_onExprFrom2306); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS105);

                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onExprFrom2310); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:604:31: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onExprFrom2316); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;

            }



            // AST REWRITE
            // elements: i, n
            // token labels: n, i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_n=new RewriteRuleTokenStream(adaptor,"token n",n);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 605:3: -> ^( ON_EXPR_FROM $n ( $i)? )
            {
                // EsperEPL2Grammar.g:605:6: ^( ON_EXPR_FROM $n ( $i)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_EXPR_FROM, "ON_EXPR_FROM"), root_1);

                adaptor.addChild(root_1, stream_n.nextNode());
                // EsperEPL2Grammar.g:605:24: ( $i)?
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());

                }
                stream_i.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "onExprFrom"

    public static class createWindowExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "createWindowExpr"
    // EsperEPL2Grammar.g:608:1: createWindowExpr : CREATE WINDOW i= IDENT ( DOT viewExpression ( DOT viewExpression )* )? (ru= RETAINUNION | ri= RETAININTERSECTION )? ( AS )? ( createWindowExprModelAfter | LPAREN createWindowColumnList RPAREN ) (i1= INSERT ( WHERE expression )? )? -> {i1 != null}? ^( CREATE_WINDOW_EXPR $i ( viewExpression )* ( $ru)? ( $ri)? ( createWindowExprModelAfter )? ( createWindowColumnList )? ^( INSERT ( expression )? ) ) -> ^( CREATE_WINDOW_EXPR $i ( viewExpression )* ( $ru)? ( $ri)? ( createWindowExprModelAfter )? ( createWindowColumnList )? ) ;
    public final EsperEPL2GrammarParser.createWindowExpr_return createWindowExpr() throws RecognitionException {
        EsperEPL2GrammarParser.createWindowExpr_return retval = new EsperEPL2GrammarParser.createWindowExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token ru=null;
        Token ri=null;
        Token i1=null;
        Token CREATE106=null;
        Token WINDOW107=null;
        Token DOT108=null;
        Token DOT110=null;
        Token AS112=null;
        Token LPAREN114=null;
        Token RPAREN116=null;
        Token WHERE117=null;
        EsperEPL2GrammarParser.viewExpression_return viewExpression109 = null;

        EsperEPL2GrammarParser.viewExpression_return viewExpression111 = null;

        EsperEPL2GrammarParser.createWindowExprModelAfter_return createWindowExprModelAfter113 = null;

        EsperEPL2GrammarParser.createWindowColumnList_return createWindowColumnList115 = null;

        EsperEPL2GrammarParser.expression_return expression118 = null;


        CommonTree i_tree=null;
        CommonTree ru_tree=null;
        CommonTree ri_tree=null;
        CommonTree i1_tree=null;
        CommonTree CREATE106_tree=null;
        CommonTree WINDOW107_tree=null;
        CommonTree DOT108_tree=null;
        CommonTree DOT110_tree=null;
        CommonTree AS112_tree=null;
        CommonTree LPAREN114_tree=null;
        CommonTree RPAREN116_tree=null;
        CommonTree WHERE117_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_CREATE=new RewriteRuleTokenStream(adaptor,"token CREATE");
        RewriteRuleTokenStream stream_WINDOW=new RewriteRuleTokenStream(adaptor,"token WINDOW");
        RewriteRuleTokenStream stream_RETAINUNION=new RewriteRuleTokenStream(adaptor,"token RETAINUNION");
        RewriteRuleTokenStream stream_RETAININTERSECTION=new RewriteRuleTokenStream(adaptor,"token RETAININTERSECTION");
        RewriteRuleTokenStream stream_INSERT=new RewriteRuleTokenStream(adaptor,"token INSERT");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_createWindowExprModelAfter=new RewriteRuleSubtreeStream(adaptor,"rule createWindowExprModelAfter");
        RewriteRuleSubtreeStream stream_viewExpression=new RewriteRuleSubtreeStream(adaptor,"rule viewExpression");
        RewriteRuleSubtreeStream stream_createWindowColumnList=new RewriteRuleSubtreeStream(adaptor,"rule createWindowColumnList");
        try {
            // EsperEPL2Grammar.g:609:2: ( CREATE WINDOW i= IDENT ( DOT viewExpression ( DOT viewExpression )* )? (ru= RETAINUNION | ri= RETAININTERSECTION )? ( AS )? ( createWindowExprModelAfter | LPAREN createWindowColumnList RPAREN ) (i1= INSERT ( WHERE expression )? )? -> {i1 != null}? ^( CREATE_WINDOW_EXPR $i ( viewExpression )* ( $ru)? ( $ri)? ( createWindowExprModelAfter )? ( createWindowColumnList )? ^( INSERT ( expression )? ) ) -> ^( CREATE_WINDOW_EXPR $i ( viewExpression )* ( $ru)? ( $ri)? ( createWindowExprModelAfter )? ( createWindowColumnList )? ) )
            // EsperEPL2Grammar.g:609:4: CREATE WINDOW i= IDENT ( DOT viewExpression ( DOT viewExpression )* )? (ru= RETAINUNION | ri= RETAININTERSECTION )? ( AS )? ( createWindowExprModelAfter | LPAREN createWindowColumnList RPAREN ) (i1= INSERT ( WHERE expression )? )?
            {
            CREATE106=(Token)match(input,CREATE,FOLLOW_CREATE_in_createWindowExpr2344); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CREATE.add(CREATE106);

            WINDOW107=(Token)match(input,WINDOW,FOLLOW_WINDOW_in_createWindowExpr2346); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_WINDOW.add(WINDOW107);

            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_createWindowExpr2350); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);

            // EsperEPL2Grammar.g:609:26: ( DOT viewExpression ( DOT viewExpression )* )?
            int alt36=2;
            int LA36_0 = input.LA(1);

            if ( (LA36_0==DOT) ) {
                alt36=1;
            }
            switch (alt36) {
                case 1 :
                    // EsperEPL2Grammar.g:609:27: DOT viewExpression ( DOT viewExpression )*
                    {
                    DOT108=(Token)match(input,DOT,FOLLOW_DOT_in_createWindowExpr2353); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT108);

                    pushFollow(FOLLOW_viewExpression_in_createWindowExpr2355);
                    viewExpression109=viewExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression109.getTree());
                    // EsperEPL2Grammar.g:609:46: ( DOT viewExpression )*
                    loop35:
                    do {
                        int alt35=2;
                        int LA35_0 = input.LA(1);

                        if ( (LA35_0==DOT) ) {
                            alt35=1;
                        }


                        switch (alt35) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:609:47: DOT viewExpression
                    	    {
                    	    DOT110=(Token)match(input,DOT,FOLLOW_DOT_in_createWindowExpr2358); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_DOT.add(DOT110);

                    	    pushFollow(FOLLOW_viewExpression_in_createWindowExpr2360);
                    	    viewExpression111=viewExpression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression111.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop35;
                        }
                    } while (true);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:609:70: (ru= RETAINUNION | ri= RETAININTERSECTION )?
            int alt37=3;
            int LA37_0 = input.LA(1);

            if ( (LA37_0==RETAINUNION) ) {
                alt37=1;
            }
            else if ( (LA37_0==RETAININTERSECTION) ) {
                alt37=2;
            }
            switch (alt37) {
                case 1 :
                    // EsperEPL2Grammar.g:609:71: ru= RETAINUNION
                    {
                    ru=(Token)match(input,RETAINUNION,FOLLOW_RETAINUNION_in_createWindowExpr2369); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAINUNION.add(ru);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:609:86: ri= RETAININTERSECTION
                    {
                    ri=(Token)match(input,RETAININTERSECTION,FOLLOW_RETAININTERSECTION_in_createWindowExpr2373); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAININTERSECTION.add(ri);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:609:110: ( AS )?
            int alt38=2;
            int LA38_0 = input.LA(1);

            if ( (LA38_0==AS) ) {
                alt38=1;
            }
            switch (alt38) {
                case 1 :
                    // EsperEPL2Grammar.g:609:110: AS
                    {
                    AS112=(Token)match(input,AS,FOLLOW_AS_in_createWindowExpr2377); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS112);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:610:5: ( createWindowExprModelAfter | LPAREN createWindowColumnList RPAREN )
            int alt39=2;
            int LA39_0 = input.LA(1);

            if ( (LA39_0==SELECT||LA39_0==IDENT||LA39_0==TICKED_STRING_LITERAL) ) {
                alt39=1;
            }
            else if ( (LA39_0==LPAREN) ) {
                alt39=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 39, 0, input);

                throw nvae;
            }
            switch (alt39) {
                case 1 :
                    // EsperEPL2Grammar.g:611:6: createWindowExprModelAfter
                    {
                    pushFollow(FOLLOW_createWindowExprModelAfter_in_createWindowExpr2392);
                    createWindowExprModelAfter113=createWindowExprModelAfter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_createWindowExprModelAfter.add(createWindowExprModelAfter113.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:612:10: LPAREN createWindowColumnList RPAREN
                    {
                    LPAREN114=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_createWindowExpr2407); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN114);

                    pushFollow(FOLLOW_createWindowColumnList_in_createWindowExpr2409);
                    createWindowColumnList115=createWindowColumnList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_createWindowColumnList.add(createWindowColumnList115.getTree());
                    RPAREN116=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_createWindowExpr2411); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN116);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:614:5: (i1= INSERT ( WHERE expression )? )?
            int alt41=2;
            int LA41_0 = input.LA(1);

            if ( (LA41_0==INSERT) ) {
                alt41=1;
            }
            switch (alt41) {
                case 1 :
                    // EsperEPL2Grammar.g:614:6: i1= INSERT ( WHERE expression )?
                    {
                    i1=(Token)match(input,INSERT,FOLLOW_INSERT_in_createWindowExpr2428); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INSERT.add(i1);

                    // EsperEPL2Grammar.g:614:16: ( WHERE expression )?
                    int alt40=2;
                    int LA40_0 = input.LA(1);

                    if ( (LA40_0==WHERE) ) {
                        alt40=1;
                    }
                    switch (alt40) {
                        case 1 :
                            // EsperEPL2Grammar.g:614:17: WHERE expression
                            {
                            WHERE117=(Token)match(input,WHERE,FOLLOW_WHERE_in_createWindowExpr2431); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_WHERE.add(WHERE117);

                            pushFollow(FOLLOW_expression_in_createWindowExpr2433);
                            expression118=expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(expression118.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }



            // AST REWRITE
            // elements: ru, i, INSERT, viewExpression, ru, i, ri, createWindowColumnList, viewExpression, expression, ri, createWindowExprModelAfter, createWindowColumnList, createWindowExprModelAfter
            // token labels: ri, ru, i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_ri=new RewriteRuleTokenStream(adaptor,"token ri",ri);
            RewriteRuleTokenStream stream_ru=new RewriteRuleTokenStream(adaptor,"token ru",ru);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 615:3: -> {i1 != null}? ^( CREATE_WINDOW_EXPR $i ( viewExpression )* ( $ru)? ( $ri)? ( createWindowExprModelAfter )? ( createWindowColumnList )? ^( INSERT ( expression )? ) )
            if (i1 != null) {
                // EsperEPL2Grammar.g:615:20: ^( CREATE_WINDOW_EXPR $i ( viewExpression )* ( $ru)? ( $ri)? ( createWindowExprModelAfter )? ( createWindowColumnList )? ^( INSERT ( expression )? ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_WINDOW_EXPR, "CREATE_WINDOW_EXPR"), root_1);

                adaptor.addChild(root_1, stream_i.nextNode());
                // EsperEPL2Grammar.g:615:44: ( viewExpression )*
                while ( stream_viewExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_viewExpression.nextTree());

                }
                stream_viewExpression.reset();
                // EsperEPL2Grammar.g:615:60: ( $ru)?
                if ( stream_ru.hasNext() ) {
                    adaptor.addChild(root_1, stream_ru.nextNode());

                }
                stream_ru.reset();
                // EsperEPL2Grammar.g:615:65: ( $ri)?
                if ( stream_ri.hasNext() ) {
                    adaptor.addChild(root_1, stream_ri.nextNode());

                }
                stream_ri.reset();
                // EsperEPL2Grammar.g:615:70: ( createWindowExprModelAfter )?
                if ( stream_createWindowExprModelAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_createWindowExprModelAfter.nextTree());

                }
                stream_createWindowExprModelAfter.reset();
                // EsperEPL2Grammar.g:615:98: ( createWindowColumnList )?
                if ( stream_createWindowColumnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_createWindowColumnList.nextTree());

                }
                stream_createWindowColumnList.reset();
                // EsperEPL2Grammar.g:616:5: ^( INSERT ( expression )? )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot(stream_INSERT.nextNode(), root_2);

                // EsperEPL2Grammar.g:616:14: ( expression )?
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_2, stream_expression.nextTree());

                }
                stream_expression.reset();

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 617:3: -> ^( CREATE_WINDOW_EXPR $i ( viewExpression )* ( $ru)? ( $ri)? ( createWindowExprModelAfter )? ( createWindowColumnList )? )
            {
                // EsperEPL2Grammar.g:617:6: ^( CREATE_WINDOW_EXPR $i ( viewExpression )* ( $ru)? ( $ri)? ( createWindowExprModelAfter )? ( createWindowColumnList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_WINDOW_EXPR, "CREATE_WINDOW_EXPR"), root_1);

                adaptor.addChild(root_1, stream_i.nextNode());
                // EsperEPL2Grammar.g:617:30: ( viewExpression )*
                while ( stream_viewExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_viewExpression.nextTree());

                }
                stream_viewExpression.reset();
                // EsperEPL2Grammar.g:617:46: ( $ru)?
                if ( stream_ru.hasNext() ) {
                    adaptor.addChild(root_1, stream_ru.nextNode());

                }
                stream_ru.reset();
                // EsperEPL2Grammar.g:617:51: ( $ri)?
                if ( stream_ri.hasNext() ) {
                    adaptor.addChild(root_1, stream_ri.nextNode());

                }
                stream_ri.reset();
                // EsperEPL2Grammar.g:617:56: ( createWindowExprModelAfter )?
                if ( stream_createWindowExprModelAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_createWindowExprModelAfter.nextTree());

                }
                stream_createWindowExprModelAfter.reset();
                // EsperEPL2Grammar.g:617:84: ( createWindowColumnList )?
                if ( stream_createWindowColumnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_createWindowColumnList.nextTree());

                }
                stream_createWindowColumnList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "createWindowExpr"

    public static class createWindowExprModelAfter_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "createWindowExprModelAfter"
    // EsperEPL2Grammar.g:620:1: createWindowExprModelAfter : ( SELECT createSelectionList FROM )? classIdentifier ;
    public final EsperEPL2GrammarParser.createWindowExprModelAfter_return createWindowExprModelAfter() throws RecognitionException {
        EsperEPL2GrammarParser.createWindowExprModelAfter_return retval = new EsperEPL2GrammarParser.createWindowExprModelAfter_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token SELECT119=null;
        Token FROM121=null;
        EsperEPL2GrammarParser.createSelectionList_return createSelectionList120 = null;

        EsperEPL2GrammarParser.classIdentifier_return classIdentifier122 = null;


        CommonTree SELECT119_tree=null;
        CommonTree FROM121_tree=null;

        try {
            // EsperEPL2Grammar.g:621:2: ( ( SELECT createSelectionList FROM )? classIdentifier )
            // EsperEPL2Grammar.g:621:4: ( SELECT createSelectionList FROM )? classIdentifier
            {
            root_0 = (CommonTree)adaptor.nil();

            // EsperEPL2Grammar.g:621:4: ( SELECT createSelectionList FROM )?
            int alt42=2;
            int LA42_0 = input.LA(1);

            if ( (LA42_0==SELECT) ) {
                alt42=1;
            }
            switch (alt42) {
                case 1 :
                    // EsperEPL2Grammar.g:621:5: SELECT createSelectionList FROM
                    {
                    SELECT119=(Token)match(input,SELECT,FOLLOW_SELECT_in_createWindowExprModelAfter2520); if (state.failed) return retval;
                    pushFollow(FOLLOW_createSelectionList_in_createWindowExprModelAfter2523);
                    createSelectionList120=createSelectionList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createSelectionList120.getTree());
                    FROM121=(Token)match(input,FROM,FOLLOW_FROM_in_createWindowExprModelAfter2525); if (state.failed) return retval;

                    }
                    break;

            }

            pushFollow(FOLLOW_classIdentifier_in_createWindowExprModelAfter2530);
            classIdentifier122=classIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier122.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "createWindowExprModelAfter"

    public static class createVariableExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "createVariableExpr"
    // EsperEPL2Grammar.g:624:1: createVariableExpr : CREATE VARIABLE t= IDENT n= IDENT ( EQUALS expression )? -> ^( CREATE_VARIABLE_EXPR $t $n ( expression )? ) ;
    public final EsperEPL2GrammarParser.createVariableExpr_return createVariableExpr() throws RecognitionException {
        EsperEPL2GrammarParser.createVariableExpr_return retval = new EsperEPL2GrammarParser.createVariableExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token t=null;
        Token n=null;
        Token CREATE123=null;
        Token VARIABLE124=null;
        Token EQUALS125=null;
        EsperEPL2GrammarParser.expression_return expression126 = null;


        CommonTree t_tree=null;
        CommonTree n_tree=null;
        CommonTree CREATE123_tree=null;
        CommonTree VARIABLE124_tree=null;
        CommonTree EQUALS125_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_CREATE=new RewriteRuleTokenStream(adaptor,"token CREATE");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleTokenStream stream_VARIABLE=new RewriteRuleTokenStream(adaptor,"token VARIABLE");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            // EsperEPL2Grammar.g:625:2: ( CREATE VARIABLE t= IDENT n= IDENT ( EQUALS expression )? -> ^( CREATE_VARIABLE_EXPR $t $n ( expression )? ) )
            // EsperEPL2Grammar.g:625:4: CREATE VARIABLE t= IDENT n= IDENT ( EQUALS expression )?
            {
            CREATE123=(Token)match(input,CREATE,FOLLOW_CREATE_in_createVariableExpr2543); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CREATE.add(CREATE123);

            VARIABLE124=(Token)match(input,VARIABLE,FOLLOW_VARIABLE_in_createVariableExpr2545); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_VARIABLE.add(VARIABLE124);

            t=(Token)match(input,IDENT,FOLLOW_IDENT_in_createVariableExpr2549); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(t);

            n=(Token)match(input,IDENT,FOLLOW_IDENT_in_createVariableExpr2553); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(n);

            // EsperEPL2Grammar.g:625:36: ( EQUALS expression )?
            int alt43=2;
            int LA43_0 = input.LA(1);

            if ( (LA43_0==EQUALS) ) {
                alt43=1;
            }
            switch (alt43) {
                case 1 :
                    // EsperEPL2Grammar.g:625:37: EQUALS expression
                    {
                    EQUALS125=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_createVariableExpr2556); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS125);

                    pushFollow(FOLLOW_expression_in_createVariableExpr2558);
                    expression126=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression126.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: n, expression, t
            // token labels: t, n
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_t=new RewriteRuleTokenStream(adaptor,"token t",t);
            RewriteRuleTokenStream stream_n=new RewriteRuleTokenStream(adaptor,"token n",n);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 626:3: -> ^( CREATE_VARIABLE_EXPR $t $n ( expression )? )
            {
                // EsperEPL2Grammar.g:626:6: ^( CREATE_VARIABLE_EXPR $t $n ( expression )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_VARIABLE_EXPR, "CREATE_VARIABLE_EXPR"), root_1);

                adaptor.addChild(root_1, stream_t.nextNode());
                adaptor.addChild(root_1, stream_n.nextNode());
                // EsperEPL2Grammar.g:626:35: ( expression )?
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());

                }
                stream_expression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "createVariableExpr"

    public static class createWindowColumnList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "createWindowColumnList"
    // EsperEPL2Grammar.g:629:1: createWindowColumnList : createWindowColumnListElement ( COMMA createWindowColumnListElement )* -> ^( CREATE_WINDOW_COL_TYPE_LIST ( createWindowColumnListElement )+ ) ;
    public final EsperEPL2GrammarParser.createWindowColumnList_return createWindowColumnList() throws RecognitionException {
        EsperEPL2GrammarParser.createWindowColumnList_return retval = new EsperEPL2GrammarParser.createWindowColumnList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA128=null;
        EsperEPL2GrammarParser.createWindowColumnListElement_return createWindowColumnListElement127 = null;

        EsperEPL2GrammarParser.createWindowColumnListElement_return createWindowColumnListElement129 = null;


        CommonTree COMMA128_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_createWindowColumnListElement=new RewriteRuleSubtreeStream(adaptor,"rule createWindowColumnListElement");
         paraphrases.push("create window column list"); 
        try {
            // EsperEPL2Grammar.g:632:2: ( createWindowColumnListElement ( COMMA createWindowColumnListElement )* -> ^( CREATE_WINDOW_COL_TYPE_LIST ( createWindowColumnListElement )+ ) )
            // EsperEPL2Grammar.g:632:4: createWindowColumnListElement ( COMMA createWindowColumnListElement )*
            {
            pushFollow(FOLLOW_createWindowColumnListElement_in_createWindowColumnList2601);
            createWindowColumnListElement127=createWindowColumnListElement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_createWindowColumnListElement.add(createWindowColumnListElement127.getTree());
            // EsperEPL2Grammar.g:632:34: ( COMMA createWindowColumnListElement )*
            loop44:
            do {
                int alt44=2;
                int LA44_0 = input.LA(1);

                if ( (LA44_0==COMMA) ) {
                    alt44=1;
                }


                switch (alt44) {
            	case 1 :
            	    // EsperEPL2Grammar.g:632:35: COMMA createWindowColumnListElement
            	    {
            	    COMMA128=(Token)match(input,COMMA,FOLLOW_COMMA_in_createWindowColumnList2604); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA128);

            	    pushFollow(FOLLOW_createWindowColumnListElement_in_createWindowColumnList2606);
            	    createWindowColumnListElement129=createWindowColumnListElement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_createWindowColumnListElement.add(createWindowColumnListElement129.getTree());

            	    }
            	    break;

            	default :
            	    break loop44;
                }
            } while (true);



            // AST REWRITE
            // elements: createWindowColumnListElement
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 633:3: -> ^( CREATE_WINDOW_COL_TYPE_LIST ( createWindowColumnListElement )+ )
            {
                // EsperEPL2Grammar.g:633:6: ^( CREATE_WINDOW_COL_TYPE_LIST ( createWindowColumnListElement )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_WINDOW_COL_TYPE_LIST, "CREATE_WINDOW_COL_TYPE_LIST"), root_1);

                if ( !(stream_createWindowColumnListElement.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_createWindowColumnListElement.hasNext() ) {
                    adaptor.addChild(root_1, stream_createWindowColumnListElement.nextTree());

                }
                stream_createWindowColumnListElement.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "createWindowColumnList"

    public static class createWindowColumnListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "createWindowColumnListElement"
    // EsperEPL2Grammar.g:636:1: createWindowColumnListElement : name= IDENT type= IDENT -> ^( CREATE_WINDOW_COL_TYPE $name $type) ;
    public final EsperEPL2GrammarParser.createWindowColumnListElement_return createWindowColumnListElement() throws RecognitionException {
        EsperEPL2GrammarParser.createWindowColumnListElement_return retval = new EsperEPL2GrammarParser.createWindowColumnListElement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token name=null;
        Token type=null;

        CommonTree name_tree=null;
        CommonTree type_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");

        try {
            // EsperEPL2Grammar.g:637:2: (name= IDENT type= IDENT -> ^( CREATE_WINDOW_COL_TYPE $name $type) )
            // EsperEPL2Grammar.g:637:7: name= IDENT type= IDENT
            {
            name=(Token)match(input,IDENT,FOLLOW_IDENT_in_createWindowColumnListElement2636); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(name);

            type=(Token)match(input,IDENT,FOLLOW_IDENT_in_createWindowColumnListElement2640); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(type);



            // AST REWRITE
            // elements: type, name
            // token labels: name, type
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_name=new RewriteRuleTokenStream(adaptor,"token name",name);
            RewriteRuleTokenStream stream_type=new RewriteRuleTokenStream(adaptor,"token type",type);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 638:3: -> ^( CREATE_WINDOW_COL_TYPE $name $type)
            {
                // EsperEPL2Grammar.g:638:6: ^( CREATE_WINDOW_COL_TYPE $name $type)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_WINDOW_COL_TYPE, "CREATE_WINDOW_COL_TYPE"), root_1);

                adaptor.addChild(root_1, stream_name.nextNode());
                adaptor.addChild(root_1, stream_type.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "createWindowColumnListElement"

    public static class createSelectionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "createSelectionList"
    // EsperEPL2Grammar.g:641:1: createSelectionList : createSelectionListElement ( COMMA createSelectionListElement )* -> ^( CREATE_WINDOW_SELECT_EXPR ( createSelectionListElement )+ ) ;
    public final EsperEPL2GrammarParser.createSelectionList_return createSelectionList() throws RecognitionException {
        EsperEPL2GrammarParser.createSelectionList_return retval = new EsperEPL2GrammarParser.createSelectionList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA131=null;
        EsperEPL2GrammarParser.createSelectionListElement_return createSelectionListElement130 = null;

        EsperEPL2GrammarParser.createSelectionListElement_return createSelectionListElement132 = null;


        CommonTree COMMA131_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_createSelectionListElement=new RewriteRuleSubtreeStream(adaptor,"rule createSelectionListElement");
         paraphrases.push("select clause"); 
        try {
            // EsperEPL2Grammar.g:644:2: ( createSelectionListElement ( COMMA createSelectionListElement )* -> ^( CREATE_WINDOW_SELECT_EXPR ( createSelectionListElement )+ ) )
            // EsperEPL2Grammar.g:644:4: createSelectionListElement ( COMMA createSelectionListElement )*
            {
            pushFollow(FOLLOW_createSelectionListElement_in_createSelectionList2678);
            createSelectionListElement130=createSelectionListElement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_createSelectionListElement.add(createSelectionListElement130.getTree());
            // EsperEPL2Grammar.g:644:31: ( COMMA createSelectionListElement )*
            loop45:
            do {
                int alt45=2;
                int LA45_0 = input.LA(1);

                if ( (LA45_0==COMMA) ) {
                    alt45=1;
                }


                switch (alt45) {
            	case 1 :
            	    // EsperEPL2Grammar.g:644:32: COMMA createSelectionListElement
            	    {
            	    COMMA131=(Token)match(input,COMMA,FOLLOW_COMMA_in_createSelectionList2681); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA131);

            	    pushFollow(FOLLOW_createSelectionListElement_in_createSelectionList2683);
            	    createSelectionListElement132=createSelectionListElement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_createSelectionListElement.add(createSelectionListElement132.getTree());

            	    }
            	    break;

            	default :
            	    break loop45;
                }
            } while (true);



            // AST REWRITE
            // elements: createSelectionListElement
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 645:3: -> ^( CREATE_WINDOW_SELECT_EXPR ( createSelectionListElement )+ )
            {
                // EsperEPL2Grammar.g:645:6: ^( CREATE_WINDOW_SELECT_EXPR ( createSelectionListElement )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_WINDOW_SELECT_EXPR, "CREATE_WINDOW_SELECT_EXPR"), root_1);

                if ( !(stream_createSelectionListElement.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_createSelectionListElement.hasNext() ) {
                    adaptor.addChild(root_1, stream_createSelectionListElement.nextTree());

                }
                stream_createSelectionListElement.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "createSelectionList"

    public static class createSelectionListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "createSelectionListElement"
    // EsperEPL2Grammar.g:648:1: createSelectionListElement : (s= STAR -> WILDCARD_SELECT[$s] | eventProperty ( AS i= IDENT )? -> ^( SELECTION_ELEMENT_EXPR eventProperty ( $i)? ) | constant AS i= IDENT -> ^( SELECTION_ELEMENT_EXPR constant ( $i)? ) );
    public final EsperEPL2GrammarParser.createSelectionListElement_return createSelectionListElement() throws RecognitionException {
        EsperEPL2GrammarParser.createSelectionListElement_return retval = new EsperEPL2GrammarParser.createSelectionListElement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token s=null;
        Token i=null;
        Token AS134=null;
        Token AS136=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty133 = null;

        EsperEPL2GrammarParser.constant_return constant135 = null;


        CommonTree s_tree=null;
        CommonTree i_tree=null;
        CommonTree AS134_tree=null;
        CommonTree AS136_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleSubtreeStream stream_constant=new RewriteRuleSubtreeStream(adaptor,"rule constant");
        RewriteRuleSubtreeStream stream_eventProperty=new RewriteRuleSubtreeStream(adaptor,"rule eventProperty");
        try {
            // EsperEPL2Grammar.g:649:2: (s= STAR -> WILDCARD_SELECT[$s] | eventProperty ( AS i= IDENT )? -> ^( SELECTION_ELEMENT_EXPR eventProperty ( $i)? ) | constant AS i= IDENT -> ^( SELECTION_ELEMENT_EXPR constant ( $i)? ) )
            int alt47=3;
            switch ( input.LA(1) ) {
            case STAR:
                {
                alt47=1;
                }
                break;
            case WINDOW:
            case ESCAPE:
            case EVERY_EXPR:
            case SUM:
            case AVG:
            case MAX:
            case MIN:
            case COALESCE:
            case MEDIAN:
            case STDDEV:
            case AVEDEV:
            case COUNT:
            case OUTER:
            case JOIN:
            case LEFT:
            case RIGHT:
            case FULL:
            case EVENTS:
            case FIRST:
            case LAST:
            case UNIDIRECTIONAL:
            case RETAINUNION:
            case RETAININTERSECTION:
            case PATTERN:
            case SQL:
            case METADATASQL:
            case PREVIOUS:
            case PRIOR:
            case WEEKDAY:
            case LW:
            case INSTANCEOF:
            case CAST:
            case SNAPSHOT:
            case VARIABLE:
            case UNTIL:
            case AT:
            case IDENT:
            case TICKED_STRING_LITERAL:
                {
                alt47=2;
                }
                break;
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case NUM_DOUBLE:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case PLUS:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt47=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 47, 0, input);

                throw nvae;
            }

            switch (alt47) {
                case 1 :
                    // EsperEPL2Grammar.g:649:7: s= STAR
                    {
                    s=(Token)match(input,STAR,FOLLOW_STAR_in_createSelectionListElement2712); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STAR.add(s);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 650:3: -> WILDCARD_SELECT[$s]
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(WILDCARD_SELECT, s));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:651:4: eventProperty ( AS i= IDENT )?
                    {
                    pushFollow(FOLLOW_eventProperty_in_createSelectionListElement2724);
                    eventProperty133=eventProperty();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_eventProperty.add(eventProperty133.getTree());
                    // EsperEPL2Grammar.g:651:18: ( AS i= IDENT )?
                    int alt46=2;
                    int LA46_0 = input.LA(1);

                    if ( (LA46_0==AS) ) {
                        alt46=1;
                    }
                    switch (alt46) {
                        case 1 :
                            // EsperEPL2Grammar.g:651:19: AS i= IDENT
                            {
                            AS134=(Token)match(input,AS,FOLLOW_AS_in_createSelectionListElement2727); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_AS.add(AS134);

                            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_createSelectionListElement2731); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IDENT.add(i);


                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: i, eventProperty
                    // token labels: i
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 652:3: -> ^( SELECTION_ELEMENT_EXPR eventProperty ( $i)? )
                    {
                        // EsperEPL2Grammar.g:652:6: ^( SELECTION_ELEMENT_EXPR eventProperty ( $i)? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);

                        adaptor.addChild(root_1, stream_eventProperty.nextTree());
                        // EsperEPL2Grammar.g:652:45: ( $i)?
                        if ( stream_i.hasNext() ) {
                            adaptor.addChild(root_1, stream_i.nextNode());

                        }
                        stream_i.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:653:4: constant AS i= IDENT
                    {
                    pushFollow(FOLLOW_constant_in_createSelectionListElement2752);
                    constant135=constant();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_constant.add(constant135.getTree());
                    AS136=(Token)match(input,AS,FOLLOW_AS_in_createSelectionListElement2754); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS136);

                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_createSelectionListElement2758); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);



                    // AST REWRITE
                    // elements: constant, i
                    // token labels: i
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 654:3: -> ^( SELECTION_ELEMENT_EXPR constant ( $i)? )
                    {
                        // EsperEPL2Grammar.g:654:6: ^( SELECTION_ELEMENT_EXPR constant ( $i)? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);

                        adaptor.addChild(root_1, stream_constant.nextTree());
                        // EsperEPL2Grammar.g:654:40: ( $i)?
                        if ( stream_i.hasNext() ) {
                            adaptor.addChild(root_1, stream_i.nextNode());

                        }
                        stream_i.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "createSelectionListElement"

    public static class insertIntoExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "insertIntoExpr"
    // EsperEPL2Grammar.g:657:1: insertIntoExpr : (s= ISTREAM | s= RSTREAM )? INTO i= IDENT ( insertIntoColumnList )? -> ^( INSERTINTO_EXPR ( $s)? $i ( insertIntoColumnList )? ) ;
    public final EsperEPL2GrammarParser.insertIntoExpr_return insertIntoExpr() throws RecognitionException {
        EsperEPL2GrammarParser.insertIntoExpr_return retval = new EsperEPL2GrammarParser.insertIntoExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token s=null;
        Token i=null;
        Token INTO137=null;
        EsperEPL2GrammarParser.insertIntoColumnList_return insertIntoColumnList138 = null;


        CommonTree s_tree=null;
        CommonTree i_tree=null;
        CommonTree INTO137_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_ISTREAM=new RewriteRuleTokenStream(adaptor,"token ISTREAM");
        RewriteRuleTokenStream stream_INTO=new RewriteRuleTokenStream(adaptor,"token INTO");
        RewriteRuleTokenStream stream_RSTREAM=new RewriteRuleTokenStream(adaptor,"token RSTREAM");
        RewriteRuleSubtreeStream stream_insertIntoColumnList=new RewriteRuleSubtreeStream(adaptor,"rule insertIntoColumnList");
         paraphrases.push("insert-into clause"); 
        try {
            // EsperEPL2Grammar.g:660:2: ( (s= ISTREAM | s= RSTREAM )? INTO i= IDENT ( insertIntoColumnList )? -> ^( INSERTINTO_EXPR ( $s)? $i ( insertIntoColumnList )? ) )
            // EsperEPL2Grammar.g:660:4: (s= ISTREAM | s= RSTREAM )? INTO i= IDENT ( insertIntoColumnList )?
            {
            // EsperEPL2Grammar.g:660:4: (s= ISTREAM | s= RSTREAM )?
            int alt48=3;
            int LA48_0 = input.LA(1);

            if ( (LA48_0==ISTREAM) ) {
                alt48=1;
            }
            else if ( (LA48_0==RSTREAM) ) {
                alt48=2;
            }
            switch (alt48) {
                case 1 :
                    // EsperEPL2Grammar.g:660:5: s= ISTREAM
                    {
                    s=(Token)match(input,ISTREAM,FOLLOW_ISTREAM_in_insertIntoExpr2797); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ISTREAM.add(s);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:660:17: s= RSTREAM
                    {
                    s=(Token)match(input,RSTREAM,FOLLOW_RSTREAM_in_insertIntoExpr2803); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RSTREAM.add(s);


                    }
                    break;

            }

            INTO137=(Token)match(input,INTO,FOLLOW_INTO_in_insertIntoExpr2807); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_INTO.add(INTO137);

            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_insertIntoExpr2811); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);

            // EsperEPL2Grammar.g:660:42: ( insertIntoColumnList )?
            int alt49=2;
            int LA49_0 = input.LA(1);

            if ( (LA49_0==LPAREN) ) {
                alt49=1;
            }
            switch (alt49) {
                case 1 :
                    // EsperEPL2Grammar.g:660:43: insertIntoColumnList
                    {
                    pushFollow(FOLLOW_insertIntoColumnList_in_insertIntoExpr2814);
                    insertIntoColumnList138=insertIntoColumnList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_insertIntoColumnList.add(insertIntoColumnList138.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: insertIntoColumnList, i, s
            // token labels: s, i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 661:3: -> ^( INSERTINTO_EXPR ( $s)? $i ( insertIntoColumnList )? )
            {
                // EsperEPL2Grammar.g:661:6: ^( INSERTINTO_EXPR ( $s)? $i ( insertIntoColumnList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(INSERTINTO_EXPR, "INSERTINTO_EXPR"), root_1);

                // EsperEPL2Grammar.g:661:24: ( $s)?
                if ( stream_s.hasNext() ) {
                    adaptor.addChild(root_1, stream_s.nextNode());

                }
                stream_s.reset();
                adaptor.addChild(root_1, stream_i.nextNode());
                // EsperEPL2Grammar.g:661:31: ( insertIntoColumnList )?
                if ( stream_insertIntoColumnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_insertIntoColumnList.nextTree());

                }
                stream_insertIntoColumnList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "insertIntoExpr"

    public static class insertIntoColumnList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "insertIntoColumnList"
    // EsperEPL2Grammar.g:664:1: insertIntoColumnList : LPAREN IDENT ( COMMA IDENT )* RPAREN -> ^( INSERTINTO_EXPRCOL ( IDENT )* ) ;
    public final EsperEPL2GrammarParser.insertIntoColumnList_return insertIntoColumnList() throws RecognitionException {
        EsperEPL2GrammarParser.insertIntoColumnList_return retval = new EsperEPL2GrammarParser.insertIntoColumnList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LPAREN139=null;
        Token IDENT140=null;
        Token COMMA141=null;
        Token IDENT142=null;
        Token RPAREN143=null;

        CommonTree LPAREN139_tree=null;
        CommonTree IDENT140_tree=null;
        CommonTree COMMA141_tree=null;
        CommonTree IDENT142_tree=null;
        CommonTree RPAREN143_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");

        try {
            // EsperEPL2Grammar.g:665:2: ( LPAREN IDENT ( COMMA IDENT )* RPAREN -> ^( INSERTINTO_EXPRCOL ( IDENT )* ) )
            // EsperEPL2Grammar.g:665:5: LPAREN IDENT ( COMMA IDENT )* RPAREN
            {
            LPAREN139=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_insertIntoColumnList2848); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN139);

            IDENT140=(Token)match(input,IDENT,FOLLOW_IDENT_in_insertIntoColumnList2850); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(IDENT140);

            // EsperEPL2Grammar.g:665:18: ( COMMA IDENT )*
            loop50:
            do {
                int alt50=2;
                int LA50_0 = input.LA(1);

                if ( (LA50_0==COMMA) ) {
                    alt50=1;
                }


                switch (alt50) {
            	case 1 :
            	    // EsperEPL2Grammar.g:665:19: COMMA IDENT
            	    {
            	    COMMA141=(Token)match(input,COMMA,FOLLOW_COMMA_in_insertIntoColumnList2853); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA141);

            	    IDENT142=(Token)match(input,IDENT,FOLLOW_IDENT_in_insertIntoColumnList2855); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_IDENT.add(IDENT142);


            	    }
            	    break;

            	default :
            	    break loop50;
                }
            } while (true);

            RPAREN143=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_insertIntoColumnList2859); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN143);



            // AST REWRITE
            // elements: IDENT
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 666:3: -> ^( INSERTINTO_EXPRCOL ( IDENT )* )
            {
                // EsperEPL2Grammar.g:666:6: ^( INSERTINTO_EXPRCOL ( IDENT )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(INSERTINTO_EXPRCOL, "INSERTINTO_EXPRCOL"), root_1);

                // EsperEPL2Grammar.g:666:27: ( IDENT )*
                while ( stream_IDENT.hasNext() ) {
                    adaptor.addChild(root_1, stream_IDENT.nextNode());

                }
                stream_IDENT.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "insertIntoColumnList"

    public static class fromClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "fromClause"
    // EsperEPL2Grammar.g:669:1: fromClause : streamExpression ( regularJoin | outerJoinList ) ;
    public final EsperEPL2GrammarParser.fromClause_return fromClause() throws RecognitionException {
        EsperEPL2GrammarParser.fromClause_return retval = new EsperEPL2GrammarParser.fromClause_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.streamExpression_return streamExpression144 = null;

        EsperEPL2GrammarParser.regularJoin_return regularJoin145 = null;

        EsperEPL2GrammarParser.outerJoinList_return outerJoinList146 = null;



         paraphrases.push("from clause"); 
        try {
            // EsperEPL2Grammar.g:672:2: ( streamExpression ( regularJoin | outerJoinList ) )
            // EsperEPL2Grammar.g:672:4: streamExpression ( regularJoin | outerJoinList )
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_streamExpression_in_fromClause2894);
            streamExpression144=streamExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, streamExpression144.getTree());
            // EsperEPL2Grammar.g:672:21: ( regularJoin | outerJoinList )
            int alt51=2;
            int LA51_0 = input.LA(1);

            if ( (LA51_0==EOF||LA51_0==WHERE||(LA51_0>=GROUP && LA51_0<=HAVING)||LA51_0==OUTPUT||LA51_0==ORDER||LA51_0==ROW_LIMIT_EXPR||LA51_0==COMMA) ) {
                alt51=1;
            }
            else if ( ((LA51_0>=INNER && LA51_0<=FULL)) ) {
                alt51=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 51, 0, input);

                throw nvae;
            }
            switch (alt51) {
                case 1 :
                    // EsperEPL2Grammar.g:672:22: regularJoin
                    {
                    pushFollow(FOLLOW_regularJoin_in_fromClause2897);
                    regularJoin145=regularJoin();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, regularJoin145.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:672:36: outerJoinList
                    {
                    pushFollow(FOLLOW_outerJoinList_in_fromClause2901);
                    outerJoinList146=outerJoinList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoinList146.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "fromClause"

    public static class regularJoin_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "regularJoin"
    // EsperEPL2Grammar.g:675:1: regularJoin : ( COMMA streamExpression )* ;
    public final EsperEPL2GrammarParser.regularJoin_return regularJoin() throws RecognitionException {
        EsperEPL2GrammarParser.regularJoin_return retval = new EsperEPL2GrammarParser.regularJoin_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA147=null;
        EsperEPL2GrammarParser.streamExpression_return streamExpression148 = null;


        CommonTree COMMA147_tree=null;

        try {
            // EsperEPL2Grammar.g:676:2: ( ( COMMA streamExpression )* )
            // EsperEPL2Grammar.g:676:4: ( COMMA streamExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            // EsperEPL2Grammar.g:676:4: ( COMMA streamExpression )*
            loop52:
            do {
                int alt52=2;
                int LA52_0 = input.LA(1);

                if ( (LA52_0==COMMA) ) {
                    alt52=1;
                }


                switch (alt52) {
            	case 1 :
            	    // EsperEPL2Grammar.g:676:5: COMMA streamExpression
            	    {
            	    COMMA147=(Token)match(input,COMMA,FOLLOW_COMMA_in_regularJoin2915); if (state.failed) return retval;
            	    pushFollow(FOLLOW_streamExpression_in_regularJoin2918);
            	    streamExpression148=streamExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, streamExpression148.getTree());

            	    }
            	    break;

            	default :
            	    break loop52;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "regularJoin"

    public static class outerJoinList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "outerJoinList"
    // EsperEPL2Grammar.g:679:1: outerJoinList : outerJoin ( outerJoin )* ;
    public final EsperEPL2GrammarParser.outerJoinList_return outerJoinList() throws RecognitionException {
        EsperEPL2GrammarParser.outerJoinList_return retval = new EsperEPL2GrammarParser.outerJoinList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.outerJoin_return outerJoin149 = null;

        EsperEPL2GrammarParser.outerJoin_return outerJoin150 = null;



        try {
            // EsperEPL2Grammar.g:680:2: ( outerJoin ( outerJoin )* )
            // EsperEPL2Grammar.g:680:4: outerJoin ( outerJoin )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_outerJoin_in_outerJoinList2932);
            outerJoin149=outerJoin();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoin149.getTree());
            // EsperEPL2Grammar.g:680:14: ( outerJoin )*
            loop53:
            do {
                int alt53=2;
                int LA53_0 = input.LA(1);

                if ( ((LA53_0>=INNER && LA53_0<=FULL)) ) {
                    alt53=1;
                }


                switch (alt53) {
            	case 1 :
            	    // EsperEPL2Grammar.g:680:15: outerJoin
            	    {
            	    pushFollow(FOLLOW_outerJoin_in_outerJoinList2935);
            	    outerJoin150=outerJoin();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoin150.getTree());

            	    }
            	    break;

            	default :
            	    break loop53;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "outerJoinList"

    public static class outerJoin_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "outerJoin"
    // EsperEPL2Grammar.g:683:1: outerJoin : ( ( (tl= LEFT | tr= RIGHT | tf= FULL ) OUTER )? | (i= INNER ) ) JOIN streamExpression outerJoinIdent -> {$i != null}? streamExpression ^( INNERJOIN_EXPR outerJoinIdent ) -> {$tl != null}? streamExpression ^( LEFT_OUTERJOIN_EXPR outerJoinIdent ) -> {$tr != null}? streamExpression ^( RIGHT_OUTERJOIN_EXPR outerJoinIdent ) -> streamExpression ^( FULL_OUTERJOIN_EXPR outerJoinIdent ) ;
    public final EsperEPL2GrammarParser.outerJoin_return outerJoin() throws RecognitionException {
        EsperEPL2GrammarParser.outerJoin_return retval = new EsperEPL2GrammarParser.outerJoin_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token tl=null;
        Token tr=null;
        Token tf=null;
        Token i=null;
        Token OUTER151=null;
        Token JOIN152=null;
        EsperEPL2GrammarParser.streamExpression_return streamExpression153 = null;

        EsperEPL2GrammarParser.outerJoinIdent_return outerJoinIdent154 = null;


        CommonTree tl_tree=null;
        CommonTree tr_tree=null;
        CommonTree tf_tree=null;
        CommonTree i_tree=null;
        CommonTree OUTER151_tree=null;
        CommonTree JOIN152_tree=null;
        RewriteRuleTokenStream stream_OUTER=new RewriteRuleTokenStream(adaptor,"token OUTER");
        RewriteRuleTokenStream stream_RIGHT=new RewriteRuleTokenStream(adaptor,"token RIGHT");
        RewriteRuleTokenStream stream_FULL=new RewriteRuleTokenStream(adaptor,"token FULL");
        RewriteRuleTokenStream stream_INNER=new RewriteRuleTokenStream(adaptor,"token INNER");
        RewriteRuleTokenStream stream_LEFT=new RewriteRuleTokenStream(adaptor,"token LEFT");
        RewriteRuleTokenStream stream_JOIN=new RewriteRuleTokenStream(adaptor,"token JOIN");
        RewriteRuleSubtreeStream stream_streamExpression=new RewriteRuleSubtreeStream(adaptor,"rule streamExpression");
        RewriteRuleSubtreeStream stream_outerJoinIdent=new RewriteRuleSubtreeStream(adaptor,"rule outerJoinIdent");
         paraphrases.push("outer join"); 
        try {
            // EsperEPL2Grammar.g:686:2: ( ( ( (tl= LEFT | tr= RIGHT | tf= FULL ) OUTER )? | (i= INNER ) ) JOIN streamExpression outerJoinIdent -> {$i != null}? streamExpression ^( INNERJOIN_EXPR outerJoinIdent ) -> {$tl != null}? streamExpression ^( LEFT_OUTERJOIN_EXPR outerJoinIdent ) -> {$tr != null}? streamExpression ^( RIGHT_OUTERJOIN_EXPR outerJoinIdent ) -> streamExpression ^( FULL_OUTERJOIN_EXPR outerJoinIdent ) )
            // EsperEPL2Grammar.g:686:4: ( ( (tl= LEFT | tr= RIGHT | tf= FULL ) OUTER )? | (i= INNER ) ) JOIN streamExpression outerJoinIdent
            {
            // EsperEPL2Grammar.g:686:4: ( ( (tl= LEFT | tr= RIGHT | tf= FULL ) OUTER )? | (i= INNER ) )
            int alt56=2;
            int LA56_0 = input.LA(1);

            if ( ((LA56_0>=JOIN && LA56_0<=FULL)) ) {
                alt56=1;
            }
            else if ( (LA56_0==INNER) ) {
                alt56=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 56, 0, input);

                throw nvae;
            }
            switch (alt56) {
                case 1 :
                    // EsperEPL2Grammar.g:687:14: ( (tl= LEFT | tr= RIGHT | tf= FULL ) OUTER )?
                    {
                    // EsperEPL2Grammar.g:687:14: ( (tl= LEFT | tr= RIGHT | tf= FULL ) OUTER )?
                    int alt55=2;
                    int LA55_0 = input.LA(1);

                    if ( ((LA55_0>=LEFT && LA55_0<=FULL)) ) {
                        alt55=1;
                    }
                    switch (alt55) {
                        case 1 :
                            // EsperEPL2Grammar.g:687:15: (tl= LEFT | tr= RIGHT | tf= FULL ) OUTER
                            {
                            // EsperEPL2Grammar.g:687:15: (tl= LEFT | tr= RIGHT | tf= FULL )
                            int alt54=3;
                            switch ( input.LA(1) ) {
                            case LEFT:
                                {
                                alt54=1;
                                }
                                break;
                            case RIGHT:
                                {
                                alt54=2;
                                }
                                break;
                            case FULL:
                                {
                                alt54=3;
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 54, 0, input);

                                throw nvae;
                            }

                            switch (alt54) {
                                case 1 :
                                    // EsperEPL2Grammar.g:687:16: tl= LEFT
                                    {
                                    tl=(Token)match(input,LEFT,FOLLOW_LEFT_in_outerJoin2978); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_LEFT.add(tl);


                                    }
                                    break;
                                case 2 :
                                    // EsperEPL2Grammar.g:687:24: tr= RIGHT
                                    {
                                    tr=(Token)match(input,RIGHT,FOLLOW_RIGHT_in_outerJoin2982); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_RIGHT.add(tr);


                                    }
                                    break;
                                case 3 :
                                    // EsperEPL2Grammar.g:687:33: tf= FULL
                                    {
                                    tf=(Token)match(input,FULL,FOLLOW_FULL_in_outerJoin2986); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_FULL.add(tf);


                                    }
                                    break;

                            }

                            OUTER151=(Token)match(input,OUTER,FOLLOW_OUTER_in_outerJoin2989); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_OUTER.add(OUTER151);


                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:688:14: (i= INNER )
                    {
                    // EsperEPL2Grammar.g:688:14: (i= INNER )
                    // EsperEPL2Grammar.g:688:15: i= INNER
                    {
                    i=(Token)match(input,INNER,FOLLOW_INNER_in_outerJoin3010); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INNER.add(i);


                    }


                    }
                    break;

            }

            JOIN152=(Token)match(input,JOIN,FOLLOW_JOIN_in_outerJoin3024); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_JOIN.add(JOIN152);

            pushFollow(FOLLOW_streamExpression_in_outerJoin3026);
            streamExpression153=streamExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_streamExpression.add(streamExpression153.getTree());
            pushFollow(FOLLOW_outerJoinIdent_in_outerJoin3028);
            outerJoinIdent154=outerJoinIdent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_outerJoinIdent.add(outerJoinIdent154.getTree());


            // AST REWRITE
            // elements: streamExpression, streamExpression, outerJoinIdent, outerJoinIdent, streamExpression, outerJoinIdent, streamExpression, outerJoinIdent
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 690:3: -> {$i != null}? streamExpression ^( INNERJOIN_EXPR outerJoinIdent )
            if (i != null) {
                adaptor.addChild(root_0, stream_streamExpression.nextTree());
                // EsperEPL2Grammar.g:690:37: ^( INNERJOIN_EXPR outerJoinIdent )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(INNERJOIN_EXPR, "INNERJOIN_EXPR"), root_1);

                adaptor.addChild(root_1, stream_outerJoinIdent.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 691:3: -> {$tl != null}? streamExpression ^( LEFT_OUTERJOIN_EXPR outerJoinIdent )
            if (tl != null) {
                adaptor.addChild(root_0, stream_streamExpression.nextTree());
                // EsperEPL2Grammar.g:691:38: ^( LEFT_OUTERJOIN_EXPR outerJoinIdent )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LEFT_OUTERJOIN_EXPR, "LEFT_OUTERJOIN_EXPR"), root_1);

                adaptor.addChild(root_1, stream_outerJoinIdent.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 692:3: -> {$tr != null}? streamExpression ^( RIGHT_OUTERJOIN_EXPR outerJoinIdent )
            if (tr != null) {
                adaptor.addChild(root_0, stream_streamExpression.nextTree());
                // EsperEPL2Grammar.g:692:38: ^( RIGHT_OUTERJOIN_EXPR outerJoinIdent )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(RIGHT_OUTERJOIN_EXPR, "RIGHT_OUTERJOIN_EXPR"), root_1);

                adaptor.addChild(root_1, stream_outerJoinIdent.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 693:3: -> streamExpression ^( FULL_OUTERJOIN_EXPR outerJoinIdent )
            {
                adaptor.addChild(root_0, stream_streamExpression.nextTree());
                // EsperEPL2Grammar.g:693:23: ^( FULL_OUTERJOIN_EXPR outerJoinIdent )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FULL_OUTERJOIN_EXPR, "FULL_OUTERJOIN_EXPR"), root_1);

                adaptor.addChild(root_1, stream_outerJoinIdent.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "outerJoin"

    public static class outerJoinIdent_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "outerJoinIdent"
    // EsperEPL2Grammar.g:696:1: outerJoinIdent : ON outerJoinIdentPair ( AND_EXPR outerJoinIdentPair )* ;
    public final EsperEPL2GrammarParser.outerJoinIdent_return outerJoinIdent() throws RecognitionException {
        EsperEPL2GrammarParser.outerJoinIdent_return retval = new EsperEPL2GrammarParser.outerJoinIdent_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token ON155=null;
        Token AND_EXPR157=null;
        EsperEPL2GrammarParser.outerJoinIdentPair_return outerJoinIdentPair156 = null;

        EsperEPL2GrammarParser.outerJoinIdentPair_return outerJoinIdentPair158 = null;


        CommonTree ON155_tree=null;
        CommonTree AND_EXPR157_tree=null;

        try {
            // EsperEPL2Grammar.g:697:2: ( ON outerJoinIdentPair ( AND_EXPR outerJoinIdentPair )* )
            // EsperEPL2Grammar.g:697:4: ON outerJoinIdentPair ( AND_EXPR outerJoinIdentPair )*
            {
            root_0 = (CommonTree)adaptor.nil();

            ON155=(Token)match(input,ON,FOLLOW_ON_in_outerJoinIdent3093); if (state.failed) return retval;
            pushFollow(FOLLOW_outerJoinIdentPair_in_outerJoinIdent3096);
            outerJoinIdentPair156=outerJoinIdentPair();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoinIdentPair156.getTree());
            // EsperEPL2Grammar.g:697:27: ( AND_EXPR outerJoinIdentPair )*
            loop57:
            do {
                int alt57=2;
                int LA57_0 = input.LA(1);

                if ( (LA57_0==AND_EXPR) ) {
                    alt57=1;
                }


                switch (alt57) {
            	case 1 :
            	    // EsperEPL2Grammar.g:697:28: AND_EXPR outerJoinIdentPair
            	    {
            	    AND_EXPR157=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_outerJoinIdent3099); if (state.failed) return retval;
            	    pushFollow(FOLLOW_outerJoinIdentPair_in_outerJoinIdent3102);
            	    outerJoinIdentPair158=outerJoinIdentPair();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoinIdentPair158.getTree());

            	    }
            	    break;

            	default :
            	    break loop57;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "outerJoinIdent"

    public static class outerJoinIdentPair_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "outerJoinIdentPair"
    // EsperEPL2Grammar.g:700:1: outerJoinIdentPair : eventProperty EQUALS eventProperty ;
    public final EsperEPL2GrammarParser.outerJoinIdentPair_return outerJoinIdentPair() throws RecognitionException {
        EsperEPL2GrammarParser.outerJoinIdentPair_return retval = new EsperEPL2GrammarParser.outerJoinIdentPair_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token EQUALS160=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty159 = null;

        EsperEPL2GrammarParser.eventProperty_return eventProperty161 = null;


        CommonTree EQUALS160_tree=null;

        try {
            // EsperEPL2Grammar.g:701:2: ( eventProperty EQUALS eventProperty )
            // EsperEPL2Grammar.g:701:4: eventProperty EQUALS eventProperty
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_eventProperty_in_outerJoinIdentPair3117);
            eventProperty159=eventProperty();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty159.getTree());
            EQUALS160=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_outerJoinIdentPair3119); if (state.failed) return retval;
            pushFollow(FOLLOW_eventProperty_in_outerJoinIdentPair3122);
            eventProperty161=eventProperty();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty161.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "outerJoinIdentPair"

    public static class whereClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "whereClause"
    // EsperEPL2Grammar.g:704:1: whereClause : evalOrExpression -> ^( WHERE_EXPR evalOrExpression ) ;
    public final EsperEPL2GrammarParser.whereClause_return whereClause() throws RecognitionException {
        EsperEPL2GrammarParser.whereClause_return retval = new EsperEPL2GrammarParser.whereClause_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.evalOrExpression_return evalOrExpression162 = null;


        RewriteRuleSubtreeStream stream_evalOrExpression=new RewriteRuleSubtreeStream(adaptor,"rule evalOrExpression");
         paraphrases.push("where clause"); 
        try {
            // EsperEPL2Grammar.g:707:2: ( evalOrExpression -> ^( WHERE_EXPR evalOrExpression ) )
            // EsperEPL2Grammar.g:707:4: evalOrExpression
            {
            pushFollow(FOLLOW_evalOrExpression_in_whereClause3144);
            evalOrExpression162=evalOrExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_evalOrExpression.add(evalOrExpression162.getTree());


            // AST REWRITE
            // elements: evalOrExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 708:3: -> ^( WHERE_EXPR evalOrExpression )
            {
                // EsperEPL2Grammar.g:708:6: ^( WHERE_EXPR evalOrExpression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WHERE_EXPR, "WHERE_EXPR"), root_1);

                adaptor.addChild(root_1, stream_evalOrExpression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "whereClause"

    public static class selectClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "selectClause"
    // EsperEPL2Grammar.g:711:1: selectClause : (s= RSTREAM | s= ISTREAM | s= IRSTREAM )? selectionList -> ^( SELECTION_EXPR ( $s)? selectionList ) ;
    public final EsperEPL2GrammarParser.selectClause_return selectClause() throws RecognitionException {
        EsperEPL2GrammarParser.selectClause_return retval = new EsperEPL2GrammarParser.selectClause_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token s=null;
        EsperEPL2GrammarParser.selectionList_return selectionList163 = null;


        CommonTree s_tree=null;
        RewriteRuleTokenStream stream_IRSTREAM=new RewriteRuleTokenStream(adaptor,"token IRSTREAM");
        RewriteRuleTokenStream stream_ISTREAM=new RewriteRuleTokenStream(adaptor,"token ISTREAM");
        RewriteRuleTokenStream stream_RSTREAM=new RewriteRuleTokenStream(adaptor,"token RSTREAM");
        RewriteRuleSubtreeStream stream_selectionList=new RewriteRuleSubtreeStream(adaptor,"rule selectionList");
         paraphrases.push("select clause"); 
        try {
            // EsperEPL2Grammar.g:714:2: ( (s= RSTREAM | s= ISTREAM | s= IRSTREAM )? selectionList -> ^( SELECTION_EXPR ( $s)? selectionList ) )
            // EsperEPL2Grammar.g:714:4: (s= RSTREAM | s= ISTREAM | s= IRSTREAM )? selectionList
            {
            // EsperEPL2Grammar.g:714:4: (s= RSTREAM | s= ISTREAM | s= IRSTREAM )?
            int alt58=4;
            switch ( input.LA(1) ) {
                case RSTREAM:
                    {
                    alt58=1;
                    }
                    break;
                case ISTREAM:
                    {
                    alt58=2;
                    }
                    break;
                case IRSTREAM:
                    {
                    alt58=3;
                    }
                    break;
            }

            switch (alt58) {
                case 1 :
                    // EsperEPL2Grammar.g:714:5: s= RSTREAM
                    {
                    s=(Token)match(input,RSTREAM,FOLLOW_RSTREAM_in_selectClause3180); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RSTREAM.add(s);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:714:17: s= ISTREAM
                    {
                    s=(Token)match(input,ISTREAM,FOLLOW_ISTREAM_in_selectClause3186); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ISTREAM.add(s);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:714:29: s= IRSTREAM
                    {
                    s=(Token)match(input,IRSTREAM,FOLLOW_IRSTREAM_in_selectClause3192); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IRSTREAM.add(s);


                    }
                    break;

            }

            pushFollow(FOLLOW_selectionList_in_selectClause3196);
            selectionList163=selectionList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_selectionList.add(selectionList163.getTree());


            // AST REWRITE
            // elements: s, selectionList
            // token labels: s
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 715:3: -> ^( SELECTION_EXPR ( $s)? selectionList )
            {
                // EsperEPL2Grammar.g:715:6: ^( SELECTION_EXPR ( $s)? selectionList )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_EXPR, "SELECTION_EXPR"), root_1);

                // EsperEPL2Grammar.g:715:23: ( $s)?
                if ( stream_s.hasNext() ) {
                    adaptor.addChild(root_1, stream_s.nextNode());

                }
                stream_s.reset();
                adaptor.addChild(root_1, stream_selectionList.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "selectClause"

    public static class selectionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "selectionList"
    // EsperEPL2Grammar.g:718:1: selectionList : selectionListElement ( COMMA selectionListElement )* ;
    public final EsperEPL2GrammarParser.selectionList_return selectionList() throws RecognitionException {
        EsperEPL2GrammarParser.selectionList_return retval = new EsperEPL2GrammarParser.selectionList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA165=null;
        EsperEPL2GrammarParser.selectionListElement_return selectionListElement164 = null;

        EsperEPL2GrammarParser.selectionListElement_return selectionListElement166 = null;


        CommonTree COMMA165_tree=null;

        try {
            // EsperEPL2Grammar.g:719:2: ( selectionListElement ( COMMA selectionListElement )* )
            // EsperEPL2Grammar.g:719:4: selectionListElement ( COMMA selectionListElement )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_selectionListElement_in_selectionList3223);
            selectionListElement164=selectionListElement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, selectionListElement164.getTree());
            // EsperEPL2Grammar.g:719:25: ( COMMA selectionListElement )*
            loop59:
            do {
                int alt59=2;
                int LA59_0 = input.LA(1);

                if ( (LA59_0==COMMA) ) {
                    alt59=1;
                }


                switch (alt59) {
            	case 1 :
            	    // EsperEPL2Grammar.g:719:26: COMMA selectionListElement
            	    {
            	    COMMA165=(Token)match(input,COMMA,FOLLOW_COMMA_in_selectionList3226); if (state.failed) return retval;
            	    pushFollow(FOLLOW_selectionListElement_in_selectionList3229);
            	    selectionListElement166=selectionListElement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, selectionListElement166.getTree());

            	    }
            	    break;

            	default :
            	    break loop59;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "selectionList"

    public static class selectionListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "selectionListElement"
    // EsperEPL2Grammar.g:722:1: selectionListElement : (s= STAR -> WILDCARD_SELECT[$s] | ( streamSelector )=> streamSelector | expression ( AS i= keywordAllowedIdent )? -> {identifier != null}? ^( SELECTION_ELEMENT_EXPR expression IDENT[identifier] ) -> {identifier == null}? ^( SELECTION_ELEMENT_EXPR expression ) -> ^( SELECTION_ELEMENT_EXPR expression ) );
    public final EsperEPL2GrammarParser.selectionListElement_return selectionListElement() throws RecognitionException {
        EsperEPL2GrammarParser.selectionListElement_return retval = new EsperEPL2GrammarParser.selectionListElement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token s=null;
        Token AS169=null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i = null;

        EsperEPL2GrammarParser.streamSelector_return streamSelector167 = null;

        EsperEPL2GrammarParser.expression_return expression168 = null;


        CommonTree s_tree=null;
        CommonTree AS169_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_keywordAllowedIdent=new RewriteRuleSubtreeStream(adaptor,"rule keywordAllowedIdent");
         String identifier = null; 
        try {
            // EsperEPL2Grammar.g:724:2: (s= STAR -> WILDCARD_SELECT[$s] | ( streamSelector )=> streamSelector | expression ( AS i= keywordAllowedIdent )? -> {identifier != null}? ^( SELECTION_ELEMENT_EXPR expression IDENT[identifier] ) -> {identifier == null}? ^( SELECTION_ELEMENT_EXPR expression ) -> ^( SELECTION_ELEMENT_EXPR expression ) )
            int alt61=3;
            alt61 = dfa61.predict(input);
            switch (alt61) {
                case 1 :
                    // EsperEPL2Grammar.g:724:7: s= STAR
                    {
                    s=(Token)match(input,STAR,FOLLOW_STAR_in_selectionListElement3255); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STAR.add(s);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 724:14: -> WILDCARD_SELECT[$s]
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(WILDCARD_SELECT, s));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:725:4: ( streamSelector )=> streamSelector
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_streamSelector_in_selectionListElement3271);
                    streamSelector167=streamSelector();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, streamSelector167.getTree());

                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:726:4: expression ( AS i= keywordAllowedIdent )?
                    {
                    pushFollow(FOLLOW_expression_in_selectionListElement3276);
                    expression168=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression168.getTree());
                    // EsperEPL2Grammar.g:726:15: ( AS i= keywordAllowedIdent )?
                    int alt60=2;
                    int LA60_0 = input.LA(1);

                    if ( (LA60_0==AS) ) {
                        alt60=1;
                    }
                    switch (alt60) {
                        case 1 :
                            // EsperEPL2Grammar.g:726:16: AS i= keywordAllowedIdent
                            {
                            AS169=(Token)match(input,AS,FOLLOW_AS_in_selectionListElement3279); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_AS.add(AS169);

                            pushFollow(FOLLOW_keywordAllowedIdent_in_selectionListElement3283);
                            i=keywordAllowedIdent();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i.getTree());
                            if ( state.backtracking==0 ) {
                               identifier = i.getTree().toString(); 
                            }

                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: expression, expression, expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 727:3: -> {identifier != null}? ^( SELECTION_ELEMENT_EXPR expression IDENT[identifier] )
                    if (identifier != null) {
                        // EsperEPL2Grammar.g:727:28: ^( SELECTION_ELEMENT_EXPR expression IDENT[identifier] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);

                        adaptor.addChild(root_1, stream_expression.nextTree());
                        adaptor.addChild(root_1, (CommonTree)adaptor.create(IDENT, identifier));

                        adaptor.addChild(root_0, root_1);
                        }

                    }
                    else // 728:3: -> {identifier == null}? ^( SELECTION_ELEMENT_EXPR expression )
                    if (identifier == null) {
                        // EsperEPL2Grammar.g:728:28: ^( SELECTION_ELEMENT_EXPR expression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);

                        adaptor.addChild(root_1, stream_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }
                    else // 729:3: -> ^( SELECTION_ELEMENT_EXPR expression )
                    {
                        // EsperEPL2Grammar.g:729:6: ^( SELECTION_ELEMENT_EXPR expression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);

                        adaptor.addChild(root_1, stream_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "selectionListElement"

    public static class streamSelector_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "streamSelector"
    // EsperEPL2Grammar.g:732:1: streamSelector : s= IDENT DOT STAR ( AS i= IDENT )? -> ^( SELECTION_STREAM $s ( $i)? ) ;
    public final EsperEPL2GrammarParser.streamSelector_return streamSelector() throws RecognitionException {
        EsperEPL2GrammarParser.streamSelector_return retval = new EsperEPL2GrammarParser.streamSelector_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token s=null;
        Token i=null;
        Token DOT170=null;
        Token STAR171=null;
        Token AS172=null;

        CommonTree s_tree=null;
        CommonTree i_tree=null;
        CommonTree DOT170_tree=null;
        CommonTree STAR171_tree=null;
        CommonTree AS172_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");

        try {
            // EsperEPL2Grammar.g:733:2: (s= IDENT DOT STAR ( AS i= IDENT )? -> ^( SELECTION_STREAM $s ( $i)? ) )
            // EsperEPL2Grammar.g:733:4: s= IDENT DOT STAR ( AS i= IDENT )?
            {
            s=(Token)match(input,IDENT,FOLLOW_IDENT_in_streamSelector3339); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(s);

            DOT170=(Token)match(input,DOT,FOLLOW_DOT_in_streamSelector3341); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DOT.add(DOT170);

            STAR171=(Token)match(input,STAR,FOLLOW_STAR_in_streamSelector3343); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_STAR.add(STAR171);

            // EsperEPL2Grammar.g:733:21: ( AS i= IDENT )?
            int alt62=2;
            int LA62_0 = input.LA(1);

            if ( (LA62_0==AS) ) {
                alt62=1;
            }
            switch (alt62) {
                case 1 :
                    // EsperEPL2Grammar.g:733:22: AS i= IDENT
                    {
                    AS172=(Token)match(input,AS,FOLLOW_AS_in_streamSelector3346); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS172);

                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_streamSelector3350); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;

            }



            // AST REWRITE
            // elements: i, s
            // token labels: s, i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 734:3: -> ^( SELECTION_STREAM $s ( $i)? )
            {
                // EsperEPL2Grammar.g:734:6: ^( SELECTION_STREAM $s ( $i)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_STREAM, "SELECTION_STREAM"), root_1);

                adaptor.addChild(root_1, stream_s.nextNode());
                // EsperEPL2Grammar.g:734:28: ( $i)?
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());

                }
                stream_i.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "streamSelector"

    public static class streamExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "streamExpression"
    // EsperEPL2Grammar.g:737:1: streamExpression : ( eventFilterExpression | patternInclusionExpression | databaseJoinExpression | methodJoinExpression ) ( DOT viewExpression ( DOT viewExpression )* )? ( AS i= IDENT | i= IDENT )? (u= UNIDIRECTIONAL )? (ru= RETAINUNION | ri= RETAININTERSECTION )? -> ^( STREAM_EXPR ( eventFilterExpression )? ( patternInclusionExpression )? ( databaseJoinExpression )? ( methodJoinExpression )? ( viewExpression )* ( $i)? ( $u)? ( $ru)? ( $ri)? ) ;
    public final EsperEPL2GrammarParser.streamExpression_return streamExpression() throws RecognitionException {
        EsperEPL2GrammarParser.streamExpression_return retval = new EsperEPL2GrammarParser.streamExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token u=null;
        Token ru=null;
        Token ri=null;
        Token DOT177=null;
        Token DOT179=null;
        Token AS181=null;
        EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression173 = null;

        EsperEPL2GrammarParser.patternInclusionExpression_return patternInclusionExpression174 = null;

        EsperEPL2GrammarParser.databaseJoinExpression_return databaseJoinExpression175 = null;

        EsperEPL2GrammarParser.methodJoinExpression_return methodJoinExpression176 = null;

        EsperEPL2GrammarParser.viewExpression_return viewExpression178 = null;

        EsperEPL2GrammarParser.viewExpression_return viewExpression180 = null;


        CommonTree i_tree=null;
        CommonTree u_tree=null;
        CommonTree ru_tree=null;
        CommonTree ri_tree=null;
        CommonTree DOT177_tree=null;
        CommonTree DOT179_tree=null;
        CommonTree AS181_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RETAINUNION=new RewriteRuleTokenStream(adaptor,"token RETAINUNION");
        RewriteRuleTokenStream stream_RETAININTERSECTION=new RewriteRuleTokenStream(adaptor,"token RETAININTERSECTION");
        RewriteRuleTokenStream stream_UNIDIRECTIONAL=new RewriteRuleTokenStream(adaptor,"token UNIDIRECTIONAL");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_databaseJoinExpression=new RewriteRuleSubtreeStream(adaptor,"rule databaseJoinExpression");
        RewriteRuleSubtreeStream stream_methodJoinExpression=new RewriteRuleSubtreeStream(adaptor,"rule methodJoinExpression");
        RewriteRuleSubtreeStream stream_viewExpression=new RewriteRuleSubtreeStream(adaptor,"rule viewExpression");
        RewriteRuleSubtreeStream stream_eventFilterExpression=new RewriteRuleSubtreeStream(adaptor,"rule eventFilterExpression");
        RewriteRuleSubtreeStream stream_patternInclusionExpression=new RewriteRuleSubtreeStream(adaptor,"rule patternInclusionExpression");
        try {
            // EsperEPL2Grammar.g:738:2: ( ( eventFilterExpression | patternInclusionExpression | databaseJoinExpression | methodJoinExpression ) ( DOT viewExpression ( DOT viewExpression )* )? ( AS i= IDENT | i= IDENT )? (u= UNIDIRECTIONAL )? (ru= RETAINUNION | ri= RETAININTERSECTION )? -> ^( STREAM_EXPR ( eventFilterExpression )? ( patternInclusionExpression )? ( databaseJoinExpression )? ( methodJoinExpression )? ( viewExpression )* ( $i)? ( $u)? ( $ru)? ( $ri)? ) )
            // EsperEPL2Grammar.g:738:4: ( eventFilterExpression | patternInclusionExpression | databaseJoinExpression | methodJoinExpression ) ( DOT viewExpression ( DOT viewExpression )* )? ( AS i= IDENT | i= IDENT )? (u= UNIDIRECTIONAL )? (ru= RETAINUNION | ri= RETAININTERSECTION )?
            {
            // EsperEPL2Grammar.g:738:4: ( eventFilterExpression | patternInclusionExpression | databaseJoinExpression | methodJoinExpression )
            int alt63=4;
            switch ( input.LA(1) ) {
            case IDENT:
                {
                int LA63_1 = input.LA(2);

                if ( (LA63_1==EOF||(LA63_1>=WHERE && LA63_1<=AS)||(LA63_1>=INNER && LA63_1<=ON)||(LA63_1>=GROUP && LA63_1<=HAVING)||LA63_1==OUTPUT||LA63_1==ORDER||(LA63_1>=UNIDIRECTIONAL && LA63_1<=RETAININTERSECTION)||LA63_1==ROW_LIMIT_EXPR||(LA63_1>=COMMA && LA63_1<=LPAREN)||LA63_1==LBRACK) ) {
                    alt63=1;
                }
                else if ( (LA63_1==COLON) ) {
                    alt63=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 63, 1, input);

                    throw nvae;
                }
                }
                break;
            case TICKED_STRING_LITERAL:
                {
                alt63=1;
                }
                break;
            case PATTERN:
                {
                alt63=2;
                }
                break;
            case SQL:
                {
                alt63=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 63, 0, input);

                throw nvae;
            }

            switch (alt63) {
                case 1 :
                    // EsperEPL2Grammar.g:738:5: eventFilterExpression
                    {
                    pushFollow(FOLLOW_eventFilterExpression_in_streamExpression3380);
                    eventFilterExpression173=eventFilterExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_eventFilterExpression.add(eventFilterExpression173.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:738:29: patternInclusionExpression
                    {
                    pushFollow(FOLLOW_patternInclusionExpression_in_streamExpression3384);
                    patternInclusionExpression174=patternInclusionExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_patternInclusionExpression.add(patternInclusionExpression174.getTree());

                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:738:58: databaseJoinExpression
                    {
                    pushFollow(FOLLOW_databaseJoinExpression_in_streamExpression3388);
                    databaseJoinExpression175=databaseJoinExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_databaseJoinExpression.add(databaseJoinExpression175.getTree());

                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:738:83: methodJoinExpression
                    {
                    pushFollow(FOLLOW_methodJoinExpression_in_streamExpression3392);
                    methodJoinExpression176=methodJoinExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_methodJoinExpression.add(methodJoinExpression176.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:739:3: ( DOT viewExpression ( DOT viewExpression )* )?
            int alt65=2;
            int LA65_0 = input.LA(1);

            if ( (LA65_0==DOT) ) {
                alt65=1;
            }
            switch (alt65) {
                case 1 :
                    // EsperEPL2Grammar.g:739:4: DOT viewExpression ( DOT viewExpression )*
                    {
                    DOT177=(Token)match(input,DOT,FOLLOW_DOT_in_streamExpression3398); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT177);

                    pushFollow(FOLLOW_viewExpression_in_streamExpression3400);
                    viewExpression178=viewExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression178.getTree());
                    // EsperEPL2Grammar.g:739:23: ( DOT viewExpression )*
                    loop64:
                    do {
                        int alt64=2;
                        int LA64_0 = input.LA(1);

                        if ( (LA64_0==DOT) ) {
                            alt64=1;
                        }


                        switch (alt64) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:739:24: DOT viewExpression
                    	    {
                    	    DOT179=(Token)match(input,DOT,FOLLOW_DOT_in_streamExpression3403); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_DOT.add(DOT179);

                    	    pushFollow(FOLLOW_viewExpression_in_streamExpression3405);
                    	    viewExpression180=viewExpression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression180.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop64;
                        }
                    } while (true);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:739:47: ( AS i= IDENT | i= IDENT )?
            int alt66=3;
            int LA66_0 = input.LA(1);

            if ( (LA66_0==AS) ) {
                alt66=1;
            }
            else if ( (LA66_0==IDENT) ) {
                alt66=2;
            }
            switch (alt66) {
                case 1 :
                    // EsperEPL2Grammar.g:739:48: AS i= IDENT
                    {
                    AS181=(Token)match(input,AS,FOLLOW_AS_in_streamExpression3412); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS181);

                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_streamExpression3416); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:739:61: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_streamExpression3422); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:739:71: (u= UNIDIRECTIONAL )?
            int alt67=2;
            int LA67_0 = input.LA(1);

            if ( (LA67_0==UNIDIRECTIONAL) ) {
                alt67=1;
            }
            switch (alt67) {
                case 1 :
                    // EsperEPL2Grammar.g:739:72: u= UNIDIRECTIONAL
                    {
                    u=(Token)match(input,UNIDIRECTIONAL,FOLLOW_UNIDIRECTIONAL_in_streamExpression3429); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_UNIDIRECTIONAL.add(u);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:739:91: (ru= RETAINUNION | ri= RETAININTERSECTION )?
            int alt68=3;
            int LA68_0 = input.LA(1);

            if ( (LA68_0==RETAINUNION) ) {
                alt68=1;
            }
            else if ( (LA68_0==RETAININTERSECTION) ) {
                alt68=2;
            }
            switch (alt68) {
                case 1 :
                    // EsperEPL2Grammar.g:739:92: ru= RETAINUNION
                    {
                    ru=(Token)match(input,RETAINUNION,FOLLOW_RETAINUNION_in_streamExpression3436); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAINUNION.add(ru);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:739:107: ri= RETAININTERSECTION
                    {
                    ri=(Token)match(input,RETAININTERSECTION,FOLLOW_RETAININTERSECTION_in_streamExpression3440); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAININTERSECTION.add(ri);


                    }
                    break;

            }



            // AST REWRITE
            // elements: ri, databaseJoinExpression, methodJoinExpression, i, eventFilterExpression, ru, u, viewExpression, patternInclusionExpression
            // token labels: u, ri, ru, i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_u=new RewriteRuleTokenStream(adaptor,"token u",u);
            RewriteRuleTokenStream stream_ri=new RewriteRuleTokenStream(adaptor,"token ri",ri);
            RewriteRuleTokenStream stream_ru=new RewriteRuleTokenStream(adaptor,"token ru",ru);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 740:3: -> ^( STREAM_EXPR ( eventFilterExpression )? ( patternInclusionExpression )? ( databaseJoinExpression )? ( methodJoinExpression )? ( viewExpression )* ( $i)? ( $u)? ( $ru)? ( $ri)? )
            {
                // EsperEPL2Grammar.g:740:6: ^( STREAM_EXPR ( eventFilterExpression )? ( patternInclusionExpression )? ( databaseJoinExpression )? ( methodJoinExpression )? ( viewExpression )* ( $i)? ( $u)? ( $ru)? ( $ri)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STREAM_EXPR, "STREAM_EXPR"), root_1);

                // EsperEPL2Grammar.g:740:20: ( eventFilterExpression )?
                if ( stream_eventFilterExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_eventFilterExpression.nextTree());

                }
                stream_eventFilterExpression.reset();
                // EsperEPL2Grammar.g:740:43: ( patternInclusionExpression )?
                if ( stream_patternInclusionExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_patternInclusionExpression.nextTree());

                }
                stream_patternInclusionExpression.reset();
                // EsperEPL2Grammar.g:740:71: ( databaseJoinExpression )?
                if ( stream_databaseJoinExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_databaseJoinExpression.nextTree());

                }
                stream_databaseJoinExpression.reset();
                // EsperEPL2Grammar.g:740:95: ( methodJoinExpression )?
                if ( stream_methodJoinExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_methodJoinExpression.nextTree());

                }
                stream_methodJoinExpression.reset();
                // EsperEPL2Grammar.g:741:3: ( viewExpression )*
                while ( stream_viewExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_viewExpression.nextTree());

                }
                stream_viewExpression.reset();
                // EsperEPL2Grammar.g:741:19: ( $i)?
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());

                }
                stream_i.reset();
                // EsperEPL2Grammar.g:741:23: ( $u)?
                if ( stream_u.hasNext() ) {
                    adaptor.addChild(root_1, stream_u.nextNode());

                }
                stream_u.reset();
                // EsperEPL2Grammar.g:741:27: ( $ru)?
                if ( stream_ru.hasNext() ) {
                    adaptor.addChild(root_1, stream_ru.nextNode());

                }
                stream_ru.reset();
                // EsperEPL2Grammar.g:741:32: ( $ri)?
                if ( stream_ri.hasNext() ) {
                    adaptor.addChild(root_1, stream_ri.nextNode());

                }
                stream_ri.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "streamExpression"

    public static class patternInclusionExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "patternInclusionExpression"
    // EsperEPL2Grammar.g:744:1: patternInclusionExpression : PATTERN LBRACK patternExpression RBRACK -> ^( PATTERN_INCL_EXPR patternExpression ) ;
    public final EsperEPL2GrammarParser.patternInclusionExpression_return patternInclusionExpression() throws RecognitionException {
        EsperEPL2GrammarParser.patternInclusionExpression_return retval = new EsperEPL2GrammarParser.patternInclusionExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token PATTERN182=null;
        Token LBRACK183=null;
        Token RBRACK185=null;
        EsperEPL2GrammarParser.patternExpression_return patternExpression184 = null;


        CommonTree PATTERN182_tree=null;
        CommonTree LBRACK183_tree=null;
        CommonTree RBRACK185_tree=null;
        RewriteRuleTokenStream stream_PATTERN=new RewriteRuleTokenStream(adaptor,"token PATTERN");
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleSubtreeStream stream_patternExpression=new RewriteRuleSubtreeStream(adaptor,"rule patternExpression");
        try {
            // EsperEPL2Grammar.g:745:2: ( PATTERN LBRACK patternExpression RBRACK -> ^( PATTERN_INCL_EXPR patternExpression ) )
            // EsperEPL2Grammar.g:745:4: PATTERN LBRACK patternExpression RBRACK
            {
            PATTERN182=(Token)match(input,PATTERN,FOLLOW_PATTERN_in_patternInclusionExpression3497); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_PATTERN.add(PATTERN182);

            LBRACK183=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_patternInclusionExpression3499); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK183);

            pushFollow(FOLLOW_patternExpression_in_patternInclusionExpression3501);
            patternExpression184=patternExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_patternExpression.add(patternExpression184.getTree());
            RBRACK185=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_patternInclusionExpression3503); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK185);



            // AST REWRITE
            // elements: patternExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 746:3: -> ^( PATTERN_INCL_EXPR patternExpression )
            {
                // EsperEPL2Grammar.g:746:6: ^( PATTERN_INCL_EXPR patternExpression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATTERN_INCL_EXPR, "PATTERN_INCL_EXPR"), root_1);

                adaptor.addChild(root_1, stream_patternExpression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "patternInclusionExpression"

    public static class databaseJoinExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "databaseJoinExpression"
    // EsperEPL2Grammar.g:749:1: databaseJoinExpression : SQL COLON i= IDENT LBRACK (s= STRING_LITERAL | s= QUOTED_STRING_LITERAL ) ( METADATASQL (s2= STRING_LITERAL | s2= QUOTED_STRING_LITERAL ) )? RBRACK -> ^( DATABASE_JOIN_EXPR $i $s ( $s2)? ) ;
    public final EsperEPL2GrammarParser.databaseJoinExpression_return databaseJoinExpression() throws RecognitionException {
        EsperEPL2GrammarParser.databaseJoinExpression_return retval = new EsperEPL2GrammarParser.databaseJoinExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token s=null;
        Token s2=null;
        Token SQL186=null;
        Token COLON187=null;
        Token LBRACK188=null;
        Token METADATASQL189=null;
        Token RBRACK190=null;

        CommonTree i_tree=null;
        CommonTree s_tree=null;
        CommonTree s2_tree=null;
        CommonTree SQL186_tree=null;
        CommonTree COLON187_tree=null;
        CommonTree LBRACK188_tree=null;
        CommonTree METADATASQL189_tree=null;
        CommonTree RBRACK190_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_SQL=new RewriteRuleTokenStream(adaptor,"token SQL");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token STRING_LITERAL");
        RewriteRuleTokenStream stream_METADATASQL=new RewriteRuleTokenStream(adaptor,"token METADATASQL");
        RewriteRuleTokenStream stream_QUOTED_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token QUOTED_STRING_LITERAL");

         paraphrases.push("relational data join"); 
        try {
            // EsperEPL2Grammar.g:752:2: ( SQL COLON i= IDENT LBRACK (s= STRING_LITERAL | s= QUOTED_STRING_LITERAL ) ( METADATASQL (s2= STRING_LITERAL | s2= QUOTED_STRING_LITERAL ) )? RBRACK -> ^( DATABASE_JOIN_EXPR $i $s ( $s2)? ) )
            // EsperEPL2Grammar.g:752:4: SQL COLON i= IDENT LBRACK (s= STRING_LITERAL | s= QUOTED_STRING_LITERAL ) ( METADATASQL (s2= STRING_LITERAL | s2= QUOTED_STRING_LITERAL ) )? RBRACK
            {
            SQL186=(Token)match(input,SQL,FOLLOW_SQL_in_databaseJoinExpression3536); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SQL.add(SQL186);

            COLON187=(Token)match(input,COLON,FOLLOW_COLON_in_databaseJoinExpression3538); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON187);

            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_databaseJoinExpression3542); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);

            LBRACK188=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_databaseJoinExpression3544); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK188);

            // EsperEPL2Grammar.g:752:29: (s= STRING_LITERAL | s= QUOTED_STRING_LITERAL )
            int alt69=2;
            int LA69_0 = input.LA(1);

            if ( (LA69_0==STRING_LITERAL) ) {
                alt69=1;
            }
            else if ( (LA69_0==QUOTED_STRING_LITERAL) ) {
                alt69=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 69, 0, input);

                throw nvae;
            }
            switch (alt69) {
                case 1 :
                    // EsperEPL2Grammar.g:752:30: s= STRING_LITERAL
                    {
                    s=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_databaseJoinExpression3549); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STRING_LITERAL.add(s);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:752:49: s= QUOTED_STRING_LITERAL
                    {
                    s=(Token)match(input,QUOTED_STRING_LITERAL,FOLLOW_QUOTED_STRING_LITERAL_in_databaseJoinExpression3555); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUOTED_STRING_LITERAL.add(s);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:752:74: ( METADATASQL (s2= STRING_LITERAL | s2= QUOTED_STRING_LITERAL ) )?
            int alt71=2;
            int LA71_0 = input.LA(1);

            if ( (LA71_0==METADATASQL) ) {
                alt71=1;
            }
            switch (alt71) {
                case 1 :
                    // EsperEPL2Grammar.g:752:75: METADATASQL (s2= STRING_LITERAL | s2= QUOTED_STRING_LITERAL )
                    {
                    METADATASQL189=(Token)match(input,METADATASQL,FOLLOW_METADATASQL_in_databaseJoinExpression3559); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_METADATASQL.add(METADATASQL189);

                    // EsperEPL2Grammar.g:752:87: (s2= STRING_LITERAL | s2= QUOTED_STRING_LITERAL )
                    int alt70=2;
                    int LA70_0 = input.LA(1);

                    if ( (LA70_0==STRING_LITERAL) ) {
                        alt70=1;
                    }
                    else if ( (LA70_0==QUOTED_STRING_LITERAL) ) {
                        alt70=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 70, 0, input);

                        throw nvae;
                    }
                    switch (alt70) {
                        case 1 :
                            // EsperEPL2Grammar.g:752:88: s2= STRING_LITERAL
                            {
                            s2=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_databaseJoinExpression3564); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_STRING_LITERAL.add(s2);


                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:752:108: s2= QUOTED_STRING_LITERAL
                            {
                            s2=(Token)match(input,QUOTED_STRING_LITERAL,FOLLOW_QUOTED_STRING_LITERAL_in_databaseJoinExpression3570); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUOTED_STRING_LITERAL.add(s2);


                            }
                            break;

                    }


                    }
                    break;

            }

            RBRACK190=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_databaseJoinExpression3575); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK190);



            // AST REWRITE
            // elements: s2, s, i
            // token labels: s2, s, i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s2=new RewriteRuleTokenStream(adaptor,"token s2",s2);
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 753:3: -> ^( DATABASE_JOIN_EXPR $i $s ( $s2)? )
            {
                // EsperEPL2Grammar.g:753:6: ^( DATABASE_JOIN_EXPR $i $s ( $s2)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DATABASE_JOIN_EXPR, "DATABASE_JOIN_EXPR"), root_1);

                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_s.nextNode());
                // EsperEPL2Grammar.g:753:33: ( $s2)?
                if ( stream_s2.hasNext() ) {
                    adaptor.addChild(root_1, stream_s2.nextNode());

                }
                stream_s2.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "databaseJoinExpression"

    public static class methodJoinExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "methodJoinExpression"
    // EsperEPL2Grammar.g:756:1: methodJoinExpression : i= IDENT COLON classIdentifier ( LPAREN ( expressionList )? RPAREN )? -> ^( METHOD_JOIN_EXPR $i classIdentifier ( expressionList )? ) ;
    public final EsperEPL2GrammarParser.methodJoinExpression_return methodJoinExpression() throws RecognitionException {
        EsperEPL2GrammarParser.methodJoinExpression_return retval = new EsperEPL2GrammarParser.methodJoinExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token COLON191=null;
        Token LPAREN193=null;
        Token RPAREN195=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier192 = null;

        EsperEPL2GrammarParser.expressionList_return expressionList194 = null;


        CommonTree i_tree=null;
        CommonTree COLON191_tree=null;
        CommonTree LPAREN193_tree=null;
        CommonTree RPAREN195_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
         paraphrases.push("method invocation join"); 
        try {
            // EsperEPL2Grammar.g:759:6: (i= IDENT COLON classIdentifier ( LPAREN ( expressionList )? RPAREN )? -> ^( METHOD_JOIN_EXPR $i classIdentifier ( expressionList )? ) )
            // EsperEPL2Grammar.g:759:11: i= IDENT COLON classIdentifier ( LPAREN ( expressionList )? RPAREN )?
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_methodJoinExpression3626); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);

            COLON191=(Token)match(input,COLON,FOLLOW_COLON_in_methodJoinExpression3628); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON191);

            pushFollow(FOLLOW_classIdentifier_in_methodJoinExpression3630);
            classIdentifier192=classIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier192.getTree());
            // EsperEPL2Grammar.g:759:41: ( LPAREN ( expressionList )? RPAREN )?
            int alt73=2;
            int LA73_0 = input.LA(1);

            if ( (LA73_0==LPAREN) ) {
                alt73=1;
            }
            switch (alt73) {
                case 1 :
                    // EsperEPL2Grammar.g:759:42: LPAREN ( expressionList )? RPAREN
                    {
                    LPAREN193=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_methodJoinExpression3633); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN193);

                    // EsperEPL2Grammar.g:759:49: ( expressionList )?
                    int alt72=2;
                    int LA72_0 = input.LA(1);

                    if ( (LA72_0==WINDOW||LA72_0==ESCAPE||(LA72_0>=NOT_EXPR && LA72_0<=EVERY_EXPR)||(LA72_0>=SUM && LA72_0<=COUNT)||LA72_0==CASE||LA72_0==OUTER||(LA72_0>=JOIN && LA72_0<=FULL)||(LA72_0>=EVENTS && LA72_0<=LAST)||(LA72_0>=UNIDIRECTIONAL && LA72_0<=CURRENT_TIMESTAMP)||LA72_0==SNAPSHOT||(LA72_0>=VARIABLE && LA72_0<=AT)||(LA72_0>=BOOLEAN_TRUE && LA72_0<=VALUE_NULL)||LA72_0==NUM_DOUBLE||LA72_0==IDENT||LA72_0==LPAREN||(LA72_0>=STRING_LITERAL && LA72_0<=QUOTED_STRING_LITERAL)||(LA72_0>=PLUS && LA72_0<=MINUS)||LA72_0==LCURLY||LA72_0==NUM_INT||LA72_0==QUESTION||(LA72_0>=TICKED_STRING_LITERAL && LA72_0<=NUM_FLOAT)) ) {
                        alt72=1;
                    }
                    switch (alt72) {
                        case 1 :
                            // EsperEPL2Grammar.g:759:49: expressionList
                            {
                            pushFollow(FOLLOW_expressionList_in_methodJoinExpression3635);
                            expressionList194=expressionList();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList194.getTree());

                            }
                            break;

                    }

                    RPAREN195=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_methodJoinExpression3638); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN195);


                    }
                    break;

            }



            // AST REWRITE
            // elements: expressionList, classIdentifier, i
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 760:10: -> ^( METHOD_JOIN_EXPR $i classIdentifier ( expressionList )? )
            {
                // EsperEPL2Grammar.g:760:13: ^( METHOD_JOIN_EXPR $i classIdentifier ( expressionList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(METHOD_JOIN_EXPR, "METHOD_JOIN_EXPR"), root_1);

                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                // EsperEPL2Grammar.g:760:51: ( expressionList )?
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());

                }
                stream_expressionList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "methodJoinExpression"

    public static class viewExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "viewExpression"
    // EsperEPL2Grammar.g:763:1: viewExpression : ns= IDENT COLON nm= IDENT LPAREN ( expressionWithTimeList )? RPAREN -> ^( VIEW_EXPR $ns $nm ( expressionWithTimeList )? ) ;
    public final EsperEPL2GrammarParser.viewExpression_return viewExpression() throws RecognitionException {
        EsperEPL2GrammarParser.viewExpression_return retval = new EsperEPL2GrammarParser.viewExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token ns=null;
        Token nm=null;
        Token COLON196=null;
        Token LPAREN197=null;
        Token RPAREN199=null;
        EsperEPL2GrammarParser.expressionWithTimeList_return expressionWithTimeList198 = null;


        CommonTree ns_tree=null;
        CommonTree nm_tree=null;
        CommonTree COLON196_tree=null;
        CommonTree LPAREN197_tree=null;
        CommonTree RPAREN199_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionWithTimeList=new RewriteRuleSubtreeStream(adaptor,"rule expressionWithTimeList");
         paraphrases.push("view specifications"); 
        try {
            // EsperEPL2Grammar.g:766:2: (ns= IDENT COLON nm= IDENT LPAREN ( expressionWithTimeList )? RPAREN -> ^( VIEW_EXPR $ns $nm ( expressionWithTimeList )? ) )
            // EsperEPL2Grammar.g:766:4: ns= IDENT COLON nm= IDENT LPAREN ( expressionWithTimeList )? RPAREN
            {
            ns=(Token)match(input,IDENT,FOLLOW_IDENT_in_viewExpression3691); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(ns);

            COLON196=(Token)match(input,COLON,FOLLOW_COLON_in_viewExpression3693); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON196);

            nm=(Token)match(input,IDENT,FOLLOW_IDENT_in_viewExpression3697); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(nm);

            LPAREN197=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_viewExpression3699); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN197);

            // EsperEPL2Grammar.g:766:35: ( expressionWithTimeList )?
            int alt74=2;
            int LA74_0 = input.LA(1);

            if ( (LA74_0==WINDOW||LA74_0==ESCAPE||(LA74_0>=NOT_EXPR && LA74_0<=EVERY_EXPR)||(LA74_0>=SUM && LA74_0<=COUNT)||LA74_0==CASE||LA74_0==OUTER||(LA74_0>=JOIN && LA74_0<=FULL)||(LA74_0>=EVENTS && LA74_0<=LAST)||(LA74_0>=UNIDIRECTIONAL && LA74_0<=CURRENT_TIMESTAMP)||LA74_0==SNAPSHOT||(LA74_0>=VARIABLE && LA74_0<=AT)||(LA74_0>=BOOLEAN_TRUE && LA74_0<=VALUE_NULL)||LA74_0==NUM_DOUBLE||LA74_0==IDENT||LA74_0==LPAREN||(LA74_0>=STAR && LA74_0<=LBRACK)||(LA74_0>=STRING_LITERAL && LA74_0<=QUOTED_STRING_LITERAL)||(LA74_0>=PLUS && LA74_0<=MINUS)||LA74_0==LCURLY||LA74_0==NUM_INT||LA74_0==QUESTION||(LA74_0>=TICKED_STRING_LITERAL && LA74_0<=NUM_FLOAT)) ) {
                alt74=1;
            }
            switch (alt74) {
                case 1 :
                    // EsperEPL2Grammar.g:766:35: expressionWithTimeList
                    {
                    pushFollow(FOLLOW_expressionWithTimeList_in_viewExpression3701);
                    expressionWithTimeList198=expressionWithTimeList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expressionWithTimeList.add(expressionWithTimeList198.getTree());

                    }
                    break;

            }

            RPAREN199=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_viewExpression3704); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN199);



            // AST REWRITE
            // elements: ns, expressionWithTimeList, nm
            // token labels: ns, nm
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_ns=new RewriteRuleTokenStream(adaptor,"token ns",ns);
            RewriteRuleTokenStream stream_nm=new RewriteRuleTokenStream(adaptor,"token nm",nm);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 767:3: -> ^( VIEW_EXPR $ns $nm ( expressionWithTimeList )? )
            {
                // EsperEPL2Grammar.g:767:6: ^( VIEW_EXPR $ns $nm ( expressionWithTimeList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VIEW_EXPR, "VIEW_EXPR"), root_1);

                adaptor.addChild(root_1, stream_ns.nextNode());
                adaptor.addChild(root_1, stream_nm.nextNode());
                // EsperEPL2Grammar.g:767:26: ( expressionWithTimeList )?
                if ( stream_expressionWithTimeList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionWithTimeList.nextTree());

                }
                stream_expressionWithTimeList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "viewExpression"

    public static class groupByListExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "groupByListExpr"
    // EsperEPL2Grammar.g:770:1: groupByListExpr : expression ( COMMA expression )* -> ^( GROUP_BY_EXPR ( expression )+ ) ;
    public final EsperEPL2GrammarParser.groupByListExpr_return groupByListExpr() throws RecognitionException {
        EsperEPL2GrammarParser.groupByListExpr_return retval = new EsperEPL2GrammarParser.groupByListExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA201=null;
        EsperEPL2GrammarParser.expression_return expression200 = null;

        EsperEPL2GrammarParser.expression_return expression202 = null;


        CommonTree COMMA201_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
         paraphrases.push("group-by clause"); 
        try {
            // EsperEPL2Grammar.g:773:2: ( expression ( COMMA expression )* -> ^( GROUP_BY_EXPR ( expression )+ ) )
            // EsperEPL2Grammar.g:773:4: expression ( COMMA expression )*
            {
            pushFollow(FOLLOW_expression_in_groupByListExpr3743);
            expression200=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression200.getTree());
            // EsperEPL2Grammar.g:773:15: ( COMMA expression )*
            loop75:
            do {
                int alt75=2;
                int LA75_0 = input.LA(1);

                if ( (LA75_0==COMMA) ) {
                    alt75=1;
                }


                switch (alt75) {
            	case 1 :
            	    // EsperEPL2Grammar.g:773:16: COMMA expression
            	    {
            	    COMMA201=(Token)match(input,COMMA,FOLLOW_COMMA_in_groupByListExpr3746); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA201);

            	    pushFollow(FOLLOW_expression_in_groupByListExpr3748);
            	    expression202=expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_expression.add(expression202.getTree());

            	    }
            	    break;

            	default :
            	    break loop75;
                }
            } while (true);



            // AST REWRITE
            // elements: expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 774:3: -> ^( GROUP_BY_EXPR ( expression )+ )
            {
                // EsperEPL2Grammar.g:774:6: ^( GROUP_BY_EXPR ( expression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GROUP_BY_EXPR, "GROUP_BY_EXPR"), root_1);

                if ( !(stream_expression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());

                }
                stream_expression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "groupByListExpr"

    public static class orderByListExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "orderByListExpr"
    // EsperEPL2Grammar.g:777:1: orderByListExpr : orderByListElement ( COMMA orderByListElement )* -> ^( ORDER_BY_EXPR ( orderByListElement )+ ) ;
    public final EsperEPL2GrammarParser.orderByListExpr_return orderByListExpr() throws RecognitionException {
        EsperEPL2GrammarParser.orderByListExpr_return retval = new EsperEPL2GrammarParser.orderByListExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA204=null;
        EsperEPL2GrammarParser.orderByListElement_return orderByListElement203 = null;

        EsperEPL2GrammarParser.orderByListElement_return orderByListElement205 = null;


        CommonTree COMMA204_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_orderByListElement=new RewriteRuleSubtreeStream(adaptor,"rule orderByListElement");
         paraphrases.push("order by clause"); 
        try {
            // EsperEPL2Grammar.g:780:2: ( orderByListElement ( COMMA orderByListElement )* -> ^( ORDER_BY_EXPR ( orderByListElement )+ ) )
            // EsperEPL2Grammar.g:780:4: orderByListElement ( COMMA orderByListElement )*
            {
            pushFollow(FOLLOW_orderByListElement_in_orderByListExpr3783);
            orderByListElement203=orderByListElement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_orderByListElement.add(orderByListElement203.getTree());
            // EsperEPL2Grammar.g:780:23: ( COMMA orderByListElement )*
            loop76:
            do {
                int alt76=2;
                int LA76_0 = input.LA(1);

                if ( (LA76_0==COMMA) ) {
                    alt76=1;
                }


                switch (alt76) {
            	case 1 :
            	    // EsperEPL2Grammar.g:780:24: COMMA orderByListElement
            	    {
            	    COMMA204=(Token)match(input,COMMA,FOLLOW_COMMA_in_orderByListExpr3786); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA204);

            	    pushFollow(FOLLOW_orderByListElement_in_orderByListExpr3788);
            	    orderByListElement205=orderByListElement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_orderByListElement.add(orderByListElement205.getTree());

            	    }
            	    break;

            	default :
            	    break loop76;
                }
            } while (true);



            // AST REWRITE
            // elements: orderByListElement
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 781:3: -> ^( ORDER_BY_EXPR ( orderByListElement )+ )
            {
                // EsperEPL2Grammar.g:781:6: ^( ORDER_BY_EXPR ( orderByListElement )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ORDER_BY_EXPR, "ORDER_BY_EXPR"), root_1);

                if ( !(stream_orderByListElement.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_orderByListElement.hasNext() ) {
                    adaptor.addChild(root_1, stream_orderByListElement.nextTree());

                }
                stream_orderByListElement.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "orderByListExpr"

    public static class orderByListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "orderByListElement"
    // EsperEPL2Grammar.g:784:1: orderByListElement : expression (d= ASC | d= DESC )? -> ^( ORDER_ELEMENT_EXPR expression ( $d)? ) ;
    public final EsperEPL2GrammarParser.orderByListElement_return orderByListElement() throws RecognitionException {
        EsperEPL2GrammarParser.orderByListElement_return retval = new EsperEPL2GrammarParser.orderByListElement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token d=null;
        EsperEPL2GrammarParser.expression_return expression206 = null;


        CommonTree d_tree=null;
        RewriteRuleTokenStream stream_ASC=new RewriteRuleTokenStream(adaptor,"token ASC");
        RewriteRuleTokenStream stream_DESC=new RewriteRuleTokenStream(adaptor,"token DESC");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            // EsperEPL2Grammar.g:785:2: ( expression (d= ASC | d= DESC )? -> ^( ORDER_ELEMENT_EXPR expression ( $d)? ) )
            // EsperEPL2Grammar.g:785:4: expression (d= ASC | d= DESC )?
            {
            pushFollow(FOLLOW_expression_in_orderByListElement3813);
            expression206=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression206.getTree());
            // EsperEPL2Grammar.g:785:15: (d= ASC | d= DESC )?
            int alt77=3;
            int LA77_0 = input.LA(1);

            if ( (LA77_0==ASC) ) {
                alt77=1;
            }
            else if ( (LA77_0==DESC) ) {
                alt77=2;
            }
            switch (alt77) {
                case 1 :
                    // EsperEPL2Grammar.g:785:16: d= ASC
                    {
                    d=(Token)match(input,ASC,FOLLOW_ASC_in_orderByListElement3818); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASC.add(d);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:785:22: d= DESC
                    {
                    d=(Token)match(input,DESC,FOLLOW_DESC_in_orderByListElement3822); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DESC.add(d);


                    }
                    break;

            }



            // AST REWRITE
            // elements: expression, d
            // token labels: d
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_d=new RewriteRuleTokenStream(adaptor,"token d",d);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 786:3: -> ^( ORDER_ELEMENT_EXPR expression ( $d)? )
            {
                // EsperEPL2Grammar.g:786:6: ^( ORDER_ELEMENT_EXPR expression ( $d)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ORDER_ELEMENT_EXPR, "ORDER_ELEMENT_EXPR"), root_1);

                adaptor.addChild(root_1, stream_expression.nextTree());
                // EsperEPL2Grammar.g:786:38: ( $d)?
                if ( stream_d.hasNext() ) {
                    adaptor.addChild(root_1, stream_d.nextNode());

                }
                stream_d.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "orderByListElement"

    public static class havingClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "havingClause"
    // EsperEPL2Grammar.g:789:1: havingClause : evalOrExpression -> ^( HAVING_EXPR evalOrExpression ) ;
    public final EsperEPL2GrammarParser.havingClause_return havingClause() throws RecognitionException {
        EsperEPL2GrammarParser.havingClause_return retval = new EsperEPL2GrammarParser.havingClause_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.evalOrExpression_return evalOrExpression207 = null;


        RewriteRuleSubtreeStream stream_evalOrExpression=new RewriteRuleSubtreeStream(adaptor,"rule evalOrExpression");
         paraphrases.push("having clause"); 
        try {
            // EsperEPL2Grammar.g:792:2: ( evalOrExpression -> ^( HAVING_EXPR evalOrExpression ) )
            // EsperEPL2Grammar.g:792:4: evalOrExpression
            {
            pushFollow(FOLLOW_evalOrExpression_in_havingClause3860);
            evalOrExpression207=evalOrExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_evalOrExpression.add(evalOrExpression207.getTree());


            // AST REWRITE
            // elements: evalOrExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 793:3: -> ^( HAVING_EXPR evalOrExpression )
            {
                // EsperEPL2Grammar.g:793:6: ^( HAVING_EXPR evalOrExpression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(HAVING_EXPR, "HAVING_EXPR"), root_1);

                adaptor.addChild(root_1, stream_evalOrExpression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "havingClause"

    public static class outputLimit_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "outputLimit"
    // EsperEPL2Grammar.g:796:1: outputLimit : (k= ALL | k= FIRST | k= LAST | k= SNAPSHOT )? ( (ev= EVERY_EXPR ( ( timePeriod )=> timePeriod | ( number | i= IDENT ) (e= EVENTS ) ) ) | (at= AT crontabLimitParameterSet ) | (wh= WHEN expression ( THEN onSetExpr )? ) ) -> {$ev != null && $e != null}? ^( EVENT_LIMIT_EXPR ( $k)? ( number )? ( $i)? ) -> {$ev != null}? ^( TIMEPERIOD_LIMIT_EXPR ( $k)? timePeriod ) -> {$at != null}? ^( CRONTAB_LIMIT_EXPR ( $k)? crontabLimitParameterSet ) -> ^( WHEN_LIMIT_EXPR ( $k)? expression ( onSetExpr )? ) ;
    public final EsperEPL2GrammarParser.outputLimit_return outputLimit() throws RecognitionException {
        EsperEPL2GrammarParser.outputLimit_return retval = new EsperEPL2GrammarParser.outputLimit_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token k=null;
        Token ev=null;
        Token i=null;
        Token e=null;
        Token at=null;
        Token wh=null;
        Token THEN212=null;
        EsperEPL2GrammarParser.timePeriod_return timePeriod208 = null;

        EsperEPL2GrammarParser.number_return number209 = null;

        EsperEPL2GrammarParser.crontabLimitParameterSet_return crontabLimitParameterSet210 = null;

        EsperEPL2GrammarParser.expression_return expression211 = null;

        EsperEPL2GrammarParser.onSetExpr_return onSetExpr213 = null;


        CommonTree k_tree=null;
        CommonTree ev_tree=null;
        CommonTree i_tree=null;
        CommonTree e_tree=null;
        CommonTree at_tree=null;
        CommonTree wh_tree=null;
        CommonTree THEN212_tree=null;
        RewriteRuleTokenStream stream_AT=new RewriteRuleTokenStream(adaptor,"token AT");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_THEN=new RewriteRuleTokenStream(adaptor,"token THEN");
        RewriteRuleTokenStream stream_LAST=new RewriteRuleTokenStream(adaptor,"token LAST");
        RewriteRuleTokenStream stream_SNAPSHOT=new RewriteRuleTokenStream(adaptor,"token SNAPSHOT");
        RewriteRuleTokenStream stream_EVENTS=new RewriteRuleTokenStream(adaptor,"token EVENTS");
        RewriteRuleTokenStream stream_WHEN=new RewriteRuleTokenStream(adaptor,"token WHEN");
        RewriteRuleTokenStream stream_EVERY_EXPR=new RewriteRuleTokenStream(adaptor,"token EVERY_EXPR");
        RewriteRuleTokenStream stream_ALL=new RewriteRuleTokenStream(adaptor,"token ALL");
        RewriteRuleTokenStream stream_FIRST=new RewriteRuleTokenStream(adaptor,"token FIRST");
        RewriteRuleSubtreeStream stream_crontabLimitParameterSet=new RewriteRuleSubtreeStream(adaptor,"rule crontabLimitParameterSet");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_timePeriod=new RewriteRuleSubtreeStream(adaptor,"rule timePeriod");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_onSetExpr=new RewriteRuleSubtreeStream(adaptor,"rule onSetExpr");
         paraphrases.push("output rate clause"); 
        try {
            // EsperEPL2Grammar.g:799:2: ( (k= ALL | k= FIRST | k= LAST | k= SNAPSHOT )? ( (ev= EVERY_EXPR ( ( timePeriod )=> timePeriod | ( number | i= IDENT ) (e= EVENTS ) ) ) | (at= AT crontabLimitParameterSet ) | (wh= WHEN expression ( THEN onSetExpr )? ) ) -> {$ev != null && $e != null}? ^( EVENT_LIMIT_EXPR ( $k)? ( number )? ( $i)? ) -> {$ev != null}? ^( TIMEPERIOD_LIMIT_EXPR ( $k)? timePeriod ) -> {$at != null}? ^( CRONTAB_LIMIT_EXPR ( $k)? crontabLimitParameterSet ) -> ^( WHEN_LIMIT_EXPR ( $k)? expression ( onSetExpr )? ) )
            // EsperEPL2Grammar.g:799:6: (k= ALL | k= FIRST | k= LAST | k= SNAPSHOT )? ( (ev= EVERY_EXPR ( ( timePeriod )=> timePeriod | ( number | i= IDENT ) (e= EVENTS ) ) ) | (at= AT crontabLimitParameterSet ) | (wh= WHEN expression ( THEN onSetExpr )? ) )
            {
            // EsperEPL2Grammar.g:799:6: (k= ALL | k= FIRST | k= LAST | k= SNAPSHOT )?
            int alt78=5;
            switch ( input.LA(1) ) {
                case ALL:
                    {
                    alt78=1;
                    }
                    break;
                case FIRST:
                    {
                    alt78=2;
                    }
                    break;
                case LAST:
                    {
                    alt78=3;
                    }
                    break;
                case SNAPSHOT:
                    {
                    alt78=4;
                    }
                    break;
            }

            switch (alt78) {
                case 1 :
                    // EsperEPL2Grammar.g:799:7: k= ALL
                    {
                    k=(Token)match(input,ALL,FOLLOW_ALL_in_outputLimit3898); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ALL.add(k);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:799:13: k= FIRST
                    {
                    k=(Token)match(input,FIRST,FOLLOW_FIRST_in_outputLimit3902); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FIRST.add(k);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:799:21: k= LAST
                    {
                    k=(Token)match(input,LAST,FOLLOW_LAST_in_outputLimit3906); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LAST.add(k);


                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:799:28: k= SNAPSHOT
                    {
                    k=(Token)match(input,SNAPSHOT,FOLLOW_SNAPSHOT_in_outputLimit3910); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SNAPSHOT.add(k);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:800:8: ( (ev= EVERY_EXPR ( ( timePeriod )=> timePeriod | ( number | i= IDENT ) (e= EVENTS ) ) ) | (at= AT crontabLimitParameterSet ) | (wh= WHEN expression ( THEN onSetExpr )? ) )
            int alt82=3;
            switch ( input.LA(1) ) {
            case EVERY_EXPR:
                {
                alt82=1;
                }
                break;
            case AT:
                {
                alt82=2;
                }
                break;
            case WHEN:
                {
                alt82=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 82, 0, input);

                throw nvae;
            }

            switch (alt82) {
                case 1 :
                    // EsperEPL2Grammar.g:801:10: (ev= EVERY_EXPR ( ( timePeriod )=> timePeriod | ( number | i= IDENT ) (e= EVENTS ) ) )
                    {
                    // EsperEPL2Grammar.g:801:10: (ev= EVERY_EXPR ( ( timePeriod )=> timePeriod | ( number | i= IDENT ) (e= EVENTS ) ) )
                    // EsperEPL2Grammar.g:801:12: ev= EVERY_EXPR ( ( timePeriod )=> timePeriod | ( number | i= IDENT ) (e= EVENTS ) )
                    {
                    ev=(Token)match(input,EVERY_EXPR,FOLLOW_EVERY_EXPR_in_outputLimit3937); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EVERY_EXPR.add(ev);

                    // EsperEPL2Grammar.g:802:5: ( ( timePeriod )=> timePeriod | ( number | i= IDENT ) (e= EVENTS ) )
                    int alt80=2;
                    int LA80_0 = input.LA(1);

                    if ( (LA80_0==NUM_INT) ) {
                        int LA80_1 = input.LA(2);

                        if ( (LA80_1==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt80=1;
                        }
                        else if ( (LA80_1==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt80=1;
                        }
                        else if ( (LA80_1==EVENTS) ) {
                            alt80=2;
                        }
                        else if ( (LA80_1==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt80=1;
                        }
                        else if ( (LA80_1==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt80=1;
                        }
                        else if ( (LA80_1==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt80=1;
                        }
                        else if ( (LA80_1==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt80=1;
                        }
                        else if ( (LA80_1==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt80=1;
                        }
                        else if ( (LA80_1==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt80=1;
                        }
                        else if ( (LA80_1==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt80=1;
                        }
                        else if ( (LA80_1==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt80=1;
                        }
                        else if ( (LA80_1==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt80=1;
                        }
                        else if ( (LA80_1==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt80=1;
                        }
                        else if ( (LA80_1==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt80=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 80, 1, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA80_0==NUM_LONG) ) {
                        int LA80_2 = input.LA(2);

                        if ( (LA80_2==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt80=1;
                        }
                        else if ( (LA80_2==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt80=1;
                        }
                        else if ( (LA80_2==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt80=1;
                        }
                        else if ( (LA80_2==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt80=1;
                        }
                        else if ( (LA80_2==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt80=1;
                        }
                        else if ( (LA80_2==EVENTS) ) {
                            alt80=2;
                        }
                        else if ( (LA80_2==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt80=1;
                        }
                        else if ( (LA80_2==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt80=1;
                        }
                        else if ( (LA80_2==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt80=1;
                        }
                        else if ( (LA80_2==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt80=1;
                        }
                        else if ( (LA80_2==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt80=1;
                        }
                        else if ( (LA80_2==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt80=1;
                        }
                        else if ( (LA80_2==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt80=1;
                        }
                        else if ( (LA80_2==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt80=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 80, 2, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA80_0==NUM_FLOAT) ) {
                        int LA80_3 = input.LA(2);

                        if ( (LA80_3==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt80=1;
                        }
                        else if ( (LA80_3==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt80=1;
                        }
                        else if ( (LA80_3==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt80=1;
                        }
                        else if ( (LA80_3==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt80=1;
                        }
                        else if ( (LA80_3==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt80=1;
                        }
                        else if ( (LA80_3==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt80=1;
                        }
                        else if ( (LA80_3==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt80=1;
                        }
                        else if ( (LA80_3==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt80=1;
                        }
                        else if ( (LA80_3==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt80=1;
                        }
                        else if ( (LA80_3==EVENTS) ) {
                            alt80=2;
                        }
                        else if ( (LA80_3==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt80=1;
                        }
                        else if ( (LA80_3==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt80=1;
                        }
                        else if ( (LA80_3==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt80=1;
                        }
                        else if ( (LA80_3==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt80=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 80, 3, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA80_0==NUM_DOUBLE) ) {
                        int LA80_4 = input.LA(2);

                        if ( (LA80_4==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt80=1;
                        }
                        else if ( (LA80_4==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt80=1;
                        }
                        else if ( (LA80_4==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt80=1;
                        }
                        else if ( (LA80_4==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt80=1;
                        }
                        else if ( (LA80_4==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt80=1;
                        }
                        else if ( (LA80_4==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt80=1;
                        }
                        else if ( (LA80_4==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt80=1;
                        }
                        else if ( (LA80_4==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt80=1;
                        }
                        else if ( (LA80_4==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt80=1;
                        }
                        else if ( (LA80_4==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt80=1;
                        }
                        else if ( (LA80_4==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt80=1;
                        }
                        else if ( (LA80_4==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt80=1;
                        }
                        else if ( (LA80_4==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt80=1;
                        }
                        else if ( (LA80_4==EVENTS) ) {
                            alt80=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 80, 4, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA80_0==IDENT) ) {
                        int LA80_5 = input.LA(2);

                        if ( (LA80_5==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt80=1;
                        }
                        else if ( (LA80_5==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt80=1;
                        }
                        else if ( (LA80_5==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt80=1;
                        }
                        else if ( (LA80_5==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt80=1;
                        }
                        else if ( (LA80_5==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt80=1;
                        }
                        else if ( (LA80_5==EVENTS) ) {
                            alt80=2;
                        }
                        else if ( (LA80_5==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt80=1;
                        }
                        else if ( (LA80_5==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt80=1;
                        }
                        else if ( (LA80_5==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt80=1;
                        }
                        else if ( (LA80_5==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt80=1;
                        }
                        else if ( (LA80_5==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt80=1;
                        }
                        else if ( (LA80_5==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt80=1;
                        }
                        else if ( (LA80_5==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt80=1;
                        }
                        else if ( (LA80_5==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt80=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 80, 5, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA80_0==QUESTION) && (synpred2_EsperEPL2Grammar())) {
                        alt80=1;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 80, 0, input);

                        throw nvae;
                    }
                    switch (alt80) {
                        case 1 :
                            // EsperEPL2Grammar.g:803:7: ( timePeriod )=> timePeriod
                            {
                            pushFollow(FOLLOW_timePeriod_in_outputLimit3959);
                            timePeriod208=timePeriod();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_timePeriod.add(timePeriod208.getTree());

                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:804:7: ( number | i= IDENT ) (e= EVENTS )
                            {
                            // EsperEPL2Grammar.g:804:7: ( number | i= IDENT )
                            int alt79=2;
                            int LA79_0 = input.LA(1);

                            if ( (LA79_0==NUM_DOUBLE||LA79_0==NUM_INT||(LA79_0>=NUM_LONG && LA79_0<=NUM_FLOAT)) ) {
                                alt79=1;
                            }
                            else if ( (LA79_0==IDENT) ) {
                                alt79=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 79, 0, input);

                                throw nvae;
                            }
                            switch (alt79) {
                                case 1 :
                                    // EsperEPL2Grammar.g:804:8: number
                                    {
                                    pushFollow(FOLLOW_number_in_outputLimit3968);
                                    number209=number();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_number.add(number209.getTree());

                                    }
                                    break;
                                case 2 :
                                    // EsperEPL2Grammar.g:804:17: i= IDENT
                                    {
                                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_outputLimit3974); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                                    }
                                    break;

                            }

                            // EsperEPL2Grammar.g:804:26: (e= EVENTS )
                            // EsperEPL2Grammar.g:804:27: e= EVENTS
                            {
                            e=(Token)match(input,EVENTS,FOLLOW_EVENTS_in_outputLimit3980); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_EVENTS.add(e);


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:808:3: (at= AT crontabLimitParameterSet )
                    {
                    // EsperEPL2Grammar.g:808:3: (at= AT crontabLimitParameterSet )
                    // EsperEPL2Grammar.g:808:5: at= AT crontabLimitParameterSet
                    {
                    at=(Token)match(input,AT,FOLLOW_AT_in_outputLimit4003); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AT.add(at);

                    pushFollow(FOLLOW_crontabLimitParameterSet_in_outputLimit4005);
                    crontabLimitParameterSet210=crontabLimitParameterSet();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_crontabLimitParameterSet.add(crontabLimitParameterSet210.getTree());

                    }


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:810:3: (wh= WHEN expression ( THEN onSetExpr )? )
                    {
                    // EsperEPL2Grammar.g:810:3: (wh= WHEN expression ( THEN onSetExpr )? )
                    // EsperEPL2Grammar.g:810:5: wh= WHEN expression ( THEN onSetExpr )?
                    {
                    wh=(Token)match(input,WHEN,FOLLOW_WHEN_in_outputLimit4019); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHEN.add(wh);

                    pushFollow(FOLLOW_expression_in_outputLimit4021);
                    expression211=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression211.getTree());
                    // EsperEPL2Grammar.g:810:24: ( THEN onSetExpr )?
                    int alt81=2;
                    int LA81_0 = input.LA(1);

                    if ( (LA81_0==THEN) ) {
                        alt81=1;
                    }
                    switch (alt81) {
                        case 1 :
                            // EsperEPL2Grammar.g:810:25: THEN onSetExpr
                            {
                            THEN212=(Token)match(input,THEN,FOLLOW_THEN_in_outputLimit4024); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_THEN.add(THEN212);

                            pushFollow(FOLLOW_onSetExpr_in_outputLimit4026);
                            onSetExpr213=onSetExpr();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_onSetExpr.add(onSetExpr213.getTree());

                            }
                            break;

                    }


                    }


                    }
                    break;

            }



            // AST REWRITE
            // elements: crontabLimitParameterSet, onSetExpr, expression, i, timePeriod, k, k, number, k, k
            // token labels: k, i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_k=new RewriteRuleTokenStream(adaptor,"token k",k);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 812:6: -> {$ev != null && $e != null}? ^( EVENT_LIMIT_EXPR ( $k)? ( number )? ( $i)? )
            if (ev != null && e != null) {
                // EsperEPL2Grammar.g:812:38: ^( EVENT_LIMIT_EXPR ( $k)? ( number )? ( $i)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_LIMIT_EXPR, "EVENT_LIMIT_EXPR"), root_1);

                // EsperEPL2Grammar.g:812:57: ( $k)?
                if ( stream_k.hasNext() ) {
                    adaptor.addChild(root_1, stream_k.nextNode());

                }
                stream_k.reset();
                // EsperEPL2Grammar.g:812:61: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:812:69: ( $i)?
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());

                }
                stream_i.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 813:6: -> {$ev != null}? ^( TIMEPERIOD_LIMIT_EXPR ( $k)? timePeriod )
            if (ev != null) {
                // EsperEPL2Grammar.g:813:24: ^( TIMEPERIOD_LIMIT_EXPR ( $k)? timePeriod )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TIMEPERIOD_LIMIT_EXPR, "TIMEPERIOD_LIMIT_EXPR"), root_1);

                // EsperEPL2Grammar.g:813:48: ( $k)?
                if ( stream_k.hasNext() ) {
                    adaptor.addChild(root_1, stream_k.nextNode());

                }
                stream_k.reset();
                adaptor.addChild(root_1, stream_timePeriod.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 814:6: -> {$at != null}? ^( CRONTAB_LIMIT_EXPR ( $k)? crontabLimitParameterSet )
            if (at != null) {
                // EsperEPL2Grammar.g:814:24: ^( CRONTAB_LIMIT_EXPR ( $k)? crontabLimitParameterSet )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CRONTAB_LIMIT_EXPR, "CRONTAB_LIMIT_EXPR"), root_1);

                // EsperEPL2Grammar.g:814:45: ( $k)?
                if ( stream_k.hasNext() ) {
                    adaptor.addChild(root_1, stream_k.nextNode());

                }
                stream_k.reset();
                adaptor.addChild(root_1, stream_crontabLimitParameterSet.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 815:6: -> ^( WHEN_LIMIT_EXPR ( $k)? expression ( onSetExpr )? )
            {
                // EsperEPL2Grammar.g:815:9: ^( WHEN_LIMIT_EXPR ( $k)? expression ( onSetExpr )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WHEN_LIMIT_EXPR, "WHEN_LIMIT_EXPR"), root_1);

                // EsperEPL2Grammar.g:815:27: ( $k)?
                if ( stream_k.hasNext() ) {
                    adaptor.addChild(root_1, stream_k.nextNode());

                }
                stream_k.reset();
                adaptor.addChild(root_1, stream_expression.nextTree());
                // EsperEPL2Grammar.g:815:42: ( onSetExpr )?
                if ( stream_onSetExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetExpr.nextTree());

                }
                stream_onSetExpr.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "outputLimit"

    public static class rowLimit_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rowLimit"
    // EsperEPL2Grammar.g:818:1: rowLimit : (n1= numberconstant | i1= IDENT ) ( (c= COMMA | o= OFFSET ) (n2= numberconstant | i2= IDENT ) )? -> ^( ROW_LIMIT_EXPR ( $n1)? ( $i1)? ( $n2)? ( $i2)? ( $o)? ( $c)? ) ;
    public final EsperEPL2GrammarParser.rowLimit_return rowLimit() throws RecognitionException {
        EsperEPL2GrammarParser.rowLimit_return retval = new EsperEPL2GrammarParser.rowLimit_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i1=null;
        Token c=null;
        Token o=null;
        Token i2=null;
        EsperEPL2GrammarParser.numberconstant_return n1 = null;

        EsperEPL2GrammarParser.numberconstant_return n2 = null;


        CommonTree i1_tree=null;
        CommonTree c_tree=null;
        CommonTree o_tree=null;
        CommonTree i2_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_OFFSET=new RewriteRuleTokenStream(adaptor,"token OFFSET");
        RewriteRuleSubtreeStream stream_numberconstant=new RewriteRuleSubtreeStream(adaptor,"rule numberconstant");
         paraphrases.push("row limit clause"); 
        try {
            // EsperEPL2Grammar.g:821:2: ( (n1= numberconstant | i1= IDENT ) ( (c= COMMA | o= OFFSET ) (n2= numberconstant | i2= IDENT ) )? -> ^( ROW_LIMIT_EXPR ( $n1)? ( $i1)? ( $n2)? ( $i2)? ( $o)? ( $c)? ) )
            // EsperEPL2Grammar.g:821:6: (n1= numberconstant | i1= IDENT ) ( (c= COMMA | o= OFFSET ) (n2= numberconstant | i2= IDENT ) )?
            {
            // EsperEPL2Grammar.g:821:6: (n1= numberconstant | i1= IDENT )
            int alt83=2;
            int LA83_0 = input.LA(1);

            if ( (LA83_0==NUM_DOUBLE||(LA83_0>=PLUS && LA83_0<=MINUS)||LA83_0==NUM_INT||(LA83_0>=NUM_LONG && LA83_0<=NUM_FLOAT)) ) {
                alt83=1;
            }
            else if ( (LA83_0==IDENT) ) {
                alt83=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 83, 0, input);

                throw nvae;
            }
            switch (alt83) {
                case 1 :
                    // EsperEPL2Grammar.g:821:7: n1= numberconstant
                    {
                    pushFollow(FOLLOW_numberconstant_in_rowLimit4155);
                    n1=numberconstant();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_numberconstant.add(n1.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:821:27: i1= IDENT
                    {
                    i1=(Token)match(input,IDENT,FOLLOW_IDENT_in_rowLimit4161); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i1);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:821:37: ( (c= COMMA | o= OFFSET ) (n2= numberconstant | i2= IDENT ) )?
            int alt86=2;
            int LA86_0 = input.LA(1);

            if ( (LA86_0==OFFSET||LA86_0==COMMA) ) {
                alt86=1;
            }
            switch (alt86) {
                case 1 :
                    // EsperEPL2Grammar.g:821:38: (c= COMMA | o= OFFSET ) (n2= numberconstant | i2= IDENT )
                    {
                    // EsperEPL2Grammar.g:821:38: (c= COMMA | o= OFFSET )
                    int alt84=2;
                    int LA84_0 = input.LA(1);

                    if ( (LA84_0==COMMA) ) {
                        alt84=1;
                    }
                    else if ( (LA84_0==OFFSET) ) {
                        alt84=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 84, 0, input);

                        throw nvae;
                    }
                    switch (alt84) {
                        case 1 :
                            // EsperEPL2Grammar.g:821:39: c= COMMA
                            {
                            c=(Token)match(input,COMMA,FOLLOW_COMMA_in_rowLimit4168); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COMMA.add(c);


                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:821:49: o= OFFSET
                            {
                            o=(Token)match(input,OFFSET,FOLLOW_OFFSET_in_rowLimit4174); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_OFFSET.add(o);


                            }
                            break;

                    }

                    // EsperEPL2Grammar.g:821:59: (n2= numberconstant | i2= IDENT )
                    int alt85=2;
                    int LA85_0 = input.LA(1);

                    if ( (LA85_0==NUM_DOUBLE||(LA85_0>=PLUS && LA85_0<=MINUS)||LA85_0==NUM_INT||(LA85_0>=NUM_LONG && LA85_0<=NUM_FLOAT)) ) {
                        alt85=1;
                    }
                    else if ( (LA85_0==IDENT) ) {
                        alt85=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 85, 0, input);

                        throw nvae;
                    }
                    switch (alt85) {
                        case 1 :
                            // EsperEPL2Grammar.g:821:60: n2= numberconstant
                            {
                            pushFollow(FOLLOW_numberconstant_in_rowLimit4180);
                            n2=numberconstant();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_numberconstant.add(n2.getTree());

                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:821:80: i2= IDENT
                            {
                            i2=(Token)match(input,IDENT,FOLLOW_IDENT_in_rowLimit4186); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IDENT.add(i2);


                            }
                            break;

                    }


                    }
                    break;

            }



            // AST REWRITE
            // elements: i1, c, n1, n2, o, i2
            // token labels: c, o, i2, i1
            // rule labels: n1, retval, n2
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_c=new RewriteRuleTokenStream(adaptor,"token c",c);
            RewriteRuleTokenStream stream_o=new RewriteRuleTokenStream(adaptor,"token o",o);
            RewriteRuleTokenStream stream_i2=new RewriteRuleTokenStream(adaptor,"token i2",i2);
            RewriteRuleTokenStream stream_i1=new RewriteRuleTokenStream(adaptor,"token i1",i1);
            RewriteRuleSubtreeStream stream_n1=new RewriteRuleSubtreeStream(adaptor,"token n1",n1!=null?n1.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_n2=new RewriteRuleSubtreeStream(adaptor,"token n2",n2!=null?n2.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 822:6: -> ^( ROW_LIMIT_EXPR ( $n1)? ( $i1)? ( $n2)? ( $i2)? ( $o)? ( $c)? )
            {
                // EsperEPL2Grammar.g:822:9: ^( ROW_LIMIT_EXPR ( $n1)? ( $i1)? ( $n2)? ( $i2)? ( $o)? ( $c)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ROW_LIMIT_EXPR, "ROW_LIMIT_EXPR"), root_1);

                // EsperEPL2Grammar.g:822:26: ( $n1)?
                if ( stream_n1.hasNext() ) {
                    adaptor.addChild(root_1, stream_n1.nextTree());

                }
                stream_n1.reset();
                // EsperEPL2Grammar.g:822:31: ( $i1)?
                if ( stream_i1.hasNext() ) {
                    adaptor.addChild(root_1, stream_i1.nextNode());

                }
                stream_i1.reset();
                // EsperEPL2Grammar.g:822:36: ( $n2)?
                if ( stream_n2.hasNext() ) {
                    adaptor.addChild(root_1, stream_n2.nextTree());

                }
                stream_n2.reset();
                // EsperEPL2Grammar.g:822:41: ( $i2)?
                if ( stream_i2.hasNext() ) {
                    adaptor.addChild(root_1, stream_i2.nextNode());

                }
                stream_i2.reset();
                // EsperEPL2Grammar.g:822:46: ( $o)?
                if ( stream_o.hasNext() ) {
                    adaptor.addChild(root_1, stream_o.nextNode());

                }
                stream_o.reset();
                // EsperEPL2Grammar.g:822:50: ( $c)?
                if ( stream_c.hasNext() ) {
                    adaptor.addChild(root_1, stream_c.nextNode());

                }
                stream_c.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "rowLimit"

    public static class crontabLimitParameterSet_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "crontabLimitParameterSet"
    // EsperEPL2Grammar.g:825:1: crontabLimitParameterSet : LPAREN expressionWithTime COMMA expressionWithTime COMMA expressionWithTime COMMA expressionWithTime COMMA expressionWithTime ( COMMA expressionWithTime )? RPAREN -> ^( CRONTAB_LIMIT_EXPR_PARAM ( expressionWithTime )* ) ;
    public final EsperEPL2GrammarParser.crontabLimitParameterSet_return crontabLimitParameterSet() throws RecognitionException {
        EsperEPL2GrammarParser.crontabLimitParameterSet_return retval = new EsperEPL2GrammarParser.crontabLimitParameterSet_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LPAREN214=null;
        Token COMMA216=null;
        Token COMMA218=null;
        Token COMMA220=null;
        Token COMMA222=null;
        Token COMMA224=null;
        Token RPAREN226=null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime215 = null;

        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime217 = null;

        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime219 = null;

        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime221 = null;

        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime223 = null;

        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime225 = null;


        CommonTree LPAREN214_tree=null;
        CommonTree COMMA216_tree=null;
        CommonTree COMMA218_tree=null;
        CommonTree COMMA220_tree=null;
        CommonTree COMMA222_tree=null;
        CommonTree COMMA224_tree=null;
        CommonTree RPAREN226_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionWithTime=new RewriteRuleSubtreeStream(adaptor,"rule expressionWithTime");
        try {
            // EsperEPL2Grammar.g:826:2: ( LPAREN expressionWithTime COMMA expressionWithTime COMMA expressionWithTime COMMA expressionWithTime COMMA expressionWithTime ( COMMA expressionWithTime )? RPAREN -> ^( CRONTAB_LIMIT_EXPR_PARAM ( expressionWithTime )* ) )
            // EsperEPL2Grammar.g:826:4: LPAREN expressionWithTime COMMA expressionWithTime COMMA expressionWithTime COMMA expressionWithTime COMMA expressionWithTime ( COMMA expressionWithTime )? RPAREN
            {
            LPAREN214=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_crontabLimitParameterSet4238); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN214);

            pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet4240);
            expressionWithTime215=expressionWithTime();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime215.getTree());
            COMMA216=(Token)match(input,COMMA,FOLLOW_COMMA_in_crontabLimitParameterSet4242); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COMMA.add(COMMA216);

            pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet4244);
            expressionWithTime217=expressionWithTime();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime217.getTree());
            COMMA218=(Token)match(input,COMMA,FOLLOW_COMMA_in_crontabLimitParameterSet4246); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COMMA.add(COMMA218);

            pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet4248);
            expressionWithTime219=expressionWithTime();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime219.getTree());
            COMMA220=(Token)match(input,COMMA,FOLLOW_COMMA_in_crontabLimitParameterSet4250); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COMMA.add(COMMA220);

            pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet4252);
            expressionWithTime221=expressionWithTime();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime221.getTree());
            COMMA222=(Token)match(input,COMMA,FOLLOW_COMMA_in_crontabLimitParameterSet4254); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COMMA.add(COMMA222);

            pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet4256);
            expressionWithTime223=expressionWithTime();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime223.getTree());
            // EsperEPL2Grammar.g:826:130: ( COMMA expressionWithTime )?
            int alt87=2;
            int LA87_0 = input.LA(1);

            if ( (LA87_0==COMMA) ) {
                alt87=1;
            }
            switch (alt87) {
                case 1 :
                    // EsperEPL2Grammar.g:826:131: COMMA expressionWithTime
                    {
                    COMMA224=(Token)match(input,COMMA,FOLLOW_COMMA_in_crontabLimitParameterSet4259); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA224);

                    pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet4261);
                    expressionWithTime225=expressionWithTime();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime225.getTree());

                    }
                    break;

            }

            RPAREN226=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_crontabLimitParameterSet4265); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN226);



            // AST REWRITE
            // elements: expressionWithTime
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 827:3: -> ^( CRONTAB_LIMIT_EXPR_PARAM ( expressionWithTime )* )
            {
                // EsperEPL2Grammar.g:827:6: ^( CRONTAB_LIMIT_EXPR_PARAM ( expressionWithTime )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CRONTAB_LIMIT_EXPR_PARAM, "CRONTAB_LIMIT_EXPR_PARAM"), root_1);

                // EsperEPL2Grammar.g:827:33: ( expressionWithTime )*
                while ( stream_expressionWithTime.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionWithTime.nextTree());

                }
                stream_expressionWithTime.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "crontabLimitParameterSet"

    public static class whenClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "whenClause"
    // EsperEPL2Grammar.g:830:1: whenClause : ( WHEN expression THEN expression ) ;
    public final EsperEPL2GrammarParser.whenClause_return whenClause() throws RecognitionException {
        EsperEPL2GrammarParser.whenClause_return retval = new EsperEPL2GrammarParser.whenClause_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token WHEN227=null;
        Token THEN229=null;
        EsperEPL2GrammarParser.expression_return expression228 = null;

        EsperEPL2GrammarParser.expression_return expression230 = null;


        CommonTree WHEN227_tree=null;
        CommonTree THEN229_tree=null;

        try {
            // EsperEPL2Grammar.g:831:2: ( ( WHEN expression THEN expression ) )
            // EsperEPL2Grammar.g:831:4: ( WHEN expression THEN expression )
            {
            root_0 = (CommonTree)adaptor.nil();

            // EsperEPL2Grammar.g:831:4: ( WHEN expression THEN expression )
            // EsperEPL2Grammar.g:831:5: WHEN expression THEN expression
            {
            WHEN227=(Token)match(input,WHEN,FOLLOW_WHEN_in_whenClause4295); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_whenClause4298);
            expression228=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression228.getTree());
            THEN229=(Token)match(input,THEN,FOLLOW_THEN_in_whenClause4300); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_whenClause4303);
            expression230=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression230.getTree());

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "whenClause"

    public static class elseClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elseClause"
    // EsperEPL2Grammar.g:834:1: elseClause : ( ELSE expression ) ;
    public final EsperEPL2GrammarParser.elseClause_return elseClause() throws RecognitionException {
        EsperEPL2GrammarParser.elseClause_return retval = new EsperEPL2GrammarParser.elseClause_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token ELSE231=null;
        EsperEPL2GrammarParser.expression_return expression232 = null;


        CommonTree ELSE231_tree=null;

        try {
            // EsperEPL2Grammar.g:835:2: ( ( ELSE expression ) )
            // EsperEPL2Grammar.g:835:4: ( ELSE expression )
            {
            root_0 = (CommonTree)adaptor.nil();

            // EsperEPL2Grammar.g:835:4: ( ELSE expression )
            // EsperEPL2Grammar.g:835:5: ELSE expression
            {
            ELSE231=(Token)match(input,ELSE,FOLLOW_ELSE_in_elseClause4316); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_elseClause4319);
            expression232=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression232.getTree());

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "elseClause"

    public static class expression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expression"
    // EsperEPL2Grammar.g:839:1: expression : caseExpression ;
    public final EsperEPL2GrammarParser.expression_return expression() throws RecognitionException {
        EsperEPL2GrammarParser.expression_return retval = new EsperEPL2GrammarParser.expression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.caseExpression_return caseExpression233 = null;



        try {
            // EsperEPL2Grammar.g:840:2: ( caseExpression )
            // EsperEPL2Grammar.g:840:4: caseExpression
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_caseExpression_in_expression4332);
            caseExpression233=caseExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, caseExpression233.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "expression"

    public static class caseExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "caseExpression"
    // EsperEPL2Grammar.g:843:1: caseExpression : ( CASE ( whenClause )+ ( elseClause )? END | CASE expression ( whenClause )+ ( elseClause )? END -> ^( CASE2 expression ( whenClause )+ ( elseClause )? ) | evalOrExpression );
    public final EsperEPL2GrammarParser.caseExpression_return caseExpression() throws RecognitionException {
        EsperEPL2GrammarParser.caseExpression_return retval = new EsperEPL2GrammarParser.caseExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token CASE234=null;
        Token END237=null;
        Token CASE238=null;
        Token END242=null;
        EsperEPL2GrammarParser.whenClause_return whenClause235 = null;

        EsperEPL2GrammarParser.elseClause_return elseClause236 = null;

        EsperEPL2GrammarParser.expression_return expression239 = null;

        EsperEPL2GrammarParser.whenClause_return whenClause240 = null;

        EsperEPL2GrammarParser.elseClause_return elseClause241 = null;

        EsperEPL2GrammarParser.evalOrExpression_return evalOrExpression243 = null;


        CommonTree CASE234_tree=null;
        CommonTree END237_tree=null;
        CommonTree CASE238_tree=null;
        CommonTree END242_tree=null;
        RewriteRuleTokenStream stream_END=new RewriteRuleTokenStream(adaptor,"token END");
        RewriteRuleTokenStream stream_CASE=new RewriteRuleTokenStream(adaptor,"token CASE");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_whenClause=new RewriteRuleSubtreeStream(adaptor,"rule whenClause");
        RewriteRuleSubtreeStream stream_elseClause=new RewriteRuleSubtreeStream(adaptor,"rule elseClause");
        try {
            // EsperEPL2Grammar.g:844:2: ( CASE ( whenClause )+ ( elseClause )? END | CASE expression ( whenClause )+ ( elseClause )? END -> ^( CASE2 expression ( whenClause )+ ( elseClause )? ) | evalOrExpression )
            int alt92=3;
            alt92 = dfa92.predict(input);
            switch (alt92) {
                case 1 :
                    // EsperEPL2Grammar.g:844:4: CASE ( whenClause )+ ( elseClause )? END
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    if ( state.backtracking==0 ) {
                       paraphrases.push("case expression"); 
                    }
                    CASE234=(Token)match(input,CASE,FOLLOW_CASE_in_caseExpression4346); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CASE234_tree = (CommonTree)adaptor.create(CASE234);
                    root_0 = (CommonTree)adaptor.becomeRoot(CASE234_tree, root_0);
                    }
                    // EsperEPL2Grammar.g:844:52: ( whenClause )+
                    int cnt88=0;
                    loop88:
                    do {
                        int alt88=2;
                        int LA88_0 = input.LA(1);

                        if ( (LA88_0==WHEN) ) {
                            alt88=1;
                        }


                        switch (alt88) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:844:52: whenClause
                    	    {
                    	    pushFollow(FOLLOW_whenClause_in_caseExpression4349);
                    	    whenClause235=whenClause();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, whenClause235.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt88 >= 1 ) break loop88;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(88, input);
                                throw eee;
                        }
                        cnt88++;
                    } while (true);

                    // EsperEPL2Grammar.g:844:64: ( elseClause )?
                    int alt89=2;
                    int LA89_0 = input.LA(1);

                    if ( (LA89_0==ELSE) ) {
                        alt89=1;
                    }
                    switch (alt89) {
                        case 1 :
                            // EsperEPL2Grammar.g:844:64: elseClause
                            {
                            pushFollow(FOLLOW_elseClause_in_caseExpression4352);
                            elseClause236=elseClause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, elseClause236.getTree());

                            }
                            break;

                    }

                    END237=(Token)match(input,END,FOLLOW_END_in_caseExpression4355); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       paraphrases.pop(); 
                    }

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:845:4: CASE expression ( whenClause )+ ( elseClause )? END
                    {
                    if ( state.backtracking==0 ) {
                       paraphrases.push("case expression"); 
                    }
                    CASE238=(Token)match(input,CASE,FOLLOW_CASE_in_caseExpression4366); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CASE.add(CASE238);

                    pushFollow(FOLLOW_expression_in_caseExpression4368);
                    expression239=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression239.getTree());
                    // EsperEPL2Grammar.g:845:62: ( whenClause )+
                    int cnt90=0;
                    loop90:
                    do {
                        int alt90=2;
                        int LA90_0 = input.LA(1);

                        if ( (LA90_0==WHEN) ) {
                            alt90=1;
                        }


                        switch (alt90) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:845:62: whenClause
                    	    {
                    	    pushFollow(FOLLOW_whenClause_in_caseExpression4370);
                    	    whenClause240=whenClause();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_whenClause.add(whenClause240.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt90 >= 1 ) break loop90;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(90, input);
                                throw eee;
                        }
                        cnt90++;
                    } while (true);

                    // EsperEPL2Grammar.g:845:74: ( elseClause )?
                    int alt91=2;
                    int LA91_0 = input.LA(1);

                    if ( (LA91_0==ELSE) ) {
                        alt91=1;
                    }
                    switch (alt91) {
                        case 1 :
                            // EsperEPL2Grammar.g:845:74: elseClause
                            {
                            pushFollow(FOLLOW_elseClause_in_caseExpression4373);
                            elseClause241=elseClause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elseClause.add(elseClause241.getTree());

                            }
                            break;

                    }

                    END242=(Token)match(input,END,FOLLOW_END_in_caseExpression4376); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_END.add(END242);

                    if ( state.backtracking==0 ) {
                       paraphrases.pop(); 
                    }


                    // AST REWRITE
                    // elements: whenClause, expression, elseClause
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 846:4: -> ^( CASE2 expression ( whenClause )+ ( elseClause )? )
                    {
                        // EsperEPL2Grammar.g:846:7: ^( CASE2 expression ( whenClause )+ ( elseClause )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CASE2, "CASE2"), root_1);

                        adaptor.addChild(root_1, stream_expression.nextTree());
                        if ( !(stream_whenClause.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_whenClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_whenClause.nextTree());

                        }
                        stream_whenClause.reset();
                        // EsperEPL2Grammar.g:846:38: ( elseClause )?
                        if ( stream_elseClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_elseClause.nextTree());

                        }
                        stream_elseClause.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:847:4: evalOrExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_evalOrExpression_in_caseExpression4400);
                    evalOrExpression243=evalOrExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, evalOrExpression243.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "caseExpression"

    public static class evalOrExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "evalOrExpression"
    // EsperEPL2Grammar.g:850:1: evalOrExpression : evalAndExpression (op= OR_EXPR evalAndExpression )* -> {$op != null}? ^( EVAL_OR_EXPR ( evalAndExpression )* ) -> evalAndExpression ;
    public final EsperEPL2GrammarParser.evalOrExpression_return evalOrExpression() throws RecognitionException {
        EsperEPL2GrammarParser.evalOrExpression_return retval = new EsperEPL2GrammarParser.evalOrExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token op=null;
        EsperEPL2GrammarParser.evalAndExpression_return evalAndExpression244 = null;

        EsperEPL2GrammarParser.evalAndExpression_return evalAndExpression245 = null;


        CommonTree op_tree=null;
        RewriteRuleTokenStream stream_OR_EXPR=new RewriteRuleTokenStream(adaptor,"token OR_EXPR");
        RewriteRuleSubtreeStream stream_evalAndExpression=new RewriteRuleSubtreeStream(adaptor,"rule evalAndExpression");
        try {
            // EsperEPL2Grammar.g:851:2: ( evalAndExpression (op= OR_EXPR evalAndExpression )* -> {$op != null}? ^( EVAL_OR_EXPR ( evalAndExpression )* ) -> evalAndExpression )
            // EsperEPL2Grammar.g:851:4: evalAndExpression (op= OR_EXPR evalAndExpression )*
            {
            pushFollow(FOLLOW_evalAndExpression_in_evalOrExpression4411);
            evalAndExpression244=evalAndExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_evalAndExpression.add(evalAndExpression244.getTree());
            // EsperEPL2Grammar.g:851:22: (op= OR_EXPR evalAndExpression )*
            loop93:
            do {
                int alt93=2;
                int LA93_0 = input.LA(1);

                if ( (LA93_0==OR_EXPR) ) {
                    alt93=1;
                }


                switch (alt93) {
            	case 1 :
            	    // EsperEPL2Grammar.g:851:23: op= OR_EXPR evalAndExpression
            	    {
            	    op=(Token)match(input,OR_EXPR,FOLLOW_OR_EXPR_in_evalOrExpression4416); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_OR_EXPR.add(op);

            	    pushFollow(FOLLOW_evalAndExpression_in_evalOrExpression4418);
            	    evalAndExpression245=evalAndExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_evalAndExpression.add(evalAndExpression245.getTree());

            	    }
            	    break;

            	default :
            	    break loop93;
                }
            } while (true);



            // AST REWRITE
            // elements: evalAndExpression, evalAndExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 852:3: -> {$op != null}? ^( EVAL_OR_EXPR ( evalAndExpression )* )
            if (op != null) {
                // EsperEPL2Grammar.g:852:21: ^( EVAL_OR_EXPR ( evalAndExpression )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_OR_EXPR, "EVAL_OR_EXPR"), root_1);

                // EsperEPL2Grammar.g:852:36: ( evalAndExpression )*
                while ( stream_evalAndExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_evalAndExpression.nextTree());

                }
                stream_evalAndExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 853:3: -> evalAndExpression
            {
                adaptor.addChild(root_0, stream_evalAndExpression.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "evalOrExpression"

    public static class evalAndExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "evalAndExpression"
    // EsperEPL2Grammar.g:856:1: evalAndExpression : bitWiseExpression (op= AND_EXPR bitWiseExpression )* -> {$op != null}? ^( EVAL_AND_EXPR ( bitWiseExpression )+ ) -> bitWiseExpression ;
    public final EsperEPL2GrammarParser.evalAndExpression_return evalAndExpression() throws RecognitionException {
        EsperEPL2GrammarParser.evalAndExpression_return retval = new EsperEPL2GrammarParser.evalAndExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token op=null;
        EsperEPL2GrammarParser.bitWiseExpression_return bitWiseExpression246 = null;

        EsperEPL2GrammarParser.bitWiseExpression_return bitWiseExpression247 = null;


        CommonTree op_tree=null;
        RewriteRuleTokenStream stream_AND_EXPR=new RewriteRuleTokenStream(adaptor,"token AND_EXPR");
        RewriteRuleSubtreeStream stream_bitWiseExpression=new RewriteRuleSubtreeStream(adaptor,"rule bitWiseExpression");
        try {
            // EsperEPL2Grammar.g:857:2: ( bitWiseExpression (op= AND_EXPR bitWiseExpression )* -> {$op != null}? ^( EVAL_AND_EXPR ( bitWiseExpression )+ ) -> bitWiseExpression )
            // EsperEPL2Grammar.g:857:4: bitWiseExpression (op= AND_EXPR bitWiseExpression )*
            {
            pushFollow(FOLLOW_bitWiseExpression_in_evalAndExpression4450);
            bitWiseExpression246=bitWiseExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_bitWiseExpression.add(bitWiseExpression246.getTree());
            // EsperEPL2Grammar.g:857:22: (op= AND_EXPR bitWiseExpression )*
            loop94:
            do {
                int alt94=2;
                int LA94_0 = input.LA(1);

                if ( (LA94_0==AND_EXPR) ) {
                    alt94=1;
                }


                switch (alt94) {
            	case 1 :
            	    // EsperEPL2Grammar.g:857:23: op= AND_EXPR bitWiseExpression
            	    {
            	    op=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_evalAndExpression4455); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_AND_EXPR.add(op);

            	    pushFollow(FOLLOW_bitWiseExpression_in_evalAndExpression4457);
            	    bitWiseExpression247=bitWiseExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_bitWiseExpression.add(bitWiseExpression247.getTree());

            	    }
            	    break;

            	default :
            	    break loop94;
                }
            } while (true);



            // AST REWRITE
            // elements: bitWiseExpression, bitWiseExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 858:3: -> {$op != null}? ^( EVAL_AND_EXPR ( bitWiseExpression )+ )
            if (op != null) {
                // EsperEPL2Grammar.g:858:21: ^( EVAL_AND_EXPR ( bitWiseExpression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_AND_EXPR, "EVAL_AND_EXPR"), root_1);

                if ( !(stream_bitWiseExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_bitWiseExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_bitWiseExpression.nextTree());

                }
                stream_bitWiseExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 859:3: -> bitWiseExpression
            {
                adaptor.addChild(root_0, stream_bitWiseExpression.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "evalAndExpression"

    public static class bitWiseExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bitWiseExpression"
    // EsperEPL2Grammar.g:862:1: bitWiseExpression : negatedExpression ( ( BAND | BOR | BXOR ) negatedExpression )* ;
    public final EsperEPL2GrammarParser.bitWiseExpression_return bitWiseExpression() throws RecognitionException {
        EsperEPL2GrammarParser.bitWiseExpression_return retval = new EsperEPL2GrammarParser.bitWiseExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token BAND249=null;
        Token BOR250=null;
        Token BXOR251=null;
        EsperEPL2GrammarParser.negatedExpression_return negatedExpression248 = null;

        EsperEPL2GrammarParser.negatedExpression_return negatedExpression252 = null;


        CommonTree BAND249_tree=null;
        CommonTree BOR250_tree=null;
        CommonTree BXOR251_tree=null;

        try {
            // EsperEPL2Grammar.g:863:2: ( negatedExpression ( ( BAND | BOR | BXOR ) negatedExpression )* )
            // EsperEPL2Grammar.g:863:4: negatedExpression ( ( BAND | BOR | BXOR ) negatedExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_negatedExpression_in_bitWiseExpression4489);
            negatedExpression248=negatedExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, negatedExpression248.getTree());
            // EsperEPL2Grammar.g:863:22: ( ( BAND | BOR | BXOR ) negatedExpression )*
            loop96:
            do {
                int alt96=2;
                int LA96_0 = input.LA(1);

                if ( ((LA96_0>=BAND && LA96_0<=BXOR)) ) {
                    alt96=1;
                }


                switch (alt96) {
            	case 1 :
            	    // EsperEPL2Grammar.g:863:24: ( BAND | BOR | BXOR ) negatedExpression
            	    {
            	    // EsperEPL2Grammar.g:863:24: ( BAND | BOR | BXOR )
            	    int alt95=3;
            	    switch ( input.LA(1) ) {
            	    case BAND:
            	        {
            	        alt95=1;
            	        }
            	        break;
            	    case BOR:
            	        {
            	        alt95=2;
            	        }
            	        break;
            	    case BXOR:
            	        {
            	        alt95=3;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 95, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt95) {
            	        case 1 :
            	            // EsperEPL2Grammar.g:863:25: BAND
            	            {
            	            BAND249=(Token)match(input,BAND,FOLLOW_BAND_in_bitWiseExpression4494); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            BAND249_tree = (CommonTree)adaptor.create(BAND249);
            	            root_0 = (CommonTree)adaptor.becomeRoot(BAND249_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // EsperEPL2Grammar.g:863:31: BOR
            	            {
            	            BOR250=(Token)match(input,BOR,FOLLOW_BOR_in_bitWiseExpression4497); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            BOR250_tree = (CommonTree)adaptor.create(BOR250);
            	            root_0 = (CommonTree)adaptor.becomeRoot(BOR250_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 3 :
            	            // EsperEPL2Grammar.g:863:36: BXOR
            	            {
            	            BXOR251=(Token)match(input,BXOR,FOLLOW_BXOR_in_bitWiseExpression4500); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            BXOR251_tree = (CommonTree)adaptor.create(BXOR251);
            	            root_0 = (CommonTree)adaptor.becomeRoot(BXOR251_tree, root_0);
            	            }

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_negatedExpression_in_bitWiseExpression4504);
            	    negatedExpression252=negatedExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, negatedExpression252.getTree());

            	    }
            	    break;

            	default :
            	    break loop96;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "bitWiseExpression"

    public static class negatedExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "negatedExpression"
    // EsperEPL2Grammar.g:866:1: negatedExpression : ( evalEqualsExpression | NOT_EXPR evalEqualsExpression );
    public final EsperEPL2GrammarParser.negatedExpression_return negatedExpression() throws RecognitionException {
        EsperEPL2GrammarParser.negatedExpression_return retval = new EsperEPL2GrammarParser.negatedExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NOT_EXPR254=null;
        EsperEPL2GrammarParser.evalEqualsExpression_return evalEqualsExpression253 = null;

        EsperEPL2GrammarParser.evalEqualsExpression_return evalEqualsExpression255 = null;


        CommonTree NOT_EXPR254_tree=null;

        try {
            // EsperEPL2Grammar.g:867:2: ( evalEqualsExpression | NOT_EXPR evalEqualsExpression )
            int alt97=2;
            int LA97_0 = input.LA(1);

            if ( (LA97_0==WINDOW||LA97_0==ESCAPE||LA97_0==EVERY_EXPR||(LA97_0>=SUM && LA97_0<=COUNT)||LA97_0==OUTER||(LA97_0>=JOIN && LA97_0<=FULL)||(LA97_0>=EVENTS && LA97_0<=LAST)||(LA97_0>=UNIDIRECTIONAL && LA97_0<=CURRENT_TIMESTAMP)||LA97_0==SNAPSHOT||(LA97_0>=VARIABLE && LA97_0<=AT)||(LA97_0>=BOOLEAN_TRUE && LA97_0<=VALUE_NULL)||LA97_0==NUM_DOUBLE||LA97_0==IDENT||LA97_0==LPAREN||(LA97_0>=STRING_LITERAL && LA97_0<=QUOTED_STRING_LITERAL)||(LA97_0>=PLUS && LA97_0<=MINUS)||LA97_0==LCURLY||LA97_0==NUM_INT||LA97_0==QUESTION||(LA97_0>=TICKED_STRING_LITERAL && LA97_0<=NUM_FLOAT)) ) {
                alt97=1;
            }
            else if ( (LA97_0==NOT_EXPR) ) {
                alt97=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 97, 0, input);

                throw nvae;
            }
            switch (alt97) {
                case 1 :
                    // EsperEPL2Grammar.g:867:4: evalEqualsExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_evalEqualsExpression_in_negatedExpression4519);
                    evalEqualsExpression253=evalEqualsExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, evalEqualsExpression253.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:868:4: NOT_EXPR evalEqualsExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    NOT_EXPR254=(Token)match(input,NOT_EXPR,FOLLOW_NOT_EXPR_in_negatedExpression4525); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NOT_EXPR254_tree = (CommonTree)adaptor.create(NOT_EXPR254);
                    root_0 = (CommonTree)adaptor.becomeRoot(NOT_EXPR254_tree, root_0);
                    }
                    pushFollow(FOLLOW_evalEqualsExpression_in_negatedExpression4528);
                    evalEqualsExpression255=evalEqualsExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, evalEqualsExpression255.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "negatedExpression"

    public static class evalEqualsExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "evalEqualsExpression"
    // EsperEPL2Grammar.g:871:1: evalEqualsExpression : evalRelationalExpression ( (eq= EQUALS | is= IS | isnot= IS NOT_EXPR | sqlne= SQL_NE | ne= NOT_EQUAL ) ( evalRelationalExpression | (a= ANY | a= SOME | a= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) ) )* -> {$a == null && ($eq != null || $is != null)}? ^( EVAL_EQUALS_EXPR ( evalRelationalExpression )+ ) -> {$a != null && ($eq != null || $is != null)}? ^( EVAL_EQUALS_GROUP_EXPR evalRelationalExpression $a ( expressionList )? ( subSelectGroupExpression )? ) -> {$a == null && ($isnot != null || $sqlne != null || $ne != null)}? ^( EVAL_NOTEQUALS_EXPR ( evalRelationalExpression )+ ) -> {$a != null && ($isnot != null || $sqlne != null || $ne != null)}? ^( EVAL_NOTEQUALS_GROUP_EXPR evalRelationalExpression $a ( expressionList )? ( subSelectGroupExpression )? ) -> ( evalRelationalExpression )+ ;
    public final EsperEPL2GrammarParser.evalEqualsExpression_return evalEqualsExpression() throws RecognitionException {
        EsperEPL2GrammarParser.evalEqualsExpression_return retval = new EsperEPL2GrammarParser.evalEqualsExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token eq=null;
        Token is=null;
        Token isnot=null;
        Token sqlne=null;
        Token ne=null;
        Token a=null;
        Token NOT_EXPR257=null;
        Token LPAREN259=null;
        Token RPAREN261=null;
        EsperEPL2GrammarParser.evalRelationalExpression_return evalRelationalExpression256 = null;

        EsperEPL2GrammarParser.evalRelationalExpression_return evalRelationalExpression258 = null;

        EsperEPL2GrammarParser.expressionList_return expressionList260 = null;

        EsperEPL2GrammarParser.subSelectGroupExpression_return subSelectGroupExpression262 = null;


        CommonTree eq_tree=null;
        CommonTree is_tree=null;
        CommonTree isnot_tree=null;
        CommonTree sqlne_tree=null;
        CommonTree ne_tree=null;
        CommonTree a_tree=null;
        CommonTree NOT_EXPR257_tree=null;
        CommonTree LPAREN259_tree=null;
        CommonTree RPAREN261_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleTokenStream stream_ANY=new RewriteRuleTokenStream(adaptor,"token ANY");
        RewriteRuleTokenStream stream_NOT_EXPR=new RewriteRuleTokenStream(adaptor,"token NOT_EXPR");
        RewriteRuleTokenStream stream_SQL_NE=new RewriteRuleTokenStream(adaptor,"token SQL_NE");
        RewriteRuleTokenStream stream_NOT_EQUAL=new RewriteRuleTokenStream(adaptor,"token NOT_EQUAL");
        RewriteRuleTokenStream stream_IS=new RewriteRuleTokenStream(adaptor,"token IS");
        RewriteRuleTokenStream stream_SOME=new RewriteRuleTokenStream(adaptor,"token SOME");
        RewriteRuleTokenStream stream_ALL=new RewriteRuleTokenStream(adaptor,"token ALL");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_subSelectGroupExpression=new RewriteRuleSubtreeStream(adaptor,"rule subSelectGroupExpression");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_evalRelationalExpression=new RewriteRuleSubtreeStream(adaptor,"rule evalRelationalExpression");
        try {
            // EsperEPL2Grammar.g:872:2: ( evalRelationalExpression ( (eq= EQUALS | is= IS | isnot= IS NOT_EXPR | sqlne= SQL_NE | ne= NOT_EQUAL ) ( evalRelationalExpression | (a= ANY | a= SOME | a= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) ) )* -> {$a == null && ($eq != null || $is != null)}? ^( EVAL_EQUALS_EXPR ( evalRelationalExpression )+ ) -> {$a != null && ($eq != null || $is != null)}? ^( EVAL_EQUALS_GROUP_EXPR evalRelationalExpression $a ( expressionList )? ( subSelectGroupExpression )? ) -> {$a == null && ($isnot != null || $sqlne != null || $ne != null)}? ^( EVAL_NOTEQUALS_EXPR ( evalRelationalExpression )+ ) -> {$a != null && ($isnot != null || $sqlne != null || $ne != null)}? ^( EVAL_NOTEQUALS_GROUP_EXPR evalRelationalExpression $a ( expressionList )? ( subSelectGroupExpression )? ) -> ( evalRelationalExpression )+ )
            // EsperEPL2Grammar.g:872:4: evalRelationalExpression ( (eq= EQUALS | is= IS | isnot= IS NOT_EXPR | sqlne= SQL_NE | ne= NOT_EQUAL ) ( evalRelationalExpression | (a= ANY | a= SOME | a= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) ) )*
            {
            pushFollow(FOLLOW_evalRelationalExpression_in_evalEqualsExpression4541);
            evalRelationalExpression256=evalRelationalExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_evalRelationalExpression.add(evalRelationalExpression256.getTree());
            // EsperEPL2Grammar.g:872:29: ( (eq= EQUALS | is= IS | isnot= IS NOT_EXPR | sqlne= SQL_NE | ne= NOT_EQUAL ) ( evalRelationalExpression | (a= ANY | a= SOME | a= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) ) )*
            loop103:
            do {
                int alt103=2;
                int LA103_0 = input.LA(1);

                if ( (LA103_0==IS||LA103_0==EQUALS||(LA103_0>=SQL_NE && LA103_0<=NOT_EQUAL)) ) {
                    alt103=1;
                }


                switch (alt103) {
            	case 1 :
            	    // EsperEPL2Grammar.g:873:6: (eq= EQUALS | is= IS | isnot= IS NOT_EXPR | sqlne= SQL_NE | ne= NOT_EQUAL ) ( evalRelationalExpression | (a= ANY | a= SOME | a= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) )
            	    {
            	    // EsperEPL2Grammar.g:873:6: (eq= EQUALS | is= IS | isnot= IS NOT_EXPR | sqlne= SQL_NE | ne= NOT_EQUAL )
            	    int alt98=5;
            	    switch ( input.LA(1) ) {
            	    case EQUALS:
            	        {
            	        alt98=1;
            	        }
            	        break;
            	    case IS:
            	        {
            	        int LA98_2 = input.LA(2);

            	        if ( (LA98_2==NOT_EXPR) ) {
            	            alt98=3;
            	        }
            	        else if ( (LA98_2==WINDOW||LA98_2==ESCAPE||LA98_2==EVERY_EXPR||(LA98_2>=SUM && LA98_2<=COUNT)||LA98_2==OUTER||(LA98_2>=JOIN && LA98_2<=FULL)||(LA98_2>=ALL && LA98_2<=SOME)||(LA98_2>=EVENTS && LA98_2<=LAST)||(LA98_2>=UNIDIRECTIONAL && LA98_2<=CURRENT_TIMESTAMP)||LA98_2==SNAPSHOT||(LA98_2>=VARIABLE && LA98_2<=AT)||(LA98_2>=BOOLEAN_TRUE && LA98_2<=VALUE_NULL)||LA98_2==NUM_DOUBLE||LA98_2==IDENT||LA98_2==LPAREN||(LA98_2>=STRING_LITERAL && LA98_2<=QUOTED_STRING_LITERAL)||(LA98_2>=PLUS && LA98_2<=MINUS)||LA98_2==LCURLY||LA98_2==NUM_INT||LA98_2==QUESTION||(LA98_2>=TICKED_STRING_LITERAL && LA98_2<=NUM_FLOAT)) ) {
            	            alt98=2;
            	        }
            	        else {
            	            if (state.backtracking>0) {state.failed=true; return retval;}
            	            NoViableAltException nvae =
            	                new NoViableAltException("", 98, 2, input);

            	            throw nvae;
            	        }
            	        }
            	        break;
            	    case SQL_NE:
            	        {
            	        alt98=4;
            	        }
            	        break;
            	    case NOT_EQUAL:
            	        {
            	        alt98=5;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 98, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt98) {
            	        case 1 :
            	            // EsperEPL2Grammar.g:873:7: eq= EQUALS
            	            {
            	            eq=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_evalEqualsExpression4554); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_EQUALS.add(eq);


            	            }
            	            break;
            	        case 2 :
            	            // EsperEPL2Grammar.g:874:15: is= IS
            	            {
            	            is=(Token)match(input,IS,FOLLOW_IS_in_evalEqualsExpression4572); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_IS.add(is);


            	            }
            	            break;
            	        case 3 :
            	            // EsperEPL2Grammar.g:875:11: isnot= IS NOT_EXPR
            	            {
            	            isnot=(Token)match(input,IS,FOLLOW_IS_in_evalEqualsExpression4586); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_IS.add(isnot);

            	            NOT_EXPR257=(Token)match(input,NOT_EXPR,FOLLOW_NOT_EXPR_in_evalEqualsExpression4588); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NOT_EXPR.add(NOT_EXPR257);


            	            }
            	            break;
            	        case 4 :
            	            // EsperEPL2Grammar.g:876:11: sqlne= SQL_NE
            	            {
            	            sqlne=(Token)match(input,SQL_NE,FOLLOW_SQL_NE_in_evalEqualsExpression4602); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_SQL_NE.add(sqlne);


            	            }
            	            break;
            	        case 5 :
            	            // EsperEPL2Grammar.g:877:11: ne= NOT_EQUAL
            	            {
            	            ne=(Token)match(input,NOT_EQUAL,FOLLOW_NOT_EQUAL_in_evalEqualsExpression4616); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NOT_EQUAL.add(ne);


            	            }
            	            break;

            	    }

            	    // EsperEPL2Grammar.g:879:9: ( evalRelationalExpression | (a= ANY | a= SOME | a= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) )
            	    int alt102=2;
            	    int LA102_0 = input.LA(1);

            	    if ( (LA102_0==WINDOW||LA102_0==ESCAPE||LA102_0==EVERY_EXPR||(LA102_0>=SUM && LA102_0<=COUNT)||LA102_0==OUTER||(LA102_0>=JOIN && LA102_0<=FULL)||(LA102_0>=EVENTS && LA102_0<=LAST)||(LA102_0>=UNIDIRECTIONAL && LA102_0<=CURRENT_TIMESTAMP)||LA102_0==SNAPSHOT||(LA102_0>=VARIABLE && LA102_0<=AT)||(LA102_0>=BOOLEAN_TRUE && LA102_0<=VALUE_NULL)||LA102_0==NUM_DOUBLE||LA102_0==IDENT||LA102_0==LPAREN||(LA102_0>=STRING_LITERAL && LA102_0<=QUOTED_STRING_LITERAL)||(LA102_0>=PLUS && LA102_0<=MINUS)||LA102_0==LCURLY||LA102_0==NUM_INT||LA102_0==QUESTION||(LA102_0>=TICKED_STRING_LITERAL && LA102_0<=NUM_FLOAT)) ) {
            	        alt102=1;
            	    }
            	    else if ( ((LA102_0>=ALL && LA102_0<=SOME)) ) {
            	        alt102=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 102, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt102) {
            	        case 1 :
            	            // EsperEPL2Grammar.g:880:10: evalRelationalExpression
            	            {
            	            pushFollow(FOLLOW_evalRelationalExpression_in_evalEqualsExpression4646);
            	            evalRelationalExpression258=evalRelationalExpression();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_evalRelationalExpression.add(evalRelationalExpression258.getTree());

            	            }
            	            break;
            	        case 2 :
            	            // EsperEPL2Grammar.g:881:13: (a= ANY | a= SOME | a= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression )
            	            {
            	            // EsperEPL2Grammar.g:881:13: (a= ANY | a= SOME | a= ALL )
            	            int alt99=3;
            	            switch ( input.LA(1) ) {
            	            case ANY:
            	                {
            	                alt99=1;
            	                }
            	                break;
            	            case SOME:
            	                {
            	                alt99=2;
            	                }
            	                break;
            	            case ALL:
            	                {
            	                alt99=3;
            	                }
            	                break;
            	            default:
            	                if (state.backtracking>0) {state.failed=true; return retval;}
            	                NoViableAltException nvae =
            	                    new NoViableAltException("", 99, 0, input);

            	                throw nvae;
            	            }

            	            switch (alt99) {
            	                case 1 :
            	                    // EsperEPL2Grammar.g:881:14: a= ANY
            	                    {
            	                    a=(Token)match(input,ANY,FOLLOW_ANY_in_evalEqualsExpression4663); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_ANY.add(a);


            	                    }
            	                    break;
            	                case 2 :
            	                    // EsperEPL2Grammar.g:881:22: a= SOME
            	                    {
            	                    a=(Token)match(input,SOME,FOLLOW_SOME_in_evalEqualsExpression4669); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_SOME.add(a);


            	                    }
            	                    break;
            	                case 3 :
            	                    // EsperEPL2Grammar.g:881:31: a= ALL
            	                    {
            	                    a=(Token)match(input,ALL,FOLLOW_ALL_in_evalEqualsExpression4675); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_ALL.add(a);


            	                    }
            	                    break;

            	            }

            	            // EsperEPL2Grammar.g:881:38: ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression )
            	            int alt101=2;
            	            int LA101_0 = input.LA(1);

            	            if ( (LA101_0==LPAREN) ) {
            	                int LA101_1 = input.LA(2);

            	                if ( (LA101_1==SELECT) ) {
            	                    alt101=2;
            	                }
            	                else if ( (LA101_1==WINDOW||LA101_1==ESCAPE||(LA101_1>=NOT_EXPR && LA101_1<=EVERY_EXPR)||(LA101_1>=SUM && LA101_1<=COUNT)||LA101_1==CASE||LA101_1==OUTER||(LA101_1>=JOIN && LA101_1<=FULL)||(LA101_1>=EVENTS && LA101_1<=LAST)||(LA101_1>=UNIDIRECTIONAL && LA101_1<=CURRENT_TIMESTAMP)||LA101_1==SNAPSHOT||(LA101_1>=VARIABLE && LA101_1<=AT)||(LA101_1>=BOOLEAN_TRUE && LA101_1<=VALUE_NULL)||LA101_1==NUM_DOUBLE||LA101_1==IDENT||(LA101_1>=LPAREN && LA101_1<=RPAREN)||(LA101_1>=STRING_LITERAL && LA101_1<=QUOTED_STRING_LITERAL)||(LA101_1>=PLUS && LA101_1<=MINUS)||LA101_1==LCURLY||LA101_1==NUM_INT||LA101_1==QUESTION||(LA101_1>=TICKED_STRING_LITERAL && LA101_1<=NUM_FLOAT)) ) {
            	                    alt101=1;
            	                }
            	                else {
            	                    if (state.backtracking>0) {state.failed=true; return retval;}
            	                    NoViableAltException nvae =
            	                        new NoViableAltException("", 101, 1, input);

            	                    throw nvae;
            	                }
            	            }
            	            else {
            	                if (state.backtracking>0) {state.failed=true; return retval;}
            	                NoViableAltException nvae =
            	                    new NoViableAltException("", 101, 0, input);

            	                throw nvae;
            	            }
            	            switch (alt101) {
            	                case 1 :
            	                    // EsperEPL2Grammar.g:881:40: ( LPAREN ( expressionList )? RPAREN )
            	                    {
            	                    // EsperEPL2Grammar.g:881:40: ( LPAREN ( expressionList )? RPAREN )
            	                    // EsperEPL2Grammar.g:881:41: LPAREN ( expressionList )? RPAREN
            	                    {
            	                    LPAREN259=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_evalEqualsExpression4681); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN259);

            	                    // EsperEPL2Grammar.g:881:48: ( expressionList )?
            	                    int alt100=2;
            	                    int LA100_0 = input.LA(1);

            	                    if ( (LA100_0==WINDOW||LA100_0==ESCAPE||(LA100_0>=NOT_EXPR && LA100_0<=EVERY_EXPR)||(LA100_0>=SUM && LA100_0<=COUNT)||LA100_0==CASE||LA100_0==OUTER||(LA100_0>=JOIN && LA100_0<=FULL)||(LA100_0>=EVENTS && LA100_0<=LAST)||(LA100_0>=UNIDIRECTIONAL && LA100_0<=CURRENT_TIMESTAMP)||LA100_0==SNAPSHOT||(LA100_0>=VARIABLE && LA100_0<=AT)||(LA100_0>=BOOLEAN_TRUE && LA100_0<=VALUE_NULL)||LA100_0==NUM_DOUBLE||LA100_0==IDENT||LA100_0==LPAREN||(LA100_0>=STRING_LITERAL && LA100_0<=QUOTED_STRING_LITERAL)||(LA100_0>=PLUS && LA100_0<=MINUS)||LA100_0==LCURLY||LA100_0==NUM_INT||LA100_0==QUESTION||(LA100_0>=TICKED_STRING_LITERAL && LA100_0<=NUM_FLOAT)) ) {
            	                        alt100=1;
            	                    }
            	                    switch (alt100) {
            	                        case 1 :
            	                            // EsperEPL2Grammar.g:881:48: expressionList
            	                            {
            	                            pushFollow(FOLLOW_expressionList_in_evalEqualsExpression4683);
            	                            expressionList260=expressionList();

            	                            state._fsp--;
            	                            if (state.failed) return retval;
            	                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList260.getTree());

            	                            }
            	                            break;

            	                    }

            	                    RPAREN261=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_evalEqualsExpression4686); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN261);


            	                    }


            	                    }
            	                    break;
            	                case 2 :
            	                    // EsperEPL2Grammar.g:881:74: subSelectGroupExpression
            	                    {
            	                    pushFollow(FOLLOW_subSelectGroupExpression_in_evalEqualsExpression4691);
            	                    subSelectGroupExpression262=subSelectGroupExpression();

            	                    state._fsp--;
            	                    if (state.failed) return retval;
            	                    if ( state.backtracking==0 ) stream_subSelectGroupExpression.add(subSelectGroupExpression262.getTree());

            	                    }
            	                    break;

            	            }


            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop103;
                }
            } while (true);



            // AST REWRITE
            // elements: expressionList, a, expressionList, evalRelationalExpression, subSelectGroupExpression, evalRelationalExpression, evalRelationalExpression, evalRelationalExpression, evalRelationalExpression, subSelectGroupExpression, a
            // token labels: a
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_a=new RewriteRuleTokenStream(adaptor,"token a",a);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 884:6: -> {$a == null && ($eq != null || $is != null)}? ^( EVAL_EQUALS_EXPR ( evalRelationalExpression )+ )
            if (a == null && (eq != null || is != null)) {
                // EsperEPL2Grammar.g:884:55: ^( EVAL_EQUALS_EXPR ( evalRelationalExpression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_EQUALS_EXPR, "EVAL_EQUALS_EXPR"), root_1);

                if ( !(stream_evalRelationalExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_evalRelationalExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_evalRelationalExpression.nextTree());

                }
                stream_evalRelationalExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 885:6: -> {$a != null && ($eq != null || $is != null)}? ^( EVAL_EQUALS_GROUP_EXPR evalRelationalExpression $a ( expressionList )? ( subSelectGroupExpression )? )
            if (a != null && (eq != null || is != null)) {
                // EsperEPL2Grammar.g:885:55: ^( EVAL_EQUALS_GROUP_EXPR evalRelationalExpression $a ( expressionList )? ( subSelectGroupExpression )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_EQUALS_GROUP_EXPR, "EVAL_EQUALS_GROUP_EXPR"), root_1);

                adaptor.addChild(root_1, stream_evalRelationalExpression.nextTree());
                adaptor.addChild(root_1, stream_a.nextNode());
                // EsperEPL2Grammar.g:885:108: ( expressionList )?
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());

                }
                stream_expressionList.reset();
                // EsperEPL2Grammar.g:885:124: ( subSelectGroupExpression )?
                if ( stream_subSelectGroupExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_subSelectGroupExpression.nextTree());

                }
                stream_subSelectGroupExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 886:6: -> {$a == null && ($isnot != null || $sqlne != null || $ne != null)}? ^( EVAL_NOTEQUALS_EXPR ( evalRelationalExpression )+ )
            if (a == null && (isnot != null || sqlne != null || ne != null)) {
                // EsperEPL2Grammar.g:886:76: ^( EVAL_NOTEQUALS_EXPR ( evalRelationalExpression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_NOTEQUALS_EXPR, "EVAL_NOTEQUALS_EXPR"), root_1);

                if ( !(stream_evalRelationalExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_evalRelationalExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_evalRelationalExpression.nextTree());

                }
                stream_evalRelationalExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 887:6: -> {$a != null && ($isnot != null || $sqlne != null || $ne != null)}? ^( EVAL_NOTEQUALS_GROUP_EXPR evalRelationalExpression $a ( expressionList )? ( subSelectGroupExpression )? )
            if (a != null && (isnot != null || sqlne != null || ne != null)) {
                // EsperEPL2Grammar.g:887:76: ^( EVAL_NOTEQUALS_GROUP_EXPR evalRelationalExpression $a ( expressionList )? ( subSelectGroupExpression )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_NOTEQUALS_GROUP_EXPR, "EVAL_NOTEQUALS_GROUP_EXPR"), root_1);

                adaptor.addChild(root_1, stream_evalRelationalExpression.nextTree());
                adaptor.addChild(root_1, stream_a.nextNode());
                // EsperEPL2Grammar.g:887:132: ( expressionList )?
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());

                }
                stream_expressionList.reset();
                // EsperEPL2Grammar.g:887:148: ( subSelectGroupExpression )?
                if ( stream_subSelectGroupExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_subSelectGroupExpression.nextTree());

                }
                stream_subSelectGroupExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 888:6: -> ( evalRelationalExpression )+
            {
                if ( !(stream_evalRelationalExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_evalRelationalExpression.hasNext() ) {
                    adaptor.addChild(root_0, stream_evalRelationalExpression.nextTree());

                }
                stream_evalRelationalExpression.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "evalEqualsExpression"

    public static class evalRelationalExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "evalRelationalExpression"
    // EsperEPL2Grammar.g:891:1: evalRelationalExpression : concatenationExpr ( ( ( (r= LT | r= GT | r= LE | r= GE ) ( concatenationExpr | (g= ANY | g= SOME | g= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) ) )* -> {$g == null && $r != null}? ^( ( concatenationExpr )+ ) -> {$g != null && $r != null}? ^( concatenationExpr $g ( expressionList )? ( subSelectGroupExpression )? ) -> ( concatenationExpr )+ ) | (n= NOT_EXPR )? ( (i= IN_SET (l= LPAREN | l= LBRACK ) expression ( (col= COLON ( expression ) ) | ( ( COMMA expression )* ) ) (r= RPAREN | r= RBRACK ) ) -> {$col == null && $n == null}? ^( IN_SET concatenationExpr $l ( expression )+ $r) -> {$col == null && $n != null}? ^( NOT_IN_SET concatenationExpr $l ( expression )+ $r) -> {$col != null && $n == null}? ^( IN_RANGE concatenationExpr $l ( expression )+ $r) -> ^( NOT_IN_RANGE concatenationExpr $l ( expression )+ $r) | IN_SET inSubSelectQuery -> {$n == null}? ^( IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) -> ^( NOT_IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) | BETWEEN betweenList -> {$n == null}? ^( BETWEEN concatenationExpr betweenList ) -> ^( NOT_BETWEEN concatenationExpr betweenList ) | LIKE concatenationExpr ( ESCAPE stringconstant )? -> {$n == null}? ^( LIKE ( concatenationExpr )* ( stringconstant )? ) -> ^( NOT_LIKE ( concatenationExpr )* ( stringconstant )? ) | REGEXP concatenationExpr -> {$n == null}? ^( REGEXP ( concatenationExpr )+ ) -> ^( NOT_REGEXP ( concatenationExpr )+ ) ) ) ;
    public final EsperEPL2GrammarParser.evalRelationalExpression_return evalRelationalExpression() throws RecognitionException {
        EsperEPL2GrammarParser.evalRelationalExpression_return retval = new EsperEPL2GrammarParser.evalRelationalExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token r=null;
        Token g=null;
        Token n=null;
        Token i=null;
        Token l=null;
        Token col=null;
        Token LPAREN265=null;
        Token RPAREN267=null;
        Token COMMA271=null;
        Token IN_SET273=null;
        Token BETWEEN275=null;
        Token LIKE277=null;
        Token ESCAPE279=null;
        Token REGEXP281=null;
        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr263 = null;

        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr264 = null;

        EsperEPL2GrammarParser.expressionList_return expressionList266 = null;

        EsperEPL2GrammarParser.subSelectGroupExpression_return subSelectGroupExpression268 = null;

        EsperEPL2GrammarParser.expression_return expression269 = null;

        EsperEPL2GrammarParser.expression_return expression270 = null;

        EsperEPL2GrammarParser.expression_return expression272 = null;

        EsperEPL2GrammarParser.inSubSelectQuery_return inSubSelectQuery274 = null;

        EsperEPL2GrammarParser.betweenList_return betweenList276 = null;

        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr278 = null;

        EsperEPL2GrammarParser.stringconstant_return stringconstant280 = null;

        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr282 = null;


        CommonTree r_tree=null;
        CommonTree g_tree=null;
        CommonTree n_tree=null;
        CommonTree i_tree=null;
        CommonTree l_tree=null;
        CommonTree col_tree=null;
        CommonTree LPAREN265_tree=null;
        CommonTree RPAREN267_tree=null;
        CommonTree COMMA271_tree=null;
        CommonTree IN_SET273_tree=null;
        CommonTree BETWEEN275_tree=null;
        CommonTree LIKE277_tree=null;
        CommonTree ESCAPE279_tree=null;
        CommonTree REGEXP281_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_GE=new RewriteRuleTokenStream(adaptor,"token GE");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LT=new RewriteRuleTokenStream(adaptor,"token LT");
        RewriteRuleTokenStream stream_ANY=new RewriteRuleTokenStream(adaptor,"token ANY");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_NOT_EXPR=new RewriteRuleTokenStream(adaptor,"token NOT_EXPR");
        RewriteRuleTokenStream stream_ESCAPE=new RewriteRuleTokenStream(adaptor,"token ESCAPE");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_IN_SET=new RewriteRuleTokenStream(adaptor,"token IN_SET");
        RewriteRuleTokenStream stream_SOME=new RewriteRuleTokenStream(adaptor,"token SOME");
        RewriteRuleTokenStream stream_ALL=new RewriteRuleTokenStream(adaptor,"token ALL");
        RewriteRuleTokenStream stream_REGEXP=new RewriteRuleTokenStream(adaptor,"token REGEXP");
        RewriteRuleTokenStream stream_GT=new RewriteRuleTokenStream(adaptor,"token GT");
        RewriteRuleTokenStream stream_BETWEEN=new RewriteRuleTokenStream(adaptor,"token BETWEEN");
        RewriteRuleTokenStream stream_LE=new RewriteRuleTokenStream(adaptor,"token LE");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_LIKE=new RewriteRuleTokenStream(adaptor,"token LIKE");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_inSubSelectQuery=new RewriteRuleSubtreeStream(adaptor,"rule inSubSelectQuery");
        RewriteRuleSubtreeStream stream_concatenationExpr=new RewriteRuleSubtreeStream(adaptor,"rule concatenationExpr");
        RewriteRuleSubtreeStream stream_subSelectGroupExpression=new RewriteRuleSubtreeStream(adaptor,"rule subSelectGroupExpression");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_stringconstant=new RewriteRuleSubtreeStream(adaptor,"rule stringconstant");
        RewriteRuleSubtreeStream stream_betweenList=new RewriteRuleSubtreeStream(adaptor,"rule betweenList");
        try {
            // EsperEPL2Grammar.g:892:2: ( concatenationExpr ( ( ( (r= LT | r= GT | r= LE | r= GE ) ( concatenationExpr | (g= ANY | g= SOME | g= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) ) )* -> {$g == null && $r != null}? ^( ( concatenationExpr )+ ) -> {$g != null && $r != null}? ^( concatenationExpr $g ( expressionList )? ( subSelectGroupExpression )? ) -> ( concatenationExpr )+ ) | (n= NOT_EXPR )? ( (i= IN_SET (l= LPAREN | l= LBRACK ) expression ( (col= COLON ( expression ) ) | ( ( COMMA expression )* ) ) (r= RPAREN | r= RBRACK ) ) -> {$col == null && $n == null}? ^( IN_SET concatenationExpr $l ( expression )+ $r) -> {$col == null && $n != null}? ^( NOT_IN_SET concatenationExpr $l ( expression )+ $r) -> {$col != null && $n == null}? ^( IN_RANGE concatenationExpr $l ( expression )+ $r) -> ^( NOT_IN_RANGE concatenationExpr $l ( expression )+ $r) | IN_SET inSubSelectQuery -> {$n == null}? ^( IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) -> ^( NOT_IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) | BETWEEN betweenList -> {$n == null}? ^( BETWEEN concatenationExpr betweenList ) -> ^( NOT_BETWEEN concatenationExpr betweenList ) | LIKE concatenationExpr ( ESCAPE stringconstant )? -> {$n == null}? ^( LIKE ( concatenationExpr )* ( stringconstant )? ) -> ^( NOT_LIKE ( concatenationExpr )* ( stringconstant )? ) | REGEXP concatenationExpr -> {$n == null}? ^( REGEXP ( concatenationExpr )+ ) -> ^( NOT_REGEXP ( concatenationExpr )+ ) ) ) )
            // EsperEPL2Grammar.g:892:4: concatenationExpr ( ( ( (r= LT | r= GT | r= LE | r= GE ) ( concatenationExpr | (g= ANY | g= SOME | g= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) ) )* -> {$g == null && $r != null}? ^( ( concatenationExpr )+ ) -> {$g != null && $r != null}? ^( concatenationExpr $g ( expressionList )? ( subSelectGroupExpression )? ) -> ( concatenationExpr )+ ) | (n= NOT_EXPR )? ( (i= IN_SET (l= LPAREN | l= LBRACK ) expression ( (col= COLON ( expression ) ) | ( ( COMMA expression )* ) ) (r= RPAREN | r= RBRACK ) ) -> {$col == null && $n == null}? ^( IN_SET concatenationExpr $l ( expression )+ $r) -> {$col == null && $n != null}? ^( NOT_IN_SET concatenationExpr $l ( expression )+ $r) -> {$col != null && $n == null}? ^( IN_RANGE concatenationExpr $l ( expression )+ $r) -> ^( NOT_IN_RANGE concatenationExpr $l ( expression )+ $r) | IN_SET inSubSelectQuery -> {$n == null}? ^( IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) -> ^( NOT_IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) | BETWEEN betweenList -> {$n == null}? ^( BETWEEN concatenationExpr betweenList ) -> ^( NOT_BETWEEN concatenationExpr betweenList ) | LIKE concatenationExpr ( ESCAPE stringconstant )? -> {$n == null}? ^( LIKE ( concatenationExpr )* ( stringconstant )? ) -> ^( NOT_LIKE ( concatenationExpr )* ( stringconstant )? ) | REGEXP concatenationExpr -> {$n == null}? ^( REGEXP ( concatenationExpr )+ ) -> ^( NOT_REGEXP ( concatenationExpr )+ ) ) )
            {
            pushFollow(FOLLOW_concatenationExpr_in_evalRelationalExpression4819);
            concatenationExpr263=concatenationExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_concatenationExpr.add(concatenationExpr263.getTree());
            // EsperEPL2Grammar.g:893:3: ( ( ( (r= LT | r= GT | r= LE | r= GE ) ( concatenationExpr | (g= ANY | g= SOME | g= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) ) )* -> {$g == null && $r != null}? ^( ( concatenationExpr )+ ) -> {$g != null && $r != null}? ^( concatenationExpr $g ( expressionList )? ( subSelectGroupExpression )? ) -> ( concatenationExpr )+ ) | (n= NOT_EXPR )? ( (i= IN_SET (l= LPAREN | l= LBRACK ) expression ( (col= COLON ( expression ) ) | ( ( COMMA expression )* ) ) (r= RPAREN | r= RBRACK ) ) -> {$col == null && $n == null}? ^( IN_SET concatenationExpr $l ( expression )+ $r) -> {$col == null && $n != null}? ^( NOT_IN_SET concatenationExpr $l ( expression )+ $r) -> {$col != null && $n == null}? ^( IN_RANGE concatenationExpr $l ( expression )+ $r) -> ^( NOT_IN_RANGE concatenationExpr $l ( expression )+ $r) | IN_SET inSubSelectQuery -> {$n == null}? ^( IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) -> ^( NOT_IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) | BETWEEN betweenList -> {$n == null}? ^( BETWEEN concatenationExpr betweenList ) -> ^( NOT_BETWEEN concatenationExpr betweenList ) | LIKE concatenationExpr ( ESCAPE stringconstant )? -> {$n == null}? ^( LIKE ( concatenationExpr )* ( stringconstant )? ) -> ^( NOT_LIKE ( concatenationExpr )* ( stringconstant )? ) | REGEXP concatenationExpr -> {$n == null}? ^( REGEXP ( concatenationExpr )+ ) -> ^( NOT_REGEXP ( concatenationExpr )+ ) ) )
            int alt117=2;
            int LA117_0 = input.LA(1);

            if ( (LA117_0==EOF||(LA117_0>=OR_EXPR && LA117_0<=AND_EXPR)||LA117_0==AS||(LA117_0>=ELSE && LA117_0<=FROM)||LA117_0==IS||(LA117_0>=GROUP && LA117_0<=HAVING)||LA117_0==OUTPUT||(LA117_0>=ORDER && LA117_0<=DESC)||(LA117_0>=TIMEPERIOD_SEC && LA117_0<=TIMEPERIOD_SECONDS)||LA117_0==ROW_LIMIT_EXPR||LA117_0==COMMA||LA117_0==EQUALS||LA117_0==RPAREN||(LA117_0>=RBRACK && LA117_0<=COLON)||(LA117_0>=BAND && LA117_0<=GE)||LA117_0==RCURLY) ) {
                alt117=1;
            }
            else if ( ((LA117_0>=IN_SET && LA117_0<=REGEXP)||LA117_0==NOT_EXPR) ) {
                alt117=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 117, 0, input);

                throw nvae;
            }
            switch (alt117) {
                case 1 :
                    // EsperEPL2Grammar.g:894:4: ( ( (r= LT | r= GT | r= LE | r= GE ) ( concatenationExpr | (g= ANY | g= SOME | g= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) ) )* -> {$g == null && $r != null}? ^( ( concatenationExpr )+ ) -> {$g != null && $r != null}? ^( concatenationExpr $g ( expressionList )? ( subSelectGroupExpression )? ) -> ( concatenationExpr )+ )
                    {
                    // EsperEPL2Grammar.g:894:4: ( ( (r= LT | r= GT | r= LE | r= GE ) ( concatenationExpr | (g= ANY | g= SOME | g= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) ) )* -> {$g == null && $r != null}? ^( ( concatenationExpr )+ ) -> {$g != null && $r != null}? ^( concatenationExpr $g ( expressionList )? ( subSelectGroupExpression )? ) -> ( concatenationExpr )+ )
                    // EsperEPL2Grammar.g:895:6: ( (r= LT | r= GT | r= LE | r= GE ) ( concatenationExpr | (g= ANY | g= SOME | g= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) ) )*
                    {
                    // EsperEPL2Grammar.g:895:6: ( (r= LT | r= GT | r= LE | r= GE ) ( concatenationExpr | (g= ANY | g= SOME | g= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) ) )*
                    loop109:
                    do {
                        int alt109=2;
                        int LA109_0 = input.LA(1);

                        if ( ((LA109_0>=LT && LA109_0<=GE)) ) {
                            alt109=1;
                        }


                        switch (alt109) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:896:8: (r= LT | r= GT | r= LE | r= GE ) ( concatenationExpr | (g= ANY | g= SOME | g= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) )
                    	    {
                    	    // EsperEPL2Grammar.g:896:8: (r= LT | r= GT | r= LE | r= GE )
                    	    int alt104=4;
                    	    switch ( input.LA(1) ) {
                    	    case LT:
                    	        {
                    	        alt104=1;
                    	        }
                    	        break;
                    	    case GT:
                    	        {
                    	        alt104=2;
                    	        }
                    	        break;
                    	    case LE:
                    	        {
                    	        alt104=3;
                    	        }
                    	        break;
                    	    case GE:
                    	        {
                    	        alt104=4;
                    	        }
                    	        break;
                    	    default:
                    	        if (state.backtracking>0) {state.failed=true; return retval;}
                    	        NoViableAltException nvae =
                    	            new NoViableAltException("", 104, 0, input);

                    	        throw nvae;
                    	    }

                    	    switch (alt104) {
                    	        case 1 :
                    	            // EsperEPL2Grammar.g:896:9: r= LT
                    	            {
                    	            r=(Token)match(input,LT,FOLLOW_LT_in_evalRelationalExpression4851); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_LT.add(r);


                    	            }
                    	            break;
                    	        case 2 :
                    	            // EsperEPL2Grammar.g:896:14: r= GT
                    	            {
                    	            r=(Token)match(input,GT,FOLLOW_GT_in_evalRelationalExpression4855); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_GT.add(r);


                    	            }
                    	            break;
                    	        case 3 :
                    	            // EsperEPL2Grammar.g:896:19: r= LE
                    	            {
                    	            r=(Token)match(input,LE,FOLLOW_LE_in_evalRelationalExpression4859); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_LE.add(r);


                    	            }
                    	            break;
                    	        case 4 :
                    	            // EsperEPL2Grammar.g:896:24: r= GE
                    	            {
                    	            r=(Token)match(input,GE,FOLLOW_GE_in_evalRelationalExpression4863); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_GE.add(r);


                    	            }
                    	            break;

                    	    }

                    	    // EsperEPL2Grammar.g:897:9: ( concatenationExpr | (g= ANY | g= SOME | g= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) )
                    	    int alt108=2;
                    	    int LA108_0 = input.LA(1);

                    	    if ( (LA108_0==WINDOW||LA108_0==ESCAPE||LA108_0==EVERY_EXPR||(LA108_0>=SUM && LA108_0<=COUNT)||LA108_0==OUTER||(LA108_0>=JOIN && LA108_0<=FULL)||(LA108_0>=EVENTS && LA108_0<=LAST)||(LA108_0>=UNIDIRECTIONAL && LA108_0<=CURRENT_TIMESTAMP)||LA108_0==SNAPSHOT||(LA108_0>=VARIABLE && LA108_0<=AT)||(LA108_0>=BOOLEAN_TRUE && LA108_0<=VALUE_NULL)||LA108_0==NUM_DOUBLE||LA108_0==IDENT||LA108_0==LPAREN||(LA108_0>=STRING_LITERAL && LA108_0<=QUOTED_STRING_LITERAL)||(LA108_0>=PLUS && LA108_0<=MINUS)||LA108_0==LCURLY||LA108_0==NUM_INT||LA108_0==QUESTION||(LA108_0>=TICKED_STRING_LITERAL && LA108_0<=NUM_FLOAT)) ) {
                    	        alt108=1;
                    	    }
                    	    else if ( ((LA108_0>=ALL && LA108_0<=SOME)) ) {
                    	        alt108=2;
                    	    }
                    	    else {
                    	        if (state.backtracking>0) {state.failed=true; return retval;}
                    	        NoViableAltException nvae =
                    	            new NoViableAltException("", 108, 0, input);

                    	        throw nvae;
                    	    }
                    	    switch (alt108) {
                    	        case 1 :
                    	            // EsperEPL2Grammar.g:898:11: concatenationExpr
                    	            {
                    	            pushFollow(FOLLOW_concatenationExpr_in_evalRelationalExpression4887);
                    	            concatenationExpr264=concatenationExpr();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) stream_concatenationExpr.add(concatenationExpr264.getTree());

                    	            }
                    	            break;
                    	        case 2 :
                    	            // EsperEPL2Grammar.g:899:13: (g= ANY | g= SOME | g= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression )
                    	            {
                    	            // EsperEPL2Grammar.g:899:13: (g= ANY | g= SOME | g= ALL )
                    	            int alt105=3;
                    	            switch ( input.LA(1) ) {
                    	            case ANY:
                    	                {
                    	                alt105=1;
                    	                }
                    	                break;
                    	            case SOME:
                    	                {
                    	                alt105=2;
                    	                }
                    	                break;
                    	            case ALL:
                    	                {
                    	                alt105=3;
                    	                }
                    	                break;
                    	            default:
                    	                if (state.backtracking>0) {state.failed=true; return retval;}
                    	                NoViableAltException nvae =
                    	                    new NoViableAltException("", 105, 0, input);

                    	                throw nvae;
                    	            }

                    	            switch (alt105) {
                    	                case 1 :
                    	                    // EsperEPL2Grammar.g:899:14: g= ANY
                    	                    {
                    	                    g=(Token)match(input,ANY,FOLLOW_ANY_in_evalRelationalExpression4904); if (state.failed) return retval; 
                    	                    if ( state.backtracking==0 ) stream_ANY.add(g);


                    	                    }
                    	                    break;
                    	                case 2 :
                    	                    // EsperEPL2Grammar.g:899:22: g= SOME
                    	                    {
                    	                    g=(Token)match(input,SOME,FOLLOW_SOME_in_evalRelationalExpression4910); if (state.failed) return retval; 
                    	                    if ( state.backtracking==0 ) stream_SOME.add(g);


                    	                    }
                    	                    break;
                    	                case 3 :
                    	                    // EsperEPL2Grammar.g:899:31: g= ALL
                    	                    {
                    	                    g=(Token)match(input,ALL,FOLLOW_ALL_in_evalRelationalExpression4916); if (state.failed) return retval; 
                    	                    if ( state.backtracking==0 ) stream_ALL.add(g);


                    	                    }
                    	                    break;

                    	            }

                    	            // EsperEPL2Grammar.g:899:38: ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression )
                    	            int alt107=2;
                    	            int LA107_0 = input.LA(1);

                    	            if ( (LA107_0==LPAREN) ) {
                    	                int LA107_1 = input.LA(2);

                    	                if ( (LA107_1==SELECT) ) {
                    	                    alt107=2;
                    	                }
                    	                else if ( (LA107_1==WINDOW||LA107_1==ESCAPE||(LA107_1>=NOT_EXPR && LA107_1<=EVERY_EXPR)||(LA107_1>=SUM && LA107_1<=COUNT)||LA107_1==CASE||LA107_1==OUTER||(LA107_1>=JOIN && LA107_1<=FULL)||(LA107_1>=EVENTS && LA107_1<=LAST)||(LA107_1>=UNIDIRECTIONAL && LA107_1<=CURRENT_TIMESTAMP)||LA107_1==SNAPSHOT||(LA107_1>=VARIABLE && LA107_1<=AT)||(LA107_1>=BOOLEAN_TRUE && LA107_1<=VALUE_NULL)||LA107_1==NUM_DOUBLE||LA107_1==IDENT||(LA107_1>=LPAREN && LA107_1<=RPAREN)||(LA107_1>=STRING_LITERAL && LA107_1<=QUOTED_STRING_LITERAL)||(LA107_1>=PLUS && LA107_1<=MINUS)||LA107_1==LCURLY||LA107_1==NUM_INT||LA107_1==QUESTION||(LA107_1>=TICKED_STRING_LITERAL && LA107_1<=NUM_FLOAT)) ) {
                    	                    alt107=1;
                    	                }
                    	                else {
                    	                    if (state.backtracking>0) {state.failed=true; return retval;}
                    	                    NoViableAltException nvae =
                    	                        new NoViableAltException("", 107, 1, input);

                    	                    throw nvae;
                    	                }
                    	            }
                    	            else {
                    	                if (state.backtracking>0) {state.failed=true; return retval;}
                    	                NoViableAltException nvae =
                    	                    new NoViableAltException("", 107, 0, input);

                    	                throw nvae;
                    	            }
                    	            switch (alt107) {
                    	                case 1 :
                    	                    // EsperEPL2Grammar.g:899:40: ( LPAREN ( expressionList )? RPAREN )
                    	                    {
                    	                    // EsperEPL2Grammar.g:899:40: ( LPAREN ( expressionList )? RPAREN )
                    	                    // EsperEPL2Grammar.g:899:41: LPAREN ( expressionList )? RPAREN
                    	                    {
                    	                    LPAREN265=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_evalRelationalExpression4922); if (state.failed) return retval; 
                    	                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN265);

                    	                    // EsperEPL2Grammar.g:899:48: ( expressionList )?
                    	                    int alt106=2;
                    	                    int LA106_0 = input.LA(1);

                    	                    if ( (LA106_0==WINDOW||LA106_0==ESCAPE||(LA106_0>=NOT_EXPR && LA106_0<=EVERY_EXPR)||(LA106_0>=SUM && LA106_0<=COUNT)||LA106_0==CASE||LA106_0==OUTER||(LA106_0>=JOIN && LA106_0<=FULL)||(LA106_0>=EVENTS && LA106_0<=LAST)||(LA106_0>=UNIDIRECTIONAL && LA106_0<=CURRENT_TIMESTAMP)||LA106_0==SNAPSHOT||(LA106_0>=VARIABLE && LA106_0<=AT)||(LA106_0>=BOOLEAN_TRUE && LA106_0<=VALUE_NULL)||LA106_0==NUM_DOUBLE||LA106_0==IDENT||LA106_0==LPAREN||(LA106_0>=STRING_LITERAL && LA106_0<=QUOTED_STRING_LITERAL)||(LA106_0>=PLUS && LA106_0<=MINUS)||LA106_0==LCURLY||LA106_0==NUM_INT||LA106_0==QUESTION||(LA106_0>=TICKED_STRING_LITERAL && LA106_0<=NUM_FLOAT)) ) {
                    	                        alt106=1;
                    	                    }
                    	                    switch (alt106) {
                    	                        case 1 :
                    	                            // EsperEPL2Grammar.g:899:48: expressionList
                    	                            {
                    	                            pushFollow(FOLLOW_expressionList_in_evalRelationalExpression4924);
                    	                            expressionList266=expressionList();

                    	                            state._fsp--;
                    	                            if (state.failed) return retval;
                    	                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList266.getTree());

                    	                            }
                    	                            break;

                    	                    }

                    	                    RPAREN267=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_evalRelationalExpression4927); if (state.failed) return retval; 
                    	                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN267);


                    	                    }


                    	                    }
                    	                    break;
                    	                case 2 :
                    	                    // EsperEPL2Grammar.g:899:74: subSelectGroupExpression
                    	                    {
                    	                    pushFollow(FOLLOW_subSelectGroupExpression_in_evalRelationalExpression4932);
                    	                    subSelectGroupExpression268=subSelectGroupExpression();

                    	                    state._fsp--;
                    	                    if (state.failed) return retval;
                    	                    if ( state.backtracking==0 ) stream_subSelectGroupExpression.add(subSelectGroupExpression268.getTree());

                    	                    }
                    	                    break;

                    	            }


                    	            }
                    	            break;

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop109;
                        }
                    } while (true);



                    // AST REWRITE
                    // elements: concatenationExpr, subSelectGroupExpression, concatenationExpr, g, concatenationExpr, expressionList
                    // token labels: g
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_g=new RewriteRuleTokenStream(adaptor,"token g",g);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 903:6: -> {$g == null && $r != null}? ^( ( concatenationExpr )+ )
                    if (g == null && r != null) {
                        // EsperEPL2Grammar.g:903:37: ^( ( concatenationExpr )+ )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(r), root_1);

                        if ( !(stream_concatenationExpr.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_concatenationExpr.hasNext() ) {
                            adaptor.addChild(root_1, stream_concatenationExpr.nextTree());

                        }
                        stream_concatenationExpr.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }
                    else // 904:6: -> {$g != null && $r != null}? ^( concatenationExpr $g ( expressionList )? ( subSelectGroupExpression )? )
                    if (g != null && r != null) {
                        // EsperEPL2Grammar.g:904:37: ^( concatenationExpr $g ( expressionList )? ( subSelectGroupExpression )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(r), root_1);

                        adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                        adaptor.addChild(root_1, stream_g.nextNode());
                        // EsperEPL2Grammar.g:904:81: ( expressionList )?
                        if ( stream_expressionList.hasNext() ) {
                            adaptor.addChild(root_1, stream_expressionList.nextTree());

                        }
                        stream_expressionList.reset();
                        // EsperEPL2Grammar.g:904:97: ( subSelectGroupExpression )?
                        if ( stream_subSelectGroupExpression.hasNext() ) {
                            adaptor.addChild(root_1, stream_subSelectGroupExpression.nextTree());

                        }
                        stream_subSelectGroupExpression.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }
                    else // 905:6: -> ( concatenationExpr )+
                    {
                        if ( !(stream_concatenationExpr.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_concatenationExpr.hasNext() ) {
                            adaptor.addChild(root_0, stream_concatenationExpr.nextTree());

                        }
                        stream_concatenationExpr.reset();

                    }

                    retval.tree = root_0;}
                    }


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:907:6: (n= NOT_EXPR )? ( (i= IN_SET (l= LPAREN | l= LBRACK ) expression ( (col= COLON ( expression ) ) | ( ( COMMA expression )* ) ) (r= RPAREN | r= RBRACK ) ) -> {$col == null && $n == null}? ^( IN_SET concatenationExpr $l ( expression )+ $r) -> {$col == null && $n != null}? ^( NOT_IN_SET concatenationExpr $l ( expression )+ $r) -> {$col != null && $n == null}? ^( IN_RANGE concatenationExpr $l ( expression )+ $r) -> ^( NOT_IN_RANGE concatenationExpr $l ( expression )+ $r) | IN_SET inSubSelectQuery -> {$n == null}? ^( IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) -> ^( NOT_IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) | BETWEEN betweenList -> {$n == null}? ^( BETWEEN concatenationExpr betweenList ) -> ^( NOT_BETWEEN concatenationExpr betweenList ) | LIKE concatenationExpr ( ESCAPE stringconstant )? -> {$n == null}? ^( LIKE ( concatenationExpr )* ( stringconstant )? ) -> ^( NOT_LIKE ( concatenationExpr )* ( stringconstant )? ) | REGEXP concatenationExpr -> {$n == null}? ^( REGEXP ( concatenationExpr )+ ) -> ^( NOT_REGEXP ( concatenationExpr )+ ) )
                    {
                    // EsperEPL2Grammar.g:907:6: (n= NOT_EXPR )?
                    int alt110=2;
                    int LA110_0 = input.LA(1);

                    if ( (LA110_0==NOT_EXPR) ) {
                        alt110=1;
                    }
                    switch (alt110) {
                        case 1 :
                            // EsperEPL2Grammar.g:907:7: n= NOT_EXPR
                            {
                            n=(Token)match(input,NOT_EXPR,FOLLOW_NOT_EXPR_in_evalRelationalExpression5028); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NOT_EXPR.add(n);


                            }
                            break;

                    }

                    // EsperEPL2Grammar.g:908:4: ( (i= IN_SET (l= LPAREN | l= LBRACK ) expression ( (col= COLON ( expression ) ) | ( ( COMMA expression )* ) ) (r= RPAREN | r= RBRACK ) ) -> {$col == null && $n == null}? ^( IN_SET concatenationExpr $l ( expression )+ $r) -> {$col == null && $n != null}? ^( NOT_IN_SET concatenationExpr $l ( expression )+ $r) -> {$col != null && $n == null}? ^( IN_RANGE concatenationExpr $l ( expression )+ $r) -> ^( NOT_IN_RANGE concatenationExpr $l ( expression )+ $r) | IN_SET inSubSelectQuery -> {$n == null}? ^( IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) -> ^( NOT_IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) | BETWEEN betweenList -> {$n == null}? ^( BETWEEN concatenationExpr betweenList ) -> ^( NOT_BETWEEN concatenationExpr betweenList ) | LIKE concatenationExpr ( ESCAPE stringconstant )? -> {$n == null}? ^( LIKE ( concatenationExpr )* ( stringconstant )? ) -> ^( NOT_LIKE ( concatenationExpr )* ( stringconstant )? ) | REGEXP concatenationExpr -> {$n == null}? ^( REGEXP ( concatenationExpr )+ ) -> ^( NOT_REGEXP ( concatenationExpr )+ ) )
                    int alt116=5;
                    switch ( input.LA(1) ) {
                    case IN_SET:
                        {
                        int LA116_1 = input.LA(2);

                        if ( (LA116_1==LPAREN) ) {
                            int LA116_5 = input.LA(3);

                            if ( (LA116_5==SELECT) ) {
                                alt116=2;
                            }
                            else if ( (LA116_5==WINDOW||LA116_5==ESCAPE||(LA116_5>=NOT_EXPR && LA116_5<=EVERY_EXPR)||(LA116_5>=SUM && LA116_5<=COUNT)||LA116_5==CASE||LA116_5==OUTER||(LA116_5>=JOIN && LA116_5<=FULL)||(LA116_5>=EVENTS && LA116_5<=LAST)||(LA116_5>=UNIDIRECTIONAL && LA116_5<=CURRENT_TIMESTAMP)||LA116_5==SNAPSHOT||(LA116_5>=VARIABLE && LA116_5<=AT)||(LA116_5>=BOOLEAN_TRUE && LA116_5<=VALUE_NULL)||LA116_5==NUM_DOUBLE||LA116_5==IDENT||LA116_5==LPAREN||(LA116_5>=STRING_LITERAL && LA116_5<=QUOTED_STRING_LITERAL)||(LA116_5>=PLUS && LA116_5<=MINUS)||LA116_5==LCURLY||LA116_5==NUM_INT||LA116_5==QUESTION||(LA116_5>=TICKED_STRING_LITERAL && LA116_5<=NUM_FLOAT)) ) {
                                alt116=1;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 116, 5, input);

                                throw nvae;
                            }
                        }
                        else if ( (LA116_1==LBRACK) ) {
                            alt116=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 116, 1, input);

                            throw nvae;
                        }
                        }
                        break;
                    case BETWEEN:
                        {
                        alt116=3;
                        }
                        break;
                    case LIKE:
                        {
                        alt116=4;
                        }
                        break;
                    case REGEXP:
                        {
                        alt116=5;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 116, 0, input);

                        throw nvae;
                    }

                    switch (alt116) {
                        case 1 :
                            // EsperEPL2Grammar.g:911:5: (i= IN_SET (l= LPAREN | l= LBRACK ) expression ( (col= COLON ( expression ) ) | ( ( COMMA expression )* ) ) (r= RPAREN | r= RBRACK ) )
                            {
                            // EsperEPL2Grammar.g:911:5: (i= IN_SET (l= LPAREN | l= LBRACK ) expression ( (col= COLON ( expression ) ) | ( ( COMMA expression )* ) ) (r= RPAREN | r= RBRACK ) )
                            // EsperEPL2Grammar.g:911:6: i= IN_SET (l= LPAREN | l= LBRACK ) expression ( (col= COLON ( expression ) ) | ( ( COMMA expression )* ) ) (r= RPAREN | r= RBRACK )
                            {
                            i=(Token)match(input,IN_SET,FOLLOW_IN_SET_in_evalRelationalExpression5055); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IN_SET.add(i);

                            // EsperEPL2Grammar.g:912:8: (l= LPAREN | l= LBRACK )
                            int alt111=2;
                            int LA111_0 = input.LA(1);

                            if ( (LA111_0==LPAREN) ) {
                                alt111=1;
                            }
                            else if ( (LA111_0==LBRACK) ) {
                                alt111=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 111, 0, input);

                                throw nvae;
                            }
                            switch (alt111) {
                                case 1 :
                                    // EsperEPL2Grammar.g:912:9: l= LPAREN
                                    {
                                    l=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_evalRelationalExpression5067); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_LPAREN.add(l);


                                    }
                                    break;
                                case 2 :
                                    // EsperEPL2Grammar.g:912:20: l= LBRACK
                                    {
                                    l=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_evalRelationalExpression5073); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_LBRACK.add(l);


                                    }
                                    break;

                            }

                            pushFollow(FOLLOW_expression_in_evalRelationalExpression5076);
                            expression269=expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(expression269.getTree());
                            // EsperEPL2Grammar.g:913:7: ( (col= COLON ( expression ) ) | ( ( COMMA expression )* ) )
                            int alt113=2;
                            int LA113_0 = input.LA(1);

                            if ( (LA113_0==COLON) ) {
                                alt113=1;
                            }
                            else if ( (LA113_0==COMMA||LA113_0==RPAREN||LA113_0==RBRACK) ) {
                                alt113=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 113, 0, input);

                                throw nvae;
                            }
                            switch (alt113) {
                                case 1 :
                                    // EsperEPL2Grammar.g:914:8: (col= COLON ( expression ) )
                                    {
                                    // EsperEPL2Grammar.g:914:8: (col= COLON ( expression ) )
                                    // EsperEPL2Grammar.g:914:10: col= COLON ( expression )
                                    {
                                    col=(Token)match(input,COLON,FOLLOW_COLON_in_evalRelationalExpression5098); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_COLON.add(col);

                                    // EsperEPL2Grammar.g:914:20: ( expression )
                                    // EsperEPL2Grammar.g:914:21: expression
                                    {
                                    pushFollow(FOLLOW_expression_in_evalRelationalExpression5101);
                                    expression270=expression();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_expression.add(expression270.getTree());

                                    }


                                    }


                                    }
                                    break;
                                case 2 :
                                    // EsperEPL2Grammar.g:916:8: ( ( COMMA expression )* )
                                    {
                                    // EsperEPL2Grammar.g:916:8: ( ( COMMA expression )* )
                                    // EsperEPL2Grammar.g:916:10: ( COMMA expression )*
                                    {
                                    // EsperEPL2Grammar.g:916:10: ( COMMA expression )*
                                    loop112:
                                    do {
                                        int alt112=2;
                                        int LA112_0 = input.LA(1);

                                        if ( (LA112_0==COMMA) ) {
                                            alt112=1;
                                        }


                                        switch (alt112) {
                                    	case 1 :
                                    	    // EsperEPL2Grammar.g:916:11: COMMA expression
                                    	    {
                                    	    COMMA271=(Token)match(input,COMMA,FOLLOW_COMMA_in_evalRelationalExpression5127); if (state.failed) return retval; 
                                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA271);

                                    	    pushFollow(FOLLOW_expression_in_evalRelationalExpression5129);
                                    	    expression272=expression();

                                    	    state._fsp--;
                                    	    if (state.failed) return retval;
                                    	    if ( state.backtracking==0 ) stream_expression.add(expression272.getTree());

                                    	    }
                                    	    break;

                                    	default :
                                    	    break loop112;
                                        }
                                    } while (true);


                                    }


                                    }
                                    break;

                            }

                            // EsperEPL2Grammar.g:918:8: (r= RPAREN | r= RBRACK )
                            int alt114=2;
                            int LA114_0 = input.LA(1);

                            if ( (LA114_0==RPAREN) ) {
                                alt114=1;
                            }
                            else if ( (LA114_0==RBRACK) ) {
                                alt114=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 114, 0, input);

                                throw nvae;
                            }
                            switch (alt114) {
                                case 1 :
                                    // EsperEPL2Grammar.g:918:9: r= RPAREN
                                    {
                                    r=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_evalRelationalExpression5155); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_RPAREN.add(r);


                                    }
                                    break;
                                case 2 :
                                    // EsperEPL2Grammar.g:918:20: r= RBRACK
                                    {
                                    r=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_evalRelationalExpression5161); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_RBRACK.add(r);


                                    }
                                    break;

                            }


                            }



                            // AST REWRITE
                            // elements: expression, r, r, l, l, concatenationExpr, l, l, IN_SET, r, expression, concatenationExpr, concatenationExpr, r, expression, concatenationExpr, expression
                            // token labels: r, l
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleTokenStream stream_r=new RewriteRuleTokenStream(adaptor,"token r",r);
                            RewriteRuleTokenStream stream_l=new RewriteRuleTokenStream(adaptor,"token l",l);
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 920:9: -> {$col == null && $n == null}? ^( IN_SET concatenationExpr $l ( expression )+ $r)
                            if (col == null && n == null) {
                                // EsperEPL2Grammar.g:920:42: ^( IN_SET concatenationExpr $l ( expression )+ $r)
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_IN_SET.nextNode(), root_1);

                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_l.nextNode());
                                if ( !(stream_expression.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_expression.hasNext() ) {
                                    adaptor.addChild(root_1, stream_expression.nextTree());

                                }
                                stream_expression.reset();
                                adaptor.addChild(root_1, stream_r.nextNode());

                                adaptor.addChild(root_0, root_1);
                                }

                            }
                            else // 921:9: -> {$col == null && $n != null}? ^( NOT_IN_SET concatenationExpr $l ( expression )+ $r)
                            if (col == null && n != null) {
                                // EsperEPL2Grammar.g:921:42: ^( NOT_IN_SET concatenationExpr $l ( expression )+ $r)
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_IN_SET, "NOT_IN_SET"), root_1);

                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_l.nextNode());
                                if ( !(stream_expression.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_expression.hasNext() ) {
                                    adaptor.addChild(root_1, stream_expression.nextTree());

                                }
                                stream_expression.reset();
                                adaptor.addChild(root_1, stream_r.nextNode());

                                adaptor.addChild(root_0, root_1);
                                }

                            }
                            else // 922:9: -> {$col != null && $n == null}? ^( IN_RANGE concatenationExpr $l ( expression )+ $r)
                            if (col != null && n == null) {
                                // EsperEPL2Grammar.g:922:42: ^( IN_RANGE concatenationExpr $l ( expression )+ $r)
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IN_RANGE, "IN_RANGE"), root_1);

                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_l.nextNode());
                                if ( !(stream_expression.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_expression.hasNext() ) {
                                    adaptor.addChild(root_1, stream_expression.nextTree());

                                }
                                stream_expression.reset();
                                adaptor.addChild(root_1, stream_r.nextNode());

                                adaptor.addChild(root_0, root_1);
                                }

                            }
                            else // 923:9: -> ^( NOT_IN_RANGE concatenationExpr $l ( expression )+ $r)
                            {
                                // EsperEPL2Grammar.g:923:12: ^( NOT_IN_RANGE concatenationExpr $l ( expression )+ $r)
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_IN_RANGE, "NOT_IN_RANGE"), root_1);

                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_l.nextNode());
                                if ( !(stream_expression.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_expression.hasNext() ) {
                                    adaptor.addChild(root_1, stream_expression.nextTree());

                                }
                                stream_expression.reset();
                                adaptor.addChild(root_1, stream_r.nextNode());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:924:7: IN_SET inSubSelectQuery
                            {
                            IN_SET273=(Token)match(input,IN_SET,FOLLOW_IN_SET_in_evalRelationalExpression5284); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IN_SET.add(IN_SET273);

                            pushFollow(FOLLOW_inSubSelectQuery_in_evalRelationalExpression5286);
                            inSubSelectQuery274=inSubSelectQuery();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_inSubSelectQuery.add(inSubSelectQuery274.getTree());


                            // AST REWRITE
                            // elements: concatenationExpr, inSubSelectQuery, inSubSelectQuery, concatenationExpr
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 925:9: -> {$n == null}? ^( IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery )
                            if (n == null) {
                                // EsperEPL2Grammar.g:925:26: ^( IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IN_SUBSELECT_EXPR, "IN_SUBSELECT_EXPR"), root_1);

                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_inSubSelectQuery.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }
                            else // 926:9: -> ^( NOT_IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery )
                            {
                                // EsperEPL2Grammar.g:926:12: ^( NOT_IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_IN_SUBSELECT_EXPR, "NOT_IN_SUBSELECT_EXPR"), root_1);

                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_inSubSelectQuery.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 3 :
                            // EsperEPL2Grammar.g:927:7: BETWEEN betweenList
                            {
                            BETWEEN275=(Token)match(input,BETWEEN,FOLLOW_BETWEEN_in_evalRelationalExpression5332); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_BETWEEN.add(BETWEEN275);

                            pushFollow(FOLLOW_betweenList_in_evalRelationalExpression5334);
                            betweenList276=betweenList();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_betweenList.add(betweenList276.getTree());


                            // AST REWRITE
                            // elements: BETWEEN, concatenationExpr, concatenationExpr, betweenList, betweenList
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 928:9: -> {$n == null}? ^( BETWEEN concatenationExpr betweenList )
                            if (n == null) {
                                // EsperEPL2Grammar.g:928:26: ^( BETWEEN concatenationExpr betweenList )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_BETWEEN.nextNode(), root_1);

                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_betweenList.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }
                            else // 929:9: -> ^( NOT_BETWEEN concatenationExpr betweenList )
                            {
                                // EsperEPL2Grammar.g:929:12: ^( NOT_BETWEEN concatenationExpr betweenList )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_BETWEEN, "NOT_BETWEEN"), root_1);

                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_betweenList.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 4 :
                            // EsperEPL2Grammar.g:930:7: LIKE concatenationExpr ( ESCAPE stringconstant )?
                            {
                            LIKE277=(Token)match(input,LIKE,FOLLOW_LIKE_in_evalRelationalExpression5384); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_LIKE.add(LIKE277);

                            pushFollow(FOLLOW_concatenationExpr_in_evalRelationalExpression5386);
                            concatenationExpr278=concatenationExpr();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_concatenationExpr.add(concatenationExpr278.getTree());
                            // EsperEPL2Grammar.g:930:30: ( ESCAPE stringconstant )?
                            int alt115=2;
                            int LA115_0 = input.LA(1);

                            if ( (LA115_0==ESCAPE) ) {
                                alt115=1;
                            }
                            switch (alt115) {
                                case 1 :
                                    // EsperEPL2Grammar.g:930:31: ESCAPE stringconstant
                                    {
                                    ESCAPE279=(Token)match(input,ESCAPE,FOLLOW_ESCAPE_in_evalRelationalExpression5389); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_ESCAPE.add(ESCAPE279);

                                    pushFollow(FOLLOW_stringconstant_in_evalRelationalExpression5391);
                                    stringconstant280=stringconstant();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_stringconstant.add(stringconstant280.getTree());

                                    }
                                    break;

                            }



                            // AST REWRITE
                            // elements: concatenationExpr, stringconstant, stringconstant, concatenationExpr, LIKE
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 931:9: -> {$n == null}? ^( LIKE ( concatenationExpr )* ( stringconstant )? )
                            if (n == null) {
                                // EsperEPL2Grammar.g:931:26: ^( LIKE ( concatenationExpr )* ( stringconstant )? )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_LIKE.nextNode(), root_1);

                                // EsperEPL2Grammar.g:931:33: ( concatenationExpr )*
                                while ( stream_concatenationExpr.hasNext() ) {
                                    adaptor.addChild(root_1, stream_concatenationExpr.nextTree());

                                }
                                stream_concatenationExpr.reset();
                                // EsperEPL2Grammar.g:931:52: ( stringconstant )?
                                if ( stream_stringconstant.hasNext() ) {
                                    adaptor.addChild(root_1, stream_stringconstant.nextTree());

                                }
                                stream_stringconstant.reset();

                                adaptor.addChild(root_0, root_1);
                                }

                            }
                            else // 932:9: -> ^( NOT_LIKE ( concatenationExpr )* ( stringconstant )? )
                            {
                                // EsperEPL2Grammar.g:932:12: ^( NOT_LIKE ( concatenationExpr )* ( stringconstant )? )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_LIKE, "NOT_LIKE"), root_1);

                                // EsperEPL2Grammar.g:932:23: ( concatenationExpr )*
                                while ( stream_concatenationExpr.hasNext() ) {
                                    adaptor.addChild(root_1, stream_concatenationExpr.nextTree());

                                }
                                stream_concatenationExpr.reset();
                                // EsperEPL2Grammar.g:932:42: ( stringconstant )?
                                if ( stream_stringconstant.hasNext() ) {
                                    adaptor.addChild(root_1, stream_stringconstant.nextTree());

                                }
                                stream_stringconstant.reset();

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 5 :
                            // EsperEPL2Grammar.g:933:7: REGEXP concatenationExpr
                            {
                            REGEXP281=(Token)match(input,REGEXP,FOLLOW_REGEXP_in_evalRelationalExpression5443); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_REGEXP.add(REGEXP281);

                            pushFollow(FOLLOW_concatenationExpr_in_evalRelationalExpression5445);
                            concatenationExpr282=concatenationExpr();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_concatenationExpr.add(concatenationExpr282.getTree());


                            // AST REWRITE
                            // elements: concatenationExpr, concatenationExpr, REGEXP
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 934:9: -> {$n == null}? ^( REGEXP ( concatenationExpr )+ )
                            if (n == null) {
                                // EsperEPL2Grammar.g:934:26: ^( REGEXP ( concatenationExpr )+ )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_REGEXP.nextNode(), root_1);

                                if ( !(stream_concatenationExpr.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_concatenationExpr.hasNext() ) {
                                    adaptor.addChild(root_1, stream_concatenationExpr.nextTree());

                                }
                                stream_concatenationExpr.reset();

                                adaptor.addChild(root_0, root_1);
                                }

                            }
                            else // 935:9: -> ^( NOT_REGEXP ( concatenationExpr )+ )
                            {
                                // EsperEPL2Grammar.g:935:12: ^( NOT_REGEXP ( concatenationExpr )+ )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_REGEXP, "NOT_REGEXP"), root_1);

                                if ( !(stream_concatenationExpr.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_concatenationExpr.hasNext() ) {
                                    adaptor.addChild(root_1, stream_concatenationExpr.nextTree());

                                }
                                stream_concatenationExpr.reset();

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "evalRelationalExpression"

    public static class inSubSelectQuery_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inSubSelectQuery"
    // EsperEPL2Grammar.g:940:1: inSubSelectQuery : subQueryExpr -> ^( IN_SUBSELECT_QUERY_EXPR subQueryExpr ) ;
    public final EsperEPL2GrammarParser.inSubSelectQuery_return inSubSelectQuery() throws RecognitionException {
        EsperEPL2GrammarParser.inSubSelectQuery_return retval = new EsperEPL2GrammarParser.inSubSelectQuery_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr283 = null;


        RewriteRuleSubtreeStream stream_subQueryExpr=new RewriteRuleSubtreeStream(adaptor,"rule subQueryExpr");
        try {
            // EsperEPL2Grammar.g:941:2: ( subQueryExpr -> ^( IN_SUBSELECT_QUERY_EXPR subQueryExpr ) )
            // EsperEPL2Grammar.g:941:4: subQueryExpr
            {
            pushFollow(FOLLOW_subQueryExpr_in_inSubSelectQuery5507);
            subQueryExpr283=subQueryExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_subQueryExpr.add(subQueryExpr283.getTree());


            // AST REWRITE
            // elements: subQueryExpr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 942:4: -> ^( IN_SUBSELECT_QUERY_EXPR subQueryExpr )
            {
                // EsperEPL2Grammar.g:942:7: ^( IN_SUBSELECT_QUERY_EXPR subQueryExpr )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IN_SUBSELECT_QUERY_EXPR, "IN_SUBSELECT_QUERY_EXPR"), root_1);

                adaptor.addChild(root_1, stream_subQueryExpr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "inSubSelectQuery"

    public static class concatenationExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "concatenationExpr"
    // EsperEPL2Grammar.g:945:1: concatenationExpr : additiveExpression (c= LOR additiveExpression ( LOR additiveExpression )* )? -> {$c != null}? ^( CONCAT ( additiveExpression )+ ) -> additiveExpression ;
    public final EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr() throws RecognitionException {
        EsperEPL2GrammarParser.concatenationExpr_return retval = new EsperEPL2GrammarParser.concatenationExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token c=null;
        Token LOR286=null;
        EsperEPL2GrammarParser.additiveExpression_return additiveExpression284 = null;

        EsperEPL2GrammarParser.additiveExpression_return additiveExpression285 = null;

        EsperEPL2GrammarParser.additiveExpression_return additiveExpression287 = null;


        CommonTree c_tree=null;
        CommonTree LOR286_tree=null;
        RewriteRuleTokenStream stream_LOR=new RewriteRuleTokenStream(adaptor,"token LOR");
        RewriteRuleSubtreeStream stream_additiveExpression=new RewriteRuleSubtreeStream(adaptor,"rule additiveExpression");
        try {
            // EsperEPL2Grammar.g:946:2: ( additiveExpression (c= LOR additiveExpression ( LOR additiveExpression )* )? -> {$c != null}? ^( CONCAT ( additiveExpression )+ ) -> additiveExpression )
            // EsperEPL2Grammar.g:946:4: additiveExpression (c= LOR additiveExpression ( LOR additiveExpression )* )?
            {
            pushFollow(FOLLOW_additiveExpression_in_concatenationExpr5532);
            additiveExpression284=additiveExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_additiveExpression.add(additiveExpression284.getTree());
            // EsperEPL2Grammar.g:946:23: (c= LOR additiveExpression ( LOR additiveExpression )* )?
            int alt119=2;
            int LA119_0 = input.LA(1);

            if ( (LA119_0==LOR) ) {
                alt119=1;
            }
            switch (alt119) {
                case 1 :
                    // EsperEPL2Grammar.g:946:25: c= LOR additiveExpression ( LOR additiveExpression )*
                    {
                    c=(Token)match(input,LOR,FOLLOW_LOR_in_concatenationExpr5538); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LOR.add(c);

                    pushFollow(FOLLOW_additiveExpression_in_concatenationExpr5540);
                    additiveExpression285=additiveExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_additiveExpression.add(additiveExpression285.getTree());
                    // EsperEPL2Grammar.g:946:50: ( LOR additiveExpression )*
                    loop118:
                    do {
                        int alt118=2;
                        int LA118_0 = input.LA(1);

                        if ( (LA118_0==LOR) ) {
                            alt118=1;
                        }


                        switch (alt118) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:946:52: LOR additiveExpression
                    	    {
                    	    LOR286=(Token)match(input,LOR,FOLLOW_LOR_in_concatenationExpr5544); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_LOR.add(LOR286);

                    	    pushFollow(FOLLOW_additiveExpression_in_concatenationExpr5546);
                    	    additiveExpression287=additiveExpression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_additiveExpression.add(additiveExpression287.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop118;
                        }
                    } while (true);


                    }
                    break;

            }



            // AST REWRITE
            // elements: additiveExpression, additiveExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 947:6: -> {$c != null}? ^( CONCAT ( additiveExpression )+ )
            if (c != null) {
                // EsperEPL2Grammar.g:947:23: ^( CONCAT ( additiveExpression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CONCAT, "CONCAT"), root_1);

                if ( !(stream_additiveExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_additiveExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_additiveExpression.nextTree());

                }
                stream_additiveExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 948:6: -> additiveExpression
            {
                adaptor.addChild(root_0, stream_additiveExpression.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "concatenationExpr"

    public static class additiveExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "additiveExpression"
    // EsperEPL2Grammar.g:951:1: additiveExpression : multiplyExpression ( ( PLUS | MINUS ) multiplyExpression )* ;
    public final EsperEPL2GrammarParser.additiveExpression_return additiveExpression() throws RecognitionException {
        EsperEPL2GrammarParser.additiveExpression_return retval = new EsperEPL2GrammarParser.additiveExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token PLUS289=null;
        Token MINUS290=null;
        EsperEPL2GrammarParser.multiplyExpression_return multiplyExpression288 = null;

        EsperEPL2GrammarParser.multiplyExpression_return multiplyExpression291 = null;


        CommonTree PLUS289_tree=null;
        CommonTree MINUS290_tree=null;

        try {
            // EsperEPL2Grammar.g:952:2: ( multiplyExpression ( ( PLUS | MINUS ) multiplyExpression )* )
            // EsperEPL2Grammar.g:952:4: multiplyExpression ( ( PLUS | MINUS ) multiplyExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_multiplyExpression_in_additiveExpression5587);
            multiplyExpression288=multiplyExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, multiplyExpression288.getTree());
            // EsperEPL2Grammar.g:952:23: ( ( PLUS | MINUS ) multiplyExpression )*
            loop121:
            do {
                int alt121=2;
                int LA121_0 = input.LA(1);

                if ( ((LA121_0>=PLUS && LA121_0<=MINUS)) ) {
                    alt121=1;
                }


                switch (alt121) {
            	case 1 :
            	    // EsperEPL2Grammar.g:952:25: ( PLUS | MINUS ) multiplyExpression
            	    {
            	    // EsperEPL2Grammar.g:952:25: ( PLUS | MINUS )
            	    int alt120=2;
            	    int LA120_0 = input.LA(1);

            	    if ( (LA120_0==PLUS) ) {
            	        alt120=1;
            	    }
            	    else if ( (LA120_0==MINUS) ) {
            	        alt120=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 120, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt120) {
            	        case 1 :
            	            // EsperEPL2Grammar.g:952:26: PLUS
            	            {
            	            PLUS289=(Token)match(input,PLUS,FOLLOW_PLUS_in_additiveExpression5592); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            PLUS289_tree = (CommonTree)adaptor.create(PLUS289);
            	            root_0 = (CommonTree)adaptor.becomeRoot(PLUS289_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // EsperEPL2Grammar.g:952:32: MINUS
            	            {
            	            MINUS290=(Token)match(input,MINUS,FOLLOW_MINUS_in_additiveExpression5595); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            MINUS290_tree = (CommonTree)adaptor.create(MINUS290);
            	            root_0 = (CommonTree)adaptor.becomeRoot(MINUS290_tree, root_0);
            	            }

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_multiplyExpression_in_additiveExpression5599);
            	    multiplyExpression291=multiplyExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, multiplyExpression291.getTree());

            	    }
            	    break;

            	default :
            	    break loop121;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "additiveExpression"

    public static class multiplyExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "multiplyExpression"
    // EsperEPL2Grammar.g:955:1: multiplyExpression : unaryExpression ( ( STAR | DIV | MOD ) unaryExpression )* ;
    public final EsperEPL2GrammarParser.multiplyExpression_return multiplyExpression() throws RecognitionException {
        EsperEPL2GrammarParser.multiplyExpression_return retval = new EsperEPL2GrammarParser.multiplyExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token STAR293=null;
        Token DIV294=null;
        Token MOD295=null;
        EsperEPL2GrammarParser.unaryExpression_return unaryExpression292 = null;

        EsperEPL2GrammarParser.unaryExpression_return unaryExpression296 = null;


        CommonTree STAR293_tree=null;
        CommonTree DIV294_tree=null;
        CommonTree MOD295_tree=null;

        try {
            // EsperEPL2Grammar.g:956:2: ( unaryExpression ( ( STAR | DIV | MOD ) unaryExpression )* )
            // EsperEPL2Grammar.g:956:4: unaryExpression ( ( STAR | DIV | MOD ) unaryExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_unaryExpression_in_multiplyExpression5613);
            unaryExpression292=unaryExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpression292.getTree());
            // EsperEPL2Grammar.g:956:20: ( ( STAR | DIV | MOD ) unaryExpression )*
            loop123:
            do {
                int alt123=2;
                int LA123_0 = input.LA(1);

                if ( (LA123_0==STAR||(LA123_0>=DIV && LA123_0<=MOD)) ) {
                    alt123=1;
                }


                switch (alt123) {
            	case 1 :
            	    // EsperEPL2Grammar.g:956:22: ( STAR | DIV | MOD ) unaryExpression
            	    {
            	    // EsperEPL2Grammar.g:956:22: ( STAR | DIV | MOD )
            	    int alt122=3;
            	    switch ( input.LA(1) ) {
            	    case STAR:
            	        {
            	        alt122=1;
            	        }
            	        break;
            	    case DIV:
            	        {
            	        alt122=2;
            	        }
            	        break;
            	    case MOD:
            	        {
            	        alt122=3;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 122, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt122) {
            	        case 1 :
            	            // EsperEPL2Grammar.g:956:23: STAR
            	            {
            	            STAR293=(Token)match(input,STAR,FOLLOW_STAR_in_multiplyExpression5618); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            STAR293_tree = (CommonTree)adaptor.create(STAR293);
            	            root_0 = (CommonTree)adaptor.becomeRoot(STAR293_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // EsperEPL2Grammar.g:956:29: DIV
            	            {
            	            DIV294=(Token)match(input,DIV,FOLLOW_DIV_in_multiplyExpression5621); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            DIV294_tree = (CommonTree)adaptor.create(DIV294);
            	            root_0 = (CommonTree)adaptor.becomeRoot(DIV294_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 3 :
            	            // EsperEPL2Grammar.g:956:34: MOD
            	            {
            	            MOD295=(Token)match(input,MOD,FOLLOW_MOD_in_multiplyExpression5624); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            MOD295_tree = (CommonTree)adaptor.create(MOD295);
            	            root_0 = (CommonTree)adaptor.becomeRoot(MOD295_tree, root_0);
            	            }

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_unaryExpression_in_multiplyExpression5628);
            	    unaryExpression296=unaryExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpression296.getTree());

            	    }
            	    break;

            	default :
            	    break loop123;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "multiplyExpression"

    public static class unaryExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unaryExpression"
    // EsperEPL2Grammar.g:959:1: unaryExpression : ( MINUS eventProperty -> ^( UNARY_MINUS eventProperty ) | constant | substitution | LPAREN expression RPAREN | eventPropertyOrLibFunction | ( builtinFunc )=> ( builtinFunc ) | arrayExpression | subSelectExpression | existsSubSelectExpression );
    public final EsperEPL2GrammarParser.unaryExpression_return unaryExpression() throws RecognitionException {
        EsperEPL2GrammarParser.unaryExpression_return retval = new EsperEPL2GrammarParser.unaryExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token MINUS297=null;
        Token LPAREN301=null;
        Token RPAREN303=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty298 = null;

        EsperEPL2GrammarParser.constant_return constant299 = null;

        EsperEPL2GrammarParser.substitution_return substitution300 = null;

        EsperEPL2GrammarParser.expression_return expression302 = null;

        EsperEPL2GrammarParser.eventPropertyOrLibFunction_return eventPropertyOrLibFunction304 = null;

        EsperEPL2GrammarParser.builtinFunc_return builtinFunc305 = null;

        EsperEPL2GrammarParser.arrayExpression_return arrayExpression306 = null;

        EsperEPL2GrammarParser.subSelectExpression_return subSelectExpression307 = null;

        EsperEPL2GrammarParser.existsSubSelectExpression_return existsSubSelectExpression308 = null;


        CommonTree MINUS297_tree=null;
        CommonTree LPAREN301_tree=null;
        CommonTree RPAREN303_tree=null;
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleSubtreeStream stream_eventProperty=new RewriteRuleSubtreeStream(adaptor,"rule eventProperty");
        try {
            // EsperEPL2Grammar.g:960:2: ( MINUS eventProperty -> ^( UNARY_MINUS eventProperty ) | constant | substitution | LPAREN expression RPAREN | eventPropertyOrLibFunction | ( builtinFunc )=> ( builtinFunc ) | arrayExpression | subSelectExpression | existsSubSelectExpression )
            int alt124=9;
            alt124 = dfa124.predict(input);
            switch (alt124) {
                case 1 :
                    // EsperEPL2Grammar.g:960:4: MINUS eventProperty
                    {
                    MINUS297=(Token)match(input,MINUS,FOLLOW_MINUS_in_unaryExpression5643); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MINUS.add(MINUS297);

                    pushFollow(FOLLOW_eventProperty_in_unaryExpression5645);
                    eventProperty298=eventProperty();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_eventProperty.add(eventProperty298.getTree());


                    // AST REWRITE
                    // elements: eventProperty
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 960:24: -> ^( UNARY_MINUS eventProperty )
                    {
                        // EsperEPL2Grammar.g:960:27: ^( UNARY_MINUS eventProperty )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(UNARY_MINUS, "UNARY_MINUS"), root_1);

                        adaptor.addChild(root_1, stream_eventProperty.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:961:4: constant
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_constant_in_unaryExpression5658);
                    constant299=constant();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constant299.getTree());

                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:962:4: substitution
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_substitution_in_unaryExpression5663);
                    substitution300=substitution();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, substitution300.getTree());

                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:963:4: LPAREN expression RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    LPAREN301=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_unaryExpression5668); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_unaryExpression5671);
                    expression302=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression302.getTree());
                    RPAREN303=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_unaryExpression5673); if (state.failed) return retval;

                    }
                    break;
                case 5 :
                    // EsperEPL2Grammar.g:964:4: eventPropertyOrLibFunction
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_eventPropertyOrLibFunction_in_unaryExpression5679);
                    eventPropertyOrLibFunction304=eventPropertyOrLibFunction();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, eventPropertyOrLibFunction304.getTree());

                    }
                    break;
                case 6 :
                    // EsperEPL2Grammar.g:965:4: ( builtinFunc )=> ( builtinFunc )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // EsperEPL2Grammar.g:965:21: ( builtinFunc )
                    // EsperEPL2Grammar.g:965:22: builtinFunc
                    {
                    pushFollow(FOLLOW_builtinFunc_in_unaryExpression5691);
                    builtinFunc305=builtinFunc();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, builtinFunc305.getTree());

                    }


                    }
                    break;
                case 7 :
                    // EsperEPL2Grammar.g:966:4: arrayExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_arrayExpression_in_unaryExpression5697);
                    arrayExpression306=arrayExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arrayExpression306.getTree());

                    }
                    break;
                case 8 :
                    // EsperEPL2Grammar.g:967:4: subSelectExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_subSelectExpression_in_unaryExpression5702);
                    subSelectExpression307=subSelectExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, subSelectExpression307.getTree());

                    }
                    break;
                case 9 :
                    // EsperEPL2Grammar.g:968:4: existsSubSelectExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_existsSubSelectExpression_in_unaryExpression5707);
                    existsSubSelectExpression308=existsSubSelectExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, existsSubSelectExpression308.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "unaryExpression"

    public static class subSelectExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "subSelectExpression"
    // EsperEPL2Grammar.g:971:1: subSelectExpression : subQueryExpr -> ^( SUBSELECT_EXPR subQueryExpr ) ;
    public final EsperEPL2GrammarParser.subSelectExpression_return subSelectExpression() throws RecognitionException {
        EsperEPL2GrammarParser.subSelectExpression_return retval = new EsperEPL2GrammarParser.subSelectExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr309 = null;


        RewriteRuleSubtreeStream stream_subQueryExpr=new RewriteRuleSubtreeStream(adaptor,"rule subQueryExpr");
        try {
            // EsperEPL2Grammar.g:972:2: ( subQueryExpr -> ^( SUBSELECT_EXPR subQueryExpr ) )
            // EsperEPL2Grammar.g:972:4: subQueryExpr
            {
            pushFollow(FOLLOW_subQueryExpr_in_subSelectExpression5724);
            subQueryExpr309=subQueryExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_subQueryExpr.add(subQueryExpr309.getTree());


            // AST REWRITE
            // elements: subQueryExpr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 973:3: -> ^( SUBSELECT_EXPR subQueryExpr )
            {
                // EsperEPL2Grammar.g:973:6: ^( SUBSELECT_EXPR subQueryExpr )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SUBSELECT_EXPR, "SUBSELECT_EXPR"), root_1);

                adaptor.addChild(root_1, stream_subQueryExpr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "subSelectExpression"

    public static class subSelectGroupExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "subSelectGroupExpression"
    // EsperEPL2Grammar.g:976:1: subSelectGroupExpression : subQueryExpr -> ^( SUBSELECT_GROUP_EXPR subQueryExpr ) ;
    public final EsperEPL2GrammarParser.subSelectGroupExpression_return subSelectGroupExpression() throws RecognitionException {
        EsperEPL2GrammarParser.subSelectGroupExpression_return retval = new EsperEPL2GrammarParser.subSelectGroupExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr310 = null;


        RewriteRuleSubtreeStream stream_subQueryExpr=new RewriteRuleSubtreeStream(adaptor,"rule subQueryExpr");
        try {
            // EsperEPL2Grammar.g:977:2: ( subQueryExpr -> ^( SUBSELECT_GROUP_EXPR subQueryExpr ) )
            // EsperEPL2Grammar.g:977:4: subQueryExpr
            {
            pushFollow(FOLLOW_subQueryExpr_in_subSelectGroupExpression5746);
            subQueryExpr310=subQueryExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_subQueryExpr.add(subQueryExpr310.getTree());


            // AST REWRITE
            // elements: subQueryExpr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 978:3: -> ^( SUBSELECT_GROUP_EXPR subQueryExpr )
            {
                // EsperEPL2Grammar.g:978:6: ^( SUBSELECT_GROUP_EXPR subQueryExpr )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SUBSELECT_GROUP_EXPR, "SUBSELECT_GROUP_EXPR"), root_1);

                adaptor.addChild(root_1, stream_subQueryExpr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "subSelectGroupExpression"

    public static class existsSubSelectExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "existsSubSelectExpression"
    // EsperEPL2Grammar.g:981:1: existsSubSelectExpression : EXISTS subQueryExpr -> ^( EXISTS_SUBSELECT_EXPR subQueryExpr ) ;
    public final EsperEPL2GrammarParser.existsSubSelectExpression_return existsSubSelectExpression() throws RecognitionException {
        EsperEPL2GrammarParser.existsSubSelectExpression_return retval = new EsperEPL2GrammarParser.existsSubSelectExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token EXISTS311=null;
        EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr312 = null;


        CommonTree EXISTS311_tree=null;
        RewriteRuleTokenStream stream_EXISTS=new RewriteRuleTokenStream(adaptor,"token EXISTS");
        RewriteRuleSubtreeStream stream_subQueryExpr=new RewriteRuleSubtreeStream(adaptor,"rule subQueryExpr");
        try {
            // EsperEPL2Grammar.g:982:2: ( EXISTS subQueryExpr -> ^( EXISTS_SUBSELECT_EXPR subQueryExpr ) )
            // EsperEPL2Grammar.g:982:4: EXISTS subQueryExpr
            {
            EXISTS311=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_existsSubSelectExpression5768); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EXISTS.add(EXISTS311);

            pushFollow(FOLLOW_subQueryExpr_in_existsSubSelectExpression5770);
            subQueryExpr312=subQueryExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_subQueryExpr.add(subQueryExpr312.getTree());


            // AST REWRITE
            // elements: subQueryExpr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 983:3: -> ^( EXISTS_SUBSELECT_EXPR subQueryExpr )
            {
                // EsperEPL2Grammar.g:983:6: ^( EXISTS_SUBSELECT_EXPR subQueryExpr )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EXISTS_SUBSELECT_EXPR, "EXISTS_SUBSELECT_EXPR"), root_1);

                adaptor.addChild(root_1, stream_subQueryExpr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "existsSubSelectExpression"

    public static class subQueryExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "subQueryExpr"
    // EsperEPL2Grammar.g:986:1: subQueryExpr : LPAREN SELECT selectionListElement FROM subSelectFilterExpr ( WHERE whereClause )? RPAREN ;
    public final EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr() throws RecognitionException {
        EsperEPL2GrammarParser.subQueryExpr_return retval = new EsperEPL2GrammarParser.subQueryExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LPAREN313=null;
        Token SELECT314=null;
        Token FROM316=null;
        Token WHERE318=null;
        Token RPAREN320=null;
        EsperEPL2GrammarParser.selectionListElement_return selectionListElement315 = null;

        EsperEPL2GrammarParser.subSelectFilterExpr_return subSelectFilterExpr317 = null;

        EsperEPL2GrammarParser.whereClause_return whereClause319 = null;


        CommonTree LPAREN313_tree=null;
        CommonTree SELECT314_tree=null;
        CommonTree FROM316_tree=null;
        CommonTree WHERE318_tree=null;
        CommonTree RPAREN320_tree=null;

         paraphrases.push("subquery"); 
        try {
            // EsperEPL2Grammar.g:989:2: ( LPAREN SELECT selectionListElement FROM subSelectFilterExpr ( WHERE whereClause )? RPAREN )
            // EsperEPL2Grammar.g:989:4: LPAREN SELECT selectionListElement FROM subSelectFilterExpr ( WHERE whereClause )? RPAREN
            {
            root_0 = (CommonTree)adaptor.nil();

            LPAREN313=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_subQueryExpr5803); if (state.failed) return retval;
            SELECT314=(Token)match(input,SELECT,FOLLOW_SELECT_in_subQueryExpr5809); if (state.failed) return retval;
            pushFollow(FOLLOW_selectionListElement_in_subQueryExpr5812);
            selectionListElement315=selectionListElement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, selectionListElement315.getTree());
            FROM316=(Token)match(input,FROM,FOLLOW_FROM_in_subQueryExpr5819); if (state.failed) return retval;
            pushFollow(FOLLOW_subSelectFilterExpr_in_subQueryExpr5822);
            subSelectFilterExpr317=subSelectFilterExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, subSelectFilterExpr317.getTree());
            // EsperEPL2Grammar.g:992:6: ( WHERE whereClause )?
            int alt125=2;
            int LA125_0 = input.LA(1);

            if ( (LA125_0==WHERE) ) {
                alt125=1;
            }
            switch (alt125) {
                case 1 :
                    // EsperEPL2Grammar.g:992:7: WHERE whereClause
                    {
                    WHERE318=(Token)match(input,WHERE,FOLLOW_WHERE_in_subQueryExpr5830); if (state.failed) return retval;
                    pushFollow(FOLLOW_whereClause_in_subQueryExpr5833);
                    whereClause319=whereClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, whereClause319.getTree());

                    }
                    break;

            }

            RPAREN320=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_subQueryExpr5842); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "subQueryExpr"

    public static class subSelectFilterExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "subSelectFilterExpr"
    // EsperEPL2Grammar.g:996:1: subSelectFilterExpr : eventFilterExpression ( DOT viewExpression ( DOT viewExpression )* )? ( AS i= IDENT | i= IDENT )? (ru= RETAINUNION | ri= RETAININTERSECTION )? -> ^( STREAM_EXPR eventFilterExpression ( viewExpression )* ( $i)? ( $ru)? ( $ri)? ) ;
    public final EsperEPL2GrammarParser.subSelectFilterExpr_return subSelectFilterExpr() throws RecognitionException {
        EsperEPL2GrammarParser.subSelectFilterExpr_return retval = new EsperEPL2GrammarParser.subSelectFilterExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token ru=null;
        Token ri=null;
        Token DOT322=null;
        Token DOT324=null;
        Token AS326=null;
        EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression321 = null;

        EsperEPL2GrammarParser.viewExpression_return viewExpression323 = null;

        EsperEPL2GrammarParser.viewExpression_return viewExpression325 = null;


        CommonTree i_tree=null;
        CommonTree ru_tree=null;
        CommonTree ri_tree=null;
        CommonTree DOT322_tree=null;
        CommonTree DOT324_tree=null;
        CommonTree AS326_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RETAINUNION=new RewriteRuleTokenStream(adaptor,"token RETAINUNION");
        RewriteRuleTokenStream stream_RETAININTERSECTION=new RewriteRuleTokenStream(adaptor,"token RETAININTERSECTION");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_viewExpression=new RewriteRuleSubtreeStream(adaptor,"rule viewExpression");
        RewriteRuleSubtreeStream stream_eventFilterExpression=new RewriteRuleSubtreeStream(adaptor,"rule eventFilterExpression");
         paraphrases.push("subquery filter specification"); 
        try {
            // EsperEPL2Grammar.g:999:2: ( eventFilterExpression ( DOT viewExpression ( DOT viewExpression )* )? ( AS i= IDENT | i= IDENT )? (ru= RETAINUNION | ri= RETAININTERSECTION )? -> ^( STREAM_EXPR eventFilterExpression ( viewExpression )* ( $i)? ( $ru)? ( $ri)? ) )
            // EsperEPL2Grammar.g:999:4: eventFilterExpression ( DOT viewExpression ( DOT viewExpression )* )? ( AS i= IDENT | i= IDENT )? (ru= RETAINUNION | ri= RETAININTERSECTION )?
            {
            pushFollow(FOLLOW_eventFilterExpression_in_subSelectFilterExpr5866);
            eventFilterExpression321=eventFilterExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventFilterExpression.add(eventFilterExpression321.getTree());
            // EsperEPL2Grammar.g:1000:3: ( DOT viewExpression ( DOT viewExpression )* )?
            int alt127=2;
            int LA127_0 = input.LA(1);

            if ( (LA127_0==DOT) ) {
                alt127=1;
            }
            switch (alt127) {
                case 1 :
                    // EsperEPL2Grammar.g:1000:4: DOT viewExpression ( DOT viewExpression )*
                    {
                    DOT322=(Token)match(input,DOT,FOLLOW_DOT_in_subSelectFilterExpr5871); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT322);

                    pushFollow(FOLLOW_viewExpression_in_subSelectFilterExpr5873);
                    viewExpression323=viewExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression323.getTree());
                    // EsperEPL2Grammar.g:1000:23: ( DOT viewExpression )*
                    loop126:
                    do {
                        int alt126=2;
                        int LA126_0 = input.LA(1);

                        if ( (LA126_0==DOT) ) {
                            alt126=1;
                        }


                        switch (alt126) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:1000:24: DOT viewExpression
                    	    {
                    	    DOT324=(Token)match(input,DOT,FOLLOW_DOT_in_subSelectFilterExpr5876); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_DOT.add(DOT324);

                    	    pushFollow(FOLLOW_viewExpression_in_subSelectFilterExpr5878);
                    	    viewExpression325=viewExpression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression325.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop126;
                        }
                    } while (true);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:1000:47: ( AS i= IDENT | i= IDENT )?
            int alt128=3;
            int LA128_0 = input.LA(1);

            if ( (LA128_0==AS) ) {
                alt128=1;
            }
            else if ( (LA128_0==IDENT) ) {
                alt128=2;
            }
            switch (alt128) {
                case 1 :
                    // EsperEPL2Grammar.g:1000:48: AS i= IDENT
                    {
                    AS326=(Token)match(input,AS,FOLLOW_AS_in_subSelectFilterExpr5885); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS326);

                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_subSelectFilterExpr5889); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1000:61: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_subSelectFilterExpr5895); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:1000:71: (ru= RETAINUNION | ri= RETAININTERSECTION )?
            int alt129=3;
            int LA129_0 = input.LA(1);

            if ( (LA129_0==RETAINUNION) ) {
                alt129=1;
            }
            else if ( (LA129_0==RETAININTERSECTION) ) {
                alt129=2;
            }
            switch (alt129) {
                case 1 :
                    // EsperEPL2Grammar.g:1000:72: ru= RETAINUNION
                    {
                    ru=(Token)match(input,RETAINUNION,FOLLOW_RETAINUNION_in_subSelectFilterExpr5902); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAINUNION.add(ru);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1000:87: ri= RETAININTERSECTION
                    {
                    ri=(Token)match(input,RETAININTERSECTION,FOLLOW_RETAININTERSECTION_in_subSelectFilterExpr5906); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAININTERSECTION.add(ri);


                    }
                    break;

            }



            // AST REWRITE
            // elements: ru, eventFilterExpression, viewExpression, i, ri
            // token labels: ri, ru, i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_ri=new RewriteRuleTokenStream(adaptor,"token ri",ri);
            RewriteRuleTokenStream stream_ru=new RewriteRuleTokenStream(adaptor,"token ru",ru);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1001:3: -> ^( STREAM_EXPR eventFilterExpression ( viewExpression )* ( $i)? ( $ru)? ( $ri)? )
            {
                // EsperEPL2Grammar.g:1001:6: ^( STREAM_EXPR eventFilterExpression ( viewExpression )* ( $i)? ( $ru)? ( $ri)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STREAM_EXPR, "STREAM_EXPR"), root_1);

                adaptor.addChild(root_1, stream_eventFilterExpression.nextTree());
                // EsperEPL2Grammar.g:1001:42: ( viewExpression )*
                while ( stream_viewExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_viewExpression.nextTree());

                }
                stream_viewExpression.reset();
                // EsperEPL2Grammar.g:1001:58: ( $i)?
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());

                }
                stream_i.reset();
                // EsperEPL2Grammar.g:1001:62: ( $ru)?
                if ( stream_ru.hasNext() ) {
                    adaptor.addChild(root_1, stream_ru.nextNode());

                }
                stream_ru.reset();
                // EsperEPL2Grammar.g:1001:67: ( $ri)?
                if ( stream_ri.hasNext() ) {
                    adaptor.addChild(root_1, stream_ri.nextNode());

                }
                stream_ri.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "subSelectFilterExpr"

    public static class arrayExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "arrayExpression"
    // EsperEPL2Grammar.g:1004:1: arrayExpression : LCURLY ( expression ( COMMA expression )* )? RCURLY -> ^( ARRAY_EXPR ( expression )* ) ;
    public final EsperEPL2GrammarParser.arrayExpression_return arrayExpression() throws RecognitionException {
        EsperEPL2GrammarParser.arrayExpression_return retval = new EsperEPL2GrammarParser.arrayExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LCURLY327=null;
        Token COMMA329=null;
        Token RCURLY331=null;
        EsperEPL2GrammarParser.expression_return expression328 = null;

        EsperEPL2GrammarParser.expression_return expression330 = null;


        CommonTree LCURLY327_tree=null;
        CommonTree COMMA329_tree=null;
        CommonTree RCURLY331_tree=null;
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            // EsperEPL2Grammar.g:1005:2: ( LCURLY ( expression ( COMMA expression )* )? RCURLY -> ^( ARRAY_EXPR ( expression )* ) )
            // EsperEPL2Grammar.g:1005:4: LCURLY ( expression ( COMMA expression )* )? RCURLY
            {
            LCURLY327=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_arrayExpression5946); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCURLY.add(LCURLY327);

            // EsperEPL2Grammar.g:1005:11: ( expression ( COMMA expression )* )?
            int alt131=2;
            int LA131_0 = input.LA(1);

            if ( (LA131_0==WINDOW||LA131_0==ESCAPE||(LA131_0>=NOT_EXPR && LA131_0<=EVERY_EXPR)||(LA131_0>=SUM && LA131_0<=COUNT)||LA131_0==CASE||LA131_0==OUTER||(LA131_0>=JOIN && LA131_0<=FULL)||(LA131_0>=EVENTS && LA131_0<=LAST)||(LA131_0>=UNIDIRECTIONAL && LA131_0<=CURRENT_TIMESTAMP)||LA131_0==SNAPSHOT||(LA131_0>=VARIABLE && LA131_0<=AT)||(LA131_0>=BOOLEAN_TRUE && LA131_0<=VALUE_NULL)||LA131_0==NUM_DOUBLE||LA131_0==IDENT||LA131_0==LPAREN||(LA131_0>=STRING_LITERAL && LA131_0<=QUOTED_STRING_LITERAL)||(LA131_0>=PLUS && LA131_0<=MINUS)||LA131_0==LCURLY||LA131_0==NUM_INT||LA131_0==QUESTION||(LA131_0>=TICKED_STRING_LITERAL && LA131_0<=NUM_FLOAT)) ) {
                alt131=1;
            }
            switch (alt131) {
                case 1 :
                    // EsperEPL2Grammar.g:1005:12: expression ( COMMA expression )*
                    {
                    pushFollow(FOLLOW_expression_in_arrayExpression5949);
                    expression328=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression328.getTree());
                    // EsperEPL2Grammar.g:1005:23: ( COMMA expression )*
                    loop130:
                    do {
                        int alt130=2;
                        int LA130_0 = input.LA(1);

                        if ( (LA130_0==COMMA) ) {
                            alt130=1;
                        }


                        switch (alt130) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:1005:24: COMMA expression
                    	    {
                    	    COMMA329=(Token)match(input,COMMA,FOLLOW_COMMA_in_arrayExpression5952); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA329);

                    	    pushFollow(FOLLOW_expression_in_arrayExpression5954);
                    	    expression330=expression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_expression.add(expression330.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop130;
                        }
                    } while (true);


                    }
                    break;

            }

            RCURLY331=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_arrayExpression5961); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCURLY.add(RCURLY331);



            // AST REWRITE
            // elements: expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1006:4: -> ^( ARRAY_EXPR ( expression )* )
            {
                // EsperEPL2Grammar.g:1006:7: ^( ARRAY_EXPR ( expression )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ARRAY_EXPR, "ARRAY_EXPR"), root_1);

                // EsperEPL2Grammar.g:1006:20: ( expression )*
                while ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());

                }
                stream_expression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "arrayExpression"

    public static class builtinFunc_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "builtinFunc"
    // EsperEPL2Grammar.g:1009:1: builtinFunc : ( SUM LPAREN ( ALL | DISTINCT )? expression RPAREN | AVG LPAREN ( ALL | DISTINCT )? expression RPAREN | COUNT LPAREN ( ( ( ALL | DISTINCT )? expression ) | ( STAR ) ) RPAREN | MEDIAN LPAREN ( ALL | DISTINCT )? expression RPAREN | STDDEV LPAREN ( ALL | DISTINCT )? expression RPAREN | AVEDEV LPAREN ( ALL | DISTINCT )? expression RPAREN | COALESCE LPAREN expression COMMA expression ( COMMA expression )* RPAREN | PREVIOUS LPAREN expression COMMA eventProperty RPAREN | PRIOR LPAREN NUM_INT COMMA eventProperty RPAREN | INSTANCEOF LPAREN expression COMMA classIdentifier ( COMMA classIdentifier )* RPAREN | CAST LPAREN expression ( COMMA | AS ) classIdentifier RPAREN | EXISTS LPAREN eventProperty RPAREN | CURRENT_TIMESTAMP ( LPAREN RPAREN )? );
    public final EsperEPL2GrammarParser.builtinFunc_return builtinFunc() throws RecognitionException {
        EsperEPL2GrammarParser.builtinFunc_return retval = new EsperEPL2GrammarParser.builtinFunc_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token SUM332=null;
        Token LPAREN333=null;
        Token ALL334=null;
        Token DISTINCT335=null;
        Token RPAREN337=null;
        Token AVG338=null;
        Token LPAREN339=null;
        Token ALL340=null;
        Token DISTINCT341=null;
        Token RPAREN343=null;
        Token COUNT344=null;
        Token LPAREN345=null;
        Token ALL346=null;
        Token DISTINCT347=null;
        Token STAR349=null;
        Token RPAREN350=null;
        Token MEDIAN351=null;
        Token LPAREN352=null;
        Token ALL353=null;
        Token DISTINCT354=null;
        Token RPAREN356=null;
        Token STDDEV357=null;
        Token LPAREN358=null;
        Token ALL359=null;
        Token DISTINCT360=null;
        Token RPAREN362=null;
        Token AVEDEV363=null;
        Token LPAREN364=null;
        Token ALL365=null;
        Token DISTINCT366=null;
        Token RPAREN368=null;
        Token COALESCE369=null;
        Token LPAREN370=null;
        Token COMMA372=null;
        Token COMMA374=null;
        Token RPAREN376=null;
        Token PREVIOUS377=null;
        Token LPAREN378=null;
        Token COMMA380=null;
        Token RPAREN382=null;
        Token PRIOR383=null;
        Token LPAREN384=null;
        Token NUM_INT385=null;
        Token COMMA386=null;
        Token RPAREN388=null;
        Token INSTANCEOF389=null;
        Token LPAREN390=null;
        Token COMMA392=null;
        Token COMMA394=null;
        Token RPAREN396=null;
        Token CAST397=null;
        Token LPAREN398=null;
        Token COMMA400=null;
        Token AS401=null;
        Token RPAREN403=null;
        Token EXISTS404=null;
        Token LPAREN405=null;
        Token RPAREN407=null;
        Token CURRENT_TIMESTAMP408=null;
        Token LPAREN409=null;
        Token RPAREN410=null;
        EsperEPL2GrammarParser.expression_return expression336 = null;

        EsperEPL2GrammarParser.expression_return expression342 = null;

        EsperEPL2GrammarParser.expression_return expression348 = null;

        EsperEPL2GrammarParser.expression_return expression355 = null;

        EsperEPL2GrammarParser.expression_return expression361 = null;

        EsperEPL2GrammarParser.expression_return expression367 = null;

        EsperEPL2GrammarParser.expression_return expression371 = null;

        EsperEPL2GrammarParser.expression_return expression373 = null;

        EsperEPL2GrammarParser.expression_return expression375 = null;

        EsperEPL2GrammarParser.expression_return expression379 = null;

        EsperEPL2GrammarParser.eventProperty_return eventProperty381 = null;

        EsperEPL2GrammarParser.eventProperty_return eventProperty387 = null;

        EsperEPL2GrammarParser.expression_return expression391 = null;

        EsperEPL2GrammarParser.classIdentifier_return classIdentifier393 = null;

        EsperEPL2GrammarParser.classIdentifier_return classIdentifier395 = null;

        EsperEPL2GrammarParser.expression_return expression399 = null;

        EsperEPL2GrammarParser.classIdentifier_return classIdentifier402 = null;

        EsperEPL2GrammarParser.eventProperty_return eventProperty406 = null;


        CommonTree SUM332_tree=null;
        CommonTree LPAREN333_tree=null;
        CommonTree ALL334_tree=null;
        CommonTree DISTINCT335_tree=null;
        CommonTree RPAREN337_tree=null;
        CommonTree AVG338_tree=null;
        CommonTree LPAREN339_tree=null;
        CommonTree ALL340_tree=null;
        CommonTree DISTINCT341_tree=null;
        CommonTree RPAREN343_tree=null;
        CommonTree COUNT344_tree=null;
        CommonTree LPAREN345_tree=null;
        CommonTree ALL346_tree=null;
        CommonTree DISTINCT347_tree=null;
        CommonTree STAR349_tree=null;
        CommonTree RPAREN350_tree=null;
        CommonTree MEDIAN351_tree=null;
        CommonTree LPAREN352_tree=null;
        CommonTree ALL353_tree=null;
        CommonTree DISTINCT354_tree=null;
        CommonTree RPAREN356_tree=null;
        CommonTree STDDEV357_tree=null;
        CommonTree LPAREN358_tree=null;
        CommonTree ALL359_tree=null;
        CommonTree DISTINCT360_tree=null;
        CommonTree RPAREN362_tree=null;
        CommonTree AVEDEV363_tree=null;
        CommonTree LPAREN364_tree=null;
        CommonTree ALL365_tree=null;
        CommonTree DISTINCT366_tree=null;
        CommonTree RPAREN368_tree=null;
        CommonTree COALESCE369_tree=null;
        CommonTree LPAREN370_tree=null;
        CommonTree COMMA372_tree=null;
        CommonTree COMMA374_tree=null;
        CommonTree RPAREN376_tree=null;
        CommonTree PREVIOUS377_tree=null;
        CommonTree LPAREN378_tree=null;
        CommonTree COMMA380_tree=null;
        CommonTree RPAREN382_tree=null;
        CommonTree PRIOR383_tree=null;
        CommonTree LPAREN384_tree=null;
        CommonTree NUM_INT385_tree=null;
        CommonTree COMMA386_tree=null;
        CommonTree RPAREN388_tree=null;
        CommonTree INSTANCEOF389_tree=null;
        CommonTree LPAREN390_tree=null;
        CommonTree COMMA392_tree=null;
        CommonTree COMMA394_tree=null;
        CommonTree RPAREN396_tree=null;
        CommonTree CAST397_tree=null;
        CommonTree LPAREN398_tree=null;
        CommonTree COMMA400_tree=null;
        CommonTree AS401_tree=null;
        CommonTree RPAREN403_tree=null;
        CommonTree EXISTS404_tree=null;
        CommonTree LPAREN405_tree=null;
        CommonTree RPAREN407_tree=null;
        CommonTree CURRENT_TIMESTAMP408_tree=null;
        CommonTree LPAREN409_tree=null;
        CommonTree RPAREN410_tree=null;

        try {
            // EsperEPL2Grammar.g:1010:2: ( SUM LPAREN ( ALL | DISTINCT )? expression RPAREN | AVG LPAREN ( ALL | DISTINCT )? expression RPAREN | COUNT LPAREN ( ( ( ALL | DISTINCT )? expression ) | ( STAR ) ) RPAREN | MEDIAN LPAREN ( ALL | DISTINCT )? expression RPAREN | STDDEV LPAREN ( ALL | DISTINCT )? expression RPAREN | AVEDEV LPAREN ( ALL | DISTINCT )? expression RPAREN | COALESCE LPAREN expression COMMA expression ( COMMA expression )* RPAREN | PREVIOUS LPAREN expression COMMA eventProperty RPAREN | PRIOR LPAREN NUM_INT COMMA eventProperty RPAREN | INSTANCEOF LPAREN expression COMMA classIdentifier ( COMMA classIdentifier )* RPAREN | CAST LPAREN expression ( COMMA | AS ) classIdentifier RPAREN | EXISTS LPAREN eventProperty RPAREN | CURRENT_TIMESTAMP ( LPAREN RPAREN )? )
            int alt143=13;
            switch ( input.LA(1) ) {
            case SUM:
                {
                alt143=1;
                }
                break;
            case AVG:
                {
                alt143=2;
                }
                break;
            case COUNT:
                {
                alt143=3;
                }
                break;
            case MEDIAN:
                {
                alt143=4;
                }
                break;
            case STDDEV:
                {
                alt143=5;
                }
                break;
            case AVEDEV:
                {
                alt143=6;
                }
                break;
            case COALESCE:
                {
                alt143=7;
                }
                break;
            case PREVIOUS:
                {
                alt143=8;
                }
                break;
            case PRIOR:
                {
                alt143=9;
                }
                break;
            case INSTANCEOF:
                {
                alt143=10;
                }
                break;
            case CAST:
                {
                alt143=11;
                }
                break;
            case EXISTS:
                {
                alt143=12;
                }
                break;
            case CURRENT_TIMESTAMP:
                {
                alt143=13;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 143, 0, input);

                throw nvae;
            }

            switch (alt143) {
                case 1 :
                    // EsperEPL2Grammar.g:1010:4: SUM LPAREN ( ALL | DISTINCT )? expression RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    SUM332=(Token)match(input,SUM,FOLLOW_SUM_in_builtinFunc5984); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SUM332_tree = (CommonTree)adaptor.create(SUM332);
                    root_0 = (CommonTree)adaptor.becomeRoot(SUM332_tree, root_0);
                    }
                    LPAREN333=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc5987); if (state.failed) return retval;
                    // EsperEPL2Grammar.g:1010:17: ( ALL | DISTINCT )?
                    int alt132=3;
                    int LA132_0 = input.LA(1);

                    if ( (LA132_0==ALL) ) {
                        alt132=1;
                    }
                    else if ( (LA132_0==DISTINCT) ) {
                        alt132=2;
                    }
                    switch (alt132) {
                        case 1 :
                            // EsperEPL2Grammar.g:1010:18: ALL
                            {
                            ALL334=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc5991); if (state.failed) return retval;

                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1010:25: DISTINCT
                            {
                            DISTINCT335=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc5996); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT335_tree = (CommonTree)adaptor.create(DISTINCT335);
                            adaptor.addChild(root_0, DISTINCT335_tree);
                            }

                            }
                            break;

                    }

                    pushFollow(FOLLOW_expression_in_builtinFunc6000);
                    expression336=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression336.getTree());
                    RPAREN337=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc6002); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1011:4: AVG LPAREN ( ALL | DISTINCT )? expression RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    AVG338=(Token)match(input,AVG,FOLLOW_AVG_in_builtinFunc6008); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AVG338_tree = (CommonTree)adaptor.create(AVG338);
                    root_0 = (CommonTree)adaptor.becomeRoot(AVG338_tree, root_0);
                    }
                    LPAREN339=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc6011); if (state.failed) return retval;
                    // EsperEPL2Grammar.g:1011:17: ( ALL | DISTINCT )?
                    int alt133=3;
                    int LA133_0 = input.LA(1);

                    if ( (LA133_0==ALL) ) {
                        alt133=1;
                    }
                    else if ( (LA133_0==DISTINCT) ) {
                        alt133=2;
                    }
                    switch (alt133) {
                        case 1 :
                            // EsperEPL2Grammar.g:1011:18: ALL
                            {
                            ALL340=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc6015); if (state.failed) return retval;

                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1011:25: DISTINCT
                            {
                            DISTINCT341=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc6020); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT341_tree = (CommonTree)adaptor.create(DISTINCT341);
                            adaptor.addChild(root_0, DISTINCT341_tree);
                            }

                            }
                            break;

                    }

                    pushFollow(FOLLOW_expression_in_builtinFunc6024);
                    expression342=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression342.getTree());
                    RPAREN343=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc6026); if (state.failed) return retval;

                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1012:4: COUNT LPAREN ( ( ( ALL | DISTINCT )? expression ) | ( STAR ) ) RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    COUNT344=(Token)match(input,COUNT,FOLLOW_COUNT_in_builtinFunc6032); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COUNT344_tree = (CommonTree)adaptor.create(COUNT344);
                    root_0 = (CommonTree)adaptor.becomeRoot(COUNT344_tree, root_0);
                    }
                    LPAREN345=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc6035); if (state.failed) return retval;
                    // EsperEPL2Grammar.g:1013:3: ( ( ( ALL | DISTINCT )? expression ) | ( STAR ) )
                    int alt135=2;
                    int LA135_0 = input.LA(1);

                    if ( (LA135_0==WINDOW||LA135_0==ESCAPE||(LA135_0>=NOT_EXPR && LA135_0<=EVERY_EXPR)||(LA135_0>=SUM && LA135_0<=COUNT)||LA135_0==CASE||LA135_0==OUTER||(LA135_0>=JOIN && LA135_0<=FULL)||(LA135_0>=DISTINCT && LA135_0<=ALL)||(LA135_0>=EVENTS && LA135_0<=LAST)||(LA135_0>=UNIDIRECTIONAL && LA135_0<=CURRENT_TIMESTAMP)||LA135_0==SNAPSHOT||(LA135_0>=VARIABLE && LA135_0<=AT)||(LA135_0>=BOOLEAN_TRUE && LA135_0<=VALUE_NULL)||LA135_0==NUM_DOUBLE||LA135_0==IDENT||LA135_0==LPAREN||(LA135_0>=STRING_LITERAL && LA135_0<=QUOTED_STRING_LITERAL)||(LA135_0>=PLUS && LA135_0<=MINUS)||LA135_0==LCURLY||LA135_0==NUM_INT||LA135_0==QUESTION||(LA135_0>=TICKED_STRING_LITERAL && LA135_0<=NUM_FLOAT)) ) {
                        alt135=1;
                    }
                    else if ( (LA135_0==STAR) ) {
                        alt135=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 135, 0, input);

                        throw nvae;
                    }
                    switch (alt135) {
                        case 1 :
                            // EsperEPL2Grammar.g:1014:4: ( ( ALL | DISTINCT )? expression )
                            {
                            // EsperEPL2Grammar.g:1014:4: ( ( ALL | DISTINCT )? expression )
                            // EsperEPL2Grammar.g:1014:5: ( ALL | DISTINCT )? expression
                            {
                            // EsperEPL2Grammar.g:1014:5: ( ALL | DISTINCT )?
                            int alt134=3;
                            int LA134_0 = input.LA(1);

                            if ( (LA134_0==ALL) ) {
                                alt134=1;
                            }
                            else if ( (LA134_0==DISTINCT) ) {
                                alt134=2;
                            }
                            switch (alt134) {
                                case 1 :
                                    // EsperEPL2Grammar.g:1014:6: ALL
                                    {
                                    ALL346=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc6047); if (state.failed) return retval;

                                    }
                                    break;
                                case 2 :
                                    // EsperEPL2Grammar.g:1014:13: DISTINCT
                                    {
                                    DISTINCT347=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc6052); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                    DISTINCT347_tree = (CommonTree)adaptor.create(DISTINCT347);
                                    adaptor.addChild(root_0, DISTINCT347_tree);
                                    }

                                    }
                                    break;

                            }

                            pushFollow(FOLLOW_expression_in_builtinFunc6056);
                            expression348=expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression348.getTree());

                            }


                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1016:4: ( STAR )
                            {
                            // EsperEPL2Grammar.g:1016:4: ( STAR )
                            // EsperEPL2Grammar.g:1016:5: STAR
                            {
                            STAR349=(Token)match(input,STAR,FOLLOW_STAR_in_builtinFunc6067); if (state.failed) return retval;

                            }


                            }
                            break;

                    }

                    RPAREN350=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc6078); if (state.failed) return retval;

                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:1019:4: MEDIAN LPAREN ( ALL | DISTINCT )? expression RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    MEDIAN351=(Token)match(input,MEDIAN,FOLLOW_MEDIAN_in_builtinFunc6084); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MEDIAN351_tree = (CommonTree)adaptor.create(MEDIAN351);
                    root_0 = (CommonTree)adaptor.becomeRoot(MEDIAN351_tree, root_0);
                    }
                    LPAREN352=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc6087); if (state.failed) return retval;
                    // EsperEPL2Grammar.g:1019:20: ( ALL | DISTINCT )?
                    int alt136=3;
                    int LA136_0 = input.LA(1);

                    if ( (LA136_0==ALL) ) {
                        alt136=1;
                    }
                    else if ( (LA136_0==DISTINCT) ) {
                        alt136=2;
                    }
                    switch (alt136) {
                        case 1 :
                            // EsperEPL2Grammar.g:1019:21: ALL
                            {
                            ALL353=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc6091); if (state.failed) return retval;

                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1019:28: DISTINCT
                            {
                            DISTINCT354=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc6096); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT354_tree = (CommonTree)adaptor.create(DISTINCT354);
                            adaptor.addChild(root_0, DISTINCT354_tree);
                            }

                            }
                            break;

                    }

                    pushFollow(FOLLOW_expression_in_builtinFunc6100);
                    expression355=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression355.getTree());
                    RPAREN356=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc6102); if (state.failed) return retval;

                    }
                    break;
                case 5 :
                    // EsperEPL2Grammar.g:1020:4: STDDEV LPAREN ( ALL | DISTINCT )? expression RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    STDDEV357=(Token)match(input,STDDEV,FOLLOW_STDDEV_in_builtinFunc6108); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STDDEV357_tree = (CommonTree)adaptor.create(STDDEV357);
                    root_0 = (CommonTree)adaptor.becomeRoot(STDDEV357_tree, root_0);
                    }
                    LPAREN358=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc6111); if (state.failed) return retval;
                    // EsperEPL2Grammar.g:1020:20: ( ALL | DISTINCT )?
                    int alt137=3;
                    int LA137_0 = input.LA(1);

                    if ( (LA137_0==ALL) ) {
                        alt137=1;
                    }
                    else if ( (LA137_0==DISTINCT) ) {
                        alt137=2;
                    }
                    switch (alt137) {
                        case 1 :
                            // EsperEPL2Grammar.g:1020:21: ALL
                            {
                            ALL359=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc6115); if (state.failed) return retval;

                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1020:28: DISTINCT
                            {
                            DISTINCT360=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc6120); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT360_tree = (CommonTree)adaptor.create(DISTINCT360);
                            adaptor.addChild(root_0, DISTINCT360_tree);
                            }

                            }
                            break;

                    }

                    pushFollow(FOLLOW_expression_in_builtinFunc6124);
                    expression361=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression361.getTree());
                    RPAREN362=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc6126); if (state.failed) return retval;

                    }
                    break;
                case 6 :
                    // EsperEPL2Grammar.g:1021:4: AVEDEV LPAREN ( ALL | DISTINCT )? expression RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    AVEDEV363=(Token)match(input,AVEDEV,FOLLOW_AVEDEV_in_builtinFunc6132); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AVEDEV363_tree = (CommonTree)adaptor.create(AVEDEV363);
                    root_0 = (CommonTree)adaptor.becomeRoot(AVEDEV363_tree, root_0);
                    }
                    LPAREN364=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc6135); if (state.failed) return retval;
                    // EsperEPL2Grammar.g:1021:20: ( ALL | DISTINCT )?
                    int alt138=3;
                    int LA138_0 = input.LA(1);

                    if ( (LA138_0==ALL) ) {
                        alt138=1;
                    }
                    else if ( (LA138_0==DISTINCT) ) {
                        alt138=2;
                    }
                    switch (alt138) {
                        case 1 :
                            // EsperEPL2Grammar.g:1021:21: ALL
                            {
                            ALL365=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc6139); if (state.failed) return retval;

                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1021:28: DISTINCT
                            {
                            DISTINCT366=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc6144); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT366_tree = (CommonTree)adaptor.create(DISTINCT366);
                            adaptor.addChild(root_0, DISTINCT366_tree);
                            }

                            }
                            break;

                    }

                    pushFollow(FOLLOW_expression_in_builtinFunc6148);
                    expression367=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression367.getTree());
                    RPAREN368=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc6150); if (state.failed) return retval;

                    }
                    break;
                case 7 :
                    // EsperEPL2Grammar.g:1022:4: COALESCE LPAREN expression COMMA expression ( COMMA expression )* RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    COALESCE369=(Token)match(input,COALESCE,FOLLOW_COALESCE_in_builtinFunc6156); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COALESCE369_tree = (CommonTree)adaptor.create(COALESCE369);
                    root_0 = (CommonTree)adaptor.becomeRoot(COALESCE369_tree, root_0);
                    }
                    LPAREN370=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc6159); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc6162);
                    expression371=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression371.getTree());
                    COMMA372=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc6164); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc6167);
                    expression373=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression373.getTree());
                    // EsperEPL2Grammar.g:1022:51: ( COMMA expression )*
                    loop139:
                    do {
                        int alt139=2;
                        int LA139_0 = input.LA(1);

                        if ( (LA139_0==COMMA) ) {
                            alt139=1;
                        }


                        switch (alt139) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:1022:52: COMMA expression
                    	    {
                    	    COMMA374=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc6170); if (state.failed) return retval;
                    	    pushFollow(FOLLOW_expression_in_builtinFunc6173);
                    	    expression375=expression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression375.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop139;
                        }
                    } while (true);

                    RPAREN376=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc6177); if (state.failed) return retval;

                    }
                    break;
                case 8 :
                    // EsperEPL2Grammar.g:1023:4: PREVIOUS LPAREN expression COMMA eventProperty RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    PREVIOUS377=(Token)match(input,PREVIOUS,FOLLOW_PREVIOUS_in_builtinFunc6183); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PREVIOUS377_tree = (CommonTree)adaptor.create(PREVIOUS377);
                    root_0 = (CommonTree)adaptor.becomeRoot(PREVIOUS377_tree, root_0);
                    }
                    LPAREN378=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc6186); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc6189);
                    expression379=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression379.getTree());
                    COMMA380=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc6191); if (state.failed) return retval;
                    pushFollow(FOLLOW_eventProperty_in_builtinFunc6194);
                    eventProperty381=eventProperty();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty381.getTree());
                    RPAREN382=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc6196); if (state.failed) return retval;

                    }
                    break;
                case 9 :
                    // EsperEPL2Grammar.g:1024:4: PRIOR LPAREN NUM_INT COMMA eventProperty RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    PRIOR383=(Token)match(input,PRIOR,FOLLOW_PRIOR_in_builtinFunc6202); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PRIOR383_tree = (CommonTree)adaptor.create(PRIOR383);
                    root_0 = (CommonTree)adaptor.becomeRoot(PRIOR383_tree, root_0);
                    }
                    LPAREN384=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc6205); if (state.failed) return retval;
                    NUM_INT385=(Token)match(input,NUM_INT,FOLLOW_NUM_INT_in_builtinFunc6208); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NUM_INT385_tree = (CommonTree)adaptor.create(NUM_INT385);
                    adaptor.addChild(root_0, NUM_INT385_tree);
                    }
                    COMMA386=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc6210); if (state.failed) return retval;
                    pushFollow(FOLLOW_eventProperty_in_builtinFunc6213);
                    eventProperty387=eventProperty();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty387.getTree());
                    RPAREN388=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc6215); if (state.failed) return retval;

                    }
                    break;
                case 10 :
                    // EsperEPL2Grammar.g:1027:4: INSTANCEOF LPAREN expression COMMA classIdentifier ( COMMA classIdentifier )* RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    INSTANCEOF389=(Token)match(input,INSTANCEOF,FOLLOW_INSTANCEOF_in_builtinFunc6225); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INSTANCEOF389_tree = (CommonTree)adaptor.create(INSTANCEOF389);
                    root_0 = (CommonTree)adaptor.becomeRoot(INSTANCEOF389_tree, root_0);
                    }
                    LPAREN390=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc6228); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc6231);
                    expression391=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression391.getTree());
                    COMMA392=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc6233); if (state.failed) return retval;
                    pushFollow(FOLLOW_classIdentifier_in_builtinFunc6236);
                    classIdentifier393=classIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier393.getTree());
                    // EsperEPL2Grammar.g:1027:58: ( COMMA classIdentifier )*
                    loop140:
                    do {
                        int alt140=2;
                        int LA140_0 = input.LA(1);

                        if ( (LA140_0==COMMA) ) {
                            alt140=1;
                        }


                        switch (alt140) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:1027:59: COMMA classIdentifier
                    	    {
                    	    COMMA394=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc6239); if (state.failed) return retval;
                    	    pushFollow(FOLLOW_classIdentifier_in_builtinFunc6242);
                    	    classIdentifier395=classIdentifier();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier395.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop140;
                        }
                    } while (true);

                    RPAREN396=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc6246); if (state.failed) return retval;

                    }
                    break;
                case 11 :
                    // EsperEPL2Grammar.g:1028:4: CAST LPAREN expression ( COMMA | AS ) classIdentifier RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    CAST397=(Token)match(input,CAST,FOLLOW_CAST_in_builtinFunc6252); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CAST397_tree = (CommonTree)adaptor.create(CAST397);
                    root_0 = (CommonTree)adaptor.becomeRoot(CAST397_tree, root_0);
                    }
                    LPAREN398=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc6255); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc6258);
                    expression399=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression399.getTree());
                    // EsperEPL2Grammar.g:1028:29: ( COMMA | AS )
                    int alt141=2;
                    int LA141_0 = input.LA(1);

                    if ( (LA141_0==COMMA) ) {
                        alt141=1;
                    }
                    else if ( (LA141_0==AS) ) {
                        alt141=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 141, 0, input);

                        throw nvae;
                    }
                    switch (alt141) {
                        case 1 :
                            // EsperEPL2Grammar.g:1028:30: COMMA
                            {
                            COMMA400=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc6261); if (state.failed) return retval;

                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1028:39: AS
                            {
                            AS401=(Token)match(input,AS,FOLLOW_AS_in_builtinFunc6266); if (state.failed) return retval;

                            }
                            break;

                    }

                    pushFollow(FOLLOW_classIdentifier_in_builtinFunc6270);
                    classIdentifier402=classIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier402.getTree());
                    RPAREN403=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc6272); if (state.failed) return retval;

                    }
                    break;
                case 12 :
                    // EsperEPL2Grammar.g:1029:4: EXISTS LPAREN eventProperty RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    EXISTS404=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_builtinFunc6278); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EXISTS404_tree = (CommonTree)adaptor.create(EXISTS404);
                    root_0 = (CommonTree)adaptor.becomeRoot(EXISTS404_tree, root_0);
                    }
                    LPAREN405=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc6281); if (state.failed) return retval;
                    pushFollow(FOLLOW_eventProperty_in_builtinFunc6284);
                    eventProperty406=eventProperty();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty406.getTree());
                    RPAREN407=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc6286); if (state.failed) return retval;

                    }
                    break;
                case 13 :
                    // EsperEPL2Grammar.g:1030:4: CURRENT_TIMESTAMP ( LPAREN RPAREN )?
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    CURRENT_TIMESTAMP408=(Token)match(input,CURRENT_TIMESTAMP,FOLLOW_CURRENT_TIMESTAMP_in_builtinFunc6292); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CURRENT_TIMESTAMP408_tree = (CommonTree)adaptor.create(CURRENT_TIMESTAMP408);
                    root_0 = (CommonTree)adaptor.becomeRoot(CURRENT_TIMESTAMP408_tree, root_0);
                    }
                    // EsperEPL2Grammar.g:1030:23: ( LPAREN RPAREN )?
                    int alt142=2;
                    int LA142_0 = input.LA(1);

                    if ( (LA142_0==LPAREN) ) {
                        alt142=1;
                    }
                    switch (alt142) {
                        case 1 :
                            // EsperEPL2Grammar.g:1030:24: LPAREN RPAREN
                            {
                            LPAREN409=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc6296); if (state.failed) return retval;
                            RPAREN410=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc6299); if (state.failed) return retval;

                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "builtinFunc"

    public static class maxFunc_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "maxFunc"
    // EsperEPL2Grammar.g:1033:1: maxFunc : ( MAX | MIN ) LPAREN expression ( COMMA expression ( COMMA expression )* )? RPAREN ;
    public final EsperEPL2GrammarParser.maxFunc_return maxFunc() throws RecognitionException {
        EsperEPL2GrammarParser.maxFunc_return retval = new EsperEPL2GrammarParser.maxFunc_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token MAX411=null;
        Token MIN412=null;
        Token LPAREN413=null;
        Token COMMA415=null;
        Token COMMA417=null;
        Token RPAREN419=null;
        EsperEPL2GrammarParser.expression_return expression414 = null;

        EsperEPL2GrammarParser.expression_return expression416 = null;

        EsperEPL2GrammarParser.expression_return expression418 = null;


        CommonTree MAX411_tree=null;
        CommonTree MIN412_tree=null;
        CommonTree LPAREN413_tree=null;
        CommonTree COMMA415_tree=null;
        CommonTree COMMA417_tree=null;
        CommonTree RPAREN419_tree=null;

        try {
            // EsperEPL2Grammar.g:1034:2: ( ( MAX | MIN ) LPAREN expression ( COMMA expression ( COMMA expression )* )? RPAREN )
            // EsperEPL2Grammar.g:1034:4: ( MAX | MIN ) LPAREN expression ( COMMA expression ( COMMA expression )* )? RPAREN
            {
            root_0 = (CommonTree)adaptor.nil();

            // EsperEPL2Grammar.g:1034:4: ( MAX | MIN )
            int alt144=2;
            int LA144_0 = input.LA(1);

            if ( (LA144_0==MAX) ) {
                alt144=1;
            }
            else if ( (LA144_0==MIN) ) {
                alt144=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 144, 0, input);

                throw nvae;
            }
            switch (alt144) {
                case 1 :
                    // EsperEPL2Grammar.g:1034:5: MAX
                    {
                    MAX411=(Token)match(input,MAX,FOLLOW_MAX_in_maxFunc6315); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MAX411_tree = (CommonTree)adaptor.create(MAX411);
                    root_0 = (CommonTree)adaptor.becomeRoot(MAX411_tree, root_0);
                    }

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1034:12: MIN
                    {
                    MIN412=(Token)match(input,MIN,FOLLOW_MIN_in_maxFunc6320); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MIN412_tree = (CommonTree)adaptor.create(MIN412);
                    root_0 = (CommonTree)adaptor.becomeRoot(MIN412_tree, root_0);
                    }

                    }
                    break;

            }

            LPAREN413=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_maxFunc6324); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_maxFunc6327);
            expression414=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression414.getTree());
            // EsperEPL2Grammar.g:1034:37: ( COMMA expression ( COMMA expression )* )?
            int alt146=2;
            int LA146_0 = input.LA(1);

            if ( (LA146_0==COMMA) ) {
                alt146=1;
            }
            switch (alt146) {
                case 1 :
                    // EsperEPL2Grammar.g:1034:38: COMMA expression ( COMMA expression )*
                    {
                    COMMA415=(Token)match(input,COMMA,FOLLOW_COMMA_in_maxFunc6330); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_maxFunc6333);
                    expression416=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression416.getTree());
                    // EsperEPL2Grammar.g:1034:56: ( COMMA expression )*
                    loop145:
                    do {
                        int alt145=2;
                        int LA145_0 = input.LA(1);

                        if ( (LA145_0==COMMA) ) {
                            alt145=1;
                        }


                        switch (alt145) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:1034:57: COMMA expression
                    	    {
                    	    COMMA417=(Token)match(input,COMMA,FOLLOW_COMMA_in_maxFunc6336); if (state.failed) return retval;
                    	    pushFollow(FOLLOW_expression_in_maxFunc6339);
                    	    expression418=expression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression418.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop145;
                        }
                    } while (true);


                    }
                    break;

            }

            RPAREN419=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_maxFunc6346); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "maxFunc"

    public static class eventPropertyOrLibFunction_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "eventPropertyOrLibFunction"
    // EsperEPL2Grammar.g:1037:1: eventPropertyOrLibFunction : ( ( eventProperty )=> eventProperty | libFunction );
    public final EsperEPL2GrammarParser.eventPropertyOrLibFunction_return eventPropertyOrLibFunction() throws RecognitionException {
        EsperEPL2GrammarParser.eventPropertyOrLibFunction_return retval = new EsperEPL2GrammarParser.eventPropertyOrLibFunction_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.eventProperty_return eventProperty420 = null;

        EsperEPL2GrammarParser.libFunction_return libFunction421 = null;



        try {
            // EsperEPL2Grammar.g:1038:2: ( ( eventProperty )=> eventProperty | libFunction )
            int alt147=2;
            alt147 = dfa147.predict(input);
            switch (alt147) {
                case 1 :
                    // EsperEPL2Grammar.g:1038:4: ( eventProperty )=> eventProperty
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_eventProperty_in_eventPropertyOrLibFunction6365);
                    eventProperty420=eventProperty();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty420.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1039:4: libFunction
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_libFunction_in_eventPropertyOrLibFunction6370);
                    libFunction421=libFunction();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, libFunction421.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "eventPropertyOrLibFunction"

    public static class libFunction_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "libFunction"
    // EsperEPL2Grammar.g:1042:1: libFunction : ( classIdentifierNonGreedy DOT )? funcIdent LPAREN ( libFunctionArgs )? RPAREN -> ^( LIB_FUNCTION ( classIdentifierNonGreedy )? funcIdent ( libFunctionArgs )? ) ;
    public final EsperEPL2GrammarParser.libFunction_return libFunction() throws RecognitionException {
        EsperEPL2GrammarParser.libFunction_return retval = new EsperEPL2GrammarParser.libFunction_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token DOT423=null;
        Token LPAREN425=null;
        Token RPAREN427=null;
        EsperEPL2GrammarParser.classIdentifierNonGreedy_return classIdentifierNonGreedy422 = null;

        EsperEPL2GrammarParser.funcIdent_return funcIdent424 = null;

        EsperEPL2GrammarParser.libFunctionArgs_return libFunctionArgs426 = null;


        CommonTree DOT423_tree=null;
        CommonTree LPAREN425_tree=null;
        CommonTree RPAREN427_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_libFunctionArgs=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionArgs");
        RewriteRuleSubtreeStream stream_classIdentifierNonGreedy=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifierNonGreedy");
        RewriteRuleSubtreeStream stream_funcIdent=new RewriteRuleSubtreeStream(adaptor,"rule funcIdent");
        try {
            // EsperEPL2Grammar.g:1043:2: ( ( classIdentifierNonGreedy DOT )? funcIdent LPAREN ( libFunctionArgs )? RPAREN -> ^( LIB_FUNCTION ( classIdentifierNonGreedy )? funcIdent ( libFunctionArgs )? ) )
            // EsperEPL2Grammar.g:1043:4: ( classIdentifierNonGreedy DOT )? funcIdent LPAREN ( libFunctionArgs )? RPAREN
            {
            // EsperEPL2Grammar.g:1043:4: ( classIdentifierNonGreedy DOT )?
            int alt148=2;
            int LA148_0 = input.LA(1);

            if ( (LA148_0==IDENT) ) {
                int LA148_1 = input.LA(2);

                if ( (LA148_1==DOT) ) {
                    alt148=1;
                }
            }
            else if ( (LA148_0==TICKED_STRING_LITERAL) ) {
                alt148=1;
            }
            switch (alt148) {
                case 1 :
                    // EsperEPL2Grammar.g:1043:5: classIdentifierNonGreedy DOT
                    {
                    pushFollow(FOLLOW_classIdentifierNonGreedy_in_libFunction6383);
                    classIdentifierNonGreedy422=classIdentifierNonGreedy();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_classIdentifierNonGreedy.add(classIdentifierNonGreedy422.getTree());
                    DOT423=(Token)match(input,DOT,FOLLOW_DOT_in_libFunction6385); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT423);


                    }
                    break;

            }

            pushFollow(FOLLOW_funcIdent_in_libFunction6389);
            funcIdent424=funcIdent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_funcIdent.add(funcIdent424.getTree());
            LPAREN425=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_libFunction6391); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN425);

            // EsperEPL2Grammar.g:1043:53: ( libFunctionArgs )?
            int alt149=2;
            int LA149_0 = input.LA(1);

            if ( (LA149_0==WINDOW||LA149_0==ESCAPE||(LA149_0>=NOT_EXPR && LA149_0<=EVERY_EXPR)||(LA149_0>=SUM && LA149_0<=COUNT)||LA149_0==CASE||LA149_0==OUTER||(LA149_0>=JOIN && LA149_0<=FULL)||(LA149_0>=DISTINCT && LA149_0<=ALL)||(LA149_0>=EVENTS && LA149_0<=LAST)||(LA149_0>=UNIDIRECTIONAL && LA149_0<=CURRENT_TIMESTAMP)||LA149_0==SNAPSHOT||(LA149_0>=VARIABLE && LA149_0<=AT)||(LA149_0>=BOOLEAN_TRUE && LA149_0<=VALUE_NULL)||LA149_0==NUM_DOUBLE||LA149_0==IDENT||LA149_0==LPAREN||(LA149_0>=STRING_LITERAL && LA149_0<=QUOTED_STRING_LITERAL)||(LA149_0>=PLUS && LA149_0<=MINUS)||LA149_0==LCURLY||LA149_0==NUM_INT||LA149_0==QUESTION||(LA149_0>=TICKED_STRING_LITERAL && LA149_0<=NUM_FLOAT)) ) {
                alt149=1;
            }
            switch (alt149) {
                case 1 :
                    // EsperEPL2Grammar.g:1043:54: libFunctionArgs
                    {
                    pushFollow(FOLLOW_libFunctionArgs_in_libFunction6394);
                    libFunctionArgs426=libFunctionArgs();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_libFunctionArgs.add(libFunctionArgs426.getTree());

                    }
                    break;

            }

            RPAREN427=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_libFunction6398); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN427);



            // AST REWRITE
            // elements: funcIdent, classIdentifierNonGreedy, libFunctionArgs
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1044:4: -> ^( LIB_FUNCTION ( classIdentifierNonGreedy )? funcIdent ( libFunctionArgs )? )
            {
                // EsperEPL2Grammar.g:1044:7: ^( LIB_FUNCTION ( classIdentifierNonGreedy )? funcIdent ( libFunctionArgs )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LIB_FUNCTION, "LIB_FUNCTION"), root_1);

                // EsperEPL2Grammar.g:1044:22: ( classIdentifierNonGreedy )?
                if ( stream_classIdentifierNonGreedy.hasNext() ) {
                    adaptor.addChild(root_1, stream_classIdentifierNonGreedy.nextTree());

                }
                stream_classIdentifierNonGreedy.reset();
                adaptor.addChild(root_1, stream_funcIdent.nextTree());
                // EsperEPL2Grammar.g:1044:58: ( libFunctionArgs )?
                if ( stream_libFunctionArgs.hasNext() ) {
                    adaptor.addChild(root_1, stream_libFunctionArgs.nextTree());

                }
                stream_libFunctionArgs.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "libFunction"

    public static class funcIdent_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "funcIdent"
    // EsperEPL2Grammar.g:1047:1: funcIdent : ( IDENT | max= MAX -> IDENT[$max] | min= MIN -> IDENT[$min] );
    public final EsperEPL2GrammarParser.funcIdent_return funcIdent() throws RecognitionException {
        EsperEPL2GrammarParser.funcIdent_return retval = new EsperEPL2GrammarParser.funcIdent_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token max=null;
        Token min=null;
        Token IDENT428=null;

        CommonTree max_tree=null;
        CommonTree min_tree=null;
        CommonTree IDENT428_tree=null;
        RewriteRuleTokenStream stream_MAX=new RewriteRuleTokenStream(adaptor,"token MAX");
        RewriteRuleTokenStream stream_MIN=new RewriteRuleTokenStream(adaptor,"token MIN");

        try {
            // EsperEPL2Grammar.g:1048:2: ( IDENT | max= MAX -> IDENT[$max] | min= MIN -> IDENT[$min] )
            int alt150=3;
            switch ( input.LA(1) ) {
            case IDENT:
                {
                alt150=1;
                }
                break;
            case MAX:
                {
                alt150=2;
                }
                break;
            case MIN:
                {
                alt150=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 150, 0, input);

                throw nvae;
            }

            switch (alt150) {
                case 1 :
                    // EsperEPL2Grammar.g:1048:4: IDENT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    IDENT428=(Token)match(input,IDENT,FOLLOW_IDENT_in_funcIdent6428); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IDENT428_tree = (CommonTree)adaptor.create(IDENT428);
                    adaptor.addChild(root_0, IDENT428_tree);
                    }

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1049:4: max= MAX
                    {
                    max=(Token)match(input,MAX,FOLLOW_MAX_in_funcIdent6435); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MAX.add(max);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1049:12: -> IDENT[$max]
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(IDENT, max));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1050:4: min= MIN
                    {
                    min=(Token)match(input,MIN,FOLLOW_MIN_in_funcIdent6447); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MIN.add(min);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1050:12: -> IDENT[$min]
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(IDENT, min));

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "funcIdent"

    public static class libFunctionArgs_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "libFunctionArgs"
    // EsperEPL2Grammar.g:1053:1: libFunctionArgs : ( ALL | DISTINCT )? expression ( COMMA expression )* ;
    public final EsperEPL2GrammarParser.libFunctionArgs_return libFunctionArgs() throws RecognitionException {
        EsperEPL2GrammarParser.libFunctionArgs_return retval = new EsperEPL2GrammarParser.libFunctionArgs_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token ALL429=null;
        Token DISTINCT430=null;
        Token COMMA432=null;
        EsperEPL2GrammarParser.expression_return expression431 = null;

        EsperEPL2GrammarParser.expression_return expression433 = null;


        CommonTree ALL429_tree=null;
        CommonTree DISTINCT430_tree=null;
        CommonTree COMMA432_tree=null;

        try {
            // EsperEPL2Grammar.g:1054:2: ( ( ALL | DISTINCT )? expression ( COMMA expression )* )
            // EsperEPL2Grammar.g:1054:4: ( ALL | DISTINCT )? expression ( COMMA expression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            // EsperEPL2Grammar.g:1054:4: ( ALL | DISTINCT )?
            int alt151=3;
            int LA151_0 = input.LA(1);

            if ( (LA151_0==ALL) ) {
                alt151=1;
            }
            else if ( (LA151_0==DISTINCT) ) {
                alt151=2;
            }
            switch (alt151) {
                case 1 :
                    // EsperEPL2Grammar.g:1054:5: ALL
                    {
                    ALL429=(Token)match(input,ALL,FOLLOW_ALL_in_libFunctionArgs6465); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1054:12: DISTINCT
                    {
                    DISTINCT430=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_libFunctionArgs6470); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DISTINCT430_tree = (CommonTree)adaptor.create(DISTINCT430);
                    adaptor.addChild(root_0, DISTINCT430_tree);
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_expression_in_libFunctionArgs6474);
            expression431=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression431.getTree());
            // EsperEPL2Grammar.g:1054:34: ( COMMA expression )*
            loop152:
            do {
                int alt152=2;
                int LA152_0 = input.LA(1);

                if ( (LA152_0==COMMA) ) {
                    alt152=1;
                }


                switch (alt152) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1054:35: COMMA expression
            	    {
            	    COMMA432=(Token)match(input,COMMA,FOLLOW_COMMA_in_libFunctionArgs6477); if (state.failed) return retval;
            	    pushFollow(FOLLOW_expression_in_libFunctionArgs6480);
            	    expression433=expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression433.getTree());

            	    }
            	    break;

            	default :
            	    break loop152;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "libFunctionArgs"

    public static class betweenList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "betweenList"
    // EsperEPL2Grammar.g:1057:1: betweenList : concatenationExpr AND_EXPR concatenationExpr ;
    public final EsperEPL2GrammarParser.betweenList_return betweenList() throws RecognitionException {
        EsperEPL2GrammarParser.betweenList_return retval = new EsperEPL2GrammarParser.betweenList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token AND_EXPR435=null;
        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr434 = null;

        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr436 = null;


        CommonTree AND_EXPR435_tree=null;

        try {
            // EsperEPL2Grammar.g:1058:2: ( concatenationExpr AND_EXPR concatenationExpr )
            // EsperEPL2Grammar.g:1058:4: concatenationExpr AND_EXPR concatenationExpr
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_concatenationExpr_in_betweenList6494);
            concatenationExpr434=concatenationExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, concatenationExpr434.getTree());
            AND_EXPR435=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_betweenList6496); if (state.failed) return retval;
            pushFollow(FOLLOW_concatenationExpr_in_betweenList6499);
            concatenationExpr436=concatenationExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, concatenationExpr436.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "betweenList"

    public static class patternExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "patternExpression"
    // EsperEPL2Grammar.g:1067:1: patternExpression : followedByExpression ;
    public final EsperEPL2GrammarParser.patternExpression_return patternExpression() throws RecognitionException {
        EsperEPL2GrammarParser.patternExpression_return retval = new EsperEPL2GrammarParser.patternExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.followedByExpression_return followedByExpression437 = null;



         paraphrases.push("pattern expression"); 
        try {
            // EsperEPL2Grammar.g:1070:2: ( followedByExpression )
            // EsperEPL2Grammar.g:1070:4: followedByExpression
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_followedByExpression_in_patternExpression6527);
            followedByExpression437=followedByExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, followedByExpression437.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "patternExpression"

    public static class followedByExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "followedByExpression"
    // EsperEPL2Grammar.g:1073:1: followedByExpression : orExpression (f= FOLLOWED_BY orExpression )* -> {$f != null}? ^( FOLLOWED_BY_EXPR ( orExpression )+ ) -> orExpression ;
    public final EsperEPL2GrammarParser.followedByExpression_return followedByExpression() throws RecognitionException {
        EsperEPL2GrammarParser.followedByExpression_return retval = new EsperEPL2GrammarParser.followedByExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token f=null;
        EsperEPL2GrammarParser.orExpression_return orExpression438 = null;

        EsperEPL2GrammarParser.orExpression_return orExpression439 = null;


        CommonTree f_tree=null;
        RewriteRuleTokenStream stream_FOLLOWED_BY=new RewriteRuleTokenStream(adaptor,"token FOLLOWED_BY");
        RewriteRuleSubtreeStream stream_orExpression=new RewriteRuleSubtreeStream(adaptor,"rule orExpression");
        try {
            // EsperEPL2Grammar.g:1074:2: ( orExpression (f= FOLLOWED_BY orExpression )* -> {$f != null}? ^( FOLLOWED_BY_EXPR ( orExpression )+ ) -> orExpression )
            // EsperEPL2Grammar.g:1074:4: orExpression (f= FOLLOWED_BY orExpression )*
            {
            pushFollow(FOLLOW_orExpression_in_followedByExpression6539);
            orExpression438=orExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_orExpression.add(orExpression438.getTree());
            // EsperEPL2Grammar.g:1074:17: (f= FOLLOWED_BY orExpression )*
            loop153:
            do {
                int alt153=2;
                int LA153_0 = input.LA(1);

                if ( (LA153_0==FOLLOWED_BY) ) {
                    alt153=1;
                }


                switch (alt153) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1074:18: f= FOLLOWED_BY orExpression
            	    {
            	    f=(Token)match(input,FOLLOWED_BY,FOLLOW_FOLLOWED_BY_in_followedByExpression6544); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_FOLLOWED_BY.add(f);

            	    pushFollow(FOLLOW_orExpression_in_followedByExpression6546);
            	    orExpression439=orExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_orExpression.add(orExpression439.getTree());

            	    }
            	    break;

            	default :
            	    break loop153;
                }
            } while (true);



            // AST REWRITE
            // elements: orExpression, orExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1075:6: -> {$f != null}? ^( FOLLOWED_BY_EXPR ( orExpression )+ )
            if (f != null) {
                // EsperEPL2Grammar.g:1075:23: ^( FOLLOWED_BY_EXPR ( orExpression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FOLLOWED_BY_EXPR, "FOLLOWED_BY_EXPR"), root_1);

                if ( !(stream_orExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_orExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_orExpression.nextTree());

                }
                stream_orExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1076:6: -> orExpression
            {
                adaptor.addChild(root_0, stream_orExpression.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "followedByExpression"

    public static class orExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "orExpression"
    // EsperEPL2Grammar.g:1079:1: orExpression : andExpression (o= OR_EXPR andExpression )* -> {$o != null}? ^( OR_EXPR ( andExpression )+ ) -> andExpression ;
    public final EsperEPL2GrammarParser.orExpression_return orExpression() throws RecognitionException {
        EsperEPL2GrammarParser.orExpression_return retval = new EsperEPL2GrammarParser.orExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token o=null;
        EsperEPL2GrammarParser.andExpression_return andExpression440 = null;

        EsperEPL2GrammarParser.andExpression_return andExpression441 = null;


        CommonTree o_tree=null;
        RewriteRuleTokenStream stream_OR_EXPR=new RewriteRuleTokenStream(adaptor,"token OR_EXPR");
        RewriteRuleSubtreeStream stream_andExpression=new RewriteRuleSubtreeStream(adaptor,"rule andExpression");
        try {
            // EsperEPL2Grammar.g:1080:2: ( andExpression (o= OR_EXPR andExpression )* -> {$o != null}? ^( OR_EXPR ( andExpression )+ ) -> andExpression )
            // EsperEPL2Grammar.g:1080:4: andExpression (o= OR_EXPR andExpression )*
            {
            pushFollow(FOLLOW_andExpression_in_orExpression6585);
            andExpression440=andExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_andExpression.add(andExpression440.getTree());
            // EsperEPL2Grammar.g:1080:18: (o= OR_EXPR andExpression )*
            loop154:
            do {
                int alt154=2;
                int LA154_0 = input.LA(1);

                if ( (LA154_0==OR_EXPR) ) {
                    alt154=1;
                }


                switch (alt154) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1080:19: o= OR_EXPR andExpression
            	    {
            	    o=(Token)match(input,OR_EXPR,FOLLOW_OR_EXPR_in_orExpression6590); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_OR_EXPR.add(o);

            	    pushFollow(FOLLOW_andExpression_in_orExpression6592);
            	    andExpression441=andExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_andExpression.add(andExpression441.getTree());

            	    }
            	    break;

            	default :
            	    break loop154;
                }
            } while (true);



            // AST REWRITE
            // elements: andExpression, OR_EXPR, andExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1081:3: -> {$o != null}? ^( OR_EXPR ( andExpression )+ )
            if (o != null) {
                // EsperEPL2Grammar.g:1081:20: ^( OR_EXPR ( andExpression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_OR_EXPR.nextNode(), root_1);

                if ( !(stream_andExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_andExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_andExpression.nextTree());

                }
                stream_andExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1082:3: -> andExpression
            {
                adaptor.addChild(root_0, stream_andExpression.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "orExpression"

    public static class andExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "andExpression"
    // EsperEPL2Grammar.g:1085:1: andExpression : matchUntilExpression (a= AND_EXPR matchUntilExpression )* -> {$a != null}? ^( AND_EXPR ( matchUntilExpression )+ ) -> matchUntilExpression ;
    public final EsperEPL2GrammarParser.andExpression_return andExpression() throws RecognitionException {
        EsperEPL2GrammarParser.andExpression_return retval = new EsperEPL2GrammarParser.andExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token a=null;
        EsperEPL2GrammarParser.matchUntilExpression_return matchUntilExpression442 = null;

        EsperEPL2GrammarParser.matchUntilExpression_return matchUntilExpression443 = null;


        CommonTree a_tree=null;
        RewriteRuleTokenStream stream_AND_EXPR=new RewriteRuleTokenStream(adaptor,"token AND_EXPR");
        RewriteRuleSubtreeStream stream_matchUntilExpression=new RewriteRuleSubtreeStream(adaptor,"rule matchUntilExpression");
        try {
            // EsperEPL2Grammar.g:1086:2: ( matchUntilExpression (a= AND_EXPR matchUntilExpression )* -> {$a != null}? ^( AND_EXPR ( matchUntilExpression )+ ) -> matchUntilExpression )
            // EsperEPL2Grammar.g:1086:4: matchUntilExpression (a= AND_EXPR matchUntilExpression )*
            {
            pushFollow(FOLLOW_matchUntilExpression_in_andExpression6624);
            matchUntilExpression442=matchUntilExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchUntilExpression.add(matchUntilExpression442.getTree());
            // EsperEPL2Grammar.g:1086:25: (a= AND_EXPR matchUntilExpression )*
            loop155:
            do {
                int alt155=2;
                int LA155_0 = input.LA(1);

                if ( (LA155_0==AND_EXPR) ) {
                    alt155=1;
                }


                switch (alt155) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1086:26: a= AND_EXPR matchUntilExpression
            	    {
            	    a=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_andExpression6629); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_AND_EXPR.add(a);

            	    pushFollow(FOLLOW_matchUntilExpression_in_andExpression6631);
            	    matchUntilExpression443=matchUntilExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_matchUntilExpression.add(matchUntilExpression443.getTree());

            	    }
            	    break;

            	default :
            	    break loop155;
                }
            } while (true);



            // AST REWRITE
            // elements: matchUntilExpression, matchUntilExpression, AND_EXPR
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1087:3: -> {$a != null}? ^( AND_EXPR ( matchUntilExpression )+ )
            if (a != null) {
                // EsperEPL2Grammar.g:1087:20: ^( AND_EXPR ( matchUntilExpression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_AND_EXPR.nextNode(), root_1);

                if ( !(stream_matchUntilExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_matchUntilExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchUntilExpression.nextTree());

                }
                stream_matchUntilExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1088:3: -> matchUntilExpression
            {
                adaptor.addChild(root_0, stream_matchUntilExpression.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "andExpression"

    public static class matchUntilExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchUntilExpression"
    // EsperEPL2Grammar.g:1091:1: matchUntilExpression : (r= matchUntilRange )? qualifyExpression (a= UNTIL qualifyExpression )? -> {r != null && a != null}? ^( MATCH_UNTIL_EXPR matchUntilRange ( qualifyExpression )+ ) -> {r != null && a == null}? ^( MATCH_UNTIL_EXPR matchUntilRange qualifyExpression ) -> {$a != null}? ^( MATCH_UNTIL_EXPR ( qualifyExpression )+ ) -> qualifyExpression ;
    public final EsperEPL2GrammarParser.matchUntilExpression_return matchUntilExpression() throws RecognitionException {
        EsperEPL2GrammarParser.matchUntilExpression_return retval = new EsperEPL2GrammarParser.matchUntilExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token a=null;
        EsperEPL2GrammarParser.matchUntilRange_return r = null;

        EsperEPL2GrammarParser.qualifyExpression_return qualifyExpression444 = null;

        EsperEPL2GrammarParser.qualifyExpression_return qualifyExpression445 = null;


        CommonTree a_tree=null;
        RewriteRuleTokenStream stream_UNTIL=new RewriteRuleTokenStream(adaptor,"token UNTIL");
        RewriteRuleSubtreeStream stream_qualifyExpression=new RewriteRuleSubtreeStream(adaptor,"rule qualifyExpression");
        RewriteRuleSubtreeStream stream_matchUntilRange=new RewriteRuleSubtreeStream(adaptor,"rule matchUntilRange");
        try {
            // EsperEPL2Grammar.g:1092:2: ( (r= matchUntilRange )? qualifyExpression (a= UNTIL qualifyExpression )? -> {r != null && a != null}? ^( MATCH_UNTIL_EXPR matchUntilRange ( qualifyExpression )+ ) -> {r != null && a == null}? ^( MATCH_UNTIL_EXPR matchUntilRange qualifyExpression ) -> {$a != null}? ^( MATCH_UNTIL_EXPR ( qualifyExpression )+ ) -> qualifyExpression )
            // EsperEPL2Grammar.g:1092:4: (r= matchUntilRange )? qualifyExpression (a= UNTIL qualifyExpression )?
            {
            // EsperEPL2Grammar.g:1092:4: (r= matchUntilRange )?
            int alt156=2;
            int LA156_0 = input.LA(1);

            if ( (LA156_0==LBRACK) ) {
                alt156=1;
            }
            switch (alt156) {
                case 1 :
                    // EsperEPL2Grammar.g:1092:5: r= matchUntilRange
                    {
                    pushFollow(FOLLOW_matchUntilRange_in_matchUntilExpression6666);
                    r=matchUntilRange();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_matchUntilRange.add(r.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_qualifyExpression_in_matchUntilExpression6670);
            qualifyExpression444=qualifyExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_qualifyExpression.add(qualifyExpression444.getTree());
            // EsperEPL2Grammar.g:1092:43: (a= UNTIL qualifyExpression )?
            int alt157=2;
            int LA157_0 = input.LA(1);

            if ( (LA157_0==UNTIL) ) {
                alt157=1;
            }
            switch (alt157) {
                case 1 :
                    // EsperEPL2Grammar.g:1092:44: a= UNTIL qualifyExpression
                    {
                    a=(Token)match(input,UNTIL,FOLLOW_UNTIL_in_matchUntilExpression6675); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_UNTIL.add(a);

                    pushFollow(FOLLOW_qualifyExpression_in_matchUntilExpression6677);
                    qualifyExpression445=qualifyExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_qualifyExpression.add(qualifyExpression445.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: qualifyExpression, matchUntilRange, qualifyExpression, qualifyExpression, qualifyExpression, matchUntilRange
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1093:3: -> {r != null && a != null}? ^( MATCH_UNTIL_EXPR matchUntilRange ( qualifyExpression )+ )
            if (r != null && a != null) {
                // EsperEPL2Grammar.g:1093:32: ^( MATCH_UNTIL_EXPR matchUntilRange ( qualifyExpression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_1);

                adaptor.addChild(root_1, stream_matchUntilRange.nextTree());
                if ( !(stream_qualifyExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_qualifyExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_qualifyExpression.nextTree());

                }
                stream_qualifyExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1094:3: -> {r != null && a == null}? ^( MATCH_UNTIL_EXPR matchUntilRange qualifyExpression )
            if (r != null && a == null) {
                // EsperEPL2Grammar.g:1094:32: ^( MATCH_UNTIL_EXPR matchUntilRange qualifyExpression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_1);

                adaptor.addChild(root_1, stream_matchUntilRange.nextTree());
                adaptor.addChild(root_1, stream_qualifyExpression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1095:3: -> {$a != null}? ^( MATCH_UNTIL_EXPR ( qualifyExpression )+ )
            if (a != null) {
                // EsperEPL2Grammar.g:1095:20: ^( MATCH_UNTIL_EXPR ( qualifyExpression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_1);

                if ( !(stream_qualifyExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_qualifyExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_qualifyExpression.nextTree());

                }
                stream_qualifyExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1096:3: -> qualifyExpression
            {
                adaptor.addChild(root_0, stream_qualifyExpression.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchUntilExpression"

    public static class qualifyExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "qualifyExpression"
    // EsperEPL2Grammar.g:1099:1: qualifyExpression : ( (e= EVERY_EXPR | n= NOT_EXPR ) (r= matchUntilRange )? )? guardPostFix -> {e != null && r == null}? ^( EVERY_EXPR guardPostFix ) -> {n != null && r == null}? ^( PATTERN_NOT_EXPR guardPostFix ) -> {e != null && r != null}? ^( EVERY_EXPR ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix ) ) -> {n != null && r != null}? ^( PATTERN_NOT_EXPR ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix ) ) -> guardPostFix ;
    public final EsperEPL2GrammarParser.qualifyExpression_return qualifyExpression() throws RecognitionException {
        EsperEPL2GrammarParser.qualifyExpression_return retval = new EsperEPL2GrammarParser.qualifyExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token e=null;
        Token n=null;
        EsperEPL2GrammarParser.matchUntilRange_return r = null;

        EsperEPL2GrammarParser.guardPostFix_return guardPostFix446 = null;


        CommonTree e_tree=null;
        CommonTree n_tree=null;
        RewriteRuleTokenStream stream_NOT_EXPR=new RewriteRuleTokenStream(adaptor,"token NOT_EXPR");
        RewriteRuleTokenStream stream_EVERY_EXPR=new RewriteRuleTokenStream(adaptor,"token EVERY_EXPR");
        RewriteRuleSubtreeStream stream_guardPostFix=new RewriteRuleSubtreeStream(adaptor,"rule guardPostFix");
        RewriteRuleSubtreeStream stream_matchUntilRange=new RewriteRuleSubtreeStream(adaptor,"rule matchUntilRange");
        try {
            // EsperEPL2Grammar.g:1100:2: ( ( (e= EVERY_EXPR | n= NOT_EXPR ) (r= matchUntilRange )? )? guardPostFix -> {e != null && r == null}? ^( EVERY_EXPR guardPostFix ) -> {n != null && r == null}? ^( PATTERN_NOT_EXPR guardPostFix ) -> {e != null && r != null}? ^( EVERY_EXPR ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix ) ) -> {n != null && r != null}? ^( PATTERN_NOT_EXPR ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix ) ) -> guardPostFix )
            // EsperEPL2Grammar.g:1100:4: ( (e= EVERY_EXPR | n= NOT_EXPR ) (r= matchUntilRange )? )? guardPostFix
            {
            // EsperEPL2Grammar.g:1100:4: ( (e= EVERY_EXPR | n= NOT_EXPR ) (r= matchUntilRange )? )?
            int alt160=2;
            int LA160_0 = input.LA(1);

            if ( ((LA160_0>=NOT_EXPR && LA160_0<=EVERY_EXPR)) ) {
                alt160=1;
            }
            switch (alt160) {
                case 1 :
                    // EsperEPL2Grammar.g:1100:5: (e= EVERY_EXPR | n= NOT_EXPR ) (r= matchUntilRange )?
                    {
                    // EsperEPL2Grammar.g:1100:5: (e= EVERY_EXPR | n= NOT_EXPR )
                    int alt158=2;
                    int LA158_0 = input.LA(1);

                    if ( (LA158_0==EVERY_EXPR) ) {
                        alt158=1;
                    }
                    else if ( (LA158_0==NOT_EXPR) ) {
                        alt158=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 158, 0, input);

                        throw nvae;
                    }
                    switch (alt158) {
                        case 1 :
                            // EsperEPL2Grammar.g:1100:6: e= EVERY_EXPR
                            {
                            e=(Token)match(input,EVERY_EXPR,FOLLOW_EVERY_EXPR_in_qualifyExpression6742); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_EVERY_EXPR.add(e);


                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1100:21: n= NOT_EXPR
                            {
                            n=(Token)match(input,NOT_EXPR,FOLLOW_NOT_EXPR_in_qualifyExpression6748); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NOT_EXPR.add(n);


                            }
                            break;

                    }

                    // EsperEPL2Grammar.g:1100:33: (r= matchUntilRange )?
                    int alt159=2;
                    int LA159_0 = input.LA(1);

                    if ( (LA159_0==LBRACK) ) {
                        alt159=1;
                    }
                    switch (alt159) {
                        case 1 :
                            // EsperEPL2Grammar.g:1100:34: r= matchUntilRange
                            {
                            pushFollow(FOLLOW_matchUntilRange_in_qualifyExpression6754);
                            r=matchUntilRange();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_matchUntilRange.add(r.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }

            pushFollow(FOLLOW_guardPostFix_in_qualifyExpression6763);
            guardPostFix446=guardPostFix();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_guardPostFix.add(guardPostFix446.getTree());


            // AST REWRITE
            // elements: guardPostFix, EVERY_EXPR, EVERY_EXPR, matchUntilRange, guardPostFix, matchUntilRange, guardPostFix, guardPostFix, guardPostFix
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1102:3: -> {e != null && r == null}? ^( EVERY_EXPR guardPostFix )
            if (e != null && r == null) {
                // EsperEPL2Grammar.g:1102:32: ^( EVERY_EXPR guardPostFix )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_EVERY_EXPR.nextNode(), root_1);

                adaptor.addChild(root_1, stream_guardPostFix.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1103:3: -> {n != null && r == null}? ^( PATTERN_NOT_EXPR guardPostFix )
            if (n != null && r == null) {
                // EsperEPL2Grammar.g:1103:32: ^( PATTERN_NOT_EXPR guardPostFix )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATTERN_NOT_EXPR, "PATTERN_NOT_EXPR"), root_1);

                adaptor.addChild(root_1, stream_guardPostFix.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1104:3: -> {e != null && r != null}? ^( EVERY_EXPR ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix ) )
            if (e != null && r != null) {
                // EsperEPL2Grammar.g:1104:32: ^( EVERY_EXPR ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_EVERY_EXPR.nextNode(), root_1);

                // EsperEPL2Grammar.g:1104:45: ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_2);

                adaptor.addChild(root_2, stream_matchUntilRange.nextTree());
                adaptor.addChild(root_2, stream_guardPostFix.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1105:3: -> {n != null && r != null}? ^( PATTERN_NOT_EXPR ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix ) )
            if (n != null && r != null) {
                // EsperEPL2Grammar.g:1105:32: ^( PATTERN_NOT_EXPR ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATTERN_NOT_EXPR, "PATTERN_NOT_EXPR"), root_1);

                // EsperEPL2Grammar.g:1105:51: ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_2);

                adaptor.addChild(root_2, stream_matchUntilRange.nextTree());
                adaptor.addChild(root_2, stream_guardPostFix.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1106:3: -> guardPostFix
            {
                adaptor.addChild(root_0, stream_guardPostFix.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "qualifyExpression"

    public static class guardPostFix_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "guardPostFix"
    // EsperEPL2Grammar.g:1109:1: guardPostFix : ( atomicExpression | l= LPAREN patternExpression RPAREN ) (w= WHERE guardExpression )? -> {$w != null}? ^( GUARD_EXPR ( atomicExpression )? ( patternExpression )? guardExpression ) -> ( atomicExpression )? ( patternExpression )? ;
    public final EsperEPL2GrammarParser.guardPostFix_return guardPostFix() throws RecognitionException {
        EsperEPL2GrammarParser.guardPostFix_return retval = new EsperEPL2GrammarParser.guardPostFix_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token l=null;
        Token w=null;
        Token RPAREN449=null;
        EsperEPL2GrammarParser.atomicExpression_return atomicExpression447 = null;

        EsperEPL2GrammarParser.patternExpression_return patternExpression448 = null;

        EsperEPL2GrammarParser.guardExpression_return guardExpression450 = null;


        CommonTree l_tree=null;
        CommonTree w_tree=null;
        CommonTree RPAREN449_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_guardExpression=new RewriteRuleSubtreeStream(adaptor,"rule guardExpression");
        RewriteRuleSubtreeStream stream_atomicExpression=new RewriteRuleSubtreeStream(adaptor,"rule atomicExpression");
        RewriteRuleSubtreeStream stream_patternExpression=new RewriteRuleSubtreeStream(adaptor,"rule patternExpression");
        try {
            // EsperEPL2Grammar.g:1110:2: ( ( atomicExpression | l= LPAREN patternExpression RPAREN ) (w= WHERE guardExpression )? -> {$w != null}? ^( GUARD_EXPR ( atomicExpression )? ( patternExpression )? guardExpression ) -> ( atomicExpression )? ( patternExpression )? )
            // EsperEPL2Grammar.g:1110:4: ( atomicExpression | l= LPAREN patternExpression RPAREN ) (w= WHERE guardExpression )?
            {
            // EsperEPL2Grammar.g:1110:4: ( atomicExpression | l= LPAREN patternExpression RPAREN )
            int alt161=2;
            int LA161_0 = input.LA(1);

            if ( (LA161_0==IDENT||LA161_0==TICKED_STRING_LITERAL) ) {
                alt161=1;
            }
            else if ( (LA161_0==LPAREN) ) {
                alt161=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 161, 0, input);

                throw nvae;
            }
            switch (alt161) {
                case 1 :
                    // EsperEPL2Grammar.g:1110:5: atomicExpression
                    {
                    pushFollow(FOLLOW_atomicExpression_in_guardPostFix6844);
                    atomicExpression447=atomicExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_atomicExpression.add(atomicExpression447.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1110:24: l= LPAREN patternExpression RPAREN
                    {
                    l=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_guardPostFix6850); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(l);

                    pushFollow(FOLLOW_patternExpression_in_guardPostFix6852);
                    patternExpression448=patternExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_patternExpression.add(patternExpression448.getTree());
                    RPAREN449=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_guardPostFix6854); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN449);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:1110:59: (w= WHERE guardExpression )?
            int alt162=2;
            int LA162_0 = input.LA(1);

            if ( (LA162_0==WHERE) ) {
                alt162=1;
            }
            switch (alt162) {
                case 1 :
                    // EsperEPL2Grammar.g:1110:60: w= WHERE guardExpression
                    {
                    w=(Token)match(input,WHERE,FOLLOW_WHERE_in_guardPostFix6860); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(w);

                    pushFollow(FOLLOW_guardExpression_in_guardPostFix6862);
                    guardExpression450=guardExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_guardExpression.add(guardExpression450.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: atomicExpression, atomicExpression, patternExpression, guardExpression, patternExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1111:3: -> {$w != null}? ^( GUARD_EXPR ( atomicExpression )? ( patternExpression )? guardExpression )
            if (w != null) {
                // EsperEPL2Grammar.g:1111:20: ^( GUARD_EXPR ( atomicExpression )? ( patternExpression )? guardExpression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GUARD_EXPR, "GUARD_EXPR"), root_1);

                // EsperEPL2Grammar.g:1111:33: ( atomicExpression )?
                if ( stream_atomicExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_atomicExpression.nextTree());

                }
                stream_atomicExpression.reset();
                // EsperEPL2Grammar.g:1111:51: ( patternExpression )?
                if ( stream_patternExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_patternExpression.nextTree());

                }
                stream_patternExpression.reset();
                adaptor.addChild(root_1, stream_guardExpression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1112:3: -> ( atomicExpression )? ( patternExpression )?
            {
                // EsperEPL2Grammar.g:1112:6: ( atomicExpression )?
                if ( stream_atomicExpression.hasNext() ) {
                    adaptor.addChild(root_0, stream_atomicExpression.nextTree());

                }
                stream_atomicExpression.reset();
                // EsperEPL2Grammar.g:1112:24: ( patternExpression )?
                if ( stream_patternExpression.hasNext() ) {
                    adaptor.addChild(root_0, stream_patternExpression.nextTree());

                }
                stream_patternExpression.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "guardPostFix"

    public static class atomicExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "atomicExpression"
    // EsperEPL2Grammar.g:1115:1: atomicExpression : ( observerExpression | patternFilterExpression );
    public final EsperEPL2GrammarParser.atomicExpression_return atomicExpression() throws RecognitionException {
        EsperEPL2GrammarParser.atomicExpression_return retval = new EsperEPL2GrammarParser.atomicExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.observerExpression_return observerExpression451 = null;

        EsperEPL2GrammarParser.patternFilterExpression_return patternFilterExpression452 = null;



        try {
            // EsperEPL2Grammar.g:1116:2: ( observerExpression | patternFilterExpression )
            int alt163=2;
            int LA163_0 = input.LA(1);

            if ( (LA163_0==IDENT) ) {
                int LA163_1 = input.LA(2);

                if ( (LA163_1==COLON) ) {
                    alt163=1;
                }
                else if ( (LA163_1==EOF||(LA163_1>=OR_EXPR && LA163_1<=AND_EXPR)||LA163_1==WHERE||LA163_1==UNTIL||(LA163_1>=EQUALS && LA163_1<=RPAREN)||(LA163_1>=LBRACK && LA163_1<=RBRACK)||LA163_1==FOLLOWED_BY) ) {
                    alt163=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 163, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA163_0==TICKED_STRING_LITERAL) ) {
                alt163=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 163, 0, input);

                throw nvae;
            }
            switch (alt163) {
                case 1 :
                    // EsperEPL2Grammar.g:1116:4: observerExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_observerExpression_in_atomicExpression6904);
                    observerExpression451=observerExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, observerExpression451.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1116:25: patternFilterExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_patternFilterExpression_in_atomicExpression6908);
                    patternFilterExpression452=patternFilterExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, patternFilterExpression452.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "atomicExpression"

    public static class observerExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "observerExpression"
    // EsperEPL2Grammar.g:1119:1: observerExpression : ns= IDENT COLON (nm= IDENT | a= AT ) LPAREN ( expressionWithTimeList )? RPAREN -> {$a != null}? ^( OBSERVER_EXPR $ns ^( IDENT[$a.text] ) ( expressionWithTimeList )? ) -> ^( OBSERVER_EXPR $ns $nm ( expressionWithTimeList )? ) ;
    public final EsperEPL2GrammarParser.observerExpression_return observerExpression() throws RecognitionException {
        EsperEPL2GrammarParser.observerExpression_return retval = new EsperEPL2GrammarParser.observerExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token ns=null;
        Token nm=null;
        Token a=null;
        Token COLON453=null;
        Token LPAREN454=null;
        Token RPAREN456=null;
        EsperEPL2GrammarParser.expressionWithTimeList_return expressionWithTimeList455 = null;


        CommonTree ns_tree=null;
        CommonTree nm_tree=null;
        CommonTree a_tree=null;
        CommonTree COLON453_tree=null;
        CommonTree LPAREN454_tree=null;
        CommonTree RPAREN456_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_AT=new RewriteRuleTokenStream(adaptor,"token AT");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionWithTimeList=new RewriteRuleSubtreeStream(adaptor,"rule expressionWithTimeList");
        try {
            // EsperEPL2Grammar.g:1120:2: (ns= IDENT COLON (nm= IDENT | a= AT ) LPAREN ( expressionWithTimeList )? RPAREN -> {$a != null}? ^( OBSERVER_EXPR $ns ^( IDENT[$a.text] ) ( expressionWithTimeList )? ) -> ^( OBSERVER_EXPR $ns $nm ( expressionWithTimeList )? ) )
            // EsperEPL2Grammar.g:1120:4: ns= IDENT COLON (nm= IDENT | a= AT ) LPAREN ( expressionWithTimeList )? RPAREN
            {
            ns=(Token)match(input,IDENT,FOLLOW_IDENT_in_observerExpression6923); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(ns);

            COLON453=(Token)match(input,COLON,FOLLOW_COLON_in_observerExpression6925); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON453);

            // EsperEPL2Grammar.g:1120:19: (nm= IDENT | a= AT )
            int alt164=2;
            int LA164_0 = input.LA(1);

            if ( (LA164_0==IDENT) ) {
                alt164=1;
            }
            else if ( (LA164_0==AT) ) {
                alt164=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 164, 0, input);

                throw nvae;
            }
            switch (alt164) {
                case 1 :
                    // EsperEPL2Grammar.g:1120:20: nm= IDENT
                    {
                    nm=(Token)match(input,IDENT,FOLLOW_IDENT_in_observerExpression6930); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(nm);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1120:31: a= AT
                    {
                    a=(Token)match(input,AT,FOLLOW_AT_in_observerExpression6936); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AT.add(a);


                    }
                    break;

            }

            LPAREN454=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_observerExpression6939); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN454);

            // EsperEPL2Grammar.g:1120:44: ( expressionWithTimeList )?
            int alt165=2;
            int LA165_0 = input.LA(1);

            if ( (LA165_0==WINDOW||LA165_0==ESCAPE||(LA165_0>=NOT_EXPR && LA165_0<=EVERY_EXPR)||(LA165_0>=SUM && LA165_0<=COUNT)||LA165_0==CASE||LA165_0==OUTER||(LA165_0>=JOIN && LA165_0<=FULL)||(LA165_0>=EVENTS && LA165_0<=LAST)||(LA165_0>=UNIDIRECTIONAL && LA165_0<=CURRENT_TIMESTAMP)||LA165_0==SNAPSHOT||(LA165_0>=VARIABLE && LA165_0<=AT)||(LA165_0>=BOOLEAN_TRUE && LA165_0<=VALUE_NULL)||LA165_0==NUM_DOUBLE||LA165_0==IDENT||LA165_0==LPAREN||(LA165_0>=STAR && LA165_0<=LBRACK)||(LA165_0>=STRING_LITERAL && LA165_0<=QUOTED_STRING_LITERAL)||(LA165_0>=PLUS && LA165_0<=MINUS)||LA165_0==LCURLY||LA165_0==NUM_INT||LA165_0==QUESTION||(LA165_0>=TICKED_STRING_LITERAL && LA165_0<=NUM_FLOAT)) ) {
                alt165=1;
            }
            switch (alt165) {
                case 1 :
                    // EsperEPL2Grammar.g:1120:44: expressionWithTimeList
                    {
                    pushFollow(FOLLOW_expressionWithTimeList_in_observerExpression6941);
                    expressionWithTimeList455=expressionWithTimeList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expressionWithTimeList.add(expressionWithTimeList455.getTree());

                    }
                    break;

            }

            RPAREN456=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_observerExpression6944); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN456);



            // AST REWRITE
            // elements: IDENT, nm, ns, expressionWithTimeList, ns, expressionWithTimeList
            // token labels: ns, nm
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_ns=new RewriteRuleTokenStream(adaptor,"token ns",ns);
            RewriteRuleTokenStream stream_nm=new RewriteRuleTokenStream(adaptor,"token nm",nm);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1121:3: -> {$a != null}? ^( OBSERVER_EXPR $ns ^( IDENT[$a.text] ) ( expressionWithTimeList )? )
            if (a != null) {
                // EsperEPL2Grammar.g:1121:20: ^( OBSERVER_EXPR $ns ^( IDENT[$a.text] ) ( expressionWithTimeList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(OBSERVER_EXPR, "OBSERVER_EXPR"), root_1);

                adaptor.addChild(root_1, stream_ns.nextNode());
                // EsperEPL2Grammar.g:1121:40: ^( IDENT[$a.text] )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IDENT, (a!=null?a.getText():null)), root_2);

                adaptor.addChild(root_1, root_2);
                }
                // EsperEPL2Grammar.g:1121:58: ( expressionWithTimeList )?
                if ( stream_expressionWithTimeList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionWithTimeList.nextTree());

                }
                stream_expressionWithTimeList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1122:3: -> ^( OBSERVER_EXPR $ns $nm ( expressionWithTimeList )? )
            {
                // EsperEPL2Grammar.g:1122:6: ^( OBSERVER_EXPR $ns $nm ( expressionWithTimeList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(OBSERVER_EXPR, "OBSERVER_EXPR"), root_1);

                adaptor.addChild(root_1, stream_ns.nextNode());
                adaptor.addChild(root_1, stream_nm.nextNode());
                // EsperEPL2Grammar.g:1122:30: ( expressionWithTimeList )?
                if ( stream_expressionWithTimeList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionWithTimeList.nextTree());

                }
                stream_expressionWithTimeList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "observerExpression"

    public static class guardExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "guardExpression"
    // EsperEPL2Grammar.g:1125:1: guardExpression : IDENT COLON IDENT LPAREN ( expressionWithTimeList )? RPAREN ;
    public final EsperEPL2GrammarParser.guardExpression_return guardExpression() throws RecognitionException {
        EsperEPL2GrammarParser.guardExpression_return retval = new EsperEPL2GrammarParser.guardExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token IDENT457=null;
        Token COLON458=null;
        Token IDENT459=null;
        Token LPAREN460=null;
        Token RPAREN462=null;
        EsperEPL2GrammarParser.expressionWithTimeList_return expressionWithTimeList461 = null;


        CommonTree IDENT457_tree=null;
        CommonTree COLON458_tree=null;
        CommonTree IDENT459_tree=null;
        CommonTree LPAREN460_tree=null;
        CommonTree RPAREN462_tree=null;

        try {
            // EsperEPL2Grammar.g:1126:2: ( IDENT COLON IDENT LPAREN ( expressionWithTimeList )? RPAREN )
            // EsperEPL2Grammar.g:1126:4: IDENT COLON IDENT LPAREN ( expressionWithTimeList )? RPAREN
            {
            root_0 = (CommonTree)adaptor.nil();

            IDENT457=(Token)match(input,IDENT,FOLLOW_IDENT_in_guardExpression6993); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IDENT457_tree = (CommonTree)adaptor.create(IDENT457);
            adaptor.addChild(root_0, IDENT457_tree);
            }
            COLON458=(Token)match(input,COLON,FOLLOW_COLON_in_guardExpression6995); if (state.failed) return retval;
            IDENT459=(Token)match(input,IDENT,FOLLOW_IDENT_in_guardExpression6998); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IDENT459_tree = (CommonTree)adaptor.create(IDENT459);
            adaptor.addChild(root_0, IDENT459_tree);
            }
            LPAREN460=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_guardExpression7000); if (state.failed) return retval;
            // EsperEPL2Grammar.g:1126:31: ( expressionWithTimeList )?
            int alt166=2;
            int LA166_0 = input.LA(1);

            if ( (LA166_0==WINDOW||LA166_0==ESCAPE||(LA166_0>=NOT_EXPR && LA166_0<=EVERY_EXPR)||(LA166_0>=SUM && LA166_0<=COUNT)||LA166_0==CASE||LA166_0==OUTER||(LA166_0>=JOIN && LA166_0<=FULL)||(LA166_0>=EVENTS && LA166_0<=LAST)||(LA166_0>=UNIDIRECTIONAL && LA166_0<=CURRENT_TIMESTAMP)||LA166_0==SNAPSHOT||(LA166_0>=VARIABLE && LA166_0<=AT)||(LA166_0>=BOOLEAN_TRUE && LA166_0<=VALUE_NULL)||LA166_0==NUM_DOUBLE||LA166_0==IDENT||LA166_0==LPAREN||(LA166_0>=STAR && LA166_0<=LBRACK)||(LA166_0>=STRING_LITERAL && LA166_0<=QUOTED_STRING_LITERAL)||(LA166_0>=PLUS && LA166_0<=MINUS)||LA166_0==LCURLY||LA166_0==NUM_INT||LA166_0==QUESTION||(LA166_0>=TICKED_STRING_LITERAL && LA166_0<=NUM_FLOAT)) ) {
                alt166=1;
            }
            switch (alt166) {
                case 1 :
                    // EsperEPL2Grammar.g:1126:32: expressionWithTimeList
                    {
                    pushFollow(FOLLOW_expressionWithTimeList_in_guardExpression7004);
                    expressionWithTimeList461=expressionWithTimeList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionWithTimeList461.getTree());

                    }
                    break;

            }

            RPAREN462=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_guardExpression7008); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "guardExpression"

    public static class matchUntilRange_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchUntilRange"
    // EsperEPL2Grammar.g:1130:1: matchUntilRange : LBRACK (l= NUM_INT ( (d1= DOT DOT (r= NUM_INT )? ) | (c1= COLON r= NUM_INT ) )? | db= NUM_DOUBLE (d1= DOT (r= NUM_INT )? | db2= NUM_DOUBLE )? | DOT DOT r= NUM_INT | DOT db3= NUM_DOUBLE ) RBRACK -> {$l != null && d1 != null && r != null}? ^( MATCH_UNTIL_RANGE_CLOSED $l $r) -> {$l != null && d1 != null}? ^( MATCH_UNTIL_RANGE_HALFOPEN $l) -> {$l != null && c1 != null}? ^( MATCH_UNTIL_RANGE_CLOSED $l $r) -> {$l != null}? ^( MATCH_UNTIL_RANGE_BOUNDED $l) -> {$db != null && d1 != null && r != null}? ^( MATCH_UNTIL_RANGE_CLOSED $db $r) -> {$db != null && d1 != null}? ^( MATCH_UNTIL_RANGE_HALFOPEN $db) -> {$db != null && db2 != null}? ^( MATCH_UNTIL_RANGE_CLOSED $db $db2) -> {$db3 != null}? ^( MATCH_UNTIL_RANGE_HALFCLOSED $db3) -> {$r != null}? ^( MATCH_UNTIL_RANGE_HALFCLOSED $r) -> ^( MATCH_UNTIL_RANGE_HALFCLOSED $db) ;
    public final EsperEPL2GrammarParser.matchUntilRange_return matchUntilRange() throws RecognitionException {
        EsperEPL2GrammarParser.matchUntilRange_return retval = new EsperEPL2GrammarParser.matchUntilRange_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token l=null;
        Token d1=null;
        Token r=null;
        Token c1=null;
        Token db=null;
        Token db2=null;
        Token db3=null;
        Token LBRACK463=null;
        Token DOT464=null;
        Token DOT465=null;
        Token DOT466=null;
        Token DOT467=null;
        Token RBRACK468=null;

        CommonTree l_tree=null;
        CommonTree d1_tree=null;
        CommonTree r_tree=null;
        CommonTree c1_tree=null;
        CommonTree db_tree=null;
        CommonTree db2_tree=null;
        CommonTree db3_tree=null;
        CommonTree LBRACK463_tree=null;
        CommonTree DOT464_tree=null;
        CommonTree DOT465_tree=null;
        CommonTree DOT466_tree=null;
        CommonTree DOT467_tree=null;
        CommonTree RBRACK468_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_NUM_DOUBLE=new RewriteRuleTokenStream(adaptor,"token NUM_DOUBLE");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_NUM_INT=new RewriteRuleTokenStream(adaptor,"token NUM_INT");

        try {
            // EsperEPL2Grammar.g:1131:2: ( LBRACK (l= NUM_INT ( (d1= DOT DOT (r= NUM_INT )? ) | (c1= COLON r= NUM_INT ) )? | db= NUM_DOUBLE (d1= DOT (r= NUM_INT )? | db2= NUM_DOUBLE )? | DOT DOT r= NUM_INT | DOT db3= NUM_DOUBLE ) RBRACK -> {$l != null && d1 != null && r != null}? ^( MATCH_UNTIL_RANGE_CLOSED $l $r) -> {$l != null && d1 != null}? ^( MATCH_UNTIL_RANGE_HALFOPEN $l) -> {$l != null && c1 != null}? ^( MATCH_UNTIL_RANGE_CLOSED $l $r) -> {$l != null}? ^( MATCH_UNTIL_RANGE_BOUNDED $l) -> {$db != null && d1 != null && r != null}? ^( MATCH_UNTIL_RANGE_CLOSED $db $r) -> {$db != null && d1 != null}? ^( MATCH_UNTIL_RANGE_HALFOPEN $db) -> {$db != null && db2 != null}? ^( MATCH_UNTIL_RANGE_CLOSED $db $db2) -> {$db3 != null}? ^( MATCH_UNTIL_RANGE_HALFCLOSED $db3) -> {$r != null}? ^( MATCH_UNTIL_RANGE_HALFCLOSED $r) -> ^( MATCH_UNTIL_RANGE_HALFCLOSED $db) )
            // EsperEPL2Grammar.g:1131:4: LBRACK (l= NUM_INT ( (d1= DOT DOT (r= NUM_INT )? ) | (c1= COLON r= NUM_INT ) )? | db= NUM_DOUBLE (d1= DOT (r= NUM_INT )? | db2= NUM_DOUBLE )? | DOT DOT r= NUM_INT | DOT db3= NUM_DOUBLE ) RBRACK
            {
            LBRACK463=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_matchUntilRange7022); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK463);

            // EsperEPL2Grammar.g:1131:11: (l= NUM_INT ( (d1= DOT DOT (r= NUM_INT )? ) | (c1= COLON r= NUM_INT ) )? | db= NUM_DOUBLE (d1= DOT (r= NUM_INT )? | db2= NUM_DOUBLE )? | DOT DOT r= NUM_INT | DOT db3= NUM_DOUBLE )
            int alt171=4;
            switch ( input.LA(1) ) {
            case NUM_INT:
                {
                alt171=1;
                }
                break;
            case NUM_DOUBLE:
                {
                alt171=2;
                }
                break;
            case DOT:
                {
                int LA171_3 = input.LA(2);

                if ( (LA171_3==DOT) ) {
                    alt171=3;
                }
                else if ( (LA171_3==NUM_DOUBLE) ) {
                    alt171=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 171, 3, input);

                    throw nvae;
                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 171, 0, input);

                throw nvae;
            }

            switch (alt171) {
                case 1 :
                    // EsperEPL2Grammar.g:1132:4: l= NUM_INT ( (d1= DOT DOT (r= NUM_INT )? ) | (c1= COLON r= NUM_INT ) )?
                    {
                    l=(Token)match(input,NUM_INT,FOLLOW_NUM_INT_in_matchUntilRange7031); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_INT.add(l);

                    // EsperEPL2Grammar.g:1132:14: ( (d1= DOT DOT (r= NUM_INT )? ) | (c1= COLON r= NUM_INT ) )?
                    int alt168=3;
                    int LA168_0 = input.LA(1);

                    if ( (LA168_0==DOT) ) {
                        alt168=1;
                    }
                    else if ( (LA168_0==COLON) ) {
                        alt168=2;
                    }
                    switch (alt168) {
                        case 1 :
                            // EsperEPL2Grammar.g:1132:17: (d1= DOT DOT (r= NUM_INT )? )
                            {
                            // EsperEPL2Grammar.g:1132:17: (d1= DOT DOT (r= NUM_INT )? )
                            // EsperEPL2Grammar.g:1132:18: d1= DOT DOT (r= NUM_INT )?
                            {
                            d1=(Token)match(input,DOT,FOLLOW_DOT_in_matchUntilRange7039); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DOT.add(d1);

                            DOT464=(Token)match(input,DOT,FOLLOW_DOT_in_matchUntilRange7041); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DOT.add(DOT464);

                            // EsperEPL2Grammar.g:1132:30: (r= NUM_INT )?
                            int alt167=2;
                            int LA167_0 = input.LA(1);

                            if ( (LA167_0==NUM_INT) ) {
                                alt167=1;
                            }
                            switch (alt167) {
                                case 1 :
                                    // EsperEPL2Grammar.g:1132:30: r= NUM_INT
                                    {
                                    r=(Token)match(input,NUM_INT,FOLLOW_NUM_INT_in_matchUntilRange7045); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_NUM_INT.add(r);


                                    }
                                    break;

                            }


                            }


                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1133:17: (c1= COLON r= NUM_INT )
                            {
                            // EsperEPL2Grammar.g:1133:17: (c1= COLON r= NUM_INT )
                            // EsperEPL2Grammar.g:1133:18: c1= COLON r= NUM_INT
                            {
                            c1=(Token)match(input,COLON,FOLLOW_COLON_in_matchUntilRange7069); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COLON.add(c1);

                            r=(Token)match(input,NUM_INT,FOLLOW_NUM_INT_in_matchUntilRange7073); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NUM_INT.add(r);


                            }


                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1135:8: db= NUM_DOUBLE (d1= DOT (r= NUM_INT )? | db2= NUM_DOUBLE )?
                    {
                    db=(Token)match(input,NUM_DOUBLE,FOLLOW_NUM_DOUBLE_in_matchUntilRange7095); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_DOUBLE.add(db);

                    // EsperEPL2Grammar.g:1135:22: (d1= DOT (r= NUM_INT )? | db2= NUM_DOUBLE )?
                    int alt170=3;
                    int LA170_0 = input.LA(1);

                    if ( (LA170_0==DOT) ) {
                        alt170=1;
                    }
                    else if ( (LA170_0==NUM_DOUBLE) ) {
                        alt170=2;
                    }
                    switch (alt170) {
                        case 1 :
                            // EsperEPL2Grammar.g:1136:27: d1= DOT (r= NUM_INT )?
                            {
                            d1=(Token)match(input,DOT,FOLLOW_DOT_in_matchUntilRange7127); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DOT.add(d1);

                            // EsperEPL2Grammar.g:1136:35: (r= NUM_INT )?
                            int alt169=2;
                            int LA169_0 = input.LA(1);

                            if ( (LA169_0==NUM_INT) ) {
                                alt169=1;
                            }
                            switch (alt169) {
                                case 1 :
                                    // EsperEPL2Grammar.g:1136:35: r= NUM_INT
                                    {
                                    r=(Token)match(input,NUM_INT,FOLLOW_NUM_INT_in_matchUntilRange7131); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_NUM_INT.add(r);


                                    }
                                    break;

                            }


                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1138:27: db2= NUM_DOUBLE
                            {
                            db2=(Token)match(input,NUM_DOUBLE,FOLLOW_NUM_DOUBLE_in_matchUntilRange7191); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NUM_DOUBLE.add(db2);


                            }
                            break;

                    }


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1140:8: DOT DOT r= NUM_INT
                    {
                    DOT465=(Token)match(input,DOT,FOLLOW_DOT_in_matchUntilRange7228); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT465);

                    DOT466=(Token)match(input,DOT,FOLLOW_DOT_in_matchUntilRange7230); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT466);

                    r=(Token)match(input,NUM_INT,FOLLOW_NUM_INT_in_matchUntilRange7234); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_INT.add(r);


                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:1141:8: DOT db3= NUM_DOUBLE
                    {
                    DOT467=(Token)match(input,DOT,FOLLOW_DOT_in_matchUntilRange7243); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT467);

                    db3=(Token)match(input,NUM_DOUBLE,FOLLOW_NUM_DOUBLE_in_matchUntilRange7247); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_DOUBLE.add(db3);


                    }
                    break;

            }

            RBRACK468=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_matchUntilRange7258); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK468);



            // AST REWRITE
            // elements: db, db, r, l, db2, db, r, l, r, l, db, r, l, db3
            // token labels: db, r, l, db2, db3
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_db=new RewriteRuleTokenStream(adaptor,"token db",db);
            RewriteRuleTokenStream stream_r=new RewriteRuleTokenStream(adaptor,"token r",r);
            RewriteRuleTokenStream stream_l=new RewriteRuleTokenStream(adaptor,"token l",l);
            RewriteRuleTokenStream stream_db2=new RewriteRuleTokenStream(adaptor,"token db2",db2);
            RewriteRuleTokenStream stream_db3=new RewriteRuleTokenStream(adaptor,"token db3",db3);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1144:3: -> {$l != null && d1 != null && r != null}? ^( MATCH_UNTIL_RANGE_CLOSED $l $r)
            if (l != null && d1 != null && r != null) {
                // EsperEPL2Grammar.g:1144:47: ^( MATCH_UNTIL_RANGE_CLOSED $l $r)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_CLOSED, "MATCH_UNTIL_RANGE_CLOSED"), root_1);

                adaptor.addChild(root_1, stream_l.nextNode());
                adaptor.addChild(root_1, stream_r.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1145:3: -> {$l != null && d1 != null}? ^( MATCH_UNTIL_RANGE_HALFOPEN $l)
            if (l != null && d1 != null) {
                // EsperEPL2Grammar.g:1145:34: ^( MATCH_UNTIL_RANGE_HALFOPEN $l)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_HALFOPEN, "MATCH_UNTIL_RANGE_HALFOPEN"), root_1);

                adaptor.addChild(root_1, stream_l.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1146:3: -> {$l != null && c1 != null}? ^( MATCH_UNTIL_RANGE_CLOSED $l $r)
            if (l != null && c1 != null) {
                // EsperEPL2Grammar.g:1146:34: ^( MATCH_UNTIL_RANGE_CLOSED $l $r)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_CLOSED, "MATCH_UNTIL_RANGE_CLOSED"), root_1);

                adaptor.addChild(root_1, stream_l.nextNode());
                adaptor.addChild(root_1, stream_r.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1147:3: -> {$l != null}? ^( MATCH_UNTIL_RANGE_BOUNDED $l)
            if (l != null) {
                // EsperEPL2Grammar.g:1147:20: ^( MATCH_UNTIL_RANGE_BOUNDED $l)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_BOUNDED, "MATCH_UNTIL_RANGE_BOUNDED"), root_1);

                adaptor.addChild(root_1, stream_l.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1148:3: -> {$db != null && d1 != null && r != null}? ^( MATCH_UNTIL_RANGE_CLOSED $db $r)
            if (db != null && d1 != null && r != null) {
                // EsperEPL2Grammar.g:1148:48: ^( MATCH_UNTIL_RANGE_CLOSED $db $r)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_CLOSED, "MATCH_UNTIL_RANGE_CLOSED"), root_1);

                adaptor.addChild(root_1, stream_db.nextNode());
                adaptor.addChild(root_1, stream_r.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1149:3: -> {$db != null && d1 != null}? ^( MATCH_UNTIL_RANGE_HALFOPEN $db)
            if (db != null && d1 != null) {
                // EsperEPL2Grammar.g:1149:35: ^( MATCH_UNTIL_RANGE_HALFOPEN $db)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_HALFOPEN, "MATCH_UNTIL_RANGE_HALFOPEN"), root_1);

                adaptor.addChild(root_1, stream_db.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1150:3: -> {$db != null && db2 != null}? ^( MATCH_UNTIL_RANGE_CLOSED $db $db2)
            if (db != null && db2 != null) {
                // EsperEPL2Grammar.g:1150:36: ^( MATCH_UNTIL_RANGE_CLOSED $db $db2)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_CLOSED, "MATCH_UNTIL_RANGE_CLOSED"), root_1);

                adaptor.addChild(root_1, stream_db.nextNode());
                adaptor.addChild(root_1, stream_db2.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1151:3: -> {$db3 != null}? ^( MATCH_UNTIL_RANGE_HALFCLOSED $db3)
            if (db3 != null) {
                // EsperEPL2Grammar.g:1151:22: ^( MATCH_UNTIL_RANGE_HALFCLOSED $db3)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_HALFCLOSED, "MATCH_UNTIL_RANGE_HALFCLOSED"), root_1);

                adaptor.addChild(root_1, stream_db3.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1152:3: -> {$r != null}? ^( MATCH_UNTIL_RANGE_HALFCLOSED $r)
            if (r != null) {
                // EsperEPL2Grammar.g:1152:20: ^( MATCH_UNTIL_RANGE_HALFCLOSED $r)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_HALFCLOSED, "MATCH_UNTIL_RANGE_HALFCLOSED"), root_1);

                adaptor.addChild(root_1, stream_r.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1153:3: -> ^( MATCH_UNTIL_RANGE_HALFCLOSED $db)
            {
                // EsperEPL2Grammar.g:1153:6: ^( MATCH_UNTIL_RANGE_HALFCLOSED $db)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_HALFCLOSED, "MATCH_UNTIL_RANGE_HALFCLOSED"), root_1);

                adaptor.addChild(root_1, stream_db.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchUntilRange"

    public static class eventFilterExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "eventFilterExpression"
    // EsperEPL2Grammar.g:1161:1: eventFilterExpression : (i= IDENT EQUALS )? classIdentifier ( LPAREN ( expressionList )? RPAREN )? ( propertyExpression )? -> ^( EVENT_FILTER_EXPR ( $i)? classIdentifier ( propertyExpression )? ( expressionList )? ) ;
    public final EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression() throws RecognitionException {
        EsperEPL2GrammarParser.eventFilterExpression_return retval = new EsperEPL2GrammarParser.eventFilterExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token EQUALS469=null;
        Token LPAREN471=null;
        Token RPAREN473=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier470 = null;

        EsperEPL2GrammarParser.expressionList_return expressionList472 = null;

        EsperEPL2GrammarParser.propertyExpression_return propertyExpression474 = null;


        CommonTree i_tree=null;
        CommonTree EQUALS469_tree=null;
        CommonTree LPAREN471_tree=null;
        CommonTree RPAREN473_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_propertyExpression=new RewriteRuleSubtreeStream(adaptor,"rule propertyExpression");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
         paraphrases.push("filter specification"); 
        try {
            // EsperEPL2Grammar.g:1164:5: ( (i= IDENT EQUALS )? classIdentifier ( LPAREN ( expressionList )? RPAREN )? ( propertyExpression )? -> ^( EVENT_FILTER_EXPR ( $i)? classIdentifier ( propertyExpression )? ( expressionList )? ) )
            // EsperEPL2Grammar.g:1164:9: (i= IDENT EQUALS )? classIdentifier ( LPAREN ( expressionList )? RPAREN )? ( propertyExpression )?
            {
            // EsperEPL2Grammar.g:1164:9: (i= IDENT EQUALS )?
            int alt172=2;
            int LA172_0 = input.LA(1);

            if ( (LA172_0==IDENT) ) {
                int LA172_1 = input.LA(2);

                if ( (LA172_1==EQUALS) ) {
                    alt172=1;
                }
            }
            switch (alt172) {
                case 1 :
                    // EsperEPL2Grammar.g:1164:10: i= IDENT EQUALS
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_eventFilterExpression7443); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);

                    EQUALS469=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_eventFilterExpression7445); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS469);


                    }
                    break;

            }

            pushFollow(FOLLOW_classIdentifier_in_eventFilterExpression7454);
            classIdentifier470=classIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier470.getTree());
            // EsperEPL2Grammar.g:1166:9: ( LPAREN ( expressionList )? RPAREN )?
            int alt174=2;
            int LA174_0 = input.LA(1);

            if ( (LA174_0==LPAREN) ) {
                alt174=1;
            }
            switch (alt174) {
                case 1 :
                    // EsperEPL2Grammar.g:1166:10: LPAREN ( expressionList )? RPAREN
                    {
                    LPAREN471=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_eventFilterExpression7465); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN471);

                    // EsperEPL2Grammar.g:1166:17: ( expressionList )?
                    int alt173=2;
                    int LA173_0 = input.LA(1);

                    if ( (LA173_0==WINDOW||LA173_0==ESCAPE||(LA173_0>=NOT_EXPR && LA173_0<=EVERY_EXPR)||(LA173_0>=SUM && LA173_0<=COUNT)||LA173_0==CASE||LA173_0==OUTER||(LA173_0>=JOIN && LA173_0<=FULL)||(LA173_0>=EVENTS && LA173_0<=LAST)||(LA173_0>=UNIDIRECTIONAL && LA173_0<=CURRENT_TIMESTAMP)||LA173_0==SNAPSHOT||(LA173_0>=VARIABLE && LA173_0<=AT)||(LA173_0>=BOOLEAN_TRUE && LA173_0<=VALUE_NULL)||LA173_0==NUM_DOUBLE||LA173_0==IDENT||LA173_0==LPAREN||(LA173_0>=STRING_LITERAL && LA173_0<=QUOTED_STRING_LITERAL)||(LA173_0>=PLUS && LA173_0<=MINUS)||LA173_0==LCURLY||LA173_0==NUM_INT||LA173_0==QUESTION||(LA173_0>=TICKED_STRING_LITERAL && LA173_0<=NUM_FLOAT)) ) {
                        alt173=1;
                    }
                    switch (alt173) {
                        case 1 :
                            // EsperEPL2Grammar.g:1166:17: expressionList
                            {
                            pushFollow(FOLLOW_expressionList_in_eventFilterExpression7467);
                            expressionList472=expressionList();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList472.getTree());

                            }
                            break;

                    }

                    RPAREN473=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_eventFilterExpression7470); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN473);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:1167:9: ( propertyExpression )?
            int alt175=2;
            int LA175_0 = input.LA(1);

            if ( (LA175_0==LBRACK) ) {
                alt175=1;
            }
            switch (alt175) {
                case 1 :
                    // EsperEPL2Grammar.g:1167:9: propertyExpression
                    {
                    pushFollow(FOLLOW_propertyExpression_in_eventFilterExpression7482);
                    propertyExpression474=propertyExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_propertyExpression.add(propertyExpression474.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: classIdentifier, propertyExpression, i, expressionList
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1168:9: -> ^( EVENT_FILTER_EXPR ( $i)? classIdentifier ( propertyExpression )? ( expressionList )? )
            {
                // EsperEPL2Grammar.g:1168:12: ^( EVENT_FILTER_EXPR ( $i)? classIdentifier ( propertyExpression )? ( expressionList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_FILTER_EXPR, "EVENT_FILTER_EXPR"), root_1);

                // EsperEPL2Grammar.g:1168:32: ( $i)?
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());

                }
                stream_i.reset();
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                // EsperEPL2Grammar.g:1168:52: ( propertyExpression )?
                if ( stream_propertyExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_propertyExpression.nextTree());

                }
                stream_propertyExpression.reset();
                // EsperEPL2Grammar.g:1168:72: ( expressionList )?
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());

                }
                stream_expressionList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "eventFilterExpression"

    public static class propertyExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "propertyExpression"
    // EsperEPL2Grammar.g:1171:1: propertyExpression : propertyExpressionAtomic ( propertyExpressionAtomic )* -> ^( EVENT_FILTER_PROPERTY_EXPR ( propertyExpressionAtomic )+ ) ;
    public final EsperEPL2GrammarParser.propertyExpression_return propertyExpression() throws RecognitionException {
        EsperEPL2GrammarParser.propertyExpression_return retval = new EsperEPL2GrammarParser.propertyExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.propertyExpressionAtomic_return propertyExpressionAtomic475 = null;

        EsperEPL2GrammarParser.propertyExpressionAtomic_return propertyExpressionAtomic476 = null;


        RewriteRuleSubtreeStream stream_propertyExpressionAtomic=new RewriteRuleSubtreeStream(adaptor,"rule propertyExpressionAtomic");
        try {
            // EsperEPL2Grammar.g:1172:2: ( propertyExpressionAtomic ( propertyExpressionAtomic )* -> ^( EVENT_FILTER_PROPERTY_EXPR ( propertyExpressionAtomic )+ ) )
            // EsperEPL2Grammar.g:1172:4: propertyExpressionAtomic ( propertyExpressionAtomic )*
            {
            pushFollow(FOLLOW_propertyExpressionAtomic_in_propertyExpression7527);
            propertyExpressionAtomic475=propertyExpressionAtomic();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_propertyExpressionAtomic.add(propertyExpressionAtomic475.getTree());
            // EsperEPL2Grammar.g:1172:29: ( propertyExpressionAtomic )*
            loop176:
            do {
                int alt176=2;
                int LA176_0 = input.LA(1);

                if ( (LA176_0==LBRACK) ) {
                    alt176=1;
                }


                switch (alt176) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1172:30: propertyExpressionAtomic
            	    {
            	    pushFollow(FOLLOW_propertyExpressionAtomic_in_propertyExpression7530);
            	    propertyExpressionAtomic476=propertyExpressionAtomic();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_propertyExpressionAtomic.add(propertyExpressionAtomic476.getTree());

            	    }
            	    break;

            	default :
            	    break loop176;
                }
            } while (true);



            // AST REWRITE
            // elements: propertyExpressionAtomic
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1173:9: -> ^( EVENT_FILTER_PROPERTY_EXPR ( propertyExpressionAtomic )+ )
            {
                // EsperEPL2Grammar.g:1173:12: ^( EVENT_FILTER_PROPERTY_EXPR ( propertyExpressionAtomic )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_FILTER_PROPERTY_EXPR, "EVENT_FILTER_PROPERTY_EXPR"), root_1);

                if ( !(stream_propertyExpressionAtomic.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_propertyExpressionAtomic.hasNext() ) {
                    adaptor.addChild(root_1, stream_propertyExpressionAtomic.nextTree());

                }
                stream_propertyExpressionAtomic.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "propertyExpression"

    public static class propertyExpressionAtomic_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "propertyExpressionAtomic"
    // EsperEPL2Grammar.g:1176:1: propertyExpressionAtomic : LBRACK ( SELECT propertySelectionList FROM )? eventProperty ( AS IDENT )? ( WHERE expression )? RBRACK -> ^( EVENT_FILTER_PROPERTY_EXPR_ATOM ( propertySelectionList )? eventProperty ( IDENT )? ^( WHERE_EXPR ( expression )? ) ) ;
    public final EsperEPL2GrammarParser.propertyExpressionAtomic_return propertyExpressionAtomic() throws RecognitionException {
        EsperEPL2GrammarParser.propertyExpressionAtomic_return retval = new EsperEPL2GrammarParser.propertyExpressionAtomic_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LBRACK477=null;
        Token SELECT478=null;
        Token FROM480=null;
        Token AS482=null;
        Token IDENT483=null;
        Token WHERE484=null;
        Token RBRACK486=null;
        EsperEPL2GrammarParser.propertySelectionList_return propertySelectionList479 = null;

        EsperEPL2GrammarParser.eventProperty_return eventProperty481 = null;

        EsperEPL2GrammarParser.expression_return expression485 = null;


        CommonTree LBRACK477_tree=null;
        CommonTree SELECT478_tree=null;
        CommonTree FROM480_tree=null;
        CommonTree AS482_tree=null;
        CommonTree IDENT483_tree=null;
        CommonTree WHERE484_tree=null;
        CommonTree RBRACK486_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_FROM=new RewriteRuleTokenStream(adaptor,"token FROM");
        RewriteRuleTokenStream stream_SELECT=new RewriteRuleTokenStream(adaptor,"token SELECT");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_propertySelectionList=new RewriteRuleSubtreeStream(adaptor,"rule propertySelectionList");
        RewriteRuleSubtreeStream stream_eventProperty=new RewriteRuleSubtreeStream(adaptor,"rule eventProperty");
        try {
            // EsperEPL2Grammar.g:1177:2: ( LBRACK ( SELECT propertySelectionList FROM )? eventProperty ( AS IDENT )? ( WHERE expression )? RBRACK -> ^( EVENT_FILTER_PROPERTY_EXPR_ATOM ( propertySelectionList )? eventProperty ( IDENT )? ^( WHERE_EXPR ( expression )? ) ) )
            // EsperEPL2Grammar.g:1177:4: LBRACK ( SELECT propertySelectionList FROM )? eventProperty ( AS IDENT )? ( WHERE expression )? RBRACK
            {
            LBRACK477=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_propertyExpressionAtomic7560); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK477);

            // EsperEPL2Grammar.g:1177:11: ( SELECT propertySelectionList FROM )?
            int alt177=2;
            int LA177_0 = input.LA(1);

            if ( (LA177_0==SELECT) ) {
                alt177=1;
            }
            switch (alt177) {
                case 1 :
                    // EsperEPL2Grammar.g:1177:12: SELECT propertySelectionList FROM
                    {
                    SELECT478=(Token)match(input,SELECT,FOLLOW_SELECT_in_propertyExpressionAtomic7563); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SELECT.add(SELECT478);

                    pushFollow(FOLLOW_propertySelectionList_in_propertyExpressionAtomic7565);
                    propertySelectionList479=propertySelectionList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_propertySelectionList.add(propertySelectionList479.getTree());
                    FROM480=(Token)match(input,FROM,FOLLOW_FROM_in_propertyExpressionAtomic7567); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FROM.add(FROM480);


                    }
                    break;

            }

            pushFollow(FOLLOW_eventProperty_in_propertyExpressionAtomic7571);
            eventProperty481=eventProperty();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventProperty.add(eventProperty481.getTree());
            // EsperEPL2Grammar.g:1177:62: ( AS IDENT )?
            int alt178=2;
            int LA178_0 = input.LA(1);

            if ( (LA178_0==AS) ) {
                alt178=1;
            }
            switch (alt178) {
                case 1 :
                    // EsperEPL2Grammar.g:1177:63: AS IDENT
                    {
                    AS482=(Token)match(input,AS,FOLLOW_AS_in_propertyExpressionAtomic7574); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS482);

                    IDENT483=(Token)match(input,IDENT,FOLLOW_IDENT_in_propertyExpressionAtomic7576); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT483);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:1177:74: ( WHERE expression )?
            int alt179=2;
            int LA179_0 = input.LA(1);

            if ( (LA179_0==WHERE) ) {
                alt179=1;
            }
            switch (alt179) {
                case 1 :
                    // EsperEPL2Grammar.g:1177:75: WHERE expression
                    {
                    WHERE484=(Token)match(input,WHERE,FOLLOW_WHERE_in_propertyExpressionAtomic7581); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE484);

                    pushFollow(FOLLOW_expression_in_propertyExpressionAtomic7583);
                    expression485=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression485.getTree());

                    }
                    break;

            }

            RBRACK486=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_propertyExpressionAtomic7587); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK486);



            // AST REWRITE
            // elements: eventProperty, propertySelectionList, expression, IDENT
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1178:9: -> ^( EVENT_FILTER_PROPERTY_EXPR_ATOM ( propertySelectionList )? eventProperty ( IDENT )? ^( WHERE_EXPR ( expression )? ) )
            {
                // EsperEPL2Grammar.g:1178:12: ^( EVENT_FILTER_PROPERTY_EXPR_ATOM ( propertySelectionList )? eventProperty ( IDENT )? ^( WHERE_EXPR ( expression )? ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_FILTER_PROPERTY_EXPR_ATOM, "EVENT_FILTER_PROPERTY_EXPR_ATOM"), root_1);

                // EsperEPL2Grammar.g:1178:46: ( propertySelectionList )?
                if ( stream_propertySelectionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_propertySelectionList.nextTree());

                }
                stream_propertySelectionList.reset();
                adaptor.addChild(root_1, stream_eventProperty.nextTree());
                // EsperEPL2Grammar.g:1178:83: ( IDENT )?
                if ( stream_IDENT.hasNext() ) {
                    adaptor.addChild(root_1, stream_IDENT.nextNode());

                }
                stream_IDENT.reset();
                // EsperEPL2Grammar.g:1178:90: ^( WHERE_EXPR ( expression )? )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WHERE_EXPR, "WHERE_EXPR"), root_2);

                // EsperEPL2Grammar.g:1178:103: ( expression )?
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_2, stream_expression.nextTree());

                }
                stream_expression.reset();

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "propertyExpressionAtomic"

    public static class propertySelectionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "propertySelectionList"
    // EsperEPL2Grammar.g:1181:1: propertySelectionList : propertySelectionListElement ( COMMA propertySelectionListElement )* ;
    public final EsperEPL2GrammarParser.propertySelectionList_return propertySelectionList() throws RecognitionException {
        EsperEPL2GrammarParser.propertySelectionList_return retval = new EsperEPL2GrammarParser.propertySelectionList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA488=null;
        EsperEPL2GrammarParser.propertySelectionListElement_return propertySelectionListElement487 = null;

        EsperEPL2GrammarParser.propertySelectionListElement_return propertySelectionListElement489 = null;


        CommonTree COMMA488_tree=null;

        try {
            // EsperEPL2Grammar.g:1182:2: ( propertySelectionListElement ( COMMA propertySelectionListElement )* )
            // EsperEPL2Grammar.g:1182:4: propertySelectionListElement ( COMMA propertySelectionListElement )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_propertySelectionListElement_in_propertySelectionList7637);
            propertySelectionListElement487=propertySelectionListElement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, propertySelectionListElement487.getTree());
            // EsperEPL2Grammar.g:1182:33: ( COMMA propertySelectionListElement )*
            loop180:
            do {
                int alt180=2;
                int LA180_0 = input.LA(1);

                if ( (LA180_0==COMMA) ) {
                    alt180=1;
                }


                switch (alt180) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1182:34: COMMA propertySelectionListElement
            	    {
            	    COMMA488=(Token)match(input,COMMA,FOLLOW_COMMA_in_propertySelectionList7640); if (state.failed) return retval;
            	    pushFollow(FOLLOW_propertySelectionListElement_in_propertySelectionList7643);
            	    propertySelectionListElement489=propertySelectionListElement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, propertySelectionListElement489.getTree());

            	    }
            	    break;

            	default :
            	    break loop180;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "propertySelectionList"

    public static class propertySelectionListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "propertySelectionListElement"
    // EsperEPL2Grammar.g:1185:1: propertySelectionListElement : (s= STAR -> PROPERTY_WILDCARD_SELECT[$s] | ( propertyStreamSelector )=> propertyStreamSelector | expression ( AS i= keywordAllowedIdent )? -> {identifier != null}? ^( PROPERTY_SELECTION_ELEMENT_EXPR expression IDENT[identifier] ) -> ^( PROPERTY_SELECTION_ELEMENT_EXPR expression ) );
    public final EsperEPL2GrammarParser.propertySelectionListElement_return propertySelectionListElement() throws RecognitionException {
        EsperEPL2GrammarParser.propertySelectionListElement_return retval = new EsperEPL2GrammarParser.propertySelectionListElement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token s=null;
        Token AS492=null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i = null;

        EsperEPL2GrammarParser.propertyStreamSelector_return propertyStreamSelector490 = null;

        EsperEPL2GrammarParser.expression_return expression491 = null;


        CommonTree s_tree=null;
        CommonTree AS492_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_keywordAllowedIdent=new RewriteRuleSubtreeStream(adaptor,"rule keywordAllowedIdent");
         String identifier = null; 
        try {
            // EsperEPL2Grammar.g:1187:2: (s= STAR -> PROPERTY_WILDCARD_SELECT[$s] | ( propertyStreamSelector )=> propertyStreamSelector | expression ( AS i= keywordAllowedIdent )? -> {identifier != null}? ^( PROPERTY_SELECTION_ELEMENT_EXPR expression IDENT[identifier] ) -> ^( PROPERTY_SELECTION_ELEMENT_EXPR expression ) )
            int alt182=3;
            alt182 = dfa182.predict(input);
            switch (alt182) {
                case 1 :
                    // EsperEPL2Grammar.g:1187:7: s= STAR
                    {
                    s=(Token)match(input,STAR,FOLLOW_STAR_in_propertySelectionListElement7669); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STAR.add(s);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1187:14: -> PROPERTY_WILDCARD_SELECT[$s]
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(PROPERTY_WILDCARD_SELECT, s));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1188:4: ( propertyStreamSelector )=> propertyStreamSelector
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_propertyStreamSelector_in_propertySelectionListElement7685);
                    propertyStreamSelector490=propertyStreamSelector();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, propertyStreamSelector490.getTree());

                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1189:4: expression ( AS i= keywordAllowedIdent )?
                    {
                    pushFollow(FOLLOW_expression_in_propertySelectionListElement7690);
                    expression491=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression491.getTree());
                    // EsperEPL2Grammar.g:1189:15: ( AS i= keywordAllowedIdent )?
                    int alt181=2;
                    int LA181_0 = input.LA(1);

                    if ( (LA181_0==AS) ) {
                        alt181=1;
                    }
                    switch (alt181) {
                        case 1 :
                            // EsperEPL2Grammar.g:1189:16: AS i= keywordAllowedIdent
                            {
                            AS492=(Token)match(input,AS,FOLLOW_AS_in_propertySelectionListElement7693); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_AS.add(AS492);

                            pushFollow(FOLLOW_keywordAllowedIdent_in_propertySelectionListElement7697);
                            i=keywordAllowedIdent();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i.getTree());
                            if ( state.backtracking==0 ) {
                               identifier = i.getTree().toString(); 
                            }

                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: expression, expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1190:3: -> {identifier != null}? ^( PROPERTY_SELECTION_ELEMENT_EXPR expression IDENT[identifier] )
                    if (identifier != null) {
                        // EsperEPL2Grammar.g:1190:28: ^( PROPERTY_SELECTION_ELEMENT_EXPR expression IDENT[identifier] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PROPERTY_SELECTION_ELEMENT_EXPR, "PROPERTY_SELECTION_ELEMENT_EXPR"), root_1);

                        adaptor.addChild(root_1, stream_expression.nextTree());
                        adaptor.addChild(root_1, (CommonTree)adaptor.create(IDENT, identifier));

                        adaptor.addChild(root_0, root_1);
                        }

                    }
                    else // 1191:3: -> ^( PROPERTY_SELECTION_ELEMENT_EXPR expression )
                    {
                        // EsperEPL2Grammar.g:1191:6: ^( PROPERTY_SELECTION_ELEMENT_EXPR expression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PROPERTY_SELECTION_ELEMENT_EXPR, "PROPERTY_SELECTION_ELEMENT_EXPR"), root_1);

                        adaptor.addChild(root_1, stream_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "propertySelectionListElement"

    public static class propertyStreamSelector_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "propertyStreamSelector"
    // EsperEPL2Grammar.g:1194:1: propertyStreamSelector : s= IDENT DOT STAR ( AS i= IDENT )? -> ^( PROPERTY_SELECTION_STREAM $s ( $i)? ) ;
    public final EsperEPL2GrammarParser.propertyStreamSelector_return propertyStreamSelector() throws RecognitionException {
        EsperEPL2GrammarParser.propertyStreamSelector_return retval = new EsperEPL2GrammarParser.propertyStreamSelector_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token s=null;
        Token i=null;
        Token DOT493=null;
        Token STAR494=null;
        Token AS495=null;

        CommonTree s_tree=null;
        CommonTree i_tree=null;
        CommonTree DOT493_tree=null;
        CommonTree STAR494_tree=null;
        CommonTree AS495_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");

        try {
            // EsperEPL2Grammar.g:1195:2: (s= IDENT DOT STAR ( AS i= IDENT )? -> ^( PROPERTY_SELECTION_STREAM $s ( $i)? ) )
            // EsperEPL2Grammar.g:1195:4: s= IDENT DOT STAR ( AS i= IDENT )?
            {
            s=(Token)match(input,IDENT,FOLLOW_IDENT_in_propertyStreamSelector7741); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(s);

            DOT493=(Token)match(input,DOT,FOLLOW_DOT_in_propertyStreamSelector7743); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DOT.add(DOT493);

            STAR494=(Token)match(input,STAR,FOLLOW_STAR_in_propertyStreamSelector7745); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_STAR.add(STAR494);

            // EsperEPL2Grammar.g:1195:21: ( AS i= IDENT )?
            int alt183=2;
            int LA183_0 = input.LA(1);

            if ( (LA183_0==AS) ) {
                alt183=1;
            }
            switch (alt183) {
                case 1 :
                    // EsperEPL2Grammar.g:1195:22: AS i= IDENT
                    {
                    AS495=(Token)match(input,AS,FOLLOW_AS_in_propertyStreamSelector7748); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS495);

                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_propertyStreamSelector7752); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;

            }



            // AST REWRITE
            // elements: i, s
            // token labels: s, i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1196:3: -> ^( PROPERTY_SELECTION_STREAM $s ( $i)? )
            {
                // EsperEPL2Grammar.g:1196:6: ^( PROPERTY_SELECTION_STREAM $s ( $i)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PROPERTY_SELECTION_STREAM, "PROPERTY_SELECTION_STREAM"), root_1);

                adaptor.addChild(root_1, stream_s.nextNode());
                // EsperEPL2Grammar.g:1196:37: ( $i)?
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());

                }
                stream_i.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "propertyStreamSelector"

    public static class patternFilterExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "patternFilterExpression"
    // EsperEPL2Grammar.g:1199:1: patternFilterExpression : (i= IDENT EQUALS )? classIdentifier ( LPAREN ( expressionList )? RPAREN )? ( propertyExpression )? -> ^( PATTERN_FILTER_EXPR ( $i)? classIdentifier ( propertyExpression )? ( expressionList )? ) ;
    public final EsperEPL2GrammarParser.patternFilterExpression_return patternFilterExpression() throws RecognitionException {
        EsperEPL2GrammarParser.patternFilterExpression_return retval = new EsperEPL2GrammarParser.patternFilterExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token EQUALS496=null;
        Token LPAREN498=null;
        Token RPAREN500=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier497 = null;

        EsperEPL2GrammarParser.expressionList_return expressionList499 = null;

        EsperEPL2GrammarParser.propertyExpression_return propertyExpression501 = null;


        CommonTree i_tree=null;
        CommonTree EQUALS496_tree=null;
        CommonTree LPAREN498_tree=null;
        CommonTree RPAREN500_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_propertyExpression=new RewriteRuleSubtreeStream(adaptor,"rule propertyExpression");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
         paraphrases.push("filter specification"); 
        try {
            // EsperEPL2Grammar.g:1202:5: ( (i= IDENT EQUALS )? classIdentifier ( LPAREN ( expressionList )? RPAREN )? ( propertyExpression )? -> ^( PATTERN_FILTER_EXPR ( $i)? classIdentifier ( propertyExpression )? ( expressionList )? ) )
            // EsperEPL2Grammar.g:1202:9: (i= IDENT EQUALS )? classIdentifier ( LPAREN ( expressionList )? RPAREN )? ( propertyExpression )?
            {
            // EsperEPL2Grammar.g:1202:9: (i= IDENT EQUALS )?
            int alt184=2;
            int LA184_0 = input.LA(1);

            if ( (LA184_0==IDENT) ) {
                int LA184_1 = input.LA(2);

                if ( (LA184_1==EQUALS) ) {
                    alt184=1;
                }
            }
            switch (alt184) {
                case 1 :
                    // EsperEPL2Grammar.g:1202:10: i= IDENT EQUALS
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_patternFilterExpression7799); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);

                    EQUALS496=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_patternFilterExpression7801); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS496);


                    }
                    break;

            }

            pushFollow(FOLLOW_classIdentifier_in_patternFilterExpression7810);
            classIdentifier497=classIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier497.getTree());
            // EsperEPL2Grammar.g:1204:9: ( LPAREN ( expressionList )? RPAREN )?
            int alt186=2;
            int LA186_0 = input.LA(1);

            if ( (LA186_0==LPAREN) ) {
                alt186=1;
            }
            switch (alt186) {
                case 1 :
                    // EsperEPL2Grammar.g:1204:10: LPAREN ( expressionList )? RPAREN
                    {
                    LPAREN498=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_patternFilterExpression7821); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN498);

                    // EsperEPL2Grammar.g:1204:17: ( expressionList )?
                    int alt185=2;
                    int LA185_0 = input.LA(1);

                    if ( (LA185_0==WINDOW||LA185_0==ESCAPE||(LA185_0>=NOT_EXPR && LA185_0<=EVERY_EXPR)||(LA185_0>=SUM && LA185_0<=COUNT)||LA185_0==CASE||LA185_0==OUTER||(LA185_0>=JOIN && LA185_0<=FULL)||(LA185_0>=EVENTS && LA185_0<=LAST)||(LA185_0>=UNIDIRECTIONAL && LA185_0<=CURRENT_TIMESTAMP)||LA185_0==SNAPSHOT||(LA185_0>=VARIABLE && LA185_0<=AT)||(LA185_0>=BOOLEAN_TRUE && LA185_0<=VALUE_NULL)||LA185_0==NUM_DOUBLE||LA185_0==IDENT||LA185_0==LPAREN||(LA185_0>=STRING_LITERAL && LA185_0<=QUOTED_STRING_LITERAL)||(LA185_0>=PLUS && LA185_0<=MINUS)||LA185_0==LCURLY||LA185_0==NUM_INT||LA185_0==QUESTION||(LA185_0>=TICKED_STRING_LITERAL && LA185_0<=NUM_FLOAT)) ) {
                        alt185=1;
                    }
                    switch (alt185) {
                        case 1 :
                            // EsperEPL2Grammar.g:1204:17: expressionList
                            {
                            pushFollow(FOLLOW_expressionList_in_patternFilterExpression7823);
                            expressionList499=expressionList();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList499.getTree());

                            }
                            break;

                    }

                    RPAREN500=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_patternFilterExpression7826); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN500);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:1205:9: ( propertyExpression )?
            int alt187=2;
            int LA187_0 = input.LA(1);

            if ( (LA187_0==LBRACK) ) {
                alt187=1;
            }
            switch (alt187) {
                case 1 :
                    // EsperEPL2Grammar.g:1205:9: propertyExpression
                    {
                    pushFollow(FOLLOW_propertyExpression_in_patternFilterExpression7838);
                    propertyExpression501=propertyExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_propertyExpression.add(propertyExpression501.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: classIdentifier, propertyExpression, i, expressionList
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1206:9: -> ^( PATTERN_FILTER_EXPR ( $i)? classIdentifier ( propertyExpression )? ( expressionList )? )
            {
                // EsperEPL2Grammar.g:1206:12: ^( PATTERN_FILTER_EXPR ( $i)? classIdentifier ( propertyExpression )? ( expressionList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATTERN_FILTER_EXPR, "PATTERN_FILTER_EXPR"), root_1);

                // EsperEPL2Grammar.g:1206:34: ( $i)?
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());

                }
                stream_i.reset();
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                // EsperEPL2Grammar.g:1206:54: ( propertyExpression )?
                if ( stream_propertyExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_propertyExpression.nextTree());

                }
                stream_propertyExpression.reset();
                // EsperEPL2Grammar.g:1206:74: ( expressionList )?
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());

                }
                stream_expressionList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "patternFilterExpression"

    public static class classIdentifier_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "classIdentifier"
    // EsperEPL2Grammar.g:1209:1: classIdentifier : i1= escapableIdent ( DOT i2= escapableIdent )* -> ^( CLASS_IDENT[identifier] ) ;
    public final EsperEPL2GrammarParser.classIdentifier_return classIdentifier() throws RecognitionException {
        EsperEPL2GrammarParser.classIdentifier_return retval = new EsperEPL2GrammarParser.classIdentifier_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token DOT502=null;
        EsperEPL2GrammarParser.escapableIdent_return i1 = null;

        EsperEPL2GrammarParser.escapableIdent_return i2 = null;


        CommonTree DOT502_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_escapableIdent=new RewriteRuleSubtreeStream(adaptor,"rule escapableIdent");
         String identifier = ""; 
        try {
            // EsperEPL2Grammar.g:1211:2: (i1= escapableIdent ( DOT i2= escapableIdent )* -> ^( CLASS_IDENT[identifier] ) )
            // EsperEPL2Grammar.g:1211:4: i1= escapableIdent ( DOT i2= escapableIdent )*
            {
            pushFollow(FOLLOW_escapableIdent_in_classIdentifier7888);
            i1=escapableIdent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_escapableIdent.add(i1.getTree());
            if ( state.backtracking==0 ) {
               identifier = (i1!=null?i1.result:null); 
            }
            // EsperEPL2Grammar.g:1212:6: ( DOT i2= escapableIdent )*
            loop188:
            do {
                int alt188=2;
                int LA188_0 = input.LA(1);

                if ( (LA188_0==DOT) ) {
                    int LA188_16 = input.LA(2);

                    if ( (LA188_16==IDENT) ) {
                        int LA188_39 = input.LA(3);

                        if ( (LA188_39==EOF||LA188_39==CREATE||(LA188_39>=OR_EXPR && LA188_39<=AS)||LA188_39==SELECT||(LA188_39>=INNER && LA188_39<=ON)||(LA188_39>=GROUP && LA188_39<=HAVING)||LA188_39==OUTPUT||LA188_39==INSERT||LA188_39==ORDER||(LA188_39>=UNIDIRECTIONAL && LA188_39<=RETAININTERSECTION)||LA188_39==DELETE||LA188_39==SET||LA188_39==UNTIL||LA188_39==ROW_LIMIT_EXPR||(LA188_39>=COMMA && LA188_39<=IDENT)||(LA188_39>=DOT && LA188_39<=RPAREN)||(LA188_39>=LBRACK && LA188_39<=RBRACK)||LA188_39==RCURLY||LA188_39==FOLLOWED_BY||LA188_39==TICKED_STRING_LITERAL||LA188_39==EMAILAT) ) {
                            alt188=1;
                        }


                    }
                    else if ( (LA188_16==TICKED_STRING_LITERAL) ) {
                        alt188=1;
                    }


                }


                switch (alt188) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1213:8: DOT i2= escapableIdent
            	    {
            	    DOT502=(Token)match(input,DOT,FOLLOW_DOT_in_classIdentifier7907); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT502);

            	    pushFollow(FOLLOW_escapableIdent_in_classIdentifier7911);
            	    i2=escapableIdent();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_escapableIdent.add(i2.getTree());
            	    if ( state.backtracking==0 ) {
            	       identifier += "." + (i2!=null?i2.result:null); 
            	    }

            	    }
            	    break;

            	default :
            	    break loop188;
                }
            } while (true);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1215:6: -> ^( CLASS_IDENT[identifier] )
            {
                // EsperEPL2Grammar.g:1215:9: ^( CLASS_IDENT[identifier] )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CLASS_IDENT, identifier), root_1);

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "classIdentifier"

    public static class classIdentifierNonGreedy_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "classIdentifierNonGreedy"
    // EsperEPL2Grammar.g:1218:1: classIdentifierNonGreedy : i1= escapableIdent ( options {greedy=false; } : DOT i2= escapableIdent )* -> ^( CLASS_IDENT[identifier] ) ;
    public final EsperEPL2GrammarParser.classIdentifierNonGreedy_return classIdentifierNonGreedy() throws RecognitionException {
        EsperEPL2GrammarParser.classIdentifierNonGreedy_return retval = new EsperEPL2GrammarParser.classIdentifierNonGreedy_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token DOT503=null;
        EsperEPL2GrammarParser.escapableIdent_return i1 = null;

        EsperEPL2GrammarParser.escapableIdent_return i2 = null;


        CommonTree DOT503_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_escapableIdent=new RewriteRuleSubtreeStream(adaptor,"rule escapableIdent");
         String identifier = ""; 
        try {
            // EsperEPL2Grammar.g:1220:2: (i1= escapableIdent ( options {greedy=false; } : DOT i2= escapableIdent )* -> ^( CLASS_IDENT[identifier] ) )
            // EsperEPL2Grammar.g:1220:4: i1= escapableIdent ( options {greedy=false; } : DOT i2= escapableIdent )*
            {
            pushFollow(FOLLOW_escapableIdent_in_classIdentifierNonGreedy7956);
            i1=escapableIdent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_escapableIdent.add(i1.getTree());
            if ( state.backtracking==0 ) {
               identifier = (i1!=null?i1.result:null); 
            }
            // EsperEPL2Grammar.g:1221:6: ( options {greedy=false; } : DOT i2= escapableIdent )*
            loop189:
            do {
                int alt189=2;
                int LA189_0 = input.LA(1);

                if ( (LA189_0==DOT) ) {
                    switch ( input.LA(2) ) {
                    case IDENT:
                        {
                        int LA189_2 = input.LA(3);

                        if ( (LA189_2==DOT) ) {
                            alt189=1;
                        }
                        else if ( (LA189_2==LPAREN) ) {
                            alt189=2;
                        }


                        }
                        break;
                    case TICKED_STRING_LITERAL:
                        {
                        alt189=1;
                        }
                        break;
                    case MAX:
                    case MIN:
                        {
                        alt189=2;
                        }
                        break;

                    }

                }


                switch (alt189) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1223:8: DOT i2= escapableIdent
            	    {
            	    DOT503=(Token)match(input,DOT,FOLLOW_DOT_in_classIdentifierNonGreedy7991); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT503);

            	    pushFollow(FOLLOW_escapableIdent_in_classIdentifierNonGreedy7995);
            	    i2=escapableIdent();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_escapableIdent.add(i2.getTree());
            	    if ( state.backtracking==0 ) {
            	       identifier += "." + (i2!=null?i2.result:null); 
            	    }

            	    }
            	    break;

            	default :
            	    break loop189;
                }
            } while (true);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1225:6: -> ^( CLASS_IDENT[identifier] )
            {
                // EsperEPL2Grammar.g:1225:9: ^( CLASS_IDENT[identifier] )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CLASS_IDENT, identifier), root_1);

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "classIdentifierNonGreedy"

    public static class expressionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expressionList"
    // EsperEPL2Grammar.g:1228:1: expressionList : expression ( COMMA expression )* ;
    public final EsperEPL2GrammarParser.expressionList_return expressionList() throws RecognitionException {
        EsperEPL2GrammarParser.expressionList_return retval = new EsperEPL2GrammarParser.expressionList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA505=null;
        EsperEPL2GrammarParser.expression_return expression504 = null;

        EsperEPL2GrammarParser.expression_return expression506 = null;


        CommonTree COMMA505_tree=null;

        try {
            // EsperEPL2Grammar.g:1229:6: ( expression ( COMMA expression )* )
            // EsperEPL2Grammar.g:1229:11: expression ( COMMA expression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_expression_in_expressionList8037);
            expression504=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression504.getTree());
            // EsperEPL2Grammar.g:1229:22: ( COMMA expression )*
            loop190:
            do {
                int alt190=2;
                int LA190_0 = input.LA(1);

                if ( (LA190_0==COMMA) ) {
                    alt190=1;
                }


                switch (alt190) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1229:23: COMMA expression
            	    {
            	    COMMA505=(Token)match(input,COMMA,FOLLOW_COMMA_in_expressionList8040); if (state.failed) return retval;
            	    pushFollow(FOLLOW_expression_in_expressionList8043);
            	    expression506=expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression506.getTree());

            	    }
            	    break;

            	default :
            	    break loop190;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "expressionList"

    public static class expressionWithTimeList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expressionWithTimeList"
    // EsperEPL2Grammar.g:1232:1: expressionWithTimeList : expressionWithTime ( COMMA expressionWithTime )* ;
    public final EsperEPL2GrammarParser.expressionWithTimeList_return expressionWithTimeList() throws RecognitionException {
        EsperEPL2GrammarParser.expressionWithTimeList_return retval = new EsperEPL2GrammarParser.expressionWithTimeList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA508=null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime507 = null;

        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime509 = null;


        CommonTree COMMA508_tree=null;

        try {
            // EsperEPL2Grammar.g:1233:6: ( expressionWithTime ( COMMA expressionWithTime )* )
            // EsperEPL2Grammar.g:1233:11: expressionWithTime ( COMMA expressionWithTime )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_expressionWithTime_in_expressionWithTimeList8071);
            expressionWithTime507=expressionWithTime();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionWithTime507.getTree());
            // EsperEPL2Grammar.g:1233:30: ( COMMA expressionWithTime )*
            loop191:
            do {
                int alt191=2;
                int LA191_0 = input.LA(1);

                if ( (LA191_0==COMMA) ) {
                    alt191=1;
                }


                switch (alt191) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1233:31: COMMA expressionWithTime
            	    {
            	    COMMA508=(Token)match(input,COMMA,FOLLOW_COMMA_in_expressionWithTimeList8074); if (state.failed) return retval;
            	    pushFollow(FOLLOW_expressionWithTime_in_expressionWithTimeList8077);
            	    expressionWithTime509=expressionWithTime();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionWithTime509.getTree());

            	    }
            	    break;

            	default :
            	    break loop191;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "expressionWithTimeList"

    public static class expressionWithTime_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expressionWithTime"
    // EsperEPL2Grammar.g:1236:1: expressionWithTime : ( ( lastOperand )=> lastOperand | ( lastWeekdayOperand )=> lastWeekdayOperand | ( timePeriod )=> timePeriod | ( expressionQualifyable )=> expressionQualifyable | ( rangeOperand )=> rangeOperand | ( frequencyOperand )=> frequencyOperand | ( lastOperator )=> lastOperator | ( weekDayOperator )=> weekDayOperator | ( numericParameterList )=> numericParameterList | numberSetStar );
    public final EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime() throws RecognitionException {
        EsperEPL2GrammarParser.expressionWithTime_return retval = new EsperEPL2GrammarParser.expressionWithTime_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.lastOperand_return lastOperand510 = null;

        EsperEPL2GrammarParser.lastWeekdayOperand_return lastWeekdayOperand511 = null;

        EsperEPL2GrammarParser.timePeriod_return timePeriod512 = null;

        EsperEPL2GrammarParser.expressionQualifyable_return expressionQualifyable513 = null;

        EsperEPL2GrammarParser.rangeOperand_return rangeOperand514 = null;

        EsperEPL2GrammarParser.frequencyOperand_return frequencyOperand515 = null;

        EsperEPL2GrammarParser.lastOperator_return lastOperator516 = null;

        EsperEPL2GrammarParser.weekDayOperator_return weekDayOperator517 = null;

        EsperEPL2GrammarParser.numericParameterList_return numericParameterList518 = null;

        EsperEPL2GrammarParser.numberSetStar_return numberSetStar519 = null;



        try {
            // EsperEPL2Grammar.g:1237:2: ( ( lastOperand )=> lastOperand | ( lastWeekdayOperand )=> lastWeekdayOperand | ( timePeriod )=> timePeriod | ( expressionQualifyable )=> expressionQualifyable | ( rangeOperand )=> rangeOperand | ( frequencyOperand )=> frequencyOperand | ( lastOperator )=> lastOperator | ( weekDayOperator )=> weekDayOperator | ( numericParameterList )=> numericParameterList | numberSetStar )
            int alt192=10;
            alt192 = dfa192.predict(input);
            switch (alt192) {
                case 1 :
                    // EsperEPL2Grammar.g:1237:7: ( lastOperand )=> lastOperand
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_lastOperand_in_expressionWithTime8103);
                    lastOperand510=lastOperand();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lastOperand510.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1238:4: ( lastWeekdayOperand )=> lastWeekdayOperand
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_lastWeekdayOperand_in_expressionWithTime8114);
                    lastWeekdayOperand511=lastWeekdayOperand();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lastWeekdayOperand511.getTree());

                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1239:4: ( timePeriod )=> timePeriod
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_timePeriod_in_expressionWithTime8125);
                    timePeriod512=timePeriod();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, timePeriod512.getTree());

                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:1240:4: ( expressionQualifyable )=> expressionQualifyable
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_expressionQualifyable_in_expressionWithTime8136);
                    expressionQualifyable513=expressionQualifyable();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionQualifyable513.getTree());

                    }
                    break;
                case 5 :
                    // EsperEPL2Grammar.g:1241:4: ( rangeOperand )=> rangeOperand
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_rangeOperand_in_expressionWithTime8147);
                    rangeOperand514=rangeOperand();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rangeOperand514.getTree());

                    }
                    break;
                case 6 :
                    // EsperEPL2Grammar.g:1242:5: ( frequencyOperand )=> frequencyOperand
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_frequencyOperand_in_expressionWithTime8159);
                    frequencyOperand515=frequencyOperand();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, frequencyOperand515.getTree());

                    }
                    break;
                case 7 :
                    // EsperEPL2Grammar.g:1243:4: ( lastOperator )=> lastOperator
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_lastOperator_in_expressionWithTime8170);
                    lastOperator516=lastOperator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lastOperator516.getTree());

                    }
                    break;
                case 8 :
                    // EsperEPL2Grammar.g:1244:4: ( weekDayOperator )=> weekDayOperator
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_weekDayOperator_in_expressionWithTime8182);
                    weekDayOperator517=weekDayOperator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, weekDayOperator517.getTree());

                    }
                    break;
                case 9 :
                    // EsperEPL2Grammar.g:1245:5: ( numericParameterList )=> numericParameterList
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_numericParameterList_in_expressionWithTime8194);
                    numericParameterList518=numericParameterList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numericParameterList518.getTree());

                    }
                    break;
                case 10 :
                    // EsperEPL2Grammar.g:1246:4: numberSetStar
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_numberSetStar_in_expressionWithTime8199);
                    numberSetStar519=numberSetStar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numberSetStar519.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "expressionWithTime"

    public static class expressionQualifyable_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expressionQualifyable"
    // EsperEPL2Grammar.g:1249:1: expressionQualifyable : expression (a= ASC | d= DESC | s= TIMEPERIOD_SECONDS | s= TIMEPERIOD_SECOND | s= TIMEPERIOD_SEC )? -> {d != null || a != null}? ^( OBJECT_PARAM_ORDERED_EXPR expression ( $a)? ( $d)? ) -> {s != null}? ^( TIME_PERIOD ^( SECOND_PART expression ) ) -> expression ;
    public final EsperEPL2GrammarParser.expressionQualifyable_return expressionQualifyable() throws RecognitionException {
        EsperEPL2GrammarParser.expressionQualifyable_return retval = new EsperEPL2GrammarParser.expressionQualifyable_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token a=null;
        Token d=null;
        Token s=null;
        EsperEPL2GrammarParser.expression_return expression520 = null;


        CommonTree a_tree=null;
        CommonTree d_tree=null;
        CommonTree s_tree=null;
        RewriteRuleTokenStream stream_TIMEPERIOD_SEC=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SEC");
        RewriteRuleTokenStream stream_TIMEPERIOD_SECOND=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SECOND");
        RewriteRuleTokenStream stream_ASC=new RewriteRuleTokenStream(adaptor,"token ASC");
        RewriteRuleTokenStream stream_DESC=new RewriteRuleTokenStream(adaptor,"token DESC");
        RewriteRuleTokenStream stream_TIMEPERIOD_SECONDS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SECONDS");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            // EsperEPL2Grammar.g:1250:2: ( expression (a= ASC | d= DESC | s= TIMEPERIOD_SECONDS | s= TIMEPERIOD_SECOND | s= TIMEPERIOD_SEC )? -> {d != null || a != null}? ^( OBJECT_PARAM_ORDERED_EXPR expression ( $a)? ( $d)? ) -> {s != null}? ^( TIME_PERIOD ^( SECOND_PART expression ) ) -> expression )
            // EsperEPL2Grammar.g:1250:4: expression (a= ASC | d= DESC | s= TIMEPERIOD_SECONDS | s= TIMEPERIOD_SECOND | s= TIMEPERIOD_SEC )?
            {
            pushFollow(FOLLOW_expression_in_expressionQualifyable8210);
            expression520=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression520.getTree());
            // EsperEPL2Grammar.g:1250:15: (a= ASC | d= DESC | s= TIMEPERIOD_SECONDS | s= TIMEPERIOD_SECOND | s= TIMEPERIOD_SEC )?
            int alt193=6;
            switch ( input.LA(1) ) {
                case ASC:
                    {
                    alt193=1;
                    }
                    break;
                case DESC:
                    {
                    alt193=2;
                    }
                    break;
                case TIMEPERIOD_SECONDS:
                    {
                    alt193=3;
                    }
                    break;
                case TIMEPERIOD_SECOND:
                    {
                    alt193=4;
                    }
                    break;
                case TIMEPERIOD_SEC:
                    {
                    alt193=5;
                    }
                    break;
            }

            switch (alt193) {
                case 1 :
                    // EsperEPL2Grammar.g:1250:16: a= ASC
                    {
                    a=(Token)match(input,ASC,FOLLOW_ASC_in_expressionQualifyable8215); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASC.add(a);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1250:22: d= DESC
                    {
                    d=(Token)match(input,DESC,FOLLOW_DESC_in_expressionQualifyable8219); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DESC.add(d);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1250:29: s= TIMEPERIOD_SECONDS
                    {
                    s=(Token)match(input,TIMEPERIOD_SECONDS,FOLLOW_TIMEPERIOD_SECONDS_in_expressionQualifyable8223); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SECONDS.add(s);


                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:1250:50: s= TIMEPERIOD_SECOND
                    {
                    s=(Token)match(input,TIMEPERIOD_SECOND,FOLLOW_TIMEPERIOD_SECOND_in_expressionQualifyable8227); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SECOND.add(s);


                    }
                    break;
                case 5 :
                    // EsperEPL2Grammar.g:1250:70: s= TIMEPERIOD_SEC
                    {
                    s=(Token)match(input,TIMEPERIOD_SEC,FOLLOW_TIMEPERIOD_SEC_in_expressionQualifyable8231); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SEC.add(s);


                    }
                    break;

            }



            // AST REWRITE
            // elements: a, expression, expression, expression, d
            // token labels: d, a
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_d=new RewriteRuleTokenStream(adaptor,"token d",d);
            RewriteRuleTokenStream stream_a=new RewriteRuleTokenStream(adaptor,"token a",a);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1251:3: -> {d != null || a != null}? ^( OBJECT_PARAM_ORDERED_EXPR expression ( $a)? ( $d)? )
            if (d != null || a != null) {
                // EsperEPL2Grammar.g:1251:32: ^( OBJECT_PARAM_ORDERED_EXPR expression ( $a)? ( $d)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(OBJECT_PARAM_ORDERED_EXPR, "OBJECT_PARAM_ORDERED_EXPR"), root_1);

                adaptor.addChild(root_1, stream_expression.nextTree());
                // EsperEPL2Grammar.g:1251:71: ( $a)?
                if ( stream_a.hasNext() ) {
                    adaptor.addChild(root_1, stream_a.nextNode());

                }
                stream_a.reset();
                // EsperEPL2Grammar.g:1251:75: ( $d)?
                if ( stream_d.hasNext() ) {
                    adaptor.addChild(root_1, stream_d.nextNode());

                }
                stream_d.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1252:3: -> {s != null}? ^( TIME_PERIOD ^( SECOND_PART expression ) )
            if (s != null) {
                // EsperEPL2Grammar.g:1252:19: ^( TIME_PERIOD ^( SECOND_PART expression ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TIME_PERIOD, "TIME_PERIOD"), root_1);

                // EsperEPL2Grammar.g:1252:33: ^( SECOND_PART expression )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SECOND_PART, "SECOND_PART"), root_2);

                adaptor.addChild(root_2, stream_expression.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1253:3: -> expression
            {
                adaptor.addChild(root_0, stream_expression.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "expressionQualifyable"

    public static class numberSetStar_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "numberSetStar"
    // EsperEPL2Grammar.g:1257:1: numberSetStar : STAR -> ^( NUMBERSETSTAR ) ;
    public final EsperEPL2GrammarParser.numberSetStar_return numberSetStar() throws RecognitionException {
        EsperEPL2GrammarParser.numberSetStar_return retval = new EsperEPL2GrammarParser.numberSetStar_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token STAR521=null;

        CommonTree STAR521_tree=null;
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");

        try {
            // EsperEPL2Grammar.g:1258:2: ( STAR -> ^( NUMBERSETSTAR ) )
            // EsperEPL2Grammar.g:1258:4: STAR
            {
            STAR521=(Token)match(input,STAR,FOLLOW_STAR_in_numberSetStar8288); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_STAR.add(STAR521);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1259:3: -> ^( NUMBERSETSTAR )
            {
                // EsperEPL2Grammar.g:1259:6: ^( NUMBERSETSTAR )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMBERSETSTAR, "NUMBERSETSTAR"), root_1);

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "numberSetStar"

    public static class lastWeekdayOperand_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lastWeekdayOperand"
    // EsperEPL2Grammar.g:1262:1: lastWeekdayOperand : LW ;
    public final EsperEPL2GrammarParser.lastWeekdayOperand_return lastWeekdayOperand() throws RecognitionException {
        EsperEPL2GrammarParser.lastWeekdayOperand_return retval = new EsperEPL2GrammarParser.lastWeekdayOperand_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LW522=null;

        CommonTree LW522_tree=null;

        try {
            // EsperEPL2Grammar.g:1263:2: ( LW )
            // EsperEPL2Grammar.g:1263:4: LW
            {
            root_0 = (CommonTree)adaptor.nil();

            LW522=(Token)match(input,LW,FOLLOW_LW_in_lastWeekdayOperand8308); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LW522_tree = (CommonTree)adaptor.create(LW522);
            root_0 = (CommonTree)adaptor.becomeRoot(LW522_tree, root_0);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lastWeekdayOperand"

    public static class lastOperand_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lastOperand"
    // EsperEPL2Grammar.g:1266:1: lastOperand : LAST ;
    public final EsperEPL2GrammarParser.lastOperand_return lastOperand() throws RecognitionException {
        EsperEPL2GrammarParser.lastOperand_return retval = new EsperEPL2GrammarParser.lastOperand_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LAST523=null;

        CommonTree LAST523_tree=null;

        try {
            // EsperEPL2Grammar.g:1267:2: ( LAST )
            // EsperEPL2Grammar.g:1267:4: LAST
            {
            root_0 = (CommonTree)adaptor.nil();

            LAST523=(Token)match(input,LAST,FOLLOW_LAST_in_lastOperand8321); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LAST523_tree = (CommonTree)adaptor.create(LAST523);
            root_0 = (CommonTree)adaptor.becomeRoot(LAST523_tree, root_0);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lastOperand"

    public static class frequencyOperand_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "frequencyOperand"
    // EsperEPL2Grammar.g:1270:1: frequencyOperand : STAR DIV ( number | i= IDENT | substitution ) -> {i!= null}? ^( NUMERIC_PARAM_FREQUENCY ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( NUMERIC_PARAM_FREQUENCY ( number )? ( substitution )? ) ;
    public final EsperEPL2GrammarParser.frequencyOperand_return frequencyOperand() throws RecognitionException {
        EsperEPL2GrammarParser.frequencyOperand_return retval = new EsperEPL2GrammarParser.frequencyOperand_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token STAR524=null;
        Token DIV525=null;
        EsperEPL2GrammarParser.number_return number526 = null;

        EsperEPL2GrammarParser.substitution_return substitution527 = null;


        CommonTree i_tree=null;
        CommonTree STAR524_tree=null;
        CommonTree DIV525_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_DIV=new RewriteRuleTokenStream(adaptor,"token DIV");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            // EsperEPL2Grammar.g:1271:2: ( STAR DIV ( number | i= IDENT | substitution ) -> {i!= null}? ^( NUMERIC_PARAM_FREQUENCY ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( NUMERIC_PARAM_FREQUENCY ( number )? ( substitution )? ) )
            // EsperEPL2Grammar.g:1271:4: STAR DIV ( number | i= IDENT | substitution )
            {
            STAR524=(Token)match(input,STAR,FOLLOW_STAR_in_frequencyOperand8333); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_STAR.add(STAR524);

            DIV525=(Token)match(input,DIV,FOLLOW_DIV_in_frequencyOperand8335); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DIV.add(DIV525);

            // EsperEPL2Grammar.g:1271:13: ( number | i= IDENT | substitution )
            int alt194=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt194=1;
                }
                break;
            case IDENT:
                {
                alt194=2;
                }
                break;
            case QUESTION:
                {
                alt194=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 194, 0, input);

                throw nvae;
            }

            switch (alt194) {
                case 1 :
                    // EsperEPL2Grammar.g:1271:14: number
                    {
                    pushFollow(FOLLOW_number_in_frequencyOperand8338);
                    number526=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number526.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1271:21: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_frequencyOperand8342); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1271:29: substitution
                    {
                    pushFollow(FOLLOW_substitution_in_frequencyOperand8344);
                    substitution527=substitution();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution527.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: number, substitution, i
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1272:3: -> {i!= null}? ^( NUMERIC_PARAM_FREQUENCY ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
            if (i!= null) {
                // EsperEPL2Grammar.g:1272:18: ^( NUMERIC_PARAM_FREQUENCY ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_FREQUENCY, "NUMERIC_PARAM_FREQUENCY"), root_1);

                // EsperEPL2Grammar.g:1272:44: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1272:62: ^( EVENT_PROP_SIMPLE $i)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1273:3: -> ^( NUMERIC_PARAM_FREQUENCY ( number )? ( substitution )? )
            {
                // EsperEPL2Grammar.g:1273:6: ^( NUMERIC_PARAM_FREQUENCY ( number )? ( substitution )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_FREQUENCY, "NUMERIC_PARAM_FREQUENCY"), root_1);

                // EsperEPL2Grammar.g:1273:32: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:1273:40: ( substitution )?
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());

                }
                stream_substitution.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "frequencyOperand"

    public static class rangeOperand_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rangeOperand"
    // EsperEPL2Grammar.g:1276:1: rangeOperand : ( number | i1= IDENT | substitution ) COLON ( number | i2= IDENT | substitution ) -> {i1 != null && i2 != null}? ^( NUMERIC_PARAM_RANGE ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i1) ) ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i2) ) ) -> {i1 != null && i2 == null}? ^( NUMERIC_PARAM_RANGE ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i1) ) ( number )? ( substitution )? ) -> {i1 == null && i2 != null}? ^( NUMERIC_PARAM_RANGE ( number )? ( substitution )? ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i2) ) ) -> ^( NUMERIC_PARAM_RANGE ( number )* ( substitution )* ) ;
    public final EsperEPL2GrammarParser.rangeOperand_return rangeOperand() throws RecognitionException {
        EsperEPL2GrammarParser.rangeOperand_return retval = new EsperEPL2GrammarParser.rangeOperand_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i1=null;
        Token i2=null;
        Token COLON530=null;
        EsperEPL2GrammarParser.number_return number528 = null;

        EsperEPL2GrammarParser.substitution_return substitution529 = null;

        EsperEPL2GrammarParser.number_return number531 = null;

        EsperEPL2GrammarParser.substitution_return substitution532 = null;


        CommonTree i1_tree=null;
        CommonTree i2_tree=null;
        CommonTree COLON530_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            // EsperEPL2Grammar.g:1277:2: ( ( number | i1= IDENT | substitution ) COLON ( number | i2= IDENT | substitution ) -> {i1 != null && i2 != null}? ^( NUMERIC_PARAM_RANGE ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i1) ) ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i2) ) ) -> {i1 != null && i2 == null}? ^( NUMERIC_PARAM_RANGE ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i1) ) ( number )? ( substitution )? ) -> {i1 == null && i2 != null}? ^( NUMERIC_PARAM_RANGE ( number )? ( substitution )? ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i2) ) ) -> ^( NUMERIC_PARAM_RANGE ( number )* ( substitution )* ) )
            // EsperEPL2Grammar.g:1277:4: ( number | i1= IDENT | substitution ) COLON ( number | i2= IDENT | substitution )
            {
            // EsperEPL2Grammar.g:1277:4: ( number | i1= IDENT | substitution )
            int alt195=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt195=1;
                }
                break;
            case IDENT:
                {
                alt195=2;
                }
                break;
            case QUESTION:
                {
                alt195=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 195, 0, input);

                throw nvae;
            }

            switch (alt195) {
                case 1 :
                    // EsperEPL2Grammar.g:1277:5: number
                    {
                    pushFollow(FOLLOW_number_in_rangeOperand8393);
                    number528=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number528.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1277:12: i1= IDENT
                    {
                    i1=(Token)match(input,IDENT,FOLLOW_IDENT_in_rangeOperand8397); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i1);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1277:21: substitution
                    {
                    pushFollow(FOLLOW_substitution_in_rangeOperand8399);
                    substitution529=substitution();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution529.getTree());

                    }
                    break;

            }

            COLON530=(Token)match(input,COLON,FOLLOW_COLON_in_rangeOperand8402); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON530);

            // EsperEPL2Grammar.g:1277:41: ( number | i2= IDENT | substitution )
            int alt196=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt196=1;
                }
                break;
            case IDENT:
                {
                alt196=2;
                }
                break;
            case QUESTION:
                {
                alt196=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 196, 0, input);

                throw nvae;
            }

            switch (alt196) {
                case 1 :
                    // EsperEPL2Grammar.g:1277:42: number
                    {
                    pushFollow(FOLLOW_number_in_rangeOperand8405);
                    number531=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number531.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1277:49: i2= IDENT
                    {
                    i2=(Token)match(input,IDENT,FOLLOW_IDENT_in_rangeOperand8409); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i2);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1277:58: substitution
                    {
                    pushFollow(FOLLOW_substitution_in_rangeOperand8411);
                    substitution532=substitution();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution532.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: i2, i2, substitution, substitution, i1, number, number, i1, number, substitution
            // token labels: i2, i1
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i2=new RewriteRuleTokenStream(adaptor,"token i2",i2);
            RewriteRuleTokenStream stream_i1=new RewriteRuleTokenStream(adaptor,"token i1",i1);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1278:3: -> {i1 != null && i2 != null}? ^( NUMERIC_PARAM_RANGE ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i1) ) ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i2) ) )
            if (i1 != null && i2 != null) {
                // EsperEPL2Grammar.g:1278:34: ^( NUMERIC_PARAM_RANGE ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i1) ) ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i2) ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_RANGE, "NUMERIC_PARAM_RANGE"), root_1);

                // EsperEPL2Grammar.g:1278:56: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i1) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1278:74: ^( EVENT_PROP_SIMPLE $i1)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i1.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }
                // EsperEPL2Grammar.g:1278:100: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i2) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1278:118: ^( EVENT_PROP_SIMPLE $i2)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i2.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1279:3: -> {i1 != null && i2 == null}? ^( NUMERIC_PARAM_RANGE ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i1) ) ( number )? ( substitution )? )
            if (i1 != null && i2 == null) {
                // EsperEPL2Grammar.g:1279:34: ^( NUMERIC_PARAM_RANGE ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i1) ) ( number )? ( substitution )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_RANGE, "NUMERIC_PARAM_RANGE"), root_1);

                // EsperEPL2Grammar.g:1279:56: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i1) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1279:74: ^( EVENT_PROP_SIMPLE $i1)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i1.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }
                // EsperEPL2Grammar.g:1279:100: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:1279:108: ( substitution )?
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());

                }
                stream_substitution.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1280:3: -> {i1 == null && i2 != null}? ^( NUMERIC_PARAM_RANGE ( number )? ( substitution )? ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i2) ) )
            if (i1 == null && i2 != null) {
                // EsperEPL2Grammar.g:1280:34: ^( NUMERIC_PARAM_RANGE ( number )? ( substitution )? ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i2) ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_RANGE, "NUMERIC_PARAM_RANGE"), root_1);

                // EsperEPL2Grammar.g:1280:56: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:1280:64: ( substitution )?
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());

                }
                stream_substitution.reset();
                // EsperEPL2Grammar.g:1280:78: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i2) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1280:96: ^( EVENT_PROP_SIMPLE $i2)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i2.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1281:3: -> ^( NUMERIC_PARAM_RANGE ( number )* ( substitution )* )
            {
                // EsperEPL2Grammar.g:1281:6: ^( NUMERIC_PARAM_RANGE ( number )* ( substitution )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_RANGE, "NUMERIC_PARAM_RANGE"), root_1);

                // EsperEPL2Grammar.g:1281:28: ( number )*
                while ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:1281:36: ( substitution )*
                while ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());

                }
                stream_substitution.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "rangeOperand"

    public static class lastOperator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lastOperator"
    // EsperEPL2Grammar.g:1284:1: lastOperator : ( number | i= IDENT | substitution ) LAST -> {i!= null}? ^( LAST_OPERATOR ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( LAST_OPERATOR ( number )? ( substitution )? ) ;
    public final EsperEPL2GrammarParser.lastOperator_return lastOperator() throws RecognitionException {
        EsperEPL2GrammarParser.lastOperator_return retval = new EsperEPL2GrammarParser.lastOperator_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token LAST535=null;
        EsperEPL2GrammarParser.number_return number533 = null;

        EsperEPL2GrammarParser.substitution_return substitution534 = null;


        CommonTree i_tree=null;
        CommonTree LAST535_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_LAST=new RewriteRuleTokenStream(adaptor,"token LAST");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            // EsperEPL2Grammar.g:1285:2: ( ( number | i= IDENT | substitution ) LAST -> {i!= null}? ^( LAST_OPERATOR ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( LAST_OPERATOR ( number )? ( substitution )? ) )
            // EsperEPL2Grammar.g:1285:4: ( number | i= IDENT | substitution ) LAST
            {
            // EsperEPL2Grammar.g:1285:4: ( number | i= IDENT | substitution )
            int alt197=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt197=1;
                }
                break;
            case IDENT:
                {
                alt197=2;
                }
                break;
            case QUESTION:
                {
                alt197=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 197, 0, input);

                throw nvae;
            }

            switch (alt197) {
                case 1 :
                    // EsperEPL2Grammar.g:1285:5: number
                    {
                    pushFollow(FOLLOW_number_in_lastOperator8525);
                    number533=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number533.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1285:12: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_lastOperator8529); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1285:20: substitution
                    {
                    pushFollow(FOLLOW_substitution_in_lastOperator8531);
                    substitution534=substitution();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution534.getTree());

                    }
                    break;

            }

            LAST535=(Token)match(input,LAST,FOLLOW_LAST_in_lastOperator8534); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LAST.add(LAST535);



            // AST REWRITE
            // elements: number, substitution, i
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1286:3: -> {i!= null}? ^( LAST_OPERATOR ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
            if (i!= null) {
                // EsperEPL2Grammar.g:1286:18: ^( LAST_OPERATOR ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LAST_OPERATOR, "LAST_OPERATOR"), root_1);

                // EsperEPL2Grammar.g:1286:34: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1286:52: ^( EVENT_PROP_SIMPLE $i)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1287:3: -> ^( LAST_OPERATOR ( number )? ( substitution )? )
            {
                // EsperEPL2Grammar.g:1287:6: ^( LAST_OPERATOR ( number )? ( substitution )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LAST_OPERATOR, "LAST_OPERATOR"), root_1);

                // EsperEPL2Grammar.g:1287:22: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:1287:30: ( substitution )?
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());

                }
                stream_substitution.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lastOperator"

    public static class weekDayOperator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "weekDayOperator"
    // EsperEPL2Grammar.g:1290:1: weekDayOperator : ( number | i= IDENT | substitution ) WEEKDAY -> {i!= null}? ^( WEEKDAY_OPERATOR ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( WEEKDAY_OPERATOR ( number )? ( substitution )? ) ;
    public final EsperEPL2GrammarParser.weekDayOperator_return weekDayOperator() throws RecognitionException {
        EsperEPL2GrammarParser.weekDayOperator_return retval = new EsperEPL2GrammarParser.weekDayOperator_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token WEEKDAY538=null;
        EsperEPL2GrammarParser.number_return number536 = null;

        EsperEPL2GrammarParser.substitution_return substitution537 = null;


        CommonTree i_tree=null;
        CommonTree WEEKDAY538_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_WEEKDAY=new RewriteRuleTokenStream(adaptor,"token WEEKDAY");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            // EsperEPL2Grammar.g:1291:2: ( ( number | i= IDENT | substitution ) WEEKDAY -> {i!= null}? ^( WEEKDAY_OPERATOR ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( WEEKDAY_OPERATOR ( number )? ( substitution )? ) )
            // EsperEPL2Grammar.g:1291:4: ( number | i= IDENT | substitution ) WEEKDAY
            {
            // EsperEPL2Grammar.g:1291:4: ( number | i= IDENT | substitution )
            int alt198=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt198=1;
                }
                break;
            case IDENT:
                {
                alt198=2;
                }
                break;
            case QUESTION:
                {
                alt198=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 198, 0, input);

                throw nvae;
            }

            switch (alt198) {
                case 1 :
                    // EsperEPL2Grammar.g:1291:5: number
                    {
                    pushFollow(FOLLOW_number_in_weekDayOperator8582);
                    number536=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number536.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1291:12: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_weekDayOperator8586); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1291:20: substitution
                    {
                    pushFollow(FOLLOW_substitution_in_weekDayOperator8588);
                    substitution537=substitution();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution537.getTree());

                    }
                    break;

            }

            WEEKDAY538=(Token)match(input,WEEKDAY,FOLLOW_WEEKDAY_in_weekDayOperator8591); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_WEEKDAY.add(WEEKDAY538);



            // AST REWRITE
            // elements: number, substitution, i
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1292:3: -> {i!= null}? ^( WEEKDAY_OPERATOR ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
            if (i!= null) {
                // EsperEPL2Grammar.g:1292:18: ^( WEEKDAY_OPERATOR ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WEEKDAY_OPERATOR, "WEEKDAY_OPERATOR"), root_1);

                // EsperEPL2Grammar.g:1292:37: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1292:55: ^( EVENT_PROP_SIMPLE $i)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1293:3: -> ^( WEEKDAY_OPERATOR ( number )? ( substitution )? )
            {
                // EsperEPL2Grammar.g:1293:6: ^( WEEKDAY_OPERATOR ( number )? ( substitution )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WEEKDAY_OPERATOR, "WEEKDAY_OPERATOR"), root_1);

                // EsperEPL2Grammar.g:1293:25: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:1293:33: ( substitution )?
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());

                }
                stream_substitution.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "weekDayOperator"

    public static class numericParameterList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "numericParameterList"
    // EsperEPL2Grammar.g:1296:1: numericParameterList : LBRACK numericListParameter ( COMMA numericListParameter )* RBRACK -> ^( NUMERIC_PARAM_LIST ( numericListParameter )+ ) ;
    public final EsperEPL2GrammarParser.numericParameterList_return numericParameterList() throws RecognitionException {
        EsperEPL2GrammarParser.numericParameterList_return retval = new EsperEPL2GrammarParser.numericParameterList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LBRACK539=null;
        Token COMMA541=null;
        Token RBRACK543=null;
        EsperEPL2GrammarParser.numericListParameter_return numericListParameter540 = null;

        EsperEPL2GrammarParser.numericListParameter_return numericListParameter542 = null;


        CommonTree LBRACK539_tree=null;
        CommonTree COMMA541_tree=null;
        CommonTree RBRACK543_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_numericListParameter=new RewriteRuleSubtreeStream(adaptor,"rule numericListParameter");
        try {
            // EsperEPL2Grammar.g:1297:2: ( LBRACK numericListParameter ( COMMA numericListParameter )* RBRACK -> ^( NUMERIC_PARAM_LIST ( numericListParameter )+ ) )
            // EsperEPL2Grammar.g:1297:4: LBRACK numericListParameter ( COMMA numericListParameter )* RBRACK
            {
            LBRACK539=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_numericParameterList8638); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK539);

            pushFollow(FOLLOW_numericListParameter_in_numericParameterList8640);
            numericListParameter540=numericListParameter();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_numericListParameter.add(numericListParameter540.getTree());
            // EsperEPL2Grammar.g:1297:32: ( COMMA numericListParameter )*
            loop199:
            do {
                int alt199=2;
                int LA199_0 = input.LA(1);

                if ( (LA199_0==COMMA) ) {
                    alt199=1;
                }


                switch (alt199) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1297:33: COMMA numericListParameter
            	    {
            	    COMMA541=(Token)match(input,COMMA,FOLLOW_COMMA_in_numericParameterList8643); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA541);

            	    pushFollow(FOLLOW_numericListParameter_in_numericParameterList8645);
            	    numericListParameter542=numericListParameter();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_numericListParameter.add(numericListParameter542.getTree());

            	    }
            	    break;

            	default :
            	    break loop199;
                }
            } while (true);

            RBRACK543=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_numericParameterList8649); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK543);



            // AST REWRITE
            // elements: numericListParameter
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1298:3: -> ^( NUMERIC_PARAM_LIST ( numericListParameter )+ )
            {
                // EsperEPL2Grammar.g:1298:6: ^( NUMERIC_PARAM_LIST ( numericListParameter )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_LIST, "NUMERIC_PARAM_LIST"), root_1);

                if ( !(stream_numericListParameter.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_numericListParameter.hasNext() ) {
                    adaptor.addChild(root_1, stream_numericListParameter.nextTree());

                }
                stream_numericListParameter.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "numericParameterList"

    public static class numericListParameter_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "numericListParameter"
    // EsperEPL2Grammar.g:1301:1: numericListParameter : ( rangeOperand | frequencyOperand | numberconstant );
    public final EsperEPL2GrammarParser.numericListParameter_return numericListParameter() throws RecognitionException {
        EsperEPL2GrammarParser.numericListParameter_return retval = new EsperEPL2GrammarParser.numericListParameter_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.rangeOperand_return rangeOperand544 = null;

        EsperEPL2GrammarParser.frequencyOperand_return frequencyOperand545 = null;

        EsperEPL2GrammarParser.numberconstant_return numberconstant546 = null;



        try {
            // EsperEPL2Grammar.g:1302:2: ( rangeOperand | frequencyOperand | numberconstant )
            int alt200=3;
            switch ( input.LA(1) ) {
            case NUM_INT:
                {
                int LA200_1 = input.LA(2);

                if ( (LA200_1==COLON) ) {
                    alt200=1;
                }
                else if ( (LA200_1==COMMA||LA200_1==RBRACK) ) {
                    alt200=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 200, 1, input);

                    throw nvae;
                }
                }
                break;
            case NUM_LONG:
                {
                int LA200_2 = input.LA(2);

                if ( (LA200_2==COLON) ) {
                    alt200=1;
                }
                else if ( (LA200_2==COMMA||LA200_2==RBRACK) ) {
                    alt200=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 200, 2, input);

                    throw nvae;
                }
                }
                break;
            case NUM_FLOAT:
                {
                int LA200_3 = input.LA(2);

                if ( (LA200_3==COMMA||LA200_3==RBRACK) ) {
                    alt200=3;
                }
                else if ( (LA200_3==COLON) ) {
                    alt200=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 200, 3, input);

                    throw nvae;
                }
                }
                break;
            case NUM_DOUBLE:
                {
                int LA200_4 = input.LA(2);

                if ( (LA200_4==COMMA||LA200_4==RBRACK) ) {
                    alt200=3;
                }
                else if ( (LA200_4==COLON) ) {
                    alt200=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 200, 4, input);

                    throw nvae;
                }
                }
                break;
            case IDENT:
            case QUESTION:
                {
                alt200=1;
                }
                break;
            case STAR:
                {
                alt200=2;
                }
                break;
            case PLUS:
            case MINUS:
                {
                alt200=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 200, 0, input);

                throw nvae;
            }

            switch (alt200) {
                case 1 :
                    // EsperEPL2Grammar.g:1302:4: rangeOperand
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_rangeOperand_in_numericListParameter8671);
                    rangeOperand544=rangeOperand();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rangeOperand544.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1303:5: frequencyOperand
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_frequencyOperand_in_numericListParameter8677);
                    frequencyOperand545=frequencyOperand();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, frequencyOperand545.getTree());

                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1304:4: numberconstant
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_numberconstant_in_numericListParameter8682);
                    numberconstant546=numberconstant();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numberconstant546.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "numericListParameter"

    public static class eventProperty_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "eventProperty"
    // EsperEPL2Grammar.g:1307:1: eventProperty : eventPropertyAtomic ( DOT eventPropertyAtomic )* -> ^( EVENT_PROP_EXPR ( eventPropertyAtomic )+ ) ;
    public final EsperEPL2GrammarParser.eventProperty_return eventProperty() throws RecognitionException {
        EsperEPL2GrammarParser.eventProperty_return retval = new EsperEPL2GrammarParser.eventProperty_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token DOT548=null;
        EsperEPL2GrammarParser.eventPropertyAtomic_return eventPropertyAtomic547 = null;

        EsperEPL2GrammarParser.eventPropertyAtomic_return eventPropertyAtomic549 = null;


        CommonTree DOT548_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_eventPropertyAtomic=new RewriteRuleSubtreeStream(adaptor,"rule eventPropertyAtomic");
        try {
            // EsperEPL2Grammar.g:1308:2: ( eventPropertyAtomic ( DOT eventPropertyAtomic )* -> ^( EVENT_PROP_EXPR ( eventPropertyAtomic )+ ) )
            // EsperEPL2Grammar.g:1308:4: eventPropertyAtomic ( DOT eventPropertyAtomic )*
            {
            pushFollow(FOLLOW_eventPropertyAtomic_in_eventProperty8698);
            eventPropertyAtomic547=eventPropertyAtomic();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventPropertyAtomic.add(eventPropertyAtomic547.getTree());
            // EsperEPL2Grammar.g:1308:24: ( DOT eventPropertyAtomic )*
            loop201:
            do {
                int alt201=2;
                int LA201_0 = input.LA(1);

                if ( (LA201_0==DOT) ) {
                    alt201=1;
                }


                switch (alt201) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1308:25: DOT eventPropertyAtomic
            	    {
            	    DOT548=(Token)match(input,DOT,FOLLOW_DOT_in_eventProperty8701); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT548);

            	    pushFollow(FOLLOW_eventPropertyAtomic_in_eventProperty8703);
            	    eventPropertyAtomic549=eventPropertyAtomic();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_eventPropertyAtomic.add(eventPropertyAtomic549.getTree());

            	    }
            	    break;

            	default :
            	    break loop201;
                }
            } while (true);



            // AST REWRITE
            // elements: eventPropertyAtomic
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1309:3: -> ^( EVENT_PROP_EXPR ( eventPropertyAtomic )+ )
            {
                // EsperEPL2Grammar.g:1309:6: ^( EVENT_PROP_EXPR ( eventPropertyAtomic )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_1);

                if ( !(stream_eventPropertyAtomic.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_eventPropertyAtomic.hasNext() ) {
                    adaptor.addChild(root_1, stream_eventPropertyAtomic.nextTree());

                }
                stream_eventPropertyAtomic.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "eventProperty"

    public static class eventPropertyAtomic_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "eventPropertyAtomic"
    // EsperEPL2Grammar.g:1312:1: eventPropertyAtomic : eventPropertyIdent (lb= LBRACK ni= NUM_INT RBRACK (q= QUESTION )? | lp= LPAREN (s= STRING_LITERAL | s= QUOTED_STRING_LITERAL ) RPAREN (q= QUESTION )? | q1= QUESTION )? -> {lb!= null && $q == null}? ^( EVENT_PROP_INDEXED eventPropertyIdent $ni) -> {lb!= null && $q != null}? ^( EVENT_PROP_DYNAMIC_INDEXED eventPropertyIdent $ni) -> {lp!= null && $q == null}? ^( EVENT_PROP_MAPPED eventPropertyIdent $s) -> {lp!= null && $q != null}? ^( EVENT_PROP_DYNAMIC_MAPPED eventPropertyIdent $s) -> {q1 != null}? ^( EVENT_PROP_DYNAMIC_SIMPLE eventPropertyIdent ) -> ^( EVENT_PROP_SIMPLE eventPropertyIdent ) ;
    public final EsperEPL2GrammarParser.eventPropertyAtomic_return eventPropertyAtomic() throws RecognitionException {
        EsperEPL2GrammarParser.eventPropertyAtomic_return retval = new EsperEPL2GrammarParser.eventPropertyAtomic_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token lb=null;
        Token ni=null;
        Token q=null;
        Token lp=null;
        Token s=null;
        Token q1=null;
        Token RBRACK551=null;
        Token RPAREN552=null;
        EsperEPL2GrammarParser.eventPropertyIdent_return eventPropertyIdent550 = null;


        CommonTree lb_tree=null;
        CommonTree ni_tree=null;
        CommonTree q_tree=null;
        CommonTree lp_tree=null;
        CommonTree s_tree=null;
        CommonTree q1_tree=null;
        CommonTree RBRACK551_tree=null;
        CommonTree RPAREN552_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token STRING_LITERAL");
        RewriteRuleTokenStream stream_QUESTION=new RewriteRuleTokenStream(adaptor,"token QUESTION");
        RewriteRuleTokenStream stream_QUOTED_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token QUOTED_STRING_LITERAL");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_NUM_INT=new RewriteRuleTokenStream(adaptor,"token NUM_INT");
        RewriteRuleSubtreeStream stream_eventPropertyIdent=new RewriteRuleSubtreeStream(adaptor,"rule eventPropertyIdent");
        try {
            // EsperEPL2Grammar.g:1313:2: ( eventPropertyIdent (lb= LBRACK ni= NUM_INT RBRACK (q= QUESTION )? | lp= LPAREN (s= STRING_LITERAL | s= QUOTED_STRING_LITERAL ) RPAREN (q= QUESTION )? | q1= QUESTION )? -> {lb!= null && $q == null}? ^( EVENT_PROP_INDEXED eventPropertyIdent $ni) -> {lb!= null && $q != null}? ^( EVENT_PROP_DYNAMIC_INDEXED eventPropertyIdent $ni) -> {lp!= null && $q == null}? ^( EVENT_PROP_MAPPED eventPropertyIdent $s) -> {lp!= null && $q != null}? ^( EVENT_PROP_DYNAMIC_MAPPED eventPropertyIdent $s) -> {q1 != null}? ^( EVENT_PROP_DYNAMIC_SIMPLE eventPropertyIdent ) -> ^( EVENT_PROP_SIMPLE eventPropertyIdent ) )
            // EsperEPL2Grammar.g:1313:4: eventPropertyIdent (lb= LBRACK ni= NUM_INT RBRACK (q= QUESTION )? | lp= LPAREN (s= STRING_LITERAL | s= QUOTED_STRING_LITERAL ) RPAREN (q= QUESTION )? | q1= QUESTION )?
            {
            pushFollow(FOLLOW_eventPropertyIdent_in_eventPropertyAtomic8729);
            eventPropertyIdent550=eventPropertyIdent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventPropertyIdent.add(eventPropertyIdent550.getTree());
            // EsperEPL2Grammar.g:1313:23: (lb= LBRACK ni= NUM_INT RBRACK (q= QUESTION )? | lp= LPAREN (s= STRING_LITERAL | s= QUOTED_STRING_LITERAL ) RPAREN (q= QUESTION )? | q1= QUESTION )?
            int alt205=4;
            switch ( input.LA(1) ) {
                case LBRACK:
                    {
                    alt205=1;
                    }
                    break;
                case LPAREN:
                    {
                    alt205=2;
                    }
                    break;
                case QUESTION:
                    {
                    alt205=3;
                    }
                    break;
            }

            switch (alt205) {
                case 1 :
                    // EsperEPL2Grammar.g:1314:4: lb= LBRACK ni= NUM_INT RBRACK (q= QUESTION )?
                    {
                    lb=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_eventPropertyAtomic8738); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LBRACK.add(lb);

                    ni=(Token)match(input,NUM_INT,FOLLOW_NUM_INT_in_eventPropertyAtomic8742); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_INT.add(ni);

                    RBRACK551=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_eventPropertyAtomic8744); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK551);

                    // EsperEPL2Grammar.g:1314:32: (q= QUESTION )?
                    int alt202=2;
                    int LA202_0 = input.LA(1);

                    if ( (LA202_0==QUESTION) ) {
                        alt202=1;
                    }
                    switch (alt202) {
                        case 1 :
                            // EsperEPL2Grammar.g:1314:33: q= QUESTION
                            {
                            q=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_eventPropertyAtomic8749); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUESTION.add(q);


                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1316:4: lp= LPAREN (s= STRING_LITERAL | s= QUOTED_STRING_LITERAL ) RPAREN (q= QUESTION )?
                    {
                    lp=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_eventPropertyAtomic8763); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(lp);

                    // EsperEPL2Grammar.g:1316:14: (s= STRING_LITERAL | s= QUOTED_STRING_LITERAL )
                    int alt203=2;
                    int LA203_0 = input.LA(1);

                    if ( (LA203_0==STRING_LITERAL) ) {
                        alt203=1;
                    }
                    else if ( (LA203_0==QUOTED_STRING_LITERAL) ) {
                        alt203=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 203, 0, input);

                        throw nvae;
                    }
                    switch (alt203) {
                        case 1 :
                            // EsperEPL2Grammar.g:1316:15: s= STRING_LITERAL
                            {
                            s=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_eventPropertyAtomic8768); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_STRING_LITERAL.add(s);


                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1316:34: s= QUOTED_STRING_LITERAL
                            {
                            s=(Token)match(input,QUOTED_STRING_LITERAL,FOLLOW_QUOTED_STRING_LITERAL_in_eventPropertyAtomic8774); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUOTED_STRING_LITERAL.add(s);


                            }
                            break;

                    }

                    RPAREN552=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_eventPropertyAtomic8777); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN552);

                    // EsperEPL2Grammar.g:1316:66: (q= QUESTION )?
                    int alt204=2;
                    int LA204_0 = input.LA(1);

                    if ( (LA204_0==QUESTION) ) {
                        alt204=1;
                    }
                    switch (alt204) {
                        case 1 :
                            // EsperEPL2Grammar.g:1316:67: q= QUESTION
                            {
                            q=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_eventPropertyAtomic8782); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUESTION.add(q);


                            }
                            break;

                    }


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1318:4: q1= QUESTION
                    {
                    q1=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_eventPropertyAtomic8796); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUESTION.add(q1);


                    }
                    break;

            }



            // AST REWRITE
            // elements: eventPropertyIdent, eventPropertyIdent, ni, s, s, eventPropertyIdent, eventPropertyIdent, eventPropertyIdent, eventPropertyIdent, ni
            // token labels: s, ni
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_ni=new RewriteRuleTokenStream(adaptor,"token ni",ni);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1321:3: -> {lb!= null && $q == null}? ^( EVENT_PROP_INDEXED eventPropertyIdent $ni)
            if (lb!= null && q == null) {
                // EsperEPL2Grammar.g:1321:33: ^( EVENT_PROP_INDEXED eventPropertyIdent $ni)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_INDEXED, "EVENT_PROP_INDEXED"), root_1);

                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_1, stream_ni.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1322:3: -> {lb!= null && $q != null}? ^( EVENT_PROP_DYNAMIC_INDEXED eventPropertyIdent $ni)
            if (lb!= null && q != null) {
                // EsperEPL2Grammar.g:1322:33: ^( EVENT_PROP_DYNAMIC_INDEXED eventPropertyIdent $ni)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_DYNAMIC_INDEXED, "EVENT_PROP_DYNAMIC_INDEXED"), root_1);

                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_1, stream_ni.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1323:3: -> {lp!= null && $q == null}? ^( EVENT_PROP_MAPPED eventPropertyIdent $s)
            if (lp!= null && q == null) {
                // EsperEPL2Grammar.g:1323:33: ^( EVENT_PROP_MAPPED eventPropertyIdent $s)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_MAPPED, "EVENT_PROP_MAPPED"), root_1);

                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_1, stream_s.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1324:3: -> {lp!= null && $q != null}? ^( EVENT_PROP_DYNAMIC_MAPPED eventPropertyIdent $s)
            if (lp!= null && q != null) {
                // EsperEPL2Grammar.g:1324:33: ^( EVENT_PROP_DYNAMIC_MAPPED eventPropertyIdent $s)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_DYNAMIC_MAPPED, "EVENT_PROP_DYNAMIC_MAPPED"), root_1);

                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_1, stream_s.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1325:3: -> {q1 != null}? ^( EVENT_PROP_DYNAMIC_SIMPLE eventPropertyIdent )
            if (q1 != null) {
                // EsperEPL2Grammar.g:1325:27: ^( EVENT_PROP_DYNAMIC_SIMPLE eventPropertyIdent )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_DYNAMIC_SIMPLE, "EVENT_PROP_DYNAMIC_SIMPLE"), root_1);

                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1326:3: -> ^( EVENT_PROP_SIMPLE eventPropertyIdent )
            {
                // EsperEPL2Grammar.g:1326:6: ^( EVENT_PROP_SIMPLE eventPropertyIdent )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_1);

                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "eventPropertyAtomic"

    public static class eventPropertyIdent_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "eventPropertyIdent"
    // EsperEPL2Grammar.g:1329:1: eventPropertyIdent : ipi= keywordAllowedIdent ( ESCAPECHAR DOT (ipi2= keywordAllowedIdent )? )* -> ^( IDENT[identifier] ) ;
    public final EsperEPL2GrammarParser.eventPropertyIdent_return eventPropertyIdent() throws RecognitionException {
        EsperEPL2GrammarParser.eventPropertyIdent_return retval = new EsperEPL2GrammarParser.eventPropertyIdent_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token ESCAPECHAR553=null;
        Token DOT554=null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return ipi = null;

        EsperEPL2GrammarParser.keywordAllowedIdent_return ipi2 = null;


        CommonTree ESCAPECHAR553_tree=null;
        CommonTree DOT554_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_ESCAPECHAR=new RewriteRuleTokenStream(adaptor,"token ESCAPECHAR");
        RewriteRuleSubtreeStream stream_keywordAllowedIdent=new RewriteRuleSubtreeStream(adaptor,"rule keywordAllowedIdent");
         String identifier = ""; 
        try {
            // EsperEPL2Grammar.g:1331:2: (ipi= keywordAllowedIdent ( ESCAPECHAR DOT (ipi2= keywordAllowedIdent )? )* -> ^( IDENT[identifier] ) )
            // EsperEPL2Grammar.g:1331:4: ipi= keywordAllowedIdent ( ESCAPECHAR DOT (ipi2= keywordAllowedIdent )? )*
            {
            pushFollow(FOLLOW_keywordAllowedIdent_in_eventPropertyIdent8919);
            ipi=keywordAllowedIdent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(ipi.getTree());
            if ( state.backtracking==0 ) {
               identifier = ipi.result; 
            }
            // EsperEPL2Grammar.g:1332:3: ( ESCAPECHAR DOT (ipi2= keywordAllowedIdent )? )*
            loop207:
            do {
                int alt207=2;
                int LA207_0 = input.LA(1);

                if ( (LA207_0==ESCAPECHAR) ) {
                    alt207=1;
                }


                switch (alt207) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1333:5: ESCAPECHAR DOT (ipi2= keywordAllowedIdent )?
            	    {
            	    ESCAPECHAR553=(Token)match(input,ESCAPECHAR,FOLLOW_ESCAPECHAR_in_eventPropertyIdent8931); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_ESCAPECHAR.add(ESCAPECHAR553);

            	    DOT554=(Token)match(input,DOT,FOLLOW_DOT_in_eventPropertyIdent8933); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT554);

            	    // EsperEPL2Grammar.g:1333:24: (ipi2= keywordAllowedIdent )?
            	    int alt206=2;
            	    alt206 = dfa206.predict(input);
            	    switch (alt206) {
            	        case 1 :
            	            // EsperEPL2Grammar.g:1333:24: ipi2= keywordAllowedIdent
            	            {
            	            pushFollow(FOLLOW_keywordAllowedIdent_in_eventPropertyIdent8937);
            	            ipi2=keywordAllowedIdent();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(ipi2.getTree());

            	            }
            	            break;

            	    }

            	    if ( state.backtracking==0 ) {
            	       identifier += "."; if (ipi2 != null) identifier += ipi2.result; 
            	    }

            	    }
            	    break;

            	default :
            	    break loop207;
                }
            } while (true);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1335:7: -> ^( IDENT[identifier] )
            {
                // EsperEPL2Grammar.g:1335:10: ^( IDENT[identifier] )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IDENT, identifier), root_1);

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "eventPropertyIdent"

    public static class keywordAllowedIdent_return extends ParserRuleReturnScope {
        public String result;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keywordAllowedIdent"
    // EsperEPL2Grammar.g:1338:1: keywordAllowedIdent returns [String result] : (i1= IDENT | i2= TICKED_STRING_LITERAL | AT | COUNT | ESCAPE | EVERY_EXPR | SUM | AVG | MAX | MIN | COALESCE | MEDIAN | STDDEV | AVEDEV | EVENTS | FIRST | LAST | UNIDIRECTIONAL | RETAINUNION | RETAININTERSECTION | UNTIL | PATTERN | SQL | METADATASQL | PREVIOUS | PRIOR | WEEKDAY | LW | INSTANCEOF | CAST | SNAPSHOT | VARIABLE | WINDOW | LEFT | RIGHT | OUTER | FULL | JOIN );
    public final EsperEPL2GrammarParser.keywordAllowedIdent_return keywordAllowedIdent() throws RecognitionException {
        EsperEPL2GrammarParser.keywordAllowedIdent_return retval = new EsperEPL2GrammarParser.keywordAllowedIdent_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i1=null;
        Token i2=null;
        Token AT555=null;
        Token COUNT556=null;
        Token ESCAPE557=null;
        Token EVERY_EXPR558=null;
        Token SUM559=null;
        Token AVG560=null;
        Token MAX561=null;
        Token MIN562=null;
        Token COALESCE563=null;
        Token MEDIAN564=null;
        Token STDDEV565=null;
        Token AVEDEV566=null;
        Token EVENTS567=null;
        Token FIRST568=null;
        Token LAST569=null;
        Token UNIDIRECTIONAL570=null;
        Token RETAINUNION571=null;
        Token RETAININTERSECTION572=null;
        Token UNTIL573=null;
        Token PATTERN574=null;
        Token SQL575=null;
        Token METADATASQL576=null;
        Token PREVIOUS577=null;
        Token PRIOR578=null;
        Token WEEKDAY579=null;
        Token LW580=null;
        Token INSTANCEOF581=null;
        Token CAST582=null;
        Token SNAPSHOT583=null;
        Token VARIABLE584=null;
        Token WINDOW585=null;
        Token LEFT586=null;
        Token RIGHT587=null;
        Token OUTER588=null;
        Token FULL589=null;
        Token JOIN590=null;

        CommonTree i1_tree=null;
        CommonTree i2_tree=null;
        CommonTree AT555_tree=null;
        CommonTree COUNT556_tree=null;
        CommonTree ESCAPE557_tree=null;
        CommonTree EVERY_EXPR558_tree=null;
        CommonTree SUM559_tree=null;
        CommonTree AVG560_tree=null;
        CommonTree MAX561_tree=null;
        CommonTree MIN562_tree=null;
        CommonTree COALESCE563_tree=null;
        CommonTree MEDIAN564_tree=null;
        CommonTree STDDEV565_tree=null;
        CommonTree AVEDEV566_tree=null;
        CommonTree EVENTS567_tree=null;
        CommonTree FIRST568_tree=null;
        CommonTree LAST569_tree=null;
        CommonTree UNIDIRECTIONAL570_tree=null;
        CommonTree RETAINUNION571_tree=null;
        CommonTree RETAININTERSECTION572_tree=null;
        CommonTree UNTIL573_tree=null;
        CommonTree PATTERN574_tree=null;
        CommonTree SQL575_tree=null;
        CommonTree METADATASQL576_tree=null;
        CommonTree PREVIOUS577_tree=null;
        CommonTree PRIOR578_tree=null;
        CommonTree WEEKDAY579_tree=null;
        CommonTree LW580_tree=null;
        CommonTree INSTANCEOF581_tree=null;
        CommonTree CAST582_tree=null;
        CommonTree SNAPSHOT583_tree=null;
        CommonTree VARIABLE584_tree=null;
        CommonTree WINDOW585_tree=null;
        CommonTree LEFT586_tree=null;
        CommonTree RIGHT587_tree=null;
        CommonTree OUTER588_tree=null;
        CommonTree FULL589_tree=null;
        CommonTree JOIN590_tree=null;

        try {
            // EsperEPL2Grammar.g:1339:2: (i1= IDENT | i2= TICKED_STRING_LITERAL | AT | COUNT | ESCAPE | EVERY_EXPR | SUM | AVG | MAX | MIN | COALESCE | MEDIAN | STDDEV | AVEDEV | EVENTS | FIRST | LAST | UNIDIRECTIONAL | RETAINUNION | RETAININTERSECTION | UNTIL | PATTERN | SQL | METADATASQL | PREVIOUS | PRIOR | WEEKDAY | LW | INSTANCEOF | CAST | SNAPSHOT | VARIABLE | WINDOW | LEFT | RIGHT | OUTER | FULL | JOIN )
            int alt208=38;
            switch ( input.LA(1) ) {
            case IDENT:
                {
                alt208=1;
                }
                break;
            case TICKED_STRING_LITERAL:
                {
                alt208=2;
                }
                break;
            case AT:
                {
                alt208=3;
                }
                break;
            case COUNT:
                {
                alt208=4;
                }
                break;
            case ESCAPE:
                {
                alt208=5;
                }
                break;
            case EVERY_EXPR:
                {
                alt208=6;
                }
                break;
            case SUM:
                {
                alt208=7;
                }
                break;
            case AVG:
                {
                alt208=8;
                }
                break;
            case MAX:
                {
                alt208=9;
                }
                break;
            case MIN:
                {
                alt208=10;
                }
                break;
            case COALESCE:
                {
                alt208=11;
                }
                break;
            case MEDIAN:
                {
                alt208=12;
                }
                break;
            case STDDEV:
                {
                alt208=13;
                }
                break;
            case AVEDEV:
                {
                alt208=14;
                }
                break;
            case EVENTS:
                {
                alt208=15;
                }
                break;
            case FIRST:
                {
                alt208=16;
                }
                break;
            case LAST:
                {
                alt208=17;
                }
                break;
            case UNIDIRECTIONAL:
                {
                alt208=18;
                }
                break;
            case RETAINUNION:
                {
                alt208=19;
                }
                break;
            case RETAININTERSECTION:
                {
                alt208=20;
                }
                break;
            case UNTIL:
                {
                alt208=21;
                }
                break;
            case PATTERN:
                {
                alt208=22;
                }
                break;
            case SQL:
                {
                alt208=23;
                }
                break;
            case METADATASQL:
                {
                alt208=24;
                }
                break;
            case PREVIOUS:
                {
                alt208=25;
                }
                break;
            case PRIOR:
                {
                alt208=26;
                }
                break;
            case WEEKDAY:
                {
                alt208=27;
                }
                break;
            case LW:
                {
                alt208=28;
                }
                break;
            case INSTANCEOF:
                {
                alt208=29;
                }
                break;
            case CAST:
                {
                alt208=30;
                }
                break;
            case SNAPSHOT:
                {
                alt208=31;
                }
                break;
            case VARIABLE:
                {
                alt208=32;
                }
                break;
            case WINDOW:
                {
                alt208=33;
                }
                break;
            case LEFT:
                {
                alt208=34;
                }
                break;
            case RIGHT:
                {
                alt208=35;
                }
                break;
            case OUTER:
                {
                alt208=36;
                }
                break;
            case FULL:
                {
                alt208=37;
                }
                break;
            case JOIN:
                {
                alt208=38;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 208, 0, input);

                throw nvae;
            }

            switch (alt208) {
                case 1 :
                    // EsperEPL2Grammar.g:1339:4: i1= IDENT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    i1=(Token)match(input,IDENT,FOLLOW_IDENT_in_keywordAllowedIdent8976); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    i1_tree = (CommonTree)adaptor.create(i1);
                    adaptor.addChild(root_0, i1_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = i1.getText(); 
                    }

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1340:4: i2= TICKED_STRING_LITERAL
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    i2=(Token)match(input,TICKED_STRING_LITERAL,FOLLOW_TICKED_STRING_LITERAL_in_keywordAllowedIdent8985); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    i2_tree = (CommonTree)adaptor.create(i2);
                    adaptor.addChild(root_0, i2_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = removeTicks(i2.getText()); 
                    }

                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1341:4: AT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    AT555=(Token)match(input,AT,FOLLOW_AT_in_keywordAllowedIdent8992); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AT555_tree = (CommonTree)adaptor.create(AT555);
                    adaptor.addChild(root_0, AT555_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "at"; 
                    }

                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:1342:4: COUNT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    COUNT556=(Token)match(input,COUNT,FOLLOW_COUNT_in_keywordAllowedIdent8999); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COUNT556_tree = (CommonTree)adaptor.create(COUNT556);
                    adaptor.addChild(root_0, COUNT556_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "count"; 
                    }

                    }
                    break;
                case 5 :
                    // EsperEPL2Grammar.g:1343:4: ESCAPE
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    ESCAPE557=(Token)match(input,ESCAPE,FOLLOW_ESCAPE_in_keywordAllowedIdent9006); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ESCAPE557_tree = (CommonTree)adaptor.create(ESCAPE557);
                    adaptor.addChild(root_0, ESCAPE557_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "escape"; 
                    }

                    }
                    break;
                case 6 :
                    // EsperEPL2Grammar.g:1344:8: EVERY_EXPR
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    EVERY_EXPR558=(Token)match(input,EVERY_EXPR,FOLLOW_EVERY_EXPR_in_keywordAllowedIdent9017); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EVERY_EXPR558_tree = (CommonTree)adaptor.create(EVERY_EXPR558);
                    adaptor.addChild(root_0, EVERY_EXPR558_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "every"; 
                    }

                    }
                    break;
                case 7 :
                    // EsperEPL2Grammar.g:1345:4: SUM
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    SUM559=(Token)match(input,SUM,FOLLOW_SUM_in_keywordAllowedIdent9024); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SUM559_tree = (CommonTree)adaptor.create(SUM559);
                    adaptor.addChild(root_0, SUM559_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "sum"; 
                    }

                    }
                    break;
                case 8 :
                    // EsperEPL2Grammar.g:1346:4: AVG
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    AVG560=(Token)match(input,AVG,FOLLOW_AVG_in_keywordAllowedIdent9031); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AVG560_tree = (CommonTree)adaptor.create(AVG560);
                    adaptor.addChild(root_0, AVG560_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "avg"; 
                    }

                    }
                    break;
                case 9 :
                    // EsperEPL2Grammar.g:1347:4: MAX
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    MAX561=(Token)match(input,MAX,FOLLOW_MAX_in_keywordAllowedIdent9038); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MAX561_tree = (CommonTree)adaptor.create(MAX561);
                    adaptor.addChild(root_0, MAX561_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "max"; 
                    }

                    }
                    break;
                case 10 :
                    // EsperEPL2Grammar.g:1348:4: MIN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    MIN562=(Token)match(input,MIN,FOLLOW_MIN_in_keywordAllowedIdent9045); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MIN562_tree = (CommonTree)adaptor.create(MIN562);
                    adaptor.addChild(root_0, MIN562_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "min"; 
                    }

                    }
                    break;
                case 11 :
                    // EsperEPL2Grammar.g:1349:4: COALESCE
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    COALESCE563=(Token)match(input,COALESCE,FOLLOW_COALESCE_in_keywordAllowedIdent9052); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COALESCE563_tree = (CommonTree)adaptor.create(COALESCE563);
                    adaptor.addChild(root_0, COALESCE563_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "coalesce"; 
                    }

                    }
                    break;
                case 12 :
                    // EsperEPL2Grammar.g:1350:4: MEDIAN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    MEDIAN564=(Token)match(input,MEDIAN,FOLLOW_MEDIAN_in_keywordAllowedIdent9059); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MEDIAN564_tree = (CommonTree)adaptor.create(MEDIAN564);
                    adaptor.addChild(root_0, MEDIAN564_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "median"; 
                    }

                    }
                    break;
                case 13 :
                    // EsperEPL2Grammar.g:1351:4: STDDEV
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    STDDEV565=(Token)match(input,STDDEV,FOLLOW_STDDEV_in_keywordAllowedIdent9066); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STDDEV565_tree = (CommonTree)adaptor.create(STDDEV565);
                    adaptor.addChild(root_0, STDDEV565_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "stddev"; 
                    }

                    }
                    break;
                case 14 :
                    // EsperEPL2Grammar.g:1352:4: AVEDEV
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    AVEDEV566=(Token)match(input,AVEDEV,FOLLOW_AVEDEV_in_keywordAllowedIdent9073); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AVEDEV566_tree = (CommonTree)adaptor.create(AVEDEV566);
                    adaptor.addChild(root_0, AVEDEV566_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "avedev"; 
                    }

                    }
                    break;
                case 15 :
                    // EsperEPL2Grammar.g:1353:4: EVENTS
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    EVENTS567=(Token)match(input,EVENTS,FOLLOW_EVENTS_in_keywordAllowedIdent9080); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EVENTS567_tree = (CommonTree)adaptor.create(EVENTS567);
                    adaptor.addChild(root_0, EVENTS567_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "events"; 
                    }

                    }
                    break;
                case 16 :
                    // EsperEPL2Grammar.g:1354:4: FIRST
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    FIRST568=(Token)match(input,FIRST,FOLLOW_FIRST_in_keywordAllowedIdent9087); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FIRST568_tree = (CommonTree)adaptor.create(FIRST568);
                    adaptor.addChild(root_0, FIRST568_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "first"; 
                    }

                    }
                    break;
                case 17 :
                    // EsperEPL2Grammar.g:1355:4: LAST
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    LAST569=(Token)match(input,LAST,FOLLOW_LAST_in_keywordAllowedIdent9094); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LAST569_tree = (CommonTree)adaptor.create(LAST569);
                    adaptor.addChild(root_0, LAST569_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "last"; 
                    }

                    }
                    break;
                case 18 :
                    // EsperEPL2Grammar.g:1356:4: UNIDIRECTIONAL
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    UNIDIRECTIONAL570=(Token)match(input,UNIDIRECTIONAL,FOLLOW_UNIDIRECTIONAL_in_keywordAllowedIdent9101); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    UNIDIRECTIONAL570_tree = (CommonTree)adaptor.create(UNIDIRECTIONAL570);
                    adaptor.addChild(root_0, UNIDIRECTIONAL570_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "unidirectional"; 
                    }

                    }
                    break;
                case 19 :
                    // EsperEPL2Grammar.g:1357:4: RETAINUNION
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    RETAINUNION571=(Token)match(input,RETAINUNION,FOLLOW_RETAINUNION_in_keywordAllowedIdent9108); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RETAINUNION571_tree = (CommonTree)adaptor.create(RETAINUNION571);
                    adaptor.addChild(root_0, RETAINUNION571_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "retain-union"; 
                    }

                    }
                    break;
                case 20 :
                    // EsperEPL2Grammar.g:1358:4: RETAININTERSECTION
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    RETAININTERSECTION572=(Token)match(input,RETAININTERSECTION,FOLLOW_RETAININTERSECTION_in_keywordAllowedIdent9115); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RETAININTERSECTION572_tree = (CommonTree)adaptor.create(RETAININTERSECTION572);
                    adaptor.addChild(root_0, RETAININTERSECTION572_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "retain-intersection"; 
                    }

                    }
                    break;
                case 21 :
                    // EsperEPL2Grammar.g:1359:4: UNTIL
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    UNTIL573=(Token)match(input,UNTIL,FOLLOW_UNTIL_in_keywordAllowedIdent9122); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    UNTIL573_tree = (CommonTree)adaptor.create(UNTIL573);
                    adaptor.addChild(root_0, UNTIL573_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "until"; 
                    }

                    }
                    break;
                case 22 :
                    // EsperEPL2Grammar.g:1360:4: PATTERN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    PATTERN574=(Token)match(input,PATTERN,FOLLOW_PATTERN_in_keywordAllowedIdent9129); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PATTERN574_tree = (CommonTree)adaptor.create(PATTERN574);
                    adaptor.addChild(root_0, PATTERN574_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "pattern"; 
                    }

                    }
                    break;
                case 23 :
                    // EsperEPL2Grammar.g:1361:4: SQL
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    SQL575=(Token)match(input,SQL,FOLLOW_SQL_in_keywordAllowedIdent9136); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SQL575_tree = (CommonTree)adaptor.create(SQL575);
                    adaptor.addChild(root_0, SQL575_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "sql"; 
                    }

                    }
                    break;
                case 24 :
                    // EsperEPL2Grammar.g:1362:4: METADATASQL
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    METADATASQL576=(Token)match(input,METADATASQL,FOLLOW_METADATASQL_in_keywordAllowedIdent9143); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    METADATASQL576_tree = (CommonTree)adaptor.create(METADATASQL576);
                    adaptor.addChild(root_0, METADATASQL576_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "metadatasql"; 
                    }

                    }
                    break;
                case 25 :
                    // EsperEPL2Grammar.g:1363:4: PREVIOUS
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    PREVIOUS577=(Token)match(input,PREVIOUS,FOLLOW_PREVIOUS_in_keywordAllowedIdent9150); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PREVIOUS577_tree = (CommonTree)adaptor.create(PREVIOUS577);
                    adaptor.addChild(root_0, PREVIOUS577_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "prev"; 
                    }

                    }
                    break;
                case 26 :
                    // EsperEPL2Grammar.g:1364:4: PRIOR
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    PRIOR578=(Token)match(input,PRIOR,FOLLOW_PRIOR_in_keywordAllowedIdent9157); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PRIOR578_tree = (CommonTree)adaptor.create(PRIOR578);
                    adaptor.addChild(root_0, PRIOR578_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "prior"; 
                    }

                    }
                    break;
                case 27 :
                    // EsperEPL2Grammar.g:1365:4: WEEKDAY
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    WEEKDAY579=(Token)match(input,WEEKDAY,FOLLOW_WEEKDAY_in_keywordAllowedIdent9164); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    WEEKDAY579_tree = (CommonTree)adaptor.create(WEEKDAY579);
                    adaptor.addChild(root_0, WEEKDAY579_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "weekday"; 
                    }

                    }
                    break;
                case 28 :
                    // EsperEPL2Grammar.g:1366:4: LW
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    LW580=(Token)match(input,LW,FOLLOW_LW_in_keywordAllowedIdent9171); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LW580_tree = (CommonTree)adaptor.create(LW580);
                    adaptor.addChild(root_0, LW580_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "lastweekday"; 
                    }

                    }
                    break;
                case 29 :
                    // EsperEPL2Grammar.g:1367:4: INSTANCEOF
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    INSTANCEOF581=(Token)match(input,INSTANCEOF,FOLLOW_INSTANCEOF_in_keywordAllowedIdent9178); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INSTANCEOF581_tree = (CommonTree)adaptor.create(INSTANCEOF581);
                    adaptor.addChild(root_0, INSTANCEOF581_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "instanceof"; 
                    }

                    }
                    break;
                case 30 :
                    // EsperEPL2Grammar.g:1368:4: CAST
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    CAST582=(Token)match(input,CAST,FOLLOW_CAST_in_keywordAllowedIdent9185); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CAST582_tree = (CommonTree)adaptor.create(CAST582);
                    adaptor.addChild(root_0, CAST582_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "cast"; 
                    }

                    }
                    break;
                case 31 :
                    // EsperEPL2Grammar.g:1369:4: SNAPSHOT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    SNAPSHOT583=(Token)match(input,SNAPSHOT,FOLLOW_SNAPSHOT_in_keywordAllowedIdent9192); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SNAPSHOT583_tree = (CommonTree)adaptor.create(SNAPSHOT583);
                    adaptor.addChild(root_0, SNAPSHOT583_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "snapshot"; 
                    }

                    }
                    break;
                case 32 :
                    // EsperEPL2Grammar.g:1370:4: VARIABLE
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    VARIABLE584=(Token)match(input,VARIABLE,FOLLOW_VARIABLE_in_keywordAllowedIdent9199); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    VARIABLE584_tree = (CommonTree)adaptor.create(VARIABLE584);
                    adaptor.addChild(root_0, VARIABLE584_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "variable"; 
                    }

                    }
                    break;
                case 33 :
                    // EsperEPL2Grammar.g:1371:4: WINDOW
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    WINDOW585=(Token)match(input,WINDOW,FOLLOW_WINDOW_in_keywordAllowedIdent9208); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    WINDOW585_tree = (CommonTree)adaptor.create(WINDOW585);
                    adaptor.addChild(root_0, WINDOW585_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "window"; 
                    }

                    }
                    break;
                case 34 :
                    // EsperEPL2Grammar.g:1372:4: LEFT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    LEFT586=(Token)match(input,LEFT,FOLLOW_LEFT_in_keywordAllowedIdent9215); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LEFT586_tree = (CommonTree)adaptor.create(LEFT586);
                    adaptor.addChild(root_0, LEFT586_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "left"; 
                    }

                    }
                    break;
                case 35 :
                    // EsperEPL2Grammar.g:1373:4: RIGHT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    RIGHT587=(Token)match(input,RIGHT,FOLLOW_RIGHT_in_keywordAllowedIdent9222); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RIGHT587_tree = (CommonTree)adaptor.create(RIGHT587);
                    adaptor.addChild(root_0, RIGHT587_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "right"; 
                    }

                    }
                    break;
                case 36 :
                    // EsperEPL2Grammar.g:1374:4: OUTER
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    OUTER588=(Token)match(input,OUTER,FOLLOW_OUTER_in_keywordAllowedIdent9229); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    OUTER588_tree = (CommonTree)adaptor.create(OUTER588);
                    adaptor.addChild(root_0, OUTER588_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "outer"; 
                    }

                    }
                    break;
                case 37 :
                    // EsperEPL2Grammar.g:1375:4: FULL
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    FULL589=(Token)match(input,FULL,FOLLOW_FULL_in_keywordAllowedIdent9236); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FULL589_tree = (CommonTree)adaptor.create(FULL589);
                    adaptor.addChild(root_0, FULL589_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "full"; 
                    }

                    }
                    break;
                case 38 :
                    // EsperEPL2Grammar.g:1376:4: JOIN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    JOIN590=(Token)match(input,JOIN,FOLLOW_JOIN_in_keywordAllowedIdent9243); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    JOIN590_tree = (CommonTree)adaptor.create(JOIN590);
                    adaptor.addChild(root_0, JOIN590_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "join"; 
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "keywordAllowedIdent"

    public static class escapableIdent_return extends ParserRuleReturnScope {
        public String result;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "escapableIdent"
    // EsperEPL2Grammar.g:1379:1: escapableIdent returns [String result] : (i1= IDENT | i2= TICKED_STRING_LITERAL );
    public final EsperEPL2GrammarParser.escapableIdent_return escapableIdent() throws RecognitionException {
        EsperEPL2GrammarParser.escapableIdent_return retval = new EsperEPL2GrammarParser.escapableIdent_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i1=null;
        Token i2=null;

        CommonTree i1_tree=null;
        CommonTree i2_tree=null;

        try {
            // EsperEPL2Grammar.g:1380:2: (i1= IDENT | i2= TICKED_STRING_LITERAL )
            int alt209=2;
            int LA209_0 = input.LA(1);

            if ( (LA209_0==IDENT) ) {
                alt209=1;
            }
            else if ( (LA209_0==TICKED_STRING_LITERAL) ) {
                alt209=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 209, 0, input);

                throw nvae;
            }
            switch (alt209) {
                case 1 :
                    // EsperEPL2Grammar.g:1380:4: i1= IDENT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    i1=(Token)match(input,IDENT,FOLLOW_IDENT_in_escapableIdent9264); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    i1_tree = (CommonTree)adaptor.create(i1);
                    adaptor.addChild(root_0, i1_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = i1.getText(); 
                    }

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1381:4: i2= TICKED_STRING_LITERAL
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    i2=(Token)match(input,TICKED_STRING_LITERAL,FOLLOW_TICKED_STRING_LITERAL_in_escapableIdent9273); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    i2_tree = (CommonTree)adaptor.create(i2);
                    adaptor.addChild(root_0, i2_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = removeTicks(i2.getText()); 
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "escapableIdent"

    public static class timePeriod_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "timePeriod"
    // EsperEPL2Grammar.g:1384:1: timePeriod : ( dayPart ( hourPart )? ( minutePart )? ( secondPart )? ( millisecondPart )? | hourPart ( minutePart )? ( secondPart )? ( millisecondPart )? | minutePart ( secondPart )? ( millisecondPart )? | secondPart ( millisecondPart )? | millisecondPart ) -> ^( TIME_PERIOD ( dayPart )? ( hourPart )? ( minutePart )? ( secondPart )? ( millisecondPart )? ) ;
    public final EsperEPL2GrammarParser.timePeriod_return timePeriod() throws RecognitionException {
        EsperEPL2GrammarParser.timePeriod_return retval = new EsperEPL2GrammarParser.timePeriod_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.dayPart_return dayPart591 = null;

        EsperEPL2GrammarParser.hourPart_return hourPart592 = null;

        EsperEPL2GrammarParser.minutePart_return minutePart593 = null;

        EsperEPL2GrammarParser.secondPart_return secondPart594 = null;

        EsperEPL2GrammarParser.millisecondPart_return millisecondPart595 = null;

        EsperEPL2GrammarParser.hourPart_return hourPart596 = null;

        EsperEPL2GrammarParser.minutePart_return minutePart597 = null;

        EsperEPL2GrammarParser.secondPart_return secondPart598 = null;

        EsperEPL2GrammarParser.millisecondPart_return millisecondPart599 = null;

        EsperEPL2GrammarParser.minutePart_return minutePart600 = null;

        EsperEPL2GrammarParser.secondPart_return secondPart601 = null;

        EsperEPL2GrammarParser.millisecondPart_return millisecondPart602 = null;

        EsperEPL2GrammarParser.secondPart_return secondPart603 = null;

        EsperEPL2GrammarParser.millisecondPart_return millisecondPart604 = null;

        EsperEPL2GrammarParser.millisecondPart_return millisecondPart605 = null;


        RewriteRuleSubtreeStream stream_secondPart=new RewriteRuleSubtreeStream(adaptor,"rule secondPart");
        RewriteRuleSubtreeStream stream_minutePart=new RewriteRuleSubtreeStream(adaptor,"rule minutePart");
        RewriteRuleSubtreeStream stream_millisecondPart=new RewriteRuleSubtreeStream(adaptor,"rule millisecondPart");
        RewriteRuleSubtreeStream stream_dayPart=new RewriteRuleSubtreeStream(adaptor,"rule dayPart");
        RewriteRuleSubtreeStream stream_hourPart=new RewriteRuleSubtreeStream(adaptor,"rule hourPart");
        try {
            // EsperEPL2Grammar.g:1385:2: ( ( dayPart ( hourPart )? ( minutePart )? ( secondPart )? ( millisecondPart )? | hourPart ( minutePart )? ( secondPart )? ( millisecondPart )? | minutePart ( secondPart )? ( millisecondPart )? | secondPart ( millisecondPart )? | millisecondPart ) -> ^( TIME_PERIOD ( dayPart )? ( hourPart )? ( minutePart )? ( secondPart )? ( millisecondPart )? ) )
            // EsperEPL2Grammar.g:1386:2: ( dayPart ( hourPart )? ( minutePart )? ( secondPart )? ( millisecondPart )? | hourPart ( minutePart )? ( secondPart )? ( millisecondPart )? | minutePart ( secondPart )? ( millisecondPart )? | secondPart ( millisecondPart )? | millisecondPart )
            {
            // EsperEPL2Grammar.g:1386:2: ( dayPart ( hourPart )? ( minutePart )? ( secondPart )? ( millisecondPart )? | hourPart ( minutePart )? ( secondPart )? ( millisecondPart )? | minutePart ( secondPart )? ( millisecondPart )? | secondPart ( millisecondPart )? | millisecondPart )
            int alt220=5;
            switch ( input.LA(1) ) {
            case NUM_INT:
                {
                switch ( input.LA(2) ) {
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt220=4;
                    }
                    break;
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt220=3;
                    }
                    break;
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt220=5;
                    }
                    break;
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt220=2;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt220=1;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 220, 1, input);

                    throw nvae;
                }

                }
                break;
            case NUM_LONG:
                {
                switch ( input.LA(2) ) {
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt220=3;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt220=1;
                    }
                    break;
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt220=4;
                    }
                    break;
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt220=5;
                    }
                    break;
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt220=2;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 220, 2, input);

                    throw nvae;
                }

                }
                break;
            case NUM_FLOAT:
                {
                switch ( input.LA(2) ) {
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt220=1;
                    }
                    break;
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt220=4;
                    }
                    break;
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt220=5;
                    }
                    break;
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt220=3;
                    }
                    break;
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt220=2;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 220, 3, input);

                    throw nvae;
                }

                }
                break;
            case NUM_DOUBLE:
                {
                switch ( input.LA(2) ) {
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt220=2;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt220=1;
                    }
                    break;
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt220=4;
                    }
                    break;
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt220=5;
                    }
                    break;
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt220=3;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 220, 4, input);

                    throw nvae;
                }

                }
                break;
            case IDENT:
                {
                switch ( input.LA(2) ) {
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt220=4;
                    }
                    break;
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt220=2;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt220=1;
                    }
                    break;
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt220=5;
                    }
                    break;
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt220=3;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 220, 5, input);

                    throw nvae;
                }

                }
                break;
            case QUESTION:
                {
                switch ( input.LA(2) ) {
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt220=3;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt220=1;
                    }
                    break;
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt220=5;
                    }
                    break;
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt220=4;
                    }
                    break;
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt220=2;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 220, 6, input);

                    throw nvae;
                }

                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 220, 0, input);

                throw nvae;
            }

            switch (alt220) {
                case 1 :
                    // EsperEPL2Grammar.g:1387:3: dayPart ( hourPart )? ( minutePart )? ( secondPart )? ( millisecondPart )?
                    {
                    pushFollow(FOLLOW_dayPart_in_timePeriod9296);
                    dayPart591=dayPart();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_dayPart.add(dayPart591.getTree());
                    // EsperEPL2Grammar.g:1387:11: ( hourPart )?
                    int alt210=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA210_1 = input.LA(2);

                            if ( ((LA210_1>=TIMEPERIOD_HOUR && LA210_1<=TIMEPERIOD_HOURS)) ) {
                                alt210=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA210_2 = input.LA(2);

                            if ( ((LA210_2>=TIMEPERIOD_HOUR && LA210_2<=TIMEPERIOD_HOURS)) ) {
                                alt210=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA210_3 = input.LA(2);

                            if ( ((LA210_3>=TIMEPERIOD_HOUR && LA210_3<=TIMEPERIOD_HOURS)) ) {
                                alt210=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA210_4 = input.LA(2);

                            if ( ((LA210_4>=TIMEPERIOD_HOUR && LA210_4<=TIMEPERIOD_HOURS)) ) {
                                alt210=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA210_5 = input.LA(2);

                            if ( ((LA210_5>=TIMEPERIOD_HOUR && LA210_5<=TIMEPERIOD_HOURS)) ) {
                                alt210=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA210_6 = input.LA(2);

                            if ( ((LA210_6>=TIMEPERIOD_HOUR && LA210_6<=TIMEPERIOD_HOURS)) ) {
                                alt210=1;
                            }
                            }
                            break;
                    }

                    switch (alt210) {
                        case 1 :
                            // EsperEPL2Grammar.g:1387:11: hourPart
                            {
                            pushFollow(FOLLOW_hourPart_in_timePeriod9298);
                            hourPart592=hourPart();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_hourPart.add(hourPart592.getTree());

                            }
                            break;

                    }

                    // EsperEPL2Grammar.g:1387:21: ( minutePart )?
                    int alt211=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA211_1 = input.LA(2);

                            if ( (LA211_1==MIN||(LA211_1>=TIMEPERIOD_MINUTE && LA211_1<=TIMEPERIOD_MINUTES)) ) {
                                alt211=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA211_2 = input.LA(2);

                            if ( (LA211_2==MIN||(LA211_2>=TIMEPERIOD_MINUTE && LA211_2<=TIMEPERIOD_MINUTES)) ) {
                                alt211=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA211_3 = input.LA(2);

                            if ( (LA211_3==MIN||(LA211_3>=TIMEPERIOD_MINUTE && LA211_3<=TIMEPERIOD_MINUTES)) ) {
                                alt211=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA211_4 = input.LA(2);

                            if ( (LA211_4==MIN||(LA211_4>=TIMEPERIOD_MINUTE && LA211_4<=TIMEPERIOD_MINUTES)) ) {
                                alt211=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA211_5 = input.LA(2);

                            if ( (LA211_5==MIN||(LA211_5>=TIMEPERIOD_MINUTE && LA211_5<=TIMEPERIOD_MINUTES)) ) {
                                alt211=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA211_6 = input.LA(2);

                            if ( (LA211_6==MIN||(LA211_6>=TIMEPERIOD_MINUTE && LA211_6<=TIMEPERIOD_MINUTES)) ) {
                                alt211=1;
                            }
                            }
                            break;
                    }

                    switch (alt211) {
                        case 1 :
                            // EsperEPL2Grammar.g:1387:21: minutePart
                            {
                            pushFollow(FOLLOW_minutePart_in_timePeriod9301);
                            minutePart593=minutePart();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_minutePart.add(minutePart593.getTree());

                            }
                            break;

                    }

                    // EsperEPL2Grammar.g:1387:33: ( secondPart )?
                    int alt212=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA212_1 = input.LA(2);

                            if ( ((LA212_1>=TIMEPERIOD_SEC && LA212_1<=TIMEPERIOD_SECONDS)) ) {
                                alt212=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA212_2 = input.LA(2);

                            if ( ((LA212_2>=TIMEPERIOD_SEC && LA212_2<=TIMEPERIOD_SECONDS)) ) {
                                alt212=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA212_3 = input.LA(2);

                            if ( ((LA212_3>=TIMEPERIOD_SEC && LA212_3<=TIMEPERIOD_SECONDS)) ) {
                                alt212=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA212_4 = input.LA(2);

                            if ( ((LA212_4>=TIMEPERIOD_SEC && LA212_4<=TIMEPERIOD_SECONDS)) ) {
                                alt212=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA212_5 = input.LA(2);

                            if ( ((LA212_5>=TIMEPERIOD_SEC && LA212_5<=TIMEPERIOD_SECONDS)) ) {
                                alt212=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA212_6 = input.LA(2);

                            if ( ((LA212_6>=TIMEPERIOD_SEC && LA212_6<=TIMEPERIOD_SECONDS)) ) {
                                alt212=1;
                            }
                            }
                            break;
                    }

                    switch (alt212) {
                        case 1 :
                            // EsperEPL2Grammar.g:1387:33: secondPart
                            {
                            pushFollow(FOLLOW_secondPart_in_timePeriod9304);
                            secondPart594=secondPart();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_secondPart.add(secondPart594.getTree());

                            }
                            break;

                    }

                    // EsperEPL2Grammar.g:1387:45: ( millisecondPart )?
                    int alt213=2;
                    int LA213_0 = input.LA(1);

                    if ( (LA213_0==NUM_DOUBLE||LA213_0==IDENT||LA213_0==NUM_INT||LA213_0==QUESTION||(LA213_0>=NUM_LONG && LA213_0<=NUM_FLOAT)) ) {
                        alt213=1;
                    }
                    switch (alt213) {
                        case 1 :
                            // EsperEPL2Grammar.g:1387:45: millisecondPart
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod9307);
                            millisecondPart595=millisecondPart();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart595.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1388:4: hourPart ( minutePart )? ( secondPart )? ( millisecondPart )?
                    {
                    pushFollow(FOLLOW_hourPart_in_timePeriod9313);
                    hourPart596=hourPart();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_hourPart.add(hourPart596.getTree());
                    // EsperEPL2Grammar.g:1388:13: ( minutePart )?
                    int alt214=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA214_1 = input.LA(2);

                            if ( (LA214_1==MIN||(LA214_1>=TIMEPERIOD_MINUTE && LA214_1<=TIMEPERIOD_MINUTES)) ) {
                                alt214=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA214_2 = input.LA(2);

                            if ( (LA214_2==MIN||(LA214_2>=TIMEPERIOD_MINUTE && LA214_2<=TIMEPERIOD_MINUTES)) ) {
                                alt214=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA214_3 = input.LA(2);

                            if ( (LA214_3==MIN||(LA214_3>=TIMEPERIOD_MINUTE && LA214_3<=TIMEPERIOD_MINUTES)) ) {
                                alt214=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA214_4 = input.LA(2);

                            if ( (LA214_4==MIN||(LA214_4>=TIMEPERIOD_MINUTE && LA214_4<=TIMEPERIOD_MINUTES)) ) {
                                alt214=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA214_5 = input.LA(2);

                            if ( (LA214_5==MIN||(LA214_5>=TIMEPERIOD_MINUTE && LA214_5<=TIMEPERIOD_MINUTES)) ) {
                                alt214=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA214_6 = input.LA(2);

                            if ( (LA214_6==MIN||(LA214_6>=TIMEPERIOD_MINUTE && LA214_6<=TIMEPERIOD_MINUTES)) ) {
                                alt214=1;
                            }
                            }
                            break;
                    }

                    switch (alt214) {
                        case 1 :
                            // EsperEPL2Grammar.g:1388:13: minutePart
                            {
                            pushFollow(FOLLOW_minutePart_in_timePeriod9315);
                            minutePart597=minutePart();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_minutePart.add(minutePart597.getTree());

                            }
                            break;

                    }

                    // EsperEPL2Grammar.g:1388:25: ( secondPart )?
                    int alt215=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA215_1 = input.LA(2);

                            if ( ((LA215_1>=TIMEPERIOD_SEC && LA215_1<=TIMEPERIOD_SECONDS)) ) {
                                alt215=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA215_2 = input.LA(2);

                            if ( ((LA215_2>=TIMEPERIOD_SEC && LA215_2<=TIMEPERIOD_SECONDS)) ) {
                                alt215=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA215_3 = input.LA(2);

                            if ( ((LA215_3>=TIMEPERIOD_SEC && LA215_3<=TIMEPERIOD_SECONDS)) ) {
                                alt215=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA215_4 = input.LA(2);

                            if ( ((LA215_4>=TIMEPERIOD_SEC && LA215_4<=TIMEPERIOD_SECONDS)) ) {
                                alt215=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA215_5 = input.LA(2);

                            if ( ((LA215_5>=TIMEPERIOD_SEC && LA215_5<=TIMEPERIOD_SECONDS)) ) {
                                alt215=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA215_6 = input.LA(2);

                            if ( ((LA215_6>=TIMEPERIOD_SEC && LA215_6<=TIMEPERIOD_SECONDS)) ) {
                                alt215=1;
                            }
                            }
                            break;
                    }

                    switch (alt215) {
                        case 1 :
                            // EsperEPL2Grammar.g:1388:25: secondPart
                            {
                            pushFollow(FOLLOW_secondPart_in_timePeriod9318);
                            secondPart598=secondPart();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_secondPart.add(secondPart598.getTree());

                            }
                            break;

                    }

                    // EsperEPL2Grammar.g:1388:37: ( millisecondPart )?
                    int alt216=2;
                    int LA216_0 = input.LA(1);

                    if ( (LA216_0==NUM_DOUBLE||LA216_0==IDENT||LA216_0==NUM_INT||LA216_0==QUESTION||(LA216_0>=NUM_LONG && LA216_0<=NUM_FLOAT)) ) {
                        alt216=1;
                    }
                    switch (alt216) {
                        case 1 :
                            // EsperEPL2Grammar.g:1388:37: millisecondPart
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod9321);
                            millisecondPart599=millisecondPart();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart599.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1389:4: minutePart ( secondPart )? ( millisecondPart )?
                    {
                    pushFollow(FOLLOW_minutePart_in_timePeriod9327);
                    minutePart600=minutePart();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_minutePart.add(minutePart600.getTree());
                    // EsperEPL2Grammar.g:1389:15: ( secondPart )?
                    int alt217=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA217_1 = input.LA(2);

                            if ( ((LA217_1>=TIMEPERIOD_SEC && LA217_1<=TIMEPERIOD_SECONDS)) ) {
                                alt217=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA217_2 = input.LA(2);

                            if ( ((LA217_2>=TIMEPERIOD_SEC && LA217_2<=TIMEPERIOD_SECONDS)) ) {
                                alt217=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA217_3 = input.LA(2);

                            if ( ((LA217_3>=TIMEPERIOD_SEC && LA217_3<=TIMEPERIOD_SECONDS)) ) {
                                alt217=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA217_4 = input.LA(2);

                            if ( ((LA217_4>=TIMEPERIOD_SEC && LA217_4<=TIMEPERIOD_SECONDS)) ) {
                                alt217=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA217_5 = input.LA(2);

                            if ( ((LA217_5>=TIMEPERIOD_SEC && LA217_5<=TIMEPERIOD_SECONDS)) ) {
                                alt217=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA217_6 = input.LA(2);

                            if ( ((LA217_6>=TIMEPERIOD_SEC && LA217_6<=TIMEPERIOD_SECONDS)) ) {
                                alt217=1;
                            }
                            }
                            break;
                    }

                    switch (alt217) {
                        case 1 :
                            // EsperEPL2Grammar.g:1389:15: secondPart
                            {
                            pushFollow(FOLLOW_secondPart_in_timePeriod9329);
                            secondPart601=secondPart();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_secondPart.add(secondPart601.getTree());

                            }
                            break;

                    }

                    // EsperEPL2Grammar.g:1389:27: ( millisecondPart )?
                    int alt218=2;
                    int LA218_0 = input.LA(1);

                    if ( (LA218_0==NUM_DOUBLE||LA218_0==IDENT||LA218_0==NUM_INT||LA218_0==QUESTION||(LA218_0>=NUM_LONG && LA218_0<=NUM_FLOAT)) ) {
                        alt218=1;
                    }
                    switch (alt218) {
                        case 1 :
                            // EsperEPL2Grammar.g:1389:27: millisecondPart
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod9332);
                            millisecondPart602=millisecondPart();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart602.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:1390:4: secondPart ( millisecondPart )?
                    {
                    pushFollow(FOLLOW_secondPart_in_timePeriod9338);
                    secondPart603=secondPart();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_secondPart.add(secondPart603.getTree());
                    // EsperEPL2Grammar.g:1390:15: ( millisecondPart )?
                    int alt219=2;
                    int LA219_0 = input.LA(1);

                    if ( (LA219_0==NUM_DOUBLE||LA219_0==IDENT||LA219_0==NUM_INT||LA219_0==QUESTION||(LA219_0>=NUM_LONG && LA219_0<=NUM_FLOAT)) ) {
                        alt219=1;
                    }
                    switch (alt219) {
                        case 1 :
                            // EsperEPL2Grammar.g:1390:15: millisecondPart
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod9340);
                            millisecondPart604=millisecondPart();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart604.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 5 :
                    // EsperEPL2Grammar.g:1391:4: millisecondPart
                    {
                    pushFollow(FOLLOW_millisecondPart_in_timePeriod9346);
                    millisecondPart605=millisecondPart();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart605.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: secondPart, minutePart, millisecondPart, dayPart, hourPart
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1393:3: -> ^( TIME_PERIOD ( dayPart )? ( hourPart )? ( minutePart )? ( secondPart )? ( millisecondPart )? )
            {
                // EsperEPL2Grammar.g:1393:6: ^( TIME_PERIOD ( dayPart )? ( hourPart )? ( minutePart )? ( secondPart )? ( millisecondPart )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TIME_PERIOD, "TIME_PERIOD"), root_1);

                // EsperEPL2Grammar.g:1393:20: ( dayPart )?
                if ( stream_dayPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_dayPart.nextTree());

                }
                stream_dayPart.reset();
                // EsperEPL2Grammar.g:1393:29: ( hourPart )?
                if ( stream_hourPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_hourPart.nextTree());

                }
                stream_hourPart.reset();
                // EsperEPL2Grammar.g:1393:39: ( minutePart )?
                if ( stream_minutePart.hasNext() ) {
                    adaptor.addChild(root_1, stream_minutePart.nextTree());

                }
                stream_minutePart.reset();
                // EsperEPL2Grammar.g:1393:51: ( secondPart )?
                if ( stream_secondPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_secondPart.nextTree());

                }
                stream_secondPart.reset();
                // EsperEPL2Grammar.g:1393:63: ( millisecondPart )?
                if ( stream_millisecondPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_millisecondPart.nextTree());

                }
                stream_millisecondPart.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "timePeriod"

    public static class dayPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dayPart"
    // EsperEPL2Grammar.g:1396:1: dayPart : ( number | i= IDENT | substitution ) ( TIMEPERIOD_DAYS | TIMEPERIOD_DAY ) -> {i!= null}? ^( DAY_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( DAY_PART ( number )? ( substitution )? ) ;
    public final EsperEPL2GrammarParser.dayPart_return dayPart() throws RecognitionException {
        EsperEPL2GrammarParser.dayPart_return retval = new EsperEPL2GrammarParser.dayPart_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token TIMEPERIOD_DAYS608=null;
        Token TIMEPERIOD_DAY609=null;
        EsperEPL2GrammarParser.number_return number606 = null;

        EsperEPL2GrammarParser.substitution_return substitution607 = null;


        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_DAYS608_tree=null;
        CommonTree TIMEPERIOD_DAY609_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_DAY=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_DAY");
        RewriteRuleTokenStream stream_TIMEPERIOD_DAYS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_DAYS");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            // EsperEPL2Grammar.g:1397:2: ( ( number | i= IDENT | substitution ) ( TIMEPERIOD_DAYS | TIMEPERIOD_DAY ) -> {i!= null}? ^( DAY_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( DAY_PART ( number )? ( substitution )? ) )
            // EsperEPL2Grammar.g:1397:4: ( number | i= IDENT | substitution ) ( TIMEPERIOD_DAYS | TIMEPERIOD_DAY )
            {
            // EsperEPL2Grammar.g:1397:4: ( number | i= IDENT | substitution )
            int alt221=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt221=1;
                }
                break;
            case IDENT:
                {
                alt221=2;
                }
                break;
            case QUESTION:
                {
                alt221=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 221, 0, input);

                throw nvae;
            }

            switch (alt221) {
                case 1 :
                    // EsperEPL2Grammar.g:1397:5: number
                    {
                    pushFollow(FOLLOW_number_in_dayPart9384);
                    number606=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number606.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1397:12: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_dayPart9388); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1397:20: substitution
                    {
                    pushFollow(FOLLOW_substitution_in_dayPart9390);
                    substitution607=substitution();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution607.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:1397:34: ( TIMEPERIOD_DAYS | TIMEPERIOD_DAY )
            int alt222=2;
            int LA222_0 = input.LA(1);

            if ( (LA222_0==TIMEPERIOD_DAYS) ) {
                alt222=1;
            }
            else if ( (LA222_0==TIMEPERIOD_DAY) ) {
                alt222=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 222, 0, input);

                throw nvae;
            }
            switch (alt222) {
                case 1 :
                    // EsperEPL2Grammar.g:1397:35: TIMEPERIOD_DAYS
                    {
                    TIMEPERIOD_DAYS608=(Token)match(input,TIMEPERIOD_DAYS,FOLLOW_TIMEPERIOD_DAYS_in_dayPart9394); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_DAYS.add(TIMEPERIOD_DAYS608);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1397:53: TIMEPERIOD_DAY
                    {
                    TIMEPERIOD_DAY609=(Token)match(input,TIMEPERIOD_DAY,FOLLOW_TIMEPERIOD_DAY_in_dayPart9398); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_DAY.add(TIMEPERIOD_DAY609);


                    }
                    break;

            }



            // AST REWRITE
            // elements: number, substitution, i
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1398:3: -> {i!= null}? ^( DAY_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
            if (i!= null) {
                // EsperEPL2Grammar.g:1398:18: ^( DAY_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DAY_PART, "DAY_PART"), root_1);

                // EsperEPL2Grammar.g:1398:29: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1398:47: ^( EVENT_PROP_SIMPLE $i)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1399:3: -> ^( DAY_PART ( number )? ( substitution )? )
            {
                // EsperEPL2Grammar.g:1399:6: ^( DAY_PART ( number )? ( substitution )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DAY_PART, "DAY_PART"), root_1);

                // EsperEPL2Grammar.g:1399:17: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:1399:25: ( substitution )?
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());

                }
                stream_substitution.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "dayPart"

    public static class hourPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "hourPart"
    // EsperEPL2Grammar.g:1402:1: hourPart : ( number | i= IDENT | substitution ) ( TIMEPERIOD_HOURS | TIMEPERIOD_HOUR ) -> {i!= null}? ^( HOUR_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( HOUR_PART ( number )? ( substitution )? ) ;
    public final EsperEPL2GrammarParser.hourPart_return hourPart() throws RecognitionException {
        EsperEPL2GrammarParser.hourPart_return retval = new EsperEPL2GrammarParser.hourPart_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token TIMEPERIOD_HOURS612=null;
        Token TIMEPERIOD_HOUR613=null;
        EsperEPL2GrammarParser.number_return number610 = null;

        EsperEPL2GrammarParser.substitution_return substitution611 = null;


        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_HOURS612_tree=null;
        CommonTree TIMEPERIOD_HOUR613_tree=null;
        RewriteRuleTokenStream stream_TIMEPERIOD_HOURS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_HOURS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_HOUR=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_HOUR");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            // EsperEPL2Grammar.g:1403:2: ( ( number | i= IDENT | substitution ) ( TIMEPERIOD_HOURS | TIMEPERIOD_HOUR ) -> {i!= null}? ^( HOUR_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( HOUR_PART ( number )? ( substitution )? ) )
            // EsperEPL2Grammar.g:1403:4: ( number | i= IDENT | substitution ) ( TIMEPERIOD_HOURS | TIMEPERIOD_HOUR )
            {
            // EsperEPL2Grammar.g:1403:4: ( number | i= IDENT | substitution )
            int alt223=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt223=1;
                }
                break;
            case IDENT:
                {
                alt223=2;
                }
                break;
            case QUESTION:
                {
                alt223=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 223, 0, input);

                throw nvae;
            }

            switch (alt223) {
                case 1 :
                    // EsperEPL2Grammar.g:1403:5: number
                    {
                    pushFollow(FOLLOW_number_in_hourPart9447);
                    number610=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number610.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1403:12: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_hourPart9451); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1403:20: substitution
                    {
                    pushFollow(FOLLOW_substitution_in_hourPart9453);
                    substitution611=substitution();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution611.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:1403:34: ( TIMEPERIOD_HOURS | TIMEPERIOD_HOUR )
            int alt224=2;
            int LA224_0 = input.LA(1);

            if ( (LA224_0==TIMEPERIOD_HOURS) ) {
                alt224=1;
            }
            else if ( (LA224_0==TIMEPERIOD_HOUR) ) {
                alt224=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 224, 0, input);

                throw nvae;
            }
            switch (alt224) {
                case 1 :
                    // EsperEPL2Grammar.g:1403:35: TIMEPERIOD_HOURS
                    {
                    TIMEPERIOD_HOURS612=(Token)match(input,TIMEPERIOD_HOURS,FOLLOW_TIMEPERIOD_HOURS_in_hourPart9457); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_HOURS.add(TIMEPERIOD_HOURS612);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1403:54: TIMEPERIOD_HOUR
                    {
                    TIMEPERIOD_HOUR613=(Token)match(input,TIMEPERIOD_HOUR,FOLLOW_TIMEPERIOD_HOUR_in_hourPart9461); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_HOUR.add(TIMEPERIOD_HOUR613);


                    }
                    break;

            }



            // AST REWRITE
            // elements: number, substitution, i
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1404:3: -> {i!= null}? ^( HOUR_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
            if (i!= null) {
                // EsperEPL2Grammar.g:1404:18: ^( HOUR_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(HOUR_PART, "HOUR_PART"), root_1);

                // EsperEPL2Grammar.g:1404:30: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1404:48: ^( EVENT_PROP_SIMPLE $i)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1405:3: -> ^( HOUR_PART ( number )? ( substitution )? )
            {
                // EsperEPL2Grammar.g:1405:6: ^( HOUR_PART ( number )? ( substitution )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(HOUR_PART, "HOUR_PART"), root_1);

                // EsperEPL2Grammar.g:1405:18: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:1405:26: ( substitution )?
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());

                }
                stream_substitution.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "hourPart"

    public static class minutePart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "minutePart"
    // EsperEPL2Grammar.g:1408:1: minutePart : ( number | i= IDENT | substitution ) ( TIMEPERIOD_MINUTES | TIMEPERIOD_MINUTE | MIN ) -> {i!= null}? ^( MINUTE_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( MINUTE_PART ( number )? ( substitution )? ) ;
    public final EsperEPL2GrammarParser.minutePart_return minutePart() throws RecognitionException {
        EsperEPL2GrammarParser.minutePart_return retval = new EsperEPL2GrammarParser.minutePart_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token TIMEPERIOD_MINUTES616=null;
        Token TIMEPERIOD_MINUTE617=null;
        Token MIN618=null;
        EsperEPL2GrammarParser.number_return number614 = null;

        EsperEPL2GrammarParser.substitution_return substitution615 = null;


        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_MINUTES616_tree=null;
        CommonTree TIMEPERIOD_MINUTE617_tree=null;
        CommonTree MIN618_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_MINUTE=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MINUTE");
        RewriteRuleTokenStream stream_MIN=new RewriteRuleTokenStream(adaptor,"token MIN");
        RewriteRuleTokenStream stream_TIMEPERIOD_MINUTES=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MINUTES");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            // EsperEPL2Grammar.g:1409:2: ( ( number | i= IDENT | substitution ) ( TIMEPERIOD_MINUTES | TIMEPERIOD_MINUTE | MIN ) -> {i!= null}? ^( MINUTE_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( MINUTE_PART ( number )? ( substitution )? ) )
            // EsperEPL2Grammar.g:1409:4: ( number | i= IDENT | substitution ) ( TIMEPERIOD_MINUTES | TIMEPERIOD_MINUTE | MIN )
            {
            // EsperEPL2Grammar.g:1409:4: ( number | i= IDENT | substitution )
            int alt225=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt225=1;
                }
                break;
            case IDENT:
                {
                alt225=2;
                }
                break;
            case QUESTION:
                {
                alt225=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 225, 0, input);

                throw nvae;
            }

            switch (alt225) {
                case 1 :
                    // EsperEPL2Grammar.g:1409:5: number
                    {
                    pushFollow(FOLLOW_number_in_minutePart9510);
                    number614=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number614.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1409:12: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_minutePart9514); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1409:20: substitution
                    {
                    pushFollow(FOLLOW_substitution_in_minutePart9516);
                    substitution615=substitution();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution615.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:1409:34: ( TIMEPERIOD_MINUTES | TIMEPERIOD_MINUTE | MIN )
            int alt226=3;
            switch ( input.LA(1) ) {
            case TIMEPERIOD_MINUTES:
                {
                alt226=1;
                }
                break;
            case TIMEPERIOD_MINUTE:
                {
                alt226=2;
                }
                break;
            case MIN:
                {
                alt226=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 226, 0, input);

                throw nvae;
            }

            switch (alt226) {
                case 1 :
                    // EsperEPL2Grammar.g:1409:35: TIMEPERIOD_MINUTES
                    {
                    TIMEPERIOD_MINUTES616=(Token)match(input,TIMEPERIOD_MINUTES,FOLLOW_TIMEPERIOD_MINUTES_in_minutePart9520); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MINUTES.add(TIMEPERIOD_MINUTES616);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1409:56: TIMEPERIOD_MINUTE
                    {
                    TIMEPERIOD_MINUTE617=(Token)match(input,TIMEPERIOD_MINUTE,FOLLOW_TIMEPERIOD_MINUTE_in_minutePart9524); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MINUTE.add(TIMEPERIOD_MINUTE617);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1409:76: MIN
                    {
                    MIN618=(Token)match(input,MIN,FOLLOW_MIN_in_minutePart9528); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MIN.add(MIN618);


                    }
                    break;

            }



            // AST REWRITE
            // elements: i, substitution, number
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1410:3: -> {i!= null}? ^( MINUTE_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
            if (i!= null) {
                // EsperEPL2Grammar.g:1410:18: ^( MINUTE_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MINUTE_PART, "MINUTE_PART"), root_1);

                // EsperEPL2Grammar.g:1410:32: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1410:50: ^( EVENT_PROP_SIMPLE $i)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1411:3: -> ^( MINUTE_PART ( number )? ( substitution )? )
            {
                // EsperEPL2Grammar.g:1411:6: ^( MINUTE_PART ( number )? ( substitution )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MINUTE_PART, "MINUTE_PART"), root_1);

                // EsperEPL2Grammar.g:1411:20: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:1411:28: ( substitution )?
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());

                }
                stream_substitution.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "minutePart"

    public static class secondPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "secondPart"
    // EsperEPL2Grammar.g:1414:1: secondPart : ( number | i= IDENT | substitution ) ( TIMEPERIOD_SECONDS | TIMEPERIOD_SECOND | TIMEPERIOD_SEC ) -> {i!= null}? ^( SECOND_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( SECOND_PART ( number )? ( substitution )? ) ;
    public final EsperEPL2GrammarParser.secondPart_return secondPart() throws RecognitionException {
        EsperEPL2GrammarParser.secondPart_return retval = new EsperEPL2GrammarParser.secondPart_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token TIMEPERIOD_SECONDS621=null;
        Token TIMEPERIOD_SECOND622=null;
        Token TIMEPERIOD_SEC623=null;
        EsperEPL2GrammarParser.number_return number619 = null;

        EsperEPL2GrammarParser.substitution_return substitution620 = null;


        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_SECONDS621_tree=null;
        CommonTree TIMEPERIOD_SECOND622_tree=null;
        CommonTree TIMEPERIOD_SEC623_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_SEC=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SEC");
        RewriteRuleTokenStream stream_TIMEPERIOD_SECOND=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SECOND");
        RewriteRuleTokenStream stream_TIMEPERIOD_SECONDS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SECONDS");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            // EsperEPL2Grammar.g:1415:2: ( ( number | i= IDENT | substitution ) ( TIMEPERIOD_SECONDS | TIMEPERIOD_SECOND | TIMEPERIOD_SEC ) -> {i!= null}? ^( SECOND_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( SECOND_PART ( number )? ( substitution )? ) )
            // EsperEPL2Grammar.g:1415:4: ( number | i= IDENT | substitution ) ( TIMEPERIOD_SECONDS | TIMEPERIOD_SECOND | TIMEPERIOD_SEC )
            {
            // EsperEPL2Grammar.g:1415:4: ( number | i= IDENT | substitution )
            int alt227=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt227=1;
                }
                break;
            case IDENT:
                {
                alt227=2;
                }
                break;
            case QUESTION:
                {
                alt227=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 227, 0, input);

                throw nvae;
            }

            switch (alt227) {
                case 1 :
                    // EsperEPL2Grammar.g:1415:5: number
                    {
                    pushFollow(FOLLOW_number_in_secondPart9578);
                    number619=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number619.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1415:12: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_secondPart9582); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1415:20: substitution
                    {
                    pushFollow(FOLLOW_substitution_in_secondPart9584);
                    substitution620=substitution();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution620.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:1415:34: ( TIMEPERIOD_SECONDS | TIMEPERIOD_SECOND | TIMEPERIOD_SEC )
            int alt228=3;
            switch ( input.LA(1) ) {
            case TIMEPERIOD_SECONDS:
                {
                alt228=1;
                }
                break;
            case TIMEPERIOD_SECOND:
                {
                alt228=2;
                }
                break;
            case TIMEPERIOD_SEC:
                {
                alt228=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 228, 0, input);

                throw nvae;
            }

            switch (alt228) {
                case 1 :
                    // EsperEPL2Grammar.g:1415:35: TIMEPERIOD_SECONDS
                    {
                    TIMEPERIOD_SECONDS621=(Token)match(input,TIMEPERIOD_SECONDS,FOLLOW_TIMEPERIOD_SECONDS_in_secondPart9588); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SECONDS.add(TIMEPERIOD_SECONDS621);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1415:56: TIMEPERIOD_SECOND
                    {
                    TIMEPERIOD_SECOND622=(Token)match(input,TIMEPERIOD_SECOND,FOLLOW_TIMEPERIOD_SECOND_in_secondPart9592); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SECOND.add(TIMEPERIOD_SECOND622);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1415:76: TIMEPERIOD_SEC
                    {
                    TIMEPERIOD_SEC623=(Token)match(input,TIMEPERIOD_SEC,FOLLOW_TIMEPERIOD_SEC_in_secondPart9596); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SEC.add(TIMEPERIOD_SEC623);


                    }
                    break;

            }



            // AST REWRITE
            // elements: substitution, number, i
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1416:3: -> {i!= null}? ^( SECOND_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
            if (i!= null) {
                // EsperEPL2Grammar.g:1416:18: ^( SECOND_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SECOND_PART, "SECOND_PART"), root_1);

                // EsperEPL2Grammar.g:1416:32: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1416:50: ^( EVENT_PROP_SIMPLE $i)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1417:3: -> ^( SECOND_PART ( number )? ( substitution )? )
            {
                // EsperEPL2Grammar.g:1417:6: ^( SECOND_PART ( number )? ( substitution )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SECOND_PART, "SECOND_PART"), root_1);

                // EsperEPL2Grammar.g:1417:20: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:1417:28: ( substitution )?
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());

                }
                stream_substitution.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "secondPart"

    public static class millisecondPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "millisecondPart"
    // EsperEPL2Grammar.g:1420:1: millisecondPart : ( number | i= IDENT | substitution ) ( TIMEPERIOD_MILLISECONDS | TIMEPERIOD_MILLISECOND | TIMEPERIOD_MILLISEC ) -> {i!= null}? ^( MILLISECOND_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( MILLISECOND_PART ( number )? ( substitution )? ) ;
    public final EsperEPL2GrammarParser.millisecondPart_return millisecondPart() throws RecognitionException {
        EsperEPL2GrammarParser.millisecondPart_return retval = new EsperEPL2GrammarParser.millisecondPart_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token TIMEPERIOD_MILLISECONDS626=null;
        Token TIMEPERIOD_MILLISECOND627=null;
        Token TIMEPERIOD_MILLISEC628=null;
        EsperEPL2GrammarParser.number_return number624 = null;

        EsperEPL2GrammarParser.substitution_return substitution625 = null;


        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_MILLISECONDS626_tree=null;
        CommonTree TIMEPERIOD_MILLISECOND627_tree=null;
        CommonTree TIMEPERIOD_MILLISEC628_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_MILLISEC=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MILLISEC");
        RewriteRuleTokenStream stream_TIMEPERIOD_MILLISECOND=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MILLISECOND");
        RewriteRuleTokenStream stream_TIMEPERIOD_MILLISECONDS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MILLISECONDS");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            // EsperEPL2Grammar.g:1421:2: ( ( number | i= IDENT | substitution ) ( TIMEPERIOD_MILLISECONDS | TIMEPERIOD_MILLISECOND | TIMEPERIOD_MILLISEC ) -> {i!= null}? ^( MILLISECOND_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( MILLISECOND_PART ( number )? ( substitution )? ) )
            // EsperEPL2Grammar.g:1421:4: ( number | i= IDENT | substitution ) ( TIMEPERIOD_MILLISECONDS | TIMEPERIOD_MILLISECOND | TIMEPERIOD_MILLISEC )
            {
            // EsperEPL2Grammar.g:1421:4: ( number | i= IDENT | substitution )
            int alt229=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt229=1;
                }
                break;
            case IDENT:
                {
                alt229=2;
                }
                break;
            case QUESTION:
                {
                alt229=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 229, 0, input);

                throw nvae;
            }

            switch (alt229) {
                case 1 :
                    // EsperEPL2Grammar.g:1421:5: number
                    {
                    pushFollow(FOLLOW_number_in_millisecondPart9646);
                    number624=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number624.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1421:12: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_millisecondPart9650); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1421:20: substitution
                    {
                    pushFollow(FOLLOW_substitution_in_millisecondPart9652);
                    substitution625=substitution();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution625.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:1421:34: ( TIMEPERIOD_MILLISECONDS | TIMEPERIOD_MILLISECOND | TIMEPERIOD_MILLISEC )
            int alt230=3;
            switch ( input.LA(1) ) {
            case TIMEPERIOD_MILLISECONDS:
                {
                alt230=1;
                }
                break;
            case TIMEPERIOD_MILLISECOND:
                {
                alt230=2;
                }
                break;
            case TIMEPERIOD_MILLISEC:
                {
                alt230=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 230, 0, input);

                throw nvae;
            }

            switch (alt230) {
                case 1 :
                    // EsperEPL2Grammar.g:1421:35: TIMEPERIOD_MILLISECONDS
                    {
                    TIMEPERIOD_MILLISECONDS626=(Token)match(input,TIMEPERIOD_MILLISECONDS,FOLLOW_TIMEPERIOD_MILLISECONDS_in_millisecondPart9656); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MILLISECONDS.add(TIMEPERIOD_MILLISECONDS626);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1421:61: TIMEPERIOD_MILLISECOND
                    {
                    TIMEPERIOD_MILLISECOND627=(Token)match(input,TIMEPERIOD_MILLISECOND,FOLLOW_TIMEPERIOD_MILLISECOND_in_millisecondPart9660); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MILLISECOND.add(TIMEPERIOD_MILLISECOND627);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1421:86: TIMEPERIOD_MILLISEC
                    {
                    TIMEPERIOD_MILLISEC628=(Token)match(input,TIMEPERIOD_MILLISEC,FOLLOW_TIMEPERIOD_MILLISEC_in_millisecondPart9664); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MILLISEC.add(TIMEPERIOD_MILLISEC628);


                    }
                    break;

            }



            // AST REWRITE
            // elements: i, number, substitution
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1422:3: -> {i!= null}? ^( MILLISECOND_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
            if (i!= null) {
                // EsperEPL2Grammar.g:1422:18: ^( MILLISECOND_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MILLISECOND_PART, "MILLISECOND_PART"), root_1);

                // EsperEPL2Grammar.g:1422:37: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1422:55: ^( EVENT_PROP_SIMPLE $i)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1423:3: -> ^( MILLISECOND_PART ( number )? ( substitution )? )
            {
                // EsperEPL2Grammar.g:1423:6: ^( MILLISECOND_PART ( number )? ( substitution )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MILLISECOND_PART, "MILLISECOND_PART"), root_1);

                // EsperEPL2Grammar.g:1423:25: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:1423:33: ( substitution )?
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());

                }
                stream_substitution.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "millisecondPart"

    public static class number_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "number"
    // EsperEPL2Grammar.g:1426:1: number : (ni= NUM_INT -> INT_TYPE[$ni] | nl= NUM_LONG -> LONG_TYPE[$nl] | nf= NUM_FLOAT -> FLOAT_TYPE[$nf] | nd= NUM_DOUBLE -> DOUBLE_TYPE[$nd] );
    public final EsperEPL2GrammarParser.number_return number() throws RecognitionException {
        EsperEPL2GrammarParser.number_return retval = new EsperEPL2GrammarParser.number_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token ni=null;
        Token nl=null;
        Token nf=null;
        Token nd=null;

        CommonTree ni_tree=null;
        CommonTree nl_tree=null;
        CommonTree nf_tree=null;
        CommonTree nd_tree=null;
        RewriteRuleTokenStream stream_NUM_LONG=new RewriteRuleTokenStream(adaptor,"token NUM_LONG");
        RewriteRuleTokenStream stream_NUM_DOUBLE=new RewriteRuleTokenStream(adaptor,"token NUM_DOUBLE");
        RewriteRuleTokenStream stream_NUM_FLOAT=new RewriteRuleTokenStream(adaptor,"token NUM_FLOAT");
        RewriteRuleTokenStream stream_NUM_INT=new RewriteRuleTokenStream(adaptor,"token NUM_INT");

        try {
            // EsperEPL2Grammar.g:1427:5: (ni= NUM_INT -> INT_TYPE[$ni] | nl= NUM_LONG -> LONG_TYPE[$nl] | nf= NUM_FLOAT -> FLOAT_TYPE[$nf] | nd= NUM_DOUBLE -> DOUBLE_TYPE[$nd] )
            int alt231=4;
            switch ( input.LA(1) ) {
            case NUM_INT:
                {
                alt231=1;
                }
                break;
            case NUM_LONG:
                {
                alt231=2;
                }
                break;
            case NUM_FLOAT:
                {
                alt231=3;
                }
                break;
            case NUM_DOUBLE:
                {
                alt231=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 231, 0, input);

                throw nvae;
            }

            switch (alt231) {
                case 1 :
                    // EsperEPL2Grammar.g:1427:9: ni= NUM_INT
                    {
                    ni=(Token)match(input,NUM_INT,FOLLOW_NUM_INT_in_number9719); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_INT.add(ni);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1427:20: -> INT_TYPE[$ni]
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(INT_TYPE, ni));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1428:9: nl= NUM_LONG
                    {
                    nl=(Token)match(input,NUM_LONG,FOLLOW_NUM_LONG_in_number9736); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_LONG.add(nl);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1428:21: -> LONG_TYPE[$nl]
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(LONG_TYPE, nl));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1429:9: nf= NUM_FLOAT
                    {
                    nf=(Token)match(input,NUM_FLOAT,FOLLOW_NUM_FLOAT_in_number9753); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_FLOAT.add(nf);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1429:22: -> FLOAT_TYPE[$nf]
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(FLOAT_TYPE, nf));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:1430:9: nd= NUM_DOUBLE
                    {
                    nd=(Token)match(input,NUM_DOUBLE,FOLLOW_NUM_DOUBLE_in_number9770); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_DOUBLE.add(nd);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1430:23: -> DOUBLE_TYPE[$nd]
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(DOUBLE_TYPE, nd));

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "number"

    public static class substitution_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "substitution"
    // EsperEPL2Grammar.g:1433:1: substitution : q= QUESTION -> SUBSTITUTION[$q] ;
    public final EsperEPL2GrammarParser.substitution_return substitution() throws RecognitionException {
        EsperEPL2GrammarParser.substitution_return retval = new EsperEPL2GrammarParser.substitution_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token q=null;

        CommonTree q_tree=null;
        RewriteRuleTokenStream stream_QUESTION=new RewriteRuleTokenStream(adaptor,"token QUESTION");

        try {
            // EsperEPL2Grammar.g:1434:2: (q= QUESTION -> SUBSTITUTION[$q] )
            // EsperEPL2Grammar.g:1434:4: q= QUESTION
            {
            q=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_substitution9791); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_QUESTION.add(q);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1434:15: -> SUBSTITUTION[$q]
            {
                adaptor.addChild(root_0, (CommonTree)adaptor.create(SUBSTITUTION, q));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "substitution"

    public static class constant_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "constant"
    // EsperEPL2Grammar.g:1437:1: constant : ( numberconstant | stringconstant | t= BOOLEAN_TRUE -> ^( BOOL_TYPE[$t] ) | f= BOOLEAN_FALSE -> ^( BOOL_TYPE[$f] ) | nu= VALUE_NULL -> ^( NULL_TYPE[$nu] ) );
    public final EsperEPL2GrammarParser.constant_return constant() throws RecognitionException {
        EsperEPL2GrammarParser.constant_return retval = new EsperEPL2GrammarParser.constant_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token t=null;
        Token f=null;
        Token nu=null;
        EsperEPL2GrammarParser.numberconstant_return numberconstant629 = null;

        EsperEPL2GrammarParser.stringconstant_return stringconstant630 = null;


        CommonTree t_tree=null;
        CommonTree f_tree=null;
        CommonTree nu_tree=null;
        RewriteRuleTokenStream stream_BOOLEAN_TRUE=new RewriteRuleTokenStream(adaptor,"token BOOLEAN_TRUE");
        RewriteRuleTokenStream stream_VALUE_NULL=new RewriteRuleTokenStream(adaptor,"token VALUE_NULL");
        RewriteRuleTokenStream stream_BOOLEAN_FALSE=new RewriteRuleTokenStream(adaptor,"token BOOLEAN_FALSE");

        try {
            // EsperEPL2Grammar.g:1438:2: ( numberconstant | stringconstant | t= BOOLEAN_TRUE -> ^( BOOL_TYPE[$t] ) | f= BOOLEAN_FALSE -> ^( BOOL_TYPE[$f] ) | nu= VALUE_NULL -> ^( NULL_TYPE[$nu] ) )
            int alt232=5;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case PLUS:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt232=1;
                }
                break;
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
                {
                alt232=2;
                }
                break;
            case BOOLEAN_TRUE:
                {
                alt232=3;
                }
                break;
            case BOOLEAN_FALSE:
                {
                alt232=4;
                }
                break;
            case VALUE_NULL:
                {
                alt232=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 232, 0, input);

                throw nvae;
            }

            switch (alt232) {
                case 1 :
                    // EsperEPL2Grammar.g:1438:6: numberconstant
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_numberconstant_in_constant9810);
                    numberconstant629=numberconstant();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numberconstant629.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1439:6: stringconstant
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_stringconstant_in_constant9817);
                    stringconstant630=stringconstant();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stringconstant630.getTree());

                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1440:10: t= BOOLEAN_TRUE
                    {
                    t=(Token)match(input,BOOLEAN_TRUE,FOLLOW_BOOLEAN_TRUE_in_constant9830); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BOOLEAN_TRUE.add(t);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1440:25: -> ^( BOOL_TYPE[$t] )
                    {
                        // EsperEPL2Grammar.g:1440:28: ^( BOOL_TYPE[$t] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BOOL_TYPE, t), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:1441:10: f= BOOLEAN_FALSE
                    {
                    f=(Token)match(input,BOOLEAN_FALSE,FOLLOW_BOOLEAN_FALSE_in_constant9850); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BOOLEAN_FALSE.add(f);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1441:26: -> ^( BOOL_TYPE[$f] )
                    {
                        // EsperEPL2Grammar.g:1441:29: ^( BOOL_TYPE[$f] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BOOL_TYPE, f), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    // EsperEPL2Grammar.g:1442:10: nu= VALUE_NULL
                    {
                    nu=(Token)match(input,VALUE_NULL,FOLLOW_VALUE_NULL_in_constant9870); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_VALUE_NULL.add(nu);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1442:24: -> ^( NULL_TYPE[$nu] )
                    {
                        // EsperEPL2Grammar.g:1442:27: ^( NULL_TYPE[$nu] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NULL_TYPE, nu), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "constant"

    public static class numberconstant_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "numberconstant"
    // EsperEPL2Grammar.g:1445:1: numberconstant : (m= MINUS | p= PLUS )? number -> {$m != null}? -> number ;
    public final EsperEPL2GrammarParser.numberconstant_return numberconstant() throws RecognitionException {
        EsperEPL2GrammarParser.numberconstant_return retval = new EsperEPL2GrammarParser.numberconstant_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token m=null;
        Token p=null;
        EsperEPL2GrammarParser.number_return number631 = null;


        CommonTree m_tree=null;
        CommonTree p_tree=null;
        RewriteRuleTokenStream stream_PLUS=new RewriteRuleTokenStream(adaptor,"token PLUS");
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        try {
            // EsperEPL2Grammar.g:1446:2: ( (m= MINUS | p= PLUS )? number -> {$m != null}? -> number )
            // EsperEPL2Grammar.g:1446:5: (m= MINUS | p= PLUS )? number
            {
            // EsperEPL2Grammar.g:1446:5: (m= MINUS | p= PLUS )?
            int alt233=3;
            int LA233_0 = input.LA(1);

            if ( (LA233_0==MINUS) ) {
                alt233=1;
            }
            else if ( (LA233_0==PLUS) ) {
                alt233=2;
            }
            switch (alt233) {
                case 1 :
                    // EsperEPL2Grammar.g:1446:6: m= MINUS
                    {
                    m=(Token)match(input,MINUS,FOLLOW_MINUS_in_numberconstant9892); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MINUS.add(m);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1446:16: p= PLUS
                    {
                    p=(Token)match(input,PLUS,FOLLOW_PLUS_in_numberconstant9898); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PLUS.add(p);


                    }
                    break;

            }

            pushFollow(FOLLOW_number_in_numberconstant9902);
            number631=number();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_number.add(number631.getTree());


            // AST REWRITE
            // elements: number
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1447:3: -> {$m != null}?
            if (m != null) {
                adaptor.addChild(root_0, adaptor.create((number631!=null?((CommonTree)number631.tree):null).getType(), "-" + (number631!=null?input.toString(number631.start,number631.stop):null)));

            }
            else // 1448:3: -> number
            {
                adaptor.addChild(root_0, stream_number.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "numberconstant"

    public static class stringconstant_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "stringconstant"
    // EsperEPL2Grammar.g:1451:1: stringconstant : (sl= STRING_LITERAL -> ^( STRING_TYPE[$sl] ) | qsl= QUOTED_STRING_LITERAL -> ^( STRING_TYPE[$qsl] ) );
    public final EsperEPL2GrammarParser.stringconstant_return stringconstant() throws RecognitionException {
        EsperEPL2GrammarParser.stringconstant_return retval = new EsperEPL2GrammarParser.stringconstant_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token sl=null;
        Token qsl=null;

        CommonTree sl_tree=null;
        CommonTree qsl_tree=null;
        RewriteRuleTokenStream stream_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token STRING_LITERAL");
        RewriteRuleTokenStream stream_QUOTED_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token QUOTED_STRING_LITERAL");

        try {
            // EsperEPL2Grammar.g:1452:2: (sl= STRING_LITERAL -> ^( STRING_TYPE[$sl] ) | qsl= QUOTED_STRING_LITERAL -> ^( STRING_TYPE[$qsl] ) )
            int alt234=2;
            int LA234_0 = input.LA(1);

            if ( (LA234_0==STRING_LITERAL) ) {
                alt234=1;
            }
            else if ( (LA234_0==QUOTED_STRING_LITERAL) ) {
                alt234=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 234, 0, input);

                throw nvae;
            }
            switch (alt234) {
                case 1 :
                    // EsperEPL2Grammar.g:1452:6: sl= STRING_LITERAL
                    {
                    sl=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_stringconstant9931); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STRING_LITERAL.add(sl);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1452:24: -> ^( STRING_TYPE[$sl] )
                    {
                        // EsperEPL2Grammar.g:1452:27: ^( STRING_TYPE[$sl] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STRING_TYPE, sl), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1453:6: qsl= QUOTED_STRING_LITERAL
                    {
                    qsl=(Token)match(input,QUOTED_STRING_LITERAL,FOLLOW_QUOTED_STRING_LITERAL_in_stringconstant9947); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUOTED_STRING_LITERAL.add(qsl);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1453:32: -> ^( STRING_TYPE[$qsl] )
                    {
                        // EsperEPL2Grammar.g:1453:35: ^( STRING_TYPE[$qsl] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STRING_TYPE, qsl), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "stringconstant"

    // $ANTLR start synpred1_EsperEPL2Grammar
    public final void synpred1_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:725:4: ( streamSelector )
        // EsperEPL2Grammar.g:725:5: streamSelector
        {
        pushFollow(FOLLOW_streamSelector_in_synpred1_EsperEPL2Grammar3266);
        streamSelector();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred1_EsperEPL2Grammar

    // $ANTLR start synpred2_EsperEPL2Grammar
    public final void synpred2_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:803:7: ( timePeriod )
        // EsperEPL2Grammar.g:803:8: timePeriod
        {
        pushFollow(FOLLOW_timePeriod_in_synpred2_EsperEPL2Grammar3954);
        timePeriod();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred2_EsperEPL2Grammar

    // $ANTLR start synpred3_EsperEPL2Grammar
    public final void synpred3_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:965:4: ( builtinFunc )
        // EsperEPL2Grammar.g:965:5: builtinFunc
        {
        pushFollow(FOLLOW_builtinFunc_in_synpred3_EsperEPL2Grammar5685);
        builtinFunc();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred3_EsperEPL2Grammar

    // $ANTLR start synpred4_EsperEPL2Grammar
    public final void synpred4_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1038:4: ( eventProperty )
        // EsperEPL2Grammar.g:1038:5: eventProperty
        {
        pushFollow(FOLLOW_eventProperty_in_synpred4_EsperEPL2Grammar6360);
        eventProperty();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred4_EsperEPL2Grammar

    // $ANTLR start synpred5_EsperEPL2Grammar
    public final void synpred5_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1188:4: ( propertyStreamSelector )
        // EsperEPL2Grammar.g:1188:5: propertyStreamSelector
        {
        pushFollow(FOLLOW_propertyStreamSelector_in_synpred5_EsperEPL2Grammar7680);
        propertyStreamSelector();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred5_EsperEPL2Grammar

    // $ANTLR start synpred6_EsperEPL2Grammar
    public final void synpred6_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1237:7: ( lastOperand )
        // EsperEPL2Grammar.g:1237:8: lastOperand
        {
        pushFollow(FOLLOW_lastOperand_in_synpred6_EsperEPL2Grammar8098);
        lastOperand();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred6_EsperEPL2Grammar

    // $ANTLR start synpred7_EsperEPL2Grammar
    public final void synpred7_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1238:4: ( lastWeekdayOperand )
        // EsperEPL2Grammar.g:1238:5: lastWeekdayOperand
        {
        pushFollow(FOLLOW_lastWeekdayOperand_in_synpred7_EsperEPL2Grammar8109);
        lastWeekdayOperand();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred7_EsperEPL2Grammar

    // $ANTLR start synpred8_EsperEPL2Grammar
    public final void synpred8_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1239:4: ( timePeriod )
        // EsperEPL2Grammar.g:1239:5: timePeriod
        {
        pushFollow(FOLLOW_timePeriod_in_synpred8_EsperEPL2Grammar8120);
        timePeriod();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred8_EsperEPL2Grammar

    // $ANTLR start synpred9_EsperEPL2Grammar
    public final void synpred9_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1240:4: ( expressionQualifyable )
        // EsperEPL2Grammar.g:1240:5: expressionQualifyable
        {
        pushFollow(FOLLOW_expressionQualifyable_in_synpred9_EsperEPL2Grammar8131);
        expressionQualifyable();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred9_EsperEPL2Grammar

    // $ANTLR start synpred10_EsperEPL2Grammar
    public final void synpred10_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1241:4: ( rangeOperand )
        // EsperEPL2Grammar.g:1241:5: rangeOperand
        {
        pushFollow(FOLLOW_rangeOperand_in_synpred10_EsperEPL2Grammar8142);
        rangeOperand();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred10_EsperEPL2Grammar

    // $ANTLR start synpred11_EsperEPL2Grammar
    public final void synpred11_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1242:5: ( frequencyOperand )
        // EsperEPL2Grammar.g:1242:6: frequencyOperand
        {
        pushFollow(FOLLOW_frequencyOperand_in_synpred11_EsperEPL2Grammar8154);
        frequencyOperand();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred11_EsperEPL2Grammar

    // $ANTLR start synpred12_EsperEPL2Grammar
    public final void synpred12_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1243:4: ( lastOperator )
        // EsperEPL2Grammar.g:1243:5: lastOperator
        {
        pushFollow(FOLLOW_lastOperator_in_synpred12_EsperEPL2Grammar8165);
        lastOperator();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred12_EsperEPL2Grammar

    // $ANTLR start synpred13_EsperEPL2Grammar
    public final void synpred13_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1244:4: ( weekDayOperator )
        // EsperEPL2Grammar.g:1244:5: weekDayOperator
        {
        pushFollow(FOLLOW_weekDayOperator_in_synpred13_EsperEPL2Grammar8176);
        weekDayOperator();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred13_EsperEPL2Grammar

    // $ANTLR start synpred14_EsperEPL2Grammar
    public final void synpred14_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1245:5: ( numericParameterList )
        // EsperEPL2Grammar.g:1245:6: numericParameterList
        {
        pushFollow(FOLLOW_numericParameterList_in_synpred14_EsperEPL2Grammar8189);
        numericParameterList();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred14_EsperEPL2Grammar

    // Delegated rules

    public final boolean synpred3_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred3_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred5_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred5_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred4_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred4_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred7_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred7_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred11_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred11_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred14_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred14_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred2_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred2_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred12_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred12_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred13_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred13_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred6_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred6_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred10_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred10_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred1_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred1_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred8_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred8_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred9_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred9_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA61 dfa61 = new DFA61(this);
    protected DFA92 dfa92 = new DFA92(this);
    protected DFA124 dfa124 = new DFA124(this);
    protected DFA147 dfa147 = new DFA147(this);
    protected DFA182 dfa182 = new DFA182(this);
    protected DFA192 dfa192 = new DFA192(this);
    protected DFA206 dfa206 = new DFA206(this);
    static final String DFA61_eotS =
        "\u0081\uffff";
    static final String DFA61_eofS =
        "\u0081\uffff";
    static final String DFA61_minS =
        "\1\5\1\uffff\1\6\67\uffff\1\5\106\uffff";
    static final String DFA61_maxS =
        "\1\u0100\1\uffff\1\u00fd\67\uffff\1\u00fe\106\uffff";
    static final String DFA61_acceptS =
        "\1\uffff\1\1\1\uffff\1\3\126\uffff\1\2\46\uffff";
    static final String DFA61_specialS =
        "\72\uffff\1\0\106\uffff}>";
    static final String[] DFA61_transitionS = {
            "\1\3\4\uffff\1\3\2\uffff\2\3\2\uffff\11\3\1\uffff\1\3\6\uffff"+
            "\1\3\1\uffff\4\3\12\uffff\3\3\10\uffff\16\3\1\uffff\1\3\1\uffff"+
            "\3\3\14\uffff\3\3\174\uffff\1\3\2\uffff\1\2\2\uffff\1\3\1\uffff"+
            "\1\1\3\uffff\2\3\12\uffff\2\3\2\uffff\1\3\1\uffff\1\3\1\uffff"+
            "\1\3\1\uffff\3\3",
            "",
            "\4\3\1\uffff\3\3\2\uffff\1\3\20\uffff\1\3\7\uffff\1\3\u00b4"+
            "\uffff\1\3\1\uffff\1\3\1\72\1\3\1\uffff\2\3\4\uffff\16\3\4\uffff"+
            "\2\3",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\3\4\uffff\1\3\3\uffff\1\3\2\uffff\11\3\10\uffff\1\3\1\uffff"+
            "\4\3\12\uffff\3\3\10\uffff\10\3\1\uffff\4\3\2\uffff\1\3\1\uffff"+
            "\3\3\u008e\uffff\1\3\4\uffff\1\132\31\uffff\1\3",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA61_eot = DFA.unpackEncodedString(DFA61_eotS);
    static final short[] DFA61_eof = DFA.unpackEncodedString(DFA61_eofS);
    static final char[] DFA61_min = DFA.unpackEncodedStringToUnsignedChars(DFA61_minS);
    static final char[] DFA61_max = DFA.unpackEncodedStringToUnsignedChars(DFA61_maxS);
    static final short[] DFA61_accept = DFA.unpackEncodedString(DFA61_acceptS);
    static final short[] DFA61_special = DFA.unpackEncodedString(DFA61_specialS);
    static final short[][] DFA61_transition;

    static {
        int numStates = DFA61_transitionS.length;
        DFA61_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA61_transition[i] = DFA.unpackEncodedString(DFA61_transitionS[i]);
        }
    }

    class DFA61 extends DFA {

        public DFA61(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 61;
            this.eot = DFA61_eot;
            this.eof = DFA61_eof;
            this.min = DFA61_min;
            this.max = DFA61_max;
            this.accept = DFA61_accept;
            this.special = DFA61_special;
            this.transition = DFA61_transition;
        }
        public String getDescription() {
            return "722:1: selectionListElement : (s= STAR -> WILDCARD_SELECT[$s] | ( streamSelector )=> streamSelector | expression ( AS i= keywordAllowedIdent )? -> {identifier != null}? ^( SELECTION_ELEMENT_EXPR expression IDENT[identifier] ) -> {identifier == null}? ^( SELECTION_ELEMENT_EXPR expression ) -> ^( SELECTION_ELEMENT_EXPR expression ) );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA61_58 = input.LA(1);

                         
                        int index61_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA61_58==STAR) && (synpred1_EsperEPL2Grammar())) {s = 90;}

                        else if ( (LA61_58==WINDOW||LA61_58==ESCAPE||LA61_58==EVERY_EXPR||(LA61_58>=SUM && LA61_58<=COUNT)||LA61_58==OUTER||(LA61_58>=JOIN && LA61_58<=FULL)||(LA61_58>=EVENTS && LA61_58<=LAST)||(LA61_58>=UNIDIRECTIONAL && LA61_58<=PRIOR)||(LA61_58>=WEEKDAY && LA61_58<=CAST)||LA61_58==SNAPSHOT||(LA61_58>=VARIABLE && LA61_58<=AT)||LA61_58==IDENT||LA61_58==TICKED_STRING_LITERAL) ) {s = 3;}

                         
                        input.seek(index61_58);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 61, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA92_eotS =
        "\162\uffff";
    static final String DFA92_eofS =
        "\162\uffff";
    static final String DFA92_minS =
        "\2\5\160\uffff";
    static final String DFA92_maxS =
        "\2\u0100\160\uffff";
    static final String DFA92_acceptS =
        "\2\uffff\1\3\66\uffff\1\2\67\uffff\1\1";
    static final String DFA92_specialS =
        "\162\uffff}>";
    static final String[] DFA92_transitionS = {
            "\1\2\4\uffff\1\2\2\uffff\2\2\2\uffff\11\2\1\uffff\1\1\6\uffff"+
            "\1\2\1\uffff\4\2\12\uffff\3\2\10\uffff\16\2\1\uffff\1\2\1\uffff"+
            "\3\2\14\uffff\3\2\174\uffff\1\2\2\uffff\1\2\2\uffff\1\2\5\uffff"+
            "\2\2\12\uffff\2\2\2\uffff\1\2\1\uffff\1\2\1\uffff\1\2\1\uffff"+
            "\3\2",
            "\1\71\4\uffff\1\71\2\uffff\2\71\2\uffff\11\71\1\uffff\1\71"+
            "\2\uffff\1\161\3\uffff\1\71\1\uffff\4\71\12\uffff\3\71\10\uffff"+
            "\16\71\1\uffff\1\71\1\uffff\3\71\14\uffff\3\71\174\uffff\1\71"+
            "\2\uffff\1\71\2\uffff\1\71\5\uffff\2\71\12\uffff\2\71\2\uffff"+
            "\1\71\1\uffff\1\71\1\uffff\1\71\1\uffff\3\71",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA92_eot = DFA.unpackEncodedString(DFA92_eotS);
    static final short[] DFA92_eof = DFA.unpackEncodedString(DFA92_eofS);
    static final char[] DFA92_min = DFA.unpackEncodedStringToUnsignedChars(DFA92_minS);
    static final char[] DFA92_max = DFA.unpackEncodedStringToUnsignedChars(DFA92_maxS);
    static final short[] DFA92_accept = DFA.unpackEncodedString(DFA92_acceptS);
    static final short[] DFA92_special = DFA.unpackEncodedString(DFA92_specialS);
    static final short[][] DFA92_transition;

    static {
        int numStates = DFA92_transitionS.length;
        DFA92_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA92_transition[i] = DFA.unpackEncodedString(DFA92_transitionS[i]);
        }
    }

    class DFA92 extends DFA {

        public DFA92(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 92;
            this.eot = DFA92_eot;
            this.eof = DFA92_eof;
            this.min = DFA92_min;
            this.max = DFA92_max;
            this.accept = DFA92_accept;
            this.special = DFA92_special;
            this.transition = DFA92_transition;
        }
        public String getDescription() {
            return "843:1: caseExpression : ( CASE ( whenClause )+ ( elseClause )? END | CASE expression ( whenClause )+ ( elseClause )? END -> ^( CASE2 expression ( whenClause )+ ( elseClause )? ) | evalOrExpression );";
        }
    }
    static final String DFA124_eotS =
        "\u073c\uffff";
    static final String DFA124_eofS =
        "\21\uffff\1\16\2\uffff\2\16\2\uffff\4\16\12\uffff\2\16\2\uffff"+
        "\2\16\u0710\uffff";
    static final String DFA124_minS =
        "\2\5\13\uffff\1\5\3\uffff\1\6\2\uffff\2\6\2\uffff\4\6\12\uffff"+
        "\2\6\2\uffff\2\6\10\uffff\1\u00e2\145\uffff\1\5\63\uffff\1\5\63"+
        "\uffff\1\5\63\uffff\1\5\63\uffff\1\5\63\uffff\1\5\63\uffff\1\5\63"+
        "\uffff\1\5\63\uffff\1\u00e8\63\uffff\1\5\63\uffff\1\5\63\uffff\1"+
        "\5\11\uffff\2\6\71\uffff\2\6\70\uffff\2\6\57\uffff\2\6\66\uffff"+
        "\2\6\101\uffff\2\6\70\uffff\2\6\66\uffff\2\6\62\uffff\2\6\75\uffff"+
        "\2\6\151\uffff\1\0\30\uffff\1\0\30\uffff\1\0\30\uffff\1\0\30\uffff"+
        "\1\0\30\uffff\1\0\114\uffff\1\0\30\uffff\1\0\30\uffff\1\0\30\uffff"+
        "\1\0\30\uffff\1\0\30\uffff\1\0\u00a3\uffff";
    static final String DFA124_maxS =
        "\2\u0100\13\uffff\1\u0100\3\uffff\1\u00fd\2\uffff\2\u00fd\2\uffff"+
        "\4\u00fd\12\uffff\2\u00fd\2\uffff\2\u00fd\10\uffff\1\u00e2\145\uffff"+
        "\1\u0100\63\uffff\1\u0100\63\uffff\1\u0100\63\uffff\1\u0100\63\uffff"+
        "\1\u0100\63\uffff\1\u0100\63\uffff\1\u0100\63\uffff\1\u0100\63\uffff"+
        "\1\u00fa\63\uffff\1\u0100\63\uffff\1\u0100\63\uffff\1\u00fe\11\uffff"+
        "\2\u00f7\71\uffff\2\u00f7\70\uffff\2\u00f7\57\uffff\2\u00f7\66\uffff"+
        "\2\u00f7\101\uffff\2\u00f7\70\uffff\2\u00f7\66\uffff\2\u00f7\62"+
        "\uffff\2\u00f7\75\uffff\2\u00f7\151\uffff\1\0\30\uffff\1\0\30\uffff"+
        "\1\0\30\uffff\1\0\30\uffff\1\0\30\uffff\1\0\114\uffff\1\0\30\uffff"+
        "\1\0\30\uffff\1\0\30\uffff\1\0\30\uffff\1\0\30\uffff\1\0\u00a3\uffff";
    static final String DFA124_acceptS =
        "\2\uffff\1\2\11\uffff\1\3\1\uffff\1\5\46\uffff\1\6\1\7\1\1\51\uffff"+
        "\1\10\1\4\u0274\uffff\11\6\2\uffff\71\6\2\uffff\70\6\2\uffff\57"+
        "\6\2\uffff\66\6\2\uffff\101\6\2\uffff\70\6\2\uffff\66\6\2\uffff"+
        "\60\6\4\uffff\75\6\2\uffff\57\6\1\11\71\6\1\uffff\30\6\1\uffff\30"+
        "\6\1\uffff\30\6\1\uffff\30\6\1\uffff\30\6\1\uffff\36\6\1\uffff\31"+
        "\6\1\uffff\23\6\1\uffff\30\6\1\uffff\30\6\1\uffff\30\6\1\uffff\30"+
        "\6\1\uffff\30\6\1\uffff\36\6\1\uffff\31\6\1\uffff\31\6\1\uffff\31"+
        "\6\2\uffff\64\6\1\uffff";
    static final String DFA124_specialS =
        "\1\0\u0099\uffff\1\1\63\uffff\1\2\63\uffff\1\3\63\uffff\1\4\63"+
        "\uffff\1\5\63\uffff\1\6\63\uffff\1\7\63\uffff\1\10\63\uffff\1\11"+
        "\63\uffff\1\12\63\uffff\1\13\63\uffff\1\14\11\uffff\1\15\1\16\71"+
        "\uffff\1\17\1\20\70\uffff\1\21\1\22\57\uffff\1\23\1\24\66\uffff"+
        "\1\25\1\26\101\uffff\1\27\1\30\70\uffff\1\31\1\32\66\uffff\1\33"+
        "\1\34\62\uffff\1\35\1\36\75\uffff\1\37\1\40\151\uffff\1\41\30\uffff"+
        "\1\42\30\uffff\1\43\30\uffff\1\44\30\uffff\1\45\30\uffff\1\46\114"+
        "\uffff\1\47\30\uffff\1\50\30\uffff\1\51\30\uffff\1\52\30\uffff\1"+
        "\53\30\uffff\1\54\u00a3\uffff}>";
    static final String[] DFA124_transitionS = {
            "\1\16\4\uffff\1\16\3\uffff\1\16\2\uffff\1\24\1\25\2\16\1\30"+
            "\1\31\1\32\1\33\1\21\10\uffff\1\16\1\uffff\4\16\12\uffff\3\16"+
            "\10\uffff\6\16\1\46\1\47\1\64\2\16\1\52\1\53\1\65\1\uffff\1"+
            "\16\1\uffff\3\16\14\uffff\3\2\174\uffff\1\2\2\uffff\1\16\2\uffff"+
            "\1\15\5\uffff\2\2\12\uffff\1\2\1\1\2\uffff\1\66\1\uffff\1\2"+
            "\1\uffff\1\14\1\uffff\1\16\2\2",
            "\1\67\4\uffff\1\67\3\uffff\1\67\2\uffff\11\67\10\uffff\1\67"+
            "\1\uffff\4\67\12\uffff\3\67\10\uffff\10\67\1\uffff\4\67\2\uffff"+
            "\1\67\1\uffff\3\67\u008b\uffff\1\2\2\uffff\1\67\32\uffff\1\2"+
            "\3\uffff\1\67\2\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\142\4\uffff\1\142\2\uffff\2\142\2\uffff\11\142\1\141\1"+
            "\142\6\uffff\1\142\1\uffff\4\142\12\uffff\3\142\10\uffff\16"+
            "\142\1\uffff\1\142\1\uffff\3\142\14\uffff\3\142\174\uffff\1"+
            "\142\2\uffff\1\142\2\uffff\1\142\5\uffff\2\142\12\uffff\2\142"+
            "\2\uffff\1\142\1\uffff\1\142\1\uffff\1\142\1\uffff\3\142",
            "",
            "",
            "",
            "\10\16\2\uffff\1\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\4\uffff\1\16\5\uffff\3\16\35\uffff\3\16\6\uffff\1\16\175\uffff"+
            "\1\16\1\uffff\2\16\1\u009a\5\16\2\uffff\16\16\1\uffff\1\16\2"+
            "\uffff\2\16",
            "",
            "",
            "\10\16\2\uffff\1\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\4\uffff\1\16\5\uffff\3\16\35\uffff\3\16\6\uffff\1\16\175\uffff"+
            "\1\16\1\uffff\2\16\1\u00ce\5\16\2\uffff\16\16\1\uffff\1\16\2"+
            "\uffff\2\16",
            "\10\16\2\uffff\1\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\4\uffff\1\16\5\uffff\3\16\35\uffff\3\16\6\uffff\1\16\175\uffff"+
            "\1\16\1\uffff\2\16\1\u0102\5\16\2\uffff\16\16\1\uffff\1\16\2"+
            "\uffff\2\16",
            "",
            "",
            "\10\16\2\uffff\1\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\4\uffff\1\16\5\uffff\3\16\35\uffff\3\16\6\uffff\1\16\175\uffff"+
            "\1\16\1\uffff\2\16\1\u0136\5\16\2\uffff\16\16\1\uffff\1\16\2"+
            "\uffff\2\16",
            "\10\16\2\uffff\1\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\4\uffff\1\16\5\uffff\3\16\35\uffff\3\16\6\uffff\1\16\175\uffff"+
            "\1\16\1\uffff\2\16\1\u016a\5\16\2\uffff\16\16\1\uffff\1\16\2"+
            "\uffff\2\16",
            "\10\16\2\uffff\1\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\4\uffff\1\16\5\uffff\3\16\35\uffff\3\16\6\uffff\1\16\175\uffff"+
            "\1\16\1\uffff\2\16\1\u019e\5\16\2\uffff\16\16\1\uffff\1\16\2"+
            "\uffff\2\16",
            "\10\16\2\uffff\1\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\4\uffff\1\16\5\uffff\3\16\35\uffff\3\16\6\uffff\1\16\175\uffff"+
            "\1\16\1\uffff\2\16\1\u01d2\5\16\2\uffff\16\16\1\uffff\1\16\2"+
            "\uffff\2\16",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\10\16\2\uffff\1\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\4\uffff\1\16\5\uffff\3\16\35\uffff\3\16\6\uffff\1\16\175\uffff"+
            "\1\16\1\uffff\2\16\1\u0206\5\16\2\uffff\16\16\1\uffff\1\16\2"+
            "\uffff\2\16",
            "\10\16\2\uffff\1\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\4\uffff\1\16\5\uffff\3\16\35\uffff\3\16\6\uffff\1\16\175\uffff"+
            "\1\16\1\uffff\2\16\1\u023a\5\16\2\uffff\16\16\1\uffff\1\16\2"+
            "\uffff\2\16",
            "",
            "",
            "\10\16\2\uffff\1\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\4\uffff\1\16\5\uffff\3\16\35\uffff\3\16\6\uffff\1\16\175\uffff"+
            "\1\16\1\uffff\2\16\1\u026e\5\16\2\uffff\16\16\1\uffff\1\16\2"+
            "\uffff\2\16",
            "\10\16\2\uffff\1\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\4\uffff\1\16\5\uffff\3\16\35\uffff\3\16\6\uffff\1\16\175\uffff"+
            "\1\16\1\uffff\2\16\1\u02a2\5\16\2\uffff\16\16\1\uffff\1\16\2"+
            "\uffff\2\16",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u02d6",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0307\4\uffff\1\u02eb\2\uffff\1\u0310\1\u02ec\2\uffff\1"+
            "\u02ed\1\u02ee\1\u02ef\1\u02f0\1\u02f1\1\u02f2\1\u02f3\1\u02f4"+
            "\1\u02ea\1\uffff\1\u02d9\6\uffff\1\u030a\1\uffff\1\u030c\1\u0308"+
            "\1\u0309\1\u030b\5\uffff\1\u02d8\1\u02d7\3\uffff\1\u02f5\1\u02f6"+
            "\1\u02f7\10\uffff\1\u02f8\1\u02f9\1\u02fa\1\u02fc\1\u02fd\1"+
            "\u02fe\1\u02ff\1\u0300\1\u030d\1\u0301\1\u0302\1\u0303\1\u0304"+
            "\1\u030e\1\uffff\1\u0305\1\uffff\1\u0306\1\u02fb\1\u02e9\14"+
            "\uffff\1\u02e2\1\u02e3\1\u02e4\174\uffff\1\u02df\2\uffff\1\u02e7"+
            "\2\uffff\1\u02e6\1\uffff\1\u0311\3\uffff\1\u02e0\1\u02e1\12"+
            "\uffff\1\u02db\1\u02da\2\uffff\1\u030f\1\uffff\1\u02dc\1\uffff"+
            "\1\u02e5\1\uffff\1\u02e8\1\u02dd\1\u02de",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0342\4\uffff\1\u0326\2\uffff\1\u034b\1\u0327\2\uffff\1"+
            "\u0328\1\u0329\1\u032a\1\u032b\1\u032c\1\u032d\1\u032e\1\u032f"+
            "\1\u0325\1\uffff\1\u0314\6\uffff\1\u0345\1\uffff\1\u0347\1\u0343"+
            "\1\u0344\1\u0346\5\uffff\1\u0313\1\u0312\3\uffff\1\u0330\1\u0331"+
            "\1\u0332\10\uffff\1\u0333\1\u0334\1\u0335\1\u0337\1\u0338\1"+
            "\u0339\1\u033a\1\u033b\1\u0348\1\u033c\1\u033d\1\u033e\1\u033f"+
            "\1\u0349\1\uffff\1\u0340\1\uffff\1\u0341\1\u0336\1\u0324\14"+
            "\uffff\1\u031d\1\u031e\1\u031f\174\uffff\1\u031a\2\uffff\1\u0322"+
            "\2\uffff\1\u0321\5\uffff\1\u031b\1\u031c\12\uffff\1\u0316\1"+
            "\u0315\2\uffff\1\u034a\1\uffff\1\u0317\1\uffff\1\u0320\1\uffff"+
            "\1\u0323\1\u0318\1\u0319",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u037c\4\uffff\1\u0360\2\uffff\1\u0385\1\u0361\2\uffff\1"+
            "\u0362\1\u0363\1\u0364\1\u0365\1\u0366\1\u0367\1\u0368\1\u0369"+
            "\1\u035f\1\uffff\1\u034e\6\uffff\1\u037f\1\uffff\1\u0381\1\u037d"+
            "\1\u037e\1\u0380\5\uffff\1\u034d\1\u034c\3\uffff\1\u036a\1\u036b"+
            "\1\u036c\10\uffff\1\u036d\1\u036e\1\u036f\1\u0371\1\u0372\1"+
            "\u0373\1\u0374\1\u0375\1\u0382\1\u0376\1\u0377\1\u0378\1\u0379"+
            "\1\u0383\1\uffff\1\u037a\1\uffff\1\u037b\1\u0370\1\u035e\14"+
            "\uffff\1\u0357\1\u0358\1\u0359\174\uffff\1\u0354\2\uffff\1\u035c"+
            "\2\uffff\1\u035b\5\uffff\1\u0355\1\u0356\12\uffff\1\u0350\1"+
            "\u034f\2\uffff\1\u0384\1\uffff\1\u0351\1\uffff\1\u035a\1\uffff"+
            "\1\u035d\1\u0352\1\u0353",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u03b4\4\uffff\1\u0398\2\uffff\1\u03bd\1\u0399\2\uffff\1"+
            "\u039a\1\u039b\1\u039c\1\u039d\1\u039e\1\u039f\1\u03a0\1\u03a1"+
            "\1\u0397\1\uffff\1\u0388\6\uffff\1\u03b7\1\uffff\1\u03b9\1\u03b5"+
            "\1\u03b6\1\u03b8\12\uffff\1\u03a2\1\u03a3\1\u03a4\10\uffff\1"+
            "\u03a5\1\u03a6\1\u03a7\1\u03a9\1\u03aa\1\u03ab\1\u03ac\1\u03ad"+
            "\1\u03ba\1\u03ae\1\u03af\1\u03b0\1\u03b1\1\u03bb\1\uffff\1\u03b2"+
            "\1\uffff\1\u03b3\1\u03a8\1\u0396\14\uffff\1\u038f\1\u0390\1"+
            "\u0391\174\uffff\1\u038e\2\uffff\1\u0394\2\uffff\1\u0393\5\uffff"+
            "\1\u0386\1\u0387\12\uffff\1\u038a\1\u0389\2\uffff\1\u03bc\1"+
            "\uffff\1\u038b\1\uffff\1\u0392\1\uffff\1\u0395\1\u038c\1\u038d",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u03ee\4\uffff\1\u03d2\2\uffff\1\u03f7\1\u03d3\2\uffff\1"+
            "\u03d4\1\u03d5\1\u03d6\1\u03d7\1\u03d8\1\u03d9\1\u03da\1\u03db"+
            "\1\u03d1\1\uffff\1\u03c2\6\uffff\1\u03f1\1\uffff\1\u03f3\1\u03ef"+
            "\1\u03f0\1\u03f2\5\uffff\1\u03c1\1\u03c0\3\uffff\1\u03dc\1\u03dd"+
            "\1\u03de\10\uffff\1\u03df\1\u03e0\1\u03e1\1\u03e3\1\u03e4\1"+
            "\u03e5\1\u03e6\1\u03e7\1\u03f4\1\u03e8\1\u03e9\1\u03ea\1\u03eb"+
            "\1\u03f5\1\uffff\1\u03ec\1\uffff\1\u03ed\1\u03e2\1\u03d0\14"+
            "\uffff\1\u03c9\1\u03ca\1\u03cb\174\uffff\1\u03c8\2\uffff\1\u03ce"+
            "\2\uffff\1\u03cd\5\uffff\1\u03be\1\u03bf\12\uffff\1\u03c4\1"+
            "\u03c3\2\uffff\1\u03f6\1\uffff\1\u03c5\1\uffff\1\u03cc\1\uffff"+
            "\1\u03cf\1\u03c6\1\u03c7",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0428\4\uffff\1\u040c\2\uffff\1\u0431\1\u040d\2\uffff\1"+
            "\u040e\1\u040f\1\u0410\1\u0411\1\u0412\1\u0413\1\u0414\1\u0415"+
            "\1\u040b\1\uffff\1\u03fa\6\uffff\1\u042b\1\uffff\1\u042d\1\u0429"+
            "\1\u042a\1\u042c\5\uffff\1\u03f9\1\u03f8\3\uffff\1\u0416\1\u0417"+
            "\1\u0418\10\uffff\1\u0419\1\u041a\1\u041b\1\u041d\1\u041e\1"+
            "\u041f\1\u0420\1\u0421\1\u042e\1\u0422\1\u0423\1\u0424\1\u0425"+
            "\1\u042f\1\uffff\1\u0426\1\uffff\1\u0427\1\u041c\1\u040a\14"+
            "\uffff\1\u0403\1\u0404\1\u0405\174\uffff\1\u0400\2\uffff\1\u0408"+
            "\2\uffff\1\u0407\5\uffff\1\u0401\1\u0402\12\uffff\1\u03fc\1"+
            "\u03fb\2\uffff\1\u0430\1\uffff\1\u03fd\1\uffff\1\u0406\1\uffff"+
            "\1\u0409\1\u03fe\1\u03ff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0462\4\uffff\1\u0446\2\uffff\1\u046b\1\u0447\2\uffff\1"+
            "\u0448\1\u0449\1\u044a\1\u044b\1\u044c\1\u044d\1\u044e\1\u044f"+
            "\1\u0445\1\uffff\1\u0434\6\uffff\1\u0465\1\uffff\1\u0467\1\u0463"+
            "\1\u0464\1\u0466\5\uffff\1\u0433\1\u0432\3\uffff\1\u0450\1\u0451"+
            "\1\u0452\10\uffff\1\u0453\1\u0454\1\u0455\1\u0457\1\u0458\1"+
            "\u0459\1\u045a\1\u045b\1\u0468\1\u045c\1\u045d\1\u045e\1\u045f"+
            "\1\u0469\1\uffff\1\u0460\1\uffff\1\u0461\1\u0456\1\u0444\14"+
            "\uffff\1\u043d\1\u043e\1\u043f\174\uffff\1\u043a\2\uffff\1\u0442"+
            "\2\uffff\1\u0441\5\uffff\1\u043b\1\u043c\12\uffff\1\u0436\1"+
            "\u0435\2\uffff\1\u046a\1\uffff\1\u0437\1\uffff\1\u0440\1\uffff"+
            "\1\u0443\1\u0438\1\u0439",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u049a\4\uffff\1\u047e\2\uffff\1\u04a3\1\u047f\2\uffff\1"+
            "\u0480\1\u0481\1\u0482\1\u0483\1\u0484\1\u0485\1\u0486\1\u0487"+
            "\1\u047d\1\uffff\1\u046c\6\uffff\1\u049d\1\uffff\1\u049f\1\u049b"+
            "\1\u049c\1\u049e\12\uffff\1\u0488\1\u0489\1\u048a\10\uffff\1"+
            "\u048b\1\u048c\1\u048d\1\u048f\1\u0490\1\u0491\1\u0492\1\u0493"+
            "\1\u04a0\1\u0494\1\u0495\1\u0496\1\u0497\1\u04a1\1\uffff\1\u0498"+
            "\1\uffff\1\u0499\1\u048e\1\u047c\14\uffff\1\u0475\1\u0476\1"+
            "\u0477\174\uffff\1\u0472\2\uffff\1\u047a\2\uffff\1\u0479\5\uffff"+
            "\1\u0473\1\u0474\12\uffff\1\u046e\1\u046d\2\uffff\1\u04a2\1"+
            "\uffff\1\u046f\1\uffff\1\u0478\1\uffff\1\u047b\1\u0470\1\u0471",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\2\16\20\uffff\1\u04a4",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u04d5\4\uffff\1\u04b9\2\uffff\1\u04de\1\u04ba\2\uffff\1"+
            "\u04bb\1\u04bc\1\u04bd\1\u04be\1\u04bf\1\u04c0\1\u04c1\1\u04c2"+
            "\1\u04b8\1\uffff\1\u04a9\6\uffff\1\u04d8\1\uffff\1\u04da\1\u04d6"+
            "\1\u04d7\1\u04d9\12\uffff\1\u04c3\1\u04c4\1\u04c5\10\uffff\1"+
            "\u04c6\1\u04c7\1\u04c8\1\u04ca\1\u04cb\1\u04cc\1\u04cd\1\u04ce"+
            "\1\u04db\1\u04cf\1\u04d0\1\u04d1\1\u04d2\1\u04dc\1\uffff\1\u04d3"+
            "\1\uffff\1\u04d4\1\u04c9\1\u04b7\14\uffff\1\u04b0\1\u04b1\1"+
            "\u04b2\174\uffff\1\u04af\2\uffff\1\u04b5\2\uffff\1\u04b4\5\uffff"+
            "\1\u04a7\1\u04a8\12\uffff\1\u04ab\1\u04aa\2\uffff\1\u04dd\1"+
            "\uffff\1\u04ac\1\uffff\1\u04b3\1\uffff\1\u04b6\1\u04ad\1\u04ae",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u050d\4\uffff\1\u04f1\2\uffff\1\u0516\1\u04f2\2\uffff\1"+
            "\u04f3\1\u04f4\1\u04f5\1\u04f6\1\u04f7\1\u04f8\1\u04f9\1\u04fa"+
            "\1\u04f0\1\uffff\1\u04df\6\uffff\1\u0510\1\uffff\1\u0512\1\u050e"+
            "\1\u050f\1\u0511\12\uffff\1\u04fb\1\u04fc\1\u04fd\10\uffff\1"+
            "\u04fe\1\u04ff\1\u0500\1\u0502\1\u0503\1\u0504\1\u0505\1\u0506"+
            "\1\u0513\1\u0507\1\u0508\1\u0509\1\u050a\1\u0514\1\uffff\1\u050b"+
            "\1\uffff\1\u050c\1\u0501\1\u04ef\14\uffff\1\u04e8\1\u04e9\1"+
            "\u04ea\174\uffff\1\u04e5\2\uffff\1\u04ed\2\uffff\1\u04ec\5\uffff"+
            "\1\u04e6\1\u04e7\12\uffff\1\u04e1\1\u04e0\2\uffff\1\u0515\1"+
            "\uffff\1\u04e2\1\uffff\1\u04eb\1\uffff\1\u04ee\1\u04e3\1\u04e4",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0538\4\uffff\1\u051c\3\uffff\1\u051d\2\uffff\1\u051e\1"+
            "\u051f\1\u0520\1\u0521\1\u0522\1\u0523\1\u0524\1\u0525\1\u051b"+
            "\1\u0517\7\uffff\1\u053b\1\uffff\1\u053d\1\u0539\1\u053a\1\u053c"+
            "\12\uffff\1\u0526\1\u0527\1\u0528\10\uffff\1\u0529\1\u052a\1"+
            "\u052b\1\u052d\1\u052e\1\u052f\1\u0530\1\u0531\1\uffff\1\u0532"+
            "\1\u0533\1\u0534\1\u0535\2\uffff\1\u0536\1\uffff\1\u0537\1\u052c"+
            "\1\u051a\u008e\uffff\1\u0518\36\uffff\1\u0519",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0553\1\u0554\1\u0555\1\u0556\1\uffff\1\u0550\1\u054f\1"+
            "\u0552\33\uffff\1\u0549\u00b6\uffff\1\u0548\2\uffff\1\u0551"+
            "\1\u053e\5\uffff\1\u054c\1\u054d\1\u054e\1\u054a\1\u054b\1\u0544"+
            "\1\u0545\1\u0546\1\u0547\1\u0543\1\u0541\1\u0542\1\u053f\1\u0540",
            "\1\u056c\1\u056d\1\u056e\1\u056f\1\uffff\1\u0569\1\u0568\1"+
            "\u056b\33\uffff\1\u0562\u00b6\uffff\1\u0561\2\uffff\1\u056a"+
            "\1\u0557\5\uffff\1\u0565\1\u0566\1\u0567\1\u0563\1\u0564\1\u055d"+
            "\1\u055e\1\u055f\1\u0560\1\u055c\1\u055a\1\u055b\1\u0558\1\u0559",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0585\1\u0586\1\u0587\1\u0588\1\uffff\1\u0582\1\u0581\1"+
            "\u0584\33\uffff\1\u057b\u00b6\uffff\1\u057a\2\uffff\1\u0583"+
            "\1\u0570\5\uffff\1\u057e\1\u057f\1\u0580\1\u057c\1\u057d\1\u0576"+
            "\1\u0577\1\u0578\1\u0579\1\u0575\1\u0573\1\u0574\1\u0571\1\u0572",
            "\1\u059e\1\u059f\1\u05a0\1\u05a1\1\uffff\1\u059b\1\u059a\1"+
            "\u059d\33\uffff\1\u0594\u00b6\uffff\1\u0593\2\uffff\1\u059c"+
            "\1\u0589\5\uffff\1\u0597\1\u0598\1\u0599\1\u0595\1\u0596\1\u058f"+
            "\1\u0590\1\u0591\1\u0592\1\u058e\1\u058c\1\u058d\1\u058a\1\u058b",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u05b7\1\u05b8\1\u05b9\1\u05ba\1\uffff\1\u05b4\1\u05b3\1"+
            "\u05b6\33\uffff\1\u05ad\u00b6\uffff\1\u05ac\2\uffff\1\u05b5"+
            "\1\u05a2\5\uffff\1\u05b0\1\u05b1\1\u05b2\1\u05ae\1\u05af\1\u05a8"+
            "\1\u05a9\1\u05aa\1\u05ab\1\u05a7\1\u05a5\1\u05a6\1\u05a3\1\u05a4",
            "\1\u05d0\1\u05d1\1\u05d2\1\u05d3\1\uffff\1\u05cd\1\u05cc\1"+
            "\u05cf\33\uffff\1\u05c6\u00b6\uffff\1\u05c5\2\uffff\1\u05ce"+
            "\1\u05bb\5\uffff\1\u05c9\1\u05ca\1\u05cb\1\u05c7\1\u05c8\1\u05c1"+
            "\1\u05c2\1\u05c3\1\u05c4\1\u05c0\1\u05be\1\u05bf\1\u05bc\1\u05bd",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u05e9\1\u05ea\1\u05eb\1\u05ec\1\uffff\1\u05e6\1\u05e5\1"+
            "\u05e8\33\uffff\1\u05df\u00b4\uffff\1\u05e7\1\uffff\1\u05de"+
            "\2\uffff\1\16\1\u05d4\5\uffff\1\u05e2\1\u05e3\1\u05e4\1\u05e0"+
            "\1\u05e1\1\u05da\1\u05db\1\u05dc\1\u05dd\1\u05d9\1\u05d7\1\u05d8"+
            "\1\u05d5\1\u05d6",
            "\1\u0603\1\u0604\1\u0605\1\u0606\1\uffff\1\u0600\1\u05ff\1"+
            "\u0602\33\uffff\1\u05f9\u00b4\uffff\1\u0601\1\uffff\1\u05f8"+
            "\2\uffff\1\16\1\u05ee\5\uffff\1\u05fc\1\u05fd\1\u05fe\1\u05fa"+
            "\1\u05fb\1\u05f4\1\u05f5\1\u05f6\1\u05f7\1\u05f3\1\u05f1\1\u05f2"+
            "\1\u05ef\1\u05f0",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u061d\1\u061e\1\u061f\1\u0620\1\uffff\1\u061a\1\u0619\1"+
            "\u061c\33\uffff\1\u0613\u00b6\uffff\1\u0612\2\uffff\1\u061b"+
            "\1\u0608\5\uffff\1\u0616\1\u0617\1\u0618\1\u0614\1\u0615\1\u060e"+
            "\1\u060f\1\u0610\1\u0611\1\u060d\1\u060b\1\u060c\1\u0609\1\u060a",
            "\1\u0636\1\u0637\1\u0638\1\u0639\1\uffff\1\u0633\1\u0632\1"+
            "\u0635\33\uffff\1\u062c\u00b6\uffff\1\u062b\2\uffff\1\u0634"+
            "\1\u0621\5\uffff\1\u062f\1\u0630\1\u0631\1\u062d\1\u062e\1\u0627"+
            "\1\u0628\1\u0629\1\u062a\1\u0626\1\u0624\1\u0625\1\u0622\1\u0623",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u064f\1\u0650\1\u0651\1\u0652\1\uffff\1\u064c\1\u064b\1"+
            "\u064e\33\uffff\1\u0645\u00b6\uffff\1\u0644\2\uffff\1\u064d"+
            "\1\u063a\5\uffff\1\u0648\1\u0649\1\u064a\1\u0646\1\u0647\1\u0640"+
            "\1\u0641\1\u0642\1\u0643\1\u063f\1\u063d\1\u063e\1\u063b\1\u063c",
            "\1\u0668\1\u0669\1\u066a\1\u066b\1\uffff\1\u0665\1\u0664\1"+
            "\u0667\33\uffff\1\u065e\u00b6\uffff\1\u065d\2\uffff\1\u0666"+
            "\1\u0653\5\uffff\1\u0661\1\u0662\1\u0663\1\u065f\1\u0660\1\u0659"+
            "\1\u065a\1\u065b\1\u065c\1\u0658\1\u0656\1\u0657\1\u0654\1\u0655",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0681\1\u0682\1\u0683\1\u0684\1\uffff\1\u067e\1\u067d\1"+
            "\u0680\33\uffff\1\u0677\u00b6\uffff\1\u0676\2\uffff\1\u067f"+
            "\1\u066c\5\uffff\1\u067a\1\u067b\1\u067c\1\u0678\1\u0679\1\u0672"+
            "\1\u0673\1\u0674\1\u0675\1\u0671\1\u066f\1\u0670\1\u066d\1\u066e",
            "\1\u069a\1\u069b\1\u069c\1\u069d\1\uffff\1\u0697\1\u0696\1"+
            "\u0699\33\uffff\1\u0690\u00b6\uffff\1\u068f\2\uffff\1\u0698"+
            "\1\u0685\5\uffff\1\u0693\1\u0694\1\u0695\1\u0691\1\u0692\1\u068b"+
            "\1\u068c\1\u068d\1\u068e\1\u068a\1\u0688\1\u0689\1\u0686\1\u0687",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u06b3\1\u06b4\1\u06b5\1\u06b6\1\uffff\1\u06b0\1\u06af\1"+
            "\u06b2\33\uffff\1\u06a9\u00b4\uffff\1\u06b1\1\uffff\1\u06a8"+
            "\2\uffff\1\16\1\u069e\5\uffff\1\u06ac\1\u06ad\1\u06ae\1\u06aa"+
            "\1\u06ab\1\u06a4\1\u06a5\1\u06a6\1\u06a7\1\u06a3\1\u06a1\1\u06a2"+
            "\1\u069f\1\u06a0",
            "\1\u06cd\1\u06ce\1\u06cf\1\u06d0\1\uffff\1\u06ca\1\u06c9\1"+
            "\u06cc\33\uffff\1\u06c3\u00b4\uffff\1\u06cb\1\uffff\1\u06c2"+
            "\2\uffff\1\16\1\u06b8\5\uffff\1\u06c6\1\u06c7\1\u06c8\1\u06c4"+
            "\1\u06c5\1\u06be\1\u06bf\1\u06c0\1\u06c1\1\u06bd\1\u06bb\1\u06bc"+
            "\1\u06b9\1\u06ba",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u06e7\1\u06e8\1\u06e9\1\u06ea\1\uffff\1\u06e4\1\u06e3\1"+
            "\u06e6\33\uffff\1\u06dd\u00b4\uffff\1\u06e5\1\uffff\1\u06dc"+
            "\2\uffff\1\16\1\u06d2\5\uffff\1\u06e0\1\u06e1\1\u06e2\1\u06de"+
            "\1\u06df\1\u06d8\1\u06d9\1\u06da\1\u06db\1\u06d7\1\u06d5\1\u06d6"+
            "\1\u06d3\1\u06d4",
            "\1\u0701\1\u0702\1\u0703\1\u0704\1\uffff\1\u06fe\1\u06fd\1"+
            "\u0700\33\uffff\1\u06f7\u00b4\uffff\1\u06ff\1\uffff\1\u06f6"+
            "\2\uffff\1\16\1\u06ec\5\uffff\1\u06fa\1\u06fb\1\u06fc\1\u06f8"+
            "\1\u06f9\1\u06f2\1\u06f3\1\u06f4\1\u06f5\1\u06f1\1\u06ef\1\u06f0"+
            "\1\u06ed\1\u06ee",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u071d\1\u071e\1\u071f\1\u0720\1\uffff\1\u0719\1\u0718\1"+
            "\u071c\2\uffff\1\u071b\30\uffff\1\u0712\u00b4\uffff\1\u071a"+
            "\1\uffff\1\u0711\2\uffff\1\16\1\u0707\5\uffff\1\u0715\1\u0716"+
            "\1\u0717\1\u0713\1\u0714\1\u070d\1\u070e\1\u070f\1\u0710\1\u070c"+
            "\1\u070a\1\u070b\1\u0708\1\u0709",
            "\1\u0737\1\u0738\1\u0739\1\u073a\1\uffff\1\u0733\1\u0732\1"+
            "\u0736\2\uffff\1\u0735\30\uffff\1\u072c\u00b4\uffff\1\u0734"+
            "\1\uffff\1\u072b\2\uffff\1\16\1\u0721\5\uffff\1\u072f\1\u0730"+
            "\1\u0731\1\u072d\1\u072e\1\u0727\1\u0728\1\u0729\1\u072a\1\u0726"+
            "\1\u0724\1\u0725\1\u0722\1\u0723",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA124_eot = DFA.unpackEncodedString(DFA124_eotS);
    static final short[] DFA124_eof = DFA.unpackEncodedString(DFA124_eofS);
    static final char[] DFA124_min = DFA.unpackEncodedStringToUnsignedChars(DFA124_minS);
    static final char[] DFA124_max = DFA.unpackEncodedStringToUnsignedChars(DFA124_maxS);
    static final short[] DFA124_accept = DFA.unpackEncodedString(DFA124_acceptS);
    static final short[] DFA124_special = DFA.unpackEncodedString(DFA124_specialS);
    static final short[][] DFA124_transition;

    static {
        int numStates = DFA124_transitionS.length;
        DFA124_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA124_transition[i] = DFA.unpackEncodedString(DFA124_transitionS[i]);
        }
    }

    class DFA124 extends DFA {

        public DFA124(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 124;
            this.eot = DFA124_eot;
            this.eof = DFA124_eof;
            this.min = DFA124_min;
            this.max = DFA124_max;
            this.accept = DFA124_accept;
            this.special = DFA124_special;
            this.transition = DFA124_transition;
        }
        public String getDescription() {
            return "959:1: unaryExpression : ( MINUS eventProperty -> ^( UNARY_MINUS eventProperty ) | constant | substitution | LPAREN expression RPAREN | eventPropertyOrLibFunction | ( builtinFunc )=> ( builtinFunc ) | arrayExpression | subSelectExpression | existsSubSelectExpression );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA124_0 = input.LA(1);

                         
                        int index124_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA124_0==MINUS) ) {s = 1;}

                        else if ( ((LA124_0>=BOOLEAN_TRUE && LA124_0<=VALUE_NULL)||LA124_0==NUM_DOUBLE||(LA124_0>=STRING_LITERAL && LA124_0<=QUOTED_STRING_LITERAL)||LA124_0==PLUS||LA124_0==NUM_INT||(LA124_0>=NUM_LONG && LA124_0<=NUM_FLOAT)) ) {s = 2;}

                        else if ( (LA124_0==QUESTION) ) {s = 12;}

                        else if ( (LA124_0==LPAREN) ) {s = 13;}

                        else if ( (LA124_0==WINDOW||LA124_0==ESCAPE||LA124_0==EVERY_EXPR||(LA124_0>=MAX && LA124_0<=MIN)||LA124_0==OUTER||(LA124_0>=JOIN && LA124_0<=FULL)||(LA124_0>=EVENTS && LA124_0<=LAST)||(LA124_0>=UNIDIRECTIONAL && LA124_0<=METADATASQL)||(LA124_0>=WEEKDAY && LA124_0<=LW)||LA124_0==SNAPSHOT||(LA124_0>=VARIABLE && LA124_0<=AT)||LA124_0==IDENT||LA124_0==TICKED_STRING_LITERAL) ) {s = 14;}

                        else if ( (LA124_0==COUNT) ) {s = 17;}

                        else if ( (LA124_0==SUM) ) {s = 20;}

                        else if ( (LA124_0==AVG) ) {s = 21;}

                        else if ( (LA124_0==COALESCE) ) {s = 24;}

                        else if ( (LA124_0==MEDIAN) ) {s = 25;}

                        else if ( (LA124_0==STDDEV) ) {s = 26;}

                        else if ( (LA124_0==AVEDEV) ) {s = 27;}

                        else if ( (LA124_0==PREVIOUS) ) {s = 38;}

                        else if ( (LA124_0==PRIOR) ) {s = 39;}

                        else if ( (LA124_0==INSTANCEOF) ) {s = 42;}

                        else if ( (LA124_0==CAST) ) {s = 43;}

                        else if ( (LA124_0==EXISTS) ) {s = 52;}

                        else if ( (LA124_0==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 53;}

                        else if ( (LA124_0==LCURLY) ) {s = 54;}

                         
                        input.seek(index124_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA124_154 = input.LA(1);

                         
                        int index124_154 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA124_154==ALL) && (synpred3_EsperEPL2Grammar())) {s = 727;}

                        else if ( (LA124_154==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 728;}

                        else if ( (LA124_154==CASE) && (synpred3_EsperEPL2Grammar())) {s = 729;}

                        else if ( (LA124_154==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 730;}

                        else if ( (LA124_154==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 731;}

                        else if ( (LA124_154==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 732;}

                        else if ( (LA124_154==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 733;}

                        else if ( (LA124_154==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 734;}

                        else if ( (LA124_154==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 735;}

                        else if ( (LA124_154==STRING_LITERAL) ) {s = 736;}

                        else if ( (LA124_154==QUOTED_STRING_LITERAL) ) {s = 737;}

                        else if ( (LA124_154==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 738;}

                        else if ( (LA124_154==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 739;}

                        else if ( (LA124_154==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 740;}

                        else if ( (LA124_154==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 741;}

                        else if ( (LA124_154==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 742;}

                        else if ( (LA124_154==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 743;}

                        else if ( (LA124_154==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 744;}

                        else if ( (LA124_154==AT) && (synpred3_EsperEPL2Grammar())) {s = 745;}

                        else if ( (LA124_154==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 746;}

                        else if ( (LA124_154==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 747;}

                        else if ( (LA124_154==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 748;}

                        else if ( (LA124_154==SUM) && (synpred3_EsperEPL2Grammar())) {s = 749;}

                        else if ( (LA124_154==AVG) && (synpred3_EsperEPL2Grammar())) {s = 750;}

                        else if ( (LA124_154==MAX) && (synpred3_EsperEPL2Grammar())) {s = 751;}

                        else if ( (LA124_154==MIN) && (synpred3_EsperEPL2Grammar())) {s = 752;}

                        else if ( (LA124_154==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 753;}

                        else if ( (LA124_154==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 754;}

                        else if ( (LA124_154==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 755;}

                        else if ( (LA124_154==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 756;}

                        else if ( (LA124_154==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 757;}

                        else if ( (LA124_154==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 758;}

                        else if ( (LA124_154==LAST) && (synpred3_EsperEPL2Grammar())) {s = 759;}

                        else if ( (LA124_154==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 760;}

                        else if ( (LA124_154==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 761;}

                        else if ( (LA124_154==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 762;}

                        else if ( (LA124_154==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 763;}

                        else if ( (LA124_154==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 764;}

                        else if ( (LA124_154==SQL) && (synpred3_EsperEPL2Grammar())) {s = 765;}

                        else if ( (LA124_154==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 766;}

                        else if ( (LA124_154==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 767;}

                        else if ( (LA124_154==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 768;}

                        else if ( (LA124_154==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 769;}

                        else if ( (LA124_154==LW) && (synpred3_EsperEPL2Grammar())) {s = 770;}

                        else if ( (LA124_154==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 771;}

                        else if ( (LA124_154==CAST) && (synpred3_EsperEPL2Grammar())) {s = 772;}

                        else if ( (LA124_154==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 773;}

                        else if ( (LA124_154==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 774;}

                        else if ( (LA124_154==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 775;}

                        else if ( (LA124_154==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 776;}

                        else if ( (LA124_154==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 777;}

                        else if ( (LA124_154==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 778;}

                        else if ( (LA124_154==FULL) && (synpred3_EsperEPL2Grammar())) {s = 779;}

                        else if ( (LA124_154==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 780;}

                        else if ( (LA124_154==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 781;}

                        else if ( (LA124_154==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 782;}

                        else if ( (LA124_154==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 783;}

                        else if ( (LA124_154==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 784;}

                        else if ( (LA124_154==STAR) && (synpred3_EsperEPL2Grammar())) {s = 785;}

                         
                        input.seek(index124_154);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA124_206 = input.LA(1);

                         
                        int index124_206 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA124_206==ALL) && (synpred3_EsperEPL2Grammar())) {s = 786;}

                        else if ( (LA124_206==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 787;}

                        else if ( (LA124_206==CASE) && (synpred3_EsperEPL2Grammar())) {s = 788;}

                        else if ( (LA124_206==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 789;}

                        else if ( (LA124_206==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 790;}

                        else if ( (LA124_206==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 791;}

                        else if ( (LA124_206==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 792;}

                        else if ( (LA124_206==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 793;}

                        else if ( (LA124_206==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 794;}

                        else if ( (LA124_206==STRING_LITERAL) ) {s = 795;}

                        else if ( (LA124_206==QUOTED_STRING_LITERAL) ) {s = 796;}

                        else if ( (LA124_206==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 797;}

                        else if ( (LA124_206==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 798;}

                        else if ( (LA124_206==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 799;}

                        else if ( (LA124_206==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 800;}

                        else if ( (LA124_206==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 801;}

                        else if ( (LA124_206==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 802;}

                        else if ( (LA124_206==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 803;}

                        else if ( (LA124_206==AT) && (synpred3_EsperEPL2Grammar())) {s = 804;}

                        else if ( (LA124_206==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 805;}

                        else if ( (LA124_206==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 806;}

                        else if ( (LA124_206==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 807;}

                        else if ( (LA124_206==SUM) && (synpred3_EsperEPL2Grammar())) {s = 808;}

                        else if ( (LA124_206==AVG) && (synpred3_EsperEPL2Grammar())) {s = 809;}

                        else if ( (LA124_206==MAX) && (synpred3_EsperEPL2Grammar())) {s = 810;}

                        else if ( (LA124_206==MIN) && (synpred3_EsperEPL2Grammar())) {s = 811;}

                        else if ( (LA124_206==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 812;}

                        else if ( (LA124_206==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 813;}

                        else if ( (LA124_206==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 814;}

                        else if ( (LA124_206==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 815;}

                        else if ( (LA124_206==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 816;}

                        else if ( (LA124_206==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 817;}

                        else if ( (LA124_206==LAST) && (synpred3_EsperEPL2Grammar())) {s = 818;}

                        else if ( (LA124_206==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 819;}

                        else if ( (LA124_206==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 820;}

                        else if ( (LA124_206==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 821;}

                        else if ( (LA124_206==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 822;}

                        else if ( (LA124_206==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 823;}

                        else if ( (LA124_206==SQL) && (synpred3_EsperEPL2Grammar())) {s = 824;}

                        else if ( (LA124_206==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 825;}

                        else if ( (LA124_206==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 826;}

                        else if ( (LA124_206==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 827;}

                        else if ( (LA124_206==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 828;}

                        else if ( (LA124_206==LW) && (synpred3_EsperEPL2Grammar())) {s = 829;}

                        else if ( (LA124_206==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 830;}

                        else if ( (LA124_206==CAST) && (synpred3_EsperEPL2Grammar())) {s = 831;}

                        else if ( (LA124_206==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 832;}

                        else if ( (LA124_206==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 833;}

                        else if ( (LA124_206==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 834;}

                        else if ( (LA124_206==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 835;}

                        else if ( (LA124_206==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 836;}

                        else if ( (LA124_206==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 837;}

                        else if ( (LA124_206==FULL) && (synpred3_EsperEPL2Grammar())) {s = 838;}

                        else if ( (LA124_206==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 839;}

                        else if ( (LA124_206==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 840;}

                        else if ( (LA124_206==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 841;}

                        else if ( (LA124_206==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 842;}

                        else if ( (LA124_206==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 843;}

                         
                        input.seek(index124_206);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA124_258 = input.LA(1);

                         
                        int index124_258 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA124_258==ALL) && (synpred3_EsperEPL2Grammar())) {s = 844;}

                        else if ( (LA124_258==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 845;}

                        else if ( (LA124_258==CASE) && (synpred3_EsperEPL2Grammar())) {s = 846;}

                        else if ( (LA124_258==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 847;}

                        else if ( (LA124_258==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 848;}

                        else if ( (LA124_258==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 849;}

                        else if ( (LA124_258==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 850;}

                        else if ( (LA124_258==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 851;}

                        else if ( (LA124_258==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 852;}

                        else if ( (LA124_258==STRING_LITERAL) ) {s = 853;}

                        else if ( (LA124_258==QUOTED_STRING_LITERAL) ) {s = 854;}

                        else if ( (LA124_258==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 855;}

                        else if ( (LA124_258==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 856;}

                        else if ( (LA124_258==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 857;}

                        else if ( (LA124_258==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 858;}

                        else if ( (LA124_258==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 859;}

                        else if ( (LA124_258==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 860;}

                        else if ( (LA124_258==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 861;}

                        else if ( (LA124_258==AT) && (synpred3_EsperEPL2Grammar())) {s = 862;}

                        else if ( (LA124_258==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 863;}

                        else if ( (LA124_258==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 864;}

                        else if ( (LA124_258==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 865;}

                        else if ( (LA124_258==SUM) && (synpred3_EsperEPL2Grammar())) {s = 866;}

                        else if ( (LA124_258==AVG) && (synpred3_EsperEPL2Grammar())) {s = 867;}

                        else if ( (LA124_258==MAX) && (synpred3_EsperEPL2Grammar())) {s = 868;}

                        else if ( (LA124_258==MIN) && (synpred3_EsperEPL2Grammar())) {s = 869;}

                        else if ( (LA124_258==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 870;}

                        else if ( (LA124_258==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 871;}

                        else if ( (LA124_258==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 872;}

                        else if ( (LA124_258==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 873;}

                        else if ( (LA124_258==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 874;}

                        else if ( (LA124_258==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 875;}

                        else if ( (LA124_258==LAST) && (synpred3_EsperEPL2Grammar())) {s = 876;}

                        else if ( (LA124_258==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 877;}

                        else if ( (LA124_258==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 878;}

                        else if ( (LA124_258==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 879;}

                        else if ( (LA124_258==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 880;}

                        else if ( (LA124_258==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 881;}

                        else if ( (LA124_258==SQL) && (synpred3_EsperEPL2Grammar())) {s = 882;}

                        else if ( (LA124_258==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 883;}

                        else if ( (LA124_258==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 884;}

                        else if ( (LA124_258==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 885;}

                        else if ( (LA124_258==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 886;}

                        else if ( (LA124_258==LW) && (synpred3_EsperEPL2Grammar())) {s = 887;}

                        else if ( (LA124_258==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 888;}

                        else if ( (LA124_258==CAST) && (synpred3_EsperEPL2Grammar())) {s = 889;}

                        else if ( (LA124_258==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 890;}

                        else if ( (LA124_258==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 891;}

                        else if ( (LA124_258==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 892;}

                        else if ( (LA124_258==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 893;}

                        else if ( (LA124_258==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 894;}

                        else if ( (LA124_258==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 895;}

                        else if ( (LA124_258==FULL) && (synpred3_EsperEPL2Grammar())) {s = 896;}

                        else if ( (LA124_258==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 897;}

                        else if ( (LA124_258==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 898;}

                        else if ( (LA124_258==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 899;}

                        else if ( (LA124_258==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 900;}

                        else if ( (LA124_258==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 901;}

                         
                        input.seek(index124_258);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA124_310 = input.LA(1);

                         
                        int index124_310 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA124_310==STRING_LITERAL) ) {s = 902;}

                        else if ( (LA124_310==QUOTED_STRING_LITERAL) ) {s = 903;}

                        else if ( (LA124_310==CASE) && (synpred3_EsperEPL2Grammar())) {s = 904;}

                        else if ( (LA124_310==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 905;}

                        else if ( (LA124_310==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 906;}

                        else if ( (LA124_310==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 907;}

                        else if ( (LA124_310==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 908;}

                        else if ( (LA124_310==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 909;}

                        else if ( (LA124_310==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 910;}

                        else if ( (LA124_310==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 911;}

                        else if ( (LA124_310==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 912;}

                        else if ( (LA124_310==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 913;}

                        else if ( (LA124_310==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 914;}

                        else if ( (LA124_310==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 915;}

                        else if ( (LA124_310==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 916;}

                        else if ( (LA124_310==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 917;}

                        else if ( (LA124_310==AT) && (synpred3_EsperEPL2Grammar())) {s = 918;}

                        else if ( (LA124_310==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 919;}

                        else if ( (LA124_310==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 920;}

                        else if ( (LA124_310==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 921;}

                        else if ( (LA124_310==SUM) && (synpred3_EsperEPL2Grammar())) {s = 922;}

                        else if ( (LA124_310==AVG) && (synpred3_EsperEPL2Grammar())) {s = 923;}

                        else if ( (LA124_310==MAX) && (synpred3_EsperEPL2Grammar())) {s = 924;}

                        else if ( (LA124_310==MIN) && (synpred3_EsperEPL2Grammar())) {s = 925;}

                        else if ( (LA124_310==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 926;}

                        else if ( (LA124_310==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 927;}

                        else if ( (LA124_310==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 928;}

                        else if ( (LA124_310==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 929;}

                        else if ( (LA124_310==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 930;}

                        else if ( (LA124_310==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 931;}

                        else if ( (LA124_310==LAST) && (synpred3_EsperEPL2Grammar())) {s = 932;}

                        else if ( (LA124_310==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 933;}

                        else if ( (LA124_310==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 934;}

                        else if ( (LA124_310==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 935;}

                        else if ( (LA124_310==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 936;}

                        else if ( (LA124_310==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 937;}

                        else if ( (LA124_310==SQL) && (synpred3_EsperEPL2Grammar())) {s = 938;}

                        else if ( (LA124_310==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 939;}

                        else if ( (LA124_310==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 940;}

                        else if ( (LA124_310==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 941;}

                        else if ( (LA124_310==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 942;}

                        else if ( (LA124_310==LW) && (synpred3_EsperEPL2Grammar())) {s = 943;}

                        else if ( (LA124_310==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 944;}

                        else if ( (LA124_310==CAST) && (synpred3_EsperEPL2Grammar())) {s = 945;}

                        else if ( (LA124_310==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 946;}

                        else if ( (LA124_310==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 947;}

                        else if ( (LA124_310==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 948;}

                        else if ( (LA124_310==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 949;}

                        else if ( (LA124_310==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 950;}

                        else if ( (LA124_310==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 951;}

                        else if ( (LA124_310==FULL) && (synpred3_EsperEPL2Grammar())) {s = 952;}

                        else if ( (LA124_310==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 953;}

                        else if ( (LA124_310==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 954;}

                        else if ( (LA124_310==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 955;}

                        else if ( (LA124_310==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 956;}

                        else if ( (LA124_310==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 957;}

                         
                        input.seek(index124_310);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA124_362 = input.LA(1);

                         
                        int index124_362 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA124_362==STRING_LITERAL) ) {s = 958;}

                        else if ( (LA124_362==QUOTED_STRING_LITERAL) ) {s = 959;}

                        else if ( (LA124_362==ALL) && (synpred3_EsperEPL2Grammar())) {s = 960;}

                        else if ( (LA124_362==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 961;}

                        else if ( (LA124_362==CASE) && (synpred3_EsperEPL2Grammar())) {s = 962;}

                        else if ( (LA124_362==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 963;}

                        else if ( (LA124_362==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 964;}

                        else if ( (LA124_362==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 965;}

                        else if ( (LA124_362==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 966;}

                        else if ( (LA124_362==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 967;}

                        else if ( (LA124_362==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 968;}

                        else if ( (LA124_362==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 969;}

                        else if ( (LA124_362==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 970;}

                        else if ( (LA124_362==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 971;}

                        else if ( (LA124_362==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 972;}

                        else if ( (LA124_362==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 973;}

                        else if ( (LA124_362==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 974;}

                        else if ( (LA124_362==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 975;}

                        else if ( (LA124_362==AT) && (synpred3_EsperEPL2Grammar())) {s = 976;}

                        else if ( (LA124_362==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 977;}

                        else if ( (LA124_362==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 978;}

                        else if ( (LA124_362==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 979;}

                        else if ( (LA124_362==SUM) && (synpred3_EsperEPL2Grammar())) {s = 980;}

                        else if ( (LA124_362==AVG) && (synpred3_EsperEPL2Grammar())) {s = 981;}

                        else if ( (LA124_362==MAX) && (synpred3_EsperEPL2Grammar())) {s = 982;}

                        else if ( (LA124_362==MIN) && (synpred3_EsperEPL2Grammar())) {s = 983;}

                        else if ( (LA124_362==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 984;}

                        else if ( (LA124_362==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 985;}

                        else if ( (LA124_362==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 986;}

                        else if ( (LA124_362==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 987;}

                        else if ( (LA124_362==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 988;}

                        else if ( (LA124_362==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 989;}

                        else if ( (LA124_362==LAST) && (synpred3_EsperEPL2Grammar())) {s = 990;}

                        else if ( (LA124_362==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 991;}

                        else if ( (LA124_362==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 992;}

                        else if ( (LA124_362==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 993;}

                        else if ( (LA124_362==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 994;}

                        else if ( (LA124_362==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 995;}

                        else if ( (LA124_362==SQL) && (synpred3_EsperEPL2Grammar())) {s = 996;}

                        else if ( (LA124_362==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 997;}

                        else if ( (LA124_362==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 998;}

                        else if ( (LA124_362==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 999;}

                        else if ( (LA124_362==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1000;}

                        else if ( (LA124_362==LW) && (synpred3_EsperEPL2Grammar())) {s = 1001;}

                        else if ( (LA124_362==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1002;}

                        else if ( (LA124_362==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1003;}

                        else if ( (LA124_362==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1004;}

                        else if ( (LA124_362==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1005;}

                        else if ( (LA124_362==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1006;}

                        else if ( (LA124_362==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1007;}

                        else if ( (LA124_362==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1008;}

                        else if ( (LA124_362==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1009;}

                        else if ( (LA124_362==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1010;}

                        else if ( (LA124_362==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1011;}

                        else if ( (LA124_362==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1012;}

                        else if ( (LA124_362==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1013;}

                        else if ( (LA124_362==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1014;}

                        else if ( (LA124_362==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1015;}

                         
                        input.seek(index124_362);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA124_414 = input.LA(1);

                         
                        int index124_414 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA124_414==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1016;}

                        else if ( (LA124_414==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1017;}

                        else if ( (LA124_414==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1018;}

                        else if ( (LA124_414==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1019;}

                        else if ( (LA124_414==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1020;}

                        else if ( (LA124_414==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1021;}

                        else if ( (LA124_414==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1022;}

                        else if ( (LA124_414==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1023;}

                        else if ( (LA124_414==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1024;}

                        else if ( (LA124_414==STRING_LITERAL) ) {s = 1025;}

                        else if ( (LA124_414==QUOTED_STRING_LITERAL) ) {s = 1026;}

                        else if ( (LA124_414==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1027;}

                        else if ( (LA124_414==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1028;}

                        else if ( (LA124_414==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1029;}

                        else if ( (LA124_414==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1030;}

                        else if ( (LA124_414==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1031;}

                        else if ( (LA124_414==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1032;}

                        else if ( (LA124_414==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1033;}

                        else if ( (LA124_414==AT) && (synpred3_EsperEPL2Grammar())) {s = 1034;}

                        else if ( (LA124_414==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1035;}

                        else if ( (LA124_414==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1036;}

                        else if ( (LA124_414==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1037;}

                        else if ( (LA124_414==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1038;}

                        else if ( (LA124_414==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1039;}

                        else if ( (LA124_414==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1040;}

                        else if ( (LA124_414==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1041;}

                        else if ( (LA124_414==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1042;}

                        else if ( (LA124_414==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1043;}

                        else if ( (LA124_414==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1044;}

                        else if ( (LA124_414==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1045;}

                        else if ( (LA124_414==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1046;}

                        else if ( (LA124_414==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1047;}

                        else if ( (LA124_414==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1048;}

                        else if ( (LA124_414==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1049;}

                        else if ( (LA124_414==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1050;}

                        else if ( (LA124_414==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1051;}

                        else if ( (LA124_414==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1052;}

                        else if ( (LA124_414==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1053;}

                        else if ( (LA124_414==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1054;}

                        else if ( (LA124_414==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1055;}

                        else if ( (LA124_414==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1056;}

                        else if ( (LA124_414==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1057;}

                        else if ( (LA124_414==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1058;}

                        else if ( (LA124_414==LW) && (synpred3_EsperEPL2Grammar())) {s = 1059;}

                        else if ( (LA124_414==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1060;}

                        else if ( (LA124_414==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1061;}

                        else if ( (LA124_414==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1062;}

                        else if ( (LA124_414==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1063;}

                        else if ( (LA124_414==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1064;}

                        else if ( (LA124_414==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1065;}

                        else if ( (LA124_414==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1066;}

                        else if ( (LA124_414==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1067;}

                        else if ( (LA124_414==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1068;}

                        else if ( (LA124_414==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1069;}

                        else if ( (LA124_414==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1070;}

                        else if ( (LA124_414==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1071;}

                        else if ( (LA124_414==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1072;}

                        else if ( (LA124_414==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1073;}

                         
                        input.seek(index124_414);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA124_466 = input.LA(1);

                         
                        int index124_466 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA124_466==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1074;}

                        else if ( (LA124_466==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1075;}

                        else if ( (LA124_466==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1076;}

                        else if ( (LA124_466==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1077;}

                        else if ( (LA124_466==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1078;}

                        else if ( (LA124_466==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1079;}

                        else if ( (LA124_466==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1080;}

                        else if ( (LA124_466==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1081;}

                        else if ( (LA124_466==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1082;}

                        else if ( (LA124_466==STRING_LITERAL) ) {s = 1083;}

                        else if ( (LA124_466==QUOTED_STRING_LITERAL) ) {s = 1084;}

                        else if ( (LA124_466==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1085;}

                        else if ( (LA124_466==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1086;}

                        else if ( (LA124_466==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1087;}

                        else if ( (LA124_466==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1088;}

                        else if ( (LA124_466==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1089;}

                        else if ( (LA124_466==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1090;}

                        else if ( (LA124_466==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1091;}

                        else if ( (LA124_466==AT) && (synpred3_EsperEPL2Grammar())) {s = 1092;}

                        else if ( (LA124_466==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1093;}

                        else if ( (LA124_466==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1094;}

                        else if ( (LA124_466==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1095;}

                        else if ( (LA124_466==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1096;}

                        else if ( (LA124_466==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1097;}

                        else if ( (LA124_466==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1098;}

                        else if ( (LA124_466==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1099;}

                        else if ( (LA124_466==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1100;}

                        else if ( (LA124_466==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1101;}

                        else if ( (LA124_466==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1102;}

                        else if ( (LA124_466==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1103;}

                        else if ( (LA124_466==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1104;}

                        else if ( (LA124_466==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1105;}

                        else if ( (LA124_466==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1106;}

                        else if ( (LA124_466==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1107;}

                        else if ( (LA124_466==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1108;}

                        else if ( (LA124_466==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1109;}

                        else if ( (LA124_466==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1110;}

                        else if ( (LA124_466==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1111;}

                        else if ( (LA124_466==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1112;}

                        else if ( (LA124_466==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1113;}

                        else if ( (LA124_466==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1114;}

                        else if ( (LA124_466==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1115;}

                        else if ( (LA124_466==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1116;}

                        else if ( (LA124_466==LW) && (synpred3_EsperEPL2Grammar())) {s = 1117;}

                        else if ( (LA124_466==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1118;}

                        else if ( (LA124_466==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1119;}

                        else if ( (LA124_466==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1120;}

                        else if ( (LA124_466==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1121;}

                        else if ( (LA124_466==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1122;}

                        else if ( (LA124_466==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1123;}

                        else if ( (LA124_466==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1124;}

                        else if ( (LA124_466==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1125;}

                        else if ( (LA124_466==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1126;}

                        else if ( (LA124_466==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1127;}

                        else if ( (LA124_466==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1128;}

                        else if ( (LA124_466==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1129;}

                        else if ( (LA124_466==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1130;}

                        else if ( (LA124_466==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1131;}

                         
                        input.seek(index124_466);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA124_518 = input.LA(1);

                         
                        int index124_518 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA124_518==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1132;}

                        else if ( (LA124_518==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1133;}

                        else if ( (LA124_518==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1134;}

                        else if ( (LA124_518==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1135;}

                        else if ( (LA124_518==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1136;}

                        else if ( (LA124_518==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1137;}

                        else if ( (LA124_518==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1138;}

                        else if ( (LA124_518==STRING_LITERAL) ) {s = 1139;}

                        else if ( (LA124_518==QUOTED_STRING_LITERAL) ) {s = 1140;}

                        else if ( (LA124_518==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1141;}

                        else if ( (LA124_518==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1142;}

                        else if ( (LA124_518==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1143;}

                        else if ( (LA124_518==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1144;}

                        else if ( (LA124_518==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1145;}

                        else if ( (LA124_518==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1146;}

                        else if ( (LA124_518==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1147;}

                        else if ( (LA124_518==AT) && (synpred3_EsperEPL2Grammar())) {s = 1148;}

                        else if ( (LA124_518==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1149;}

                        else if ( (LA124_518==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1150;}

                        else if ( (LA124_518==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1151;}

                        else if ( (LA124_518==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1152;}

                        else if ( (LA124_518==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1153;}

                        else if ( (LA124_518==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1154;}

                        else if ( (LA124_518==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1155;}

                        else if ( (LA124_518==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1156;}

                        else if ( (LA124_518==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1157;}

                        else if ( (LA124_518==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1158;}

                        else if ( (LA124_518==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1159;}

                        else if ( (LA124_518==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1160;}

                        else if ( (LA124_518==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1161;}

                        else if ( (LA124_518==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1162;}

                        else if ( (LA124_518==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1163;}

                        else if ( (LA124_518==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1164;}

                        else if ( (LA124_518==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1165;}

                        else if ( (LA124_518==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1166;}

                        else if ( (LA124_518==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1167;}

                        else if ( (LA124_518==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1168;}

                        else if ( (LA124_518==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1169;}

                        else if ( (LA124_518==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1170;}

                        else if ( (LA124_518==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1171;}

                        else if ( (LA124_518==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1172;}

                        else if ( (LA124_518==LW) && (synpred3_EsperEPL2Grammar())) {s = 1173;}

                        else if ( (LA124_518==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1174;}

                        else if ( (LA124_518==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1175;}

                        else if ( (LA124_518==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1176;}

                        else if ( (LA124_518==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1177;}

                        else if ( (LA124_518==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1178;}

                        else if ( (LA124_518==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1179;}

                        else if ( (LA124_518==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1180;}

                        else if ( (LA124_518==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1181;}

                        else if ( (LA124_518==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1182;}

                        else if ( (LA124_518==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1183;}

                        else if ( (LA124_518==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1184;}

                        else if ( (LA124_518==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1185;}

                        else if ( (LA124_518==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1186;}

                        else if ( (LA124_518==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1187;}

                         
                        input.seek(index124_518);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA124_570 = input.LA(1);

                         
                        int index124_570 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA124_570==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1188;}

                        else if ( ((LA124_570>=STRING_LITERAL && LA124_570<=QUOTED_STRING_LITERAL)) ) {s = 14;}

                         
                        input.seek(index124_570);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA124_622 = input.LA(1);

                         
                        int index124_622 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA124_622==STRING_LITERAL) ) {s = 1191;}

                        else if ( (LA124_622==QUOTED_STRING_LITERAL) ) {s = 1192;}

                        else if ( (LA124_622==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1193;}

                        else if ( (LA124_622==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1194;}

                        else if ( (LA124_622==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1195;}

                        else if ( (LA124_622==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1196;}

                        else if ( (LA124_622==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1197;}

                        else if ( (LA124_622==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1198;}

                        else if ( (LA124_622==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1199;}

                        else if ( (LA124_622==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1200;}

                        else if ( (LA124_622==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1201;}

                        else if ( (LA124_622==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1202;}

                        else if ( (LA124_622==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1203;}

                        else if ( (LA124_622==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1204;}

                        else if ( (LA124_622==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1205;}

                        else if ( (LA124_622==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1206;}

                        else if ( (LA124_622==AT) && (synpred3_EsperEPL2Grammar())) {s = 1207;}

                        else if ( (LA124_622==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1208;}

                        else if ( (LA124_622==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1209;}

                        else if ( (LA124_622==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1210;}

                        else if ( (LA124_622==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1211;}

                        else if ( (LA124_622==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1212;}

                        else if ( (LA124_622==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1213;}

                        else if ( (LA124_622==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1214;}

                        else if ( (LA124_622==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1215;}

                        else if ( (LA124_622==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1216;}

                        else if ( (LA124_622==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1217;}

                        else if ( (LA124_622==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1218;}

                        else if ( (LA124_622==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1219;}

                        else if ( (LA124_622==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1220;}

                        else if ( (LA124_622==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1221;}

                        else if ( (LA124_622==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1222;}

                        else if ( (LA124_622==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1223;}

                        else if ( (LA124_622==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1224;}

                        else if ( (LA124_622==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1225;}

                        else if ( (LA124_622==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1226;}

                        else if ( (LA124_622==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1227;}

                        else if ( (LA124_622==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1228;}

                        else if ( (LA124_622==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1229;}

                        else if ( (LA124_622==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1230;}

                        else if ( (LA124_622==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1231;}

                        else if ( (LA124_622==LW) && (synpred3_EsperEPL2Grammar())) {s = 1232;}

                        else if ( (LA124_622==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1233;}

                        else if ( (LA124_622==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1234;}

                        else if ( (LA124_622==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1235;}

                        else if ( (LA124_622==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1236;}

                        else if ( (LA124_622==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1237;}

                        else if ( (LA124_622==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1238;}

                        else if ( (LA124_622==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1239;}

                        else if ( (LA124_622==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1240;}

                        else if ( (LA124_622==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1241;}

                        else if ( (LA124_622==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1242;}

                        else if ( (LA124_622==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1243;}

                        else if ( (LA124_622==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1244;}

                        else if ( (LA124_622==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1245;}

                        else if ( (LA124_622==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1246;}

                         
                        input.seek(index124_622);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA124_674 = input.LA(1);

                         
                        int index124_674 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA124_674==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1247;}

                        else if ( (LA124_674==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1248;}

                        else if ( (LA124_674==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1249;}

                        else if ( (LA124_674==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1250;}

                        else if ( (LA124_674==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1251;}

                        else if ( (LA124_674==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1252;}

                        else if ( (LA124_674==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1253;}

                        else if ( (LA124_674==STRING_LITERAL) ) {s = 1254;}

                        else if ( (LA124_674==QUOTED_STRING_LITERAL) ) {s = 1255;}

                        else if ( (LA124_674==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1256;}

                        else if ( (LA124_674==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1257;}

                        else if ( (LA124_674==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1258;}

                        else if ( (LA124_674==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1259;}

                        else if ( (LA124_674==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1260;}

                        else if ( (LA124_674==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1261;}

                        else if ( (LA124_674==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1262;}

                        else if ( (LA124_674==AT) && (synpred3_EsperEPL2Grammar())) {s = 1263;}

                        else if ( (LA124_674==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1264;}

                        else if ( (LA124_674==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1265;}

                        else if ( (LA124_674==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1266;}

                        else if ( (LA124_674==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1267;}

                        else if ( (LA124_674==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1268;}

                        else if ( (LA124_674==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1269;}

                        else if ( (LA124_674==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1270;}

                        else if ( (LA124_674==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1271;}

                        else if ( (LA124_674==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1272;}

                        else if ( (LA124_674==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1273;}

                        else if ( (LA124_674==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1274;}

                        else if ( (LA124_674==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1275;}

                        else if ( (LA124_674==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1276;}

                        else if ( (LA124_674==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1277;}

                        else if ( (LA124_674==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1278;}

                        else if ( (LA124_674==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1279;}

                        else if ( (LA124_674==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1280;}

                        else if ( (LA124_674==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1281;}

                        else if ( (LA124_674==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1282;}

                        else if ( (LA124_674==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1283;}

                        else if ( (LA124_674==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1284;}

                        else if ( (LA124_674==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1285;}

                        else if ( (LA124_674==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1286;}

                        else if ( (LA124_674==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1287;}

                        else if ( (LA124_674==LW) && (synpred3_EsperEPL2Grammar())) {s = 1288;}

                        else if ( (LA124_674==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1289;}

                        else if ( (LA124_674==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1290;}

                        else if ( (LA124_674==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1291;}

                        else if ( (LA124_674==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1292;}

                        else if ( (LA124_674==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1293;}

                        else if ( (LA124_674==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1294;}

                        else if ( (LA124_674==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1295;}

                        else if ( (LA124_674==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1296;}

                        else if ( (LA124_674==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1297;}

                        else if ( (LA124_674==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1298;}

                        else if ( (LA124_674==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1299;}

                        else if ( (LA124_674==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1300;}

                        else if ( (LA124_674==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1301;}

                        else if ( (LA124_674==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1302;}

                         
                        input.seek(index124_674);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA124_726 = input.LA(1);

                         
                        int index124_726 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA124_726==SELECT) ) {s = 1303;}

                        else if ( (LA124_726==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1304;}

                        else if ( (LA124_726==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1305;}

                        else if ( (LA124_726==AT) && (synpred3_EsperEPL2Grammar())) {s = 1306;}

                        else if ( (LA124_726==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1307;}

                        else if ( (LA124_726==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1308;}

                        else if ( (LA124_726==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1309;}

                        else if ( (LA124_726==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1310;}

                        else if ( (LA124_726==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1311;}

                        else if ( (LA124_726==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1312;}

                        else if ( (LA124_726==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1313;}

                        else if ( (LA124_726==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1314;}

                        else if ( (LA124_726==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1315;}

                        else if ( (LA124_726==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1316;}

                        else if ( (LA124_726==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1317;}

                        else if ( (LA124_726==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1318;}

                        else if ( (LA124_726==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1319;}

                        else if ( (LA124_726==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1320;}

                        else if ( (LA124_726==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1321;}

                        else if ( (LA124_726==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1322;}

                        else if ( (LA124_726==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1323;}

                        else if ( (LA124_726==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1324;}

                        else if ( (LA124_726==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1325;}

                        else if ( (LA124_726==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1326;}

                        else if ( (LA124_726==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1327;}

                        else if ( (LA124_726==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1328;}

                        else if ( (LA124_726==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1329;}

                        else if ( (LA124_726==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1330;}

                        else if ( (LA124_726==LW) && (synpred3_EsperEPL2Grammar())) {s = 1331;}

                        else if ( (LA124_726==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1332;}

                        else if ( (LA124_726==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1333;}

                        else if ( (LA124_726==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1334;}

                        else if ( (LA124_726==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1335;}

                        else if ( (LA124_726==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1336;}

                        else if ( (LA124_726==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1337;}

                        else if ( (LA124_726==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1338;}

                        else if ( (LA124_726==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1339;}

                        else if ( (LA124_726==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1340;}

                        else if ( (LA124_726==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1341;}

                         
                        input.seek(index124_726);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA124_736 = input.LA(1);

                         
                        int index124_736 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA124_736==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1342;}

                        else if ( (LA124_736==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1343;}

                        else if ( (LA124_736==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1344;}

                        else if ( (LA124_736==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1345;}

                        else if ( (LA124_736==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1346;}

                        else if ( (LA124_736==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1347;}

                        else if ( (LA124_736==LT) && (synpred3_EsperEPL2Grammar())) {s = 1348;}

                        else if ( (LA124_736==GT) && (synpred3_EsperEPL2Grammar())) {s = 1349;}

                        else if ( (LA124_736==LE) && (synpred3_EsperEPL2Grammar())) {s = 1350;}

                        else if ( (LA124_736==GE) && (synpred3_EsperEPL2Grammar())) {s = 1351;}

                        else if ( (LA124_736==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1352;}

                        else if ( (LA124_736==IS) && (synpred3_EsperEPL2Grammar())) {s = 1353;}

                        else if ( (LA124_736==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1354;}

                        else if ( (LA124_736==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1355;}

                        else if ( (LA124_736==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1356;}

                        else if ( (LA124_736==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1357;}

                        else if ( (LA124_736==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1358;}

                        else if ( (LA124_736==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1359;}

                        else if ( (LA124_736==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1360;}

                        else if ( (LA124_736==RPAREN) ) {s = 1361;}

                        else if ( (LA124_736==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1362;}

                        else if ( (LA124_736==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1363;}

                        else if ( (LA124_736==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1364;}

                        else if ( (LA124_736==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1365;}

                        else if ( (LA124_736==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1366;}

                         
                        input.seek(index124_736);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA124_737 = input.LA(1);

                         
                        int index124_737 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA124_737==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1367;}

                        else if ( (LA124_737==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1368;}

                        else if ( (LA124_737==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1369;}

                        else if ( (LA124_737==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1370;}

                        else if ( (LA124_737==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1371;}

                        else if ( (LA124_737==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1372;}

                        else if ( (LA124_737==LT) && (synpred3_EsperEPL2Grammar())) {s = 1373;}

                        else if ( (LA124_737==GT) && (synpred3_EsperEPL2Grammar())) {s = 1374;}

                        else if ( (LA124_737==LE) && (synpred3_EsperEPL2Grammar())) {s = 1375;}

                        else if ( (LA124_737==GE) && (synpred3_EsperEPL2Grammar())) {s = 1376;}

                        else if ( (LA124_737==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1377;}

                        else if ( (LA124_737==IS) && (synpred3_EsperEPL2Grammar())) {s = 1378;}

                        else if ( (LA124_737==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1379;}

                        else if ( (LA124_737==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1380;}

                        else if ( (LA124_737==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1381;}

                        else if ( (LA124_737==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1382;}

                        else if ( (LA124_737==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1383;}

                        else if ( (LA124_737==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1384;}

                        else if ( (LA124_737==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1385;}

                        else if ( (LA124_737==RPAREN) ) {s = 1386;}

                        else if ( (LA124_737==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1387;}

                        else if ( (LA124_737==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1388;}

                        else if ( (LA124_737==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1389;}

                        else if ( (LA124_737==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1390;}

                        else if ( (LA124_737==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1391;}

                         
                        input.seek(index124_737);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA124_795 = input.LA(1);

                         
                        int index124_795 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA124_795==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1392;}

                        else if ( (LA124_795==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1393;}

                        else if ( (LA124_795==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1394;}

                        else if ( (LA124_795==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1395;}

                        else if ( (LA124_795==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1396;}

                        else if ( (LA124_795==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1397;}

                        else if ( (LA124_795==LT) && (synpred3_EsperEPL2Grammar())) {s = 1398;}

                        else if ( (LA124_795==GT) && (synpred3_EsperEPL2Grammar())) {s = 1399;}

                        else if ( (LA124_795==LE) && (synpred3_EsperEPL2Grammar())) {s = 1400;}

                        else if ( (LA124_795==GE) && (synpred3_EsperEPL2Grammar())) {s = 1401;}

                        else if ( (LA124_795==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1402;}

                        else if ( (LA124_795==IS) && (synpred3_EsperEPL2Grammar())) {s = 1403;}

                        else if ( (LA124_795==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1404;}

                        else if ( (LA124_795==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1405;}

                        else if ( (LA124_795==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1406;}

                        else if ( (LA124_795==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1407;}

                        else if ( (LA124_795==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1408;}

                        else if ( (LA124_795==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1409;}

                        else if ( (LA124_795==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1410;}

                        else if ( (LA124_795==RPAREN) ) {s = 1411;}

                        else if ( (LA124_795==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1412;}

                        else if ( (LA124_795==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1413;}

                        else if ( (LA124_795==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1414;}

                        else if ( (LA124_795==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1415;}

                        else if ( (LA124_795==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1416;}

                         
                        input.seek(index124_795);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA124_796 = input.LA(1);

                         
                        int index124_796 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA124_796==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1417;}

                        else if ( (LA124_796==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1418;}

                        else if ( (LA124_796==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1419;}

                        else if ( (LA124_796==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1420;}

                        else if ( (LA124_796==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1421;}

                        else if ( (LA124_796==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1422;}

                        else if ( (LA124_796==LT) && (synpred3_EsperEPL2Grammar())) {s = 1423;}

                        else if ( (LA124_796==GT) && (synpred3_EsperEPL2Grammar())) {s = 1424;}

                        else if ( (LA124_796==LE) && (synpred3_EsperEPL2Grammar())) {s = 1425;}

                        else if ( (LA124_796==GE) && (synpred3_EsperEPL2Grammar())) {s = 1426;}

                        else if ( (LA124_796==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1427;}

                        else if ( (LA124_796==IS) && (synpred3_EsperEPL2Grammar())) {s = 1428;}

                        else if ( (LA124_796==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1429;}

                        else if ( (LA124_796==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1430;}

                        else if ( (LA124_796==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1431;}

                        else if ( (LA124_796==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1432;}

                        else if ( (LA124_796==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1433;}

                        else if ( (LA124_796==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1434;}

                        else if ( (LA124_796==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1435;}

                        else if ( (LA124_796==RPAREN) ) {s = 1436;}

                        else if ( (LA124_796==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1437;}

                        else if ( (LA124_796==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1438;}

                        else if ( (LA124_796==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1439;}

                        else if ( (LA124_796==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1440;}

                        else if ( (LA124_796==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1441;}

                         
                        input.seek(index124_796);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA124_853 = input.LA(1);

                         
                        int index124_853 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA124_853==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1442;}

                        else if ( (LA124_853==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1443;}

                        else if ( (LA124_853==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1444;}

                        else if ( (LA124_853==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1445;}

                        else if ( (LA124_853==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1446;}

                        else if ( (LA124_853==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1447;}

                        else if ( (LA124_853==LT) && (synpred3_EsperEPL2Grammar())) {s = 1448;}

                        else if ( (LA124_853==GT) && (synpred3_EsperEPL2Grammar())) {s = 1449;}

                        else if ( (LA124_853==LE) && (synpred3_EsperEPL2Grammar())) {s = 1450;}

                        else if ( (LA124_853==GE) && (synpred3_EsperEPL2Grammar())) {s = 1451;}

                        else if ( (LA124_853==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1452;}

                        else if ( (LA124_853==IS) && (synpred3_EsperEPL2Grammar())) {s = 1453;}

                        else if ( (LA124_853==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1454;}

                        else if ( (LA124_853==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1455;}

                        else if ( (LA124_853==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1456;}

                        else if ( (LA124_853==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1457;}

                        else if ( (LA124_853==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1458;}

                        else if ( (LA124_853==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1459;}

                        else if ( (LA124_853==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1460;}

                        else if ( (LA124_853==RPAREN) ) {s = 1461;}

                        else if ( (LA124_853==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1462;}

                        else if ( (LA124_853==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1463;}

                        else if ( (LA124_853==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1464;}

                        else if ( (LA124_853==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1465;}

                        else if ( (LA124_853==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1466;}

                         
                        input.seek(index124_853);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA124_854 = input.LA(1);

                         
                        int index124_854 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA124_854==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1467;}

                        else if ( (LA124_854==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1468;}

                        else if ( (LA124_854==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1469;}

                        else if ( (LA124_854==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1470;}

                        else if ( (LA124_854==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1471;}

                        else if ( (LA124_854==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1472;}

                        else if ( (LA124_854==LT) && (synpred3_EsperEPL2Grammar())) {s = 1473;}

                        else if ( (LA124_854==GT) && (synpred3_EsperEPL2Grammar())) {s = 1474;}

                        else if ( (LA124_854==LE) && (synpred3_EsperEPL2Grammar())) {s = 1475;}

                        else if ( (LA124_854==GE) && (synpred3_EsperEPL2Grammar())) {s = 1476;}

                        else if ( (LA124_854==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1477;}

                        else if ( (LA124_854==IS) && (synpred3_EsperEPL2Grammar())) {s = 1478;}

                        else if ( (LA124_854==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1479;}

                        else if ( (LA124_854==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1480;}

                        else if ( (LA124_854==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1481;}

                        else if ( (LA124_854==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1482;}

                        else if ( (LA124_854==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1483;}

                        else if ( (LA124_854==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1484;}

                        else if ( (LA124_854==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1485;}

                        else if ( (LA124_854==RPAREN) ) {s = 1486;}

                        else if ( (LA124_854==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1487;}

                        else if ( (LA124_854==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1488;}

                        else if ( (LA124_854==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1489;}

                        else if ( (LA124_854==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1490;}

                        else if ( (LA124_854==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1491;}

                         
                        input.seek(index124_854);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA124_902 = input.LA(1);

                         
                        int index124_902 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA124_902==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1492;}

                        else if ( (LA124_902==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1493;}

                        else if ( (LA124_902==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1494;}

                        else if ( (LA124_902==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1495;}

                        else if ( (LA124_902==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1496;}

                        else if ( (LA124_902==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1497;}

                        else if ( (LA124_902==LT) && (synpred3_EsperEPL2Grammar())) {s = 1498;}

                        else if ( (LA124_902==GT) && (synpred3_EsperEPL2Grammar())) {s = 1499;}

                        else if ( (LA124_902==LE) && (synpred3_EsperEPL2Grammar())) {s = 1500;}

                        else if ( (LA124_902==GE) && (synpred3_EsperEPL2Grammar())) {s = 1501;}

                        else if ( (LA124_902==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1502;}

                        else if ( (LA124_902==IS) && (synpred3_EsperEPL2Grammar())) {s = 1503;}

                        else if ( (LA124_902==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1504;}

                        else if ( (LA124_902==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1505;}

                        else if ( (LA124_902==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1506;}

                        else if ( (LA124_902==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1507;}

                        else if ( (LA124_902==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1508;}

                        else if ( (LA124_902==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1509;}

                        else if ( (LA124_902==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1510;}

                        else if ( (LA124_902==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 1511;}

                        else if ( (LA124_902==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1512;}

                        else if ( (LA124_902==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1513;}

                        else if ( (LA124_902==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1514;}

                        else if ( (LA124_902==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1515;}

                        else if ( (LA124_902==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1516;}

                        else if ( (LA124_902==RPAREN) ) {s = 14;}

                         
                        input.seek(index124_902);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA124_903 = input.LA(1);

                         
                        int index124_903 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA124_903==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1518;}

                        else if ( (LA124_903==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1519;}

                        else if ( (LA124_903==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1520;}

                        else if ( (LA124_903==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1521;}

                        else if ( (LA124_903==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1522;}

                        else if ( (LA124_903==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1523;}

                        else if ( (LA124_903==LT) && (synpred3_EsperEPL2Grammar())) {s = 1524;}

                        else if ( (LA124_903==GT) && (synpred3_EsperEPL2Grammar())) {s = 1525;}

                        else if ( (LA124_903==LE) && (synpred3_EsperEPL2Grammar())) {s = 1526;}

                        else if ( (LA124_903==GE) && (synpred3_EsperEPL2Grammar())) {s = 1527;}

                        else if ( (LA124_903==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1528;}

                        else if ( (LA124_903==IS) && (synpred3_EsperEPL2Grammar())) {s = 1529;}

                        else if ( (LA124_903==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1530;}

                        else if ( (LA124_903==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1531;}

                        else if ( (LA124_903==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1532;}

                        else if ( (LA124_903==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1533;}

                        else if ( (LA124_903==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1534;}

                        else if ( (LA124_903==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1535;}

                        else if ( (LA124_903==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1536;}

                        else if ( (LA124_903==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 1537;}

                        else if ( (LA124_903==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1538;}

                        else if ( (LA124_903==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1539;}

                        else if ( (LA124_903==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1540;}

                        else if ( (LA124_903==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1541;}

                        else if ( (LA124_903==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1542;}

                        else if ( (LA124_903==RPAREN) ) {s = 14;}

                         
                        input.seek(index124_903);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA124_958 = input.LA(1);

                         
                        int index124_958 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA124_958==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1544;}

                        else if ( (LA124_958==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1545;}

                        else if ( (LA124_958==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1546;}

                        else if ( (LA124_958==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1547;}

                        else if ( (LA124_958==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1548;}

                        else if ( (LA124_958==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1549;}

                        else if ( (LA124_958==LT) && (synpred3_EsperEPL2Grammar())) {s = 1550;}

                        else if ( (LA124_958==GT) && (synpred3_EsperEPL2Grammar())) {s = 1551;}

                        else if ( (LA124_958==LE) && (synpred3_EsperEPL2Grammar())) {s = 1552;}

                        else if ( (LA124_958==GE) && (synpred3_EsperEPL2Grammar())) {s = 1553;}

                        else if ( (LA124_958==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1554;}

                        else if ( (LA124_958==IS) && (synpred3_EsperEPL2Grammar())) {s = 1555;}

                        else if ( (LA124_958==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1556;}

                        else if ( (LA124_958==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1557;}

                        else if ( (LA124_958==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1558;}

                        else if ( (LA124_958==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1559;}

                        else if ( (LA124_958==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1560;}

                        else if ( (LA124_958==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1561;}

                        else if ( (LA124_958==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1562;}

                        else if ( (LA124_958==RPAREN) ) {s = 1563;}

                        else if ( (LA124_958==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1564;}

                        else if ( (LA124_958==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1565;}

                        else if ( (LA124_958==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1566;}

                        else if ( (LA124_958==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1567;}

                        else if ( (LA124_958==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1568;}

                         
                        input.seek(index124_958);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA124_959 = input.LA(1);

                         
                        int index124_959 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA124_959==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1569;}

                        else if ( (LA124_959==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1570;}

                        else if ( (LA124_959==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1571;}

                        else if ( (LA124_959==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1572;}

                        else if ( (LA124_959==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1573;}

                        else if ( (LA124_959==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1574;}

                        else if ( (LA124_959==LT) && (synpred3_EsperEPL2Grammar())) {s = 1575;}

                        else if ( (LA124_959==GT) && (synpred3_EsperEPL2Grammar())) {s = 1576;}

                        else if ( (LA124_959==LE) && (synpred3_EsperEPL2Grammar())) {s = 1577;}

                        else if ( (LA124_959==GE) && (synpred3_EsperEPL2Grammar())) {s = 1578;}

                        else if ( (LA124_959==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1579;}

                        else if ( (LA124_959==IS) && (synpred3_EsperEPL2Grammar())) {s = 1580;}

                        else if ( (LA124_959==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1581;}

                        else if ( (LA124_959==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1582;}

                        else if ( (LA124_959==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1583;}

                        else if ( (LA124_959==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1584;}

                        else if ( (LA124_959==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1585;}

                        else if ( (LA124_959==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1586;}

                        else if ( (LA124_959==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1587;}

                        else if ( (LA124_959==RPAREN) ) {s = 1588;}

                        else if ( (LA124_959==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1589;}

                        else if ( (LA124_959==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1590;}

                        else if ( (LA124_959==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1591;}

                        else if ( (LA124_959==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1592;}

                        else if ( (LA124_959==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1593;}

                         
                        input.seek(index124_959);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA124_1025 = input.LA(1);

                         
                        int index124_1025 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA124_1025==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1594;}

                        else if ( (LA124_1025==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1595;}

                        else if ( (LA124_1025==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1596;}

                        else if ( (LA124_1025==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1597;}

                        else if ( (LA124_1025==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1598;}

                        else if ( (LA124_1025==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1599;}

                        else if ( (LA124_1025==LT) && (synpred3_EsperEPL2Grammar())) {s = 1600;}

                        else if ( (LA124_1025==GT) && (synpred3_EsperEPL2Grammar())) {s = 1601;}

                        else if ( (LA124_1025==LE) && (synpred3_EsperEPL2Grammar())) {s = 1602;}

                        else if ( (LA124_1025==GE) && (synpred3_EsperEPL2Grammar())) {s = 1603;}

                        else if ( (LA124_1025==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1604;}

                        else if ( (LA124_1025==IS) && (synpred3_EsperEPL2Grammar())) {s = 1605;}

                        else if ( (LA124_1025==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1606;}

                        else if ( (LA124_1025==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1607;}

                        else if ( (LA124_1025==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1608;}

                        else if ( (LA124_1025==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1609;}

                        else if ( (LA124_1025==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1610;}

                        else if ( (LA124_1025==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1611;}

                        else if ( (LA124_1025==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1612;}

                        else if ( (LA124_1025==RPAREN) ) {s = 1613;}

                        else if ( (LA124_1025==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1614;}

                        else if ( (LA124_1025==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1615;}

                        else if ( (LA124_1025==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1616;}

                        else if ( (LA124_1025==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1617;}

                        else if ( (LA124_1025==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1618;}

                         
                        input.seek(index124_1025);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA124_1026 = input.LA(1);

                         
                        int index124_1026 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA124_1026==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1619;}

                        else if ( (LA124_1026==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1620;}

                        else if ( (LA124_1026==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1621;}

                        else if ( (LA124_1026==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1622;}

                        else if ( (LA124_1026==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1623;}

                        else if ( (LA124_1026==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1624;}

                        else if ( (LA124_1026==LT) && (synpred3_EsperEPL2Grammar())) {s = 1625;}

                        else if ( (LA124_1026==GT) && (synpred3_EsperEPL2Grammar())) {s = 1626;}

                        else if ( (LA124_1026==LE) && (synpred3_EsperEPL2Grammar())) {s = 1627;}

                        else if ( (LA124_1026==GE) && (synpred3_EsperEPL2Grammar())) {s = 1628;}

                        else if ( (LA124_1026==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1629;}

                        else if ( (LA124_1026==IS) && (synpred3_EsperEPL2Grammar())) {s = 1630;}

                        else if ( (LA124_1026==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1631;}

                        else if ( (LA124_1026==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1632;}

                        else if ( (LA124_1026==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1633;}

                        else if ( (LA124_1026==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1634;}

                        else if ( (LA124_1026==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1635;}

                        else if ( (LA124_1026==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1636;}

                        else if ( (LA124_1026==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1637;}

                        else if ( (LA124_1026==RPAREN) ) {s = 1638;}

                        else if ( (LA124_1026==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1639;}

                        else if ( (LA124_1026==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1640;}

                        else if ( (LA124_1026==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1641;}

                        else if ( (LA124_1026==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1642;}

                        else if ( (LA124_1026==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1643;}

                         
                        input.seek(index124_1026);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA124_1083 = input.LA(1);

                         
                        int index124_1083 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA124_1083==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1644;}

                        else if ( (LA124_1083==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1645;}

                        else if ( (LA124_1083==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1646;}

                        else if ( (LA124_1083==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1647;}

                        else if ( (LA124_1083==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1648;}

                        else if ( (LA124_1083==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1649;}

                        else if ( (LA124_1083==LT) && (synpred3_EsperEPL2Grammar())) {s = 1650;}

                        else if ( (LA124_1083==GT) && (synpred3_EsperEPL2Grammar())) {s = 1651;}

                        else if ( (LA124_1083==LE) && (synpred3_EsperEPL2Grammar())) {s = 1652;}

                        else if ( (LA124_1083==GE) && (synpred3_EsperEPL2Grammar())) {s = 1653;}

                        else if ( (LA124_1083==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1654;}

                        else if ( (LA124_1083==IS) && (synpred3_EsperEPL2Grammar())) {s = 1655;}

                        else if ( (LA124_1083==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1656;}

                        else if ( (LA124_1083==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1657;}

                        else if ( (LA124_1083==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1658;}

                        else if ( (LA124_1083==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1659;}

                        else if ( (LA124_1083==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1660;}

                        else if ( (LA124_1083==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1661;}

                        else if ( (LA124_1083==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1662;}

                        else if ( (LA124_1083==RPAREN) ) {s = 1663;}

                        else if ( (LA124_1083==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1664;}

                        else if ( (LA124_1083==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1665;}

                        else if ( (LA124_1083==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1666;}

                        else if ( (LA124_1083==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1667;}

                        else if ( (LA124_1083==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1668;}

                         
                        input.seek(index124_1083);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA124_1084 = input.LA(1);

                         
                        int index124_1084 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA124_1084==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1669;}

                        else if ( (LA124_1084==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1670;}

                        else if ( (LA124_1084==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1671;}

                        else if ( (LA124_1084==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1672;}

                        else if ( (LA124_1084==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1673;}

                        else if ( (LA124_1084==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1674;}

                        else if ( (LA124_1084==LT) && (synpred3_EsperEPL2Grammar())) {s = 1675;}

                        else if ( (LA124_1084==GT) && (synpred3_EsperEPL2Grammar())) {s = 1676;}

                        else if ( (LA124_1084==LE) && (synpred3_EsperEPL2Grammar())) {s = 1677;}

                        else if ( (LA124_1084==GE) && (synpred3_EsperEPL2Grammar())) {s = 1678;}

                        else if ( (LA124_1084==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1679;}

                        else if ( (LA124_1084==IS) && (synpred3_EsperEPL2Grammar())) {s = 1680;}

                        else if ( (LA124_1084==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1681;}

                        else if ( (LA124_1084==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1682;}

                        else if ( (LA124_1084==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1683;}

                        else if ( (LA124_1084==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1684;}

                        else if ( (LA124_1084==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1685;}

                        else if ( (LA124_1084==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1686;}

                        else if ( (LA124_1084==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1687;}

                        else if ( (LA124_1084==RPAREN) ) {s = 1688;}

                        else if ( (LA124_1084==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1689;}

                        else if ( (LA124_1084==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1690;}

                        else if ( (LA124_1084==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1691;}

                        else if ( (LA124_1084==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1692;}

                        else if ( (LA124_1084==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1693;}

                         
                        input.seek(index124_1084);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA124_1139 = input.LA(1);

                         
                        int index124_1139 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA124_1139==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1694;}

                        else if ( (LA124_1139==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1695;}

                        else if ( (LA124_1139==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1696;}

                        else if ( (LA124_1139==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1697;}

                        else if ( (LA124_1139==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1698;}

                        else if ( (LA124_1139==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1699;}

                        else if ( (LA124_1139==LT) && (synpred3_EsperEPL2Grammar())) {s = 1700;}

                        else if ( (LA124_1139==GT) && (synpred3_EsperEPL2Grammar())) {s = 1701;}

                        else if ( (LA124_1139==LE) && (synpred3_EsperEPL2Grammar())) {s = 1702;}

                        else if ( (LA124_1139==GE) && (synpred3_EsperEPL2Grammar())) {s = 1703;}

                        else if ( (LA124_1139==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1704;}

                        else if ( (LA124_1139==IS) && (synpred3_EsperEPL2Grammar())) {s = 1705;}

                        else if ( (LA124_1139==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1706;}

                        else if ( (LA124_1139==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1707;}

                        else if ( (LA124_1139==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1708;}

                        else if ( (LA124_1139==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1709;}

                        else if ( (LA124_1139==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1710;}

                        else if ( (LA124_1139==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1711;}

                        else if ( (LA124_1139==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1712;}

                        else if ( (LA124_1139==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 1713;}

                        else if ( (LA124_1139==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1714;}

                        else if ( (LA124_1139==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1715;}

                        else if ( (LA124_1139==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1716;}

                        else if ( (LA124_1139==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1717;}

                        else if ( (LA124_1139==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1718;}

                        else if ( (LA124_1139==RPAREN) ) {s = 14;}

                         
                        input.seek(index124_1139);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA124_1140 = input.LA(1);

                         
                        int index124_1140 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA124_1140==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1720;}

                        else if ( (LA124_1140==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1721;}

                        else if ( (LA124_1140==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1722;}

                        else if ( (LA124_1140==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1723;}

                        else if ( (LA124_1140==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1724;}

                        else if ( (LA124_1140==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1725;}

                        else if ( (LA124_1140==LT) && (synpred3_EsperEPL2Grammar())) {s = 1726;}

                        else if ( (LA124_1140==GT) && (synpred3_EsperEPL2Grammar())) {s = 1727;}

                        else if ( (LA124_1140==LE) && (synpred3_EsperEPL2Grammar())) {s = 1728;}

                        else if ( (LA124_1140==GE) && (synpred3_EsperEPL2Grammar())) {s = 1729;}

                        else if ( (LA124_1140==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1730;}

                        else if ( (LA124_1140==IS) && (synpred3_EsperEPL2Grammar())) {s = 1731;}

                        else if ( (LA124_1140==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1732;}

                        else if ( (LA124_1140==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1733;}

                        else if ( (LA124_1140==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1734;}

                        else if ( (LA124_1140==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1735;}

                        else if ( (LA124_1140==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1736;}

                        else if ( (LA124_1140==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1737;}

                        else if ( (LA124_1140==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1738;}

                        else if ( (LA124_1140==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 1739;}

                        else if ( (LA124_1140==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1740;}

                        else if ( (LA124_1140==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1741;}

                        else if ( (LA124_1140==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1742;}

                        else if ( (LA124_1140==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1743;}

                        else if ( (LA124_1140==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1744;}

                        else if ( (LA124_1140==RPAREN) ) {s = 14;}

                         
                        input.seek(index124_1140);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA124_1191 = input.LA(1);

                         
                        int index124_1191 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA124_1191==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1746;}

                        else if ( (LA124_1191==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1747;}

                        else if ( (LA124_1191==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1748;}

                        else if ( (LA124_1191==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1749;}

                        else if ( (LA124_1191==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1750;}

                        else if ( (LA124_1191==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1751;}

                        else if ( (LA124_1191==LT) && (synpred3_EsperEPL2Grammar())) {s = 1752;}

                        else if ( (LA124_1191==GT) && (synpred3_EsperEPL2Grammar())) {s = 1753;}

                        else if ( (LA124_1191==LE) && (synpred3_EsperEPL2Grammar())) {s = 1754;}

                        else if ( (LA124_1191==GE) && (synpred3_EsperEPL2Grammar())) {s = 1755;}

                        else if ( (LA124_1191==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1756;}

                        else if ( (LA124_1191==IS) && (synpred3_EsperEPL2Grammar())) {s = 1757;}

                        else if ( (LA124_1191==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1758;}

                        else if ( (LA124_1191==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1759;}

                        else if ( (LA124_1191==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1760;}

                        else if ( (LA124_1191==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1761;}

                        else if ( (LA124_1191==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1762;}

                        else if ( (LA124_1191==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1763;}

                        else if ( (LA124_1191==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1764;}

                        else if ( (LA124_1191==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 1765;}

                        else if ( (LA124_1191==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1766;}

                        else if ( (LA124_1191==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1767;}

                        else if ( (LA124_1191==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1768;}

                        else if ( (LA124_1191==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1769;}

                        else if ( (LA124_1191==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1770;}

                        else if ( (LA124_1191==RPAREN) ) {s = 14;}

                         
                        input.seek(index124_1191);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA124_1192 = input.LA(1);

                         
                        int index124_1192 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA124_1192==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1772;}

                        else if ( (LA124_1192==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1773;}

                        else if ( (LA124_1192==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1774;}

                        else if ( (LA124_1192==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1775;}

                        else if ( (LA124_1192==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1776;}

                        else if ( (LA124_1192==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1777;}

                        else if ( (LA124_1192==LT) && (synpred3_EsperEPL2Grammar())) {s = 1778;}

                        else if ( (LA124_1192==GT) && (synpred3_EsperEPL2Grammar())) {s = 1779;}

                        else if ( (LA124_1192==LE) && (synpred3_EsperEPL2Grammar())) {s = 1780;}

                        else if ( (LA124_1192==GE) && (synpred3_EsperEPL2Grammar())) {s = 1781;}

                        else if ( (LA124_1192==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1782;}

                        else if ( (LA124_1192==IS) && (synpred3_EsperEPL2Grammar())) {s = 1783;}

                        else if ( (LA124_1192==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1784;}

                        else if ( (LA124_1192==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1785;}

                        else if ( (LA124_1192==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1786;}

                        else if ( (LA124_1192==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1787;}

                        else if ( (LA124_1192==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1788;}

                        else if ( (LA124_1192==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1789;}

                        else if ( (LA124_1192==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1790;}

                        else if ( (LA124_1192==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 1791;}

                        else if ( (LA124_1192==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1792;}

                        else if ( (LA124_1192==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1793;}

                        else if ( (LA124_1192==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1794;}

                        else if ( (LA124_1192==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1795;}

                        else if ( (LA124_1192==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1796;}

                        else if ( (LA124_1192==RPAREN) ) {s = 14;}

                         
                        input.seek(index124_1192);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA124_1254 = input.LA(1);

                         
                        int index124_1254 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA124_1254==RPAREN) ) {s = 14;}

                        else if ( (LA124_1254==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1799;}

                        else if ( (LA124_1254==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1800;}

                        else if ( (LA124_1254==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1801;}

                        else if ( (LA124_1254==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1802;}

                        else if ( (LA124_1254==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1803;}

                        else if ( (LA124_1254==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1804;}

                        else if ( (LA124_1254==LT) && (synpred3_EsperEPL2Grammar())) {s = 1805;}

                        else if ( (LA124_1254==GT) && (synpred3_EsperEPL2Grammar())) {s = 1806;}

                        else if ( (LA124_1254==LE) && (synpred3_EsperEPL2Grammar())) {s = 1807;}

                        else if ( (LA124_1254==GE) && (synpred3_EsperEPL2Grammar())) {s = 1808;}

                        else if ( (LA124_1254==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1809;}

                        else if ( (LA124_1254==IS) && (synpred3_EsperEPL2Grammar())) {s = 1810;}

                        else if ( (LA124_1254==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1811;}

                        else if ( (LA124_1254==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1812;}

                        else if ( (LA124_1254==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1813;}

                        else if ( (LA124_1254==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1814;}

                        else if ( (LA124_1254==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1815;}

                        else if ( (LA124_1254==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1816;}

                        else if ( (LA124_1254==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1817;}

                        else if ( (LA124_1254==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 1818;}

                        else if ( (LA124_1254==AS) && (synpred3_EsperEPL2Grammar())) {s = 1819;}

                        else if ( (LA124_1254==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1820;}

                        else if ( (LA124_1254==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1821;}

                        else if ( (LA124_1254==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1822;}

                        else if ( (LA124_1254==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1823;}

                        else if ( (LA124_1254==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1824;}

                         
                        input.seek(index124_1254);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA124_1255 = input.LA(1);

                         
                        int index124_1255 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA124_1255==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1825;}

                        else if ( (LA124_1255==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1826;}

                        else if ( (LA124_1255==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1827;}

                        else if ( (LA124_1255==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1828;}

                        else if ( (LA124_1255==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1829;}

                        else if ( (LA124_1255==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1830;}

                        else if ( (LA124_1255==LT) && (synpred3_EsperEPL2Grammar())) {s = 1831;}

                        else if ( (LA124_1255==GT) && (synpred3_EsperEPL2Grammar())) {s = 1832;}

                        else if ( (LA124_1255==LE) && (synpred3_EsperEPL2Grammar())) {s = 1833;}

                        else if ( (LA124_1255==GE) && (synpred3_EsperEPL2Grammar())) {s = 1834;}

                        else if ( (LA124_1255==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1835;}

                        else if ( (LA124_1255==IS) && (synpred3_EsperEPL2Grammar())) {s = 1836;}

                        else if ( (LA124_1255==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1837;}

                        else if ( (LA124_1255==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1838;}

                        else if ( (LA124_1255==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1839;}

                        else if ( (LA124_1255==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1840;}

                        else if ( (LA124_1255==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1841;}

                        else if ( (LA124_1255==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1842;}

                        else if ( (LA124_1255==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1843;}

                        else if ( (LA124_1255==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 1844;}

                        else if ( (LA124_1255==AS) && (synpred3_EsperEPL2Grammar())) {s = 1845;}

                        else if ( (LA124_1255==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1846;}

                        else if ( (LA124_1255==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1847;}

                        else if ( (LA124_1255==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1848;}

                        else if ( (LA124_1255==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1849;}

                        else if ( (LA124_1255==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1850;}

                        else if ( (LA124_1255==RPAREN) ) {s = 14;}

                         
                        input.seek(index124_1255);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA124_1361 = input.LA(1);

                         
                        int index124_1361 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 1850;}

                         
                        input.seek(index124_1361);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA124_1386 = input.LA(1);

                         
                        int index124_1386 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 1850;}

                         
                        input.seek(index124_1386);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA124_1411 = input.LA(1);

                         
                        int index124_1411 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 1850;}

                         
                        input.seek(index124_1411);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA124_1436 = input.LA(1);

                         
                        int index124_1436 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 1850;}

                         
                        input.seek(index124_1436);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA124_1461 = input.LA(1);

                         
                        int index124_1461 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 1850;}

                         
                        input.seek(index124_1461);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA124_1486 = input.LA(1);

                         
                        int index124_1486 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 1850;}

                         
                        input.seek(index124_1486);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA124_1563 = input.LA(1);

                         
                        int index124_1563 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 1850;}

                         
                        input.seek(index124_1563);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA124_1588 = input.LA(1);

                         
                        int index124_1588 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 1850;}

                         
                        input.seek(index124_1588);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA124_1613 = input.LA(1);

                         
                        int index124_1613 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 1850;}

                         
                        input.seek(index124_1613);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA124_1638 = input.LA(1);

                         
                        int index124_1638 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 1850;}

                         
                        input.seek(index124_1638);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA124_1663 = input.LA(1);

                         
                        int index124_1663 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 1850;}

                         
                        input.seek(index124_1663);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA124_1688 = input.LA(1);

                         
                        int index124_1688 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 1850;}

                         
                        input.seek(index124_1688);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 124, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA147_eotS =
        "\u0430\uffff";
    static final String DFA147_eofS =
        "\1\uffff\1\104\1\170\6\uffff\1\u00ac\1\u00e0\u00ec\uffff\1\u0211"+
        "\1\u0244\1\u0278\1\u02ac\135\uffff\1\u0315\1\u0348\1\u037c\1\u03b0"+
        "\u02d4\uffff";
    static final String DFA147_minS =
        "\1\5\2\6\6\uffff\2\6\34\uffff\2\5\62\uffff\1\5\65\uffff\1\5\63"+
        "\uffff\1\5\61\uffff\4\6\42\uffff\2\6\71\uffff\4\6\53\uffff\2\6\71"+
        "\uffff\2\6\60\uffff\2\0\145\uffff\1\0\2\uffff\1\0\61\uffff\1\0\107"+
        "\uffff\1\0\5\uffff\1\0\31\uffff\2\0\145\uffff\1\0\2\uffff\1\0\61"+
        "\uffff\1\0\63\uffff\1\0\31\uffff\1\0\31\uffff\1\0\31\uffff\1\0\31"+
        "\uffff";
    static final String DFA147_maxS =
        "\1\u00fe\2\u00fd\6\uffff\2\u00fd\34\uffff\1\u00fe\1\u0100\62\uffff"+
        "\1\u00fe\65\uffff\1\u0100\63\uffff\1\u0100\61\uffff\4\u00fd\42\uffff"+
        "\2\u00f7\71\uffff\4\u00fd\53\uffff\2\u00f7\71\uffff\2\u00f7\60\uffff"+
        "\2\0\145\uffff\1\0\2\uffff\1\0\61\uffff\1\0\107\uffff\1\0\5\uffff"+
        "\1\0\31\uffff\2\0\145\uffff\1\0\2\uffff\1\0\61\uffff\1\0\63\uffff"+
        "\1\0\31\uffff\1\0\31\uffff\1\0\31\uffff\1\0\31\uffff";
    static final String DFA147_acceptS =
        "\3\uffff\6\1\2\uffff\34\1\2\uffff\62\1\1\uffff\65\1\1\uffff\63"+
        "\1\1\uffff\61\1\4\uffff\42\1\2\uffff\1\2\74\uffff\42\1\170\uffff"+
        "\145\1\1\uffff\2\1\1\uffff\61\1\1\uffff\63\1\66\uffff\145\1\1\uffff"+
        "\2\1\1\uffff\61\1\1\uffff\63\1\150\uffff";
    static final String DFA147_specialS =
        "\1\0\1\1\1\2\6\uffff\1\3\1\4\34\uffff\1\5\63\uffff\1\6\u009b\uffff"+
        "\1\7\1\10\1\11\1\12\135\uffff\1\13\1\14\1\15\1\16\u0098\uffff\1"+
        "\17\1\20\145\uffff\1\21\2\uffff\1\22\61\uffff\1\23\107\uffff\1\24"+
        "\5\uffff\1\25\31\uffff\1\26\1\27\145\uffff\1\30\2\uffff\1\31\61"+
        "\uffff\1\32\63\uffff\1\33\31\uffff\1\34\31\uffff\1\35\31\uffff\1"+
        "\36\31\uffff}>";
    static final String[] DFA147_transitionS = {
            "\1\41\4\uffff\1\5\3\uffff\1\6\2\uffff\1\7\1\10\1\11\1\12\1"+
            "\13\1\14\1\15\1\16\1\4\10\uffff\1\44\1\uffff\1\46\1\42\1\43"+
            "\1\45\12\uffff\1\17\1\20\1\21\10\uffff\1\22\1\23\1\24\1\26\1"+
            "\27\1\30\1\31\1\32\1\uffff\1\33\1\34\1\35\1\36\2\uffff\1\37"+
            "\1\uffff\1\40\1\25\1\3\u008e\uffff\1\1\36\uffff\1\2",
            "\1\126\1\127\1\130\1\131\1\132\1\76\1\75\1\125\2\uffff\1\107"+
            "\14\uffff\1\114\1\116\1\113\1\115\1\110\7\uffff\1\67\1\uffff"+
            "\1\77\1\100\4\uffff\1\101\5\uffff\1\102\1\111\1\112\35\uffff"+
            "\1\124\1\123\1\122\6\uffff\1\103\175\uffff\1\106\1\uffff\1\66"+
            "\1\47\1\50\1\105\1\54\1\52\1\120\1\117\2\uffff\1\72\1\73\1\74"+
            "\1\70\1\71\1\62\1\63\1\64\1\65\1\61\1\57\1\60\1\55\1\56\1\uffff"+
            "\1\121\2\uffff\1\53\1\51",
            "\1\u008a\1\u008b\1\u008c\1\u008d\1\u008e\1\162\1\161\1\u0089"+
            "\2\uffff\1\173\14\uffff\1\u0080\1\u0082\1\177\1\u0081\1\174"+
            "\7\uffff\1\153\1\uffff\1\163\1\164\4\uffff\1\165\5\uffff\1\166"+
            "\1\175\1\176\35\uffff\1\u0088\1\u0087\1\u0086\6\uffff\1\167"+
            "\175\uffff\1\172\1\uffff\1\152\1\133\1\136\1\171\1\140\1\135"+
            "\1\u0084\1\u0083\2\uffff\1\156\1\157\1\160\1\154\1\155\1\146"+
            "\1\147\1\150\1\151\1\145\1\143\1\144\1\141\1\142\1\uffff\1\u0085"+
            "\2\uffff\1\137\1\134",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u00be\1\u00bf\1\u00c0\1\u00c1\1\u00c2\1\u00a6\1\u00a5\1"+
            "\u00bd\2\uffff\1\u00af\14\uffff\1\u00b4\1\u00b6\1\u00b3\1\u00b5"+
            "\1\u00b0\7\uffff\1\u009f\1\uffff\1\u00a7\1\u00a8\4\uffff\1\u00a9"+
            "\5\uffff\1\u00aa\1\u00b1\1\u00b2\35\uffff\1\u00bc\1\u00bb\1"+
            "\u00ba\6\uffff\1\u00ab\175\uffff\1\u00ae\1\uffff\1\u009e\1\u0093"+
            "\1\u0091\1\u00ad\1\u0094\1\u0090\1\u00b8\1\u00b7\2\uffff\1\u00a2"+
            "\1\u00a3\1\u00a4\1\u00a0\1\u00a1\1\u009a\1\u009b\1\u009c\1\u009d"+
            "\1\u0099\1\u0097\1\u0098\1\u0095\1\u0096\1\uffff\1\u00b9\2\uffff"+
            "\1\u0092\1\u008f",
            "\1\u00f2\1\u00f3\1\u00f4\1\u00f5\1\u00f6\1\u00da\1\u00d9\1"+
            "\u00f1\2\uffff\1\u00e3\14\uffff\1\u00e8\1\u00ea\1\u00e7\1\u00e9"+
            "\1\u00e4\7\uffff\1\u00d3\1\uffff\1\u00db\1\u00dc\4\uffff\1\u00dd"+
            "\5\uffff\1\u00de\1\u00e5\1\u00e6\35\uffff\1\u00f0\1\u00ef\1"+
            "\u00ee\6\uffff\1\u00df\175\uffff\1\u00e2\1\uffff\1\u00d2\1\u00c7"+
            "\1\u00c5\1\u00e1\1\u00c8\1\u00c4\1\u00ec\1\u00eb\2\uffff\1\u00d6"+
            "\1\u00d7\1\u00d8\1\u00d4\1\u00d5\1\u00ce\1\u00cf\1\u00d0\1\u00d1"+
            "\1\u00cd\1\u00cb\1\u00cc\1\u00c9\1\u00ca\1\uffff\1\u00ed\2\uffff"+
            "\1\u00c6\1\u00c3",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0117\4\uffff\1\u00fd\3\uffff\1\u00fe\2\uffff\1\u00ff\1"+
            "\u0100\1\u00f9\1\u00fa\1\u0101\1\u0102\1\u0103\1\u0104\1\u00fc"+
            "\10\uffff\1\u011a\1\uffff\1\u011c\1\u0118\1\u0119\1\u011b\12"+
            "\uffff\1\u0105\1\u0106\1\u0107\10\uffff\1\u0108\1\u0109\1\u010a"+
            "\1\u010c\1\u010d\1\u010e\1\u010f\1\u0110\1\uffff\1\u0111\1\u0112"+
            "\1\u0113\1\u0114\2\uffff\1\u0115\1\uffff\1\u0116\1\u010b\1\u00fb"+
            "\u008e\uffff\1\u00f7\36\uffff\1\u00f8",
            "\1\u011f\4\uffff\1\u011f\2\uffff\2\u011f\2\uffff\11\u011f"+
            "\1\uffff\1\u011f\6\uffff\1\u011f\1\uffff\4\u011f\5\uffff\2\u011f"+
            "\3\uffff\3\u011f\10\uffff\16\u011f\1\uffff\1\u011f\1\uffff\3"+
            "\u011f\14\uffff\3\u011f\174\uffff\1\u011f\2\uffff\1\u011f\2"+
            "\uffff\2\u011f\4\uffff\1\u011d\1\u011e\12\uffff\2\u011f\2\uffff"+
            "\1\u011f\1\uffff\1\u011f\1\uffff\1\u011f\1\uffff\3\u011f",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0178\4\uffff\1\u015e\3\uffff\1\u015f\2\uffff\1\u0160\1"+
            "\u0161\1\u015a\1\u015b\1\u0162\1\u0163\1\u0164\1\u0165\1\u015d"+
            "\10\uffff\1\u017b\1\uffff\1\u017d\1\u0179\1\u017a\1\u017c\12"+
            "\uffff\1\u0166\1\u0167\1\u0168\10\uffff\1\u0169\1\u016a\1\u016b"+
            "\1\u016d\1\u016e\1\u016f\1\u0170\1\u0171\1\uffff\1\u0172\1\u0173"+
            "\1\u0174\1\u0175\2\uffff\1\u0176\1\uffff\1\u0177\1\u016c\1\u015c"+
            "\u008e\uffff\1\u0158\36\uffff\1\u0159",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u011f\4\uffff\1\u011f\2\uffff\2\u011f\2\uffff\11\u011f"+
            "\1\uffff\1\u011f\6\uffff\1\u011f\1\uffff\4\u011f\5\uffff\2\u011f"+
            "\3\uffff\3\u011f\10\uffff\16\u011f\1\uffff\1\u011f\1\uffff\3"+
            "\u011f\14\uffff\3\u011f\174\uffff\1\u011f\2\uffff\1\u011f\2"+
            "\uffff\2\u011f\4\uffff\1\u0187\1\u0188\12\uffff\2\u011f\2\uffff"+
            "\1\u011f\1\uffff\1\u011f\1\uffff\1\u011f\1\uffff\3\u011f",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u011f\4\uffff\1\u011f\2\uffff\2\u011f\2\uffff\11\u011f"+
            "\1\uffff\1\u011f\6\uffff\1\u011f\1\uffff\4\u011f\5\uffff\2\u011f"+
            "\3\uffff\3\u011f\10\uffff\16\u011f\1\uffff\1\u011f\1\uffff\3"+
            "\u011f\14\uffff\3\u011f\174\uffff\1\u011f\2\uffff\1\u011f\2"+
            "\uffff\2\u011f\4\uffff\1\u01c2\1\u01c3\12\uffff\2\u011f\2\uffff"+
            "\1\u011f\1\uffff\1\u011f\1\uffff\1\u011f\1\uffff\3\u011f",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0223\1\u0224\1\u0225\1\u0226\1\u0227\1\u020b\1\u020a\1"+
            "\u0222\2\uffff\1\u0214\14\uffff\1\u0219\1\u021b\1\u0218\1\u021a"+
            "\1\u0215\7\uffff\1\u0204\1\uffff\1\u020c\1\u020d\4\uffff\1\u020e"+
            "\5\uffff\1\u020f\1\u0216\1\u0217\35\uffff\1\u0221\1\u0220\1"+
            "\u021f\6\uffff\1\u0210\175\uffff\1\u0213\1\uffff\1\u0203\1\u01f4"+
            "\1\u01f5\1\u0212\1\u01f9\1\u01f7\1\u021d\1\u021c\2\uffff\1\u0207"+
            "\1\u0208\1\u0209\1\u0205\1\u0206\1\u01ff\1\u0200\1\u0201\1\u0202"+
            "\1\u01fe\1\u01fc\1\u01fd\1\u01fa\1\u01fb\1\uffff\1\u021e\2\uffff"+
            "\1\u01f8\1\u01f6",
            "\1\u0256\1\u0257\1\u0258\1\u0259\1\u025a\1\u023e\1\u023d\1"+
            "\u0255\2\uffff\1\u0247\14\uffff\1\u024c\1\u024e\1\u024b\1\u024d"+
            "\1\u0248\7\uffff\1\u0237\1\uffff\1\u023f\1\u0240\4\uffff\1\u0241"+
            "\5\uffff\1\u0242\1\u0249\1\u024a\35\uffff\1\u0254\1\u0253\1"+
            "\u0252\6\uffff\1\u0243\175\uffff\1\u0246\1\uffff\1\u0236\1\u025b"+
            "\1\u022a\1\u0245\1\u022c\1\u0229\1\u0250\1\u024f\2\uffff\1\u023a"+
            "\1\u023b\1\u023c\1\u0238\1\u0239\1\u0232\1\u0233\1\u0234\1\u0235"+
            "\1\u0231\1\u022f\1\u0230\1\u022d\1\u022e\1\uffff\1\u0251\2\uffff"+
            "\1\u022b\1\u0228",
            "\1\u028a\1\u028b\1\u028c\1\u028d\1\u028e\1\u0272\1\u0271\1"+
            "\u0289\2\uffff\1\u027b\14\uffff\1\u0280\1\u0282\1\u027f\1\u0281"+
            "\1\u027c\7\uffff\1\u026b\1\uffff\1\u0273\1\u0274\4\uffff\1\u0275"+
            "\5\uffff\1\u0276\1\u027d\1\u027e\35\uffff\1\u0288\1\u0287\1"+
            "\u0286\6\uffff\1\u0277\175\uffff\1\u027a\1\uffff\1\u026a\1\u028f"+
            "\1\u025e\1\u0279\1\u0260\1\u025d\1\u0284\1\u0283\2\uffff\1\u026e"+
            "\1\u026f\1\u0270\1\u026c\1\u026d\1\u0266\1\u0267\1\u0268\1\u0269"+
            "\1\u0265\1\u0263\1\u0264\1\u0261\1\u0262\1\uffff\1\u0285\2\uffff"+
            "\1\u025f\1\u025c",
            "\1\u02be\1\u02bf\1\u02c0\1\u02c1\1\u02c2\1\u02a6\1\u02a5\1"+
            "\u02bd\2\uffff\1\u02af\14\uffff\1\u02b4\1\u02b6\1\u02b3\1\u02b5"+
            "\1\u02b0\7\uffff\1\u029f\1\uffff\1\u02a7\1\u02a8\4\uffff\1\u02a9"+
            "\5\uffff\1\u02aa\1\u02b1\1\u02b2\35\uffff\1\u02bc\1\u02bb\1"+
            "\u02ba\6\uffff\1\u02ab\175\uffff\1\u02ae\1\uffff\1\u029e\1\u02c3"+
            "\1\u0290\1\u02ad\1\u0294\1\u0292\1\u02b8\1\u02b7\2\uffff\1\u02a2"+
            "\1\u02a3\1\u02a4\1\u02a0\1\u02a1\1\u029a\1\u029b\1\u029c\1\u029d"+
            "\1\u0299\1\u0297\1\u0298\1\u0295\1\u0296\1\uffff\1\u02b9\2\uffff"+
            "\1\u0293\1\u0291",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\4\u011f\1\uffff\3\u011f\33\uffff\1\u011f\u00b4\uffff\1\u011f"+
            "\1\uffff\1\u011f\2\uffff\1\u02d8\1\u011f\5\uffff\16\u011f",
            "\4\u011f\1\uffff\3\u011f\33\uffff\1\u011f\u00b4\uffff\1\u011f"+
            "\1\uffff\1\u011f\2\uffff\1\u02de\1\u011f\5\uffff\16\u011f",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0327\1\u0328\1\u0329\1\u032a\1\u032b\1\u030f\1\u030e\1"+
            "\u0326\2\uffff\1\u0318\14\uffff\1\u031d\1\u031f\1\u031c\1\u031e"+
            "\1\u0319\7\uffff\1\u0308\1\uffff\1\u0310\1\u0311\4\uffff\1\u0312"+
            "\5\uffff\1\u0313\1\u031a\1\u031b\35\uffff\1\u0325\1\u0324\1"+
            "\u0323\6\uffff\1\u0314\175\uffff\1\u0317\1\uffff\1\u0307\1\u02f8"+
            "\1\u02f9\1\u0316\1\u02fd\1\u02fb\1\u0321\1\u0320\2\uffff\1\u030b"+
            "\1\u030c\1\u030d\1\u0309\1\u030a\1\u0303\1\u0304\1\u0305\1\u0306"+
            "\1\u0302\1\u0300\1\u0301\1\u02fe\1\u02ff\1\uffff\1\u0322\2\uffff"+
            "\1\u02fc\1\u02fa",
            "\1\u035a\1\u035b\1\u035c\1\u035d\1\u035e\1\u0342\1\u0341\1"+
            "\u0359\2\uffff\1\u034b\14\uffff\1\u0350\1\u0352\1\u034f\1\u0351"+
            "\1\u034c\7\uffff\1\u033b\1\uffff\1\u0343\1\u0344\4\uffff\1\u0345"+
            "\5\uffff\1\u0346\1\u034d\1\u034e\35\uffff\1\u0358\1\u0357\1"+
            "\u0356\6\uffff\1\u0347\175\uffff\1\u034a\1\uffff\1\u033a\1\u035f"+
            "\1\u032e\1\u0349\1\u0330\1\u032d\1\u0354\1\u0353\2\uffff\1\u033e"+
            "\1\u033f\1\u0340\1\u033c\1\u033d\1\u0336\1\u0337\1\u0338\1\u0339"+
            "\1\u0335\1\u0333\1\u0334\1\u0331\1\u0332\1\uffff\1\u0355\2\uffff"+
            "\1\u032f\1\u032c",
            "\1\u038e\1\u038f\1\u0390\1\u0391\1\u0392\1\u0376\1\u0375\1"+
            "\u038d\2\uffff\1\u037f\14\uffff\1\u0384\1\u0386\1\u0383\1\u0385"+
            "\1\u0380\7\uffff\1\u036f\1\uffff\1\u0377\1\u0378\4\uffff\1\u0379"+
            "\5\uffff\1\u037a\1\u0381\1\u0382\35\uffff\1\u038c\1\u038b\1"+
            "\u038a\6\uffff\1\u037b\175\uffff\1\u037e\1\uffff\1\u036e\1\u0393"+
            "\1\u0362\1\u037d\1\u0364\1\u0361\1\u0388\1\u0387\2\uffff\1\u0372"+
            "\1\u0373\1\u0374\1\u0370\1\u0371\1\u036a\1\u036b\1\u036c\1\u036d"+
            "\1\u0369\1\u0367\1\u0368\1\u0365\1\u0366\1\uffff\1\u0389\2\uffff"+
            "\1\u0363\1\u0360",
            "\1\u03c2\1\u03c3\1\u03c4\1\u03c5\1\u03c6\1\u03aa\1\u03a9\1"+
            "\u03c1\2\uffff\1\u03b3\14\uffff\1\u03b8\1\u03ba\1\u03b7\1\u03b9"+
            "\1\u03b4\7\uffff\1\u03a3\1\uffff\1\u03ab\1\u03ac\4\uffff\1\u03ad"+
            "\5\uffff\1\u03ae\1\u03b5\1\u03b6\35\uffff\1\u03c0\1\u03bf\1"+
            "\u03be\6\uffff\1\u03af\175\uffff\1\u03b2\1\uffff\1\u03a2\1\u03c7"+
            "\1\u0394\1\u03b1\1\u0398\1\u0396\1\u03bc\1\u03bb\2\uffff\1\u03a6"+
            "\1\u03a7\1\u03a8\1\u03a4\1\u03a5\1\u039e\1\u039f\1\u03a0\1\u03a1"+
            "\1\u039d\1\u039b\1\u039c\1\u0399\1\u039a\1\uffff\1\u03bd\2\uffff"+
            "\1\u0397\1\u0395",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\4\u011f\1\uffff\3\u011f\33\uffff\1\u011f\u00b4\uffff\1\u011f"+
            "\1\uffff\1\u011f\2\uffff\1\u03c8\1\u011f\5\uffff\16\u011f",
            "\4\u011f\1\uffff\3\u011f\33\uffff\1\u011f\u00b4\uffff\1\u011f"+
            "\1\uffff\1\u011f\2\uffff\1\u03e2\1\u011f\5\uffff\16\u011f",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\4\u011f\1\uffff\3\u011f\33\uffff\1\u011f\u00b4\uffff\1\u011f"+
            "\1\uffff\1\u011f\2\uffff\1\u03fc\1\u011f\5\uffff\16\u011f",
            "\4\u011f\1\uffff\3\u011f\33\uffff\1\u011f\u00b4\uffff\1\u011f"+
            "\1\uffff\1\u011f\2\uffff\1\u0416\1\u011f\5\uffff\16\u011f",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA147_eot = DFA.unpackEncodedString(DFA147_eotS);
    static final short[] DFA147_eof = DFA.unpackEncodedString(DFA147_eofS);
    static final char[] DFA147_min = DFA.unpackEncodedStringToUnsignedChars(DFA147_minS);
    static final char[] DFA147_max = DFA.unpackEncodedStringToUnsignedChars(DFA147_maxS);
    static final short[] DFA147_accept = DFA.unpackEncodedString(DFA147_acceptS);
    static final short[] DFA147_special = DFA.unpackEncodedString(DFA147_specialS);
    static final short[][] DFA147_transition;

    static {
        int numStates = DFA147_transitionS.length;
        DFA147_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA147_transition[i] = DFA.unpackEncodedString(DFA147_transitionS[i]);
        }
    }

    class DFA147 extends DFA {

        public DFA147(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 147;
            this.eot = DFA147_eot;
            this.eof = DFA147_eof;
            this.min = DFA147_min;
            this.max = DFA147_max;
            this.accept = DFA147_accept;
            this.special = DFA147_special;
            this.transition = DFA147_transition;
        }
        public String getDescription() {
            return "1037:1: eventPropertyOrLibFunction : ( ( eventProperty )=> eventProperty | libFunction );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA147_0 = input.LA(1);

                         
                        int index147_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA147_0==IDENT) ) {s = 1;}

                        else if ( (LA147_0==TICKED_STRING_LITERAL) ) {s = 2;}

                        else if ( (LA147_0==AT) && (synpred4_EsperEPL2Grammar())) {s = 3;}

                        else if ( (LA147_0==COUNT) && (synpred4_EsperEPL2Grammar())) {s = 4;}

                        else if ( (LA147_0==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 5;}

                        else if ( (LA147_0==EVERY_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 6;}

                        else if ( (LA147_0==SUM) && (synpred4_EsperEPL2Grammar())) {s = 7;}

                        else if ( (LA147_0==AVG) && (synpred4_EsperEPL2Grammar())) {s = 8;}

                        else if ( (LA147_0==MAX) ) {s = 9;}

                        else if ( (LA147_0==MIN) ) {s = 10;}

                        else if ( (LA147_0==COALESCE) && (synpred4_EsperEPL2Grammar())) {s = 11;}

                        else if ( (LA147_0==MEDIAN) && (synpred4_EsperEPL2Grammar())) {s = 12;}

                        else if ( (LA147_0==STDDEV) && (synpred4_EsperEPL2Grammar())) {s = 13;}

                        else if ( (LA147_0==AVEDEV) && (synpred4_EsperEPL2Grammar())) {s = 14;}

                        else if ( (LA147_0==EVENTS) && (synpred4_EsperEPL2Grammar())) {s = 15;}

                        else if ( (LA147_0==FIRST) && (synpred4_EsperEPL2Grammar())) {s = 16;}

                        else if ( (LA147_0==LAST) && (synpred4_EsperEPL2Grammar())) {s = 17;}

                        else if ( (LA147_0==UNIDIRECTIONAL) && (synpred4_EsperEPL2Grammar())) {s = 18;}

                        else if ( (LA147_0==RETAINUNION) && (synpred4_EsperEPL2Grammar())) {s = 19;}

                        else if ( (LA147_0==RETAININTERSECTION) && (synpred4_EsperEPL2Grammar())) {s = 20;}

                        else if ( (LA147_0==UNTIL) && (synpred4_EsperEPL2Grammar())) {s = 21;}

                        else if ( (LA147_0==PATTERN) && (synpred4_EsperEPL2Grammar())) {s = 22;}

                        else if ( (LA147_0==SQL) && (synpred4_EsperEPL2Grammar())) {s = 23;}

                        else if ( (LA147_0==METADATASQL) && (synpred4_EsperEPL2Grammar())) {s = 24;}

                        else if ( (LA147_0==PREVIOUS) && (synpred4_EsperEPL2Grammar())) {s = 25;}

                        else if ( (LA147_0==PRIOR) && (synpred4_EsperEPL2Grammar())) {s = 26;}

                        else if ( (LA147_0==WEEKDAY) && (synpred4_EsperEPL2Grammar())) {s = 27;}

                        else if ( (LA147_0==LW) && (synpred4_EsperEPL2Grammar())) {s = 28;}

                        else if ( (LA147_0==INSTANCEOF) && (synpred4_EsperEPL2Grammar())) {s = 29;}

                        else if ( (LA147_0==CAST) && (synpred4_EsperEPL2Grammar())) {s = 30;}

                        else if ( (LA147_0==SNAPSHOT) && (synpred4_EsperEPL2Grammar())) {s = 31;}

                        else if ( (LA147_0==VARIABLE) && (synpred4_EsperEPL2Grammar())) {s = 32;}

                        else if ( (LA147_0==WINDOW) && (synpred4_EsperEPL2Grammar())) {s = 33;}

                        else if ( (LA147_0==LEFT) && (synpred4_EsperEPL2Grammar())) {s = 34;}

                        else if ( (LA147_0==RIGHT) && (synpred4_EsperEPL2Grammar())) {s = 35;}

                        else if ( (LA147_0==OUTER) && (synpred4_EsperEPL2Grammar())) {s = 36;}

                        else if ( (LA147_0==FULL) && (synpred4_EsperEPL2Grammar())) {s = 37;}

                        else if ( (LA147_0==JOIN) && (synpred4_EsperEPL2Grammar())) {s = 38;}

                         
                        input.seek(index147_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA147_1 = input.LA(1);

                         
                        int index147_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA147_1==DOT) ) {s = 39;}

                        else if ( (LA147_1==LPAREN) ) {s = 40;}

                        else if ( (LA147_1==ESCAPECHAR) && (synpred4_EsperEPL2Grammar())) {s = 41;}

                        else if ( (LA147_1==LBRACK) && (synpred4_EsperEPL2Grammar())) {s = 42;}

                        else if ( (LA147_1==QUESTION) && (synpred4_EsperEPL2Grammar())) {s = 43;}

                        else if ( (LA147_1==STAR) && (synpred4_EsperEPL2Grammar())) {s = 44;}

                        else if ( (LA147_1==DIV) && (synpred4_EsperEPL2Grammar())) {s = 45;}

                        else if ( (LA147_1==MOD) && (synpred4_EsperEPL2Grammar())) {s = 46;}

                        else if ( (LA147_1==PLUS) && (synpred4_EsperEPL2Grammar())) {s = 47;}

                        else if ( (LA147_1==MINUS) && (synpred4_EsperEPL2Grammar())) {s = 48;}

                        else if ( (LA147_1==LOR) && (synpred4_EsperEPL2Grammar())) {s = 49;}

                        else if ( (LA147_1==LT) && (synpred4_EsperEPL2Grammar())) {s = 50;}

                        else if ( (LA147_1==GT) && (synpred4_EsperEPL2Grammar())) {s = 51;}

                        else if ( (LA147_1==LE) && (synpred4_EsperEPL2Grammar())) {s = 52;}

                        else if ( (LA147_1==GE) && (synpred4_EsperEPL2Grammar())) {s = 53;}

                        else if ( (LA147_1==EQUALS) && (synpred4_EsperEPL2Grammar())) {s = 54;}

                        else if ( (LA147_1==IS) && (synpred4_EsperEPL2Grammar())) {s = 55;}

                        else if ( (LA147_1==SQL_NE) && (synpred4_EsperEPL2Grammar())) {s = 56;}

                        else if ( (LA147_1==NOT_EQUAL) && (synpred4_EsperEPL2Grammar())) {s = 57;}

                        else if ( (LA147_1==BAND) && (synpred4_EsperEPL2Grammar())) {s = 58;}

                        else if ( (LA147_1==BOR) && (synpred4_EsperEPL2Grammar())) {s = 59;}

                        else if ( (LA147_1==BXOR) && (synpred4_EsperEPL2Grammar())) {s = 60;}

                        else if ( (LA147_1==AND_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 61;}

                        else if ( (LA147_1==OR_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 62;}

                        else if ( (LA147_1==GROUP) && (synpred4_EsperEPL2Grammar())) {s = 63;}

                        else if ( (LA147_1==HAVING) && (synpred4_EsperEPL2Grammar())) {s = 64;}

                        else if ( (LA147_1==OUTPUT) && (synpred4_EsperEPL2Grammar())) {s = 65;}

                        else if ( (LA147_1==ORDER) && (synpred4_EsperEPL2Grammar())) {s = 66;}

                        else if ( (LA147_1==ROW_LIMIT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 67;}

                        else if ( (LA147_1==EOF) && (synpred4_EsperEPL2Grammar())) {s = 68;}

                        else if ( (LA147_1==RPAREN) && (synpred4_EsperEPL2Grammar())) {s = 69;}

                        else if ( (LA147_1==COMMA) && (synpred4_EsperEPL2Grammar())) {s = 70;}

                        else if ( (LA147_1==AS) && (synpred4_EsperEPL2Grammar())) {s = 71;}

                        else if ( (LA147_1==FROM) && (synpred4_EsperEPL2Grammar())) {s = 72;}

                        else if ( (LA147_1==ASC) && (synpred4_EsperEPL2Grammar())) {s = 73;}

                        else if ( (LA147_1==DESC) && (synpred4_EsperEPL2Grammar())) {s = 74;}

                        else if ( (LA147_1==THEN) && (synpred4_EsperEPL2Grammar())) {s = 75;}

                        else if ( (LA147_1==ELSE) && (synpred4_EsperEPL2Grammar())) {s = 76;}

                        else if ( (LA147_1==END) && (synpred4_EsperEPL2Grammar())) {s = 77;}

                        else if ( (LA147_1==WHEN) && (synpred4_EsperEPL2Grammar())) {s = 78;}

                        else if ( (LA147_1==COLON) && (synpred4_EsperEPL2Grammar())) {s = 79;}

                        else if ( (LA147_1==RBRACK) && (synpred4_EsperEPL2Grammar())) {s = 80;}

                        else if ( (LA147_1==RCURLY) && (synpred4_EsperEPL2Grammar())) {s = 81;}

                        else if ( (LA147_1==TIMEPERIOD_SECONDS) && (synpred4_EsperEPL2Grammar())) {s = 82;}

                        else if ( (LA147_1==TIMEPERIOD_SECOND) && (synpred4_EsperEPL2Grammar())) {s = 83;}

                        else if ( (LA147_1==TIMEPERIOD_SEC) && (synpred4_EsperEPL2Grammar())) {s = 84;}

                        else if ( (LA147_1==NOT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 85;}

                        else if ( (LA147_1==IN_SET) && (synpred4_EsperEPL2Grammar())) {s = 86;}

                        else if ( (LA147_1==BETWEEN) && (synpred4_EsperEPL2Grammar())) {s = 87;}

                        else if ( (LA147_1==LIKE) && (synpred4_EsperEPL2Grammar())) {s = 88;}

                        else if ( (LA147_1==REGEXP) && (synpred4_EsperEPL2Grammar())) {s = 89;}

                        else if ( (LA147_1==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 90;}

                         
                        input.seek(index147_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA147_2 = input.LA(1);

                         
                        int index147_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA147_2==DOT) ) {s = 91;}

                        else if ( (LA147_2==ESCAPECHAR) && (synpred4_EsperEPL2Grammar())) {s = 92;}

                        else if ( (LA147_2==LBRACK) && (synpred4_EsperEPL2Grammar())) {s = 93;}

                        else if ( (LA147_2==LPAREN) && (synpred4_EsperEPL2Grammar())) {s = 94;}

                        else if ( (LA147_2==QUESTION) && (synpred4_EsperEPL2Grammar())) {s = 95;}

                        else if ( (LA147_2==STAR) && (synpred4_EsperEPL2Grammar())) {s = 96;}

                        else if ( (LA147_2==DIV) && (synpred4_EsperEPL2Grammar())) {s = 97;}

                        else if ( (LA147_2==MOD) && (synpred4_EsperEPL2Grammar())) {s = 98;}

                        else if ( (LA147_2==PLUS) && (synpred4_EsperEPL2Grammar())) {s = 99;}

                        else if ( (LA147_2==MINUS) && (synpred4_EsperEPL2Grammar())) {s = 100;}

                        else if ( (LA147_2==LOR) && (synpred4_EsperEPL2Grammar())) {s = 101;}

                        else if ( (LA147_2==LT) && (synpred4_EsperEPL2Grammar())) {s = 102;}

                        else if ( (LA147_2==GT) && (synpred4_EsperEPL2Grammar())) {s = 103;}

                        else if ( (LA147_2==LE) && (synpred4_EsperEPL2Grammar())) {s = 104;}

                        else if ( (LA147_2==GE) && (synpred4_EsperEPL2Grammar())) {s = 105;}

                        else if ( (LA147_2==EQUALS) && (synpred4_EsperEPL2Grammar())) {s = 106;}

                        else if ( (LA147_2==IS) && (synpred4_EsperEPL2Grammar())) {s = 107;}

                        else if ( (LA147_2==SQL_NE) && (synpred4_EsperEPL2Grammar())) {s = 108;}

                        else if ( (LA147_2==NOT_EQUAL) && (synpred4_EsperEPL2Grammar())) {s = 109;}

                        else if ( (LA147_2==BAND) && (synpred4_EsperEPL2Grammar())) {s = 110;}

                        else if ( (LA147_2==BOR) && (synpred4_EsperEPL2Grammar())) {s = 111;}

                        else if ( (LA147_2==BXOR) && (synpred4_EsperEPL2Grammar())) {s = 112;}

                        else if ( (LA147_2==AND_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 113;}

                        else if ( (LA147_2==OR_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 114;}

                        else if ( (LA147_2==GROUP) && (synpred4_EsperEPL2Grammar())) {s = 115;}

                        else if ( (LA147_2==HAVING) && (synpred4_EsperEPL2Grammar())) {s = 116;}

                        else if ( (LA147_2==OUTPUT) && (synpred4_EsperEPL2Grammar())) {s = 117;}

                        else if ( (LA147_2==ORDER) && (synpred4_EsperEPL2Grammar())) {s = 118;}

                        else if ( (LA147_2==ROW_LIMIT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 119;}

                        else if ( (LA147_2==EOF) && (synpred4_EsperEPL2Grammar())) {s = 120;}

                        else if ( (LA147_2==RPAREN) && (synpred4_EsperEPL2Grammar())) {s = 121;}

                        else if ( (LA147_2==COMMA) && (synpred4_EsperEPL2Grammar())) {s = 122;}

                        else if ( (LA147_2==AS) && (synpred4_EsperEPL2Grammar())) {s = 123;}

                        else if ( (LA147_2==FROM) && (synpred4_EsperEPL2Grammar())) {s = 124;}

                        else if ( (LA147_2==ASC) && (synpred4_EsperEPL2Grammar())) {s = 125;}

                        else if ( (LA147_2==DESC) && (synpred4_EsperEPL2Grammar())) {s = 126;}

                        else if ( (LA147_2==THEN) && (synpred4_EsperEPL2Grammar())) {s = 127;}

                        else if ( (LA147_2==ELSE) && (synpred4_EsperEPL2Grammar())) {s = 128;}

                        else if ( (LA147_2==END) && (synpred4_EsperEPL2Grammar())) {s = 129;}

                        else if ( (LA147_2==WHEN) && (synpred4_EsperEPL2Grammar())) {s = 130;}

                        else if ( (LA147_2==COLON) && (synpred4_EsperEPL2Grammar())) {s = 131;}

                        else if ( (LA147_2==RBRACK) && (synpred4_EsperEPL2Grammar())) {s = 132;}

                        else if ( (LA147_2==RCURLY) && (synpred4_EsperEPL2Grammar())) {s = 133;}

                        else if ( (LA147_2==TIMEPERIOD_SECONDS) && (synpred4_EsperEPL2Grammar())) {s = 134;}

                        else if ( (LA147_2==TIMEPERIOD_SECOND) && (synpred4_EsperEPL2Grammar())) {s = 135;}

                        else if ( (LA147_2==TIMEPERIOD_SEC) && (synpred4_EsperEPL2Grammar())) {s = 136;}

                        else if ( (LA147_2==NOT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 137;}

                        else if ( (LA147_2==IN_SET) && (synpred4_EsperEPL2Grammar())) {s = 138;}

                        else if ( (LA147_2==BETWEEN) && (synpred4_EsperEPL2Grammar())) {s = 139;}

                        else if ( (LA147_2==LIKE) && (synpred4_EsperEPL2Grammar())) {s = 140;}

                        else if ( (LA147_2==REGEXP) && (synpred4_EsperEPL2Grammar())) {s = 141;}

                        else if ( (LA147_2==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 142;}

                         
                        input.seek(index147_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA147_9 = input.LA(1);

                         
                        int index147_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA147_9==ESCAPECHAR) && (synpred4_EsperEPL2Grammar())) {s = 143;}

                        else if ( (LA147_9==LBRACK) && (synpred4_EsperEPL2Grammar())) {s = 144;}

                        else if ( (LA147_9==LPAREN) ) {s = 145;}

                        else if ( (LA147_9==QUESTION) && (synpred4_EsperEPL2Grammar())) {s = 146;}

                        else if ( (LA147_9==DOT) && (synpred4_EsperEPL2Grammar())) {s = 147;}

                        else if ( (LA147_9==STAR) && (synpred4_EsperEPL2Grammar())) {s = 148;}

                        else if ( (LA147_9==DIV) && (synpred4_EsperEPL2Grammar())) {s = 149;}

                        else if ( (LA147_9==MOD) && (synpred4_EsperEPL2Grammar())) {s = 150;}

                        else if ( (LA147_9==PLUS) && (synpred4_EsperEPL2Grammar())) {s = 151;}

                        else if ( (LA147_9==MINUS) && (synpred4_EsperEPL2Grammar())) {s = 152;}

                        else if ( (LA147_9==LOR) && (synpred4_EsperEPL2Grammar())) {s = 153;}

                        else if ( (LA147_9==LT) && (synpred4_EsperEPL2Grammar())) {s = 154;}

                        else if ( (LA147_9==GT) && (synpred4_EsperEPL2Grammar())) {s = 155;}

                        else if ( (LA147_9==LE) && (synpred4_EsperEPL2Grammar())) {s = 156;}

                        else if ( (LA147_9==GE) && (synpred4_EsperEPL2Grammar())) {s = 157;}

                        else if ( (LA147_9==EQUALS) && (synpred4_EsperEPL2Grammar())) {s = 158;}

                        else if ( (LA147_9==IS) && (synpred4_EsperEPL2Grammar())) {s = 159;}

                        else if ( (LA147_9==SQL_NE) && (synpred4_EsperEPL2Grammar())) {s = 160;}

                        else if ( (LA147_9==NOT_EQUAL) && (synpred4_EsperEPL2Grammar())) {s = 161;}

                        else if ( (LA147_9==BAND) && (synpred4_EsperEPL2Grammar())) {s = 162;}

                        else if ( (LA147_9==BOR) && (synpred4_EsperEPL2Grammar())) {s = 163;}

                        else if ( (LA147_9==BXOR) && (synpred4_EsperEPL2Grammar())) {s = 164;}

                        else if ( (LA147_9==AND_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 165;}

                        else if ( (LA147_9==OR_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 166;}

                        else if ( (LA147_9==GROUP) && (synpred4_EsperEPL2Grammar())) {s = 167;}

                        else if ( (LA147_9==HAVING) && (synpred4_EsperEPL2Grammar())) {s = 168;}

                        else if ( (LA147_9==OUTPUT) && (synpred4_EsperEPL2Grammar())) {s = 169;}

                        else if ( (LA147_9==ORDER) && (synpred4_EsperEPL2Grammar())) {s = 170;}

                        else if ( (LA147_9==ROW_LIMIT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 171;}

                        else if ( (LA147_9==EOF) && (synpred4_EsperEPL2Grammar())) {s = 172;}

                        else if ( (LA147_9==RPAREN) && (synpred4_EsperEPL2Grammar())) {s = 173;}

                        else if ( (LA147_9==COMMA) && (synpred4_EsperEPL2Grammar())) {s = 174;}

                        else if ( (LA147_9==AS) && (synpred4_EsperEPL2Grammar())) {s = 175;}

                        else if ( (LA147_9==FROM) && (synpred4_EsperEPL2Grammar())) {s = 176;}

                        else if ( (LA147_9==ASC) && (synpred4_EsperEPL2Grammar())) {s = 177;}

                        else if ( (LA147_9==DESC) && (synpred4_EsperEPL2Grammar())) {s = 178;}

                        else if ( (LA147_9==THEN) && (synpred4_EsperEPL2Grammar())) {s = 179;}

                        else if ( (LA147_9==ELSE) && (synpred4_EsperEPL2Grammar())) {s = 180;}

                        else if ( (LA147_9==END) && (synpred4_EsperEPL2Grammar())) {s = 181;}

                        else if ( (LA147_9==WHEN) && (synpred4_EsperEPL2Grammar())) {s = 182;}

                        else if ( (LA147_9==COLON) && (synpred4_EsperEPL2Grammar())) {s = 183;}

                        else if ( (LA147_9==RBRACK) && (synpred4_EsperEPL2Grammar())) {s = 184;}

                        else if ( (LA147_9==RCURLY) && (synpred4_EsperEPL2Grammar())) {s = 185;}

                        else if ( (LA147_9==TIMEPERIOD_SECONDS) && (synpred4_EsperEPL2Grammar())) {s = 186;}

                        else if ( (LA147_9==TIMEPERIOD_SECOND) && (synpred4_EsperEPL2Grammar())) {s = 187;}

                        else if ( (LA147_9==TIMEPERIOD_SEC) && (synpred4_EsperEPL2Grammar())) {s = 188;}

                        else if ( (LA147_9==NOT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 189;}

                        else if ( (LA147_9==IN_SET) && (synpred4_EsperEPL2Grammar())) {s = 190;}

                        else if ( (LA147_9==BETWEEN) && (synpred4_EsperEPL2Grammar())) {s = 191;}

                        else if ( (LA147_9==LIKE) && (synpred4_EsperEPL2Grammar())) {s = 192;}

                        else if ( (LA147_9==REGEXP) && (synpred4_EsperEPL2Grammar())) {s = 193;}

                        else if ( (LA147_9==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 194;}

                         
                        input.seek(index147_9);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA147_10 = input.LA(1);

                         
                        int index147_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA147_10==ESCAPECHAR) && (synpred4_EsperEPL2Grammar())) {s = 195;}

                        else if ( (LA147_10==LBRACK) && (synpred4_EsperEPL2Grammar())) {s = 196;}

                        else if ( (LA147_10==LPAREN) ) {s = 197;}

                        else if ( (LA147_10==QUESTION) && (synpred4_EsperEPL2Grammar())) {s = 198;}

                        else if ( (LA147_10==DOT) && (synpred4_EsperEPL2Grammar())) {s = 199;}

                        else if ( (LA147_10==STAR) && (synpred4_EsperEPL2Grammar())) {s = 200;}

                        else if ( (LA147_10==DIV) && (synpred4_EsperEPL2Grammar())) {s = 201;}

                        else if ( (LA147_10==MOD) && (synpred4_EsperEPL2Grammar())) {s = 202;}

                        else if ( (LA147_10==PLUS) && (synpred4_EsperEPL2Grammar())) {s = 203;}

                        else if ( (LA147_10==MINUS) && (synpred4_EsperEPL2Grammar())) {s = 204;}

                        else if ( (LA147_10==LOR) && (synpred4_EsperEPL2Grammar())) {s = 205;}

                        else if ( (LA147_10==LT) && (synpred4_EsperEPL2Grammar())) {s = 206;}

                        else if ( (LA147_10==GT) && (synpred4_EsperEPL2Grammar())) {s = 207;}

                        else if ( (LA147_10==LE) && (synpred4_EsperEPL2Grammar())) {s = 208;}

                        else if ( (LA147_10==GE) && (synpred4_EsperEPL2Grammar())) {s = 209;}

                        else if ( (LA147_10==EQUALS) && (synpred4_EsperEPL2Grammar())) {s = 210;}

                        else if ( (LA147_10==IS) && (synpred4_EsperEPL2Grammar())) {s = 211;}

                        else if ( (LA147_10==SQL_NE) && (synpred4_EsperEPL2Grammar())) {s = 212;}

                        else if ( (LA147_10==NOT_EQUAL) && (synpred4_EsperEPL2Grammar())) {s = 213;}

                        else if ( (LA147_10==BAND) && (synpred4_EsperEPL2Grammar())) {s = 214;}

                        else if ( (LA147_10==BOR) && (synpred4_EsperEPL2Grammar())) {s = 215;}

                        else if ( (LA147_10==BXOR) && (synpred4_EsperEPL2Grammar())) {s = 216;}

                        else if ( (LA147_10==AND_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 217;}

                        else if ( (LA147_10==OR_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 218;}

                        else if ( (LA147_10==GROUP) && (synpred4_EsperEPL2Grammar())) {s = 219;}

                        else if ( (LA147_10==HAVING) && (synpred4_EsperEPL2Grammar())) {s = 220;}

                        else if ( (LA147_10==OUTPUT) && (synpred4_EsperEPL2Grammar())) {s = 221;}

                        else if ( (LA147_10==ORDER) && (synpred4_EsperEPL2Grammar())) {s = 222;}

                        else if ( (LA147_10==ROW_LIMIT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 223;}

                        else if ( (LA147_10==EOF) && (synpred4_EsperEPL2Grammar())) {s = 224;}

                        else if ( (LA147_10==RPAREN) && (synpred4_EsperEPL2Grammar())) {s = 225;}

                        else if ( (LA147_10==COMMA) && (synpred4_EsperEPL2Grammar())) {s = 226;}

                        else if ( (LA147_10==AS) && (synpred4_EsperEPL2Grammar())) {s = 227;}

                        else if ( (LA147_10==FROM) && (synpred4_EsperEPL2Grammar())) {s = 228;}

                        else if ( (LA147_10==ASC) && (synpred4_EsperEPL2Grammar())) {s = 229;}

                        else if ( (LA147_10==DESC) && (synpred4_EsperEPL2Grammar())) {s = 230;}

                        else if ( (LA147_10==THEN) && (synpred4_EsperEPL2Grammar())) {s = 231;}

                        else if ( (LA147_10==ELSE) && (synpred4_EsperEPL2Grammar())) {s = 232;}

                        else if ( (LA147_10==END) && (synpred4_EsperEPL2Grammar())) {s = 233;}

                        else if ( (LA147_10==WHEN) && (synpred4_EsperEPL2Grammar())) {s = 234;}

                        else if ( (LA147_10==COLON) && (synpred4_EsperEPL2Grammar())) {s = 235;}

                        else if ( (LA147_10==RBRACK) && (synpred4_EsperEPL2Grammar())) {s = 236;}

                        else if ( (LA147_10==RCURLY) && (synpred4_EsperEPL2Grammar())) {s = 237;}

                        else if ( (LA147_10==TIMEPERIOD_SECONDS) && (synpred4_EsperEPL2Grammar())) {s = 238;}

                        else if ( (LA147_10==TIMEPERIOD_SECOND) && (synpred4_EsperEPL2Grammar())) {s = 239;}

                        else if ( (LA147_10==TIMEPERIOD_SEC) && (synpred4_EsperEPL2Grammar())) {s = 240;}

                        else if ( (LA147_10==NOT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 241;}

                        else if ( (LA147_10==IN_SET) && (synpred4_EsperEPL2Grammar())) {s = 242;}

                        else if ( (LA147_10==BETWEEN) && (synpred4_EsperEPL2Grammar())) {s = 243;}

                        else if ( (LA147_10==LIKE) && (synpred4_EsperEPL2Grammar())) {s = 244;}

                        else if ( (LA147_10==REGEXP) && (synpred4_EsperEPL2Grammar())) {s = 245;}

                        else if ( (LA147_10==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 246;}

                         
                        input.seek(index147_10);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA147_39 = input.LA(1);

                         
                        int index147_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA147_39==IDENT) ) {s = 247;}

                        else if ( (LA147_39==TICKED_STRING_LITERAL) ) {s = 248;}

                        else if ( (LA147_39==MAX) ) {s = 249;}

                        else if ( (LA147_39==MIN) ) {s = 250;}

                        else if ( (LA147_39==AT) && (synpred4_EsperEPL2Grammar())) {s = 251;}

                        else if ( (LA147_39==COUNT) && (synpred4_EsperEPL2Grammar())) {s = 252;}

                        else if ( (LA147_39==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 253;}

                        else if ( (LA147_39==EVERY_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 254;}

                        else if ( (LA147_39==SUM) && (synpred4_EsperEPL2Grammar())) {s = 255;}

                        else if ( (LA147_39==AVG) && (synpred4_EsperEPL2Grammar())) {s = 256;}

                        else if ( (LA147_39==COALESCE) && (synpred4_EsperEPL2Grammar())) {s = 257;}

                        else if ( (LA147_39==MEDIAN) && (synpred4_EsperEPL2Grammar())) {s = 258;}

                        else if ( (LA147_39==STDDEV) && (synpred4_EsperEPL2Grammar())) {s = 259;}

                        else if ( (LA147_39==AVEDEV) && (synpred4_EsperEPL2Grammar())) {s = 260;}

                        else if ( (LA147_39==EVENTS) && (synpred4_EsperEPL2Grammar())) {s = 261;}

                        else if ( (LA147_39==FIRST) && (synpred4_EsperEPL2Grammar())) {s = 262;}

                        else if ( (LA147_39==LAST) && (synpred4_EsperEPL2Grammar())) {s = 263;}

                        else if ( (LA147_39==UNIDIRECTIONAL) && (synpred4_EsperEPL2Grammar())) {s = 264;}

                        else if ( (LA147_39==RETAINUNION) && (synpred4_EsperEPL2Grammar())) {s = 265;}

                        else if ( (LA147_39==RETAININTERSECTION) && (synpred4_EsperEPL2Grammar())) {s = 266;}

                        else if ( (LA147_39==UNTIL) && (synpred4_EsperEPL2Grammar())) {s = 267;}

                        else if ( (LA147_39==PATTERN) && (synpred4_EsperEPL2Grammar())) {s = 268;}

                        else if ( (LA147_39==SQL) && (synpred4_EsperEPL2Grammar())) {s = 269;}

                        else if ( (LA147_39==METADATASQL) && (synpred4_EsperEPL2Grammar())) {s = 270;}

                        else if ( (LA147_39==PREVIOUS) && (synpred4_EsperEPL2Grammar())) {s = 271;}

                        else if ( (LA147_39==PRIOR) && (synpred4_EsperEPL2Grammar())) {s = 272;}

                        else if ( (LA147_39==WEEKDAY) && (synpred4_EsperEPL2Grammar())) {s = 273;}

                        else if ( (LA147_39==LW) && (synpred4_EsperEPL2Grammar())) {s = 274;}

                        else if ( (LA147_39==INSTANCEOF) && (synpred4_EsperEPL2Grammar())) {s = 275;}

                        else if ( (LA147_39==CAST) && (synpred4_EsperEPL2Grammar())) {s = 276;}

                        else if ( (LA147_39==SNAPSHOT) && (synpred4_EsperEPL2Grammar())) {s = 277;}

                        else if ( (LA147_39==VARIABLE) && (synpred4_EsperEPL2Grammar())) {s = 278;}

                        else if ( (LA147_39==WINDOW) && (synpred4_EsperEPL2Grammar())) {s = 279;}

                        else if ( (LA147_39==LEFT) && (synpred4_EsperEPL2Grammar())) {s = 280;}

                        else if ( (LA147_39==RIGHT) && (synpred4_EsperEPL2Grammar())) {s = 281;}

                        else if ( (LA147_39==OUTER) && (synpred4_EsperEPL2Grammar())) {s = 282;}

                        else if ( (LA147_39==FULL) && (synpred4_EsperEPL2Grammar())) {s = 283;}

                        else if ( (LA147_39==JOIN) && (synpred4_EsperEPL2Grammar())) {s = 284;}

                         
                        input.seek(index147_39);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA147_91 = input.LA(1);

                         
                        int index147_91 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA147_91==IDENT) ) {s = 344;}

                        else if ( (LA147_91==TICKED_STRING_LITERAL) ) {s = 345;}

                        else if ( (LA147_91==MAX) ) {s = 346;}

                        else if ( (LA147_91==MIN) ) {s = 347;}

                        else if ( (LA147_91==AT) && (synpred4_EsperEPL2Grammar())) {s = 348;}

                        else if ( (LA147_91==COUNT) && (synpred4_EsperEPL2Grammar())) {s = 349;}

                        else if ( (LA147_91==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 350;}

                        else if ( (LA147_91==EVERY_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 351;}

                        else if ( (LA147_91==SUM) && (synpred4_EsperEPL2Grammar())) {s = 352;}

                        else if ( (LA147_91==AVG) && (synpred4_EsperEPL2Grammar())) {s = 353;}

                        else if ( (LA147_91==COALESCE) && (synpred4_EsperEPL2Grammar())) {s = 354;}

                        else if ( (LA147_91==MEDIAN) && (synpred4_EsperEPL2Grammar())) {s = 355;}

                        else if ( (LA147_91==STDDEV) && (synpred4_EsperEPL2Grammar())) {s = 356;}

                        else if ( (LA147_91==AVEDEV) && (synpred4_EsperEPL2Grammar())) {s = 357;}

                        else if ( (LA147_91==EVENTS) && (synpred4_EsperEPL2Grammar())) {s = 358;}

                        else if ( (LA147_91==FIRST) && (synpred4_EsperEPL2Grammar())) {s = 359;}

                        else if ( (LA147_91==LAST) && (synpred4_EsperEPL2Grammar())) {s = 360;}

                        else if ( (LA147_91==UNIDIRECTIONAL) && (synpred4_EsperEPL2Grammar())) {s = 361;}

                        else if ( (LA147_91==RETAINUNION) && (synpred4_EsperEPL2Grammar())) {s = 362;}

                        else if ( (LA147_91==RETAININTERSECTION) && (synpred4_EsperEPL2Grammar())) {s = 363;}

                        else if ( (LA147_91==UNTIL) && (synpred4_EsperEPL2Grammar())) {s = 364;}

                        else if ( (LA147_91==PATTERN) && (synpred4_EsperEPL2Grammar())) {s = 365;}

                        else if ( (LA147_91==SQL) && (synpred4_EsperEPL2Grammar())) {s = 366;}

                        else if ( (LA147_91==METADATASQL) && (synpred4_EsperEPL2Grammar())) {s = 367;}

                        else if ( (LA147_91==PREVIOUS) && (synpred4_EsperEPL2Grammar())) {s = 368;}

                        else if ( (LA147_91==PRIOR) && (synpred4_EsperEPL2Grammar())) {s = 369;}

                        else if ( (LA147_91==WEEKDAY) && (synpred4_EsperEPL2Grammar())) {s = 370;}

                        else if ( (LA147_91==LW) && (synpred4_EsperEPL2Grammar())) {s = 371;}

                        else if ( (LA147_91==INSTANCEOF) && (synpred4_EsperEPL2Grammar())) {s = 372;}

                        else if ( (LA147_91==CAST) && (synpred4_EsperEPL2Grammar())) {s = 373;}

                        else if ( (LA147_91==SNAPSHOT) && (synpred4_EsperEPL2Grammar())) {s = 374;}

                        else if ( (LA147_91==VARIABLE) && (synpred4_EsperEPL2Grammar())) {s = 375;}

                        else if ( (LA147_91==WINDOW) && (synpred4_EsperEPL2Grammar())) {s = 376;}

                        else if ( (LA147_91==LEFT) && (synpred4_EsperEPL2Grammar())) {s = 377;}

                        else if ( (LA147_91==RIGHT) && (synpred4_EsperEPL2Grammar())) {s = 378;}

                        else if ( (LA147_91==OUTER) && (synpred4_EsperEPL2Grammar())) {s = 379;}

                        else if ( (LA147_91==FULL) && (synpred4_EsperEPL2Grammar())) {s = 380;}

                        else if ( (LA147_91==JOIN) && (synpred4_EsperEPL2Grammar())) {s = 381;}

                         
                        input.seek(index147_91);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA147_247 = input.LA(1);

                         
                        int index147_247 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA147_247==DOT) ) {s = 500;}

                        else if ( (LA147_247==LPAREN) ) {s = 501;}

                        else if ( (LA147_247==ESCAPECHAR) && (synpred4_EsperEPL2Grammar())) {s = 502;}

                        else if ( (LA147_247==LBRACK) && (synpred4_EsperEPL2Grammar())) {s = 503;}

                        else if ( (LA147_247==QUESTION) && (synpred4_EsperEPL2Grammar())) {s = 504;}

                        else if ( (LA147_247==STAR) && (synpred4_EsperEPL2Grammar())) {s = 505;}

                        else if ( (LA147_247==DIV) && (synpred4_EsperEPL2Grammar())) {s = 506;}

                        else if ( (LA147_247==MOD) && (synpred4_EsperEPL2Grammar())) {s = 507;}

                        else if ( (LA147_247==PLUS) && (synpred4_EsperEPL2Grammar())) {s = 508;}

                        else if ( (LA147_247==MINUS) && (synpred4_EsperEPL2Grammar())) {s = 509;}

                        else if ( (LA147_247==LOR) && (synpred4_EsperEPL2Grammar())) {s = 510;}

                        else if ( (LA147_247==LT) && (synpred4_EsperEPL2Grammar())) {s = 511;}

                        else if ( (LA147_247==GT) && (synpred4_EsperEPL2Grammar())) {s = 512;}

                        else if ( (LA147_247==LE) && (synpred4_EsperEPL2Grammar())) {s = 513;}

                        else if ( (LA147_247==GE) && (synpred4_EsperEPL2Grammar())) {s = 514;}

                        else if ( (LA147_247==EQUALS) && (synpred4_EsperEPL2Grammar())) {s = 515;}

                        else if ( (LA147_247==IS) && (synpred4_EsperEPL2Grammar())) {s = 516;}

                        else if ( (LA147_247==SQL_NE) && (synpred4_EsperEPL2Grammar())) {s = 517;}

                        else if ( (LA147_247==NOT_EQUAL) && (synpred4_EsperEPL2Grammar())) {s = 518;}

                        else if ( (LA147_247==BAND) && (synpred4_EsperEPL2Grammar())) {s = 519;}

                        else if ( (LA147_247==BOR) && (synpred4_EsperEPL2Grammar())) {s = 520;}

                        else if ( (LA147_247==BXOR) && (synpred4_EsperEPL2Grammar())) {s = 521;}

                        else if ( (LA147_247==AND_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 522;}

                        else if ( (LA147_247==OR_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 523;}

                        else if ( (LA147_247==GROUP) && (synpred4_EsperEPL2Grammar())) {s = 524;}

                        else if ( (LA147_247==HAVING) && (synpred4_EsperEPL2Grammar())) {s = 525;}

                        else if ( (LA147_247==OUTPUT) && (synpred4_EsperEPL2Grammar())) {s = 526;}

                        else if ( (LA147_247==ORDER) && (synpred4_EsperEPL2Grammar())) {s = 527;}

                        else if ( (LA147_247==ROW_LIMIT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 528;}

                        else if ( (LA147_247==EOF) && (synpred4_EsperEPL2Grammar())) {s = 529;}

                        else if ( (LA147_247==RPAREN) && (synpred4_EsperEPL2Grammar())) {s = 530;}

                        else if ( (LA147_247==COMMA) && (synpred4_EsperEPL2Grammar())) {s = 531;}

                        else if ( (LA147_247==AS) && (synpred4_EsperEPL2Grammar())) {s = 532;}

                        else if ( (LA147_247==FROM) && (synpred4_EsperEPL2Grammar())) {s = 533;}

                        else if ( (LA147_247==ASC) && (synpred4_EsperEPL2Grammar())) {s = 534;}

                        else if ( (LA147_247==DESC) && (synpred4_EsperEPL2Grammar())) {s = 535;}

                        else if ( (LA147_247==THEN) && (synpred4_EsperEPL2Grammar())) {s = 536;}

                        else if ( (LA147_247==ELSE) && (synpred4_EsperEPL2Grammar())) {s = 537;}

                        else if ( (LA147_247==END) && (synpred4_EsperEPL2Grammar())) {s = 538;}

                        else if ( (LA147_247==WHEN) && (synpred4_EsperEPL2Grammar())) {s = 539;}

                        else if ( (LA147_247==COLON) && (synpred4_EsperEPL2Grammar())) {s = 540;}

                        else if ( (LA147_247==RBRACK) && (synpred4_EsperEPL2Grammar())) {s = 541;}

                        else if ( (LA147_247==RCURLY) && (synpred4_EsperEPL2Grammar())) {s = 542;}

                        else if ( (LA147_247==TIMEPERIOD_SECONDS) && (synpred4_EsperEPL2Grammar())) {s = 543;}

                        else if ( (LA147_247==TIMEPERIOD_SECOND) && (synpred4_EsperEPL2Grammar())) {s = 544;}

                        else if ( (LA147_247==TIMEPERIOD_SEC) && (synpred4_EsperEPL2Grammar())) {s = 545;}

                        else if ( (LA147_247==NOT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 546;}

                        else if ( (LA147_247==IN_SET) && (synpred4_EsperEPL2Grammar())) {s = 547;}

                        else if ( (LA147_247==BETWEEN) && (synpred4_EsperEPL2Grammar())) {s = 548;}

                        else if ( (LA147_247==LIKE) && (synpred4_EsperEPL2Grammar())) {s = 549;}

                        else if ( (LA147_247==REGEXP) && (synpred4_EsperEPL2Grammar())) {s = 550;}

                        else if ( (LA147_247==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 551;}

                         
                        input.seek(index147_247);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA147_248 = input.LA(1);

                         
                        int index147_248 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA147_248==ESCAPECHAR) && (synpred4_EsperEPL2Grammar())) {s = 552;}

                        else if ( (LA147_248==LBRACK) && (synpred4_EsperEPL2Grammar())) {s = 553;}

                        else if ( (LA147_248==LPAREN) && (synpred4_EsperEPL2Grammar())) {s = 554;}

                        else if ( (LA147_248==QUESTION) && (synpred4_EsperEPL2Grammar())) {s = 555;}

                        else if ( (LA147_248==STAR) && (synpred4_EsperEPL2Grammar())) {s = 556;}

                        else if ( (LA147_248==DIV) && (synpred4_EsperEPL2Grammar())) {s = 557;}

                        else if ( (LA147_248==MOD) && (synpred4_EsperEPL2Grammar())) {s = 558;}

                        else if ( (LA147_248==PLUS) && (synpred4_EsperEPL2Grammar())) {s = 559;}

                        else if ( (LA147_248==MINUS) && (synpred4_EsperEPL2Grammar())) {s = 560;}

                        else if ( (LA147_248==LOR) && (synpred4_EsperEPL2Grammar())) {s = 561;}

                        else if ( (LA147_248==LT) && (synpred4_EsperEPL2Grammar())) {s = 562;}

                        else if ( (LA147_248==GT) && (synpred4_EsperEPL2Grammar())) {s = 563;}

                        else if ( (LA147_248==LE) && (synpred4_EsperEPL2Grammar())) {s = 564;}

                        else if ( (LA147_248==GE) && (synpred4_EsperEPL2Grammar())) {s = 565;}

                        else if ( (LA147_248==EQUALS) && (synpred4_EsperEPL2Grammar())) {s = 566;}

                        else if ( (LA147_248==IS) && (synpred4_EsperEPL2Grammar())) {s = 567;}

                        else if ( (LA147_248==SQL_NE) && (synpred4_EsperEPL2Grammar())) {s = 568;}

                        else if ( (LA147_248==NOT_EQUAL) && (synpred4_EsperEPL2Grammar())) {s = 569;}

                        else if ( (LA147_248==BAND) && (synpred4_EsperEPL2Grammar())) {s = 570;}

                        else if ( (LA147_248==BOR) && (synpred4_EsperEPL2Grammar())) {s = 571;}

                        else if ( (LA147_248==BXOR) && (synpred4_EsperEPL2Grammar())) {s = 572;}

                        else if ( (LA147_248==AND_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 573;}

                        else if ( (LA147_248==OR_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 574;}

                        else if ( (LA147_248==GROUP) && (synpred4_EsperEPL2Grammar())) {s = 575;}

                        else if ( (LA147_248==HAVING) && (synpred4_EsperEPL2Grammar())) {s = 576;}

                        else if ( (LA147_248==OUTPUT) && (synpred4_EsperEPL2Grammar())) {s = 577;}

                        else if ( (LA147_248==ORDER) && (synpred4_EsperEPL2Grammar())) {s = 578;}

                        else if ( (LA147_248==ROW_LIMIT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 579;}

                        else if ( (LA147_248==EOF) && (synpred4_EsperEPL2Grammar())) {s = 580;}

                        else if ( (LA147_248==RPAREN) && (synpred4_EsperEPL2Grammar())) {s = 581;}

                        else if ( (LA147_248==COMMA) && (synpred4_EsperEPL2Grammar())) {s = 582;}

                        else if ( (LA147_248==AS) && (synpred4_EsperEPL2Grammar())) {s = 583;}

                        else if ( (LA147_248==FROM) && (synpred4_EsperEPL2Grammar())) {s = 584;}

                        else if ( (LA147_248==ASC) && (synpred4_EsperEPL2Grammar())) {s = 585;}

                        else if ( (LA147_248==DESC) && (synpred4_EsperEPL2Grammar())) {s = 586;}

                        else if ( (LA147_248==THEN) && (synpred4_EsperEPL2Grammar())) {s = 587;}

                        else if ( (LA147_248==ELSE) && (synpred4_EsperEPL2Grammar())) {s = 588;}

                        else if ( (LA147_248==END) && (synpred4_EsperEPL2Grammar())) {s = 589;}

                        else if ( (LA147_248==WHEN) && (synpred4_EsperEPL2Grammar())) {s = 590;}

                        else if ( (LA147_248==COLON) && (synpred4_EsperEPL2Grammar())) {s = 591;}

                        else if ( (LA147_248==RBRACK) && (synpred4_EsperEPL2Grammar())) {s = 592;}

                        else if ( (LA147_248==RCURLY) && (synpred4_EsperEPL2Grammar())) {s = 593;}

                        else if ( (LA147_248==TIMEPERIOD_SECONDS) && (synpred4_EsperEPL2Grammar())) {s = 594;}

                        else if ( (LA147_248==TIMEPERIOD_SECOND) && (synpred4_EsperEPL2Grammar())) {s = 595;}

                        else if ( (LA147_248==TIMEPERIOD_SEC) && (synpred4_EsperEPL2Grammar())) {s = 596;}

                        else if ( (LA147_248==NOT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 597;}

                        else if ( (LA147_248==IN_SET) && (synpred4_EsperEPL2Grammar())) {s = 598;}

                        else if ( (LA147_248==BETWEEN) && (synpred4_EsperEPL2Grammar())) {s = 599;}

                        else if ( (LA147_248==LIKE) && (synpred4_EsperEPL2Grammar())) {s = 600;}

                        else if ( (LA147_248==REGEXP) && (synpred4_EsperEPL2Grammar())) {s = 601;}

                        else if ( (LA147_248==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 602;}

                        else if ( (LA147_248==DOT) ) {s = 603;}

                         
                        input.seek(index147_248);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA147_249 = input.LA(1);

                         
                        int index147_249 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA147_249==ESCAPECHAR) && (synpred4_EsperEPL2Grammar())) {s = 604;}

                        else if ( (LA147_249==LBRACK) && (synpred4_EsperEPL2Grammar())) {s = 605;}

                        else if ( (LA147_249==LPAREN) ) {s = 606;}

                        else if ( (LA147_249==QUESTION) && (synpred4_EsperEPL2Grammar())) {s = 607;}

                        else if ( (LA147_249==STAR) && (synpred4_EsperEPL2Grammar())) {s = 608;}

                        else if ( (LA147_249==DIV) && (synpred4_EsperEPL2Grammar())) {s = 609;}

                        else if ( (LA147_249==MOD) && (synpred4_EsperEPL2Grammar())) {s = 610;}

                        else if ( (LA147_249==PLUS) && (synpred4_EsperEPL2Grammar())) {s = 611;}

                        else if ( (LA147_249==MINUS) && (synpred4_EsperEPL2Grammar())) {s = 612;}

                        else if ( (LA147_249==LOR) && (synpred4_EsperEPL2Grammar())) {s = 613;}

                        else if ( (LA147_249==LT) && (synpred4_EsperEPL2Grammar())) {s = 614;}

                        else if ( (LA147_249==GT) && (synpred4_EsperEPL2Grammar())) {s = 615;}

                        else if ( (LA147_249==LE) && (synpred4_EsperEPL2Grammar())) {s = 616;}

                        else if ( (LA147_249==GE) && (synpred4_EsperEPL2Grammar())) {s = 617;}

                        else if ( (LA147_249==EQUALS) && (synpred4_EsperEPL2Grammar())) {s = 618;}

                        else if ( (LA147_249==IS) && (synpred4_EsperEPL2Grammar())) {s = 619;}

                        else if ( (LA147_249==SQL_NE) && (synpred4_EsperEPL2Grammar())) {s = 620;}

                        else if ( (LA147_249==NOT_EQUAL) && (synpred4_EsperEPL2Grammar())) {s = 621;}

                        else if ( (LA147_249==BAND) && (synpred4_EsperEPL2Grammar())) {s = 622;}

                        else if ( (LA147_249==BOR) && (synpred4_EsperEPL2Grammar())) {s = 623;}

                        else if ( (LA147_249==BXOR) && (synpred4_EsperEPL2Grammar())) {s = 624;}

                        else if ( (LA147_249==AND_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 625;}

                        else if ( (LA147_249==OR_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 626;}

                        else if ( (LA147_249==GROUP) && (synpred4_EsperEPL2Grammar())) {s = 627;}

                        else if ( (LA147_249==HAVING) && (synpred4_EsperEPL2Grammar())) {s = 628;}

                        else if ( (LA147_249==OUTPUT) && (synpred4_EsperEPL2Grammar())) {s = 629;}

                        else if ( (LA147_249==ORDER) && (synpred4_EsperEPL2Grammar())) {s = 630;}

                        else if ( (LA147_249==ROW_LIMIT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 631;}

                        else if ( (LA147_249==EOF) && (synpred4_EsperEPL2Grammar())) {s = 632;}

                        else if ( (LA147_249==RPAREN) && (synpred4_EsperEPL2Grammar())) {s = 633;}

                        else if ( (LA147_249==COMMA) && (synpred4_EsperEPL2Grammar())) {s = 634;}

                        else if ( (LA147_249==AS) && (synpred4_EsperEPL2Grammar())) {s = 635;}

                        else if ( (LA147_249==FROM) && (synpred4_EsperEPL2Grammar())) {s = 636;}

                        else if ( (LA147_249==ASC) && (synpred4_EsperEPL2Grammar())) {s = 637;}

                        else if ( (LA147_249==DESC) && (synpred4_EsperEPL2Grammar())) {s = 638;}

                        else if ( (LA147_249==THEN) && (synpred4_EsperEPL2Grammar())) {s = 639;}

                        else if ( (LA147_249==ELSE) && (synpred4_EsperEPL2Grammar())) {s = 640;}

                        else if ( (LA147_249==END) && (synpred4_EsperEPL2Grammar())) {s = 641;}

                        else if ( (LA147_249==WHEN) && (synpred4_EsperEPL2Grammar())) {s = 642;}

                        else if ( (LA147_249==COLON) && (synpred4_EsperEPL2Grammar())) {s = 643;}

                        else if ( (LA147_249==RBRACK) && (synpred4_EsperEPL2Grammar())) {s = 644;}

                        else if ( (LA147_249==RCURLY) && (synpred4_EsperEPL2Grammar())) {s = 645;}

                        else if ( (LA147_249==TIMEPERIOD_SECONDS) && (synpred4_EsperEPL2Grammar())) {s = 646;}

                        else if ( (LA147_249==TIMEPERIOD_SECOND) && (synpred4_EsperEPL2Grammar())) {s = 647;}

                        else if ( (LA147_249==TIMEPERIOD_SEC) && (synpred4_EsperEPL2Grammar())) {s = 648;}

                        else if ( (LA147_249==NOT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 649;}

                        else if ( (LA147_249==IN_SET) && (synpred4_EsperEPL2Grammar())) {s = 650;}

                        else if ( (LA147_249==BETWEEN) && (synpred4_EsperEPL2Grammar())) {s = 651;}

                        else if ( (LA147_249==LIKE) && (synpred4_EsperEPL2Grammar())) {s = 652;}

                        else if ( (LA147_249==REGEXP) && (synpred4_EsperEPL2Grammar())) {s = 653;}

                        else if ( (LA147_249==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 654;}

                        else if ( (LA147_249==DOT) && (synpred4_EsperEPL2Grammar())) {s = 655;}

                         
                        input.seek(index147_249);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA147_250 = input.LA(1);

                         
                        int index147_250 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA147_250==LPAREN) ) {s = 656;}

                        else if ( (LA147_250==ESCAPECHAR) && (synpred4_EsperEPL2Grammar())) {s = 657;}

                        else if ( (LA147_250==LBRACK) && (synpred4_EsperEPL2Grammar())) {s = 658;}

                        else if ( (LA147_250==QUESTION) && (synpred4_EsperEPL2Grammar())) {s = 659;}

                        else if ( (LA147_250==STAR) && (synpred4_EsperEPL2Grammar())) {s = 660;}

                        else if ( (LA147_250==DIV) && (synpred4_EsperEPL2Grammar())) {s = 661;}

                        else if ( (LA147_250==MOD) && (synpred4_EsperEPL2Grammar())) {s = 662;}

                        else if ( (LA147_250==PLUS) && (synpred4_EsperEPL2Grammar())) {s = 663;}

                        else if ( (LA147_250==MINUS) && (synpred4_EsperEPL2Grammar())) {s = 664;}

                        else if ( (LA147_250==LOR) && (synpred4_EsperEPL2Grammar())) {s = 665;}

                        else if ( (LA147_250==LT) && (synpred4_EsperEPL2Grammar())) {s = 666;}

                        else if ( (LA147_250==GT) && (synpred4_EsperEPL2Grammar())) {s = 667;}

                        else if ( (LA147_250==LE) && (synpred4_EsperEPL2Grammar())) {s = 668;}

                        else if ( (LA147_250==GE) && (synpred4_EsperEPL2Grammar())) {s = 669;}

                        else if ( (LA147_250==EQUALS) && (synpred4_EsperEPL2Grammar())) {s = 670;}

                        else if ( (LA147_250==IS) && (synpred4_EsperEPL2Grammar())) {s = 671;}

                        else if ( (LA147_250==SQL_NE) && (synpred4_EsperEPL2Grammar())) {s = 672;}

                        else if ( (LA147_250==NOT_EQUAL) && (synpred4_EsperEPL2Grammar())) {s = 673;}

                        else if ( (LA147_250==BAND) && (synpred4_EsperEPL2Grammar())) {s = 674;}

                        else if ( (LA147_250==BOR) && (synpred4_EsperEPL2Grammar())) {s = 675;}

                        else if ( (LA147_250==BXOR) && (synpred4_EsperEPL2Grammar())) {s = 676;}

                        else if ( (LA147_250==AND_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 677;}

                        else if ( (LA147_250==OR_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 678;}

                        else if ( (LA147_250==GROUP) && (synpred4_EsperEPL2Grammar())) {s = 679;}

                        else if ( (LA147_250==HAVING) && (synpred4_EsperEPL2Grammar())) {s = 680;}

                        else if ( (LA147_250==OUTPUT) && (synpred4_EsperEPL2Grammar())) {s = 681;}

                        else if ( (LA147_250==ORDER) && (synpred4_EsperEPL2Grammar())) {s = 682;}

                        else if ( (LA147_250==ROW_LIMIT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 683;}

                        else if ( (LA147_250==EOF) && (synpred4_EsperEPL2Grammar())) {s = 684;}

                        else if ( (LA147_250==RPAREN) && (synpred4_EsperEPL2Grammar())) {s = 685;}

                        else if ( (LA147_250==COMMA) && (synpred4_EsperEPL2Grammar())) {s = 686;}

                        else if ( (LA147_250==AS) && (synpred4_EsperEPL2Grammar())) {s = 687;}

                        else if ( (LA147_250==FROM) && (synpred4_EsperEPL2Grammar())) {s = 688;}

                        else if ( (LA147_250==ASC) && (synpred4_EsperEPL2Grammar())) {s = 689;}

                        else if ( (LA147_250==DESC) && (synpred4_EsperEPL2Grammar())) {s = 690;}

                        else if ( (LA147_250==THEN) && (synpred4_EsperEPL2Grammar())) {s = 691;}

                        else if ( (LA147_250==ELSE) && (synpred4_EsperEPL2Grammar())) {s = 692;}

                        else if ( (LA147_250==END) && (synpred4_EsperEPL2Grammar())) {s = 693;}

                        else if ( (LA147_250==WHEN) && (synpred4_EsperEPL2Grammar())) {s = 694;}

                        else if ( (LA147_250==COLON) && (synpred4_EsperEPL2Grammar())) {s = 695;}

                        else if ( (LA147_250==RBRACK) && (synpred4_EsperEPL2Grammar())) {s = 696;}

                        else if ( (LA147_250==RCURLY) && (synpred4_EsperEPL2Grammar())) {s = 697;}

                        else if ( (LA147_250==TIMEPERIOD_SECONDS) && (synpred4_EsperEPL2Grammar())) {s = 698;}

                        else if ( (LA147_250==TIMEPERIOD_SECOND) && (synpred4_EsperEPL2Grammar())) {s = 699;}

                        else if ( (LA147_250==TIMEPERIOD_SEC) && (synpred4_EsperEPL2Grammar())) {s = 700;}

                        else if ( (LA147_250==NOT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 701;}

                        else if ( (LA147_250==IN_SET) && (synpred4_EsperEPL2Grammar())) {s = 702;}

                        else if ( (LA147_250==BETWEEN) && (synpred4_EsperEPL2Grammar())) {s = 703;}

                        else if ( (LA147_250==LIKE) && (synpred4_EsperEPL2Grammar())) {s = 704;}

                        else if ( (LA147_250==REGEXP) && (synpred4_EsperEPL2Grammar())) {s = 705;}

                        else if ( (LA147_250==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 706;}

                        else if ( (LA147_250==DOT) && (synpred4_EsperEPL2Grammar())) {s = 707;}

                         
                        input.seek(index147_250);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA147_344 = input.LA(1);

                         
                        int index147_344 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA147_344==DOT) ) {s = 760;}

                        else if ( (LA147_344==LPAREN) ) {s = 761;}

                        else if ( (LA147_344==ESCAPECHAR) && (synpred4_EsperEPL2Grammar())) {s = 762;}

                        else if ( (LA147_344==LBRACK) && (synpred4_EsperEPL2Grammar())) {s = 763;}

                        else if ( (LA147_344==QUESTION) && (synpred4_EsperEPL2Grammar())) {s = 764;}

                        else if ( (LA147_344==STAR) && (synpred4_EsperEPL2Grammar())) {s = 765;}

                        else if ( (LA147_344==DIV) && (synpred4_EsperEPL2Grammar())) {s = 766;}

                        else if ( (LA147_344==MOD) && (synpred4_EsperEPL2Grammar())) {s = 767;}

                        else if ( (LA147_344==PLUS) && (synpred4_EsperEPL2Grammar())) {s = 768;}

                        else if ( (LA147_344==MINUS) && (synpred4_EsperEPL2Grammar())) {s = 769;}

                        else if ( (LA147_344==LOR) && (synpred4_EsperEPL2Grammar())) {s = 770;}

                        else if ( (LA147_344==LT) && (synpred4_EsperEPL2Grammar())) {s = 771;}

                        else if ( (LA147_344==GT) && (synpred4_EsperEPL2Grammar())) {s = 772;}

                        else if ( (LA147_344==LE) && (synpred4_EsperEPL2Grammar())) {s = 773;}

                        else if ( (LA147_344==GE) && (synpred4_EsperEPL2Grammar())) {s = 774;}

                        else if ( (LA147_344==EQUALS) && (synpred4_EsperEPL2Grammar())) {s = 775;}

                        else if ( (LA147_344==IS) && (synpred4_EsperEPL2Grammar())) {s = 776;}

                        else if ( (LA147_344==SQL_NE) && (synpred4_EsperEPL2Grammar())) {s = 777;}

                        else if ( (LA147_344==NOT_EQUAL) && (synpred4_EsperEPL2Grammar())) {s = 778;}

                        else if ( (LA147_344==BAND) && (synpred4_EsperEPL2Grammar())) {s = 779;}

                        else if ( (LA147_344==BOR) && (synpred4_EsperEPL2Grammar())) {s = 780;}

                        else if ( (LA147_344==BXOR) && (synpred4_EsperEPL2Grammar())) {s = 781;}

                        else if ( (LA147_344==AND_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 782;}

                        else if ( (LA147_344==OR_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 783;}

                        else if ( (LA147_344==GROUP) && (synpred4_EsperEPL2Grammar())) {s = 784;}

                        else if ( (LA147_344==HAVING) && (synpred4_EsperEPL2Grammar())) {s = 785;}

                        else if ( (LA147_344==OUTPUT) && (synpred4_EsperEPL2Grammar())) {s = 786;}

                        else if ( (LA147_344==ORDER) && (synpred4_EsperEPL2Grammar())) {s = 787;}

                        else if ( (LA147_344==ROW_LIMIT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 788;}

                        else if ( (LA147_344==EOF) && (synpred4_EsperEPL2Grammar())) {s = 789;}

                        else if ( (LA147_344==RPAREN) && (synpred4_EsperEPL2Grammar())) {s = 790;}

                        else if ( (LA147_344==COMMA) && (synpred4_EsperEPL2Grammar())) {s = 791;}

                        else if ( (LA147_344==AS) && (synpred4_EsperEPL2Grammar())) {s = 792;}

                        else if ( (LA147_344==FROM) && (synpred4_EsperEPL2Grammar())) {s = 793;}

                        else if ( (LA147_344==ASC) && (synpred4_EsperEPL2Grammar())) {s = 794;}

                        else if ( (LA147_344==DESC) && (synpred4_EsperEPL2Grammar())) {s = 795;}

                        else if ( (LA147_344==THEN) && (synpred4_EsperEPL2Grammar())) {s = 796;}

                        else if ( (LA147_344==ELSE) && (synpred4_EsperEPL2Grammar())) {s = 797;}

                        else if ( (LA147_344==END) && (synpred4_EsperEPL2Grammar())) {s = 798;}

                        else if ( (LA147_344==WHEN) && (synpred4_EsperEPL2Grammar())) {s = 799;}

                        else if ( (LA147_344==COLON) && (synpred4_EsperEPL2Grammar())) {s = 800;}

                        else if ( (LA147_344==RBRACK) && (synpred4_EsperEPL2Grammar())) {s = 801;}

                        else if ( (LA147_344==RCURLY) && (synpred4_EsperEPL2Grammar())) {s = 802;}

                        else if ( (LA147_344==TIMEPERIOD_SECONDS) && (synpred4_EsperEPL2Grammar())) {s = 803;}

                        else if ( (LA147_344==TIMEPERIOD_SECOND) && (synpred4_EsperEPL2Grammar())) {s = 804;}

                        else if ( (LA147_344==TIMEPERIOD_SEC) && (synpred4_EsperEPL2Grammar())) {s = 805;}

                        else if ( (LA147_344==NOT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 806;}

                        else if ( (LA147_344==IN_SET) && (synpred4_EsperEPL2Grammar())) {s = 807;}

                        else if ( (LA147_344==BETWEEN) && (synpred4_EsperEPL2Grammar())) {s = 808;}

                        else if ( (LA147_344==LIKE) && (synpred4_EsperEPL2Grammar())) {s = 809;}

                        else if ( (LA147_344==REGEXP) && (synpred4_EsperEPL2Grammar())) {s = 810;}

                        else if ( (LA147_344==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 811;}

                         
                        input.seek(index147_344);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA147_345 = input.LA(1);

                         
                        int index147_345 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA147_345==ESCAPECHAR) && (synpred4_EsperEPL2Grammar())) {s = 812;}

                        else if ( (LA147_345==LBRACK) && (synpred4_EsperEPL2Grammar())) {s = 813;}

                        else if ( (LA147_345==LPAREN) && (synpred4_EsperEPL2Grammar())) {s = 814;}

                        else if ( (LA147_345==QUESTION) && (synpred4_EsperEPL2Grammar())) {s = 815;}

                        else if ( (LA147_345==STAR) && (synpred4_EsperEPL2Grammar())) {s = 816;}

                        else if ( (LA147_345==DIV) && (synpred4_EsperEPL2Grammar())) {s = 817;}

                        else if ( (LA147_345==MOD) && (synpred4_EsperEPL2Grammar())) {s = 818;}

                        else if ( (LA147_345==PLUS) && (synpred4_EsperEPL2Grammar())) {s = 819;}

                        else if ( (LA147_345==MINUS) && (synpred4_EsperEPL2Grammar())) {s = 820;}

                        else if ( (LA147_345==LOR) && (synpred4_EsperEPL2Grammar())) {s = 821;}

                        else if ( (LA147_345==LT) && (synpred4_EsperEPL2Grammar())) {s = 822;}

                        else if ( (LA147_345==GT) && (synpred4_EsperEPL2Grammar())) {s = 823;}

                        else if ( (LA147_345==LE) && (synpred4_EsperEPL2Grammar())) {s = 824;}

                        else if ( (LA147_345==GE) && (synpred4_EsperEPL2Grammar())) {s = 825;}

                        else if ( (LA147_345==EQUALS) && (synpred4_EsperEPL2Grammar())) {s = 826;}

                        else if ( (LA147_345==IS) && (synpred4_EsperEPL2Grammar())) {s = 827;}

                        else if ( (LA147_345==SQL_NE) && (synpred4_EsperEPL2Grammar())) {s = 828;}

                        else if ( (LA147_345==NOT_EQUAL) && (synpred4_EsperEPL2Grammar())) {s = 829;}

                        else if ( (LA147_345==BAND) && (synpred4_EsperEPL2Grammar())) {s = 830;}

                        else if ( (LA147_345==BOR) && (synpred4_EsperEPL2Grammar())) {s = 831;}

                        else if ( (LA147_345==BXOR) && (synpred4_EsperEPL2Grammar())) {s = 832;}

                        else if ( (LA147_345==AND_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 833;}

                        else if ( (LA147_345==OR_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 834;}

                        else if ( (LA147_345==GROUP) && (synpred4_EsperEPL2Grammar())) {s = 835;}

                        else if ( (LA147_345==HAVING) && (synpred4_EsperEPL2Grammar())) {s = 836;}

                        else if ( (LA147_345==OUTPUT) && (synpred4_EsperEPL2Grammar())) {s = 837;}

                        else if ( (LA147_345==ORDER) && (synpred4_EsperEPL2Grammar())) {s = 838;}

                        else if ( (LA147_345==ROW_LIMIT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 839;}

                        else if ( (LA147_345==EOF) && (synpred4_EsperEPL2Grammar())) {s = 840;}

                        else if ( (LA147_345==RPAREN) && (synpred4_EsperEPL2Grammar())) {s = 841;}

                        else if ( (LA147_345==COMMA) && (synpred4_EsperEPL2Grammar())) {s = 842;}

                        else if ( (LA147_345==AS) && (synpred4_EsperEPL2Grammar())) {s = 843;}

                        else if ( (LA147_345==FROM) && (synpred4_EsperEPL2Grammar())) {s = 844;}

                        else if ( (LA147_345==ASC) && (synpred4_EsperEPL2Grammar())) {s = 845;}

                        else if ( (LA147_345==DESC) && (synpred4_EsperEPL2Grammar())) {s = 846;}

                        else if ( (LA147_345==THEN) && (synpred4_EsperEPL2Grammar())) {s = 847;}

                        else if ( (LA147_345==ELSE) && (synpred4_EsperEPL2Grammar())) {s = 848;}

                        else if ( (LA147_345==END) && (synpred4_EsperEPL2Grammar())) {s = 849;}

                        else if ( (LA147_345==WHEN) && (synpred4_EsperEPL2Grammar())) {s = 850;}

                        else if ( (LA147_345==COLON) && (synpred4_EsperEPL2Grammar())) {s = 851;}

                        else if ( (LA147_345==RBRACK) && (synpred4_EsperEPL2Grammar())) {s = 852;}

                        else if ( (LA147_345==RCURLY) && (synpred4_EsperEPL2Grammar())) {s = 853;}

                        else if ( (LA147_345==TIMEPERIOD_SECONDS) && (synpred4_EsperEPL2Grammar())) {s = 854;}

                        else if ( (LA147_345==TIMEPERIOD_SECOND) && (synpred4_EsperEPL2Grammar())) {s = 855;}

                        else if ( (LA147_345==TIMEPERIOD_SEC) && (synpred4_EsperEPL2Grammar())) {s = 856;}

                        else if ( (LA147_345==NOT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 857;}

                        else if ( (LA147_345==IN_SET) && (synpred4_EsperEPL2Grammar())) {s = 858;}

                        else if ( (LA147_345==BETWEEN) && (synpred4_EsperEPL2Grammar())) {s = 859;}

                        else if ( (LA147_345==LIKE) && (synpred4_EsperEPL2Grammar())) {s = 860;}

                        else if ( (LA147_345==REGEXP) && (synpred4_EsperEPL2Grammar())) {s = 861;}

                        else if ( (LA147_345==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 862;}

                        else if ( (LA147_345==DOT) ) {s = 863;}

                         
                        input.seek(index147_345);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA147_346 = input.LA(1);

                         
                        int index147_346 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA147_346==ESCAPECHAR) && (synpred4_EsperEPL2Grammar())) {s = 864;}

                        else if ( (LA147_346==LBRACK) && (synpred4_EsperEPL2Grammar())) {s = 865;}

                        else if ( (LA147_346==LPAREN) ) {s = 866;}

                        else if ( (LA147_346==QUESTION) && (synpred4_EsperEPL2Grammar())) {s = 867;}

                        else if ( (LA147_346==STAR) && (synpred4_EsperEPL2Grammar())) {s = 868;}

                        else if ( (LA147_346==DIV) && (synpred4_EsperEPL2Grammar())) {s = 869;}

                        else if ( (LA147_346==MOD) && (synpred4_EsperEPL2Grammar())) {s = 870;}

                        else if ( (LA147_346==PLUS) && (synpred4_EsperEPL2Grammar())) {s = 871;}

                        else if ( (LA147_346==MINUS) && (synpred4_EsperEPL2Grammar())) {s = 872;}

                        else if ( (LA147_346==LOR) && (synpred4_EsperEPL2Grammar())) {s = 873;}

                        else if ( (LA147_346==LT) && (synpred4_EsperEPL2Grammar())) {s = 874;}

                        else if ( (LA147_346==GT) && (synpred4_EsperEPL2Grammar())) {s = 875;}

                        else if ( (LA147_346==LE) && (synpred4_EsperEPL2Grammar())) {s = 876;}

                        else if ( (LA147_346==GE) && (synpred4_EsperEPL2Grammar())) {s = 877;}

                        else if ( (LA147_346==EQUALS) && (synpred4_EsperEPL2Grammar())) {s = 878;}

                        else if ( (LA147_346==IS) && (synpred4_EsperEPL2Grammar())) {s = 879;}

                        else if ( (LA147_346==SQL_NE) && (synpred4_EsperEPL2Grammar())) {s = 880;}

                        else if ( (LA147_346==NOT_EQUAL) && (synpred4_EsperEPL2Grammar())) {s = 881;}

                        else if ( (LA147_346==BAND) && (synpred4_EsperEPL2Grammar())) {s = 882;}

                        else if ( (LA147_346==BOR) && (synpred4_EsperEPL2Grammar())) {s = 883;}

                        else if ( (LA147_346==BXOR) && (synpred4_EsperEPL2Grammar())) {s = 884;}

                        else if ( (LA147_346==AND_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 885;}

                        else if ( (LA147_346==OR_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 886;}

                        else if ( (LA147_346==GROUP) && (synpred4_EsperEPL2Grammar())) {s = 887;}

                        else if ( (LA147_346==HAVING) && (synpred4_EsperEPL2Grammar())) {s = 888;}

                        else if ( (LA147_346==OUTPUT) && (synpred4_EsperEPL2Grammar())) {s = 889;}

                        else if ( (LA147_346==ORDER) && (synpred4_EsperEPL2Grammar())) {s = 890;}

                        else if ( (LA147_346==ROW_LIMIT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 891;}

                        else if ( (LA147_346==EOF) && (synpred4_EsperEPL2Grammar())) {s = 892;}

                        else if ( (LA147_346==RPAREN) && (synpred4_EsperEPL2Grammar())) {s = 893;}

                        else if ( (LA147_346==COMMA) && (synpred4_EsperEPL2Grammar())) {s = 894;}

                        else if ( (LA147_346==AS) && (synpred4_EsperEPL2Grammar())) {s = 895;}

                        else if ( (LA147_346==FROM) && (synpred4_EsperEPL2Grammar())) {s = 896;}

                        else if ( (LA147_346==ASC) && (synpred4_EsperEPL2Grammar())) {s = 897;}

                        else if ( (LA147_346==DESC) && (synpred4_EsperEPL2Grammar())) {s = 898;}

                        else if ( (LA147_346==THEN) && (synpred4_EsperEPL2Grammar())) {s = 899;}

                        else if ( (LA147_346==ELSE) && (synpred4_EsperEPL2Grammar())) {s = 900;}

                        else if ( (LA147_346==END) && (synpred4_EsperEPL2Grammar())) {s = 901;}

                        else if ( (LA147_346==WHEN) && (synpred4_EsperEPL2Grammar())) {s = 902;}

                        else if ( (LA147_346==COLON) && (synpred4_EsperEPL2Grammar())) {s = 903;}

                        else if ( (LA147_346==RBRACK) && (synpred4_EsperEPL2Grammar())) {s = 904;}

                        else if ( (LA147_346==RCURLY) && (synpred4_EsperEPL2Grammar())) {s = 905;}

                        else if ( (LA147_346==TIMEPERIOD_SECONDS) && (synpred4_EsperEPL2Grammar())) {s = 906;}

                        else if ( (LA147_346==TIMEPERIOD_SECOND) && (synpred4_EsperEPL2Grammar())) {s = 907;}

                        else if ( (LA147_346==TIMEPERIOD_SEC) && (synpred4_EsperEPL2Grammar())) {s = 908;}

                        else if ( (LA147_346==NOT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 909;}

                        else if ( (LA147_346==IN_SET) && (synpred4_EsperEPL2Grammar())) {s = 910;}

                        else if ( (LA147_346==BETWEEN) && (synpred4_EsperEPL2Grammar())) {s = 911;}

                        else if ( (LA147_346==LIKE) && (synpred4_EsperEPL2Grammar())) {s = 912;}

                        else if ( (LA147_346==REGEXP) && (synpred4_EsperEPL2Grammar())) {s = 913;}

                        else if ( (LA147_346==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 914;}

                        else if ( (LA147_346==DOT) && (synpred4_EsperEPL2Grammar())) {s = 915;}

                         
                        input.seek(index147_346);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA147_347 = input.LA(1);

                         
                        int index147_347 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA147_347==LPAREN) ) {s = 916;}

                        else if ( (LA147_347==ESCAPECHAR) && (synpred4_EsperEPL2Grammar())) {s = 917;}

                        else if ( (LA147_347==LBRACK) && (synpred4_EsperEPL2Grammar())) {s = 918;}

                        else if ( (LA147_347==QUESTION) && (synpred4_EsperEPL2Grammar())) {s = 919;}

                        else if ( (LA147_347==STAR) && (synpred4_EsperEPL2Grammar())) {s = 920;}

                        else if ( (LA147_347==DIV) && (synpred4_EsperEPL2Grammar())) {s = 921;}

                        else if ( (LA147_347==MOD) && (synpred4_EsperEPL2Grammar())) {s = 922;}

                        else if ( (LA147_347==PLUS) && (synpred4_EsperEPL2Grammar())) {s = 923;}

                        else if ( (LA147_347==MINUS) && (synpred4_EsperEPL2Grammar())) {s = 924;}

                        else if ( (LA147_347==LOR) && (synpred4_EsperEPL2Grammar())) {s = 925;}

                        else if ( (LA147_347==LT) && (synpred4_EsperEPL2Grammar())) {s = 926;}

                        else if ( (LA147_347==GT) && (synpred4_EsperEPL2Grammar())) {s = 927;}

                        else if ( (LA147_347==LE) && (synpred4_EsperEPL2Grammar())) {s = 928;}

                        else if ( (LA147_347==GE) && (synpred4_EsperEPL2Grammar())) {s = 929;}

                        else if ( (LA147_347==EQUALS) && (synpred4_EsperEPL2Grammar())) {s = 930;}

                        else if ( (LA147_347==IS) && (synpred4_EsperEPL2Grammar())) {s = 931;}

                        else if ( (LA147_347==SQL_NE) && (synpred4_EsperEPL2Grammar())) {s = 932;}

                        else if ( (LA147_347==NOT_EQUAL) && (synpred4_EsperEPL2Grammar())) {s = 933;}

                        else if ( (LA147_347==BAND) && (synpred4_EsperEPL2Grammar())) {s = 934;}

                        else if ( (LA147_347==BOR) && (synpred4_EsperEPL2Grammar())) {s = 935;}

                        else if ( (LA147_347==BXOR) && (synpred4_EsperEPL2Grammar())) {s = 936;}

                        else if ( (LA147_347==AND_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 937;}

                        else if ( (LA147_347==OR_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 938;}

                        else if ( (LA147_347==GROUP) && (synpred4_EsperEPL2Grammar())) {s = 939;}

                        else if ( (LA147_347==HAVING) && (synpred4_EsperEPL2Grammar())) {s = 940;}

                        else if ( (LA147_347==OUTPUT) && (synpred4_EsperEPL2Grammar())) {s = 941;}

                        else if ( (LA147_347==ORDER) && (synpred4_EsperEPL2Grammar())) {s = 942;}

                        else if ( (LA147_347==ROW_LIMIT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 943;}

                        else if ( (LA147_347==EOF) && (synpred4_EsperEPL2Grammar())) {s = 944;}

                        else if ( (LA147_347==RPAREN) && (synpred4_EsperEPL2Grammar())) {s = 945;}

                        else if ( (LA147_347==COMMA) && (synpred4_EsperEPL2Grammar())) {s = 946;}

                        else if ( (LA147_347==AS) && (synpred4_EsperEPL2Grammar())) {s = 947;}

                        else if ( (LA147_347==FROM) && (synpred4_EsperEPL2Grammar())) {s = 948;}

                        else if ( (LA147_347==ASC) && (synpred4_EsperEPL2Grammar())) {s = 949;}

                        else if ( (LA147_347==DESC) && (synpred4_EsperEPL2Grammar())) {s = 950;}

                        else if ( (LA147_347==THEN) && (synpred4_EsperEPL2Grammar())) {s = 951;}

                        else if ( (LA147_347==ELSE) && (synpred4_EsperEPL2Grammar())) {s = 952;}

                        else if ( (LA147_347==END) && (synpred4_EsperEPL2Grammar())) {s = 953;}

                        else if ( (LA147_347==WHEN) && (synpred4_EsperEPL2Grammar())) {s = 954;}

                        else if ( (LA147_347==COLON) && (synpred4_EsperEPL2Grammar())) {s = 955;}

                        else if ( (LA147_347==RBRACK) && (synpred4_EsperEPL2Grammar())) {s = 956;}

                        else if ( (LA147_347==RCURLY) && (synpred4_EsperEPL2Grammar())) {s = 957;}

                        else if ( (LA147_347==TIMEPERIOD_SECONDS) && (synpred4_EsperEPL2Grammar())) {s = 958;}

                        else if ( (LA147_347==TIMEPERIOD_SECOND) && (synpred4_EsperEPL2Grammar())) {s = 959;}

                        else if ( (LA147_347==TIMEPERIOD_SEC) && (synpred4_EsperEPL2Grammar())) {s = 960;}

                        else if ( (LA147_347==NOT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 961;}

                        else if ( (LA147_347==IN_SET) && (synpred4_EsperEPL2Grammar())) {s = 962;}

                        else if ( (LA147_347==BETWEEN) && (synpred4_EsperEPL2Grammar())) {s = 963;}

                        else if ( (LA147_347==LIKE) && (synpred4_EsperEPL2Grammar())) {s = 964;}

                        else if ( (LA147_347==REGEXP) && (synpred4_EsperEPL2Grammar())) {s = 965;}

                        else if ( (LA147_347==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 966;}

                        else if ( (LA147_347==DOT) && (synpred4_EsperEPL2Grammar())) {s = 967;}

                         
                        input.seek(index147_347);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA147_500 = input.LA(1);

                         
                        int index147_500 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 967;}

                        else if ( (true) ) {s = 287;}

                         
                        input.seek(index147_500);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA147_501 = input.LA(1);

                         
                        int index147_501 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 967;}

                        else if ( (true) ) {s = 287;}

                         
                        input.seek(index147_501);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA147_603 = input.LA(1);

                         
                        int index147_603 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 967;}

                        else if ( (true) ) {s = 287;}

                         
                        input.seek(index147_603);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA147_606 = input.LA(1);

                         
                        int index147_606 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 967;}

                        else if ( (true) ) {s = 287;}

                         
                        input.seek(index147_606);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA147_656 = input.LA(1);

                         
                        int index147_656 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 967;}

                        else if ( (true) ) {s = 287;}

                         
                        input.seek(index147_656);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA147_728 = input.LA(1);

                         
                        int index147_728 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 967;}

                        else if ( (true) ) {s = 287;}

                         
                        input.seek(index147_728);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA147_734 = input.LA(1);

                         
                        int index147_734 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 967;}

                        else if ( (true) ) {s = 287;}

                         
                        input.seek(index147_734);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA147_760 = input.LA(1);

                         
                        int index147_760 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 967;}

                        else if ( (true) ) {s = 287;}

                         
                        input.seek(index147_760);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA147_761 = input.LA(1);

                         
                        int index147_761 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 967;}

                        else if ( (true) ) {s = 287;}

                         
                        input.seek(index147_761);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA147_863 = input.LA(1);

                         
                        int index147_863 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 967;}

                        else if ( (true) ) {s = 287;}

                         
                        input.seek(index147_863);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA147_866 = input.LA(1);

                         
                        int index147_866 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 967;}

                        else if ( (true) ) {s = 287;}

                         
                        input.seek(index147_866);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA147_916 = input.LA(1);

                         
                        int index147_916 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 967;}

                        else if ( (true) ) {s = 287;}

                         
                        input.seek(index147_916);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA147_968 = input.LA(1);

                         
                        int index147_968 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 967;}

                        else if ( (true) ) {s = 287;}

                         
                        input.seek(index147_968);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA147_994 = input.LA(1);

                         
                        int index147_994 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 967;}

                        else if ( (true) ) {s = 287;}

                         
                        input.seek(index147_994);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA147_1020 = input.LA(1);

                         
                        int index147_1020 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 967;}

                        else if ( (true) ) {s = 287;}

                         
                        input.seek(index147_1020);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA147_1046 = input.LA(1);

                         
                        int index147_1046 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 967;}

                        else if ( (true) ) {s = 287;}

                         
                        input.seek(index147_1046);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 147, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA182_eotS =
        "\u0081\uffff";
    static final String DFA182_eofS =
        "\u0081\uffff";
    static final String DFA182_minS =
        "\1\5\1\uffff\1\6\67\uffff\1\5\106\uffff";
    static final String DFA182_maxS =
        "\1\u0100\1\uffff\1\u00fd\67\uffff\1\u00fe\106\uffff";
    static final String DFA182_acceptS =
        "\1\uffff\1\1\1\uffff\1\3\126\uffff\1\2\46\uffff";
    static final String DFA182_specialS =
        "\72\uffff\1\0\106\uffff}>";
    static final String[] DFA182_transitionS = {
            "\1\3\4\uffff\1\3\2\uffff\2\3\2\uffff\11\3\1\uffff\1\3\6\uffff"+
            "\1\3\1\uffff\4\3\12\uffff\3\3\10\uffff\16\3\1\uffff\1\3\1\uffff"+
            "\3\3\14\uffff\3\3\174\uffff\1\3\2\uffff\1\2\2\uffff\1\3\1\uffff"+
            "\1\1\3\uffff\2\3\12\uffff\2\3\2\uffff\1\3\1\uffff\1\3\1\uffff"+
            "\1\3\1\uffff\3\3",
            "",
            "\4\3\1\uffff\3\3\2\uffff\1\3\20\uffff\1\3\7\uffff\1\3\u00b4"+
            "\uffff\1\3\1\uffff\1\3\1\72\1\3\1\uffff\2\3\4\uffff\16\3\4\uffff"+
            "\2\3",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\3\4\uffff\1\3\3\uffff\1\3\2\uffff\11\3\10\uffff\1\3\1\uffff"+
            "\4\3\12\uffff\3\3\10\uffff\10\3\1\uffff\4\3\2\uffff\1\3\1\uffff"+
            "\3\3\u008e\uffff\1\3\4\uffff\1\132\31\uffff\1\3",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA182_eot = DFA.unpackEncodedString(DFA182_eotS);
    static final short[] DFA182_eof = DFA.unpackEncodedString(DFA182_eofS);
    static final char[] DFA182_min = DFA.unpackEncodedStringToUnsignedChars(DFA182_minS);
    static final char[] DFA182_max = DFA.unpackEncodedStringToUnsignedChars(DFA182_maxS);
    static final short[] DFA182_accept = DFA.unpackEncodedString(DFA182_acceptS);
    static final short[] DFA182_special = DFA.unpackEncodedString(DFA182_specialS);
    static final short[][] DFA182_transition;

    static {
        int numStates = DFA182_transitionS.length;
        DFA182_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA182_transition[i] = DFA.unpackEncodedString(DFA182_transitionS[i]);
        }
    }

    class DFA182 extends DFA {

        public DFA182(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 182;
            this.eot = DFA182_eot;
            this.eof = DFA182_eof;
            this.min = DFA182_min;
            this.max = DFA182_max;
            this.accept = DFA182_accept;
            this.special = DFA182_special;
            this.transition = DFA182_transition;
        }
        public String getDescription() {
            return "1185:1: propertySelectionListElement : (s= STAR -> PROPERTY_WILDCARD_SELECT[$s] | ( propertyStreamSelector )=> propertyStreamSelector | expression ( AS i= keywordAllowedIdent )? -> {identifier != null}? ^( PROPERTY_SELECTION_ELEMENT_EXPR expression IDENT[identifier] ) -> ^( PROPERTY_SELECTION_ELEMENT_EXPR expression ) );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA182_58 = input.LA(1);

                         
                        int index182_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA182_58==STAR) && (synpred5_EsperEPL2Grammar())) {s = 90;}

                        else if ( (LA182_58==WINDOW||LA182_58==ESCAPE||LA182_58==EVERY_EXPR||(LA182_58>=SUM && LA182_58<=COUNT)||LA182_58==OUTER||(LA182_58>=JOIN && LA182_58<=FULL)||(LA182_58>=EVENTS && LA182_58<=LAST)||(LA182_58>=UNIDIRECTIONAL && LA182_58<=PRIOR)||(LA182_58>=WEEKDAY && LA182_58<=CAST)||LA182_58==SNAPSHOT||(LA182_58>=VARIABLE && LA182_58<=AT)||LA182_58==IDENT||LA182_58==TICKED_STRING_LITERAL) ) {s = 3;}

                         
                        input.seek(index182_58);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 182, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA192_eotS =
        "\u0225\uffff";
    static final String DFA192_eofS =
        "\u0225\uffff";
    static final String DFA192_minS =
        "\1\5\2\0\6\6\60\uffff\1\u00de\120\uffff\3\0\53\uffff\3\0\52\uffff"+
        "\3\0\52\uffff\3\0\53\uffff\3\0\50\uffff\3\0\u00b7\uffff";
    static final String DFA192_maxS =
        "\1\u0100\2\0\4\u00f7\1\u00fd\1\u00f7\60\uffff\1\u00f6\120\uffff"+
        "\3\0\53\uffff\3\0\52\uffff\3\0\52\uffff\3\0\53\uffff\3\0\50\uffff"+
        "\3\0\u00b7\uffff";
    static final String DFA192_acceptS =
        "\11\uffff\60\4\1\uffff\1\11\44\uffff\1\1\44\uffff\1\2\4\3\1\10"+
        "\3\uffff\1\5\34\4\1\7\10\3\1\10\3\3\1\7\3\uffff\3\3\1\5\34\4\2\3"+
        "\1\10\3\3\1\7\3\3\3\uffff\1\5\34\4\4\3\1\7\10\3\3\uffff\2\3\1\10"+
        "\1\5\34\4\1\10\1\4\10\3\1\7\3\uffff\1\4\2\3\1\5\37\4\1\10\3\3\1"+
        "\7\3\uffff\5\3\34\4\1\5\2\3\1\6\1\12\u0091\uffff";
    static final String DFA192_specialS =
        "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\60\uffff\1\11\120\uffff\1"+
        "\12\1\13\1\14\53\uffff\1\15\1\16\1\17\52\uffff\1\20\1\21\1\22\52"+
        "\uffff\1\23\1\24\1\25\53\uffff\1\26\1\27\1\30\50\uffff\1\31\1\32"+
        "\1\33\u00b7\uffff}>";
    static final String[] DFA192_transitionS = {
            "\1\57\4\uffff\1\25\2\uffff\1\70\1\26\2\uffff\1\27\1\30\1\31"+
            "\1\32\1\33\1\34\1\35\1\36\1\24\1\uffff\1\11\6\uffff\1\62\1\uffff"+
            "\1\64\1\60\1\61\1\63\12\uffff\1\37\1\40\1\1\10\uffff\1\41\1"+
            "\42\1\43\1\45\1\46\1\47\1\50\1\51\1\65\1\52\1\2\1\53\1\54\1"+
            "\66\1\uffff\1\55\1\uffff\1\56\1\44\1\23\14\uffff\1\16\1\17\1"+
            "\20\174\uffff\1\6\2\uffff\1\7\2\uffff\1\21\1\uffff\1\71\1\72"+
            "\2\uffff\1\14\1\15\12\uffff\1\13\1\12\2\uffff\1\67\1\uffff\1"+
            "\3\1\uffff\1\10\1\uffff\1\22\1\4\1\5",
            "\1\uffff",
            "\1\uffff",
            "\1\u00a6\1\u00a7\1\u00a8\1\u00a9\1\uffff\1\u00a0\1\u009f\1"+
            "\u00a5\6\uffff\1\u00b0\24\uffff\1\u0099\12\uffff\1\u00aa\3\uffff"+
            "\1\u00a1\1\u00a2\14\uffff\1\u0089\12\uffff\1\u0088\1\u0087\1"+
            "\u0086\1\u0085\1\u00af\1\u00ae\1\u008c\1\u008b\1\u008a\1\u00ad"+
            "\1\u00ac\1\u00ab\u0081\uffff\1\u00a3\1\uffff\1\u0098\2\uffff"+
            "\1\u00a4\1\u008e\2\uffff\1\u008d\2\uffff\1\u009c\1\u009d\1\u009e"+
            "\1\u009a\1\u009b\1\u0094\1\u0095\1\u0096\1\u0097\1\u0093\1\u0091"+
            "\1\u0092\1\u008f\1\u0090",
            "\1\u00d7\1\u00d8\1\u00d9\1\u00da\1\uffff\1\u00d1\1\u00d0\1"+
            "\u00d6\6\uffff\1\u00b6\24\uffff\1\u00ca\12\uffff\1\u00b7\3\uffff"+
            "\1\u00d2\1\u00d3\14\uffff\1\u00b3\12\uffff\1\u00b2\1\u00b1\1"+
            "\u00dc\1\u00db\1\u00b5\1\u00b4\1\u00ba\1\u00b9\1\u00b8\1\u00bd"+
            "\1\u00bc\1\u00bb\u0081\uffff\1\u00d4\1\uffff\1\u00c9\2\uffff"+
            "\1\u00d5\1\u00bf\2\uffff\1\u00be\2\uffff\1\u00cd\1\u00ce\1\u00cf"+
            "\1\u00cb\1\u00cc\1\u00c5\1\u00c6\1\u00c7\1\u00c8\1\u00c4\1\u00c2"+
            "\1\u00c3\1\u00c0\1\u00c1",
            "\1\u0101\1\u0102\1\u0103\1\u0104\1\uffff\1\u00fb\1\u00fa\1"+
            "\u0100\6\uffff\1\u00e0\24\uffff\1\u00f4\12\uffff\1\u00e1\3\uffff"+
            "\1\u00fc\1\u00fd\14\uffff\1\u00dd\12\uffff\1\u0108\1\u0107\1"+
            "\u0106\1\u0105\1\u00df\1\u00de\1\u00e7\1\u00e6\1\u00e5\1\u00e4"+
            "\1\u00e3\1\u00e2\u0081\uffff\1\u00fe\1\uffff\1\u00f3\2\uffff"+
            "\1\u00ff\1\u00e9\2\uffff\1\u00e8\2\uffff\1\u00f7\1\u00f8\1\u00f9"+
            "\1\u00f5\1\u00f6\1\u00ef\1\u00f0\1\u00f1\1\u00f2\1\u00ee\1\u00ec"+
            "\1\u00ed\1\u00ea\1\u00eb",
            "\1\u0131\1\u0132\1\u0133\1\u0134\1\uffff\1\u012b\1\u012a\1"+
            "\u0130\6\uffff\1\u010f\24\uffff\1\u0124\12\uffff\1\u0109\3\uffff"+
            "\1\u012c\1\u012d\14\uffff\1\u0117\12\uffff\1\u0116\1\u0115\1"+
            "\u0111\1\u0110\1\u010e\1\u010d\1\u0114\1\u0113\1\u0112\1\u010c"+
            "\1\u010b\1\u010a\u0081\uffff\1\u012e\1\uffff\1\u0123\2\uffff"+
            "\1\u012f\1\u0119\2\uffff\1\u0118\2\uffff\1\u0127\1\u0128\1\u0129"+
            "\1\u0125\1\u0126\1\u011f\1\u0120\1\u0121\1\u0122\1\u011e\1\u011c"+
            "\1\u011d\1\u011a\1\u011b",
            "\1\u0162\1\u0163\1\u0164\1\u0165\1\uffff\1\u015c\1\u015b\1"+
            "\u0161\6\uffff\1\u013e\24\uffff\1\u0155\12\uffff\1\u013f\3\uffff"+
            "\1\u015d\1\u015e\14\uffff\1\u0135\12\uffff\1\u0145\1\u0144\1"+
            "\u0138\1\u0137\1\u013d\1\u013c\1\u0142\1\u0141\1\u0140\1\u013b"+
            "\1\u013a\1\u0139\u0081\uffff\1\u015f\1\uffff\1\u0154\1\u0143"+
            "\1\u0136\1\u0160\1\u014a\1\u0148\1\uffff\1\u0146\2\uffff\1\u0158"+
            "\1\u0159\1\u015a\1\u0156\1\u0157\1\u0150\1\u0151\1\u0152\1\u0153"+
            "\1\u014f\1\u014d\1\u014e\1\u014b\1\u014c\4\uffff\1\u0149\1\u0147",
            "\1\u018b\1\u018c\1\u018d\1\u018e\1\uffff\1\u0185\1\u0184\1"+
            "\u018a\6\uffff\1\u0169\24\uffff\1\u017e\12\uffff\1\u016a\3\uffff"+
            "\1\u0186\1\u0187\14\uffff\1\u0166\12\uffff\1\u016f\1\u016e\1"+
            "\u0191\1\u0190\1\u0168\1\u0167\1\u016d\1\u016c\1\u016b\1\u0172"+
            "\1\u0171\1\u0170\u0081\uffff\1\u0188\1\uffff\1\u017d\2\uffff"+
            "\1\u0189\1\u0173\2\uffff\1\u018f\2\uffff\1\u0181\1\u0182\1\u0183"+
            "\1\u017f\1\u0180\1\u0179\1\u017a\1\u017b\1\u017c\1\u0178\1\u0176"+
            "\1\u0177\1\u0174\1\u0175",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0193\4\uffff\1\u0193\22\uffff\1\u0192",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA192_eot = DFA.unpackEncodedString(DFA192_eotS);
    static final short[] DFA192_eof = DFA.unpackEncodedString(DFA192_eofS);
    static final char[] DFA192_min = DFA.unpackEncodedStringToUnsignedChars(DFA192_minS);
    static final char[] DFA192_max = DFA.unpackEncodedStringToUnsignedChars(DFA192_maxS);
    static final short[] DFA192_accept = DFA.unpackEncodedString(DFA192_acceptS);
    static final short[] DFA192_special = DFA.unpackEncodedString(DFA192_specialS);
    static final short[][] DFA192_transition;

    static {
        int numStates = DFA192_transitionS.length;
        DFA192_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA192_transition[i] = DFA.unpackEncodedString(DFA192_transitionS[i]);
        }
    }

    class DFA192 extends DFA {

        public DFA192(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 192;
            this.eot = DFA192_eot;
            this.eof = DFA192_eof;
            this.min = DFA192_min;
            this.max = DFA192_max;
            this.accept = DFA192_accept;
            this.special = DFA192_special;
            this.transition = DFA192_transition;
        }
        public String getDescription() {
            return "1236:1: expressionWithTime : ( ( lastOperand )=> lastOperand | ( lastWeekdayOperand )=> lastWeekdayOperand | ( timePeriod )=> timePeriod | ( expressionQualifyable )=> expressionQualifyable | ( rangeOperand )=> rangeOperand | ( frequencyOperand )=> frequencyOperand | ( lastOperator )=> lastOperator | ( weekDayOperator )=> weekDayOperator | ( numericParameterList )=> numericParameterList | numberSetStar );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA192_0 = input.LA(1);

                         
                        int index192_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA192_0==LAST) ) {s = 1;}

                        else if ( (LA192_0==LW) ) {s = 2;}

                        else if ( (LA192_0==NUM_INT) ) {s = 3;}

                        else if ( (LA192_0==NUM_LONG) ) {s = 4;}

                        else if ( (LA192_0==NUM_FLOAT) ) {s = 5;}

                        else if ( (LA192_0==NUM_DOUBLE) ) {s = 6;}

                        else if ( (LA192_0==IDENT) ) {s = 7;}

                        else if ( (LA192_0==QUESTION) ) {s = 8;}

                        else if ( (LA192_0==CASE) && (synpred9_EsperEPL2Grammar())) {s = 9;}

                        else if ( (LA192_0==MINUS) && (synpred9_EsperEPL2Grammar())) {s = 10;}

                        else if ( (LA192_0==PLUS) && (synpred9_EsperEPL2Grammar())) {s = 11;}

                        else if ( (LA192_0==STRING_LITERAL) && (synpred9_EsperEPL2Grammar())) {s = 12;}

                        else if ( (LA192_0==QUOTED_STRING_LITERAL) && (synpred9_EsperEPL2Grammar())) {s = 13;}

                        else if ( (LA192_0==BOOLEAN_TRUE) && (synpred9_EsperEPL2Grammar())) {s = 14;}

                        else if ( (LA192_0==BOOLEAN_FALSE) && (synpred9_EsperEPL2Grammar())) {s = 15;}

                        else if ( (LA192_0==VALUE_NULL) && (synpred9_EsperEPL2Grammar())) {s = 16;}

                        else if ( (LA192_0==LPAREN) && (synpred9_EsperEPL2Grammar())) {s = 17;}

                        else if ( (LA192_0==TICKED_STRING_LITERAL) && (synpred9_EsperEPL2Grammar())) {s = 18;}

                        else if ( (LA192_0==AT) && (synpred9_EsperEPL2Grammar())) {s = 19;}

                        else if ( (LA192_0==COUNT) && (synpred9_EsperEPL2Grammar())) {s = 20;}

                        else if ( (LA192_0==ESCAPE) && (synpred9_EsperEPL2Grammar())) {s = 21;}

                        else if ( (LA192_0==EVERY_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 22;}

                        else if ( (LA192_0==SUM) && (synpred9_EsperEPL2Grammar())) {s = 23;}

                        else if ( (LA192_0==AVG) && (synpred9_EsperEPL2Grammar())) {s = 24;}

                        else if ( (LA192_0==MAX) && (synpred9_EsperEPL2Grammar())) {s = 25;}

                        else if ( (LA192_0==MIN) && (synpred9_EsperEPL2Grammar())) {s = 26;}

                        else if ( (LA192_0==COALESCE) && (synpred9_EsperEPL2Grammar())) {s = 27;}

                        else if ( (LA192_0==MEDIAN) && (synpred9_EsperEPL2Grammar())) {s = 28;}

                        else if ( (LA192_0==STDDEV) && (synpred9_EsperEPL2Grammar())) {s = 29;}

                        else if ( (LA192_0==AVEDEV) && (synpred9_EsperEPL2Grammar())) {s = 30;}

                        else if ( (LA192_0==EVENTS) && (synpred9_EsperEPL2Grammar())) {s = 31;}

                        else if ( (LA192_0==FIRST) && (synpred9_EsperEPL2Grammar())) {s = 32;}

                        else if ( (LA192_0==UNIDIRECTIONAL) && (synpred9_EsperEPL2Grammar())) {s = 33;}

                        else if ( (LA192_0==RETAINUNION) && (synpred9_EsperEPL2Grammar())) {s = 34;}

                        else if ( (LA192_0==RETAININTERSECTION) && (synpred9_EsperEPL2Grammar())) {s = 35;}

                        else if ( (LA192_0==UNTIL) && (synpred9_EsperEPL2Grammar())) {s = 36;}

                        else if ( (LA192_0==PATTERN) && (synpred9_EsperEPL2Grammar())) {s = 37;}

                        else if ( (LA192_0==SQL) && (synpred9_EsperEPL2Grammar())) {s = 38;}

                        else if ( (LA192_0==METADATASQL) && (synpred9_EsperEPL2Grammar())) {s = 39;}

                        else if ( (LA192_0==PREVIOUS) && (synpred9_EsperEPL2Grammar())) {s = 40;}

                        else if ( (LA192_0==PRIOR) && (synpred9_EsperEPL2Grammar())) {s = 41;}

                        else if ( (LA192_0==WEEKDAY) && (synpred9_EsperEPL2Grammar())) {s = 42;}

                        else if ( (LA192_0==INSTANCEOF) && (synpred9_EsperEPL2Grammar())) {s = 43;}

                        else if ( (LA192_0==CAST) && (synpred9_EsperEPL2Grammar())) {s = 44;}

                        else if ( (LA192_0==SNAPSHOT) && (synpred9_EsperEPL2Grammar())) {s = 45;}

                        else if ( (LA192_0==VARIABLE) && (synpred9_EsperEPL2Grammar())) {s = 46;}

                        else if ( (LA192_0==WINDOW) && (synpred9_EsperEPL2Grammar())) {s = 47;}

                        else if ( (LA192_0==LEFT) && (synpred9_EsperEPL2Grammar())) {s = 48;}

                        else if ( (LA192_0==RIGHT) && (synpred9_EsperEPL2Grammar())) {s = 49;}

                        else if ( (LA192_0==OUTER) && (synpred9_EsperEPL2Grammar())) {s = 50;}

                        else if ( (LA192_0==FULL) && (synpred9_EsperEPL2Grammar())) {s = 51;}

                        else if ( (LA192_0==JOIN) && (synpred9_EsperEPL2Grammar())) {s = 52;}

                        else if ( (LA192_0==EXISTS) && (synpred9_EsperEPL2Grammar())) {s = 53;}

                        else if ( (LA192_0==CURRENT_TIMESTAMP) && (synpred9_EsperEPL2Grammar())) {s = 54;}

                        else if ( (LA192_0==LCURLY) && (synpred9_EsperEPL2Grammar())) {s = 55;}

                        else if ( (LA192_0==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 56;}

                        else if ( (LA192_0==STAR) ) {s = 57;}

                        else if ( (LA192_0==LBRACK) && (synpred14_EsperEPL2Grammar())) {s = 58;}

                         
                        input.seek(index192_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA192_1 = input.LA(1);

                         
                        int index192_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_EsperEPL2Grammar()) ) {s = 95;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 56;}

                         
                        input.seek(index192_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA192_2 = input.LA(1);

                         
                        int index192_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_EsperEPL2Grammar()) ) {s = 132;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 56;}

                         
                        input.seek(index192_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA192_3 = input.LA(1);

                         
                        int index192_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA192_3==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {s = 133;}

                        else if ( (LA192_3==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {s = 134;}

                        else if ( (LA192_3==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {s = 135;}

                        else if ( (LA192_3==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {s = 136;}

                        else if ( (LA192_3==WEEKDAY) && (synpred13_EsperEPL2Grammar())) {s = 137;}

                        else if ( (LA192_3==TIMEPERIOD_SECONDS) ) {s = 138;}

                        else if ( (LA192_3==TIMEPERIOD_SECOND) ) {s = 139;}

                        else if ( (LA192_3==TIMEPERIOD_SEC) ) {s = 140;}

                        else if ( (LA192_3==COLON) && (synpred10_EsperEPL2Grammar())) {s = 141;}

                        else if ( (LA192_3==STAR) && (synpred9_EsperEPL2Grammar())) {s = 142;}

                        else if ( (LA192_3==DIV) && (synpred9_EsperEPL2Grammar())) {s = 143;}

                        else if ( (LA192_3==MOD) && (synpred9_EsperEPL2Grammar())) {s = 144;}

                        else if ( (LA192_3==PLUS) && (synpred9_EsperEPL2Grammar())) {s = 145;}

                        else if ( (LA192_3==MINUS) && (synpred9_EsperEPL2Grammar())) {s = 146;}

                        else if ( (LA192_3==LOR) && (synpred9_EsperEPL2Grammar())) {s = 147;}

                        else if ( (LA192_3==LT) && (synpred9_EsperEPL2Grammar())) {s = 148;}

                        else if ( (LA192_3==GT) && (synpred9_EsperEPL2Grammar())) {s = 149;}

                        else if ( (LA192_3==LE) && (synpred9_EsperEPL2Grammar())) {s = 150;}

                        else if ( (LA192_3==GE) && (synpred9_EsperEPL2Grammar())) {s = 151;}

                        else if ( (LA192_3==EQUALS) && (synpred9_EsperEPL2Grammar())) {s = 152;}

                        else if ( (LA192_3==IS) && (synpred9_EsperEPL2Grammar())) {s = 153;}

                        else if ( (LA192_3==SQL_NE) && (synpred9_EsperEPL2Grammar())) {s = 154;}

                        else if ( (LA192_3==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {s = 155;}

                        else if ( (LA192_3==BAND) && (synpred9_EsperEPL2Grammar())) {s = 156;}

                        else if ( (LA192_3==BOR) && (synpred9_EsperEPL2Grammar())) {s = 157;}

                        else if ( (LA192_3==BXOR) && (synpred9_EsperEPL2Grammar())) {s = 158;}

                        else if ( (LA192_3==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 159;}

                        else if ( (LA192_3==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 160;}

                        else if ( (LA192_3==ASC) && (synpred9_EsperEPL2Grammar())) {s = 161;}

                        else if ( (LA192_3==DESC) && (synpred9_EsperEPL2Grammar())) {s = 162;}

                        else if ( (LA192_3==COMMA) && (synpred9_EsperEPL2Grammar())) {s = 163;}

                        else if ( (LA192_3==RPAREN) && (synpred9_EsperEPL2Grammar())) {s = 164;}

                        else if ( (LA192_3==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 165;}

                        else if ( (LA192_3==IN_SET) && (synpred9_EsperEPL2Grammar())) {s = 166;}

                        else if ( (LA192_3==BETWEEN) && (synpred9_EsperEPL2Grammar())) {s = 167;}

                        else if ( (LA192_3==LIKE) && (synpred9_EsperEPL2Grammar())) {s = 168;}

                        else if ( (LA192_3==REGEXP) && (synpred9_EsperEPL2Grammar())) {s = 169;}

                        else if ( (LA192_3==LAST) && (synpred12_EsperEPL2Grammar())) {s = 170;}

                        else if ( (LA192_3==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {s = 171;}

                        else if ( (LA192_3==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {s = 172;}

                        else if ( (LA192_3==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {s = 173;}

                        else if ( (LA192_3==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {s = 174;}

                        else if ( (LA192_3==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {s = 175;}

                        else if ( (LA192_3==MIN) && (synpred8_EsperEPL2Grammar())) {s = 176;}

                         
                        input.seek(index192_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA192_4 = input.LA(1);

                         
                        int index192_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA192_4==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {s = 177;}

                        else if ( (LA192_4==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {s = 178;}

                        else if ( (LA192_4==WEEKDAY) && (synpred13_EsperEPL2Grammar())) {s = 179;}

                        else if ( (LA192_4==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {s = 180;}

                        else if ( (LA192_4==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {s = 181;}

                        else if ( (LA192_4==MIN) && (synpred8_EsperEPL2Grammar())) {s = 182;}

                        else if ( (LA192_4==LAST) && (synpred12_EsperEPL2Grammar())) {s = 183;}

                        else if ( (LA192_4==TIMEPERIOD_SECONDS) ) {s = 184;}

                        else if ( (LA192_4==TIMEPERIOD_SECOND) ) {s = 185;}

                        else if ( (LA192_4==TIMEPERIOD_SEC) ) {s = 186;}

                        else if ( (LA192_4==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {s = 187;}

                        else if ( (LA192_4==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {s = 188;}

                        else if ( (LA192_4==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {s = 189;}

                        else if ( (LA192_4==COLON) && (synpred10_EsperEPL2Grammar())) {s = 190;}

                        else if ( (LA192_4==STAR) && (synpred9_EsperEPL2Grammar())) {s = 191;}

                        else if ( (LA192_4==DIV) && (synpred9_EsperEPL2Grammar())) {s = 192;}

                        else if ( (LA192_4==MOD) && (synpred9_EsperEPL2Grammar())) {s = 193;}

                        else if ( (LA192_4==PLUS) && (synpred9_EsperEPL2Grammar())) {s = 194;}

                        else if ( (LA192_4==MINUS) && (synpred9_EsperEPL2Grammar())) {s = 195;}

                        else if ( (LA192_4==LOR) && (synpred9_EsperEPL2Grammar())) {s = 196;}

                        else if ( (LA192_4==LT) && (synpred9_EsperEPL2Grammar())) {s = 197;}

                        else if ( (LA192_4==GT) && (synpred9_EsperEPL2Grammar())) {s = 198;}

                        else if ( (LA192_4==LE) && (synpred9_EsperEPL2Grammar())) {s = 199;}

                        else if ( (LA192_4==GE) && (synpred9_EsperEPL2Grammar())) {s = 200;}

                        else if ( (LA192_4==EQUALS) && (synpred9_EsperEPL2Grammar())) {s = 201;}

                        else if ( (LA192_4==IS) && (synpred9_EsperEPL2Grammar())) {s = 202;}

                        else if ( (LA192_4==SQL_NE) && (synpred9_EsperEPL2Grammar())) {s = 203;}

                        else if ( (LA192_4==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {s = 204;}

                        else if ( (LA192_4==BAND) && (synpred9_EsperEPL2Grammar())) {s = 205;}

                        else if ( (LA192_4==BOR) && (synpred9_EsperEPL2Grammar())) {s = 206;}

                        else if ( (LA192_4==BXOR) && (synpred9_EsperEPL2Grammar())) {s = 207;}

                        else if ( (LA192_4==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 208;}

                        else if ( (LA192_4==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 209;}

                        else if ( (LA192_4==ASC) && (synpred9_EsperEPL2Grammar())) {s = 210;}

                        else if ( (LA192_4==DESC) && (synpred9_EsperEPL2Grammar())) {s = 211;}

                        else if ( (LA192_4==COMMA) && (synpred9_EsperEPL2Grammar())) {s = 212;}

                        else if ( (LA192_4==RPAREN) && (synpred9_EsperEPL2Grammar())) {s = 213;}

                        else if ( (LA192_4==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 214;}

                        else if ( (LA192_4==IN_SET) && (synpred9_EsperEPL2Grammar())) {s = 215;}

                        else if ( (LA192_4==BETWEEN) && (synpred9_EsperEPL2Grammar())) {s = 216;}

                        else if ( (LA192_4==LIKE) && (synpred9_EsperEPL2Grammar())) {s = 217;}

                        else if ( (LA192_4==REGEXP) && (synpred9_EsperEPL2Grammar())) {s = 218;}

                        else if ( (LA192_4==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {s = 219;}

                        else if ( (LA192_4==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {s = 220;}

                         
                        input.seek(index192_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA192_5 = input.LA(1);

                         
                        int index192_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA192_5==WEEKDAY) && (synpred13_EsperEPL2Grammar())) {s = 221;}

                        else if ( (LA192_5==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {s = 222;}

                        else if ( (LA192_5==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {s = 223;}

                        else if ( (LA192_5==MIN) && (synpred8_EsperEPL2Grammar())) {s = 224;}

                        else if ( (LA192_5==LAST) && (synpred12_EsperEPL2Grammar())) {s = 225;}

                        else if ( (LA192_5==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {s = 226;}

                        else if ( (LA192_5==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {s = 227;}

                        else if ( (LA192_5==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {s = 228;}

                        else if ( (LA192_5==TIMEPERIOD_SECONDS) ) {s = 229;}

                        else if ( (LA192_5==TIMEPERIOD_SECOND) ) {s = 230;}

                        else if ( (LA192_5==TIMEPERIOD_SEC) ) {s = 231;}

                        else if ( (LA192_5==COLON) && (synpred10_EsperEPL2Grammar())) {s = 232;}

                        else if ( (LA192_5==STAR) && (synpred9_EsperEPL2Grammar())) {s = 233;}

                        else if ( (LA192_5==DIV) && (synpred9_EsperEPL2Grammar())) {s = 234;}

                        else if ( (LA192_5==MOD) && (synpred9_EsperEPL2Grammar())) {s = 235;}

                        else if ( (LA192_5==PLUS) && (synpred9_EsperEPL2Grammar())) {s = 236;}

                        else if ( (LA192_5==MINUS) && (synpred9_EsperEPL2Grammar())) {s = 237;}

                        else if ( (LA192_5==LOR) && (synpred9_EsperEPL2Grammar())) {s = 238;}

                        else if ( (LA192_5==LT) && (synpred9_EsperEPL2Grammar())) {s = 239;}

                        else if ( (LA192_5==GT) && (synpred9_EsperEPL2Grammar())) {s = 240;}

                        else if ( (LA192_5==LE) && (synpred9_EsperEPL2Grammar())) {s = 241;}

                        else if ( (LA192_5==GE) && (synpred9_EsperEPL2Grammar())) {s = 242;}

                        else if ( (LA192_5==EQUALS) && (synpred9_EsperEPL2Grammar())) {s = 243;}

                        else if ( (LA192_5==IS) && (synpred9_EsperEPL2Grammar())) {s = 244;}

                        else if ( (LA192_5==SQL_NE) && (synpred9_EsperEPL2Grammar())) {s = 245;}

                        else if ( (LA192_5==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {s = 246;}

                        else if ( (LA192_5==BAND) && (synpred9_EsperEPL2Grammar())) {s = 247;}

                        else if ( (LA192_5==BOR) && (synpred9_EsperEPL2Grammar())) {s = 248;}

                        else if ( (LA192_5==BXOR) && (synpred9_EsperEPL2Grammar())) {s = 249;}

                        else if ( (LA192_5==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 250;}

                        else if ( (LA192_5==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 251;}

                        else if ( (LA192_5==ASC) && (synpred9_EsperEPL2Grammar())) {s = 252;}

                        else if ( (LA192_5==DESC) && (synpred9_EsperEPL2Grammar())) {s = 253;}

                        else if ( (LA192_5==COMMA) && (synpred9_EsperEPL2Grammar())) {s = 254;}

                        else if ( (LA192_5==RPAREN) && (synpred9_EsperEPL2Grammar())) {s = 255;}

                        else if ( (LA192_5==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 256;}

                        else if ( (LA192_5==IN_SET) && (synpred9_EsperEPL2Grammar())) {s = 257;}

                        else if ( (LA192_5==BETWEEN) && (synpred9_EsperEPL2Grammar())) {s = 258;}

                        else if ( (LA192_5==LIKE) && (synpred9_EsperEPL2Grammar())) {s = 259;}

                        else if ( (LA192_5==REGEXP) && (synpred9_EsperEPL2Grammar())) {s = 260;}

                        else if ( (LA192_5==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {s = 261;}

                        else if ( (LA192_5==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {s = 262;}

                        else if ( (LA192_5==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {s = 263;}

                        else if ( (LA192_5==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {s = 264;}

                         
                        input.seek(index192_5);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA192_6 = input.LA(1);

                         
                        int index192_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA192_6==LAST) && (synpred12_EsperEPL2Grammar())) {s = 265;}

                        else if ( (LA192_6==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {s = 266;}

                        else if ( (LA192_6==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {s = 267;}

                        else if ( (LA192_6==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {s = 268;}

                        else if ( (LA192_6==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {s = 269;}

                        else if ( (LA192_6==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {s = 270;}

                        else if ( (LA192_6==MIN) && (synpred8_EsperEPL2Grammar())) {s = 271;}

                        else if ( (LA192_6==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {s = 272;}

                        else if ( (LA192_6==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {s = 273;}

                        else if ( (LA192_6==TIMEPERIOD_SECONDS) ) {s = 274;}

                        else if ( (LA192_6==TIMEPERIOD_SECOND) ) {s = 275;}

                        else if ( (LA192_6==TIMEPERIOD_SEC) ) {s = 276;}

                        else if ( (LA192_6==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {s = 277;}

                        else if ( (LA192_6==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {s = 278;}

                        else if ( (LA192_6==WEEKDAY) && (synpred13_EsperEPL2Grammar())) {s = 279;}

                        else if ( (LA192_6==COLON) && (synpred10_EsperEPL2Grammar())) {s = 280;}

                        else if ( (LA192_6==STAR) && (synpred9_EsperEPL2Grammar())) {s = 281;}

                        else if ( (LA192_6==DIV) && (synpred9_EsperEPL2Grammar())) {s = 282;}

                        else if ( (LA192_6==MOD) && (synpred9_EsperEPL2Grammar())) {s = 283;}

                        else if ( (LA192_6==PLUS) && (synpred9_EsperEPL2Grammar())) {s = 284;}

                        else if ( (LA192_6==MINUS) && (synpred9_EsperEPL2Grammar())) {s = 285;}

                        else if ( (LA192_6==LOR) && (synpred9_EsperEPL2Grammar())) {s = 286;}

                        else if ( (LA192_6==LT) && (synpred9_EsperEPL2Grammar())) {s = 287;}

                        else if ( (LA192_6==GT) && (synpred9_EsperEPL2Grammar())) {s = 288;}

                        else if ( (LA192_6==LE) && (synpred9_EsperEPL2Grammar())) {s = 289;}

                        else if ( (LA192_6==GE) && (synpred9_EsperEPL2Grammar())) {s = 290;}

                        else if ( (LA192_6==EQUALS) && (synpred9_EsperEPL2Grammar())) {s = 291;}

                        else if ( (LA192_6==IS) && (synpred9_EsperEPL2Grammar())) {s = 292;}

                        else if ( (LA192_6==SQL_NE) && (synpred9_EsperEPL2Grammar())) {s = 293;}

                        else if ( (LA192_6==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {s = 294;}

                        else if ( (LA192_6==BAND) && (synpred9_EsperEPL2Grammar())) {s = 295;}

                        else if ( (LA192_6==BOR) && (synpred9_EsperEPL2Grammar())) {s = 296;}

                        else if ( (LA192_6==BXOR) && (synpred9_EsperEPL2Grammar())) {s = 297;}

                        else if ( (LA192_6==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 298;}

                        else if ( (LA192_6==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 299;}

                        else if ( (LA192_6==ASC) && (synpred9_EsperEPL2Grammar())) {s = 300;}

                        else if ( (LA192_6==DESC) && (synpred9_EsperEPL2Grammar())) {s = 301;}

                        else if ( (LA192_6==COMMA) && (synpred9_EsperEPL2Grammar())) {s = 302;}

                        else if ( (LA192_6==RPAREN) && (synpred9_EsperEPL2Grammar())) {s = 303;}

                        else if ( (LA192_6==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 304;}

                        else if ( (LA192_6==IN_SET) && (synpred9_EsperEPL2Grammar())) {s = 305;}

                        else if ( (LA192_6==BETWEEN) && (synpred9_EsperEPL2Grammar())) {s = 306;}

                        else if ( (LA192_6==LIKE) && (synpred9_EsperEPL2Grammar())) {s = 307;}

                        else if ( (LA192_6==REGEXP) && (synpred9_EsperEPL2Grammar())) {s = 308;}

                         
                        input.seek(index192_6);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA192_7 = input.LA(1);

                         
                        int index192_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA192_7==WEEKDAY) && (synpred13_EsperEPL2Grammar())) {s = 309;}

                        else if ( (LA192_7==LPAREN) && (synpred9_EsperEPL2Grammar())) {s = 310;}

                        else if ( (LA192_7==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {s = 311;}

                        else if ( (LA192_7==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {s = 312;}

                        else if ( (LA192_7==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {s = 313;}

                        else if ( (LA192_7==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {s = 314;}

                        else if ( (LA192_7==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {s = 315;}

                        else if ( (LA192_7==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {s = 316;}

                        else if ( (LA192_7==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {s = 317;}

                        else if ( (LA192_7==MIN) && (synpred8_EsperEPL2Grammar())) {s = 318;}

                        else if ( (LA192_7==LAST) && (synpred12_EsperEPL2Grammar())) {s = 319;}

                        else if ( (LA192_7==TIMEPERIOD_SECONDS) ) {s = 320;}

                        else if ( (LA192_7==TIMEPERIOD_SECOND) ) {s = 321;}

                        else if ( (LA192_7==TIMEPERIOD_SEC) ) {s = 322;}

                        else if ( (LA192_7==DOT) && (synpred9_EsperEPL2Grammar())) {s = 323;}

                        else if ( (LA192_7==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {s = 324;}

                        else if ( (LA192_7==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {s = 325;}

                        else if ( (LA192_7==COLON) && (synpred10_EsperEPL2Grammar())) {s = 326;}

                        else if ( (LA192_7==ESCAPECHAR) && (synpred9_EsperEPL2Grammar())) {s = 327;}

                        else if ( (LA192_7==LBRACK) && (synpred9_EsperEPL2Grammar())) {s = 328;}

                        else if ( (LA192_7==QUESTION) && (synpred9_EsperEPL2Grammar())) {s = 329;}

                        else if ( (LA192_7==STAR) && (synpred9_EsperEPL2Grammar())) {s = 330;}

                        else if ( (LA192_7==DIV) && (synpred9_EsperEPL2Grammar())) {s = 331;}

                        else if ( (LA192_7==MOD) && (synpred9_EsperEPL2Grammar())) {s = 332;}

                        else if ( (LA192_7==PLUS) && (synpred9_EsperEPL2Grammar())) {s = 333;}

                        else if ( (LA192_7==MINUS) && (synpred9_EsperEPL2Grammar())) {s = 334;}

                        else if ( (LA192_7==LOR) && (synpred9_EsperEPL2Grammar())) {s = 335;}

                        else if ( (LA192_7==LT) && (synpred9_EsperEPL2Grammar())) {s = 336;}

                        else if ( (LA192_7==GT) && (synpred9_EsperEPL2Grammar())) {s = 337;}

                        else if ( (LA192_7==LE) && (synpred9_EsperEPL2Grammar())) {s = 338;}

                        else if ( (LA192_7==GE) && (synpred9_EsperEPL2Grammar())) {s = 339;}

                        else if ( (LA192_7==EQUALS) && (synpred9_EsperEPL2Grammar())) {s = 340;}

                        else if ( (LA192_7==IS) && (synpred9_EsperEPL2Grammar())) {s = 341;}

                        else if ( (LA192_7==SQL_NE) && (synpred9_EsperEPL2Grammar())) {s = 342;}

                        else if ( (LA192_7==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {s = 343;}

                        else if ( (LA192_7==BAND) && (synpred9_EsperEPL2Grammar())) {s = 344;}

                        else if ( (LA192_7==BOR) && (synpred9_EsperEPL2Grammar())) {s = 345;}

                        else if ( (LA192_7==BXOR) && (synpred9_EsperEPL2Grammar())) {s = 346;}

                        else if ( (LA192_7==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 347;}

                        else if ( (LA192_7==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 348;}

                        else if ( (LA192_7==ASC) && (synpred9_EsperEPL2Grammar())) {s = 349;}

                        else if ( (LA192_7==DESC) && (synpred9_EsperEPL2Grammar())) {s = 350;}

                        else if ( (LA192_7==COMMA) && (synpred9_EsperEPL2Grammar())) {s = 351;}

                        else if ( (LA192_7==RPAREN) && (synpred9_EsperEPL2Grammar())) {s = 352;}

                        else if ( (LA192_7==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 353;}

                        else if ( (LA192_7==IN_SET) && (synpred9_EsperEPL2Grammar())) {s = 354;}

                        else if ( (LA192_7==BETWEEN) && (synpred9_EsperEPL2Grammar())) {s = 355;}

                        else if ( (LA192_7==LIKE) && (synpred9_EsperEPL2Grammar())) {s = 356;}

                        else if ( (LA192_7==REGEXP) && (synpred9_EsperEPL2Grammar())) {s = 357;}

                         
                        input.seek(index192_7);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA192_8 = input.LA(1);

                         
                        int index192_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA192_8==WEEKDAY) && (synpred13_EsperEPL2Grammar())) {s = 358;}

                        else if ( (LA192_8==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {s = 359;}

                        else if ( (LA192_8==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {s = 360;}

                        else if ( (LA192_8==MIN) && (synpred8_EsperEPL2Grammar())) {s = 361;}

                        else if ( (LA192_8==LAST) && (synpred12_EsperEPL2Grammar())) {s = 362;}

                        else if ( (LA192_8==TIMEPERIOD_SECONDS) ) {s = 363;}

                        else if ( (LA192_8==TIMEPERIOD_SECOND) ) {s = 364;}

                        else if ( (LA192_8==TIMEPERIOD_SEC) ) {s = 365;}

                        else if ( (LA192_8==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {s = 366;}

                        else if ( (LA192_8==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {s = 367;}

                        else if ( (LA192_8==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {s = 368;}

                        else if ( (LA192_8==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {s = 369;}

                        else if ( (LA192_8==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {s = 370;}

                        else if ( (LA192_8==STAR) && (synpred9_EsperEPL2Grammar())) {s = 371;}

                        else if ( (LA192_8==DIV) && (synpred9_EsperEPL2Grammar())) {s = 372;}

                        else if ( (LA192_8==MOD) && (synpred9_EsperEPL2Grammar())) {s = 373;}

                        else if ( (LA192_8==PLUS) && (synpred9_EsperEPL2Grammar())) {s = 374;}

                        else if ( (LA192_8==MINUS) && (synpred9_EsperEPL2Grammar())) {s = 375;}

                        else if ( (LA192_8==LOR) && (synpred9_EsperEPL2Grammar())) {s = 376;}

                        else if ( (LA192_8==LT) && (synpred9_EsperEPL2Grammar())) {s = 377;}

                        else if ( (LA192_8==GT) && (synpred9_EsperEPL2Grammar())) {s = 378;}

                        else if ( (LA192_8==LE) && (synpred9_EsperEPL2Grammar())) {s = 379;}

                        else if ( (LA192_8==GE) && (synpred9_EsperEPL2Grammar())) {s = 380;}

                        else if ( (LA192_8==EQUALS) && (synpred9_EsperEPL2Grammar())) {s = 381;}

                        else if ( (LA192_8==IS) && (synpred9_EsperEPL2Grammar())) {s = 382;}

                        else if ( (LA192_8==SQL_NE) && (synpred9_EsperEPL2Grammar())) {s = 383;}

                        else if ( (LA192_8==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {s = 384;}

                        else if ( (LA192_8==BAND) && (synpred9_EsperEPL2Grammar())) {s = 385;}

                        else if ( (LA192_8==BOR) && (synpred9_EsperEPL2Grammar())) {s = 386;}

                        else if ( (LA192_8==BXOR) && (synpred9_EsperEPL2Grammar())) {s = 387;}

                        else if ( (LA192_8==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 388;}

                        else if ( (LA192_8==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 389;}

                        else if ( (LA192_8==ASC) && (synpred9_EsperEPL2Grammar())) {s = 390;}

                        else if ( (LA192_8==DESC) && (synpred9_EsperEPL2Grammar())) {s = 391;}

                        else if ( (LA192_8==COMMA) && (synpred9_EsperEPL2Grammar())) {s = 392;}

                        else if ( (LA192_8==RPAREN) && (synpred9_EsperEPL2Grammar())) {s = 393;}

                        else if ( (LA192_8==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 394;}

                        else if ( (LA192_8==IN_SET) && (synpred9_EsperEPL2Grammar())) {s = 395;}

                        else if ( (LA192_8==BETWEEN) && (synpred9_EsperEPL2Grammar())) {s = 396;}

                        else if ( (LA192_8==LIKE) && (synpred9_EsperEPL2Grammar())) {s = 397;}

                        else if ( (LA192_8==REGEXP) && (synpred9_EsperEPL2Grammar())) {s = 398;}

                        else if ( (LA192_8==COLON) && (synpred10_EsperEPL2Grammar())) {s = 399;}

                        else if ( (LA192_8==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {s = 400;}

                        else if ( (LA192_8==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {s = 401;}

                         
                        input.seek(index192_8);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA192_57 = input.LA(1);

                         
                        int index192_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA192_57==DIV) && (synpred11_EsperEPL2Grammar())) {s = 402;}

                        else if ( (LA192_57==COMMA||LA192_57==RPAREN) ) {s = 403;}

                         
                        input.seek(index192_57);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA192_138 = input.LA(1);

                         
                        int index192_138 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 401;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 398;}

                         
                        input.seek(index192_138);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA192_139 = input.LA(1);

                         
                        int index192_139 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 401;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 398;}

                         
                        input.seek(index192_139);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA192_140 = input.LA(1);

                         
                        int index192_140 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 401;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 398;}

                         
                        input.seek(index192_140);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA192_184 = input.LA(1);

                         
                        int index192_184 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 401;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 398;}

                         
                        input.seek(index192_184);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA192_185 = input.LA(1);

                         
                        int index192_185 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 401;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 398;}

                         
                        input.seek(index192_185);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA192_186 = input.LA(1);

                         
                        int index192_186 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 401;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 398;}

                         
                        input.seek(index192_186);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA192_229 = input.LA(1);

                         
                        int index192_229 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 401;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 398;}

                         
                        input.seek(index192_229);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA192_230 = input.LA(1);

                         
                        int index192_230 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 401;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 398;}

                         
                        input.seek(index192_230);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA192_231 = input.LA(1);

                         
                        int index192_231 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 401;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 398;}

                         
                        input.seek(index192_231);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA192_274 = input.LA(1);

                         
                        int index192_274 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 401;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 398;}

                         
                        input.seek(index192_274);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA192_275 = input.LA(1);

                         
                        int index192_275 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 401;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 398;}

                         
                        input.seek(index192_275);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA192_276 = input.LA(1);

                         
                        int index192_276 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 401;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 398;}

                         
                        input.seek(index192_276);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA192_320 = input.LA(1);

                         
                        int index192_320 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 401;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 398;}

                         
                        input.seek(index192_320);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA192_321 = input.LA(1);

                         
                        int index192_321 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 401;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 398;}

                         
                        input.seek(index192_321);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA192_322 = input.LA(1);

                         
                        int index192_322 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 401;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 398;}

                         
                        input.seek(index192_322);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA192_363 = input.LA(1);

                         
                        int index192_363 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 401;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 398;}

                         
                        input.seek(index192_363);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA192_364 = input.LA(1);

                         
                        int index192_364 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 401;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 398;}

                         
                        input.seek(index192_364);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA192_365 = input.LA(1);

                         
                        int index192_365 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 401;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 398;}

                         
                        input.seek(index192_365);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 192, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA206_eotS =
        "\u0187\uffff";
    static final String DFA206_eofS =
        "\1\47\4\uffff\1\1\34\uffff\2\1\1\uffff\2\1\u0160\uffff";
    static final String DFA206_minS =
        "\1\5\4\uffff\1\6\34\uffff\2\6\1\uffff\2\6\u0160\uffff";
    static final String DFA206_maxS =
        "\1\u00fe\4\uffff\1\u00fd\34\uffff\2\u00fd\1\uffff\1\u00fd\1\u00fe"+
        "\u0160\uffff";
    static final String DFA206_acceptS =
        "\1\uffff\1\1\45\uffff\1\2\u015f\uffff";
    static final String DFA206_specialS =
        "\u0187\uffff}>";
    static final String[] DFA206_transitionS = {
            "\1\1\4\47\1\5\3\47\1\1\2\47\11\1\3\uffff\5\47\1\1\1\47\1\46"+
            "\1\42\1\43\1\45\1\uffff\1\47\1\uffff\2\47\4\uffff\1\47\3\1\2"+
            "\uffff\3\47\3\uffff\10\1\1\uffff\4\1\2\uffff\1\1\1\uffff\3\1"+
            "\6\uffff\3\47\6\uffff\1\47\175\uffff\1\47\1\1\10\47\2\uffff"+
            "\16\47\1\uffff\1\47\2\uffff\2\47\1\1",
            "",
            "",
            "",
            "",
            "\10\1\1\uffff\2\1\14\uffff\5\1\1\uffff\5\1\1\uffff\1\1\1\uffff"+
            "\2\1\4\uffff\1\1\5\uffff\3\1\35\uffff\3\1\6\uffff\1\1\175\uffff"+
            "\1\1\1\uffff\10\1\2\47\16\1\1\uffff\1\1\2\uffff\2\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\10\1\1\uffff\2\1\14\uffff\5\1\1\47\5\1\1\uffff\1\1\1\uffff"+
            "\2\1\4\uffff\1\1\5\uffff\3\1\35\uffff\3\1\6\uffff\1\1\175\uffff"+
            "\1\1\1\uffff\10\1\2\uffff\16\1\1\uffff\1\1\2\uffff\2\1",
            "\10\1\1\uffff\2\1\14\uffff\5\1\1\47\5\1\1\uffff\1\1\1\uffff"+
            "\2\1\4\uffff\1\1\5\uffff\3\1\35\uffff\3\1\6\uffff\1\1\175\uffff"+
            "\1\1\1\uffff\10\1\2\uffff\16\1\1\uffff\1\1\2\uffff\2\1",
            "",
            "\10\1\1\uffff\2\1\14\uffff\5\1\1\47\5\1\1\uffff\1\1\1\uffff"+
            "\2\1\4\uffff\1\1\5\uffff\3\1\35\uffff\3\1\6\uffff\1\1\175\uffff"+
            "\1\1\1\uffff\10\1\2\uffff\16\1\1\uffff\1\1\2\uffff\2\1",
            "\10\1\1\uffff\2\1\14\uffff\5\1\1\uffff\5\1\1\uffff\1\1\1\uffff"+
            "\2\1\4\uffff\1\1\5\uffff\3\1\6\uffff\2\47\25\uffff\3\1\6\uffff"+
            "\1\1\175\uffff\1\1\1\47\10\1\2\uffff\16\1\1\uffff\1\1\2\uffff"+
            "\2\1\1\47",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA206_eot = DFA.unpackEncodedString(DFA206_eotS);
    static final short[] DFA206_eof = DFA.unpackEncodedString(DFA206_eofS);
    static final char[] DFA206_min = DFA.unpackEncodedStringToUnsignedChars(DFA206_minS);
    static final char[] DFA206_max = DFA.unpackEncodedStringToUnsignedChars(DFA206_maxS);
    static final short[] DFA206_accept = DFA.unpackEncodedString(DFA206_acceptS);
    static final short[] DFA206_special = DFA.unpackEncodedString(DFA206_specialS);
    static final short[][] DFA206_transition;

    static {
        int numStates = DFA206_transitionS.length;
        DFA206_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA206_transition[i] = DFA.unpackEncodedString(DFA206_transitionS[i]);
        }
    }

    class DFA206 extends DFA {

        public DFA206(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 206;
            this.eot = DFA206_eot;
            this.eof = DFA206_eof;
            this.min = DFA206_min;
            this.max = DFA206_max;
            this.accept = DFA206_accept;
            this.special = DFA206_special;
            this.transition = DFA206_transition;
        }
        public String getDescription() {
            return "1333:24: (ipi2= keywordAllowedIdent )?";
        }
    }
 

    public static final BitSet FOLLOW_annotationNoEnum_in_startPatternExpressionRule1369 = new BitSet(new long[]{0x0000000000006000L,0x0000000000000000L,0x0000000000000000L,0x4000002480000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_patternExpression_in_startPatternExpressionRule1374 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_startPatternExpressionRule1378 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationEnum_in_startEPLExpressionRule1392 = new BitSet(new long[]{0x0020010004000010L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_eplExpression_in_startEPLExpressionRule1398 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_startEPLExpressionRule1402 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventProperty_in_startEventPropertyRule1428 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_startEventPropertyRule1432 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EMAILAT_in_annotationNoEnum1452 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000080000000L});
    public static final BitSet FOLLOW_classIdentifier_in_annotationNoEnum1454 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_LPAREN_in_annotationNoEnum1458 = new BitSet(new long[]{0x0020010004000010L,0x00000000E0000000L,0x0000000000000000L,0x8530030890000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_elementValuePairsNoEnum_in_annotationNoEnum1462 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_elementValueNoEnum_in_annotationNoEnum1466 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_RPAREN_in_annotationNoEnum1471 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EMAILAT_in_annotationEnum1512 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000080000000L});
    public static final BitSet FOLLOW_classIdentifier_in_annotationEnum1514 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_LPAREN_in_annotationEnum1518 = new BitSet(new long[]{0x0020010004000010L,0x00000000E0000000L,0x0000000000000000L,0xC530030890000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_elementValuePairsEnum_in_annotationEnum1522 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_elementValueEnum_in_annotationEnum1526 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_RPAREN_in_annotationEnum1531 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_elementValuePairEnum_in_elementValuePairsEnum1572 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_COMMA_in_elementValuePairsEnum1575 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_elementValuePairEnum_in_elementValuePairsEnum1578 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_IDENT_in_elementValuePairsNoEnum1601 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_EQUALS_in_elementValuePairsNoEnum1603 = new BitSet(new long[]{0x0020010004000010L,0x00000000E0000000L,0x0000000000000000L,0x8530030010000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_elementValueNoEnum_in_elementValuePairsNoEnum1605 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_elementValuePairEnum1642 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_EQUALS_in_elementValuePairEnum1644 = new BitSet(new long[]{0x0020010004000010L,0x00000000E0000000L,0x0000000000000000L,0xC530030090000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_elementValueEnum_in_elementValuePairEnum1646 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationEnum_in_elementValueNoEnum1677 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_elementValueArrayNoEnum_in_elementValueNoEnum1688 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constant_in_elementValueNoEnum1701 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationEnum_in_elementValueEnum1724 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_elementValueArrayEnum_in_elementValueEnum1735 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constant_in_elementValueEnum1748 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classIdentifier_in_elementValueEnum1756 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCURLY_in_elementValueArrayNoEnum1776 = new BitSet(new long[]{0x0020010004000010L,0x00000000E0000000L,0x0000000000000000L,0x8730030050000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_elementValueNoEnum_in_elementValueArrayNoEnum1779 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000040000000L});
    public static final BitSet FOLLOW_COMMA_in_elementValueArrayNoEnum1782 = new BitSet(new long[]{0x0020010004000010L,0x00000000E0000000L,0x0000000000000000L,0x8530030010000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_elementValueNoEnum_in_elementValueArrayNoEnum1784 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000040000000L});
    public static final BitSet FOLLOW_COMMA_in_elementValueArrayNoEnum1791 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_RCURLY_in_elementValueArrayNoEnum1795 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCURLY_in_elementValueArrayEnum1824 = new BitSet(new long[]{0x0020010004000010L,0x00000000E0000000L,0x0000000000000000L,0xC7300300D0000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_elementValueEnum_in_elementValueArrayEnum1827 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000040000000L});
    public static final BitSet FOLLOW_COMMA_in_elementValueArrayEnum1830 = new BitSet(new long[]{0x0020010004000010L,0x00000000E0000000L,0x0000000000000000L,0xC530030090000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_elementValueEnum_in_elementValueArrayEnum1832 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000040000000L});
    public static final BitSet FOLLOW_COMMA_in_elementValueArrayEnum1839 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_RCURLY_in_elementValueArrayEnum1843 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_selectExpr_in_eplExpression1875 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_createWindowExpr_in_eplExpression1880 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_createVariableExpr_in_eplExpression1885 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_onExpr_in_eplExpression1890 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSERT_in_selectExpr1903 = new BitSet(new long[]{0x0C40000000000000L});
    public static final BitSet FOLLOW_insertIntoExpr_in_selectExpr1906 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_SELECT_in_selectExpr1912 = new BitSet(new long[]{0xFC3C01F40FFE6430L,0x00000000E001D7FFL,0x0000000000000000L,0xD530031490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_selectClause_in_selectExpr1915 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_FROM_in_selectExpr1919 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000003L,0x0000000000000000L,0x4000000080000000L});
    public static final BitSet FOLLOW_fromClause_in_selectExpr1922 = new BitSet(new long[]{0x0082180000008002L,0x0000000100000000L});
    public static final BitSet FOLLOW_WHERE_in_selectExpr1927 = new BitSet(new long[]{0xFC3C01F40FFE6430L,0x00000000E001D7FFL,0x0000000000000000L,0xD530031490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_whereClause_in_selectExpr1930 = new BitSet(new long[]{0x0082180000000002L,0x0000000100000000L});
    public static final BitSet FOLLOW_GROUP_in_selectExpr1937 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_BY_in_selectExpr1940 = new BitSet(new long[]{0xFC3C01F40FFE6430L,0x00000000E001D7FFL,0x0000000000000000L,0xD530031490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_groupByListExpr_in_selectExpr1943 = new BitSet(new long[]{0x0082100000000002L,0x0000000100000000L});
    public static final BitSet FOLLOW_HAVING_in_selectExpr1950 = new BitSet(new long[]{0xFC3C01F40FFE6430L,0x00000000E001D7FFL,0x0000000000000000L,0xD530031490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_havingClause_in_selectExpr1953 = new BitSet(new long[]{0x0082000000000002L,0x0000000100000000L});
    public static final BitSet FOLLOW_OUTPUT_in_selectExpr1960 = new BitSet(new long[]{0x0018400040004000L,0x0000000000011000L});
    public static final BitSet FOLLOW_outputLimit_in_selectExpr1963 = new BitSet(new long[]{0x0080000000000002L,0x0000000100000000L});
    public static final BitSet FOLLOW_ORDER_in_selectExpr1970 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_BY_in_selectExpr1973 = new BitSet(new long[]{0xFC3C01F40FFE6430L,0x00000000E001D7FFL,0x0000000000000000L,0xD530031490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_orderByListExpr_in_selectExpr1976 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L});
    public static final BitSet FOLLOW_ROW_LIMIT_EXPR_in_selectExpr1983 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8430000090000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_rowLimit_in_selectExpr1986 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ON_in_onExpr2001 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L,0x0000000000000000L,0x4000000080000000L});
    public static final BitSet FOLLOW_eventFilterExpression_in_onExpr2004 = new BitSet(new long[]{0x0020000004010000L,0x0000000000002800L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_patternInclusionExpression_in_onExpr2008 = new BitSet(new long[]{0x0020000004010000L,0x0000000000002800L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_AS_in_onExpr2012 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_IDENT_in_onExpr2016 = new BitSet(new long[]{0x0020000004010000L,0x0000000000002800L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_IDENT_in_onExpr2022 = new BitSet(new long[]{0x0020000004010000L,0x0000000000002800L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_onDeleteExpr_in_onExpr2030 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_onSelectExpr_in_onExpr2034 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_onSetExpr_in_onExpr2038 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSERT_in_onSelectExpr2091 = new BitSet(new long[]{0x0C40000000000000L});
    public static final BitSet FOLLOW_insertIntoExpr_in_onSelectExpr2093 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_SELECT_in_onSelectExpr2099 = new BitSet(new long[]{0xFC3C01F40FFE6430L,0x00000000E001D7FFL,0x0000000000000000L,0xD530031490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_selectionList_in_onSelectExpr2101 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_onExprFrom_in_onSelectExpr2105 = new BitSet(new long[]{0x0080180000008002L});
    public static final BitSet FOLLOW_WHERE_in_onSelectExpr2110 = new BitSet(new long[]{0xFC3C01F40FFE6430L,0x00000000E001D7FFL,0x0000000000000000L,0xD530031490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_whereClause_in_onSelectExpr2112 = new BitSet(new long[]{0x0080180000000002L});
    public static final BitSet FOLLOW_GROUP_in_onSelectExpr2121 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_BY_in_onSelectExpr2123 = new BitSet(new long[]{0xFC3C01F40FFE6430L,0x00000000E001D7FFL,0x0000000000000000L,0xD530031490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_groupByListExpr_in_onSelectExpr2125 = new BitSet(new long[]{0x0080100000000002L});
    public static final BitSet FOLLOW_HAVING_in_onSelectExpr2132 = new BitSet(new long[]{0xFC3C01F40FFE6430L,0x00000000E001D7FFL,0x0000000000000000L,0xD530031490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_havingClause_in_onSelectExpr2134 = new BitSet(new long[]{0x0080000000000002L});
    public static final BitSet FOLLOW_ORDER_in_onSelectExpr2141 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_BY_in_onSelectExpr2143 = new BitSet(new long[]{0xFC3C01F40FFE6430L,0x00000000E001D7FFL,0x0000000000000000L,0xD530031490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_orderByListExpr_in_onSelectExpr2145 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DELETE_in_onDeleteExpr2198 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_onExprFrom_in_onDeleteExpr2202 = new BitSet(new long[]{0x0000000000008002L});
    public static final BitSet FOLLOW_WHERE_in_onDeleteExpr2207 = new BitSet(new long[]{0xFC3C01F40FFE6430L,0x00000000E001D7FFL,0x0000000000000000L,0xD530031490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_whereClause_in_onDeleteExpr2209 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SET_in_onSetExpr2249 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_onSetAssignment_in_onSetExpr2251 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_COMMA_in_onSetExpr2254 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_onSetAssignment_in_onSetExpr2256 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_IDENT_in_onSetAssignment2281 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_EQUALS_in_onSetAssignment2283 = new BitSet(new long[]{0xFC3C01F40FFE6430L,0x00000000E001D7FFL,0x0000000000000000L,0xD530031490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expression_in_onSetAssignment2286 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FROM_in_onExprFrom2299 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_IDENT_in_onExprFrom2303 = new BitSet(new long[]{0x0000000000010002L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_AS_in_onExprFrom2306 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_IDENT_in_onExprFrom2310 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_onExprFrom2316 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CREATE_in_createWindowExpr2344 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_WINDOW_in_createWindowExpr2346 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_IDENT_in_createWindowExpr2350 = new BitSet(new long[]{0xC000000004010000L,0x0000000000000000L,0x0000000000000000L,0x4000000680000000L});
    public static final BitSet FOLLOW_DOT_in_createWindowExpr2353 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_viewExpression_in_createWindowExpr2355 = new BitSet(new long[]{0xC000000004010000L,0x0000000000000000L,0x0000000000000000L,0x4000000680000000L});
    public static final BitSet FOLLOW_DOT_in_createWindowExpr2358 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_viewExpression_in_createWindowExpr2360 = new BitSet(new long[]{0xC000000004010000L,0x0000000000000000L,0x0000000000000000L,0x4000000680000000L});
    public static final BitSet FOLLOW_RETAINUNION_in_createWindowExpr2369 = new BitSet(new long[]{0x0000000004010000L,0x0000000000000000L,0x0000000000000000L,0x4000000480000000L});
    public static final BitSet FOLLOW_RETAININTERSECTION_in_createWindowExpr2373 = new BitSet(new long[]{0x0000000004010000L,0x0000000000000000L,0x0000000000000000L,0x4000000480000000L});
    public static final BitSet FOLLOW_AS_in_createWindowExpr2377 = new BitSet(new long[]{0x0000000004000000L,0x0000000000000000L,0x0000000000000000L,0x4000000480000000L});
    public static final BitSet FOLLOW_createWindowExprModelAfter_in_createWindowExpr2392 = new BitSet(new long[]{0x0020000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_createWindowExpr2407 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_createWindowColumnList_in_createWindowExpr2409 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_RPAREN_in_createWindowExpr2411 = new BitSet(new long[]{0x0020000000000002L});
    public static final BitSet FOLLOW_INSERT_in_createWindowExpr2428 = new BitSet(new long[]{0x0000000000008002L});
    public static final BitSet FOLLOW_WHERE_in_createWindowExpr2431 = new BitSet(new long[]{0xFC3C01F40FFE6430L,0x00000000E001D7FFL,0x0000000000000000L,0xD530031490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expression_in_createWindowExpr2433 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SELECT_in_createWindowExprModelAfter2520 = new BitSet(new long[]{0xE03C01F407FE4430L,0x00000000E001D3DFL,0x0000000000000000L,0xC530031090000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_createSelectionList_in_createWindowExprModelAfter2523 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_FROM_in_createWindowExprModelAfter2525 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000080000000L});
    public static final BitSet FOLLOW_classIdentifier_in_createWindowExprModelAfter2530 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CREATE_in_createVariableExpr2543 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_VARIABLE_in_createVariableExpr2545 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_IDENT_in_createVariableExpr2549 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_IDENT_in_createVariableExpr2553 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_EQUALS_in_createVariableExpr2556 = new BitSet(new long[]{0xFC3C01F40FFE6430L,0x00000000E001D7FFL,0x0000000000000000L,0xD530031490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expression_in_createVariableExpr2558 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_createWindowColumnListElement_in_createWindowColumnList2601 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_COMMA_in_createWindowColumnList2604 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_createWindowColumnListElement_in_createWindowColumnList2606 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_IDENT_in_createWindowColumnListElement2636 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_IDENT_in_createWindowColumnListElement2640 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_createSelectionListElement_in_createSelectionList2678 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_COMMA_in_createSelectionList2681 = new BitSet(new long[]{0xE03C01F407FE4430L,0x00000000E001D3DFL,0x0000000000000000L,0xC530031090000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_createSelectionListElement_in_createSelectionList2683 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_STAR_in_createSelectionListElement2712 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventProperty_in_createSelectionListElement2724 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_AS_in_createSelectionListElement2727 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_IDENT_in_createSelectionListElement2731 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constant_in_createSelectionListElement2752 = new BitSet(new long[]{0x0000000000010000L});
    public static final BitSet FOLLOW_AS_in_createSelectionListElement2754 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_IDENT_in_createSelectionListElement2758 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ISTREAM_in_insertIntoExpr2797 = new BitSet(new long[]{0x0040000000000000L});
    public static final BitSet FOLLOW_RSTREAM_in_insertIntoExpr2803 = new BitSet(new long[]{0x0040000000000000L});
    public static final BitSet FOLLOW_INTO_in_insertIntoExpr2807 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_IDENT_in_insertIntoExpr2811 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_insertIntoColumnList_in_insertIntoExpr2814 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_insertIntoColumnList2848 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_IDENT_in_insertIntoColumnList2850 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000840000000L});
    public static final BitSet FOLLOW_COMMA_in_insertIntoColumnList2853 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_IDENT_in_insertIntoColumnList2855 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000840000000L});
    public static final BitSet FOLLOW_RPAREN_in_insertIntoColumnList2859 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_streamExpression_in_fromClause2894 = new BitSet(new long[]{0x000000F800000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_regularJoin_in_fromClause2897 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_outerJoinList_in_fromClause2901 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_regularJoin2915 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000003L,0x0000000000000000L,0x4000000080000000L});
    public static final BitSet FOLLOW_streamExpression_in_regularJoin2918 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_outerJoin_in_outerJoinList2932 = new BitSet(new long[]{0x000000F800000002L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_outerJoin_in_outerJoinList2935 = new BitSet(new long[]{0x000000F800000002L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_LEFT_in_outerJoin2978 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_RIGHT_in_outerJoin2982 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_FULL_in_outerJoin2986 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_OUTER_in_outerJoin2989 = new BitSet(new long[]{0x0000001000000000L});
    public static final BitSet FOLLOW_INNER_in_outerJoin3010 = new BitSet(new long[]{0x0000001000000000L});
    public static final BitSet FOLLOW_JOIN_in_outerJoin3024 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000003L,0x0000000000000000L,0x4000000080000000L});
    public static final BitSet FOLLOW_streamExpression_in_outerJoin3026 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_outerJoinIdent_in_outerJoin3028 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ON_in_outerJoinIdent3093 = new BitSet(new long[]{0xE01C00F403FE4420L,0x000000000001D3DFL,0x0000000000000000L,0x4000000080000000L});
    public static final BitSet FOLLOW_outerJoinIdentPair_in_outerJoinIdent3096 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_AND_EXPR_in_outerJoinIdent3099 = new BitSet(new long[]{0xE01C00F403FE4420L,0x000000000001D3DFL,0x0000000000000000L,0x4000000080000000L});
    public static final BitSet FOLLOW_outerJoinIdentPair_in_outerJoinIdent3102 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_eventProperty_in_outerJoinIdentPair3117 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_EQUALS_in_outerJoinIdentPair3119 = new BitSet(new long[]{0xE01C00F403FE4420L,0x000000000001D3DFL,0x0000000000000000L,0x4000000080000000L});
    public static final BitSet FOLLOW_eventProperty_in_outerJoinIdentPair3122 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_evalOrExpression_in_whereClause3144 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RSTREAM_in_selectClause3180 = new BitSet(new long[]{0xFC3C01F40FFE6430L,0x00000000E001D7FFL,0x0000000000000000L,0xD530031490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_ISTREAM_in_selectClause3186 = new BitSet(new long[]{0xFC3C01F40FFE6430L,0x00000000E001D7FFL,0x0000000000000000L,0xD530031490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_IRSTREAM_in_selectClause3192 = new BitSet(new long[]{0xFC3C01F40FFE6430L,0x00000000E001D7FFL,0x0000000000000000L,0xD530031490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_selectionList_in_selectClause3196 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_selectionListElement_in_selectionList3223 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_COMMA_in_selectionList3226 = new BitSet(new long[]{0xFC3C01F40FFE6430L,0x00000000E001D7FFL,0x0000000000000000L,0xD530031490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_selectionListElement_in_selectionList3229 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_STAR_in_selectionListElement3255 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_streamSelector_in_selectionListElement3271 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_selectionListElement3276 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_AS_in_selectionListElement3279 = new BitSet(new long[]{0xE01C00F403FE4420L,0x000000000001D3DFL,0x0000000000000000L,0x4000000080000000L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_selectionListElement3283 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_streamSelector3339 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_DOT_in_streamSelector3341 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_STAR_in_streamSelector3343 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_AS_in_streamSelector3346 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_IDENT_in_streamSelector3350 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventFilterExpression_in_streamExpression3380 = new BitSet(new long[]{0xE000000000010002L,0x0000000000000000L,0x0000000000000000L,0x0000000280000000L});
    public static final BitSet FOLLOW_patternInclusionExpression_in_streamExpression3384 = new BitSet(new long[]{0xE000000000010002L,0x0000000000000000L,0x0000000000000000L,0x0000000280000000L});
    public static final BitSet FOLLOW_databaseJoinExpression_in_streamExpression3388 = new BitSet(new long[]{0xE000000000010002L,0x0000000000000000L,0x0000000000000000L,0x0000000280000000L});
    public static final BitSet FOLLOW_methodJoinExpression_in_streamExpression3392 = new BitSet(new long[]{0xE000000000010002L,0x0000000000000000L,0x0000000000000000L,0x0000000280000000L});
    public static final BitSet FOLLOW_DOT_in_streamExpression3398 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_viewExpression_in_streamExpression3400 = new BitSet(new long[]{0xE000000000010002L,0x0000000000000000L,0x0000000000000000L,0x0000000280000000L});
    public static final BitSet FOLLOW_DOT_in_streamExpression3403 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_viewExpression_in_streamExpression3405 = new BitSet(new long[]{0xE000000000010002L,0x0000000000000000L,0x0000000000000000L,0x0000000280000000L});
    public static final BitSet FOLLOW_AS_in_streamExpression3412 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_IDENT_in_streamExpression3416 = new BitSet(new long[]{0xE000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_streamExpression3422 = new BitSet(new long[]{0xE000000000000002L});
    public static final BitSet FOLLOW_UNIDIRECTIONAL_in_streamExpression3429 = new BitSet(new long[]{0xC000000000000002L});
    public static final BitSet FOLLOW_RETAINUNION_in_streamExpression3436 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETAININTERSECTION_in_streamExpression3440 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PATTERN_in_patternInclusionExpression3497 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_LBRACK_in_patternInclusionExpression3499 = new BitSet(new long[]{0x0000000000006000L,0x0000000000000000L,0x0000000000000000L,0x4000002480000000L});
    public static final BitSet FOLLOW_patternExpression_in_patternInclusionExpression3501 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_RBRACK_in_patternInclusionExpression3503 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL_in_databaseJoinExpression3536 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_COLON_in_databaseJoinExpression3538 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_IDENT_in_databaseJoinExpression3542 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_LBRACK_in_databaseJoinExpression3544 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000030000000000L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_databaseJoinExpression3549 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_QUOTED_STRING_LITERAL_in_databaseJoinExpression3555 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_METADATASQL_in_databaseJoinExpression3559 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000030000000000L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_databaseJoinExpression3564 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_QUOTED_STRING_LITERAL_in_databaseJoinExpression3570 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_RBRACK_in_databaseJoinExpression3575 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_methodJoinExpression3626 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_COLON_in_methodJoinExpression3628 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000080000000L});
    public static final BitSet FOLLOW_classIdentifier_in_methodJoinExpression3630 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_LPAREN_in_methodJoinExpression3633 = new BitSet(new long[]{0xFC3C01F40FFE6430L,0x00000000E001D7FFL,0x0000000000000000L,0xD530031C90000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expressionList_in_methodJoinExpression3635 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_RPAREN_in_methodJoinExpression3638 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_viewExpression3691 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_COLON_in_viewExpression3693 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_IDENT_in_viewExpression3697 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_LPAREN_in_viewExpression3699 = new BitSet(new long[]{0xFC3C01F40FFE6430L,0x00000000E001D7FFL,0x0000000000000000L,0xD530033C90000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expressionWithTimeList_in_viewExpression3701 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_RPAREN_in_viewExpression3704 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_groupByListExpr3743 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_COMMA_in_groupByListExpr3746 = new BitSet(new long[]{0xFC3C01F40FFE6430L,0x00000000E001D7FFL,0x0000000000000000L,0xD530031490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expression_in_groupByListExpr3748 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_orderByListElement_in_orderByListExpr3783 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_COMMA_in_orderByListExpr3786 = new BitSet(new long[]{0xFC3C01F40FFE6430L,0x00000000E001D7FFL,0x0000000000000000L,0xD530031490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_orderByListElement_in_orderByListExpr3788 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_expression_in_orderByListElement3813 = new BitSet(new long[]{0x0300000000000002L});
    public static final BitSet FOLLOW_ASC_in_orderByListElement3818 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DESC_in_orderByListElement3822 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_evalOrExpression_in_havingClause3860 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALL_in_outputLimit3898 = new BitSet(new long[]{0x0000000040004000L,0x0000000000010000L});
    public static final BitSet FOLLOW_FIRST_in_outputLimit3902 = new BitSet(new long[]{0x0000000040004000L,0x0000000000010000L});
    public static final BitSet FOLLOW_LAST_in_outputLimit3906 = new BitSet(new long[]{0x0000000040004000L,0x0000000000010000L});
    public static final BitSet FOLLOW_SNAPSHOT_in_outputLimit3910 = new BitSet(new long[]{0x0000000040004000L,0x0000000000010000L});
    public static final BitSet FOLLOW_EVERY_EXPR_in_outputLimit3937 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x9430000090000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_timePeriod_in_outputLimit3959 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_outputLimit3968 = new BitSet(new long[]{0x0004000000000000L});
    public static final BitSet FOLLOW_IDENT_in_outputLimit3974 = new BitSet(new long[]{0x0004000000000000L});
    public static final BitSet FOLLOW_EVENTS_in_outputLimit3980 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AT_in_outputLimit4003 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_crontabLimitParameterSet_in_outputLimit4005 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHEN_in_outputLimit4019 = new BitSet(new long[]{0xFC3C01F40FFE6430L,0x00000000E001D7FFL,0x0000000000000000L,0xD530031490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expression_in_outputLimit4021 = new BitSet(new long[]{0x0000000080000002L});
    public static final BitSet FOLLOW_THEN_in_outputLimit4024 = new BitSet(new long[]{0x0020000004010000L,0x0000000000002800L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_onSetExpr_in_outputLimit4026 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberconstant_in_rowLimit4155 = new BitSet(new long[]{0x0000000000000002L,0x0000000200000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_IDENT_in_rowLimit4161 = new BitSet(new long[]{0x0000000000000002L,0x0000000200000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_COMMA_in_rowLimit4168 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8430000090000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_OFFSET_in_rowLimit4174 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8430000090000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_numberconstant_in_rowLimit4180 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_rowLimit4186 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_crontabLimitParameterSet4238 = new BitSet(new long[]{0xFC3C01F40FFE6430L,0x00000000E001D7FFL,0x0000000000000000L,0xD530033490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet4240 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_COMMA_in_crontabLimitParameterSet4242 = new BitSet(new long[]{0xFC3C01F40FFE6430L,0x00000000E001D7FFL,0x0000000000000000L,0xD530033490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet4244 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_COMMA_in_crontabLimitParameterSet4246 = new BitSet(new long[]{0xFC3C01F40FFE6430L,0x00000000E001D7FFL,0x0000000000000000L,0xD530033490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet4248 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_COMMA_in_crontabLimitParameterSet4250 = new BitSet(new long[]{0xFC3C01F40FFE6430L,0x00000000E001D7FFL,0x0000000000000000L,0xD530033490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet4252 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_COMMA_in_crontabLimitParameterSet4254 = new BitSet(new long[]{0xFC3C01F40FFE6430L,0x00000000E001D7FFL,0x0000000000000000L,0xD530033490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet4256 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000840000000L});
    public static final BitSet FOLLOW_COMMA_in_crontabLimitParameterSet4259 = new BitSet(new long[]{0xFC3C01F40FFE6430L,0x00000000E001D7FFL,0x0000000000000000L,0xD530033490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet4261 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_RPAREN_in_crontabLimitParameterSet4265 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHEN_in_whenClause4295 = new BitSet(new long[]{0xFC3C01F40FFE6430L,0x00000000E001D7FFL,0x0000000000000000L,0xD530031490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expression_in_whenClause4298 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_THEN_in_whenClause4300 = new BitSet(new long[]{0xFC3C01F40FFE6430L,0x00000000E001D7FFL,0x0000000000000000L,0xD530031490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expression_in_whenClause4303 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ELSE_in_elseClause4316 = new BitSet(new long[]{0xFC3C01F40FFE6430L,0x00000000E001D7FFL,0x0000000000000000L,0xD530031490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expression_in_elseClause4319 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_caseExpression_in_expression4332 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CASE_in_caseExpression4346 = new BitSet(new long[]{0x0000000040000000L});
    public static final BitSet FOLLOW_whenClause_in_caseExpression4349 = new BitSet(new long[]{0x0000000160000000L});
    public static final BitSet FOLLOW_elseClause_in_caseExpression4352 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_END_in_caseExpression4355 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CASE_in_caseExpression4366 = new BitSet(new long[]{0xFC3C01F40FFE6430L,0x00000000E001D7FFL,0x0000000000000000L,0xD530031490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expression_in_caseExpression4368 = new BitSet(new long[]{0x0000000040000000L});
    public static final BitSet FOLLOW_whenClause_in_caseExpression4370 = new BitSet(new long[]{0x0000000160000000L});
    public static final BitSet FOLLOW_elseClause_in_caseExpression4373 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_END_in_caseExpression4376 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_evalOrExpression_in_caseExpression4400 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_evalAndExpression_in_evalOrExpression4411 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_OR_EXPR_in_evalOrExpression4416 = new BitSet(new long[]{0xFC3C01F40FFE6430L,0x00000000E001D7FFL,0x0000000000000000L,0xD530031490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_evalAndExpression_in_evalOrExpression4418 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_bitWiseExpression_in_evalAndExpression4450 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_AND_EXPR_in_evalAndExpression4455 = new BitSet(new long[]{0xFC3C01F40FFE6430L,0x00000000E001D7FFL,0x0000000000000000L,0xD530031490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_bitWiseExpression_in_evalAndExpression4457 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_negatedExpression_in_bitWiseExpression4489 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x00001C0000000000L});
    public static final BitSet FOLLOW_BAND_in_bitWiseExpression4494 = new BitSet(new long[]{0xFC3C01F40FFE6430L,0x00000000E001D7FFL,0x0000000000000000L,0xD530031490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_BOR_in_bitWiseExpression4497 = new BitSet(new long[]{0xFC3C01F40FFE6430L,0x00000000E001D7FFL,0x0000000000000000L,0xD530031490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_BXOR_in_bitWiseExpression4500 = new BitSet(new long[]{0xFC3C01F40FFE6430L,0x00000000E001D7FFL,0x0000000000000000L,0xD530031490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_negatedExpression_in_bitWiseExpression4504 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x00001C0000000000L});
    public static final BitSet FOLLOW_evalEqualsExpression_in_negatedExpression4519 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_EXPR_in_negatedExpression4525 = new BitSet(new long[]{0xE03C01F407FE4430L,0x00000000E001D7FFL,0x0000000000000000L,0xD530030490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_evalEqualsExpression_in_negatedExpression4528 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_evalRelationalExpression_in_evalEqualsExpression4541 = new BitSet(new long[]{0x0000020000000002L,0x0000000000000000L,0x0000000000000000L,0x0000600100000000L});
    public static final BitSet FOLLOW_EQUALS_in_evalEqualsExpression4554 = new BitSet(new long[]{0xE03DC1F407FE4430L,0x00000000E001D7FFL,0x0000000000000000L,0xD530030490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_IS_in_evalEqualsExpression4572 = new BitSet(new long[]{0xE03DC1F407FE4430L,0x00000000E001D7FFL,0x0000000000000000L,0xD530030490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_IS_in_evalEqualsExpression4586 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_NOT_EXPR_in_evalEqualsExpression4588 = new BitSet(new long[]{0xE03DC1F407FE4430L,0x00000000E001D7FFL,0x0000000000000000L,0xD530030490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_SQL_NE_in_evalEqualsExpression4602 = new BitSet(new long[]{0xE03DC1F407FE4430L,0x00000000E001D7FFL,0x0000000000000000L,0xD530030490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_NOT_EQUAL_in_evalEqualsExpression4616 = new BitSet(new long[]{0xE03DC1F407FE4430L,0x00000000E001D7FFL,0x0000000000000000L,0xD530030490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_evalRelationalExpression_in_evalEqualsExpression4646 = new BitSet(new long[]{0x0000020000000002L,0x0000000000000000L,0x0000000000000000L,0x0000600100000000L});
    public static final BitSet FOLLOW_ANY_in_evalEqualsExpression4663 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_SOME_in_evalEqualsExpression4669 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_ALL_in_evalEqualsExpression4675 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_LPAREN_in_evalEqualsExpression4681 = new BitSet(new long[]{0xFC3C01F40FFE6430L,0x00000000E001D7FFL,0x0000000000000000L,0xD530031C90000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expressionList_in_evalEqualsExpression4683 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_RPAREN_in_evalEqualsExpression4686 = new BitSet(new long[]{0x0000020000000002L,0x0000000000000000L,0x0000000000000000L,0x0000600100000000L});
    public static final BitSet FOLLOW_subSelectGroupExpression_in_evalEqualsExpression4691 = new BitSet(new long[]{0x0000020000000002L,0x0000000000000000L,0x0000000000000000L,0x0000600100000000L});
    public static final BitSet FOLLOW_concatenationExpr_in_evalRelationalExpression4819 = new BitSet(new long[]{0x00000000000023C2L,0x0000000000000000L,0x0000000000000000L,0x0007800000000000L});
    public static final BitSet FOLLOW_LT_in_evalRelationalExpression4851 = new BitSet(new long[]{0xE03DC1F407FE4430L,0x00000000E001D7FFL,0x0000000000000000L,0xD530030490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_GT_in_evalRelationalExpression4855 = new BitSet(new long[]{0xE03DC1F407FE4430L,0x00000000E001D7FFL,0x0000000000000000L,0xD530030490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_LE_in_evalRelationalExpression4859 = new BitSet(new long[]{0xE03DC1F407FE4430L,0x00000000E001D7FFL,0x0000000000000000L,0xD530030490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_GE_in_evalRelationalExpression4863 = new BitSet(new long[]{0xE03DC1F407FE4430L,0x00000000E001D7FFL,0x0000000000000000L,0xD530030490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_concatenationExpr_in_evalRelationalExpression4887 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0007800000000000L});
    public static final BitSet FOLLOW_ANY_in_evalRelationalExpression4904 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_SOME_in_evalRelationalExpression4910 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_ALL_in_evalRelationalExpression4916 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_LPAREN_in_evalRelationalExpression4922 = new BitSet(new long[]{0xFC3C01F40FFE6430L,0x00000000E001D7FFL,0x0000000000000000L,0xD530031C90000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expressionList_in_evalRelationalExpression4924 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_RPAREN_in_evalRelationalExpression4927 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0007800000000000L});
    public static final BitSet FOLLOW_subSelectGroupExpression_in_evalRelationalExpression4932 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0007800000000000L});
    public static final BitSet FOLLOW_NOT_EXPR_in_evalRelationalExpression5028 = new BitSet(new long[]{0x00000000000003C0L});
    public static final BitSet FOLLOW_IN_SET_in_evalRelationalExpression5055 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002400000000L});
    public static final BitSet FOLLOW_LPAREN_in_evalRelationalExpression5067 = new BitSet(new long[]{0xFC3C01F40FFE6430L,0x00000000E001D7FFL,0x0000000000000000L,0xD530031490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_LBRACK_in_evalRelationalExpression5073 = new BitSet(new long[]{0xFC3C01F40FFE6430L,0x00000000E001D7FFL,0x0000000000000000L,0xD530031490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expression_in_evalRelationalExpression5076 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000000C840000000L});
    public static final BitSet FOLLOW_COLON_in_evalRelationalExpression5098 = new BitSet(new long[]{0xFC3C01F40FFE6430L,0x00000000E001D7FFL,0x0000000000000000L,0xD530031490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expression_in_evalRelationalExpression5101 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004800000000L});
    public static final BitSet FOLLOW_COMMA_in_evalRelationalExpression5127 = new BitSet(new long[]{0xFC3C01F40FFE6430L,0x00000000E001D7FFL,0x0000000000000000L,0xD530031490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expression_in_evalRelationalExpression5129 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004840000000L});
    public static final BitSet FOLLOW_RPAREN_in_evalRelationalExpression5155 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RBRACK_in_evalRelationalExpression5161 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IN_SET_in_evalRelationalExpression5284 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_inSubSelectQuery_in_evalRelationalExpression5286 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BETWEEN_in_evalRelationalExpression5332 = new BitSet(new long[]{0xE03C01F407FE4430L,0x00000000E001D7FFL,0x0000000000000000L,0xD530030490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_betweenList_in_evalRelationalExpression5334 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LIKE_in_evalRelationalExpression5384 = new BitSet(new long[]{0xE03C01F407FE4430L,0x00000000E001D7FFL,0x0000000000000000L,0xD530030490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_concatenationExpr_in_evalRelationalExpression5386 = new BitSet(new long[]{0x0000000000000402L});
    public static final BitSet FOLLOW_ESCAPE_in_evalRelationalExpression5389 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000030000000000L});
    public static final BitSet FOLLOW_stringconstant_in_evalRelationalExpression5391 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGEXP_in_evalRelationalExpression5443 = new BitSet(new long[]{0xE03C01F407FE4430L,0x00000000E001D7FFL,0x0000000000000000L,0xD530030490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_concatenationExpr_in_evalRelationalExpression5445 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subQueryExpr_in_inSubSelectQuery5507 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_additiveExpression_in_concatenationExpr5532 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_LOR_in_concatenationExpr5538 = new BitSet(new long[]{0xE03C01F407FE4430L,0x00000000E001D7FFL,0x0000000000000000L,0xD530030490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_additiveExpression_in_concatenationExpr5540 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_LOR_in_concatenationExpr5544 = new BitSet(new long[]{0xE03C01F407FE4430L,0x00000000E001D7FFL,0x0000000000000000L,0xD530030490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_additiveExpression_in_concatenationExpr5546 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_multiplyExpression_in_additiveExpression5587 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0030000000000000L});
    public static final BitSet FOLLOW_PLUS_in_additiveExpression5592 = new BitSet(new long[]{0xE03C01F407FE4430L,0x00000000E001D7FFL,0x0000000000000000L,0xD530030490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_MINUS_in_additiveExpression5595 = new BitSet(new long[]{0xE03C01F407FE4430L,0x00000000E001D7FFL,0x0000000000000000L,0xD530030490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_multiplyExpression_in_additiveExpression5599 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0030000000000000L});
    public static final BitSet FOLLOW_unaryExpression_in_multiplyExpression5613 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x00C0001000000000L});
    public static final BitSet FOLLOW_STAR_in_multiplyExpression5618 = new BitSet(new long[]{0xE03C01F407FE4430L,0x00000000E001D7FFL,0x0000000000000000L,0xD530030490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_DIV_in_multiplyExpression5621 = new BitSet(new long[]{0xE03C01F407FE4430L,0x00000000E001D7FFL,0x0000000000000000L,0xD530030490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_MOD_in_multiplyExpression5624 = new BitSet(new long[]{0xE03C01F407FE4430L,0x00000000E001D7FFL,0x0000000000000000L,0xD530030490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_unaryExpression_in_multiplyExpression5628 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x00C0001000000000L});
    public static final BitSet FOLLOW_MINUS_in_unaryExpression5643 = new BitSet(new long[]{0xE01C00F403FE4420L,0x000000000001D3DFL,0x0000000000000000L,0x4000000080000000L});
    public static final BitSet FOLLOW_eventProperty_in_unaryExpression5645 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constant_in_unaryExpression5658 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_substitution_in_unaryExpression5663 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_unaryExpression5668 = new BitSet(new long[]{0xFC3C01F40FFE6430L,0x00000000E001D7FFL,0x0000000000000000L,0xD530031490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expression_in_unaryExpression5671 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_RPAREN_in_unaryExpression5673 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventPropertyOrLibFunction_in_unaryExpression5679 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_builtinFunc_in_unaryExpression5691 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arrayExpression_in_unaryExpression5697 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subSelectExpression_in_unaryExpression5702 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_existsSubSelectExpression_in_unaryExpression5707 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subQueryExpr_in_subSelectExpression5724 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subQueryExpr_in_subSelectGroupExpression5746 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXISTS_in_existsSubSelectExpression5768 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_subQueryExpr_in_existsSubSelectExpression5770 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_subQueryExpr5803 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_SELECT_in_subQueryExpr5809 = new BitSet(new long[]{0xFC3C01F40FFE6430L,0x00000000E001D7FFL,0x0000000000000000L,0xD530031490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_selectionListElement_in_subQueryExpr5812 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_FROM_in_subQueryExpr5819 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000080000000L});
    public static final BitSet FOLLOW_subSelectFilterExpr_in_subQueryExpr5822 = new BitSet(new long[]{0x0000000000008000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_WHERE_in_subQueryExpr5830 = new BitSet(new long[]{0xFC3C01F40FFE6430L,0x00000000E001D7FFL,0x0000000000000000L,0xD530031490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_whereClause_in_subQueryExpr5833 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_RPAREN_in_subQueryExpr5842 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventFilterExpression_in_subSelectFilterExpr5866 = new BitSet(new long[]{0xC000000000010002L,0x0000000000000000L,0x0000000000000000L,0x0000000280000000L});
    public static final BitSet FOLLOW_DOT_in_subSelectFilterExpr5871 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_viewExpression_in_subSelectFilterExpr5873 = new BitSet(new long[]{0xC000000000010002L,0x0000000000000000L,0x0000000000000000L,0x0000000280000000L});
    public static final BitSet FOLLOW_DOT_in_subSelectFilterExpr5876 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_viewExpression_in_subSelectFilterExpr5878 = new BitSet(new long[]{0xC000000000010002L,0x0000000000000000L,0x0000000000000000L,0x0000000280000000L});
    public static final BitSet FOLLOW_AS_in_subSelectFilterExpr5885 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_IDENT_in_subSelectFilterExpr5889 = new BitSet(new long[]{0xC000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_subSelectFilterExpr5895 = new BitSet(new long[]{0xC000000000000002L});
    public static final BitSet FOLLOW_RETAINUNION_in_subSelectFilterExpr5902 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETAININTERSECTION_in_subSelectFilterExpr5906 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCURLY_in_arrayExpression5946 = new BitSet(new long[]{0xFC3C01F40FFE6430L,0x00000000E001D7FFL,0x0000000000000000L,0xD730031490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expression_in_arrayExpression5949 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000040000000L});
    public static final BitSet FOLLOW_COMMA_in_arrayExpression5952 = new BitSet(new long[]{0xFC3C01F40FFE6430L,0x00000000E001D7FFL,0x0000000000000000L,0xD530031490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expression_in_arrayExpression5954 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000040000000L});
    public static final BitSet FOLLOW_RCURLY_in_arrayExpression5961 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SUM_in_builtinFunc5984 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc5987 = new BitSet(new long[]{0xFC3C61F40FFE6430L,0x00000000E001D7FFL,0x0000000000000000L,0xD530031490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_ALL_in_builtinFunc5991 = new BitSet(new long[]{0xFC3C01F40FFE6430L,0x00000000E001D7FFL,0x0000000000000000L,0xD530031490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc5996 = new BitSet(new long[]{0xFC3C01F40FFE6430L,0x00000000E001D7FFL,0x0000000000000000L,0xD530031490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expression_in_builtinFunc6000 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc6002 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AVG_in_builtinFunc6008 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc6011 = new BitSet(new long[]{0xFC3C61F40FFE6430L,0x00000000E001D7FFL,0x0000000000000000L,0xD530031490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_ALL_in_builtinFunc6015 = new BitSet(new long[]{0xFC3C01F40FFE6430L,0x00000000E001D7FFL,0x0000000000000000L,0xD530031490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc6020 = new BitSet(new long[]{0xFC3C01F40FFE6430L,0x00000000E001D7FFL,0x0000000000000000L,0xD530031490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expression_in_builtinFunc6024 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc6026 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COUNT_in_builtinFunc6032 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc6035 = new BitSet(new long[]{0xFC3C61F40FFE6430L,0x00000000E001D7FFL,0x0000000000000000L,0xD530031490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_ALL_in_builtinFunc6047 = new BitSet(new long[]{0xFC3C01F40FFE6430L,0x00000000E001D7FFL,0x0000000000000000L,0xD530031490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc6052 = new BitSet(new long[]{0xFC3C01F40FFE6430L,0x00000000E001D7FFL,0x0000000000000000L,0xD530031490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expression_in_builtinFunc6056 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_STAR_in_builtinFunc6067 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc6078 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MEDIAN_in_builtinFunc6084 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc6087 = new BitSet(new long[]{0xFC3C61F40FFE6430L,0x00000000E001D7FFL,0x0000000000000000L,0xD530031490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_ALL_in_builtinFunc6091 = new BitSet(new long[]{0xFC3C01F40FFE6430L,0x00000000E001D7FFL,0x0000000000000000L,0xD530031490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc6096 = new BitSet(new long[]{0xFC3C01F40FFE6430L,0x00000000E001D7FFL,0x0000000000000000L,0xD530031490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expression_in_builtinFunc6100 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc6102 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STDDEV_in_builtinFunc6108 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc6111 = new BitSet(new long[]{0xFC3C61F40FFE6430L,0x00000000E001D7FFL,0x0000000000000000L,0xD530031490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_ALL_in_builtinFunc6115 = new BitSet(new long[]{0xFC3C01F40FFE6430L,0x00000000E001D7FFL,0x0000000000000000L,0xD530031490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc6120 = new BitSet(new long[]{0xFC3C01F40FFE6430L,0x00000000E001D7FFL,0x0000000000000000L,0xD530031490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expression_in_builtinFunc6124 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc6126 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AVEDEV_in_builtinFunc6132 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc6135 = new BitSet(new long[]{0xFC3C61F40FFE6430L,0x00000000E001D7FFL,0x0000000000000000L,0xD530031490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_ALL_in_builtinFunc6139 = new BitSet(new long[]{0xFC3C01F40FFE6430L,0x00000000E001D7FFL,0x0000000000000000L,0xD530031490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc6144 = new BitSet(new long[]{0xFC3C01F40FFE6430L,0x00000000E001D7FFL,0x0000000000000000L,0xD530031490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expression_in_builtinFunc6148 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc6150 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COALESCE_in_builtinFunc6156 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc6159 = new BitSet(new long[]{0xFC3C01F40FFE6430L,0x00000000E001D7FFL,0x0000000000000000L,0xD530031490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expression_in_builtinFunc6162 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc6164 = new BitSet(new long[]{0xFC3C01F40FFE6430L,0x00000000E001D7FFL,0x0000000000000000L,0xD530031490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expression_in_builtinFunc6167 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000840000000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc6170 = new BitSet(new long[]{0xFC3C01F40FFE6430L,0x00000000E001D7FFL,0x0000000000000000L,0xD530031490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expression_in_builtinFunc6173 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000840000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc6177 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PREVIOUS_in_builtinFunc6183 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc6186 = new BitSet(new long[]{0xFC3C01F40FFE6430L,0x00000000E001D7FFL,0x0000000000000000L,0xD530031490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expression_in_builtinFunc6189 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc6191 = new BitSet(new long[]{0xE01C00F403FE4420L,0x000000000001D3DFL,0x0000000000000000L,0x4000000080000000L});
    public static final BitSet FOLLOW_eventProperty_in_builtinFunc6194 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc6196 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRIOR_in_builtinFunc6202 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc6205 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_NUM_INT_in_builtinFunc6208 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc6210 = new BitSet(new long[]{0xE01C00F403FE4420L,0x000000000001D3DFL,0x0000000000000000L,0x4000000080000000L});
    public static final BitSet FOLLOW_eventProperty_in_builtinFunc6213 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc6215 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSTANCEOF_in_builtinFunc6225 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc6228 = new BitSet(new long[]{0xFC3C01F40FFE6430L,0x00000000E001D7FFL,0x0000000000000000L,0xD530031490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expression_in_builtinFunc6231 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc6233 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000080000000L});
    public static final BitSet FOLLOW_classIdentifier_in_builtinFunc6236 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000840000000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc6239 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000080000000L});
    public static final BitSet FOLLOW_classIdentifier_in_builtinFunc6242 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000840000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc6246 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CAST_in_builtinFunc6252 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc6255 = new BitSet(new long[]{0xFC3C01F40FFE6430L,0x00000000E001D7FFL,0x0000000000000000L,0xD530031490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expression_in_builtinFunc6258 = new BitSet(new long[]{0x0000000000010000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc6261 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000080000000L});
    public static final BitSet FOLLOW_AS_in_builtinFunc6266 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000080000000L});
    public static final BitSet FOLLOW_classIdentifier_in_builtinFunc6270 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc6272 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXISTS_in_builtinFunc6278 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc6281 = new BitSet(new long[]{0xE01C00F403FE4420L,0x000000000001D3DFL,0x0000000000000000L,0x4000000080000000L});
    public static final BitSet FOLLOW_eventProperty_in_builtinFunc6284 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc6286 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CURRENT_TIMESTAMP_in_builtinFunc6292 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc6296 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc6299 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MAX_in_maxFunc6315 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_MIN_in_maxFunc6320 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_LPAREN_in_maxFunc6324 = new BitSet(new long[]{0xFC3C01F40FFE6430L,0x00000000E001D7FFL,0x0000000000000000L,0xD530031490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expression_in_maxFunc6327 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000840000000L});
    public static final BitSet FOLLOW_COMMA_in_maxFunc6330 = new BitSet(new long[]{0xFC3C01F40FFE6430L,0x00000000E001D7FFL,0x0000000000000000L,0xD530031490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expression_in_maxFunc6333 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000840000000L});
    public static final BitSet FOLLOW_COMMA_in_maxFunc6336 = new BitSet(new long[]{0xFC3C01F40FFE6430L,0x00000000E001D7FFL,0x0000000000000000L,0xD530031490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expression_in_maxFunc6339 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000840000000L});
    public static final BitSet FOLLOW_RPAREN_in_maxFunc6346 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventProperty_in_eventPropertyOrLibFunction6365 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_libFunction_in_eventPropertyOrLibFunction6370 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classIdentifierNonGreedy_in_libFunction6383 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_DOT_in_libFunction6385 = new BitSet(new long[]{0xE01C00F403FE4420L,0x000000000001D3DFL,0x0000000000000000L,0x4000000080000000L});
    public static final BitSet FOLLOW_funcIdent_in_libFunction6389 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_LPAREN_in_libFunction6391 = new BitSet(new long[]{0xFC3C61F40FFE6430L,0x00000000E001D7FFL,0x0000000000000000L,0xD530031C90000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_libFunctionArgs_in_libFunction6394 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_RPAREN_in_libFunction6398 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_funcIdent6428 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MAX_in_funcIdent6435 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MIN_in_funcIdent6447 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALL_in_libFunctionArgs6465 = new BitSet(new long[]{0xFC3C01F40FFE6430L,0x00000000E001D7FFL,0x0000000000000000L,0xD530031490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_DISTINCT_in_libFunctionArgs6470 = new BitSet(new long[]{0xFC3C01F40FFE6430L,0x00000000E001D7FFL,0x0000000000000000L,0xD530031490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expression_in_libFunctionArgs6474 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_COMMA_in_libFunctionArgs6477 = new BitSet(new long[]{0xFC3C01F40FFE6430L,0x00000000E001D7FFL,0x0000000000000000L,0xD530031490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expression_in_libFunctionArgs6480 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_concatenationExpr_in_betweenList6494 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_AND_EXPR_in_betweenList6496 = new BitSet(new long[]{0xE03C01F407FE4430L,0x00000000E001D7FFL,0x0000000000000000L,0xD530030490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_concatenationExpr_in_betweenList6499 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_followedByExpression_in_patternExpression6527 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_orExpression_in_followedByExpression6539 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_FOLLOWED_BY_in_followedByExpression6544 = new BitSet(new long[]{0x0000000000006000L,0x0000000000000000L,0x0000000000000000L,0x4000002480000000L});
    public static final BitSet FOLLOW_orExpression_in_followedByExpression6546 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_andExpression_in_orExpression6585 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_OR_EXPR_in_orExpression6590 = new BitSet(new long[]{0x0000000000006000L,0x0000000000000000L,0x0000000000000000L,0x4000002480000000L});
    public static final BitSet FOLLOW_andExpression_in_orExpression6592 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_matchUntilExpression_in_andExpression6624 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_AND_EXPR_in_andExpression6629 = new BitSet(new long[]{0x0000000000006000L,0x0000000000000000L,0x0000000000000000L,0x4000002480000000L});
    public static final BitSet FOLLOW_matchUntilExpression_in_andExpression6631 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_matchUntilRange_in_matchUntilExpression6666 = new BitSet(new long[]{0x0000000000006000L,0x0000000000000000L,0x0000000000000000L,0x4000002480000000L});
    public static final BitSet FOLLOW_qualifyExpression_in_matchUntilExpression6670 = new BitSet(new long[]{0x0000000000000002L,0x0000000000008000L});
    public static final BitSet FOLLOW_UNTIL_in_matchUntilExpression6675 = new BitSet(new long[]{0x0000000000006000L,0x0000000000000000L,0x0000000000000000L,0x4000002480000000L});
    public static final BitSet FOLLOW_qualifyExpression_in_matchUntilExpression6677 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EVERY_EXPR_in_qualifyExpression6742 = new BitSet(new long[]{0x0000000000006000L,0x0000000000000000L,0x0000000000000000L,0x4000002480000000L});
    public static final BitSet FOLLOW_NOT_EXPR_in_qualifyExpression6748 = new BitSet(new long[]{0x0000000000006000L,0x0000000000000000L,0x0000000000000000L,0x4000002480000000L});
    public static final BitSet FOLLOW_matchUntilRange_in_qualifyExpression6754 = new BitSet(new long[]{0x0000000000006000L,0x0000000000000000L,0x0000000000000000L,0x4000002480000000L});
    public static final BitSet FOLLOW_guardPostFix_in_qualifyExpression6763 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_atomicExpression_in_guardPostFix6844 = new BitSet(new long[]{0x0000000000008002L});
    public static final BitSet FOLLOW_LPAREN_in_guardPostFix6850 = new BitSet(new long[]{0x0000000000006000L,0x0000000000000000L,0x0000000000000000L,0x4000002480000000L});
    public static final BitSet FOLLOW_patternExpression_in_guardPostFix6852 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_RPAREN_in_guardPostFix6854 = new BitSet(new long[]{0x0000000000008002L});
    public static final BitSet FOLLOW_WHERE_in_guardPostFix6860 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_guardExpression_in_guardPostFix6862 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_observerExpression_in_atomicExpression6904 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_patternFilterExpression_in_atomicExpression6908 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_observerExpression6923 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_COLON_in_observerExpression6925 = new BitSet(new long[]{0x0000000000000000L,0x0000000000010000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_IDENT_in_observerExpression6930 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_AT_in_observerExpression6936 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_LPAREN_in_observerExpression6939 = new BitSet(new long[]{0xFC3C01F40FFE6430L,0x00000000E001D7FFL,0x0000000000000000L,0xD530033C90000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expressionWithTimeList_in_observerExpression6941 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_RPAREN_in_observerExpression6944 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_guardExpression6993 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_COLON_in_guardExpression6995 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_IDENT_in_guardExpression6998 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_LPAREN_in_guardExpression7000 = new BitSet(new long[]{0xFC3C01F40FFE6430L,0x00000000E001D7FFL,0x0000000000000000L,0xD530033C90000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expressionWithTimeList_in_guardExpression7004 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_RPAREN_in_guardExpression7008 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACK_in_matchUntilRange7022 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000210000000L});
    public static final BitSet FOLLOW_NUM_INT_in_matchUntilRange7031 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000000C200000000L});
    public static final BitSet FOLLOW_DOT_in_matchUntilRange7039 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_DOT_in_matchUntilRange7041 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400004000000000L});
    public static final BitSet FOLLOW_NUM_INT_in_matchUntilRange7045 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_COLON_in_matchUntilRange7069 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_NUM_INT_in_matchUntilRange7073 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_NUM_DOUBLE_in_matchUntilRange7095 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004210000000L});
    public static final BitSet FOLLOW_DOT_in_matchUntilRange7127 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400004000000000L});
    public static final BitSet FOLLOW_NUM_INT_in_matchUntilRange7131 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_NUM_DOUBLE_in_matchUntilRange7191 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_DOT_in_matchUntilRange7228 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_DOT_in_matchUntilRange7230 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_NUM_INT_in_matchUntilRange7234 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_DOT_in_matchUntilRange7243 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_NUM_DOUBLE_in_matchUntilRange7247 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_RBRACK_in_matchUntilRange7258 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_eventFilterExpression7443 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_EQUALS_in_eventFilterExpression7445 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000080000000L});
    public static final BitSet FOLLOW_classIdentifier_in_eventFilterExpression7454 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000002400000000L});
    public static final BitSet FOLLOW_LPAREN_in_eventFilterExpression7465 = new BitSet(new long[]{0xFC3C01F40FFE6430L,0x00000000E001D7FFL,0x0000000000000000L,0xD530031C90000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expressionList_in_eventFilterExpression7467 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_RPAREN_in_eventFilterExpression7470 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_propertyExpression_in_eventFilterExpression7482 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyExpressionAtomic_in_propertyExpression7527 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_propertyExpressionAtomic_in_propertyExpression7530 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_LBRACK_in_propertyExpressionAtomic7560 = new BitSet(new long[]{0xE01C00F407FE4420L,0x000000000001D3DFL,0x0000000000000000L,0x4000000080000000L});
    public static final BitSet FOLLOW_SELECT_in_propertyExpressionAtomic7563 = new BitSet(new long[]{0xFC3C01F40FFE6430L,0x00000000E001D7FFL,0x0000000000000000L,0xD530031490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_propertySelectionList_in_propertyExpressionAtomic7565 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_FROM_in_propertyExpressionAtomic7567 = new BitSet(new long[]{0xE01C00F403FE4420L,0x000000000001D3DFL,0x0000000000000000L,0x4000000080000000L});
    public static final BitSet FOLLOW_eventProperty_in_propertyExpressionAtomic7571 = new BitSet(new long[]{0x0000000000018000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_AS_in_propertyExpressionAtomic7574 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_IDENT_in_propertyExpressionAtomic7576 = new BitSet(new long[]{0x0000000000008000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_WHERE_in_propertyExpressionAtomic7581 = new BitSet(new long[]{0xFC3C01F40FFE6430L,0x00000000E001D7FFL,0x0000000000000000L,0xD530031490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expression_in_propertyExpressionAtomic7583 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_RBRACK_in_propertyExpressionAtomic7587 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertySelectionListElement_in_propertySelectionList7637 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_COMMA_in_propertySelectionList7640 = new BitSet(new long[]{0xFC3C01F40FFE6430L,0x00000000E001D7FFL,0x0000000000000000L,0xD530031490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_propertySelectionListElement_in_propertySelectionList7643 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_STAR_in_propertySelectionListElement7669 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyStreamSelector_in_propertySelectionListElement7685 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_propertySelectionListElement7690 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_AS_in_propertySelectionListElement7693 = new BitSet(new long[]{0xE01C00F403FE4420L,0x000000000001D3DFL,0x0000000000000000L,0x4000000080000000L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_propertySelectionListElement7697 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_propertyStreamSelector7741 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_DOT_in_propertyStreamSelector7743 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_STAR_in_propertyStreamSelector7745 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_AS_in_propertyStreamSelector7748 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_IDENT_in_propertyStreamSelector7752 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_patternFilterExpression7799 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_EQUALS_in_patternFilterExpression7801 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000080000000L});
    public static final BitSet FOLLOW_classIdentifier_in_patternFilterExpression7810 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000002400000000L});
    public static final BitSet FOLLOW_LPAREN_in_patternFilterExpression7821 = new BitSet(new long[]{0xFC3C01F40FFE6430L,0x00000000E001D7FFL,0x0000000000000000L,0xD530031C90000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expressionList_in_patternFilterExpression7823 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_RPAREN_in_patternFilterExpression7826 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_propertyExpression_in_patternFilterExpression7838 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_escapableIdent_in_classIdentifier7888 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_DOT_in_classIdentifier7907 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000080000000L});
    public static final BitSet FOLLOW_escapableIdent_in_classIdentifier7911 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_escapableIdent_in_classIdentifierNonGreedy7956 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_DOT_in_classIdentifierNonGreedy7991 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000080000000L});
    public static final BitSet FOLLOW_escapableIdent_in_classIdentifierNonGreedy7995 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_expression_in_expressionList8037 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_COMMA_in_expressionList8040 = new BitSet(new long[]{0xFC3C01F40FFE6430L,0x00000000E001D7FFL,0x0000000000000000L,0xD530031490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expression_in_expressionList8043 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_expressionWithTime_in_expressionWithTimeList8071 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_COMMA_in_expressionWithTimeList8074 = new BitSet(new long[]{0xFC3C01F40FFE6430L,0x00000000E001D7FFL,0x0000000000000000L,0xD530033490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expressionWithTime_in_expressionWithTimeList8077 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_lastOperand_in_expressionWithTime8103 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastWeekdayOperand_in_expressionWithTime8114 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_timePeriod_in_expressionWithTime8125 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expressionQualifyable_in_expressionWithTime8136 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rangeOperand_in_expressionWithTime8147 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_frequencyOperand_in_expressionWithTime8159 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastOperator_in_expressionWithTime8170 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_weekDayOperator_in_expressionWithTime8182 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numericParameterList_in_expressionWithTime8194 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberSetStar_in_expressionWithTime8199 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_expressionQualifyable8210 = new BitSet(new long[]{0x0300000000000002L,0x0000000003800000L});
    public static final BitSet FOLLOW_ASC_in_expressionQualifyable8215 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DESC_in_expressionQualifyable8219 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_SECONDS_in_expressionQualifyable8223 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_SECOND_in_expressionQualifyable8227 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_SEC_in_expressionQualifyable8231 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_numberSetStar8288 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LW_in_lastWeekdayOperand8308 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LAST_in_lastOperand8321 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_frequencyOperand8333 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_DIV_in_frequencyOperand8335 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x9430000090000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_number_in_frequencyOperand8338 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_frequencyOperand8342 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_substitution_in_frequencyOperand8344 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_rangeOperand8393 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_IDENT_in_rangeOperand8397 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_substitution_in_rangeOperand8399 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_COLON_in_rangeOperand8402 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x9430000090000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_number_in_rangeOperand8405 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_rangeOperand8409 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_substitution_in_rangeOperand8411 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_lastOperator8525 = new BitSet(new long[]{0x0010000000000000L});
    public static final BitSet FOLLOW_IDENT_in_lastOperator8529 = new BitSet(new long[]{0x0010000000000000L});
    public static final BitSet FOLLOW_substitution_in_lastOperator8531 = new BitSet(new long[]{0x0010000000000000L});
    public static final BitSet FOLLOW_LAST_in_lastOperator8534 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_weekDayOperator8582 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_IDENT_in_weekDayOperator8586 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_substitution_in_weekDayOperator8588 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_WEEKDAY_in_weekDayOperator8591 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACK_in_numericParameterList8638 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x9430001090000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_numericListParameter_in_numericParameterList8640 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004040000000L});
    public static final BitSet FOLLOW_COMMA_in_numericParameterList8643 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x9430001090000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_numericListParameter_in_numericParameterList8645 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004040000000L});
    public static final BitSet FOLLOW_RBRACK_in_numericParameterList8649 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rangeOperand_in_numericListParameter8671 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_frequencyOperand_in_numericListParameter8677 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberconstant_in_numericListParameter8682 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventPropertyAtomic_in_eventProperty8698 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_DOT_in_eventProperty8701 = new BitSet(new long[]{0xE01C00F403FE4420L,0x000000000001D3DFL,0x0000000000000000L,0x4000000080000000L});
    public static final BitSet FOLLOW_eventPropertyAtomic_in_eventProperty8703 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_eventPropertyIdent_in_eventPropertyAtomic8729 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x1000002400000000L});
    public static final BitSet FOLLOW_LBRACK_in_eventPropertyAtomic8738 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_NUM_INT_in_eventPropertyAtomic8742 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_RBRACK_in_eventPropertyAtomic8744 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_QUESTION_in_eventPropertyAtomic8749 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_eventPropertyAtomic8763 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000030000000000L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_eventPropertyAtomic8768 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_QUOTED_STRING_LITERAL_in_eventPropertyAtomic8774 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_RPAREN_in_eventPropertyAtomic8777 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_QUESTION_in_eventPropertyAtomic8782 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUESTION_in_eventPropertyAtomic8796 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_eventPropertyIdent8919 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_ESCAPECHAR_in_eventPropertyIdent8931 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_DOT_in_eventPropertyIdent8933 = new BitSet(new long[]{0xE01C00F403FE4422L,0x000000000001D3DFL,0x0000000000000000L,0x6000000080000000L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_eventPropertyIdent8937 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_IDENT_in_keywordAllowedIdent8976 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TICKED_STRING_LITERAL_in_keywordAllowedIdent8985 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AT_in_keywordAllowedIdent8992 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COUNT_in_keywordAllowedIdent8999 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ESCAPE_in_keywordAllowedIdent9006 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EVERY_EXPR_in_keywordAllowedIdent9017 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SUM_in_keywordAllowedIdent9024 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AVG_in_keywordAllowedIdent9031 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MAX_in_keywordAllowedIdent9038 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MIN_in_keywordAllowedIdent9045 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COALESCE_in_keywordAllowedIdent9052 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MEDIAN_in_keywordAllowedIdent9059 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STDDEV_in_keywordAllowedIdent9066 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AVEDEV_in_keywordAllowedIdent9073 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EVENTS_in_keywordAllowedIdent9080 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FIRST_in_keywordAllowedIdent9087 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LAST_in_keywordAllowedIdent9094 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNIDIRECTIONAL_in_keywordAllowedIdent9101 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETAINUNION_in_keywordAllowedIdent9108 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETAININTERSECTION_in_keywordAllowedIdent9115 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNTIL_in_keywordAllowedIdent9122 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PATTERN_in_keywordAllowedIdent9129 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL_in_keywordAllowedIdent9136 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_METADATASQL_in_keywordAllowedIdent9143 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PREVIOUS_in_keywordAllowedIdent9150 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRIOR_in_keywordAllowedIdent9157 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WEEKDAY_in_keywordAllowedIdent9164 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LW_in_keywordAllowedIdent9171 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSTANCEOF_in_keywordAllowedIdent9178 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CAST_in_keywordAllowedIdent9185 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SNAPSHOT_in_keywordAllowedIdent9192 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VARIABLE_in_keywordAllowedIdent9199 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WINDOW_in_keywordAllowedIdent9208 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_in_keywordAllowedIdent9215 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RIGHT_in_keywordAllowedIdent9222 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OUTER_in_keywordAllowedIdent9229 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FULL_in_keywordAllowedIdent9236 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_JOIN_in_keywordAllowedIdent9243 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_escapableIdent9264 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TICKED_STRING_LITERAL_in_escapableIdent9273 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dayPart_in_timePeriod9296 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x9430000090000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_hourPart_in_timePeriod9298 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x9430000090000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_minutePart_in_timePeriod9301 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x9430000090000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_secondPart_in_timePeriod9304 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x9430000090000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod9307 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_hourPart_in_timePeriod9313 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x9430000090000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_minutePart_in_timePeriod9315 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x9430000090000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_secondPart_in_timePeriod9318 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x9430000090000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod9321 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_minutePart_in_timePeriod9327 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x9430000090000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_secondPart_in_timePeriod9329 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x9430000090000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod9332 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_secondPart_in_timePeriod9338 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x9430000090000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod9340 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod9346 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_dayPart9384 = new BitSet(new long[]{0x0000000000000000L,0x0000000000060000L});
    public static final BitSet FOLLOW_IDENT_in_dayPart9388 = new BitSet(new long[]{0x0000000000000000L,0x0000000000060000L});
    public static final BitSet FOLLOW_substitution_in_dayPart9390 = new BitSet(new long[]{0x0000000000000000L,0x0000000000060000L});
    public static final BitSet FOLLOW_TIMEPERIOD_DAYS_in_dayPart9394 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_DAY_in_dayPart9398 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_hourPart9447 = new BitSet(new long[]{0x0000000000000000L,0x0000000000180000L});
    public static final BitSet FOLLOW_IDENT_in_hourPart9451 = new BitSet(new long[]{0x0000000000000000L,0x0000000000180000L});
    public static final BitSet FOLLOW_substitution_in_hourPart9453 = new BitSet(new long[]{0x0000000000000000L,0x0000000000180000L});
    public static final BitSet FOLLOW_TIMEPERIOD_HOURS_in_hourPart9457 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_HOUR_in_hourPart9461 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_minutePart9510 = new BitSet(new long[]{0x0000000000100000L,0x0000000000600000L});
    public static final BitSet FOLLOW_IDENT_in_minutePart9514 = new BitSet(new long[]{0x0000000000100000L,0x0000000000600000L});
    public static final BitSet FOLLOW_substitution_in_minutePart9516 = new BitSet(new long[]{0x0000000000100000L,0x0000000000600000L});
    public static final BitSet FOLLOW_TIMEPERIOD_MINUTES_in_minutePart9520 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_MINUTE_in_minutePart9524 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MIN_in_minutePart9528 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_secondPart9578 = new BitSet(new long[]{0x0000000000000000L,0x0000000003800000L});
    public static final BitSet FOLLOW_IDENT_in_secondPart9582 = new BitSet(new long[]{0x0000000000000000L,0x0000000003800000L});
    public static final BitSet FOLLOW_substitution_in_secondPart9584 = new BitSet(new long[]{0x0000000000000000L,0x0000000003800000L});
    public static final BitSet FOLLOW_TIMEPERIOD_SECONDS_in_secondPart9588 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_SECOND_in_secondPart9592 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_SEC_in_secondPart9596 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_millisecondPart9646 = new BitSet(new long[]{0x0000000000000000L,0x000000001C000000L});
    public static final BitSet FOLLOW_IDENT_in_millisecondPart9650 = new BitSet(new long[]{0x0000000000000000L,0x000000001C000000L});
    public static final BitSet FOLLOW_substitution_in_millisecondPart9652 = new BitSet(new long[]{0x0000000000000000L,0x000000001C000000L});
    public static final BitSet FOLLOW_TIMEPERIOD_MILLISECONDS_in_millisecondPart9656 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_MILLISECOND_in_millisecondPart9660 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_MILLISEC_in_millisecondPart9664 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUM_INT_in_number9719 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUM_LONG_in_number9736 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUM_FLOAT_in_number9753 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUM_DOUBLE_in_number9770 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUESTION_in_substitution9791 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberconstant_in_constant9810 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stringconstant_in_constant9817 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BOOLEAN_TRUE_in_constant9830 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BOOLEAN_FALSE_in_constant9850 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VALUE_NULL_in_constant9870 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUS_in_numberconstant9892 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8430000010000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_PLUS_in_numberconstant9898 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8430000010000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_number_in_numberconstant9902 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_stringconstant9931 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUOTED_STRING_LITERAL_in_stringconstant9947 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_streamSelector_in_synpred1_EsperEPL2Grammar3266 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_timePeriod_in_synpred2_EsperEPL2Grammar3954 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_builtinFunc_in_synpred3_EsperEPL2Grammar5685 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventProperty_in_synpred4_EsperEPL2Grammar6360 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyStreamSelector_in_synpred5_EsperEPL2Grammar7680 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastOperand_in_synpred6_EsperEPL2Grammar8098 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastWeekdayOperand_in_synpred7_EsperEPL2Grammar8109 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_timePeriod_in_synpred8_EsperEPL2Grammar8120 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expressionQualifyable_in_synpred9_EsperEPL2Grammar8131 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rangeOperand_in_synpred10_EsperEPL2Grammar8142 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_frequencyOperand_in_synpred11_EsperEPL2Grammar8154 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastOperator_in_synpred12_EsperEPL2Grammar8165 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_weekDayOperator_in_synpred13_EsperEPL2Grammar8176 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numericParameterList_in_synpred14_EsperEPL2Grammar8189 = new BitSet(new long[]{0x0000000000000002L});

}