// $ANTLR 3.1.1 EsperEPL2Grammar.g 2008-12-02 20:45:04

  package com.espertech.esper.epl.generated;


import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.tree.*;

public class EsperEPL2GrammarParser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "CREATE", "WINDOW", "IN_SET", "BETWEEN", "LIKE", "REGEXP", "ESCAPE", "OR_EXPR", "AND_EXPR", "NOT_EXPR", "EVERY_EXPR", "WHERE", "AS", "SUM", "AVG", "MAX", "MIN", "COALESCE", "MEDIAN", "STDDEV", "AVEDEV", "COUNT", "SELECT", "CASE", "CASE2", "ELSE", "WHEN", "THEN", "END", "FROM", "OUTER", "INNER", "JOIN", "LEFT", "RIGHT", "FULL", "ON", "IS", "BY", "GROUP", "HAVING", "DISTINCT", "ALL", "OUTPUT", "EVENTS", "FIRST", "LAST", "INSERT", "INTO", "ORDER", "ASC", "DESC", "RSTREAM", "ISTREAM", "IRSTREAM", "UNIDIRECTIONAL", "RETAINUNION", "RETAININTERSECTION", "PATTERN", "SQL", "METADATASQL", "PREVIOUS", "PRIOR", "EXISTS", "WEEKDAY", "LW", "INSTANCEOF", "CAST", "CURRENT_TIMESTAMP", "DELETE", "SNAPSHOT", "SET", "VARIABLE", "UNTIL", "AT", "TIMEPERIOD_DAY", "TIMEPERIOD_DAYS", "TIMEPERIOD_HOUR", "TIMEPERIOD_HOURS", "TIMEPERIOD_MINUTE", "TIMEPERIOD_MINUTES", "TIMEPERIOD_SEC", "TIMEPERIOD_SECOND", "TIMEPERIOD_SECONDS", "TIMEPERIOD_MILLISEC", "TIMEPERIOD_MILLISECOND", "TIMEPERIOD_MILLISECONDS", "BOOLEAN_TRUE", "BOOLEAN_FALSE", "VALUE_NULL", "ROW_LIMIT_EXPR", "OFFSET", "NUMERIC_PARAM_RANGE", "NUMERIC_PARAM_LIST", "NUMERIC_PARAM_FREQUENCY", "OBJECT_PARAM_ORDERED_EXPR", "FOLLOWED_BY_EXPR", "ARRAY_PARAM_LIST", "EVENT_FILTER_EXPR", "EVENT_FILTER_IDENT", "EVENT_FILTER_PARAM", "EVENT_FILTER_RANGE", "EVENT_FILTER_NOT_RANGE", "EVENT_FILTER_IN", "EVENT_FILTER_NOT_IN", "EVENT_FILTER_BETWEEN", "EVENT_FILTER_NOT_BETWEEN", "CLASS_IDENT", "GUARD_EXPR", "OBSERVER_EXPR", "VIEW_EXPR", "PATTERN_INCL_EXPR", "DATABASE_JOIN_EXPR", "WHERE_EXPR", "HAVING_EXPR", "EVAL_BITWISE_EXPR", "EVAL_AND_EXPR", "EVAL_OR_EXPR", "EVAL_EQUALS_EXPR", "EVAL_NOTEQUALS_EXPR", "EVAL_IDENT", "SELECTION_EXPR", "SELECTION_ELEMENT_EXPR", "SELECTION_STREAM", "STREAM_EXPR", "OUTERJOIN_EXPR", "INNERJOIN_EXPR", "LEFT_OUTERJOIN_EXPR", "RIGHT_OUTERJOIN_EXPR", "FULL_OUTERJOIN_EXPR", "GROUP_BY_EXPR", "ORDER_BY_EXPR", "ORDER_ELEMENT_EXPR", "EVENT_PROP_EXPR", "EVENT_PROP_SIMPLE", "EVENT_PROP_MAPPED", "EVENT_PROP_INDEXED", "EVENT_PROP_DYNAMIC_SIMPLE", "EVENT_PROP_DYNAMIC_INDEXED", "EVENT_PROP_DYNAMIC_MAPPED", "EVENT_LIMIT_EXPR", "TIMEPERIOD_LIMIT_EXPR", "CRONTAB_LIMIT_EXPR", "CRONTAB_LIMIT_EXPR_PARAM", "WHEN_LIMIT_EXPR", "INSERTINTO_EXPR", "INSERTINTO_EXPRCOL", "CONCAT", "LIB_FUNCTION", "UNARY_MINUS", "TIME_PERIOD", "ARRAY_EXPR", "DAY_PART", "HOUR_PART", "MINUTE_PART", "SECOND_PART", "MILLISECOND_PART", "NOT_IN_SET", "NOT_BETWEEN", "NOT_LIKE", "NOT_REGEXP", "DBSELECT_EXPR", "DBFROM_CLAUSE", "DBWHERE_CLAUSE", "WILDCARD_SELECT", "INSERTINTO_STREAM_NAME", "IN_RANGE", "NOT_IN_RANGE", "SUBSELECT_EXPR", "EXISTS_SUBSELECT_EXPR", "IN_SUBSELECT_EXPR", "NOT_IN_SUBSELECT_EXPR", "IN_SUBSELECT_QUERY_EXPR", "LAST_OPERATOR", "WEEKDAY_OPERATOR", "SUBSTITUTION", "CAST_EXPR", "CREATE_WINDOW_EXPR", "CREATE_WINDOW_SELECT_EXPR", "ON_EXPR", "ON_DELETE_EXPR", "ON_SELECT_EXPR", "ON_EXPR_FROM", "ON_SET_EXPR", "CREATE_VARIABLE_EXPR", "METHOD_JOIN_EXPR", "MATCH_UNTIL_EXPR", "MATCH_UNTIL_RANGE_HALFOPEN", "MATCH_UNTIL_RANGE_HALFCLOSED", "MATCH_UNTIL_RANGE_CLOSED", "MATCH_UNTIL_RANGE_BOUNDED", "CREATE_WINDOW_COL_TYPE_LIST", "CREATE_WINDOW_COL_TYPE", "NUMBERSETSTAR", "INT_TYPE", "LONG_TYPE", "FLOAT_TYPE", "DOUBLE_TYPE", "STRING_TYPE", "BOOL_TYPE", "NULL_TYPE", "NUM_DOUBLE", "EPL_EXPR", "IDENT", "COMMA", "EQUALS", "DOT", "LPAREN", "RPAREN", "STAR", "LBRACK", "RBRACK", "COLON", "STRING_LITERAL", "QUOTED_STRING_LITERAL", "BAND", "BOR", "BXOR", "SQL_NE", "NOT_EQUAL", "LT", "GT", "LE", "GE", "LOR", "PLUS", "MINUS", "DIV", "MOD", "LCURLY", "RCURLY", "NUM_INT", "FOLLOWED_BY", "QUESTION", "ESCAPECHAR", "NUM_LONG", "NUM_FLOAT", "EQUAL", "LNOT", "BNOT", "DIV_ASSIGN", "PLUS_ASSIGN", "INC", "MINUS_ASSIGN", "DEC", "STAR_ASSIGN", "MOD_ASSIGN", "SR", "SR_ASSIGN", "BSR", "BSR_ASSIGN", "SL", "SL_ASSIGN", "BXOR_ASSIGN", "BOR_ASSIGN", "BAND_ASSIGN", "LAND", "SEMI", "EMAILAT", "WS", "SL_COMMENT", "ML_COMMENT", "EscapeSequence", "UnicodeEscape", "OctalEscape", "HexDigit", "EXPONENT", "FLOAT_SUFFIX"
    };
    public static final int CRONTAB_LIMIT_EXPR=146;
    public static final int FLOAT_SUFFIX=271;
    public static final int STAR=213;
    public static final int NUMERIC_PARAM_LIST=97;
    public static final int MOD=232;
    public static final int ISTREAM=57;
    public static final int OUTERJOIN_EXPR=129;
    public static final int BSR=253;
    public static final int EOF=-1;
    public static final int LIB_FUNCTION=152;
    public static final int TIMEPERIOD_MILLISECONDS=90;
    public static final int FULL_OUTERJOIN_EXPR=133;
    public static final int INC=246;
    public static final int LNOT=242;
    public static final int RPAREN=212;
    public static final int CREATE=4;
    public static final int STRING_LITERAL=217;
    public static final int BSR_ASSIGN=254;
    public static final int STREAM_EXPR=128;
    public static final int CAST_EXPR=180;
    public static final int TIMEPERIOD_SECONDS=87;
    public static final int NOT_EQUAL=223;
    public static final int METADATASQL=64;
    public static final int REGEXP=9;
    public static final int FOLLOWED_BY_EXPR=100;
    public static final int FOLLOWED_BY=236;
    public static final int HOUR_PART=157;
    public static final int RBRACK=215;
    public static final int MATCH_UNTIL_RANGE_CLOSED=193;
    public static final int GE=227;
    public static final int METHOD_JOIN_EXPR=189;
    public static final int ASC=54;
    public static final int IN_SET=6;
    public static final int EVENT_FILTER_EXPR=102;
    public static final int MINUS_ASSIGN=247;
    public static final int ELSE=29;
    public static final int EVENT_FILTER_NOT_IN=108;
    public static final int NUM_DOUBLE=205;
    public static final int INSERTINTO_STREAM_NAME=169;
    public static final int LCURLY=233;
    public static final int TIMEPERIOD_MILLISEC=88;
    public static final int UNARY_MINUS=153;
    public static final int RETAINUNION=60;
    public static final int DBWHERE_CLAUSE=167;
    public static final int MEDIAN=22;
    public static final int EVENTS=48;
    public static final int AND_EXPR=12;
    public static final int GROUP=43;
    public static final int EVENT_FILTER_NOT_RANGE=106;
    public static final int WS=263;
    public static final int EMAILAT=262;
    public static final int ESCAPECHAR=238;
    public static final int SL_COMMENT=264;
    public static final int NULL_TYPE=204;
    public static final int MATCH_UNTIL_RANGE_HALFOPEN=191;
    public static final int GT=225;
    public static final int BNOT=243;
    public static final int WHERE_EXPR=117;
    public static final int END=32;
    public static final int LAND=260;
    public static final int INNERJOIN_EXPR=130;
    public static final int NOT_REGEXP=164;
    public static final int MATCH_UNTIL_EXPR=190;
    public static final int EVENT_PROP_EXPR=137;
    public static final int LBRACK=214;
    public static final int VIEW_EXPR=114;
    public static final int LONG_TYPE=199;
    public static final int TIMEPERIOD_SEC=85;
    public static final int ON_SELECT_EXPR=185;
    public static final int MINUTE_PART=158;
    public static final int SQL_NE=222;
    public static final int SUM=17;
    public static final int HexDigit=269;
    public static final int LPAREN=211;
    public static final int AT=78;
    public static final int IN_SUBSELECT_EXPR=174;
    public static final int AS=16;
    public static final int BOOLEAN_TRUE=91;
    public static final int OR_EXPR=11;
    public static final int THEN=31;
    public static final int NOT_IN_RANGE=171;
    public static final int OFFSET=95;
    public static final int AVG=18;
    public static final int LEFT=37;
    public static final int PREVIOUS=65;
    public static final int SECOND_PART=159;
    public static final int IDENT=207;
    public static final int DATABASE_JOIN_EXPR=116;
    public static final int PLUS=229;
    public static final int BXOR=221;
    public static final int CASE2=28;
    public static final int TIMEPERIOD_DAY=79;
    public static final int EXISTS=67;
    public static final int EVENT_PROP_INDEXED=140;
    public static final int TIMEPERIOD_MILLISECOND=89;
    public static final int EVAL_NOTEQUALS_EXPR=123;
    public static final int MATCH_UNTIL_RANGE_HALFCLOSED=192;
    public static final int CREATE_VARIABLE_EXPR=188;
    public static final int CREATE_WINDOW_COL_TYPE=196;
    public static final int LIKE=8;
    public static final int OUTER=34;
    public static final int BY=42;
    public static final int ARRAY_PARAM_LIST=101;
    public static final int RIGHT_OUTERJOIN_EXPR=132;
    public static final int NUMBERSETSTAR=197;
    public static final int LAST_OPERATOR=177;
    public static final int EVAL_AND_EXPR=120;
    public static final int LEFT_OUTERJOIN_EXPR=131;
    public static final int EPL_EXPR=206;
    public static final int GROUP_BY_EXPR=134;
    public static final int SET=75;
    public static final int RIGHT=38;
    public static final int HAVING=44;
    public static final int INSTANCEOF=70;
    public static final int MIN=20;
    public static final int EVENT_PROP_SIMPLE=138;
    public static final int MINUS=230;
    public static final int SEMI=261;
    public static final int STAR_ASSIGN=249;
    public static final int COLON=216;
    public static final int BAND_ASSIGN=259;
    public static final int CRONTAB_LIMIT_EXPR_PARAM=147;
    public static final int VALUE_NULL=93;
    public static final int NOT_IN_SET=161;
    public static final int EVENT_PROP_DYNAMIC_SIMPLE=141;
    public static final int SL=255;
    public static final int WHEN=30;
    public static final int NOT_IN_SUBSELECT_EXPR=175;
    public static final int GUARD_EXPR=112;
    public static final int SR=251;
    public static final int RCURLY=234;
    public static final int PLUS_ASSIGN=245;
    public static final int DAY_PART=156;
    public static final int EXISTS_SUBSELECT_EXPR=173;
    public static final int EVENT_FILTER_IN=107;
    public static final int DIV=231;
    public static final int OBJECT_PARAM_ORDERED_EXPR=99;
    public static final int OctalEscape=268;
    public static final int BETWEEN=7;
    public static final int MILLISECOND_PART=160;
    public static final int PRIOR=66;
    public static final int FIRST=49;
    public static final int ROW_LIMIT_EXPR=94;
    public static final int SELECTION_EXPR=125;
    public static final int LOR=228;
    public static final int CAST=71;
    public static final int LW=69;
    public static final int WILDCARD_SELECT=168;
    public static final int EXPONENT=270;
    public static final int LT=224;
    public static final int PATTERN_INCL_EXPR=115;
    public static final int ORDER_BY_EXPR=135;
    public static final int BOOL_TYPE=203;
    public static final int MOD_ASSIGN=250;
    public static final int CASE=27;
    public static final int IN_SUBSELECT_QUERY_EXPR=176;
    public static final int EQUALS=209;
    public static final int COUNT=25;
    public static final int RETAININTERSECTION=61;
    public static final int DIV_ASSIGN=244;
    public static final int SL_ASSIGN=256;
    public static final int PATTERN=62;
    public static final int SQL=63;
    public static final int WEEKDAY=68;
    public static final int FULL=39;
    public static final int INSERT=51;
    public static final int ESCAPE=10;
    public static final int ARRAY_EXPR=155;
    public static final int LAST=50;
    public static final int BOOLEAN_FALSE=92;
    public static final int SELECT=26;
    public static final int INTO=52;
    public static final int FLOAT_TYPE=200;
    public static final int TIMEPERIOD_SECOND=86;
    public static final int COALESCE=21;
    public static final int EVENT_FILTER_BETWEEN=109;
    public static final int SUBSELECT_EXPR=172;
    public static final int NUMERIC_PARAM_RANGE=96;
    public static final int CONCAT=151;
    public static final int CLASS_IDENT=111;
    public static final int ON_EXPR=183;
    public static final int CREATE_WINDOW_EXPR=181;
    public static final int ON_DELETE_EXPR=184;
    public static final int NUM_LONG=239;
    public static final int ON=40;
    public static final int TIME_PERIOD=154;
    public static final int DOUBLE_TYPE=201;
    public static final int DELETE=73;
    public static final int INT_TYPE=198;
    public static final int EVERY_EXPR=14;
    public static final int EVAL_BITWISE_EXPR=119;
    public static final int ORDER_ELEMENT_EXPR=136;
    public static final int TIMEPERIOD_HOURS=82;
    public static final int VARIABLE=76;
    public static final int SUBSTITUTION=179;
    public static final int UNTIL=77;
    public static final int STRING_TYPE=202;
    public static final int NUM_INT=235;
    public static final int ON_SET_EXPR=187;
    public static final int STDDEV=23;
    public static final int NUM_FLOAT=240;
    public static final int ON_EXPR_FROM=186;
    public static final int FROM=33;
    public static final int DISTINCT=45;
    public static final int EscapeSequence=266;
    public static final int OUTPUT=47;
    public static final int WEEKDAY_OPERATOR=178;
    public static final int DEC=248;
    public static final int CREATE_WINDOW_COL_TYPE_LIST=195;
    public static final int WHERE=15;
    public static final int INNER=35;
    public static final int BXOR_ASSIGN=257;
    public static final int NUMERIC_PARAM_FREQUENCY=98;
    public static final int SNAPSHOT=74;
    public static final int ORDER=53;
    public static final int EVENT_FILTER_PARAM=104;
    public static final int EVENT_PROP_DYNAMIC_MAPPED=143;
    public static final int IRSTREAM=58;
    public static final int MAX=19;
    public static final int TIMEPERIOD_DAYS=80;
    public static final int EVENT_FILTER_RANGE=105;
    public static final int ML_COMMENT=265;
    public static final int EVENT_PROP_DYNAMIC_INDEXED=142;
    public static final int BOR_ASSIGN=258;
    public static final int COMMA=208;
    public static final int IS=41;
    public static final int WHEN_LIMIT_EXPR=148;
    public static final int TIMEPERIOD_LIMIT_EXPR=145;
    public static final int EQUAL=241;
    public static final int BOR=220;
    public static final int TIMEPERIOD_HOUR=81;
    public static final int ALL=46;
    public static final int EVENT_FILTER_NOT_BETWEEN=110;
    public static final int IN_RANGE=170;
    public static final int DOT=210;
    public static final int CURRENT_TIMESTAMP=72;
    public static final int INSERTINTO_EXPR=149;
    public static final int UNIDIRECTIONAL=59;
    public static final int HAVING_EXPR=118;
    public static final int MATCH_UNTIL_RANGE_BOUNDED=194;
    public static final int EVAL_EQUALS_EXPR=122;
    public static final int TIMEPERIOD_MINUTES=84;
    public static final int RSTREAM=56;
    public static final int NOT_LIKE=163;
    public static final int EVENT_LIMIT_EXPR=144;
    public static final int TIMEPERIOD_MINUTE=83;
    public static final int NOT_BETWEEN=162;
    public static final int EVAL_OR_EXPR=121;
    public static final int BAND=219;
    public static final int QUOTED_STRING_LITERAL=218;
    public static final int JOIN=36;
    public static final int NOT_EXPR=13;
    public static final int QUESTION=237;
    public static final int OBSERVER_EXPR=113;
    public static final int EVENT_FILTER_IDENT=103;
    public static final int EVENT_PROP_MAPPED=139;
    public static final int UnicodeEscape=267;
    public static final int AVEDEV=24;
    public static final int DBSELECT_EXPR=165;
    public static final int SELECTION_ELEMENT_EXPR=126;
    public static final int CREATE_WINDOW_SELECT_EXPR=182;
    public static final int WINDOW=5;
    public static final int INSERTINTO_EXPRCOL=150;
    public static final int DESC=55;
    public static final int SELECTION_STREAM=127;
    public static final int SR_ASSIGN=252;
    public static final int LE=226;
    public static final int DBFROM_CLAUSE=166;
    public static final int EVAL_IDENT=124;

    // delegates
    // delegators


        public EsperEPL2GrammarParser(TokenStream input) {
            this(input, new RecognizerSharedState());
        }
        public EsperEPL2GrammarParser(TokenStream input, RecognizerSharedState state) {
            super(input, state);
             
        }
        
    protected TreeAdaptor adaptor = new CommonTreeAdaptor();

    public void setTreeAdaptor(TreeAdaptor adaptor) {
        this.adaptor = adaptor;
    }
    public TreeAdaptor getTreeAdaptor() {
        return adaptor;
    }

    public String[] getTokenNames() { return EsperEPL2GrammarParser.tokenNames; }
    public String getGrammarFileName() { return "EsperEPL2Grammar.g"; }


      // provide nice error messages
      private Stack<String> paraphrases = new Stack<String>();
      
      // static information initialized once
      private static Map<Integer, String> lexerTokenParaphases = new HashMap<Integer, String>();
      private static Map<Integer, String> parserTokenParaphases = new HashMap<Integer, String>();
      private static java.util.Set<String> parserKeywordSet = new java.util.HashSet<String>();
        
      public Stack getParaphrases() {
        return paraphrases;
      }

      public java.util.Set<String> getKeywords() {
      	getParserTokenParaphrases();
      	return parserKeywordSet;
      }
      
      public Map<Integer, String> getLexerTokenParaphrases() {
        if (lexerTokenParaphases.size() == 0) {
          	lexerTokenParaphases.put(IDENT, "an identifier");
          	lexerTokenParaphases.put(NUM_INT, "a numeric literal");
    	lexerTokenParaphases.put(FOLLOWED_BY, "an followed-by '->'");
    	lexerTokenParaphases.put(EQUALS, "an equals '='");
    	lexerTokenParaphases.put(SQL_NE, "a sql-style not equals '<>'");
    	lexerTokenParaphases.put(QUESTION, "a questionmark '?'");
    	lexerTokenParaphases.put(LPAREN, "an opening parenthesis '('");
    	lexerTokenParaphases.put(RPAREN, "a closing parenthesis ')'");
    	lexerTokenParaphases.put(LBRACK, "a left angle bracket '['");
    	lexerTokenParaphases.put(RBRACK, "a right angle bracket ']'");
    	lexerTokenParaphases.put(LCURLY, "a left curly bracket '{'");
    	lexerTokenParaphases.put(RCURLY, "a right curly bracket '}'");
    	lexerTokenParaphases.put(COLON, "a colon ':'");
    	lexerTokenParaphases.put(COMMA, "a comma ','");
    	lexerTokenParaphases.put(EQUAL, "an equals compare '=='");
    	lexerTokenParaphases.put(LNOT, "a not '!'");
    	lexerTokenParaphases.put(BNOT, "a binary not '~'");
    	lexerTokenParaphases.put(NOT_EQUAL, "a not equals '!='");
    	lexerTokenParaphases.put(DIV, "a division operator '\'");
    	lexerTokenParaphases.put(DIV_ASSIGN, "a division assign '/='");
    	lexerTokenParaphases.put(PLUS, "a plus operator '+'");
    	lexerTokenParaphases.put(PLUS_ASSIGN, "a plus assign '+='");
    	lexerTokenParaphases.put(INC, "an increment operator '++'");
    	lexerTokenParaphases.put(MINUS, "a minus '-'");
    	lexerTokenParaphases.put(MINUS_ASSIGN, "a minus assign '-='");
    	lexerTokenParaphases.put(DEC, "a decrement operator '--'");
    	lexerTokenParaphases.put(STAR, "a star '*'");
    	lexerTokenParaphases.put(STAR_ASSIGN, "a star assign '*='");
    	lexerTokenParaphases.put(MOD, "a modulo");
    	lexerTokenParaphases.put(MOD_ASSIGN, "a modulo assign");
    	lexerTokenParaphases.put(SR, "a shift right '>>'");
    	lexerTokenParaphases.put(SR_ASSIGN, "a shift right assign '>>='");
    	lexerTokenParaphases.put(BSR, "a binary shift right '>>>'");
    	lexerTokenParaphases.put(BSR_ASSIGN, "a binary shift right assign '>>>='");
    	lexerTokenParaphases.put(GE, "a greater equals '>='");
    	lexerTokenParaphases.put(GT, "a greater then '>'");
    	lexerTokenParaphases.put(SL, "a shift left '<<'");
    	lexerTokenParaphases.put(SL_ASSIGN, "a shift left assign '<<='");
    	lexerTokenParaphases.put(LE, "a less equals '<='");
    	lexerTokenParaphases.put(LT, "a lesser then '<'");
    	lexerTokenParaphases.put(BXOR, "a binary xor '^'");
    	lexerTokenParaphases.put(BXOR_ASSIGN, "a binary xor assign '^='");
    	lexerTokenParaphases.put(BOR, "a binary or '|'");
    	lexerTokenParaphases.put(BOR_ASSIGN, "a binary or assign '|='");
    	lexerTokenParaphases.put(LOR, "a logical or '||'");
    	lexerTokenParaphases.put(BAND, "a binary and '&'");
    	lexerTokenParaphases.put(BAND_ASSIGN, "a binary and assign '&='");
    	lexerTokenParaphases.put(LAND, "a logical and '&&'");
    	lexerTokenParaphases.put(SEMI, "a semicolon ';'");
    	lexerTokenParaphases.put(DOT, "a dot '.'");		
        }
        return lexerTokenParaphases;
      }
      
      public Map<Integer, String> getParserTokenParaphrases() {
        if (parserTokenParaphases.size() == 0) {
    	parserTokenParaphases.put(CREATE, "'create'");
    	parserTokenParaphases.put(WINDOW, "'window'");
    	parserTokenParaphases.put(IN_SET, "'in'");
    	parserTokenParaphases.put(BETWEEN, "'between'");
    	parserTokenParaphases.put(LIKE, "'like'");
    	parserTokenParaphases.put(REGEXP, "'regexp'");
    	parserTokenParaphases.put(ESCAPE, "'escape'");
    	parserTokenParaphases.put(OR_EXPR, "'or'");
    	parserTokenParaphases.put(AND_EXPR, "'and'");
    	parserTokenParaphases.put(NOT_EXPR, "'not'");
    	parserTokenParaphases.put(EVERY_EXPR, "'every'");
    	parserTokenParaphases.put(WHERE, "'where'");
    	parserTokenParaphases.put(AS, "'as'");	
    	parserTokenParaphases.put(SUM, "'sum'");
    	parserTokenParaphases.put(AVG, "'avg'");
    	parserTokenParaphases.put(MAX, "'max'");
    	parserTokenParaphases.put(MIN, "'min'");
    	parserTokenParaphases.put(COALESCE, "'coalesce'");
    	parserTokenParaphases.put(MEDIAN, "'median'");
    	parserTokenParaphases.put(STDDEV, "'stddev'");
    	parserTokenParaphases.put(AVEDEV, "'avedev'");
    	parserTokenParaphases.put(COUNT, "'count'");
    	parserTokenParaphases.put(SELECT, "'select'");
    	parserTokenParaphases.put(CASE, "'case'");
    	parserTokenParaphases.put(CASE2, "'case'");
    	parserTokenParaphases.put(ELSE, "'else'");
    	parserTokenParaphases.put(WHEN, "'when'");
    	parserTokenParaphases.put(THEN, "'then'");
    	parserTokenParaphases.put(END, "'end'");
    	parserTokenParaphases.put(FROM, "'from'");
    	parserTokenParaphases.put(OUTER, "'outer'");
    	parserTokenParaphases.put(JOIN, "'join'");
    	parserTokenParaphases.put(LEFT, "'left'");
    	parserTokenParaphases.put(RIGHT, "'right'");
    	parserTokenParaphases.put(FULL, "'full'");
    	parserTokenParaphases.put(ON, "'on'");	
    	parserTokenParaphases.put(IS, "'is'");
    	parserTokenParaphases.put(BY, "'by'");
    	parserTokenParaphases.put(GROUP, "'group'");
    	parserTokenParaphases.put(HAVING, "'having'");
    	parserTokenParaphases.put(DISTINCT, "'distinct'");
    	parserTokenParaphases.put(ALL, "'all'");
    	parserTokenParaphases.put(OUTPUT, "'output'");
    	parserTokenParaphases.put(EVENTS, "'events'");
    	parserTokenParaphases.put(FIRST, "'first'");
    	parserTokenParaphases.put(LAST, "'last'");
    	parserTokenParaphases.put(INSERT, "'insert'");
    	parserTokenParaphases.put(INTO, "'into'");
    	parserTokenParaphases.put(ORDER, "'order'");
    	parserTokenParaphases.put(ASC, "'asc'");
    	parserTokenParaphases.put(DESC, "'desc'");
    	parserTokenParaphases.put(RSTREAM, "'rstream'");
    	parserTokenParaphases.put(ISTREAM, "'istream'");
    	parserTokenParaphases.put(IRSTREAM, "'irstream'");
    	parserTokenParaphases.put(UNIDIRECTIONAL, "'unidirectional'");
    	parserTokenParaphases.put(RETAINUNION, "'retain-union'");
    	parserTokenParaphases.put(RETAININTERSECTION, "'retain-intersection'");
    	parserTokenParaphases.put(PATTERN, "'pattern'");
    	parserTokenParaphases.put(SQL, "'sql'");
    	parserTokenParaphases.put(METADATASQL, "'metadatasql'");
    	parserTokenParaphases.put(PREVIOUS, "'prev'");
    	parserTokenParaphases.put(PRIOR, "'prior'");
    	parserTokenParaphases.put(EXISTS, "'exists'");
    	parserTokenParaphases.put(WEEKDAY, "'weekday'");
    	parserTokenParaphases.put(LW, "'lastweekday'");
    	parserTokenParaphases.put(INSTANCEOF, "'instanceof'");
    	parserTokenParaphases.put(CAST, "'cast'");
    	parserTokenParaphases.put(CURRENT_TIMESTAMP, "'current_timestamp'");
    	parserTokenParaphases.put(DELETE, "'delete'");
    	parserTokenParaphases.put(SNAPSHOT, "'snapshot'");
    	parserTokenParaphases.put(SET, "'set'");
    	parserTokenParaphases.put(VARIABLE, "'variable'");
    	parserTokenParaphases.put(UNTIL, "'until'");
    	parserTokenParaphases.put(AT, "'at'");
    	parserTokenParaphases.put(TIMEPERIOD_DAY, "'day'");
    	parserTokenParaphases.put(TIMEPERIOD_DAYS, "'days'");
    	parserTokenParaphases.put(TIMEPERIOD_HOUR, "'hour'");
    	parserTokenParaphases.put(TIMEPERIOD_HOURS, "'hours'");
    	parserTokenParaphases.put(TIMEPERIOD_MINUTE, "'minute'");
    	parserTokenParaphases.put(TIMEPERIOD_MINUTES, "'minutes'");
    	parserTokenParaphases.put(TIMEPERIOD_SEC, "'sec'");
    	parserTokenParaphases.put(TIMEPERIOD_SECOND, "'second'");
    	parserTokenParaphases.put(TIMEPERIOD_SECONDS, "'seconds';");
    	parserTokenParaphases.put(TIMEPERIOD_MILLISEC, "'msec'");
    	parserTokenParaphases.put(TIMEPERIOD_MILLISECOND, "'millisecond'");
    	parserTokenParaphases.put(TIMEPERIOD_MILLISECONDS, "'milliseconds'");
    	parserTokenParaphases.put(BOOLEAN_TRUE, "'true'");
    	parserTokenParaphases.put(BOOLEAN_FALSE, "'false'");
    	parserTokenParaphases.put(VALUE_NULL, "'null'");
    	parserTokenParaphases.put(ROW_LIMIT_EXPR, "'limit'");
    	parserTokenParaphases.put(OFFSET, "'offset'");

    	parserKeywordSet = new java.util.TreeSet<String>(parserTokenParaphases.values());
        }
        return parserTokenParaphases;
      }

      protected void mismatch(IntStream input, int ttype, BitSet follow) throws RecognitionException {
        throw new MismatchedTokenException(ttype, input);  
      }

      public void recoverFromMismatchedToken(IntStream intStream, RecognitionException recognitionException, int i, BitSet bitSet) throws RecognitionException {
        throw recognitionException;
      }

      public Object recoverFromMismatchedSet(IntStream intStream, RecognitionException recognitionException, BitSet bitSet) throws RecognitionException {
        throw recognitionException;
      }

      protected boolean recoverFromMismatchedElement(IntStream intStream, RecognitionException recognitionException, BitSet bitSet) {
        throw new RuntimeException("Error recovering from mismatched element: " + recognitionException.getMessage(), recognitionException);
      }
      public void displayRecognitionError(String[] tokenNames,
                                            RecognitionException e) {
        throw new RuntimeException(e);
      }


    public static class startPatternExpressionRule_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "startPatternExpressionRule"
    // EsperEPL2Grammar.g:452:1: startPatternExpressionRule : patternExpression EOF ;
    public final EsperEPL2GrammarParser.startPatternExpressionRule_return startPatternExpressionRule() throws RecognitionException {
        EsperEPL2GrammarParser.startPatternExpressionRule_return retval = new EsperEPL2GrammarParser.startPatternExpressionRule_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token EOF2=null;
        EsperEPL2GrammarParser.patternExpression_return patternExpression1 = null;


        CommonTree EOF2_tree=null;

        try {
            // EsperEPL2Grammar.g:453:2: ( patternExpression EOF )
            // EsperEPL2Grammar.g:453:4: patternExpression EOF
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_patternExpression_in_startPatternExpressionRule1278);
            patternExpression1=patternExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, patternExpression1.getTree());
            EOF2=(Token)match(input,EOF,FOLLOW_EOF_in_startPatternExpressionRule1282); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "startPatternExpressionRule"

    public static class startEPLExpressionRule_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "startEPLExpressionRule"
    // EsperEPL2Grammar.g:457:1: startEPLExpressionRule : eplExpression EOF -> ^( EPL_EXPR eplExpression ) ;
    public final EsperEPL2GrammarParser.startEPLExpressionRule_return startEPLExpressionRule() throws RecognitionException {
        EsperEPL2GrammarParser.startEPLExpressionRule_return retval = new EsperEPL2GrammarParser.startEPLExpressionRule_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token EOF4=null;
        EsperEPL2GrammarParser.eplExpression_return eplExpression3 = null;


        CommonTree EOF4_tree=null;
        RewriteRuleTokenStream stream_EOF=new RewriteRuleTokenStream(adaptor,"token EOF");
        RewriteRuleSubtreeStream stream_eplExpression=new RewriteRuleSubtreeStream(adaptor,"rule eplExpression");
        try {
            // EsperEPL2Grammar.g:458:2: ( eplExpression EOF -> ^( EPL_EXPR eplExpression ) )
            // EsperEPL2Grammar.g:458:4: eplExpression EOF
            {
            pushFollow(FOLLOW_eplExpression_in_startEPLExpressionRule1296);
            eplExpression3=eplExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eplExpression.add(eplExpression3.getTree());
            EOF4=(Token)match(input,EOF,FOLLOW_EOF_in_startEPLExpressionRule1300); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EOF.add(EOF4);



            // AST REWRITE
            // elements: eplExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 460:3: -> ^( EPL_EXPR eplExpression )
            {
                // EsperEPL2Grammar.g:460:6: ^( EPL_EXPR eplExpression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EPL_EXPR, "EPL_EXPR"), root_1);

                adaptor.addChild(root_1, stream_eplExpression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "startEPLExpressionRule"

    public static class startEventPropertyRule_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "startEventPropertyRule"
    // EsperEPL2Grammar.g:463:1: startEventPropertyRule : eventProperty EOF ;
    public final EsperEPL2GrammarParser.startEventPropertyRule_return startEventPropertyRule() throws RecognitionException {
        EsperEPL2GrammarParser.startEventPropertyRule_return retval = new EsperEPL2GrammarParser.startEventPropertyRule_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token EOF6=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty5 = null;


        CommonTree EOF6_tree=null;

        try {
            // EsperEPL2Grammar.g:464:2: ( eventProperty EOF )
            // EsperEPL2Grammar.g:464:4: eventProperty EOF
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_eventProperty_in_startEventPropertyRule1323);
            eventProperty5=eventProperty();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty5.getTree());
            EOF6=(Token)match(input,EOF,FOLLOW_EOF_in_startEventPropertyRule1327); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "startEventPropertyRule"

    public static class eplExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "eplExpression"
    // EsperEPL2Grammar.g:471:1: eplExpression : ( selectExpr | createWindowExpr | createVariableExpr | onExpr );
    public final EsperEPL2GrammarParser.eplExpression_return eplExpression() throws RecognitionException {
        EsperEPL2GrammarParser.eplExpression_return retval = new EsperEPL2GrammarParser.eplExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.selectExpr_return selectExpr7 = null;

        EsperEPL2GrammarParser.createWindowExpr_return createWindowExpr8 = null;

        EsperEPL2GrammarParser.createVariableExpr_return createVariableExpr9 = null;

        EsperEPL2GrammarParser.onExpr_return onExpr10 = null;



        try {
            // EsperEPL2Grammar.g:472:2: ( selectExpr | createWindowExpr | createVariableExpr | onExpr )
            int alt1=4;
            switch ( input.LA(1) ) {
            case SELECT:
            case INSERT:
                {
                alt1=1;
                }
                break;
            case CREATE:
                {
                int LA1_3 = input.LA(2);

                if ( (LA1_3==WINDOW) ) {
                    alt1=2;
                }
                else if ( (LA1_3==VARIABLE) ) {
                    alt1=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 1, 3, input);

                    throw nvae;
                }
                }
                break;
            case ON:
                {
                alt1=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 1, 0, input);

                throw nvae;
            }

            switch (alt1) {
                case 1 :
                    // EsperEPL2Grammar.g:472:4: selectExpr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_selectExpr_in_eplExpression1343);
                    selectExpr7=selectExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, selectExpr7.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:473:4: createWindowExpr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_createWindowExpr_in_eplExpression1348);
                    createWindowExpr8=createWindowExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createWindowExpr8.getTree());

                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:474:4: createVariableExpr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_createVariableExpr_in_eplExpression1353);
                    createVariableExpr9=createVariableExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createVariableExpr9.getTree());

                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:475:4: onExpr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_onExpr_in_eplExpression1358);
                    onExpr10=onExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, onExpr10.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "eplExpression"

    public static class selectExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "selectExpr"
    // EsperEPL2Grammar.g:478:1: selectExpr : ( INSERT insertIntoExpr )? SELECT selectClause FROM fromClause ( WHERE whereClause )? ( GROUP BY groupByListExpr )? ( HAVING havingClause )? ( OUTPUT outputLimit )? ( ORDER BY orderByListExpr )? ( ROW_LIMIT_EXPR rowLimit )? ;
    public final EsperEPL2GrammarParser.selectExpr_return selectExpr() throws RecognitionException {
        EsperEPL2GrammarParser.selectExpr_return retval = new EsperEPL2GrammarParser.selectExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token INSERT11=null;
        Token SELECT13=null;
        Token FROM15=null;
        Token WHERE17=null;
        Token GROUP19=null;
        Token BY20=null;
        Token HAVING22=null;
        Token OUTPUT24=null;
        Token ORDER26=null;
        Token BY27=null;
        Token ROW_LIMIT_EXPR29=null;
        EsperEPL2GrammarParser.insertIntoExpr_return insertIntoExpr12 = null;

        EsperEPL2GrammarParser.selectClause_return selectClause14 = null;

        EsperEPL2GrammarParser.fromClause_return fromClause16 = null;

        EsperEPL2GrammarParser.whereClause_return whereClause18 = null;

        EsperEPL2GrammarParser.groupByListExpr_return groupByListExpr21 = null;

        EsperEPL2GrammarParser.havingClause_return havingClause23 = null;

        EsperEPL2GrammarParser.outputLimit_return outputLimit25 = null;

        EsperEPL2GrammarParser.orderByListExpr_return orderByListExpr28 = null;

        EsperEPL2GrammarParser.rowLimit_return rowLimit30 = null;


        CommonTree INSERT11_tree=null;
        CommonTree SELECT13_tree=null;
        CommonTree FROM15_tree=null;
        CommonTree WHERE17_tree=null;
        CommonTree GROUP19_tree=null;
        CommonTree BY20_tree=null;
        CommonTree HAVING22_tree=null;
        CommonTree OUTPUT24_tree=null;
        CommonTree ORDER26_tree=null;
        CommonTree BY27_tree=null;
        CommonTree ROW_LIMIT_EXPR29_tree=null;

        try {
            // EsperEPL2Grammar.g:479:2: ( ( INSERT insertIntoExpr )? SELECT selectClause FROM fromClause ( WHERE whereClause )? ( GROUP BY groupByListExpr )? ( HAVING havingClause )? ( OUTPUT outputLimit )? ( ORDER BY orderByListExpr )? ( ROW_LIMIT_EXPR rowLimit )? )
            // EsperEPL2Grammar.g:479:4: ( INSERT insertIntoExpr )? SELECT selectClause FROM fromClause ( WHERE whereClause )? ( GROUP BY groupByListExpr )? ( HAVING havingClause )? ( OUTPUT outputLimit )? ( ORDER BY orderByListExpr )? ( ROW_LIMIT_EXPR rowLimit )?
            {
            root_0 = (CommonTree)adaptor.nil();

            // EsperEPL2Grammar.g:479:4: ( INSERT insertIntoExpr )?
            int alt2=2;
            int LA2_0 = input.LA(1);

            if ( (LA2_0==INSERT) ) {
                alt2=1;
            }
            switch (alt2) {
                case 1 :
                    // EsperEPL2Grammar.g:479:5: INSERT insertIntoExpr
                    {
                    INSERT11=(Token)match(input,INSERT,FOLLOW_INSERT_in_selectExpr1371); if (state.failed) return retval;
                    pushFollow(FOLLOW_insertIntoExpr_in_selectExpr1374);
                    insertIntoExpr12=insertIntoExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, insertIntoExpr12.getTree());

                    }
                    break;

            }

            SELECT13=(Token)match(input,SELECT,FOLLOW_SELECT_in_selectExpr1380); if (state.failed) return retval;
            pushFollow(FOLLOW_selectClause_in_selectExpr1383);
            selectClause14=selectClause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, selectClause14.getTree());
            FROM15=(Token)match(input,FROM,FOLLOW_FROM_in_selectExpr1387); if (state.failed) return retval;
            pushFollow(FOLLOW_fromClause_in_selectExpr1390);
            fromClause16=fromClause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, fromClause16.getTree());
            // EsperEPL2Grammar.g:482:3: ( WHERE whereClause )?
            int alt3=2;
            int LA3_0 = input.LA(1);

            if ( (LA3_0==WHERE) ) {
                alt3=1;
            }
            switch (alt3) {
                case 1 :
                    // EsperEPL2Grammar.g:482:4: WHERE whereClause
                    {
                    WHERE17=(Token)match(input,WHERE,FOLLOW_WHERE_in_selectExpr1395); if (state.failed) return retval;
                    pushFollow(FOLLOW_whereClause_in_selectExpr1398);
                    whereClause18=whereClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, whereClause18.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:483:3: ( GROUP BY groupByListExpr )?
            int alt4=2;
            int LA4_0 = input.LA(1);

            if ( (LA4_0==GROUP) ) {
                alt4=1;
            }
            switch (alt4) {
                case 1 :
                    // EsperEPL2Grammar.g:483:4: GROUP BY groupByListExpr
                    {
                    GROUP19=(Token)match(input,GROUP,FOLLOW_GROUP_in_selectExpr1405); if (state.failed) return retval;
                    BY20=(Token)match(input,BY,FOLLOW_BY_in_selectExpr1408); if (state.failed) return retval;
                    pushFollow(FOLLOW_groupByListExpr_in_selectExpr1411);
                    groupByListExpr21=groupByListExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, groupByListExpr21.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:484:3: ( HAVING havingClause )?
            int alt5=2;
            int LA5_0 = input.LA(1);

            if ( (LA5_0==HAVING) ) {
                alt5=1;
            }
            switch (alt5) {
                case 1 :
                    // EsperEPL2Grammar.g:484:4: HAVING havingClause
                    {
                    HAVING22=(Token)match(input,HAVING,FOLLOW_HAVING_in_selectExpr1418); if (state.failed) return retval;
                    pushFollow(FOLLOW_havingClause_in_selectExpr1421);
                    havingClause23=havingClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, havingClause23.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:485:3: ( OUTPUT outputLimit )?
            int alt6=2;
            int LA6_0 = input.LA(1);

            if ( (LA6_0==OUTPUT) ) {
                alt6=1;
            }
            switch (alt6) {
                case 1 :
                    // EsperEPL2Grammar.g:485:4: OUTPUT outputLimit
                    {
                    OUTPUT24=(Token)match(input,OUTPUT,FOLLOW_OUTPUT_in_selectExpr1428); if (state.failed) return retval;
                    pushFollow(FOLLOW_outputLimit_in_selectExpr1431);
                    outputLimit25=outputLimit();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, outputLimit25.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:486:3: ( ORDER BY orderByListExpr )?
            int alt7=2;
            int LA7_0 = input.LA(1);

            if ( (LA7_0==ORDER) ) {
                alt7=1;
            }
            switch (alt7) {
                case 1 :
                    // EsperEPL2Grammar.g:486:4: ORDER BY orderByListExpr
                    {
                    ORDER26=(Token)match(input,ORDER,FOLLOW_ORDER_in_selectExpr1438); if (state.failed) return retval;
                    BY27=(Token)match(input,BY,FOLLOW_BY_in_selectExpr1441); if (state.failed) return retval;
                    pushFollow(FOLLOW_orderByListExpr_in_selectExpr1444);
                    orderByListExpr28=orderByListExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, orderByListExpr28.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:487:3: ( ROW_LIMIT_EXPR rowLimit )?
            int alt8=2;
            int LA8_0 = input.LA(1);

            if ( (LA8_0==ROW_LIMIT_EXPR) ) {
                alt8=1;
            }
            switch (alt8) {
                case 1 :
                    // EsperEPL2Grammar.g:487:4: ROW_LIMIT_EXPR rowLimit
                    {
                    ROW_LIMIT_EXPR29=(Token)match(input,ROW_LIMIT_EXPR,FOLLOW_ROW_LIMIT_EXPR_in_selectExpr1451); if (state.failed) return retval;
                    pushFollow(FOLLOW_rowLimit_in_selectExpr1454);
                    rowLimit30=rowLimit();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rowLimit30.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "selectExpr"

    public static class onExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "onExpr"
    // EsperEPL2Grammar.g:490:1: onExpr : ON ( eventFilterExpression | patternInclusionExpression ) ( AS i= IDENT | i= IDENT )? ( onDeleteExpr | onSelectExpr | onSetExpr ) -> ^( ON_EXPR ( eventFilterExpression )? ( patternInclusionExpression )? ( $i)? ( onDeleteExpr )? ( onSelectExpr )? ( onSetExpr )? ) ;
    public final EsperEPL2GrammarParser.onExpr_return onExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onExpr_return retval = new EsperEPL2GrammarParser.onExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token ON31=null;
        Token AS34=null;
        EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression32 = null;

        EsperEPL2GrammarParser.patternInclusionExpression_return patternInclusionExpression33 = null;

        EsperEPL2GrammarParser.onDeleteExpr_return onDeleteExpr35 = null;

        EsperEPL2GrammarParser.onSelectExpr_return onSelectExpr36 = null;

        EsperEPL2GrammarParser.onSetExpr_return onSetExpr37 = null;


        CommonTree i_tree=null;
        CommonTree ON31_tree=null;
        CommonTree AS34_tree=null;
        RewriteRuleTokenStream stream_ON=new RewriteRuleTokenStream(adaptor,"token ON");
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_onSelectExpr=new RewriteRuleSubtreeStream(adaptor,"rule onSelectExpr");
        RewriteRuleSubtreeStream stream_onDeleteExpr=new RewriteRuleSubtreeStream(adaptor,"rule onDeleteExpr");
        RewriteRuleSubtreeStream stream_eventFilterExpression=new RewriteRuleSubtreeStream(adaptor,"rule eventFilterExpression");
        RewriteRuleSubtreeStream stream_onSetExpr=new RewriteRuleSubtreeStream(adaptor,"rule onSetExpr");
        RewriteRuleSubtreeStream stream_patternInclusionExpression=new RewriteRuleSubtreeStream(adaptor,"rule patternInclusionExpression");
        try {
            // EsperEPL2Grammar.g:491:2: ( ON ( eventFilterExpression | patternInclusionExpression ) ( AS i= IDENT | i= IDENT )? ( onDeleteExpr | onSelectExpr | onSetExpr ) -> ^( ON_EXPR ( eventFilterExpression )? ( patternInclusionExpression )? ( $i)? ( onDeleteExpr )? ( onSelectExpr )? ( onSetExpr )? ) )
            // EsperEPL2Grammar.g:491:4: ON ( eventFilterExpression | patternInclusionExpression ) ( AS i= IDENT | i= IDENT )? ( onDeleteExpr | onSelectExpr | onSetExpr )
            {
            ON31=(Token)match(input,ON,FOLLOW_ON_in_onExpr1469); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ON.add(ON31);

            // EsperEPL2Grammar.g:491:7: ( eventFilterExpression | patternInclusionExpression )
            int alt9=2;
            int LA9_0 = input.LA(1);

            if ( (LA9_0==IDENT) ) {
                alt9=1;
            }
            else if ( (LA9_0==PATTERN) ) {
                alt9=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 9, 0, input);

                throw nvae;
            }
            switch (alt9) {
                case 1 :
                    // EsperEPL2Grammar.g:491:8: eventFilterExpression
                    {
                    pushFollow(FOLLOW_eventFilterExpression_in_onExpr1472);
                    eventFilterExpression32=eventFilterExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_eventFilterExpression.add(eventFilterExpression32.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:491:32: patternInclusionExpression
                    {
                    pushFollow(FOLLOW_patternInclusionExpression_in_onExpr1476);
                    patternInclusionExpression33=patternInclusionExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_patternInclusionExpression.add(patternInclusionExpression33.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:491:60: ( AS i= IDENT | i= IDENT )?
            int alt10=3;
            int LA10_0 = input.LA(1);

            if ( (LA10_0==AS) ) {
                alt10=1;
            }
            else if ( (LA10_0==IDENT) ) {
                alt10=2;
            }
            switch (alt10) {
                case 1 :
                    // EsperEPL2Grammar.g:491:61: AS i= IDENT
                    {
                    AS34=(Token)match(input,AS,FOLLOW_AS_in_onExpr1480); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS34);

                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onExpr1484); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:491:74: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onExpr1490); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:492:3: ( onDeleteExpr | onSelectExpr | onSetExpr )
            int alt11=3;
            switch ( input.LA(1) ) {
            case DELETE:
                {
                alt11=1;
                }
                break;
            case SELECT:
            case INSERT:
                {
                alt11=2;
                }
                break;
            case SET:
                {
                alt11=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 11, 0, input);

                throw nvae;
            }

            switch (alt11) {
                case 1 :
                    // EsperEPL2Grammar.g:492:4: onDeleteExpr
                    {
                    pushFollow(FOLLOW_onDeleteExpr_in_onExpr1498);
                    onDeleteExpr35=onDeleteExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onDeleteExpr.add(onDeleteExpr35.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:492:19: onSelectExpr
                    {
                    pushFollow(FOLLOW_onSelectExpr_in_onExpr1502);
                    onSelectExpr36=onSelectExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onSelectExpr.add(onSelectExpr36.getTree());

                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:492:34: onSetExpr
                    {
                    pushFollow(FOLLOW_onSetExpr_in_onExpr1506);
                    onSetExpr37=onSetExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onSetExpr.add(onSetExpr37.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: onDeleteExpr, i, eventFilterExpression, onSetExpr, onSelectExpr, patternInclusionExpression
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 493:3: -> ^( ON_EXPR ( eventFilterExpression )? ( patternInclusionExpression )? ( $i)? ( onDeleteExpr )? ( onSelectExpr )? ( onSetExpr )? )
            {
                // EsperEPL2Grammar.g:493:6: ^( ON_EXPR ( eventFilterExpression )? ( patternInclusionExpression )? ( $i)? ( onDeleteExpr )? ( onSelectExpr )? ( onSetExpr )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_EXPR, "ON_EXPR"), root_1);

                // EsperEPL2Grammar.g:493:16: ( eventFilterExpression )?
                if ( stream_eventFilterExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_eventFilterExpression.nextTree());

                }
                stream_eventFilterExpression.reset();
                // EsperEPL2Grammar.g:493:39: ( patternInclusionExpression )?
                if ( stream_patternInclusionExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_patternInclusionExpression.nextTree());

                }
                stream_patternInclusionExpression.reset();
                // EsperEPL2Grammar.g:493:67: ( $i)?
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());

                }
                stream_i.reset();
                // EsperEPL2Grammar.g:493:71: ( onDeleteExpr )?
                if ( stream_onDeleteExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onDeleteExpr.nextTree());

                }
                stream_onDeleteExpr.reset();
                // EsperEPL2Grammar.g:493:85: ( onSelectExpr )?
                if ( stream_onSelectExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSelectExpr.nextTree());

                }
                stream_onSelectExpr.reset();
                // EsperEPL2Grammar.g:493:99: ( onSetExpr )?
                if ( stream_onSetExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetExpr.nextTree());

                }
                stream_onSetExpr.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "onExpr"

    public static class onSelectExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "onSelectExpr"
    // EsperEPL2Grammar.g:496:1: onSelectExpr : ( INSERT insertIntoExpr )? SELECT selectionList onExprFrom ( WHERE whereClause )? ( GROUP BY groupByListExpr )? ( HAVING havingClause )? ( ORDER BY orderByListExpr )? -> ^( ON_SELECT_EXPR ( insertIntoExpr )? selectionList onExprFrom ( whereClause )? ( groupByListExpr )? ( havingClause )? ( orderByListExpr )? ) ;
    public final EsperEPL2GrammarParser.onSelectExpr_return onSelectExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onSelectExpr_return retval = new EsperEPL2GrammarParser.onSelectExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token INSERT38=null;
        Token SELECT40=null;
        Token WHERE43=null;
        Token GROUP45=null;
        Token BY46=null;
        Token HAVING48=null;
        Token ORDER50=null;
        Token BY51=null;
        EsperEPL2GrammarParser.insertIntoExpr_return insertIntoExpr39 = null;

        EsperEPL2GrammarParser.selectionList_return selectionList41 = null;

        EsperEPL2GrammarParser.onExprFrom_return onExprFrom42 = null;

        EsperEPL2GrammarParser.whereClause_return whereClause44 = null;

        EsperEPL2GrammarParser.groupByListExpr_return groupByListExpr47 = null;

        EsperEPL2GrammarParser.havingClause_return havingClause49 = null;

        EsperEPL2GrammarParser.orderByListExpr_return orderByListExpr52 = null;


        CommonTree INSERT38_tree=null;
        CommonTree SELECT40_tree=null;
        CommonTree WHERE43_tree=null;
        CommonTree GROUP45_tree=null;
        CommonTree BY46_tree=null;
        CommonTree HAVING48_tree=null;
        CommonTree ORDER50_tree=null;
        CommonTree BY51_tree=null;
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_GROUP=new RewriteRuleTokenStream(adaptor,"token GROUP");
        RewriteRuleTokenStream stream_BY=new RewriteRuleTokenStream(adaptor,"token BY");
        RewriteRuleTokenStream stream_HAVING=new RewriteRuleTokenStream(adaptor,"token HAVING");
        RewriteRuleTokenStream stream_INSERT=new RewriteRuleTokenStream(adaptor,"token INSERT");
        RewriteRuleTokenStream stream_ORDER=new RewriteRuleTokenStream(adaptor,"token ORDER");
        RewriteRuleTokenStream stream_SELECT=new RewriteRuleTokenStream(adaptor,"token SELECT");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_groupByListExpr=new RewriteRuleSubtreeStream(adaptor,"rule groupByListExpr");
        RewriteRuleSubtreeStream stream_insertIntoExpr=new RewriteRuleSubtreeStream(adaptor,"rule insertIntoExpr");
        RewriteRuleSubtreeStream stream_orderByListExpr=new RewriteRuleSubtreeStream(adaptor,"rule orderByListExpr");
        RewriteRuleSubtreeStream stream_selectionList=new RewriteRuleSubtreeStream(adaptor,"rule selectionList");
        RewriteRuleSubtreeStream stream_onExprFrom=new RewriteRuleSubtreeStream(adaptor,"rule onExprFrom");
        RewriteRuleSubtreeStream stream_havingClause=new RewriteRuleSubtreeStream(adaptor,"rule havingClause");
         paraphrases.push("on-select clause"); 
        try {
            // EsperEPL2Grammar.g:499:2: ( ( INSERT insertIntoExpr )? SELECT selectionList onExprFrom ( WHERE whereClause )? ( GROUP BY groupByListExpr )? ( HAVING havingClause )? ( ORDER BY orderByListExpr )? -> ^( ON_SELECT_EXPR ( insertIntoExpr )? selectionList onExprFrom ( whereClause )? ( groupByListExpr )? ( havingClause )? ( orderByListExpr )? ) )
            // EsperEPL2Grammar.g:499:4: ( INSERT insertIntoExpr )? SELECT selectionList onExprFrom ( WHERE whereClause )? ( GROUP BY groupByListExpr )? ( HAVING havingClause )? ( ORDER BY orderByListExpr )?
            {
            // EsperEPL2Grammar.g:499:4: ( INSERT insertIntoExpr )?
            int alt12=2;
            int LA12_0 = input.LA(1);

            if ( (LA12_0==INSERT) ) {
                alt12=1;
            }
            switch (alt12) {
                case 1 :
                    // EsperEPL2Grammar.g:499:5: INSERT insertIntoExpr
                    {
                    INSERT38=(Token)match(input,INSERT,FOLLOW_INSERT_in_onSelectExpr1559); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INSERT.add(INSERT38);

                    pushFollow(FOLLOW_insertIntoExpr_in_onSelectExpr1561);
                    insertIntoExpr39=insertIntoExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_insertIntoExpr.add(insertIntoExpr39.getTree());

                    }
                    break;

            }

            SELECT40=(Token)match(input,SELECT,FOLLOW_SELECT_in_onSelectExpr1567); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SELECT.add(SELECT40);

            pushFollow(FOLLOW_selectionList_in_onSelectExpr1569);
            selectionList41=selectionList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_selectionList.add(selectionList41.getTree());
            pushFollow(FOLLOW_onExprFrom_in_onSelectExpr1573);
            onExprFrom42=onExprFrom();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_onExprFrom.add(onExprFrom42.getTree());
            // EsperEPL2Grammar.g:502:3: ( WHERE whereClause )?
            int alt13=2;
            int LA13_0 = input.LA(1);

            if ( (LA13_0==WHERE) ) {
                alt13=1;
            }
            switch (alt13) {
                case 1 :
                    // EsperEPL2Grammar.g:502:4: WHERE whereClause
                    {
                    WHERE43=(Token)match(input,WHERE,FOLLOW_WHERE_in_onSelectExpr1578); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE43);

                    pushFollow(FOLLOW_whereClause_in_onSelectExpr1580);
                    whereClause44=whereClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause44.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:503:3: ( GROUP BY groupByListExpr )?
            int alt14=2;
            int LA14_0 = input.LA(1);

            if ( (LA14_0==GROUP) ) {
                alt14=1;
            }
            switch (alt14) {
                case 1 :
                    // EsperEPL2Grammar.g:503:4: GROUP BY groupByListExpr
                    {
                    GROUP45=(Token)match(input,GROUP,FOLLOW_GROUP_in_onSelectExpr1589); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_GROUP.add(GROUP45);

                    BY46=(Token)match(input,BY,FOLLOW_BY_in_onSelectExpr1591); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BY.add(BY46);

                    pushFollow(FOLLOW_groupByListExpr_in_onSelectExpr1593);
                    groupByListExpr47=groupByListExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_groupByListExpr.add(groupByListExpr47.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:504:3: ( HAVING havingClause )?
            int alt15=2;
            int LA15_0 = input.LA(1);

            if ( (LA15_0==HAVING) ) {
                alt15=1;
            }
            switch (alt15) {
                case 1 :
                    // EsperEPL2Grammar.g:504:4: HAVING havingClause
                    {
                    HAVING48=(Token)match(input,HAVING,FOLLOW_HAVING_in_onSelectExpr1600); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_HAVING.add(HAVING48);

                    pushFollow(FOLLOW_havingClause_in_onSelectExpr1602);
                    havingClause49=havingClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_havingClause.add(havingClause49.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:505:3: ( ORDER BY orderByListExpr )?
            int alt16=2;
            int LA16_0 = input.LA(1);

            if ( (LA16_0==ORDER) ) {
                alt16=1;
            }
            switch (alt16) {
                case 1 :
                    // EsperEPL2Grammar.g:505:4: ORDER BY orderByListExpr
                    {
                    ORDER50=(Token)match(input,ORDER,FOLLOW_ORDER_in_onSelectExpr1609); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ORDER.add(ORDER50);

                    BY51=(Token)match(input,BY,FOLLOW_BY_in_onSelectExpr1611); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BY.add(BY51);

                    pushFollow(FOLLOW_orderByListExpr_in_onSelectExpr1613);
                    orderByListExpr52=orderByListExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_orderByListExpr.add(orderByListExpr52.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: groupByListExpr, whereClause, orderByListExpr, insertIntoExpr, onExprFrom, selectionList, havingClause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 506:3: -> ^( ON_SELECT_EXPR ( insertIntoExpr )? selectionList onExprFrom ( whereClause )? ( groupByListExpr )? ( havingClause )? ( orderByListExpr )? )
            {
                // EsperEPL2Grammar.g:506:6: ^( ON_SELECT_EXPR ( insertIntoExpr )? selectionList onExprFrom ( whereClause )? ( groupByListExpr )? ( havingClause )? ( orderByListExpr )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_SELECT_EXPR, "ON_SELECT_EXPR"), root_1);

                // EsperEPL2Grammar.g:506:23: ( insertIntoExpr )?
                if ( stream_insertIntoExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_insertIntoExpr.nextTree());

                }
                stream_insertIntoExpr.reset();
                adaptor.addChild(root_1, stream_selectionList.nextTree());
                adaptor.addChild(root_1, stream_onExprFrom.nextTree());
                // EsperEPL2Grammar.g:506:64: ( whereClause )?
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());

                }
                stream_whereClause.reset();
                // EsperEPL2Grammar.g:506:77: ( groupByListExpr )?
                if ( stream_groupByListExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_groupByListExpr.nextTree());

                }
                stream_groupByListExpr.reset();
                // EsperEPL2Grammar.g:506:94: ( havingClause )?
                if ( stream_havingClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_havingClause.nextTree());

                }
                stream_havingClause.reset();
                // EsperEPL2Grammar.g:506:108: ( orderByListExpr )?
                if ( stream_orderByListExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_orderByListExpr.nextTree());

                }
                stream_orderByListExpr.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "onSelectExpr"

    public static class onDeleteExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "onDeleteExpr"
    // EsperEPL2Grammar.g:509:1: onDeleteExpr : DELETE onExprFrom ( WHERE whereClause )? -> ^( ON_DELETE_EXPR onExprFrom ( whereClause )? ) ;
    public final EsperEPL2GrammarParser.onDeleteExpr_return onDeleteExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onDeleteExpr_return retval = new EsperEPL2GrammarParser.onDeleteExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token DELETE53=null;
        Token WHERE55=null;
        EsperEPL2GrammarParser.onExprFrom_return onExprFrom54 = null;

        EsperEPL2GrammarParser.whereClause_return whereClause56 = null;


        CommonTree DELETE53_tree=null;
        CommonTree WHERE55_tree=null;
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_DELETE=new RewriteRuleTokenStream(adaptor,"token DELETE");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_onExprFrom=new RewriteRuleSubtreeStream(adaptor,"rule onExprFrom");
         paraphrases.push("on-delete clause"); 
        try {
            // EsperEPL2Grammar.g:512:2: ( DELETE onExprFrom ( WHERE whereClause )? -> ^( ON_DELETE_EXPR onExprFrom ( whereClause )? ) )
            // EsperEPL2Grammar.g:512:4: DELETE onExprFrom ( WHERE whereClause )?
            {
            DELETE53=(Token)match(input,DELETE,FOLLOW_DELETE_in_onDeleteExpr1666); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DELETE.add(DELETE53);

            pushFollow(FOLLOW_onExprFrom_in_onDeleteExpr1670);
            onExprFrom54=onExprFrom();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_onExprFrom.add(onExprFrom54.getTree());
            // EsperEPL2Grammar.g:514:3: ( WHERE whereClause )?
            int alt17=2;
            int LA17_0 = input.LA(1);

            if ( (LA17_0==WHERE) ) {
                alt17=1;
            }
            switch (alt17) {
                case 1 :
                    // EsperEPL2Grammar.g:514:4: WHERE whereClause
                    {
                    WHERE55=(Token)match(input,WHERE,FOLLOW_WHERE_in_onDeleteExpr1675); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE55);

                    pushFollow(FOLLOW_whereClause_in_onDeleteExpr1677);
                    whereClause56=whereClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause56.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: onExprFrom, whereClause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 515:3: -> ^( ON_DELETE_EXPR onExprFrom ( whereClause )? )
            {
                // EsperEPL2Grammar.g:515:6: ^( ON_DELETE_EXPR onExprFrom ( whereClause )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_DELETE_EXPR, "ON_DELETE_EXPR"), root_1);

                adaptor.addChild(root_1, stream_onExprFrom.nextTree());
                // EsperEPL2Grammar.g:515:34: ( whereClause )?
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());

                }
                stream_whereClause.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "onDeleteExpr"

    public static class onSetExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "onSetExpr"
    // EsperEPL2Grammar.g:518:1: onSetExpr : SET onSetAssignment ( COMMA onSetAssignment )* -> ^( ON_SET_EXPR ( onSetAssignment )+ ) ;
    public final EsperEPL2GrammarParser.onSetExpr_return onSetExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onSetExpr_return retval = new EsperEPL2GrammarParser.onSetExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token SET57=null;
        Token COMMA59=null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment58 = null;

        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment60 = null;


        CommonTree SET57_tree=null;
        CommonTree COMMA59_tree=null;
        RewriteRuleTokenStream stream_SET=new RewriteRuleTokenStream(adaptor,"token SET");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_onSetAssignment=new RewriteRuleSubtreeStream(adaptor,"rule onSetAssignment");
         paraphrases.push("on-set clause"); 
        try {
            // EsperEPL2Grammar.g:521:2: ( SET onSetAssignment ( COMMA onSetAssignment )* -> ^( ON_SET_EXPR ( onSetAssignment )+ ) )
            // EsperEPL2Grammar.g:521:4: SET onSetAssignment ( COMMA onSetAssignment )*
            {
            SET57=(Token)match(input,SET,FOLLOW_SET_in_onSetExpr1717); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SET.add(SET57);

            pushFollow(FOLLOW_onSetAssignment_in_onSetExpr1719);
            onSetAssignment58=onSetAssignment();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment58.getTree());
            // EsperEPL2Grammar.g:521:24: ( COMMA onSetAssignment )*
            loop18:
            do {
                int alt18=2;
                int LA18_0 = input.LA(1);

                if ( (LA18_0==COMMA) ) {
                    alt18=1;
                }


                switch (alt18) {
            	case 1 :
            	    // EsperEPL2Grammar.g:521:25: COMMA onSetAssignment
            	    {
            	    COMMA59=(Token)match(input,COMMA,FOLLOW_COMMA_in_onSetExpr1722); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA59);

            	    pushFollow(FOLLOW_onSetAssignment_in_onSetExpr1724);
            	    onSetAssignment60=onSetAssignment();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment60.getTree());

            	    }
            	    break;

            	default :
            	    break loop18;
                }
            } while (true);



            // AST REWRITE
            // elements: onSetAssignment
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 522:3: -> ^( ON_SET_EXPR ( onSetAssignment )+ )
            {
                // EsperEPL2Grammar.g:522:6: ^( ON_SET_EXPR ( onSetAssignment )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_SET_EXPR, "ON_SET_EXPR"), root_1);

                if ( !(stream_onSetAssignment.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_onSetAssignment.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetAssignment.nextTree());

                }
                stream_onSetAssignment.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "onSetExpr"

    public static class onSetAssignment_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "onSetAssignment"
    // EsperEPL2Grammar.g:525:1: onSetAssignment : IDENT EQUALS expression ;
    public final EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment() throws RecognitionException {
        EsperEPL2GrammarParser.onSetAssignment_return retval = new EsperEPL2GrammarParser.onSetAssignment_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token IDENT61=null;
        Token EQUALS62=null;
        EsperEPL2GrammarParser.expression_return expression63 = null;


        CommonTree IDENT61_tree=null;
        CommonTree EQUALS62_tree=null;

        try {
            // EsperEPL2Grammar.g:526:2: ( IDENT EQUALS expression )
            // EsperEPL2Grammar.g:526:4: IDENT EQUALS expression
            {
            root_0 = (CommonTree)adaptor.nil();

            IDENT61=(Token)match(input,IDENT,FOLLOW_IDENT_in_onSetAssignment1749); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IDENT61_tree = (CommonTree)adaptor.create(IDENT61);
            adaptor.addChild(root_0, IDENT61_tree);
            }
            EQUALS62=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_onSetAssignment1751); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_onSetAssignment1754);
            expression63=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression63.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "onSetAssignment"

    public static class onExprFrom_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "onExprFrom"
    // EsperEPL2Grammar.g:529:1: onExprFrom : FROM n= IDENT ( AS i= IDENT | i= IDENT )? -> ^( ON_EXPR_FROM $n ( $i)? ) ;
    public final EsperEPL2GrammarParser.onExprFrom_return onExprFrom() throws RecognitionException {
        EsperEPL2GrammarParser.onExprFrom_return retval = new EsperEPL2GrammarParser.onExprFrom_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token n=null;
        Token i=null;
        Token FROM64=null;
        Token AS65=null;

        CommonTree n_tree=null;
        CommonTree i_tree=null;
        CommonTree FROM64_tree=null;
        CommonTree AS65_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_FROM=new RewriteRuleTokenStream(adaptor,"token FROM");

        try {
            // EsperEPL2Grammar.g:530:2: ( FROM n= IDENT ( AS i= IDENT | i= IDENT )? -> ^( ON_EXPR_FROM $n ( $i)? ) )
            // EsperEPL2Grammar.g:530:4: FROM n= IDENT ( AS i= IDENT | i= IDENT )?
            {
            FROM64=(Token)match(input,FROM,FOLLOW_FROM_in_onExprFrom1767); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_FROM.add(FROM64);

            n=(Token)match(input,IDENT,FOLLOW_IDENT_in_onExprFrom1771); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(n);

            // EsperEPL2Grammar.g:530:17: ( AS i= IDENT | i= IDENT )?
            int alt19=3;
            int LA19_0 = input.LA(1);

            if ( (LA19_0==AS) ) {
                alt19=1;
            }
            else if ( (LA19_0==IDENT) ) {
                alt19=2;
            }
            switch (alt19) {
                case 1 :
                    // EsperEPL2Grammar.g:530:18: AS i= IDENT
                    {
                    AS65=(Token)match(input,AS,FOLLOW_AS_in_onExprFrom1774); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS65);

                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onExprFrom1778); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:530:31: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onExprFrom1784); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;

            }



            // AST REWRITE
            // elements: n, i
            // token labels: n, i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_n=new RewriteRuleTokenStream(adaptor,"token n",n);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 531:3: -> ^( ON_EXPR_FROM $n ( $i)? )
            {
                // EsperEPL2Grammar.g:531:6: ^( ON_EXPR_FROM $n ( $i)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_EXPR_FROM, "ON_EXPR_FROM"), root_1);

                adaptor.addChild(root_1, stream_n.nextNode());
                // EsperEPL2Grammar.g:531:24: ( $i)?
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());

                }
                stream_i.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "onExprFrom"

    public static class createWindowExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "createWindowExpr"
    // EsperEPL2Grammar.g:534:1: createWindowExpr : CREATE WINDOW i= IDENT ( DOT viewExpression ( DOT viewExpression )* )? (ru= RETAINUNION | ri= RETAININTERSECTION )? ( AS )? ( createWindowExprModelAfter | LPAREN createWindowColumnList RPAREN ) (i1= INSERT ( WHERE expression )? )? -> {i1 != null}? ^( CREATE_WINDOW_EXPR $i ( viewExpression )* ( $ru)? ( $ri)? ( createWindowExprModelAfter )? ( createWindowColumnList )? ^( INSERT ( expression )? ) ) -> ^( CREATE_WINDOW_EXPR $i ( viewExpression )* ( $ru)? ( $ri)? ( createWindowExprModelAfter )? ( createWindowColumnList )? ) ;
    public final EsperEPL2GrammarParser.createWindowExpr_return createWindowExpr() throws RecognitionException {
        EsperEPL2GrammarParser.createWindowExpr_return retval = new EsperEPL2GrammarParser.createWindowExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token ru=null;
        Token ri=null;
        Token i1=null;
        Token CREATE66=null;
        Token WINDOW67=null;
        Token DOT68=null;
        Token DOT70=null;
        Token AS72=null;
        Token LPAREN74=null;
        Token RPAREN76=null;
        Token WHERE77=null;
        EsperEPL2GrammarParser.viewExpression_return viewExpression69 = null;

        EsperEPL2GrammarParser.viewExpression_return viewExpression71 = null;

        EsperEPL2GrammarParser.createWindowExprModelAfter_return createWindowExprModelAfter73 = null;

        EsperEPL2GrammarParser.createWindowColumnList_return createWindowColumnList75 = null;

        EsperEPL2GrammarParser.expression_return expression78 = null;


        CommonTree i_tree=null;
        CommonTree ru_tree=null;
        CommonTree ri_tree=null;
        CommonTree i1_tree=null;
        CommonTree CREATE66_tree=null;
        CommonTree WINDOW67_tree=null;
        CommonTree DOT68_tree=null;
        CommonTree DOT70_tree=null;
        CommonTree AS72_tree=null;
        CommonTree LPAREN74_tree=null;
        CommonTree RPAREN76_tree=null;
        CommonTree WHERE77_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_CREATE=new RewriteRuleTokenStream(adaptor,"token CREATE");
        RewriteRuleTokenStream stream_WINDOW=new RewriteRuleTokenStream(adaptor,"token WINDOW");
        RewriteRuleTokenStream stream_RETAINUNION=new RewriteRuleTokenStream(adaptor,"token RETAINUNION");
        RewriteRuleTokenStream stream_RETAININTERSECTION=new RewriteRuleTokenStream(adaptor,"token RETAININTERSECTION");
        RewriteRuleTokenStream stream_INSERT=new RewriteRuleTokenStream(adaptor,"token INSERT");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_createWindowExprModelAfter=new RewriteRuleSubtreeStream(adaptor,"rule createWindowExprModelAfter");
        RewriteRuleSubtreeStream stream_viewExpression=new RewriteRuleSubtreeStream(adaptor,"rule viewExpression");
        RewriteRuleSubtreeStream stream_createWindowColumnList=new RewriteRuleSubtreeStream(adaptor,"rule createWindowColumnList");
        try {
            // EsperEPL2Grammar.g:535:2: ( CREATE WINDOW i= IDENT ( DOT viewExpression ( DOT viewExpression )* )? (ru= RETAINUNION | ri= RETAININTERSECTION )? ( AS )? ( createWindowExprModelAfter | LPAREN createWindowColumnList RPAREN ) (i1= INSERT ( WHERE expression )? )? -> {i1 != null}? ^( CREATE_WINDOW_EXPR $i ( viewExpression )* ( $ru)? ( $ri)? ( createWindowExprModelAfter )? ( createWindowColumnList )? ^( INSERT ( expression )? ) ) -> ^( CREATE_WINDOW_EXPR $i ( viewExpression )* ( $ru)? ( $ri)? ( createWindowExprModelAfter )? ( createWindowColumnList )? ) )
            // EsperEPL2Grammar.g:535:4: CREATE WINDOW i= IDENT ( DOT viewExpression ( DOT viewExpression )* )? (ru= RETAINUNION | ri= RETAININTERSECTION )? ( AS )? ( createWindowExprModelAfter | LPAREN createWindowColumnList RPAREN ) (i1= INSERT ( WHERE expression )? )?
            {
            CREATE66=(Token)match(input,CREATE,FOLLOW_CREATE_in_createWindowExpr1812); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CREATE.add(CREATE66);

            WINDOW67=(Token)match(input,WINDOW,FOLLOW_WINDOW_in_createWindowExpr1814); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_WINDOW.add(WINDOW67);

            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_createWindowExpr1818); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);

            // EsperEPL2Grammar.g:535:26: ( DOT viewExpression ( DOT viewExpression )* )?
            int alt21=2;
            int LA21_0 = input.LA(1);

            if ( (LA21_0==DOT) ) {
                alt21=1;
            }
            switch (alt21) {
                case 1 :
                    // EsperEPL2Grammar.g:535:27: DOT viewExpression ( DOT viewExpression )*
                    {
                    DOT68=(Token)match(input,DOT,FOLLOW_DOT_in_createWindowExpr1821); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT68);

                    pushFollow(FOLLOW_viewExpression_in_createWindowExpr1823);
                    viewExpression69=viewExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression69.getTree());
                    // EsperEPL2Grammar.g:535:46: ( DOT viewExpression )*
                    loop20:
                    do {
                        int alt20=2;
                        int LA20_0 = input.LA(1);

                        if ( (LA20_0==DOT) ) {
                            alt20=1;
                        }


                        switch (alt20) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:535:47: DOT viewExpression
                    	    {
                    	    DOT70=(Token)match(input,DOT,FOLLOW_DOT_in_createWindowExpr1826); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_DOT.add(DOT70);

                    	    pushFollow(FOLLOW_viewExpression_in_createWindowExpr1828);
                    	    viewExpression71=viewExpression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression71.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop20;
                        }
                    } while (true);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:535:70: (ru= RETAINUNION | ri= RETAININTERSECTION )?
            int alt22=3;
            int LA22_0 = input.LA(1);

            if ( (LA22_0==RETAINUNION) ) {
                alt22=1;
            }
            else if ( (LA22_0==RETAININTERSECTION) ) {
                alt22=2;
            }
            switch (alt22) {
                case 1 :
                    // EsperEPL2Grammar.g:535:71: ru= RETAINUNION
                    {
                    ru=(Token)match(input,RETAINUNION,FOLLOW_RETAINUNION_in_createWindowExpr1837); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAINUNION.add(ru);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:535:86: ri= RETAININTERSECTION
                    {
                    ri=(Token)match(input,RETAININTERSECTION,FOLLOW_RETAININTERSECTION_in_createWindowExpr1841); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAININTERSECTION.add(ri);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:535:110: ( AS )?
            int alt23=2;
            int LA23_0 = input.LA(1);

            if ( (LA23_0==AS) ) {
                alt23=1;
            }
            switch (alt23) {
                case 1 :
                    // EsperEPL2Grammar.g:535:110: AS
                    {
                    AS72=(Token)match(input,AS,FOLLOW_AS_in_createWindowExpr1845); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS72);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:536:5: ( createWindowExprModelAfter | LPAREN createWindowColumnList RPAREN )
            int alt24=2;
            int LA24_0 = input.LA(1);

            if ( (LA24_0==SELECT||LA24_0==IDENT) ) {
                alt24=1;
            }
            else if ( (LA24_0==LPAREN) ) {
                alt24=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 24, 0, input);

                throw nvae;
            }
            switch (alt24) {
                case 1 :
                    // EsperEPL2Grammar.g:537:6: createWindowExprModelAfter
                    {
                    pushFollow(FOLLOW_createWindowExprModelAfter_in_createWindowExpr1860);
                    createWindowExprModelAfter73=createWindowExprModelAfter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_createWindowExprModelAfter.add(createWindowExprModelAfter73.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:538:10: LPAREN createWindowColumnList RPAREN
                    {
                    LPAREN74=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_createWindowExpr1875); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN74);

                    pushFollow(FOLLOW_createWindowColumnList_in_createWindowExpr1877);
                    createWindowColumnList75=createWindowColumnList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_createWindowColumnList.add(createWindowColumnList75.getTree());
                    RPAREN76=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_createWindowExpr1879); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN76);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:540:5: (i1= INSERT ( WHERE expression )? )?
            int alt26=2;
            int LA26_0 = input.LA(1);

            if ( (LA26_0==INSERT) ) {
                alt26=1;
            }
            switch (alt26) {
                case 1 :
                    // EsperEPL2Grammar.g:540:6: i1= INSERT ( WHERE expression )?
                    {
                    i1=(Token)match(input,INSERT,FOLLOW_INSERT_in_createWindowExpr1896); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INSERT.add(i1);

                    // EsperEPL2Grammar.g:540:16: ( WHERE expression )?
                    int alt25=2;
                    int LA25_0 = input.LA(1);

                    if ( (LA25_0==WHERE) ) {
                        alt25=1;
                    }
                    switch (alt25) {
                        case 1 :
                            // EsperEPL2Grammar.g:540:17: WHERE expression
                            {
                            WHERE77=(Token)match(input,WHERE,FOLLOW_WHERE_in_createWindowExpr1899); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_WHERE.add(WHERE77);

                            pushFollow(FOLLOW_expression_in_createWindowExpr1901);
                            expression78=expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(expression78.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }



            // AST REWRITE
            // elements: i, i, createWindowExprModelAfter, INSERT, viewExpression, ri, expression, viewExpression, ri, createWindowColumnList, ru, ru, createWindowExprModelAfter, createWindowColumnList
            // token labels: ri, ru, i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_ri=new RewriteRuleTokenStream(adaptor,"token ri",ri);
            RewriteRuleTokenStream stream_ru=new RewriteRuleTokenStream(adaptor,"token ru",ru);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 541:3: -> {i1 != null}? ^( CREATE_WINDOW_EXPR $i ( viewExpression )* ( $ru)? ( $ri)? ( createWindowExprModelAfter )? ( createWindowColumnList )? ^( INSERT ( expression )? ) )
            if (i1 != null) {
                // EsperEPL2Grammar.g:541:20: ^( CREATE_WINDOW_EXPR $i ( viewExpression )* ( $ru)? ( $ri)? ( createWindowExprModelAfter )? ( createWindowColumnList )? ^( INSERT ( expression )? ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_WINDOW_EXPR, "CREATE_WINDOW_EXPR"), root_1);

                adaptor.addChild(root_1, stream_i.nextNode());
                // EsperEPL2Grammar.g:541:44: ( viewExpression )*
                while ( stream_viewExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_viewExpression.nextTree());

                }
                stream_viewExpression.reset();
                // EsperEPL2Grammar.g:541:60: ( $ru)?
                if ( stream_ru.hasNext() ) {
                    adaptor.addChild(root_1, stream_ru.nextNode());

                }
                stream_ru.reset();
                // EsperEPL2Grammar.g:541:65: ( $ri)?
                if ( stream_ri.hasNext() ) {
                    adaptor.addChild(root_1, stream_ri.nextNode());

                }
                stream_ri.reset();
                // EsperEPL2Grammar.g:541:70: ( createWindowExprModelAfter )?
                if ( stream_createWindowExprModelAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_createWindowExprModelAfter.nextTree());

                }
                stream_createWindowExprModelAfter.reset();
                // EsperEPL2Grammar.g:541:98: ( createWindowColumnList )?
                if ( stream_createWindowColumnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_createWindowColumnList.nextTree());

                }
                stream_createWindowColumnList.reset();
                // EsperEPL2Grammar.g:542:5: ^( INSERT ( expression )? )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot(stream_INSERT.nextNode(), root_2);

                // EsperEPL2Grammar.g:542:14: ( expression )?
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_2, stream_expression.nextTree());

                }
                stream_expression.reset();

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 543:3: -> ^( CREATE_WINDOW_EXPR $i ( viewExpression )* ( $ru)? ( $ri)? ( createWindowExprModelAfter )? ( createWindowColumnList )? )
            {
                // EsperEPL2Grammar.g:543:6: ^( CREATE_WINDOW_EXPR $i ( viewExpression )* ( $ru)? ( $ri)? ( createWindowExprModelAfter )? ( createWindowColumnList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_WINDOW_EXPR, "CREATE_WINDOW_EXPR"), root_1);

                adaptor.addChild(root_1, stream_i.nextNode());
                // EsperEPL2Grammar.g:543:30: ( viewExpression )*
                while ( stream_viewExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_viewExpression.nextTree());

                }
                stream_viewExpression.reset();
                // EsperEPL2Grammar.g:543:46: ( $ru)?
                if ( stream_ru.hasNext() ) {
                    adaptor.addChild(root_1, stream_ru.nextNode());

                }
                stream_ru.reset();
                // EsperEPL2Grammar.g:543:51: ( $ri)?
                if ( stream_ri.hasNext() ) {
                    adaptor.addChild(root_1, stream_ri.nextNode());

                }
                stream_ri.reset();
                // EsperEPL2Grammar.g:543:56: ( createWindowExprModelAfter )?
                if ( stream_createWindowExprModelAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_createWindowExprModelAfter.nextTree());

                }
                stream_createWindowExprModelAfter.reset();
                // EsperEPL2Grammar.g:543:84: ( createWindowColumnList )?
                if ( stream_createWindowColumnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_createWindowColumnList.nextTree());

                }
                stream_createWindowColumnList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "createWindowExpr"

    public static class createWindowExprModelAfter_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "createWindowExprModelAfter"
    // EsperEPL2Grammar.g:546:1: createWindowExprModelAfter : ( SELECT createSelectionList FROM )? classIdentifier ;
    public final EsperEPL2GrammarParser.createWindowExprModelAfter_return createWindowExprModelAfter() throws RecognitionException {
        EsperEPL2GrammarParser.createWindowExprModelAfter_return retval = new EsperEPL2GrammarParser.createWindowExprModelAfter_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token SELECT79=null;
        Token FROM81=null;
        EsperEPL2GrammarParser.createSelectionList_return createSelectionList80 = null;

        EsperEPL2GrammarParser.classIdentifier_return classIdentifier82 = null;


        CommonTree SELECT79_tree=null;
        CommonTree FROM81_tree=null;

        try {
            // EsperEPL2Grammar.g:547:2: ( ( SELECT createSelectionList FROM )? classIdentifier )
            // EsperEPL2Grammar.g:547:4: ( SELECT createSelectionList FROM )? classIdentifier
            {
            root_0 = (CommonTree)adaptor.nil();

            // EsperEPL2Grammar.g:547:4: ( SELECT createSelectionList FROM )?
            int alt27=2;
            int LA27_0 = input.LA(1);

            if ( (LA27_0==SELECT) ) {
                alt27=1;
            }
            switch (alt27) {
                case 1 :
                    // EsperEPL2Grammar.g:547:5: SELECT createSelectionList FROM
                    {
                    SELECT79=(Token)match(input,SELECT,FOLLOW_SELECT_in_createWindowExprModelAfter1988); if (state.failed) return retval;
                    pushFollow(FOLLOW_createSelectionList_in_createWindowExprModelAfter1991);
                    createSelectionList80=createSelectionList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createSelectionList80.getTree());
                    FROM81=(Token)match(input,FROM,FOLLOW_FROM_in_createWindowExprModelAfter1993); if (state.failed) return retval;

                    }
                    break;

            }

            pushFollow(FOLLOW_classIdentifier_in_createWindowExprModelAfter1998);
            classIdentifier82=classIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier82.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "createWindowExprModelAfter"

    public static class createVariableExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "createVariableExpr"
    // EsperEPL2Grammar.g:550:1: createVariableExpr : CREATE VARIABLE t= IDENT n= IDENT ( EQUALS expression )? -> ^( CREATE_VARIABLE_EXPR $t $n ( expression )? ) ;
    public final EsperEPL2GrammarParser.createVariableExpr_return createVariableExpr() throws RecognitionException {
        EsperEPL2GrammarParser.createVariableExpr_return retval = new EsperEPL2GrammarParser.createVariableExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token t=null;
        Token n=null;
        Token CREATE83=null;
        Token VARIABLE84=null;
        Token EQUALS85=null;
        EsperEPL2GrammarParser.expression_return expression86 = null;


        CommonTree t_tree=null;
        CommonTree n_tree=null;
        CommonTree CREATE83_tree=null;
        CommonTree VARIABLE84_tree=null;
        CommonTree EQUALS85_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_CREATE=new RewriteRuleTokenStream(adaptor,"token CREATE");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleTokenStream stream_VARIABLE=new RewriteRuleTokenStream(adaptor,"token VARIABLE");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            // EsperEPL2Grammar.g:551:2: ( CREATE VARIABLE t= IDENT n= IDENT ( EQUALS expression )? -> ^( CREATE_VARIABLE_EXPR $t $n ( expression )? ) )
            // EsperEPL2Grammar.g:551:4: CREATE VARIABLE t= IDENT n= IDENT ( EQUALS expression )?
            {
            CREATE83=(Token)match(input,CREATE,FOLLOW_CREATE_in_createVariableExpr2011); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CREATE.add(CREATE83);

            VARIABLE84=(Token)match(input,VARIABLE,FOLLOW_VARIABLE_in_createVariableExpr2013); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_VARIABLE.add(VARIABLE84);

            t=(Token)match(input,IDENT,FOLLOW_IDENT_in_createVariableExpr2017); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(t);

            n=(Token)match(input,IDENT,FOLLOW_IDENT_in_createVariableExpr2021); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(n);

            // EsperEPL2Grammar.g:551:36: ( EQUALS expression )?
            int alt28=2;
            int LA28_0 = input.LA(1);

            if ( (LA28_0==EQUALS) ) {
                alt28=1;
            }
            switch (alt28) {
                case 1 :
                    // EsperEPL2Grammar.g:551:37: EQUALS expression
                    {
                    EQUALS85=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_createVariableExpr2024); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS85);

                    pushFollow(FOLLOW_expression_in_createVariableExpr2026);
                    expression86=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression86.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: t, expression, n
            // token labels: t, n
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_t=new RewriteRuleTokenStream(adaptor,"token t",t);
            RewriteRuleTokenStream stream_n=new RewriteRuleTokenStream(adaptor,"token n",n);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 552:3: -> ^( CREATE_VARIABLE_EXPR $t $n ( expression )? )
            {
                // EsperEPL2Grammar.g:552:6: ^( CREATE_VARIABLE_EXPR $t $n ( expression )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_VARIABLE_EXPR, "CREATE_VARIABLE_EXPR"), root_1);

                adaptor.addChild(root_1, stream_t.nextNode());
                adaptor.addChild(root_1, stream_n.nextNode());
                // EsperEPL2Grammar.g:552:35: ( expression )?
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());

                }
                stream_expression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "createVariableExpr"

    public static class createWindowColumnList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "createWindowColumnList"
    // EsperEPL2Grammar.g:555:1: createWindowColumnList : createWindowColumnListElement ( COMMA createWindowColumnListElement )* -> ^( CREATE_WINDOW_COL_TYPE_LIST ( createWindowColumnListElement )+ ) ;
    public final EsperEPL2GrammarParser.createWindowColumnList_return createWindowColumnList() throws RecognitionException {
        EsperEPL2GrammarParser.createWindowColumnList_return retval = new EsperEPL2GrammarParser.createWindowColumnList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA88=null;
        EsperEPL2GrammarParser.createWindowColumnListElement_return createWindowColumnListElement87 = null;

        EsperEPL2GrammarParser.createWindowColumnListElement_return createWindowColumnListElement89 = null;


        CommonTree COMMA88_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_createWindowColumnListElement=new RewriteRuleSubtreeStream(adaptor,"rule createWindowColumnListElement");
         paraphrases.push("create window column list"); 
        try {
            // EsperEPL2Grammar.g:558:2: ( createWindowColumnListElement ( COMMA createWindowColumnListElement )* -> ^( CREATE_WINDOW_COL_TYPE_LIST ( createWindowColumnListElement )+ ) )
            // EsperEPL2Grammar.g:558:4: createWindowColumnListElement ( COMMA createWindowColumnListElement )*
            {
            pushFollow(FOLLOW_createWindowColumnListElement_in_createWindowColumnList2069);
            createWindowColumnListElement87=createWindowColumnListElement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_createWindowColumnListElement.add(createWindowColumnListElement87.getTree());
            // EsperEPL2Grammar.g:558:34: ( COMMA createWindowColumnListElement )*
            loop29:
            do {
                int alt29=2;
                int LA29_0 = input.LA(1);

                if ( (LA29_0==COMMA) ) {
                    alt29=1;
                }


                switch (alt29) {
            	case 1 :
            	    // EsperEPL2Grammar.g:558:35: COMMA createWindowColumnListElement
            	    {
            	    COMMA88=(Token)match(input,COMMA,FOLLOW_COMMA_in_createWindowColumnList2072); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA88);

            	    pushFollow(FOLLOW_createWindowColumnListElement_in_createWindowColumnList2074);
            	    createWindowColumnListElement89=createWindowColumnListElement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_createWindowColumnListElement.add(createWindowColumnListElement89.getTree());

            	    }
            	    break;

            	default :
            	    break loop29;
                }
            } while (true);



            // AST REWRITE
            // elements: createWindowColumnListElement
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 559:3: -> ^( CREATE_WINDOW_COL_TYPE_LIST ( createWindowColumnListElement )+ )
            {
                // EsperEPL2Grammar.g:559:6: ^( CREATE_WINDOW_COL_TYPE_LIST ( createWindowColumnListElement )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_WINDOW_COL_TYPE_LIST, "CREATE_WINDOW_COL_TYPE_LIST"), root_1);

                if ( !(stream_createWindowColumnListElement.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_createWindowColumnListElement.hasNext() ) {
                    adaptor.addChild(root_1, stream_createWindowColumnListElement.nextTree());

                }
                stream_createWindowColumnListElement.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "createWindowColumnList"

    public static class createWindowColumnListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "createWindowColumnListElement"
    // EsperEPL2Grammar.g:562:1: createWindowColumnListElement : name= IDENT type= IDENT -> ^( CREATE_WINDOW_COL_TYPE $name $type) ;
    public final EsperEPL2GrammarParser.createWindowColumnListElement_return createWindowColumnListElement() throws RecognitionException {
        EsperEPL2GrammarParser.createWindowColumnListElement_return retval = new EsperEPL2GrammarParser.createWindowColumnListElement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token name=null;
        Token type=null;

        CommonTree name_tree=null;
        CommonTree type_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");

        try {
            // EsperEPL2Grammar.g:563:2: (name= IDENT type= IDENT -> ^( CREATE_WINDOW_COL_TYPE $name $type) )
            // EsperEPL2Grammar.g:563:7: name= IDENT type= IDENT
            {
            name=(Token)match(input,IDENT,FOLLOW_IDENT_in_createWindowColumnListElement2104); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(name);

            type=(Token)match(input,IDENT,FOLLOW_IDENT_in_createWindowColumnListElement2108); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(type);



            // AST REWRITE
            // elements: type, name
            // token labels: name, type
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_name=new RewriteRuleTokenStream(adaptor,"token name",name);
            RewriteRuleTokenStream stream_type=new RewriteRuleTokenStream(adaptor,"token type",type);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 564:3: -> ^( CREATE_WINDOW_COL_TYPE $name $type)
            {
                // EsperEPL2Grammar.g:564:6: ^( CREATE_WINDOW_COL_TYPE $name $type)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_WINDOW_COL_TYPE, "CREATE_WINDOW_COL_TYPE"), root_1);

                adaptor.addChild(root_1, stream_name.nextNode());
                adaptor.addChild(root_1, stream_type.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "createWindowColumnListElement"

    public static class createSelectionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "createSelectionList"
    // EsperEPL2Grammar.g:567:1: createSelectionList : createSelectionListElement ( COMMA createSelectionListElement )* -> ^( CREATE_WINDOW_SELECT_EXPR ( createSelectionListElement )+ ) ;
    public final EsperEPL2GrammarParser.createSelectionList_return createSelectionList() throws RecognitionException {
        EsperEPL2GrammarParser.createSelectionList_return retval = new EsperEPL2GrammarParser.createSelectionList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA91=null;
        EsperEPL2GrammarParser.createSelectionListElement_return createSelectionListElement90 = null;

        EsperEPL2GrammarParser.createSelectionListElement_return createSelectionListElement92 = null;


        CommonTree COMMA91_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_createSelectionListElement=new RewriteRuleSubtreeStream(adaptor,"rule createSelectionListElement");
         paraphrases.push("select clause"); 
        try {
            // EsperEPL2Grammar.g:570:2: ( createSelectionListElement ( COMMA createSelectionListElement )* -> ^( CREATE_WINDOW_SELECT_EXPR ( createSelectionListElement )+ ) )
            // EsperEPL2Grammar.g:570:4: createSelectionListElement ( COMMA createSelectionListElement )*
            {
            pushFollow(FOLLOW_createSelectionListElement_in_createSelectionList2146);
            createSelectionListElement90=createSelectionListElement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_createSelectionListElement.add(createSelectionListElement90.getTree());
            // EsperEPL2Grammar.g:570:31: ( COMMA createSelectionListElement )*
            loop30:
            do {
                int alt30=2;
                int LA30_0 = input.LA(1);

                if ( (LA30_0==COMMA) ) {
                    alt30=1;
                }


                switch (alt30) {
            	case 1 :
            	    // EsperEPL2Grammar.g:570:32: COMMA createSelectionListElement
            	    {
            	    COMMA91=(Token)match(input,COMMA,FOLLOW_COMMA_in_createSelectionList2149); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA91);

            	    pushFollow(FOLLOW_createSelectionListElement_in_createSelectionList2151);
            	    createSelectionListElement92=createSelectionListElement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_createSelectionListElement.add(createSelectionListElement92.getTree());

            	    }
            	    break;

            	default :
            	    break loop30;
                }
            } while (true);



            // AST REWRITE
            // elements: createSelectionListElement
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 571:3: -> ^( CREATE_WINDOW_SELECT_EXPR ( createSelectionListElement )+ )
            {
                // EsperEPL2Grammar.g:571:6: ^( CREATE_WINDOW_SELECT_EXPR ( createSelectionListElement )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_WINDOW_SELECT_EXPR, "CREATE_WINDOW_SELECT_EXPR"), root_1);

                if ( !(stream_createSelectionListElement.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_createSelectionListElement.hasNext() ) {
                    adaptor.addChild(root_1, stream_createSelectionListElement.nextTree());

                }
                stream_createSelectionListElement.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "createSelectionList"

    public static class createSelectionListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "createSelectionListElement"
    // EsperEPL2Grammar.g:574:1: createSelectionListElement : (s= STAR -> WILDCARD_SELECT[$s] | eventProperty ( AS i= IDENT )? -> ^( SELECTION_ELEMENT_EXPR eventProperty ( $i)? ) | constant AS i= IDENT -> ^( SELECTION_ELEMENT_EXPR constant ( $i)? ) );
    public final EsperEPL2GrammarParser.createSelectionListElement_return createSelectionListElement() throws RecognitionException {
        EsperEPL2GrammarParser.createSelectionListElement_return retval = new EsperEPL2GrammarParser.createSelectionListElement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token s=null;
        Token i=null;
        Token AS94=null;
        Token AS96=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty93 = null;

        EsperEPL2GrammarParser.constant_return constant95 = null;


        CommonTree s_tree=null;
        CommonTree i_tree=null;
        CommonTree AS94_tree=null;
        CommonTree AS96_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleSubtreeStream stream_constant=new RewriteRuleSubtreeStream(adaptor,"rule constant");
        RewriteRuleSubtreeStream stream_eventProperty=new RewriteRuleSubtreeStream(adaptor,"rule eventProperty");
        try {
            // EsperEPL2Grammar.g:575:2: (s= STAR -> WILDCARD_SELECT[$s] | eventProperty ( AS i= IDENT )? -> ^( SELECTION_ELEMENT_EXPR eventProperty ( $i)? ) | constant AS i= IDENT -> ^( SELECTION_ELEMENT_EXPR constant ( $i)? ) )
            int alt32=3;
            switch ( input.LA(1) ) {
            case STAR:
                {
                alt32=1;
                }
                break;
            case WINDOW:
            case ESCAPE:
            case EVERY_EXPR:
            case SUM:
            case AVG:
            case MAX:
            case MIN:
            case COALESCE:
            case MEDIAN:
            case STDDEV:
            case AVEDEV:
            case COUNT:
            case OUTER:
            case JOIN:
            case LEFT:
            case RIGHT:
            case FULL:
            case EVENTS:
            case FIRST:
            case LAST:
            case UNIDIRECTIONAL:
            case RETAINUNION:
            case RETAININTERSECTION:
            case PATTERN:
            case SQL:
            case METADATASQL:
            case PREVIOUS:
            case PRIOR:
            case WEEKDAY:
            case LW:
            case INSTANCEOF:
            case CAST:
            case SNAPSHOT:
            case VARIABLE:
            case UNTIL:
            case AT:
            case IDENT:
                {
                alt32=2;
                }
                break;
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case NUM_DOUBLE:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case PLUS:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt32=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 32, 0, input);

                throw nvae;
            }

            switch (alt32) {
                case 1 :
                    // EsperEPL2Grammar.g:575:7: s= STAR
                    {
                    s=(Token)match(input,STAR,FOLLOW_STAR_in_createSelectionListElement2180); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STAR.add(s);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 576:3: -> WILDCARD_SELECT[$s]
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(WILDCARD_SELECT, s));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:577:4: eventProperty ( AS i= IDENT )?
                    {
                    pushFollow(FOLLOW_eventProperty_in_createSelectionListElement2192);
                    eventProperty93=eventProperty();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_eventProperty.add(eventProperty93.getTree());
                    // EsperEPL2Grammar.g:577:18: ( AS i= IDENT )?
                    int alt31=2;
                    int LA31_0 = input.LA(1);

                    if ( (LA31_0==AS) ) {
                        alt31=1;
                    }
                    switch (alt31) {
                        case 1 :
                            // EsperEPL2Grammar.g:577:19: AS i= IDENT
                            {
                            AS94=(Token)match(input,AS,FOLLOW_AS_in_createSelectionListElement2195); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_AS.add(AS94);

                            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_createSelectionListElement2199); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IDENT.add(i);


                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: eventProperty, i
                    // token labels: i
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 578:3: -> ^( SELECTION_ELEMENT_EXPR eventProperty ( $i)? )
                    {
                        // EsperEPL2Grammar.g:578:6: ^( SELECTION_ELEMENT_EXPR eventProperty ( $i)? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);

                        adaptor.addChild(root_1, stream_eventProperty.nextTree());
                        // EsperEPL2Grammar.g:578:45: ( $i)?
                        if ( stream_i.hasNext() ) {
                            adaptor.addChild(root_1, stream_i.nextNode());

                        }
                        stream_i.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:579:4: constant AS i= IDENT
                    {
                    pushFollow(FOLLOW_constant_in_createSelectionListElement2220);
                    constant95=constant();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_constant.add(constant95.getTree());
                    AS96=(Token)match(input,AS,FOLLOW_AS_in_createSelectionListElement2222); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS96);

                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_createSelectionListElement2226); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);



                    // AST REWRITE
                    // elements: i, constant
                    // token labels: i
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 580:3: -> ^( SELECTION_ELEMENT_EXPR constant ( $i)? )
                    {
                        // EsperEPL2Grammar.g:580:6: ^( SELECTION_ELEMENT_EXPR constant ( $i)? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);

                        adaptor.addChild(root_1, stream_constant.nextTree());
                        // EsperEPL2Grammar.g:580:40: ( $i)?
                        if ( stream_i.hasNext() ) {
                            adaptor.addChild(root_1, stream_i.nextNode());

                        }
                        stream_i.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "createSelectionListElement"

    public static class insertIntoExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "insertIntoExpr"
    // EsperEPL2Grammar.g:583:1: insertIntoExpr : (s= ISTREAM | s= RSTREAM )? INTO i= IDENT ( insertIntoColumnList )? -> ^( INSERTINTO_EXPR ( $s)? $i ( insertIntoColumnList )? ) ;
    public final EsperEPL2GrammarParser.insertIntoExpr_return insertIntoExpr() throws RecognitionException {
        EsperEPL2GrammarParser.insertIntoExpr_return retval = new EsperEPL2GrammarParser.insertIntoExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token s=null;
        Token i=null;
        Token INTO97=null;
        EsperEPL2GrammarParser.insertIntoColumnList_return insertIntoColumnList98 = null;


        CommonTree s_tree=null;
        CommonTree i_tree=null;
        CommonTree INTO97_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_ISTREAM=new RewriteRuleTokenStream(adaptor,"token ISTREAM");
        RewriteRuleTokenStream stream_INTO=new RewriteRuleTokenStream(adaptor,"token INTO");
        RewriteRuleTokenStream stream_RSTREAM=new RewriteRuleTokenStream(adaptor,"token RSTREAM");
        RewriteRuleSubtreeStream stream_insertIntoColumnList=new RewriteRuleSubtreeStream(adaptor,"rule insertIntoColumnList");
         paraphrases.push("insert-into clause"); 
        try {
            // EsperEPL2Grammar.g:586:2: ( (s= ISTREAM | s= RSTREAM )? INTO i= IDENT ( insertIntoColumnList )? -> ^( INSERTINTO_EXPR ( $s)? $i ( insertIntoColumnList )? ) )
            // EsperEPL2Grammar.g:586:4: (s= ISTREAM | s= RSTREAM )? INTO i= IDENT ( insertIntoColumnList )?
            {
            // EsperEPL2Grammar.g:586:4: (s= ISTREAM | s= RSTREAM )?
            int alt33=3;
            int LA33_0 = input.LA(1);

            if ( (LA33_0==ISTREAM) ) {
                alt33=1;
            }
            else if ( (LA33_0==RSTREAM) ) {
                alt33=2;
            }
            switch (alt33) {
                case 1 :
                    // EsperEPL2Grammar.g:586:5: s= ISTREAM
                    {
                    s=(Token)match(input,ISTREAM,FOLLOW_ISTREAM_in_insertIntoExpr2265); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ISTREAM.add(s);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:586:17: s= RSTREAM
                    {
                    s=(Token)match(input,RSTREAM,FOLLOW_RSTREAM_in_insertIntoExpr2271); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RSTREAM.add(s);


                    }
                    break;

            }

            INTO97=(Token)match(input,INTO,FOLLOW_INTO_in_insertIntoExpr2275); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_INTO.add(INTO97);

            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_insertIntoExpr2279); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);

            // EsperEPL2Grammar.g:586:42: ( insertIntoColumnList )?
            int alt34=2;
            int LA34_0 = input.LA(1);

            if ( (LA34_0==LPAREN) ) {
                alt34=1;
            }
            switch (alt34) {
                case 1 :
                    // EsperEPL2Grammar.g:586:43: insertIntoColumnList
                    {
                    pushFollow(FOLLOW_insertIntoColumnList_in_insertIntoExpr2282);
                    insertIntoColumnList98=insertIntoColumnList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_insertIntoColumnList.add(insertIntoColumnList98.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: insertIntoColumnList, i, s
            // token labels: s, i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 587:3: -> ^( INSERTINTO_EXPR ( $s)? $i ( insertIntoColumnList )? )
            {
                // EsperEPL2Grammar.g:587:6: ^( INSERTINTO_EXPR ( $s)? $i ( insertIntoColumnList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(INSERTINTO_EXPR, "INSERTINTO_EXPR"), root_1);

                // EsperEPL2Grammar.g:587:24: ( $s)?
                if ( stream_s.hasNext() ) {
                    adaptor.addChild(root_1, stream_s.nextNode());

                }
                stream_s.reset();
                adaptor.addChild(root_1, stream_i.nextNode());
                // EsperEPL2Grammar.g:587:31: ( insertIntoColumnList )?
                if ( stream_insertIntoColumnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_insertIntoColumnList.nextTree());

                }
                stream_insertIntoColumnList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "insertIntoExpr"

    public static class insertIntoColumnList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "insertIntoColumnList"
    // EsperEPL2Grammar.g:590:1: insertIntoColumnList : LPAREN IDENT ( COMMA IDENT )* RPAREN -> ^( INSERTINTO_EXPRCOL ( IDENT )* ) ;
    public final EsperEPL2GrammarParser.insertIntoColumnList_return insertIntoColumnList() throws RecognitionException {
        EsperEPL2GrammarParser.insertIntoColumnList_return retval = new EsperEPL2GrammarParser.insertIntoColumnList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LPAREN99=null;
        Token IDENT100=null;
        Token COMMA101=null;
        Token IDENT102=null;
        Token RPAREN103=null;

        CommonTree LPAREN99_tree=null;
        CommonTree IDENT100_tree=null;
        CommonTree COMMA101_tree=null;
        CommonTree IDENT102_tree=null;
        CommonTree RPAREN103_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");

        try {
            // EsperEPL2Grammar.g:591:2: ( LPAREN IDENT ( COMMA IDENT )* RPAREN -> ^( INSERTINTO_EXPRCOL ( IDENT )* ) )
            // EsperEPL2Grammar.g:591:5: LPAREN IDENT ( COMMA IDENT )* RPAREN
            {
            LPAREN99=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_insertIntoColumnList2316); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN99);

            IDENT100=(Token)match(input,IDENT,FOLLOW_IDENT_in_insertIntoColumnList2318); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(IDENT100);

            // EsperEPL2Grammar.g:591:18: ( COMMA IDENT )*
            loop35:
            do {
                int alt35=2;
                int LA35_0 = input.LA(1);

                if ( (LA35_0==COMMA) ) {
                    alt35=1;
                }


                switch (alt35) {
            	case 1 :
            	    // EsperEPL2Grammar.g:591:19: COMMA IDENT
            	    {
            	    COMMA101=(Token)match(input,COMMA,FOLLOW_COMMA_in_insertIntoColumnList2321); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA101);

            	    IDENT102=(Token)match(input,IDENT,FOLLOW_IDENT_in_insertIntoColumnList2323); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_IDENT.add(IDENT102);


            	    }
            	    break;

            	default :
            	    break loop35;
                }
            } while (true);

            RPAREN103=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_insertIntoColumnList2327); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN103);



            // AST REWRITE
            // elements: IDENT
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 592:3: -> ^( INSERTINTO_EXPRCOL ( IDENT )* )
            {
                // EsperEPL2Grammar.g:592:6: ^( INSERTINTO_EXPRCOL ( IDENT )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(INSERTINTO_EXPRCOL, "INSERTINTO_EXPRCOL"), root_1);

                // EsperEPL2Grammar.g:592:27: ( IDENT )*
                while ( stream_IDENT.hasNext() ) {
                    adaptor.addChild(root_1, stream_IDENT.nextNode());

                }
                stream_IDENT.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "insertIntoColumnList"

    public static class fromClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "fromClause"
    // EsperEPL2Grammar.g:595:1: fromClause : streamExpression ( regularJoin | outerJoinList ) ;
    public final EsperEPL2GrammarParser.fromClause_return fromClause() throws RecognitionException {
        EsperEPL2GrammarParser.fromClause_return retval = new EsperEPL2GrammarParser.fromClause_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.streamExpression_return streamExpression104 = null;

        EsperEPL2GrammarParser.regularJoin_return regularJoin105 = null;

        EsperEPL2GrammarParser.outerJoinList_return outerJoinList106 = null;



         paraphrases.push("from clause"); 
        try {
            // EsperEPL2Grammar.g:598:2: ( streamExpression ( regularJoin | outerJoinList ) )
            // EsperEPL2Grammar.g:598:4: streamExpression ( regularJoin | outerJoinList )
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_streamExpression_in_fromClause2362);
            streamExpression104=streamExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, streamExpression104.getTree());
            // EsperEPL2Grammar.g:598:21: ( regularJoin | outerJoinList )
            int alt36=2;
            int LA36_0 = input.LA(1);

            if ( (LA36_0==EOF||LA36_0==WHERE||(LA36_0>=GROUP && LA36_0<=HAVING)||LA36_0==OUTPUT||LA36_0==ORDER||LA36_0==ROW_LIMIT_EXPR||LA36_0==COMMA) ) {
                alt36=1;
            }
            else if ( ((LA36_0>=INNER && LA36_0<=FULL)) ) {
                alt36=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 36, 0, input);

                throw nvae;
            }
            switch (alt36) {
                case 1 :
                    // EsperEPL2Grammar.g:598:22: regularJoin
                    {
                    pushFollow(FOLLOW_regularJoin_in_fromClause2365);
                    regularJoin105=regularJoin();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, regularJoin105.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:598:36: outerJoinList
                    {
                    pushFollow(FOLLOW_outerJoinList_in_fromClause2369);
                    outerJoinList106=outerJoinList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoinList106.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "fromClause"

    public static class regularJoin_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "regularJoin"
    // EsperEPL2Grammar.g:601:1: regularJoin : ( COMMA streamExpression )* ;
    public final EsperEPL2GrammarParser.regularJoin_return regularJoin() throws RecognitionException {
        EsperEPL2GrammarParser.regularJoin_return retval = new EsperEPL2GrammarParser.regularJoin_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA107=null;
        EsperEPL2GrammarParser.streamExpression_return streamExpression108 = null;


        CommonTree COMMA107_tree=null;

        try {
            // EsperEPL2Grammar.g:602:2: ( ( COMMA streamExpression )* )
            // EsperEPL2Grammar.g:602:4: ( COMMA streamExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            // EsperEPL2Grammar.g:602:4: ( COMMA streamExpression )*
            loop37:
            do {
                int alt37=2;
                int LA37_0 = input.LA(1);

                if ( (LA37_0==COMMA) ) {
                    alt37=1;
                }


                switch (alt37) {
            	case 1 :
            	    // EsperEPL2Grammar.g:602:5: COMMA streamExpression
            	    {
            	    COMMA107=(Token)match(input,COMMA,FOLLOW_COMMA_in_regularJoin2383); if (state.failed) return retval;
            	    pushFollow(FOLLOW_streamExpression_in_regularJoin2386);
            	    streamExpression108=streamExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, streamExpression108.getTree());

            	    }
            	    break;

            	default :
            	    break loop37;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "regularJoin"

    public static class outerJoinList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "outerJoinList"
    // EsperEPL2Grammar.g:605:1: outerJoinList : outerJoin ( outerJoin )* ;
    public final EsperEPL2GrammarParser.outerJoinList_return outerJoinList() throws RecognitionException {
        EsperEPL2GrammarParser.outerJoinList_return retval = new EsperEPL2GrammarParser.outerJoinList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.outerJoin_return outerJoin109 = null;

        EsperEPL2GrammarParser.outerJoin_return outerJoin110 = null;



        try {
            // EsperEPL2Grammar.g:606:2: ( outerJoin ( outerJoin )* )
            // EsperEPL2Grammar.g:606:4: outerJoin ( outerJoin )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_outerJoin_in_outerJoinList2400);
            outerJoin109=outerJoin();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoin109.getTree());
            // EsperEPL2Grammar.g:606:14: ( outerJoin )*
            loop38:
            do {
                int alt38=2;
                int LA38_0 = input.LA(1);

                if ( ((LA38_0>=INNER && LA38_0<=FULL)) ) {
                    alt38=1;
                }


                switch (alt38) {
            	case 1 :
            	    // EsperEPL2Grammar.g:606:15: outerJoin
            	    {
            	    pushFollow(FOLLOW_outerJoin_in_outerJoinList2403);
            	    outerJoin110=outerJoin();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoin110.getTree());

            	    }
            	    break;

            	default :
            	    break loop38;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "outerJoinList"

    public static class outerJoin_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "outerJoin"
    // EsperEPL2Grammar.g:609:1: outerJoin : ( ( (tl= LEFT | tr= RIGHT | tf= FULL ) OUTER )? | (i= INNER ) ) JOIN streamExpression outerJoinIdent -> {$i != null}? streamExpression ^( INNERJOIN_EXPR outerJoinIdent ) -> {$tl != null}? streamExpression ^( LEFT_OUTERJOIN_EXPR outerJoinIdent ) -> {$tr != null}? streamExpression ^( RIGHT_OUTERJOIN_EXPR outerJoinIdent ) -> streamExpression ^( FULL_OUTERJOIN_EXPR outerJoinIdent ) ;
    public final EsperEPL2GrammarParser.outerJoin_return outerJoin() throws RecognitionException {
        EsperEPL2GrammarParser.outerJoin_return retval = new EsperEPL2GrammarParser.outerJoin_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token tl=null;
        Token tr=null;
        Token tf=null;
        Token i=null;
        Token OUTER111=null;
        Token JOIN112=null;
        EsperEPL2GrammarParser.streamExpression_return streamExpression113 = null;

        EsperEPL2GrammarParser.outerJoinIdent_return outerJoinIdent114 = null;


        CommonTree tl_tree=null;
        CommonTree tr_tree=null;
        CommonTree tf_tree=null;
        CommonTree i_tree=null;
        CommonTree OUTER111_tree=null;
        CommonTree JOIN112_tree=null;
        RewriteRuleTokenStream stream_OUTER=new RewriteRuleTokenStream(adaptor,"token OUTER");
        RewriteRuleTokenStream stream_RIGHT=new RewriteRuleTokenStream(adaptor,"token RIGHT");
        RewriteRuleTokenStream stream_FULL=new RewriteRuleTokenStream(adaptor,"token FULL");
        RewriteRuleTokenStream stream_INNER=new RewriteRuleTokenStream(adaptor,"token INNER");
        RewriteRuleTokenStream stream_LEFT=new RewriteRuleTokenStream(adaptor,"token LEFT");
        RewriteRuleTokenStream stream_JOIN=new RewriteRuleTokenStream(adaptor,"token JOIN");
        RewriteRuleSubtreeStream stream_streamExpression=new RewriteRuleSubtreeStream(adaptor,"rule streamExpression");
        RewriteRuleSubtreeStream stream_outerJoinIdent=new RewriteRuleSubtreeStream(adaptor,"rule outerJoinIdent");
         paraphrases.push("outer join"); 
        try {
            // EsperEPL2Grammar.g:612:2: ( ( ( (tl= LEFT | tr= RIGHT | tf= FULL ) OUTER )? | (i= INNER ) ) JOIN streamExpression outerJoinIdent -> {$i != null}? streamExpression ^( INNERJOIN_EXPR outerJoinIdent ) -> {$tl != null}? streamExpression ^( LEFT_OUTERJOIN_EXPR outerJoinIdent ) -> {$tr != null}? streamExpression ^( RIGHT_OUTERJOIN_EXPR outerJoinIdent ) -> streamExpression ^( FULL_OUTERJOIN_EXPR outerJoinIdent ) )
            // EsperEPL2Grammar.g:612:4: ( ( (tl= LEFT | tr= RIGHT | tf= FULL ) OUTER )? | (i= INNER ) ) JOIN streamExpression outerJoinIdent
            {
            // EsperEPL2Grammar.g:612:4: ( ( (tl= LEFT | tr= RIGHT | tf= FULL ) OUTER )? | (i= INNER ) )
            int alt41=2;
            int LA41_0 = input.LA(1);

            if ( ((LA41_0>=JOIN && LA41_0<=FULL)) ) {
                alt41=1;
            }
            else if ( (LA41_0==INNER) ) {
                alt41=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 41, 0, input);

                throw nvae;
            }
            switch (alt41) {
                case 1 :
                    // EsperEPL2Grammar.g:613:14: ( (tl= LEFT | tr= RIGHT | tf= FULL ) OUTER )?
                    {
                    // EsperEPL2Grammar.g:613:14: ( (tl= LEFT | tr= RIGHT | tf= FULL ) OUTER )?
                    int alt40=2;
                    int LA40_0 = input.LA(1);

                    if ( ((LA40_0>=LEFT && LA40_0<=FULL)) ) {
                        alt40=1;
                    }
                    switch (alt40) {
                        case 1 :
                            // EsperEPL2Grammar.g:613:15: (tl= LEFT | tr= RIGHT | tf= FULL ) OUTER
                            {
                            // EsperEPL2Grammar.g:613:15: (tl= LEFT | tr= RIGHT | tf= FULL )
                            int alt39=3;
                            switch ( input.LA(1) ) {
                            case LEFT:
                                {
                                alt39=1;
                                }
                                break;
                            case RIGHT:
                                {
                                alt39=2;
                                }
                                break;
                            case FULL:
                                {
                                alt39=3;
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 39, 0, input);

                                throw nvae;
                            }

                            switch (alt39) {
                                case 1 :
                                    // EsperEPL2Grammar.g:613:16: tl= LEFT
                                    {
                                    tl=(Token)match(input,LEFT,FOLLOW_LEFT_in_outerJoin2446); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_LEFT.add(tl);


                                    }
                                    break;
                                case 2 :
                                    // EsperEPL2Grammar.g:613:24: tr= RIGHT
                                    {
                                    tr=(Token)match(input,RIGHT,FOLLOW_RIGHT_in_outerJoin2450); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_RIGHT.add(tr);


                                    }
                                    break;
                                case 3 :
                                    // EsperEPL2Grammar.g:613:33: tf= FULL
                                    {
                                    tf=(Token)match(input,FULL,FOLLOW_FULL_in_outerJoin2454); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_FULL.add(tf);


                                    }
                                    break;

                            }

                            OUTER111=(Token)match(input,OUTER,FOLLOW_OUTER_in_outerJoin2457); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_OUTER.add(OUTER111);


                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:614:14: (i= INNER )
                    {
                    // EsperEPL2Grammar.g:614:14: (i= INNER )
                    // EsperEPL2Grammar.g:614:15: i= INNER
                    {
                    i=(Token)match(input,INNER,FOLLOW_INNER_in_outerJoin2478); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INNER.add(i);


                    }


                    }
                    break;

            }

            JOIN112=(Token)match(input,JOIN,FOLLOW_JOIN_in_outerJoin2492); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_JOIN.add(JOIN112);

            pushFollow(FOLLOW_streamExpression_in_outerJoin2494);
            streamExpression113=streamExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_streamExpression.add(streamExpression113.getTree());
            pushFollow(FOLLOW_outerJoinIdent_in_outerJoin2496);
            outerJoinIdent114=outerJoinIdent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_outerJoinIdent.add(outerJoinIdent114.getTree());


            // AST REWRITE
            // elements: outerJoinIdent, outerJoinIdent, outerJoinIdent, outerJoinIdent, streamExpression, streamExpression, streamExpression, streamExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 616:3: -> {$i != null}? streamExpression ^( INNERJOIN_EXPR outerJoinIdent )
            if (i != null) {
                adaptor.addChild(root_0, stream_streamExpression.nextTree());
                // EsperEPL2Grammar.g:616:37: ^( INNERJOIN_EXPR outerJoinIdent )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(INNERJOIN_EXPR, "INNERJOIN_EXPR"), root_1);

                adaptor.addChild(root_1, stream_outerJoinIdent.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 617:3: -> {$tl != null}? streamExpression ^( LEFT_OUTERJOIN_EXPR outerJoinIdent )
            if (tl != null) {
                adaptor.addChild(root_0, stream_streamExpression.nextTree());
                // EsperEPL2Grammar.g:617:38: ^( LEFT_OUTERJOIN_EXPR outerJoinIdent )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LEFT_OUTERJOIN_EXPR, "LEFT_OUTERJOIN_EXPR"), root_1);

                adaptor.addChild(root_1, stream_outerJoinIdent.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 618:3: -> {$tr != null}? streamExpression ^( RIGHT_OUTERJOIN_EXPR outerJoinIdent )
            if (tr != null) {
                adaptor.addChild(root_0, stream_streamExpression.nextTree());
                // EsperEPL2Grammar.g:618:38: ^( RIGHT_OUTERJOIN_EXPR outerJoinIdent )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(RIGHT_OUTERJOIN_EXPR, "RIGHT_OUTERJOIN_EXPR"), root_1);

                adaptor.addChild(root_1, stream_outerJoinIdent.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 619:3: -> streamExpression ^( FULL_OUTERJOIN_EXPR outerJoinIdent )
            {
                adaptor.addChild(root_0, stream_streamExpression.nextTree());
                // EsperEPL2Grammar.g:619:23: ^( FULL_OUTERJOIN_EXPR outerJoinIdent )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FULL_OUTERJOIN_EXPR, "FULL_OUTERJOIN_EXPR"), root_1);

                adaptor.addChild(root_1, stream_outerJoinIdent.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "outerJoin"

    public static class outerJoinIdent_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "outerJoinIdent"
    // EsperEPL2Grammar.g:622:1: outerJoinIdent : ON outerJoinIdentPair ( AND_EXPR outerJoinIdentPair )* ;
    public final EsperEPL2GrammarParser.outerJoinIdent_return outerJoinIdent() throws RecognitionException {
        EsperEPL2GrammarParser.outerJoinIdent_return retval = new EsperEPL2GrammarParser.outerJoinIdent_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token ON115=null;
        Token AND_EXPR117=null;
        EsperEPL2GrammarParser.outerJoinIdentPair_return outerJoinIdentPair116 = null;

        EsperEPL2GrammarParser.outerJoinIdentPair_return outerJoinIdentPair118 = null;


        CommonTree ON115_tree=null;
        CommonTree AND_EXPR117_tree=null;

        try {
            // EsperEPL2Grammar.g:623:2: ( ON outerJoinIdentPair ( AND_EXPR outerJoinIdentPair )* )
            // EsperEPL2Grammar.g:623:4: ON outerJoinIdentPair ( AND_EXPR outerJoinIdentPair )*
            {
            root_0 = (CommonTree)adaptor.nil();

            ON115=(Token)match(input,ON,FOLLOW_ON_in_outerJoinIdent2561); if (state.failed) return retval;
            pushFollow(FOLLOW_outerJoinIdentPair_in_outerJoinIdent2564);
            outerJoinIdentPair116=outerJoinIdentPair();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoinIdentPair116.getTree());
            // EsperEPL2Grammar.g:623:27: ( AND_EXPR outerJoinIdentPair )*
            loop42:
            do {
                int alt42=2;
                int LA42_0 = input.LA(1);

                if ( (LA42_0==AND_EXPR) ) {
                    alt42=1;
                }


                switch (alt42) {
            	case 1 :
            	    // EsperEPL2Grammar.g:623:28: AND_EXPR outerJoinIdentPair
            	    {
            	    AND_EXPR117=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_outerJoinIdent2567); if (state.failed) return retval;
            	    pushFollow(FOLLOW_outerJoinIdentPair_in_outerJoinIdent2570);
            	    outerJoinIdentPair118=outerJoinIdentPair();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoinIdentPair118.getTree());

            	    }
            	    break;

            	default :
            	    break loop42;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "outerJoinIdent"

    public static class outerJoinIdentPair_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "outerJoinIdentPair"
    // EsperEPL2Grammar.g:626:1: outerJoinIdentPair : eventProperty EQUALS eventProperty ;
    public final EsperEPL2GrammarParser.outerJoinIdentPair_return outerJoinIdentPair() throws RecognitionException {
        EsperEPL2GrammarParser.outerJoinIdentPair_return retval = new EsperEPL2GrammarParser.outerJoinIdentPair_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token EQUALS120=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty119 = null;

        EsperEPL2GrammarParser.eventProperty_return eventProperty121 = null;


        CommonTree EQUALS120_tree=null;

        try {
            // EsperEPL2Grammar.g:627:2: ( eventProperty EQUALS eventProperty )
            // EsperEPL2Grammar.g:627:4: eventProperty EQUALS eventProperty
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_eventProperty_in_outerJoinIdentPair2585);
            eventProperty119=eventProperty();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty119.getTree());
            EQUALS120=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_outerJoinIdentPair2587); if (state.failed) return retval;
            pushFollow(FOLLOW_eventProperty_in_outerJoinIdentPair2590);
            eventProperty121=eventProperty();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty121.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "outerJoinIdentPair"

    public static class whereClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "whereClause"
    // EsperEPL2Grammar.g:630:1: whereClause : evalOrExpression -> ^( WHERE_EXPR evalOrExpression ) ;
    public final EsperEPL2GrammarParser.whereClause_return whereClause() throws RecognitionException {
        EsperEPL2GrammarParser.whereClause_return retval = new EsperEPL2GrammarParser.whereClause_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.evalOrExpression_return evalOrExpression122 = null;


        RewriteRuleSubtreeStream stream_evalOrExpression=new RewriteRuleSubtreeStream(adaptor,"rule evalOrExpression");
         paraphrases.push("where clause"); 
        try {
            // EsperEPL2Grammar.g:633:2: ( evalOrExpression -> ^( WHERE_EXPR evalOrExpression ) )
            // EsperEPL2Grammar.g:633:4: evalOrExpression
            {
            pushFollow(FOLLOW_evalOrExpression_in_whereClause2612);
            evalOrExpression122=evalOrExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_evalOrExpression.add(evalOrExpression122.getTree());


            // AST REWRITE
            // elements: evalOrExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 634:3: -> ^( WHERE_EXPR evalOrExpression )
            {
                // EsperEPL2Grammar.g:634:6: ^( WHERE_EXPR evalOrExpression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WHERE_EXPR, "WHERE_EXPR"), root_1);

                adaptor.addChild(root_1, stream_evalOrExpression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "whereClause"

    public static class selectClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "selectClause"
    // EsperEPL2Grammar.g:637:1: selectClause : (s= RSTREAM | s= ISTREAM | s= IRSTREAM )? selectionList -> ^( SELECTION_EXPR ( $s)? selectionList ) ;
    public final EsperEPL2GrammarParser.selectClause_return selectClause() throws RecognitionException {
        EsperEPL2GrammarParser.selectClause_return retval = new EsperEPL2GrammarParser.selectClause_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token s=null;
        EsperEPL2GrammarParser.selectionList_return selectionList123 = null;


        CommonTree s_tree=null;
        RewriteRuleTokenStream stream_IRSTREAM=new RewriteRuleTokenStream(adaptor,"token IRSTREAM");
        RewriteRuleTokenStream stream_ISTREAM=new RewriteRuleTokenStream(adaptor,"token ISTREAM");
        RewriteRuleTokenStream stream_RSTREAM=new RewriteRuleTokenStream(adaptor,"token RSTREAM");
        RewriteRuleSubtreeStream stream_selectionList=new RewriteRuleSubtreeStream(adaptor,"rule selectionList");
         paraphrases.push("select clause"); 
        try {
            // EsperEPL2Grammar.g:640:2: ( (s= RSTREAM | s= ISTREAM | s= IRSTREAM )? selectionList -> ^( SELECTION_EXPR ( $s)? selectionList ) )
            // EsperEPL2Grammar.g:640:4: (s= RSTREAM | s= ISTREAM | s= IRSTREAM )? selectionList
            {
            // EsperEPL2Grammar.g:640:4: (s= RSTREAM | s= ISTREAM | s= IRSTREAM )?
            int alt43=4;
            switch ( input.LA(1) ) {
                case RSTREAM:
                    {
                    alt43=1;
                    }
                    break;
                case ISTREAM:
                    {
                    alt43=2;
                    }
                    break;
                case IRSTREAM:
                    {
                    alt43=3;
                    }
                    break;
            }

            switch (alt43) {
                case 1 :
                    // EsperEPL2Grammar.g:640:5: s= RSTREAM
                    {
                    s=(Token)match(input,RSTREAM,FOLLOW_RSTREAM_in_selectClause2648); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RSTREAM.add(s);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:640:17: s= ISTREAM
                    {
                    s=(Token)match(input,ISTREAM,FOLLOW_ISTREAM_in_selectClause2654); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ISTREAM.add(s);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:640:29: s= IRSTREAM
                    {
                    s=(Token)match(input,IRSTREAM,FOLLOW_IRSTREAM_in_selectClause2660); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IRSTREAM.add(s);


                    }
                    break;

            }

            pushFollow(FOLLOW_selectionList_in_selectClause2664);
            selectionList123=selectionList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_selectionList.add(selectionList123.getTree());


            // AST REWRITE
            // elements: s, selectionList
            // token labels: s
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 641:3: -> ^( SELECTION_EXPR ( $s)? selectionList )
            {
                // EsperEPL2Grammar.g:641:6: ^( SELECTION_EXPR ( $s)? selectionList )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_EXPR, "SELECTION_EXPR"), root_1);

                // EsperEPL2Grammar.g:641:23: ( $s)?
                if ( stream_s.hasNext() ) {
                    adaptor.addChild(root_1, stream_s.nextNode());

                }
                stream_s.reset();
                adaptor.addChild(root_1, stream_selectionList.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "selectClause"

    public static class selectionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "selectionList"
    // EsperEPL2Grammar.g:644:1: selectionList : selectionListElement ( COMMA selectionListElement )* ;
    public final EsperEPL2GrammarParser.selectionList_return selectionList() throws RecognitionException {
        EsperEPL2GrammarParser.selectionList_return retval = new EsperEPL2GrammarParser.selectionList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA125=null;
        EsperEPL2GrammarParser.selectionListElement_return selectionListElement124 = null;

        EsperEPL2GrammarParser.selectionListElement_return selectionListElement126 = null;


        CommonTree COMMA125_tree=null;

        try {
            // EsperEPL2Grammar.g:645:2: ( selectionListElement ( COMMA selectionListElement )* )
            // EsperEPL2Grammar.g:645:4: selectionListElement ( COMMA selectionListElement )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_selectionListElement_in_selectionList2691);
            selectionListElement124=selectionListElement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, selectionListElement124.getTree());
            // EsperEPL2Grammar.g:645:25: ( COMMA selectionListElement )*
            loop44:
            do {
                int alt44=2;
                int LA44_0 = input.LA(1);

                if ( (LA44_0==COMMA) ) {
                    alt44=1;
                }


                switch (alt44) {
            	case 1 :
            	    // EsperEPL2Grammar.g:645:26: COMMA selectionListElement
            	    {
            	    COMMA125=(Token)match(input,COMMA,FOLLOW_COMMA_in_selectionList2694); if (state.failed) return retval;
            	    pushFollow(FOLLOW_selectionListElement_in_selectionList2697);
            	    selectionListElement126=selectionListElement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, selectionListElement126.getTree());

            	    }
            	    break;

            	default :
            	    break loop44;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "selectionList"

    public static class selectionListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "selectionListElement"
    // EsperEPL2Grammar.g:648:1: selectionListElement : (s= STAR -> WILDCARD_SELECT[$s] | ( streamSelector )=> streamSelector | expression ( AS i= keywordAllowedIdent )? -> {identifier != null}? ^( SELECTION_ELEMENT_EXPR expression IDENT[identifier] ) -> {identifier == null}? ^( SELECTION_ELEMENT_EXPR expression ) -> ^( SELECTION_ELEMENT_EXPR expression ) );
    public final EsperEPL2GrammarParser.selectionListElement_return selectionListElement() throws RecognitionException {
        EsperEPL2GrammarParser.selectionListElement_return retval = new EsperEPL2GrammarParser.selectionListElement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token s=null;
        Token AS129=null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i = null;

        EsperEPL2GrammarParser.streamSelector_return streamSelector127 = null;

        EsperEPL2GrammarParser.expression_return expression128 = null;


        CommonTree s_tree=null;
        CommonTree AS129_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_keywordAllowedIdent=new RewriteRuleSubtreeStream(adaptor,"rule keywordAllowedIdent");
         String identifier = null; 
        try {
            // EsperEPL2Grammar.g:650:2: (s= STAR -> WILDCARD_SELECT[$s] | ( streamSelector )=> streamSelector | expression ( AS i= keywordAllowedIdent )? -> {identifier != null}? ^( SELECTION_ELEMENT_EXPR expression IDENT[identifier] ) -> {identifier == null}? ^( SELECTION_ELEMENT_EXPR expression ) -> ^( SELECTION_ELEMENT_EXPR expression ) )
            int alt46=3;
            alt46 = dfa46.predict(input);
            switch (alt46) {
                case 1 :
                    // EsperEPL2Grammar.g:650:7: s= STAR
                    {
                    s=(Token)match(input,STAR,FOLLOW_STAR_in_selectionListElement2723); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STAR.add(s);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 650:14: -> WILDCARD_SELECT[$s]
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(WILDCARD_SELECT, s));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:651:4: ( streamSelector )=> streamSelector
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_streamSelector_in_selectionListElement2739);
                    streamSelector127=streamSelector();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, streamSelector127.getTree());

                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:652:4: expression ( AS i= keywordAllowedIdent )?
                    {
                    pushFollow(FOLLOW_expression_in_selectionListElement2744);
                    expression128=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression128.getTree());
                    // EsperEPL2Grammar.g:652:15: ( AS i= keywordAllowedIdent )?
                    int alt45=2;
                    int LA45_0 = input.LA(1);

                    if ( (LA45_0==AS) ) {
                        alt45=1;
                    }
                    switch (alt45) {
                        case 1 :
                            // EsperEPL2Grammar.g:652:16: AS i= keywordAllowedIdent
                            {
                            AS129=(Token)match(input,AS,FOLLOW_AS_in_selectionListElement2747); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_AS.add(AS129);

                            pushFollow(FOLLOW_keywordAllowedIdent_in_selectionListElement2751);
                            i=keywordAllowedIdent();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i.getTree());
                            if ( state.backtracking==0 ) {
                               identifier = i.getTree().toString(); 
                            }

                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: expression, expression, expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 653:3: -> {identifier != null}? ^( SELECTION_ELEMENT_EXPR expression IDENT[identifier] )
                    if (identifier != null) {
                        // EsperEPL2Grammar.g:653:28: ^( SELECTION_ELEMENT_EXPR expression IDENT[identifier] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);

                        adaptor.addChild(root_1, stream_expression.nextTree());
                        adaptor.addChild(root_1, (CommonTree)adaptor.create(IDENT, identifier));

                        adaptor.addChild(root_0, root_1);
                        }

                    }
                    else // 654:3: -> {identifier == null}? ^( SELECTION_ELEMENT_EXPR expression )
                    if (identifier == null) {
                        // EsperEPL2Grammar.g:654:28: ^( SELECTION_ELEMENT_EXPR expression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);

                        adaptor.addChild(root_1, stream_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }
                    else // 655:3: -> ^( SELECTION_ELEMENT_EXPR expression )
                    {
                        // EsperEPL2Grammar.g:655:6: ^( SELECTION_ELEMENT_EXPR expression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);

                        adaptor.addChild(root_1, stream_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "selectionListElement"

    public static class streamSelector_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "streamSelector"
    // EsperEPL2Grammar.g:658:1: streamSelector : s= IDENT DOT STAR ( AS i= IDENT )? -> ^( SELECTION_STREAM $s ( $i)? ) ;
    public final EsperEPL2GrammarParser.streamSelector_return streamSelector() throws RecognitionException {
        EsperEPL2GrammarParser.streamSelector_return retval = new EsperEPL2GrammarParser.streamSelector_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token s=null;
        Token i=null;
        Token DOT130=null;
        Token STAR131=null;
        Token AS132=null;

        CommonTree s_tree=null;
        CommonTree i_tree=null;
        CommonTree DOT130_tree=null;
        CommonTree STAR131_tree=null;
        CommonTree AS132_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");

        try {
            // EsperEPL2Grammar.g:659:2: (s= IDENT DOT STAR ( AS i= IDENT )? -> ^( SELECTION_STREAM $s ( $i)? ) )
            // EsperEPL2Grammar.g:659:4: s= IDENT DOT STAR ( AS i= IDENT )?
            {
            s=(Token)match(input,IDENT,FOLLOW_IDENT_in_streamSelector2807); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(s);

            DOT130=(Token)match(input,DOT,FOLLOW_DOT_in_streamSelector2809); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DOT.add(DOT130);

            STAR131=(Token)match(input,STAR,FOLLOW_STAR_in_streamSelector2811); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_STAR.add(STAR131);

            // EsperEPL2Grammar.g:659:21: ( AS i= IDENT )?
            int alt47=2;
            int LA47_0 = input.LA(1);

            if ( (LA47_0==AS) ) {
                alt47=1;
            }
            switch (alt47) {
                case 1 :
                    // EsperEPL2Grammar.g:659:22: AS i= IDENT
                    {
                    AS132=(Token)match(input,AS,FOLLOW_AS_in_streamSelector2814); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS132);

                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_streamSelector2818); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;

            }



            // AST REWRITE
            // elements: i, s
            // token labels: s, i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 660:3: -> ^( SELECTION_STREAM $s ( $i)? )
            {
                // EsperEPL2Grammar.g:660:6: ^( SELECTION_STREAM $s ( $i)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_STREAM, "SELECTION_STREAM"), root_1);

                adaptor.addChild(root_1, stream_s.nextNode());
                // EsperEPL2Grammar.g:660:28: ( $i)?
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());

                }
                stream_i.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "streamSelector"

    public static class streamExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "streamExpression"
    // EsperEPL2Grammar.g:663:1: streamExpression : ( eventFilterExpression | patternInclusionExpression | databaseJoinExpression | methodJoinExpression ) ( DOT viewExpression ( DOT viewExpression )* )? ( AS i= IDENT | i= IDENT )? (u= UNIDIRECTIONAL )? (ru= RETAINUNION | ri= RETAININTERSECTION )? -> ^( STREAM_EXPR ( eventFilterExpression )? ( patternInclusionExpression )? ( databaseJoinExpression )? ( methodJoinExpression )? ( viewExpression )* ( $i)? ( $u)? ( $ru)? ( $ri)? ) ;
    public final EsperEPL2GrammarParser.streamExpression_return streamExpression() throws RecognitionException {
        EsperEPL2GrammarParser.streamExpression_return retval = new EsperEPL2GrammarParser.streamExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token u=null;
        Token ru=null;
        Token ri=null;
        Token DOT137=null;
        Token DOT139=null;
        Token AS141=null;
        EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression133 = null;

        EsperEPL2GrammarParser.patternInclusionExpression_return patternInclusionExpression134 = null;

        EsperEPL2GrammarParser.databaseJoinExpression_return databaseJoinExpression135 = null;

        EsperEPL2GrammarParser.methodJoinExpression_return methodJoinExpression136 = null;

        EsperEPL2GrammarParser.viewExpression_return viewExpression138 = null;

        EsperEPL2GrammarParser.viewExpression_return viewExpression140 = null;


        CommonTree i_tree=null;
        CommonTree u_tree=null;
        CommonTree ru_tree=null;
        CommonTree ri_tree=null;
        CommonTree DOT137_tree=null;
        CommonTree DOT139_tree=null;
        CommonTree AS141_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RETAINUNION=new RewriteRuleTokenStream(adaptor,"token RETAINUNION");
        RewriteRuleTokenStream stream_RETAININTERSECTION=new RewriteRuleTokenStream(adaptor,"token RETAININTERSECTION");
        RewriteRuleTokenStream stream_UNIDIRECTIONAL=new RewriteRuleTokenStream(adaptor,"token UNIDIRECTIONAL");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_databaseJoinExpression=new RewriteRuleSubtreeStream(adaptor,"rule databaseJoinExpression");
        RewriteRuleSubtreeStream stream_methodJoinExpression=new RewriteRuleSubtreeStream(adaptor,"rule methodJoinExpression");
        RewriteRuleSubtreeStream stream_viewExpression=new RewriteRuleSubtreeStream(adaptor,"rule viewExpression");
        RewriteRuleSubtreeStream stream_eventFilterExpression=new RewriteRuleSubtreeStream(adaptor,"rule eventFilterExpression");
        RewriteRuleSubtreeStream stream_patternInclusionExpression=new RewriteRuleSubtreeStream(adaptor,"rule patternInclusionExpression");
        try {
            // EsperEPL2Grammar.g:664:2: ( ( eventFilterExpression | patternInclusionExpression | databaseJoinExpression | methodJoinExpression ) ( DOT viewExpression ( DOT viewExpression )* )? ( AS i= IDENT | i= IDENT )? (u= UNIDIRECTIONAL )? (ru= RETAINUNION | ri= RETAININTERSECTION )? -> ^( STREAM_EXPR ( eventFilterExpression )? ( patternInclusionExpression )? ( databaseJoinExpression )? ( methodJoinExpression )? ( viewExpression )* ( $i)? ( $u)? ( $ru)? ( $ri)? ) )
            // EsperEPL2Grammar.g:664:4: ( eventFilterExpression | patternInclusionExpression | databaseJoinExpression | methodJoinExpression ) ( DOT viewExpression ( DOT viewExpression )* )? ( AS i= IDENT | i= IDENT )? (u= UNIDIRECTIONAL )? (ru= RETAINUNION | ri= RETAININTERSECTION )?
            {
            // EsperEPL2Grammar.g:664:4: ( eventFilterExpression | patternInclusionExpression | databaseJoinExpression | methodJoinExpression )
            int alt48=4;
            switch ( input.LA(1) ) {
            case IDENT:
                {
                int LA48_1 = input.LA(2);

                if ( (LA48_1==EOF||(LA48_1>=WHERE && LA48_1<=AS)||(LA48_1>=INNER && LA48_1<=ON)||(LA48_1>=GROUP && LA48_1<=HAVING)||LA48_1==OUTPUT||LA48_1==ORDER||(LA48_1>=UNIDIRECTIONAL && LA48_1<=RETAININTERSECTION)||LA48_1==ROW_LIMIT_EXPR||(LA48_1>=IDENT && LA48_1<=LPAREN)) ) {
                    alt48=1;
                }
                else if ( (LA48_1==COLON) ) {
                    alt48=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 48, 1, input);

                    throw nvae;
                }
                }
                break;
            case PATTERN:
                {
                alt48=2;
                }
                break;
            case SQL:
                {
                alt48=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 48, 0, input);

                throw nvae;
            }

            switch (alt48) {
                case 1 :
                    // EsperEPL2Grammar.g:664:5: eventFilterExpression
                    {
                    pushFollow(FOLLOW_eventFilterExpression_in_streamExpression2848);
                    eventFilterExpression133=eventFilterExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_eventFilterExpression.add(eventFilterExpression133.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:664:29: patternInclusionExpression
                    {
                    pushFollow(FOLLOW_patternInclusionExpression_in_streamExpression2852);
                    patternInclusionExpression134=patternInclusionExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_patternInclusionExpression.add(patternInclusionExpression134.getTree());

                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:664:58: databaseJoinExpression
                    {
                    pushFollow(FOLLOW_databaseJoinExpression_in_streamExpression2856);
                    databaseJoinExpression135=databaseJoinExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_databaseJoinExpression.add(databaseJoinExpression135.getTree());

                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:664:83: methodJoinExpression
                    {
                    pushFollow(FOLLOW_methodJoinExpression_in_streamExpression2860);
                    methodJoinExpression136=methodJoinExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_methodJoinExpression.add(methodJoinExpression136.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:665:3: ( DOT viewExpression ( DOT viewExpression )* )?
            int alt50=2;
            int LA50_0 = input.LA(1);

            if ( (LA50_0==DOT) ) {
                alt50=1;
            }
            switch (alt50) {
                case 1 :
                    // EsperEPL2Grammar.g:665:4: DOT viewExpression ( DOT viewExpression )*
                    {
                    DOT137=(Token)match(input,DOT,FOLLOW_DOT_in_streamExpression2866); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT137);

                    pushFollow(FOLLOW_viewExpression_in_streamExpression2868);
                    viewExpression138=viewExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression138.getTree());
                    // EsperEPL2Grammar.g:665:23: ( DOT viewExpression )*
                    loop49:
                    do {
                        int alt49=2;
                        int LA49_0 = input.LA(1);

                        if ( (LA49_0==DOT) ) {
                            alt49=1;
                        }


                        switch (alt49) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:665:24: DOT viewExpression
                    	    {
                    	    DOT139=(Token)match(input,DOT,FOLLOW_DOT_in_streamExpression2871); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_DOT.add(DOT139);

                    	    pushFollow(FOLLOW_viewExpression_in_streamExpression2873);
                    	    viewExpression140=viewExpression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression140.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop49;
                        }
                    } while (true);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:665:47: ( AS i= IDENT | i= IDENT )?
            int alt51=3;
            int LA51_0 = input.LA(1);

            if ( (LA51_0==AS) ) {
                alt51=1;
            }
            else if ( (LA51_0==IDENT) ) {
                alt51=2;
            }
            switch (alt51) {
                case 1 :
                    // EsperEPL2Grammar.g:665:48: AS i= IDENT
                    {
                    AS141=(Token)match(input,AS,FOLLOW_AS_in_streamExpression2880); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS141);

                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_streamExpression2884); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:665:61: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_streamExpression2890); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:665:71: (u= UNIDIRECTIONAL )?
            int alt52=2;
            int LA52_0 = input.LA(1);

            if ( (LA52_0==UNIDIRECTIONAL) ) {
                alt52=1;
            }
            switch (alt52) {
                case 1 :
                    // EsperEPL2Grammar.g:665:72: u= UNIDIRECTIONAL
                    {
                    u=(Token)match(input,UNIDIRECTIONAL,FOLLOW_UNIDIRECTIONAL_in_streamExpression2897); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_UNIDIRECTIONAL.add(u);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:665:91: (ru= RETAINUNION | ri= RETAININTERSECTION )?
            int alt53=3;
            int LA53_0 = input.LA(1);

            if ( (LA53_0==RETAINUNION) ) {
                alt53=1;
            }
            else if ( (LA53_0==RETAININTERSECTION) ) {
                alt53=2;
            }
            switch (alt53) {
                case 1 :
                    // EsperEPL2Grammar.g:665:92: ru= RETAINUNION
                    {
                    ru=(Token)match(input,RETAINUNION,FOLLOW_RETAINUNION_in_streamExpression2904); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAINUNION.add(ru);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:665:107: ri= RETAININTERSECTION
                    {
                    ri=(Token)match(input,RETAININTERSECTION,FOLLOW_RETAININTERSECTION_in_streamExpression2908); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAININTERSECTION.add(ri);


                    }
                    break;

            }



            // AST REWRITE
            // elements: u, i, viewExpression, methodJoinExpression, patternInclusionExpression, databaseJoinExpression, eventFilterExpression, ri, ru
            // token labels: u, ri, ru, i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_u=new RewriteRuleTokenStream(adaptor,"token u",u);
            RewriteRuleTokenStream stream_ri=new RewriteRuleTokenStream(adaptor,"token ri",ri);
            RewriteRuleTokenStream stream_ru=new RewriteRuleTokenStream(adaptor,"token ru",ru);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 666:3: -> ^( STREAM_EXPR ( eventFilterExpression )? ( patternInclusionExpression )? ( databaseJoinExpression )? ( methodJoinExpression )? ( viewExpression )* ( $i)? ( $u)? ( $ru)? ( $ri)? )
            {
                // EsperEPL2Grammar.g:666:6: ^( STREAM_EXPR ( eventFilterExpression )? ( patternInclusionExpression )? ( databaseJoinExpression )? ( methodJoinExpression )? ( viewExpression )* ( $i)? ( $u)? ( $ru)? ( $ri)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STREAM_EXPR, "STREAM_EXPR"), root_1);

                // EsperEPL2Grammar.g:666:20: ( eventFilterExpression )?
                if ( stream_eventFilterExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_eventFilterExpression.nextTree());

                }
                stream_eventFilterExpression.reset();
                // EsperEPL2Grammar.g:666:43: ( patternInclusionExpression )?
                if ( stream_patternInclusionExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_patternInclusionExpression.nextTree());

                }
                stream_patternInclusionExpression.reset();
                // EsperEPL2Grammar.g:666:71: ( databaseJoinExpression )?
                if ( stream_databaseJoinExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_databaseJoinExpression.nextTree());

                }
                stream_databaseJoinExpression.reset();
                // EsperEPL2Grammar.g:666:95: ( methodJoinExpression )?
                if ( stream_methodJoinExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_methodJoinExpression.nextTree());

                }
                stream_methodJoinExpression.reset();
                // EsperEPL2Grammar.g:667:3: ( viewExpression )*
                while ( stream_viewExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_viewExpression.nextTree());

                }
                stream_viewExpression.reset();
                // EsperEPL2Grammar.g:667:19: ( $i)?
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());

                }
                stream_i.reset();
                // EsperEPL2Grammar.g:667:23: ( $u)?
                if ( stream_u.hasNext() ) {
                    adaptor.addChild(root_1, stream_u.nextNode());

                }
                stream_u.reset();
                // EsperEPL2Grammar.g:667:27: ( $ru)?
                if ( stream_ru.hasNext() ) {
                    adaptor.addChild(root_1, stream_ru.nextNode());

                }
                stream_ru.reset();
                // EsperEPL2Grammar.g:667:32: ( $ri)?
                if ( stream_ri.hasNext() ) {
                    adaptor.addChild(root_1, stream_ri.nextNode());

                }
                stream_ri.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "streamExpression"

    public static class patternInclusionExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "patternInclusionExpression"
    // EsperEPL2Grammar.g:670:1: patternInclusionExpression : PATTERN LBRACK patternExpression RBRACK -> ^( PATTERN_INCL_EXPR patternExpression ) ;
    public final EsperEPL2GrammarParser.patternInclusionExpression_return patternInclusionExpression() throws RecognitionException {
        EsperEPL2GrammarParser.patternInclusionExpression_return retval = new EsperEPL2GrammarParser.patternInclusionExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token PATTERN142=null;
        Token LBRACK143=null;
        Token RBRACK145=null;
        EsperEPL2GrammarParser.patternExpression_return patternExpression144 = null;


        CommonTree PATTERN142_tree=null;
        CommonTree LBRACK143_tree=null;
        CommonTree RBRACK145_tree=null;
        RewriteRuleTokenStream stream_PATTERN=new RewriteRuleTokenStream(adaptor,"token PATTERN");
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleSubtreeStream stream_patternExpression=new RewriteRuleSubtreeStream(adaptor,"rule patternExpression");
        try {
            // EsperEPL2Grammar.g:671:2: ( PATTERN LBRACK patternExpression RBRACK -> ^( PATTERN_INCL_EXPR patternExpression ) )
            // EsperEPL2Grammar.g:671:4: PATTERN LBRACK patternExpression RBRACK
            {
            PATTERN142=(Token)match(input,PATTERN,FOLLOW_PATTERN_in_patternInclusionExpression2965); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_PATTERN.add(PATTERN142);

            LBRACK143=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_patternInclusionExpression2967); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK143);

            pushFollow(FOLLOW_patternExpression_in_patternInclusionExpression2969);
            patternExpression144=patternExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_patternExpression.add(patternExpression144.getTree());
            RBRACK145=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_patternInclusionExpression2971); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK145);



            // AST REWRITE
            // elements: patternExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 672:3: -> ^( PATTERN_INCL_EXPR patternExpression )
            {
                // EsperEPL2Grammar.g:672:6: ^( PATTERN_INCL_EXPR patternExpression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATTERN_INCL_EXPR, "PATTERN_INCL_EXPR"), root_1);

                adaptor.addChild(root_1, stream_patternExpression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "patternInclusionExpression"

    public static class databaseJoinExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "databaseJoinExpression"
    // EsperEPL2Grammar.g:675:1: databaseJoinExpression : SQL COLON i= IDENT LBRACK (s= STRING_LITERAL | s= QUOTED_STRING_LITERAL ) ( METADATASQL (s2= STRING_LITERAL | s2= QUOTED_STRING_LITERAL ) )? RBRACK -> ^( DATABASE_JOIN_EXPR $i $s ( $s2)? ) ;
    public final EsperEPL2GrammarParser.databaseJoinExpression_return databaseJoinExpression() throws RecognitionException {
        EsperEPL2GrammarParser.databaseJoinExpression_return retval = new EsperEPL2GrammarParser.databaseJoinExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token s=null;
        Token s2=null;
        Token SQL146=null;
        Token COLON147=null;
        Token LBRACK148=null;
        Token METADATASQL149=null;
        Token RBRACK150=null;

        CommonTree i_tree=null;
        CommonTree s_tree=null;
        CommonTree s2_tree=null;
        CommonTree SQL146_tree=null;
        CommonTree COLON147_tree=null;
        CommonTree LBRACK148_tree=null;
        CommonTree METADATASQL149_tree=null;
        CommonTree RBRACK150_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_SQL=new RewriteRuleTokenStream(adaptor,"token SQL");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token STRING_LITERAL");
        RewriteRuleTokenStream stream_METADATASQL=new RewriteRuleTokenStream(adaptor,"token METADATASQL");
        RewriteRuleTokenStream stream_QUOTED_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token QUOTED_STRING_LITERAL");

         paraphrases.push("relational data join"); 
        try {
            // EsperEPL2Grammar.g:678:2: ( SQL COLON i= IDENT LBRACK (s= STRING_LITERAL | s= QUOTED_STRING_LITERAL ) ( METADATASQL (s2= STRING_LITERAL | s2= QUOTED_STRING_LITERAL ) )? RBRACK -> ^( DATABASE_JOIN_EXPR $i $s ( $s2)? ) )
            // EsperEPL2Grammar.g:678:4: SQL COLON i= IDENT LBRACK (s= STRING_LITERAL | s= QUOTED_STRING_LITERAL ) ( METADATASQL (s2= STRING_LITERAL | s2= QUOTED_STRING_LITERAL ) )? RBRACK
            {
            SQL146=(Token)match(input,SQL,FOLLOW_SQL_in_databaseJoinExpression3004); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SQL.add(SQL146);

            COLON147=(Token)match(input,COLON,FOLLOW_COLON_in_databaseJoinExpression3006); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON147);

            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_databaseJoinExpression3010); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);

            LBRACK148=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_databaseJoinExpression3012); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK148);

            // EsperEPL2Grammar.g:678:29: (s= STRING_LITERAL | s= QUOTED_STRING_LITERAL )
            int alt54=2;
            int LA54_0 = input.LA(1);

            if ( (LA54_0==STRING_LITERAL) ) {
                alt54=1;
            }
            else if ( (LA54_0==QUOTED_STRING_LITERAL) ) {
                alt54=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 54, 0, input);

                throw nvae;
            }
            switch (alt54) {
                case 1 :
                    // EsperEPL2Grammar.g:678:30: s= STRING_LITERAL
                    {
                    s=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_databaseJoinExpression3017); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STRING_LITERAL.add(s);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:678:49: s= QUOTED_STRING_LITERAL
                    {
                    s=(Token)match(input,QUOTED_STRING_LITERAL,FOLLOW_QUOTED_STRING_LITERAL_in_databaseJoinExpression3023); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUOTED_STRING_LITERAL.add(s);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:678:74: ( METADATASQL (s2= STRING_LITERAL | s2= QUOTED_STRING_LITERAL ) )?
            int alt56=2;
            int LA56_0 = input.LA(1);

            if ( (LA56_0==METADATASQL) ) {
                alt56=1;
            }
            switch (alt56) {
                case 1 :
                    // EsperEPL2Grammar.g:678:75: METADATASQL (s2= STRING_LITERAL | s2= QUOTED_STRING_LITERAL )
                    {
                    METADATASQL149=(Token)match(input,METADATASQL,FOLLOW_METADATASQL_in_databaseJoinExpression3027); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_METADATASQL.add(METADATASQL149);

                    // EsperEPL2Grammar.g:678:87: (s2= STRING_LITERAL | s2= QUOTED_STRING_LITERAL )
                    int alt55=2;
                    int LA55_0 = input.LA(1);

                    if ( (LA55_0==STRING_LITERAL) ) {
                        alt55=1;
                    }
                    else if ( (LA55_0==QUOTED_STRING_LITERAL) ) {
                        alt55=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 55, 0, input);

                        throw nvae;
                    }
                    switch (alt55) {
                        case 1 :
                            // EsperEPL2Grammar.g:678:88: s2= STRING_LITERAL
                            {
                            s2=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_databaseJoinExpression3032); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_STRING_LITERAL.add(s2);


                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:678:108: s2= QUOTED_STRING_LITERAL
                            {
                            s2=(Token)match(input,QUOTED_STRING_LITERAL,FOLLOW_QUOTED_STRING_LITERAL_in_databaseJoinExpression3038); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUOTED_STRING_LITERAL.add(s2);


                            }
                            break;

                    }


                    }
                    break;

            }

            RBRACK150=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_databaseJoinExpression3043); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK150);



            // AST REWRITE
            // elements: s2, s, i
            // token labels: s2, s, i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s2=new RewriteRuleTokenStream(adaptor,"token s2",s2);
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 679:3: -> ^( DATABASE_JOIN_EXPR $i $s ( $s2)? )
            {
                // EsperEPL2Grammar.g:679:6: ^( DATABASE_JOIN_EXPR $i $s ( $s2)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DATABASE_JOIN_EXPR, "DATABASE_JOIN_EXPR"), root_1);

                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_s.nextNode());
                // EsperEPL2Grammar.g:679:33: ( $s2)?
                if ( stream_s2.hasNext() ) {
                    adaptor.addChild(root_1, stream_s2.nextNode());

                }
                stream_s2.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "databaseJoinExpression"

    public static class methodJoinExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "methodJoinExpression"
    // EsperEPL2Grammar.g:682:1: methodJoinExpression : i= IDENT COLON classIdentifier ( LPAREN ( expressionList )? RPAREN )? -> ^( METHOD_JOIN_EXPR $i classIdentifier ( expressionList )? ) ;
    public final EsperEPL2GrammarParser.methodJoinExpression_return methodJoinExpression() throws RecognitionException {
        EsperEPL2GrammarParser.methodJoinExpression_return retval = new EsperEPL2GrammarParser.methodJoinExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token COLON151=null;
        Token LPAREN153=null;
        Token RPAREN155=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier152 = null;

        EsperEPL2GrammarParser.expressionList_return expressionList154 = null;


        CommonTree i_tree=null;
        CommonTree COLON151_tree=null;
        CommonTree LPAREN153_tree=null;
        CommonTree RPAREN155_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
         paraphrases.push("method invocation join"); 
        try {
            // EsperEPL2Grammar.g:685:6: (i= IDENT COLON classIdentifier ( LPAREN ( expressionList )? RPAREN )? -> ^( METHOD_JOIN_EXPR $i classIdentifier ( expressionList )? ) )
            // EsperEPL2Grammar.g:685:11: i= IDENT COLON classIdentifier ( LPAREN ( expressionList )? RPAREN )?
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_methodJoinExpression3094); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);

            COLON151=(Token)match(input,COLON,FOLLOW_COLON_in_methodJoinExpression3096); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON151);

            pushFollow(FOLLOW_classIdentifier_in_methodJoinExpression3098);
            classIdentifier152=classIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier152.getTree());
            // EsperEPL2Grammar.g:685:41: ( LPAREN ( expressionList )? RPAREN )?
            int alt58=2;
            int LA58_0 = input.LA(1);

            if ( (LA58_0==LPAREN) ) {
                alt58=1;
            }
            switch (alt58) {
                case 1 :
                    // EsperEPL2Grammar.g:685:42: LPAREN ( expressionList )? RPAREN
                    {
                    LPAREN153=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_methodJoinExpression3101); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN153);

                    // EsperEPL2Grammar.g:685:49: ( expressionList )?
                    int alt57=2;
                    int LA57_0 = input.LA(1);

                    if ( (LA57_0==WINDOW||LA57_0==ESCAPE||(LA57_0>=NOT_EXPR && LA57_0<=EVERY_EXPR)||(LA57_0>=SUM && LA57_0<=COUNT)||LA57_0==CASE||LA57_0==OUTER||(LA57_0>=JOIN && LA57_0<=FULL)||(LA57_0>=EVENTS && LA57_0<=LAST)||(LA57_0>=UNIDIRECTIONAL && LA57_0<=CURRENT_TIMESTAMP)||LA57_0==SNAPSHOT||(LA57_0>=VARIABLE && LA57_0<=AT)||(LA57_0>=BOOLEAN_TRUE && LA57_0<=VALUE_NULL)||LA57_0==NUM_DOUBLE||LA57_0==IDENT||LA57_0==LPAREN||(LA57_0>=STRING_LITERAL && LA57_0<=QUOTED_STRING_LITERAL)||(LA57_0>=PLUS && LA57_0<=MINUS)||LA57_0==LCURLY||LA57_0==NUM_INT||LA57_0==QUESTION||(LA57_0>=NUM_LONG && LA57_0<=NUM_FLOAT)) ) {
                        alt57=1;
                    }
                    switch (alt57) {
                        case 1 :
                            // EsperEPL2Grammar.g:685:49: expressionList
                            {
                            pushFollow(FOLLOW_expressionList_in_methodJoinExpression3103);
                            expressionList154=expressionList();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList154.getTree());

                            }
                            break;

                    }

                    RPAREN155=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_methodJoinExpression3106); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN155);


                    }
                    break;

            }



            // AST REWRITE
            // elements: expressionList, i, classIdentifier
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 686:10: -> ^( METHOD_JOIN_EXPR $i classIdentifier ( expressionList )? )
            {
                // EsperEPL2Grammar.g:686:13: ^( METHOD_JOIN_EXPR $i classIdentifier ( expressionList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(METHOD_JOIN_EXPR, "METHOD_JOIN_EXPR"), root_1);

                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                // EsperEPL2Grammar.g:686:51: ( expressionList )?
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());

                }
                stream_expressionList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "methodJoinExpression"

    public static class viewExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "viewExpression"
    // EsperEPL2Grammar.g:689:1: viewExpression : ns= IDENT COLON nm= IDENT LPAREN ( expressionWithTimeList )? RPAREN -> ^( VIEW_EXPR $ns $nm ( expressionWithTimeList )? ) ;
    public final EsperEPL2GrammarParser.viewExpression_return viewExpression() throws RecognitionException {
        EsperEPL2GrammarParser.viewExpression_return retval = new EsperEPL2GrammarParser.viewExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token ns=null;
        Token nm=null;
        Token COLON156=null;
        Token LPAREN157=null;
        Token RPAREN159=null;
        EsperEPL2GrammarParser.expressionWithTimeList_return expressionWithTimeList158 = null;


        CommonTree ns_tree=null;
        CommonTree nm_tree=null;
        CommonTree COLON156_tree=null;
        CommonTree LPAREN157_tree=null;
        CommonTree RPAREN159_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionWithTimeList=new RewriteRuleSubtreeStream(adaptor,"rule expressionWithTimeList");
         paraphrases.push("view specifications"); 
        try {
            // EsperEPL2Grammar.g:692:2: (ns= IDENT COLON nm= IDENT LPAREN ( expressionWithTimeList )? RPAREN -> ^( VIEW_EXPR $ns $nm ( expressionWithTimeList )? ) )
            // EsperEPL2Grammar.g:692:4: ns= IDENT COLON nm= IDENT LPAREN ( expressionWithTimeList )? RPAREN
            {
            ns=(Token)match(input,IDENT,FOLLOW_IDENT_in_viewExpression3159); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(ns);

            COLON156=(Token)match(input,COLON,FOLLOW_COLON_in_viewExpression3161); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON156);

            nm=(Token)match(input,IDENT,FOLLOW_IDENT_in_viewExpression3165); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(nm);

            LPAREN157=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_viewExpression3167); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN157);

            // EsperEPL2Grammar.g:692:35: ( expressionWithTimeList )?
            int alt59=2;
            int LA59_0 = input.LA(1);

            if ( (LA59_0==WINDOW||LA59_0==ESCAPE||(LA59_0>=NOT_EXPR && LA59_0<=EVERY_EXPR)||(LA59_0>=SUM && LA59_0<=COUNT)||LA59_0==CASE||LA59_0==OUTER||(LA59_0>=JOIN && LA59_0<=FULL)||(LA59_0>=EVENTS && LA59_0<=LAST)||(LA59_0>=UNIDIRECTIONAL && LA59_0<=CURRENT_TIMESTAMP)||LA59_0==SNAPSHOT||(LA59_0>=VARIABLE && LA59_0<=AT)||(LA59_0>=BOOLEAN_TRUE && LA59_0<=VALUE_NULL)||LA59_0==NUM_DOUBLE||LA59_0==IDENT||LA59_0==LPAREN||(LA59_0>=STAR && LA59_0<=LBRACK)||(LA59_0>=STRING_LITERAL && LA59_0<=QUOTED_STRING_LITERAL)||(LA59_0>=PLUS && LA59_0<=MINUS)||LA59_0==LCURLY||LA59_0==NUM_INT||LA59_0==QUESTION||(LA59_0>=NUM_LONG && LA59_0<=NUM_FLOAT)) ) {
                alt59=1;
            }
            switch (alt59) {
                case 1 :
                    // EsperEPL2Grammar.g:692:35: expressionWithTimeList
                    {
                    pushFollow(FOLLOW_expressionWithTimeList_in_viewExpression3169);
                    expressionWithTimeList158=expressionWithTimeList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expressionWithTimeList.add(expressionWithTimeList158.getTree());

                    }
                    break;

            }

            RPAREN159=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_viewExpression3172); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN159);



            // AST REWRITE
            // elements: ns, nm, expressionWithTimeList
            // token labels: ns, nm
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_ns=new RewriteRuleTokenStream(adaptor,"token ns",ns);
            RewriteRuleTokenStream stream_nm=new RewriteRuleTokenStream(adaptor,"token nm",nm);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 693:3: -> ^( VIEW_EXPR $ns $nm ( expressionWithTimeList )? )
            {
                // EsperEPL2Grammar.g:693:6: ^( VIEW_EXPR $ns $nm ( expressionWithTimeList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VIEW_EXPR, "VIEW_EXPR"), root_1);

                adaptor.addChild(root_1, stream_ns.nextNode());
                adaptor.addChild(root_1, stream_nm.nextNode());
                // EsperEPL2Grammar.g:693:26: ( expressionWithTimeList )?
                if ( stream_expressionWithTimeList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionWithTimeList.nextTree());

                }
                stream_expressionWithTimeList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "viewExpression"

    public static class groupByListExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "groupByListExpr"
    // EsperEPL2Grammar.g:696:1: groupByListExpr : expression ( COMMA expression )* -> ^( GROUP_BY_EXPR ( expression )+ ) ;
    public final EsperEPL2GrammarParser.groupByListExpr_return groupByListExpr() throws RecognitionException {
        EsperEPL2GrammarParser.groupByListExpr_return retval = new EsperEPL2GrammarParser.groupByListExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA161=null;
        EsperEPL2GrammarParser.expression_return expression160 = null;

        EsperEPL2GrammarParser.expression_return expression162 = null;


        CommonTree COMMA161_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
         paraphrases.push("group-by clause"); 
        try {
            // EsperEPL2Grammar.g:699:2: ( expression ( COMMA expression )* -> ^( GROUP_BY_EXPR ( expression )+ ) )
            // EsperEPL2Grammar.g:699:4: expression ( COMMA expression )*
            {
            pushFollow(FOLLOW_expression_in_groupByListExpr3211);
            expression160=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression160.getTree());
            // EsperEPL2Grammar.g:699:15: ( COMMA expression )*
            loop60:
            do {
                int alt60=2;
                int LA60_0 = input.LA(1);

                if ( (LA60_0==COMMA) ) {
                    alt60=1;
                }


                switch (alt60) {
            	case 1 :
            	    // EsperEPL2Grammar.g:699:16: COMMA expression
            	    {
            	    COMMA161=(Token)match(input,COMMA,FOLLOW_COMMA_in_groupByListExpr3214); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA161);

            	    pushFollow(FOLLOW_expression_in_groupByListExpr3216);
            	    expression162=expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_expression.add(expression162.getTree());

            	    }
            	    break;

            	default :
            	    break loop60;
                }
            } while (true);



            // AST REWRITE
            // elements: expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 700:3: -> ^( GROUP_BY_EXPR ( expression )+ )
            {
                // EsperEPL2Grammar.g:700:6: ^( GROUP_BY_EXPR ( expression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GROUP_BY_EXPR, "GROUP_BY_EXPR"), root_1);

                if ( !(stream_expression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());

                }
                stream_expression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "groupByListExpr"

    public static class orderByListExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "orderByListExpr"
    // EsperEPL2Grammar.g:703:1: orderByListExpr : orderByListElement ( COMMA orderByListElement )* -> ^( ORDER_BY_EXPR ( orderByListElement )+ ) ;
    public final EsperEPL2GrammarParser.orderByListExpr_return orderByListExpr() throws RecognitionException {
        EsperEPL2GrammarParser.orderByListExpr_return retval = new EsperEPL2GrammarParser.orderByListExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA164=null;
        EsperEPL2GrammarParser.orderByListElement_return orderByListElement163 = null;

        EsperEPL2GrammarParser.orderByListElement_return orderByListElement165 = null;


        CommonTree COMMA164_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_orderByListElement=new RewriteRuleSubtreeStream(adaptor,"rule orderByListElement");
         paraphrases.push("order by clause"); 
        try {
            // EsperEPL2Grammar.g:706:2: ( orderByListElement ( COMMA orderByListElement )* -> ^( ORDER_BY_EXPR ( orderByListElement )+ ) )
            // EsperEPL2Grammar.g:706:4: orderByListElement ( COMMA orderByListElement )*
            {
            pushFollow(FOLLOW_orderByListElement_in_orderByListExpr3251);
            orderByListElement163=orderByListElement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_orderByListElement.add(orderByListElement163.getTree());
            // EsperEPL2Grammar.g:706:23: ( COMMA orderByListElement )*
            loop61:
            do {
                int alt61=2;
                int LA61_0 = input.LA(1);

                if ( (LA61_0==COMMA) ) {
                    alt61=1;
                }


                switch (alt61) {
            	case 1 :
            	    // EsperEPL2Grammar.g:706:24: COMMA orderByListElement
            	    {
            	    COMMA164=(Token)match(input,COMMA,FOLLOW_COMMA_in_orderByListExpr3254); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA164);

            	    pushFollow(FOLLOW_orderByListElement_in_orderByListExpr3256);
            	    orderByListElement165=orderByListElement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_orderByListElement.add(orderByListElement165.getTree());

            	    }
            	    break;

            	default :
            	    break loop61;
                }
            } while (true);



            // AST REWRITE
            // elements: orderByListElement
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 707:3: -> ^( ORDER_BY_EXPR ( orderByListElement )+ )
            {
                // EsperEPL2Grammar.g:707:6: ^( ORDER_BY_EXPR ( orderByListElement )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ORDER_BY_EXPR, "ORDER_BY_EXPR"), root_1);

                if ( !(stream_orderByListElement.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_orderByListElement.hasNext() ) {
                    adaptor.addChild(root_1, stream_orderByListElement.nextTree());

                }
                stream_orderByListElement.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "orderByListExpr"

    public static class orderByListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "orderByListElement"
    // EsperEPL2Grammar.g:710:1: orderByListElement : expression (d= ASC | d= DESC )? -> ^( ORDER_ELEMENT_EXPR expression ( $d)? ) ;
    public final EsperEPL2GrammarParser.orderByListElement_return orderByListElement() throws RecognitionException {
        EsperEPL2GrammarParser.orderByListElement_return retval = new EsperEPL2GrammarParser.orderByListElement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token d=null;
        EsperEPL2GrammarParser.expression_return expression166 = null;


        CommonTree d_tree=null;
        RewriteRuleTokenStream stream_ASC=new RewriteRuleTokenStream(adaptor,"token ASC");
        RewriteRuleTokenStream stream_DESC=new RewriteRuleTokenStream(adaptor,"token DESC");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            // EsperEPL2Grammar.g:711:2: ( expression (d= ASC | d= DESC )? -> ^( ORDER_ELEMENT_EXPR expression ( $d)? ) )
            // EsperEPL2Grammar.g:711:4: expression (d= ASC | d= DESC )?
            {
            pushFollow(FOLLOW_expression_in_orderByListElement3281);
            expression166=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression166.getTree());
            // EsperEPL2Grammar.g:711:15: (d= ASC | d= DESC )?
            int alt62=3;
            int LA62_0 = input.LA(1);

            if ( (LA62_0==ASC) ) {
                alt62=1;
            }
            else if ( (LA62_0==DESC) ) {
                alt62=2;
            }
            switch (alt62) {
                case 1 :
                    // EsperEPL2Grammar.g:711:16: d= ASC
                    {
                    d=(Token)match(input,ASC,FOLLOW_ASC_in_orderByListElement3286); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASC.add(d);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:711:22: d= DESC
                    {
                    d=(Token)match(input,DESC,FOLLOW_DESC_in_orderByListElement3290); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DESC.add(d);


                    }
                    break;

            }



            // AST REWRITE
            // elements: expression, d
            // token labels: d
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_d=new RewriteRuleTokenStream(adaptor,"token d",d);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 712:3: -> ^( ORDER_ELEMENT_EXPR expression ( $d)? )
            {
                // EsperEPL2Grammar.g:712:6: ^( ORDER_ELEMENT_EXPR expression ( $d)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ORDER_ELEMENT_EXPR, "ORDER_ELEMENT_EXPR"), root_1);

                adaptor.addChild(root_1, stream_expression.nextTree());
                // EsperEPL2Grammar.g:712:38: ( $d)?
                if ( stream_d.hasNext() ) {
                    adaptor.addChild(root_1, stream_d.nextNode());

                }
                stream_d.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "orderByListElement"

    public static class havingClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "havingClause"
    // EsperEPL2Grammar.g:715:1: havingClause : evalOrExpression -> ^( HAVING_EXPR evalOrExpression ) ;
    public final EsperEPL2GrammarParser.havingClause_return havingClause() throws RecognitionException {
        EsperEPL2GrammarParser.havingClause_return retval = new EsperEPL2GrammarParser.havingClause_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.evalOrExpression_return evalOrExpression167 = null;


        RewriteRuleSubtreeStream stream_evalOrExpression=new RewriteRuleSubtreeStream(adaptor,"rule evalOrExpression");
         paraphrases.push("having clause"); 
        try {
            // EsperEPL2Grammar.g:718:2: ( evalOrExpression -> ^( HAVING_EXPR evalOrExpression ) )
            // EsperEPL2Grammar.g:718:4: evalOrExpression
            {
            pushFollow(FOLLOW_evalOrExpression_in_havingClause3328);
            evalOrExpression167=evalOrExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_evalOrExpression.add(evalOrExpression167.getTree());


            // AST REWRITE
            // elements: evalOrExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 719:3: -> ^( HAVING_EXPR evalOrExpression )
            {
                // EsperEPL2Grammar.g:719:6: ^( HAVING_EXPR evalOrExpression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(HAVING_EXPR, "HAVING_EXPR"), root_1);

                adaptor.addChild(root_1, stream_evalOrExpression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "havingClause"

    public static class outputLimit_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "outputLimit"
    // EsperEPL2Grammar.g:722:1: outputLimit : (k= ALL | k= FIRST | k= LAST | k= SNAPSHOT )? ( (ev= EVERY_EXPR ( ( timePeriod )=> timePeriod | ( number | i= IDENT ) (e= EVENTS ) ) ) | (at= AT crontabLimitParameterSet ) | (wh= WHEN expression ( THEN onSetExpr )? ) ) -> {$ev != null && $e != null}? ^( EVENT_LIMIT_EXPR ( $k)? ( number )? ( $i)? ) -> {$ev != null}? ^( TIMEPERIOD_LIMIT_EXPR ( $k)? timePeriod ) -> {$at != null}? ^( CRONTAB_LIMIT_EXPR ( $k)? crontabLimitParameterSet ) -> ^( WHEN_LIMIT_EXPR ( $k)? expression ( onSetExpr )? ) ;
    public final EsperEPL2GrammarParser.outputLimit_return outputLimit() throws RecognitionException {
        EsperEPL2GrammarParser.outputLimit_return retval = new EsperEPL2GrammarParser.outputLimit_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token k=null;
        Token ev=null;
        Token i=null;
        Token e=null;
        Token at=null;
        Token wh=null;
        Token THEN172=null;
        EsperEPL2GrammarParser.timePeriod_return timePeriod168 = null;

        EsperEPL2GrammarParser.number_return number169 = null;

        EsperEPL2GrammarParser.crontabLimitParameterSet_return crontabLimitParameterSet170 = null;

        EsperEPL2GrammarParser.expression_return expression171 = null;

        EsperEPL2GrammarParser.onSetExpr_return onSetExpr173 = null;


        CommonTree k_tree=null;
        CommonTree ev_tree=null;
        CommonTree i_tree=null;
        CommonTree e_tree=null;
        CommonTree at_tree=null;
        CommonTree wh_tree=null;
        CommonTree THEN172_tree=null;
        RewriteRuleTokenStream stream_AT=new RewriteRuleTokenStream(adaptor,"token AT");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_THEN=new RewriteRuleTokenStream(adaptor,"token THEN");
        RewriteRuleTokenStream stream_LAST=new RewriteRuleTokenStream(adaptor,"token LAST");
        RewriteRuleTokenStream stream_SNAPSHOT=new RewriteRuleTokenStream(adaptor,"token SNAPSHOT");
        RewriteRuleTokenStream stream_EVENTS=new RewriteRuleTokenStream(adaptor,"token EVENTS");
        RewriteRuleTokenStream stream_WHEN=new RewriteRuleTokenStream(adaptor,"token WHEN");
        RewriteRuleTokenStream stream_EVERY_EXPR=new RewriteRuleTokenStream(adaptor,"token EVERY_EXPR");
        RewriteRuleTokenStream stream_ALL=new RewriteRuleTokenStream(adaptor,"token ALL");
        RewriteRuleTokenStream stream_FIRST=new RewriteRuleTokenStream(adaptor,"token FIRST");
        RewriteRuleSubtreeStream stream_crontabLimitParameterSet=new RewriteRuleSubtreeStream(adaptor,"rule crontabLimitParameterSet");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_timePeriod=new RewriteRuleSubtreeStream(adaptor,"rule timePeriod");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_onSetExpr=new RewriteRuleSubtreeStream(adaptor,"rule onSetExpr");
         paraphrases.push("output rate clause"); 
        try {
            // EsperEPL2Grammar.g:725:2: ( (k= ALL | k= FIRST | k= LAST | k= SNAPSHOT )? ( (ev= EVERY_EXPR ( ( timePeriod )=> timePeriod | ( number | i= IDENT ) (e= EVENTS ) ) ) | (at= AT crontabLimitParameterSet ) | (wh= WHEN expression ( THEN onSetExpr )? ) ) -> {$ev != null && $e != null}? ^( EVENT_LIMIT_EXPR ( $k)? ( number )? ( $i)? ) -> {$ev != null}? ^( TIMEPERIOD_LIMIT_EXPR ( $k)? timePeriod ) -> {$at != null}? ^( CRONTAB_LIMIT_EXPR ( $k)? crontabLimitParameterSet ) -> ^( WHEN_LIMIT_EXPR ( $k)? expression ( onSetExpr )? ) )
            // EsperEPL2Grammar.g:725:6: (k= ALL | k= FIRST | k= LAST | k= SNAPSHOT )? ( (ev= EVERY_EXPR ( ( timePeriod )=> timePeriod | ( number | i= IDENT ) (e= EVENTS ) ) ) | (at= AT crontabLimitParameterSet ) | (wh= WHEN expression ( THEN onSetExpr )? ) )
            {
            // EsperEPL2Grammar.g:725:6: (k= ALL | k= FIRST | k= LAST | k= SNAPSHOT )?
            int alt63=5;
            switch ( input.LA(1) ) {
                case ALL:
                    {
                    alt63=1;
                    }
                    break;
                case FIRST:
                    {
                    alt63=2;
                    }
                    break;
                case LAST:
                    {
                    alt63=3;
                    }
                    break;
                case SNAPSHOT:
                    {
                    alt63=4;
                    }
                    break;
            }

            switch (alt63) {
                case 1 :
                    // EsperEPL2Grammar.g:725:7: k= ALL
                    {
                    k=(Token)match(input,ALL,FOLLOW_ALL_in_outputLimit3366); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ALL.add(k);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:725:13: k= FIRST
                    {
                    k=(Token)match(input,FIRST,FOLLOW_FIRST_in_outputLimit3370); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FIRST.add(k);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:725:21: k= LAST
                    {
                    k=(Token)match(input,LAST,FOLLOW_LAST_in_outputLimit3374); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LAST.add(k);


                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:725:28: k= SNAPSHOT
                    {
                    k=(Token)match(input,SNAPSHOT,FOLLOW_SNAPSHOT_in_outputLimit3378); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SNAPSHOT.add(k);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:726:8: ( (ev= EVERY_EXPR ( ( timePeriod )=> timePeriod | ( number | i= IDENT ) (e= EVENTS ) ) ) | (at= AT crontabLimitParameterSet ) | (wh= WHEN expression ( THEN onSetExpr )? ) )
            int alt67=3;
            switch ( input.LA(1) ) {
            case EVERY_EXPR:
                {
                alt67=1;
                }
                break;
            case AT:
                {
                alt67=2;
                }
                break;
            case WHEN:
                {
                alt67=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 67, 0, input);

                throw nvae;
            }

            switch (alt67) {
                case 1 :
                    // EsperEPL2Grammar.g:727:10: (ev= EVERY_EXPR ( ( timePeriod )=> timePeriod | ( number | i= IDENT ) (e= EVENTS ) ) )
                    {
                    // EsperEPL2Grammar.g:727:10: (ev= EVERY_EXPR ( ( timePeriod )=> timePeriod | ( number | i= IDENT ) (e= EVENTS ) ) )
                    // EsperEPL2Grammar.g:727:12: ev= EVERY_EXPR ( ( timePeriod )=> timePeriod | ( number | i= IDENT ) (e= EVENTS ) )
                    {
                    ev=(Token)match(input,EVERY_EXPR,FOLLOW_EVERY_EXPR_in_outputLimit3405); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EVERY_EXPR.add(ev);

                    // EsperEPL2Grammar.g:728:5: ( ( timePeriod )=> timePeriod | ( number | i= IDENT ) (e= EVENTS ) )
                    int alt65=2;
                    int LA65_0 = input.LA(1);

                    if ( (LA65_0==NUM_INT) ) {
                        int LA65_1 = input.LA(2);

                        if ( (LA65_1==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt65=1;
                        }
                        else if ( (LA65_1==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt65=1;
                        }
                        else if ( (LA65_1==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt65=1;
                        }
                        else if ( (LA65_1==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt65=1;
                        }
                        else if ( (LA65_1==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt65=1;
                        }
                        else if ( (LA65_1==EVENTS) ) {
                            alt65=2;
                        }
                        else if ( (LA65_1==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt65=1;
                        }
                        else if ( (LA65_1==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt65=1;
                        }
                        else if ( (LA65_1==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt65=1;
                        }
                        else if ( (LA65_1==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt65=1;
                        }
                        else if ( (LA65_1==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt65=1;
                        }
                        else if ( (LA65_1==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt65=1;
                        }
                        else if ( (LA65_1==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt65=1;
                        }
                        else if ( (LA65_1==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt65=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 65, 1, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA65_0==NUM_LONG) ) {
                        int LA65_2 = input.LA(2);

                        if ( (LA65_2==EVENTS) ) {
                            alt65=2;
                        }
                        else if ( (LA65_2==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt65=1;
                        }
                        else if ( (LA65_2==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt65=1;
                        }
                        else if ( (LA65_2==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt65=1;
                        }
                        else if ( (LA65_2==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt65=1;
                        }
                        else if ( (LA65_2==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt65=1;
                        }
                        else if ( (LA65_2==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt65=1;
                        }
                        else if ( (LA65_2==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt65=1;
                        }
                        else if ( (LA65_2==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt65=1;
                        }
                        else if ( (LA65_2==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt65=1;
                        }
                        else if ( (LA65_2==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt65=1;
                        }
                        else if ( (LA65_2==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt65=1;
                        }
                        else if ( (LA65_2==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt65=1;
                        }
                        else if ( (LA65_2==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt65=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 65, 2, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA65_0==NUM_FLOAT) ) {
                        int LA65_3 = input.LA(2);

                        if ( (LA65_3==EVENTS) ) {
                            alt65=2;
                        }
                        else if ( (LA65_3==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt65=1;
                        }
                        else if ( (LA65_3==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt65=1;
                        }
                        else if ( (LA65_3==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt65=1;
                        }
                        else if ( (LA65_3==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt65=1;
                        }
                        else if ( (LA65_3==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt65=1;
                        }
                        else if ( (LA65_3==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt65=1;
                        }
                        else if ( (LA65_3==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt65=1;
                        }
                        else if ( (LA65_3==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt65=1;
                        }
                        else if ( (LA65_3==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt65=1;
                        }
                        else if ( (LA65_3==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt65=1;
                        }
                        else if ( (LA65_3==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt65=1;
                        }
                        else if ( (LA65_3==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt65=1;
                        }
                        else if ( (LA65_3==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt65=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 65, 3, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA65_0==NUM_DOUBLE) ) {
                        int LA65_4 = input.LA(2);

                        if ( (LA65_4==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt65=1;
                        }
                        else if ( (LA65_4==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt65=1;
                        }
                        else if ( (LA65_4==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt65=1;
                        }
                        else if ( (LA65_4==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt65=1;
                        }
                        else if ( (LA65_4==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt65=1;
                        }
                        else if ( (LA65_4==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt65=1;
                        }
                        else if ( (LA65_4==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt65=1;
                        }
                        else if ( (LA65_4==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt65=1;
                        }
                        else if ( (LA65_4==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt65=1;
                        }
                        else if ( (LA65_4==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt65=1;
                        }
                        else if ( (LA65_4==EVENTS) ) {
                            alt65=2;
                        }
                        else if ( (LA65_4==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt65=1;
                        }
                        else if ( (LA65_4==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt65=1;
                        }
                        else if ( (LA65_4==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt65=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 65, 4, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA65_0==IDENT) ) {
                        int LA65_5 = input.LA(2);

                        if ( (LA65_5==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt65=1;
                        }
                        else if ( (LA65_5==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt65=1;
                        }
                        else if ( (LA65_5==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt65=1;
                        }
                        else if ( (LA65_5==EVENTS) ) {
                            alt65=2;
                        }
                        else if ( (LA65_5==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt65=1;
                        }
                        else if ( (LA65_5==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt65=1;
                        }
                        else if ( (LA65_5==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt65=1;
                        }
                        else if ( (LA65_5==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt65=1;
                        }
                        else if ( (LA65_5==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt65=1;
                        }
                        else if ( (LA65_5==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt65=1;
                        }
                        else if ( (LA65_5==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt65=1;
                        }
                        else if ( (LA65_5==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt65=1;
                        }
                        else if ( (LA65_5==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt65=1;
                        }
                        else if ( (LA65_5==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt65=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 65, 5, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA65_0==QUESTION) && (synpred2_EsperEPL2Grammar())) {
                        alt65=1;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 65, 0, input);

                        throw nvae;
                    }
                    switch (alt65) {
                        case 1 :
                            // EsperEPL2Grammar.g:729:7: ( timePeriod )=> timePeriod
                            {
                            pushFollow(FOLLOW_timePeriod_in_outputLimit3427);
                            timePeriod168=timePeriod();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_timePeriod.add(timePeriod168.getTree());

                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:730:7: ( number | i= IDENT ) (e= EVENTS )
                            {
                            // EsperEPL2Grammar.g:730:7: ( number | i= IDENT )
                            int alt64=2;
                            int LA64_0 = input.LA(1);

                            if ( (LA64_0==NUM_DOUBLE||LA64_0==NUM_INT||(LA64_0>=NUM_LONG && LA64_0<=NUM_FLOAT)) ) {
                                alt64=1;
                            }
                            else if ( (LA64_0==IDENT) ) {
                                alt64=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 64, 0, input);

                                throw nvae;
                            }
                            switch (alt64) {
                                case 1 :
                                    // EsperEPL2Grammar.g:730:8: number
                                    {
                                    pushFollow(FOLLOW_number_in_outputLimit3436);
                                    number169=number();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_number.add(number169.getTree());

                                    }
                                    break;
                                case 2 :
                                    // EsperEPL2Grammar.g:730:17: i= IDENT
                                    {
                                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_outputLimit3442); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                                    }
                                    break;

                            }

                            // EsperEPL2Grammar.g:730:26: (e= EVENTS )
                            // EsperEPL2Grammar.g:730:27: e= EVENTS
                            {
                            e=(Token)match(input,EVENTS,FOLLOW_EVENTS_in_outputLimit3448); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_EVENTS.add(e);


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:734:3: (at= AT crontabLimitParameterSet )
                    {
                    // EsperEPL2Grammar.g:734:3: (at= AT crontabLimitParameterSet )
                    // EsperEPL2Grammar.g:734:5: at= AT crontabLimitParameterSet
                    {
                    at=(Token)match(input,AT,FOLLOW_AT_in_outputLimit3471); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AT.add(at);

                    pushFollow(FOLLOW_crontabLimitParameterSet_in_outputLimit3473);
                    crontabLimitParameterSet170=crontabLimitParameterSet();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_crontabLimitParameterSet.add(crontabLimitParameterSet170.getTree());

                    }


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:736:3: (wh= WHEN expression ( THEN onSetExpr )? )
                    {
                    // EsperEPL2Grammar.g:736:3: (wh= WHEN expression ( THEN onSetExpr )? )
                    // EsperEPL2Grammar.g:736:5: wh= WHEN expression ( THEN onSetExpr )?
                    {
                    wh=(Token)match(input,WHEN,FOLLOW_WHEN_in_outputLimit3487); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHEN.add(wh);

                    pushFollow(FOLLOW_expression_in_outputLimit3489);
                    expression171=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression171.getTree());
                    // EsperEPL2Grammar.g:736:24: ( THEN onSetExpr )?
                    int alt66=2;
                    int LA66_0 = input.LA(1);

                    if ( (LA66_0==THEN) ) {
                        alt66=1;
                    }
                    switch (alt66) {
                        case 1 :
                            // EsperEPL2Grammar.g:736:25: THEN onSetExpr
                            {
                            THEN172=(Token)match(input,THEN,FOLLOW_THEN_in_outputLimit3492); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_THEN.add(THEN172);

                            pushFollow(FOLLOW_onSetExpr_in_outputLimit3494);
                            onSetExpr173=onSetExpr();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_onSetExpr.add(onSetExpr173.getTree());

                            }
                            break;

                    }


                    }


                    }
                    break;

            }



            // AST REWRITE
            // elements: k, i, k, k, timePeriod, k, number, onSetExpr, expression, crontabLimitParameterSet
            // token labels: k, i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_k=new RewriteRuleTokenStream(adaptor,"token k",k);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 738:6: -> {$ev != null && $e != null}? ^( EVENT_LIMIT_EXPR ( $k)? ( number )? ( $i)? )
            if (ev != null && e != null) {
                // EsperEPL2Grammar.g:738:38: ^( EVENT_LIMIT_EXPR ( $k)? ( number )? ( $i)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_LIMIT_EXPR, "EVENT_LIMIT_EXPR"), root_1);

                // EsperEPL2Grammar.g:738:57: ( $k)?
                if ( stream_k.hasNext() ) {
                    adaptor.addChild(root_1, stream_k.nextNode());

                }
                stream_k.reset();
                // EsperEPL2Grammar.g:738:61: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:738:69: ( $i)?
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());

                }
                stream_i.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 739:6: -> {$ev != null}? ^( TIMEPERIOD_LIMIT_EXPR ( $k)? timePeriod )
            if (ev != null) {
                // EsperEPL2Grammar.g:739:24: ^( TIMEPERIOD_LIMIT_EXPR ( $k)? timePeriod )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TIMEPERIOD_LIMIT_EXPR, "TIMEPERIOD_LIMIT_EXPR"), root_1);

                // EsperEPL2Grammar.g:739:48: ( $k)?
                if ( stream_k.hasNext() ) {
                    adaptor.addChild(root_1, stream_k.nextNode());

                }
                stream_k.reset();
                adaptor.addChild(root_1, stream_timePeriod.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 740:6: -> {$at != null}? ^( CRONTAB_LIMIT_EXPR ( $k)? crontabLimitParameterSet )
            if (at != null) {
                // EsperEPL2Grammar.g:740:24: ^( CRONTAB_LIMIT_EXPR ( $k)? crontabLimitParameterSet )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CRONTAB_LIMIT_EXPR, "CRONTAB_LIMIT_EXPR"), root_1);

                // EsperEPL2Grammar.g:740:45: ( $k)?
                if ( stream_k.hasNext() ) {
                    adaptor.addChild(root_1, stream_k.nextNode());

                }
                stream_k.reset();
                adaptor.addChild(root_1, stream_crontabLimitParameterSet.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 741:6: -> ^( WHEN_LIMIT_EXPR ( $k)? expression ( onSetExpr )? )
            {
                // EsperEPL2Grammar.g:741:9: ^( WHEN_LIMIT_EXPR ( $k)? expression ( onSetExpr )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WHEN_LIMIT_EXPR, "WHEN_LIMIT_EXPR"), root_1);

                // EsperEPL2Grammar.g:741:27: ( $k)?
                if ( stream_k.hasNext() ) {
                    adaptor.addChild(root_1, stream_k.nextNode());

                }
                stream_k.reset();
                adaptor.addChild(root_1, stream_expression.nextTree());
                // EsperEPL2Grammar.g:741:42: ( onSetExpr )?
                if ( stream_onSetExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetExpr.nextTree());

                }
                stream_onSetExpr.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "outputLimit"

    public static class rowLimit_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rowLimit"
    // EsperEPL2Grammar.g:744:1: rowLimit : (n1= numberconstant | i1= IDENT ) ( (c= COMMA | o= OFFSET ) (n2= numberconstant | i2= IDENT ) )? -> ^( ROW_LIMIT_EXPR ( $n1)? ( $i1)? ( $n2)? ( $i2)? ( $o)? ( $c)? ) ;
    public final EsperEPL2GrammarParser.rowLimit_return rowLimit() throws RecognitionException {
        EsperEPL2GrammarParser.rowLimit_return retval = new EsperEPL2GrammarParser.rowLimit_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i1=null;
        Token c=null;
        Token o=null;
        Token i2=null;
        EsperEPL2GrammarParser.numberconstant_return n1 = null;

        EsperEPL2GrammarParser.numberconstant_return n2 = null;


        CommonTree i1_tree=null;
        CommonTree c_tree=null;
        CommonTree o_tree=null;
        CommonTree i2_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_OFFSET=new RewriteRuleTokenStream(adaptor,"token OFFSET");
        RewriteRuleSubtreeStream stream_numberconstant=new RewriteRuleSubtreeStream(adaptor,"rule numberconstant");
         paraphrases.push("row limit clause"); 
        try {
            // EsperEPL2Grammar.g:747:2: ( (n1= numberconstant | i1= IDENT ) ( (c= COMMA | o= OFFSET ) (n2= numberconstant | i2= IDENT ) )? -> ^( ROW_LIMIT_EXPR ( $n1)? ( $i1)? ( $n2)? ( $i2)? ( $o)? ( $c)? ) )
            // EsperEPL2Grammar.g:747:6: (n1= numberconstant | i1= IDENT ) ( (c= COMMA | o= OFFSET ) (n2= numberconstant | i2= IDENT ) )?
            {
            // EsperEPL2Grammar.g:747:6: (n1= numberconstant | i1= IDENT )
            int alt68=2;
            int LA68_0 = input.LA(1);

            if ( (LA68_0==NUM_DOUBLE||(LA68_0>=PLUS && LA68_0<=MINUS)||LA68_0==NUM_INT||(LA68_0>=NUM_LONG && LA68_0<=NUM_FLOAT)) ) {
                alt68=1;
            }
            else if ( (LA68_0==IDENT) ) {
                alt68=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 68, 0, input);

                throw nvae;
            }
            switch (alt68) {
                case 1 :
                    // EsperEPL2Grammar.g:747:7: n1= numberconstant
                    {
                    pushFollow(FOLLOW_numberconstant_in_rowLimit3623);
                    n1=numberconstant();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_numberconstant.add(n1.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:747:27: i1= IDENT
                    {
                    i1=(Token)match(input,IDENT,FOLLOW_IDENT_in_rowLimit3629); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i1);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:747:37: ( (c= COMMA | o= OFFSET ) (n2= numberconstant | i2= IDENT ) )?
            int alt71=2;
            int LA71_0 = input.LA(1);

            if ( (LA71_0==OFFSET||LA71_0==COMMA) ) {
                alt71=1;
            }
            switch (alt71) {
                case 1 :
                    // EsperEPL2Grammar.g:747:38: (c= COMMA | o= OFFSET ) (n2= numberconstant | i2= IDENT )
                    {
                    // EsperEPL2Grammar.g:747:38: (c= COMMA | o= OFFSET )
                    int alt69=2;
                    int LA69_0 = input.LA(1);

                    if ( (LA69_0==COMMA) ) {
                        alt69=1;
                    }
                    else if ( (LA69_0==OFFSET) ) {
                        alt69=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 69, 0, input);

                        throw nvae;
                    }
                    switch (alt69) {
                        case 1 :
                            // EsperEPL2Grammar.g:747:39: c= COMMA
                            {
                            c=(Token)match(input,COMMA,FOLLOW_COMMA_in_rowLimit3636); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COMMA.add(c);


                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:747:49: o= OFFSET
                            {
                            o=(Token)match(input,OFFSET,FOLLOW_OFFSET_in_rowLimit3642); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_OFFSET.add(o);


                            }
                            break;

                    }

                    // EsperEPL2Grammar.g:747:59: (n2= numberconstant | i2= IDENT )
                    int alt70=2;
                    int LA70_0 = input.LA(1);

                    if ( (LA70_0==NUM_DOUBLE||(LA70_0>=PLUS && LA70_0<=MINUS)||LA70_0==NUM_INT||(LA70_0>=NUM_LONG && LA70_0<=NUM_FLOAT)) ) {
                        alt70=1;
                    }
                    else if ( (LA70_0==IDENT) ) {
                        alt70=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 70, 0, input);

                        throw nvae;
                    }
                    switch (alt70) {
                        case 1 :
                            // EsperEPL2Grammar.g:747:60: n2= numberconstant
                            {
                            pushFollow(FOLLOW_numberconstant_in_rowLimit3648);
                            n2=numberconstant();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_numberconstant.add(n2.getTree());

                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:747:80: i2= IDENT
                            {
                            i2=(Token)match(input,IDENT,FOLLOW_IDENT_in_rowLimit3654); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IDENT.add(i2);


                            }
                            break;

                    }


                    }
                    break;

            }



            // AST REWRITE
            // elements: c, n2, o, i2, n1, i1
            // token labels: c, o, i2, i1
            // rule labels: n1, retval, n2
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_c=new RewriteRuleTokenStream(adaptor,"token c",c);
            RewriteRuleTokenStream stream_o=new RewriteRuleTokenStream(adaptor,"token o",o);
            RewriteRuleTokenStream stream_i2=new RewriteRuleTokenStream(adaptor,"token i2",i2);
            RewriteRuleTokenStream stream_i1=new RewriteRuleTokenStream(adaptor,"token i1",i1);
            RewriteRuleSubtreeStream stream_n1=new RewriteRuleSubtreeStream(adaptor,"token n1",n1!=null?n1.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_n2=new RewriteRuleSubtreeStream(adaptor,"token n2",n2!=null?n2.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 748:6: -> ^( ROW_LIMIT_EXPR ( $n1)? ( $i1)? ( $n2)? ( $i2)? ( $o)? ( $c)? )
            {
                // EsperEPL2Grammar.g:748:9: ^( ROW_LIMIT_EXPR ( $n1)? ( $i1)? ( $n2)? ( $i2)? ( $o)? ( $c)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ROW_LIMIT_EXPR, "ROW_LIMIT_EXPR"), root_1);

                // EsperEPL2Grammar.g:748:26: ( $n1)?
                if ( stream_n1.hasNext() ) {
                    adaptor.addChild(root_1, stream_n1.nextTree());

                }
                stream_n1.reset();
                // EsperEPL2Grammar.g:748:31: ( $i1)?
                if ( stream_i1.hasNext() ) {
                    adaptor.addChild(root_1, stream_i1.nextNode());

                }
                stream_i1.reset();
                // EsperEPL2Grammar.g:748:36: ( $n2)?
                if ( stream_n2.hasNext() ) {
                    adaptor.addChild(root_1, stream_n2.nextTree());

                }
                stream_n2.reset();
                // EsperEPL2Grammar.g:748:41: ( $i2)?
                if ( stream_i2.hasNext() ) {
                    adaptor.addChild(root_1, stream_i2.nextNode());

                }
                stream_i2.reset();
                // EsperEPL2Grammar.g:748:46: ( $o)?
                if ( stream_o.hasNext() ) {
                    adaptor.addChild(root_1, stream_o.nextNode());

                }
                stream_o.reset();
                // EsperEPL2Grammar.g:748:50: ( $c)?
                if ( stream_c.hasNext() ) {
                    adaptor.addChild(root_1, stream_c.nextNode());

                }
                stream_c.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "rowLimit"

    public static class crontabLimitParameterSet_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "crontabLimitParameterSet"
    // EsperEPL2Grammar.g:751:1: crontabLimitParameterSet : LPAREN expressionWithTime COMMA expressionWithTime COMMA expressionWithTime COMMA expressionWithTime COMMA expressionWithTime ( COMMA expressionWithTime )? RPAREN -> ^( CRONTAB_LIMIT_EXPR_PARAM ( expressionWithTime )* ) ;
    public final EsperEPL2GrammarParser.crontabLimitParameterSet_return crontabLimitParameterSet() throws RecognitionException {
        EsperEPL2GrammarParser.crontabLimitParameterSet_return retval = new EsperEPL2GrammarParser.crontabLimitParameterSet_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LPAREN174=null;
        Token COMMA176=null;
        Token COMMA178=null;
        Token COMMA180=null;
        Token COMMA182=null;
        Token COMMA184=null;
        Token RPAREN186=null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime175 = null;

        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime177 = null;

        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime179 = null;

        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime181 = null;

        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime183 = null;

        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime185 = null;


        CommonTree LPAREN174_tree=null;
        CommonTree COMMA176_tree=null;
        CommonTree COMMA178_tree=null;
        CommonTree COMMA180_tree=null;
        CommonTree COMMA182_tree=null;
        CommonTree COMMA184_tree=null;
        CommonTree RPAREN186_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionWithTime=new RewriteRuleSubtreeStream(adaptor,"rule expressionWithTime");
        try {
            // EsperEPL2Grammar.g:752:2: ( LPAREN expressionWithTime COMMA expressionWithTime COMMA expressionWithTime COMMA expressionWithTime COMMA expressionWithTime ( COMMA expressionWithTime )? RPAREN -> ^( CRONTAB_LIMIT_EXPR_PARAM ( expressionWithTime )* ) )
            // EsperEPL2Grammar.g:752:4: LPAREN expressionWithTime COMMA expressionWithTime COMMA expressionWithTime COMMA expressionWithTime COMMA expressionWithTime ( COMMA expressionWithTime )? RPAREN
            {
            LPAREN174=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_crontabLimitParameterSet3706); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN174);

            pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet3708);
            expressionWithTime175=expressionWithTime();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime175.getTree());
            COMMA176=(Token)match(input,COMMA,FOLLOW_COMMA_in_crontabLimitParameterSet3710); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COMMA.add(COMMA176);

            pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet3712);
            expressionWithTime177=expressionWithTime();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime177.getTree());
            COMMA178=(Token)match(input,COMMA,FOLLOW_COMMA_in_crontabLimitParameterSet3714); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COMMA.add(COMMA178);

            pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet3716);
            expressionWithTime179=expressionWithTime();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime179.getTree());
            COMMA180=(Token)match(input,COMMA,FOLLOW_COMMA_in_crontabLimitParameterSet3718); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COMMA.add(COMMA180);

            pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet3720);
            expressionWithTime181=expressionWithTime();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime181.getTree());
            COMMA182=(Token)match(input,COMMA,FOLLOW_COMMA_in_crontabLimitParameterSet3722); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COMMA.add(COMMA182);

            pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet3724);
            expressionWithTime183=expressionWithTime();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime183.getTree());
            // EsperEPL2Grammar.g:752:130: ( COMMA expressionWithTime )?
            int alt72=2;
            int LA72_0 = input.LA(1);

            if ( (LA72_0==COMMA) ) {
                alt72=1;
            }
            switch (alt72) {
                case 1 :
                    // EsperEPL2Grammar.g:752:131: COMMA expressionWithTime
                    {
                    COMMA184=(Token)match(input,COMMA,FOLLOW_COMMA_in_crontabLimitParameterSet3727); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA184);

                    pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet3729);
                    expressionWithTime185=expressionWithTime();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime185.getTree());

                    }
                    break;

            }

            RPAREN186=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_crontabLimitParameterSet3733); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN186);



            // AST REWRITE
            // elements: expressionWithTime
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 753:3: -> ^( CRONTAB_LIMIT_EXPR_PARAM ( expressionWithTime )* )
            {
                // EsperEPL2Grammar.g:753:6: ^( CRONTAB_LIMIT_EXPR_PARAM ( expressionWithTime )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CRONTAB_LIMIT_EXPR_PARAM, "CRONTAB_LIMIT_EXPR_PARAM"), root_1);

                // EsperEPL2Grammar.g:753:33: ( expressionWithTime )*
                while ( stream_expressionWithTime.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionWithTime.nextTree());

                }
                stream_expressionWithTime.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "crontabLimitParameterSet"

    public static class whenClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "whenClause"
    // EsperEPL2Grammar.g:756:1: whenClause : ( WHEN expression THEN expression ) ;
    public final EsperEPL2GrammarParser.whenClause_return whenClause() throws RecognitionException {
        EsperEPL2GrammarParser.whenClause_return retval = new EsperEPL2GrammarParser.whenClause_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token WHEN187=null;
        Token THEN189=null;
        EsperEPL2GrammarParser.expression_return expression188 = null;

        EsperEPL2GrammarParser.expression_return expression190 = null;


        CommonTree WHEN187_tree=null;
        CommonTree THEN189_tree=null;

        try {
            // EsperEPL2Grammar.g:757:2: ( ( WHEN expression THEN expression ) )
            // EsperEPL2Grammar.g:757:4: ( WHEN expression THEN expression )
            {
            root_0 = (CommonTree)adaptor.nil();

            // EsperEPL2Grammar.g:757:4: ( WHEN expression THEN expression )
            // EsperEPL2Grammar.g:757:5: WHEN expression THEN expression
            {
            WHEN187=(Token)match(input,WHEN,FOLLOW_WHEN_in_whenClause3763); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_whenClause3766);
            expression188=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression188.getTree());
            THEN189=(Token)match(input,THEN,FOLLOW_THEN_in_whenClause3768); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_whenClause3771);
            expression190=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression190.getTree());

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "whenClause"

    public static class elseClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elseClause"
    // EsperEPL2Grammar.g:760:1: elseClause : ( ELSE expression ) ;
    public final EsperEPL2GrammarParser.elseClause_return elseClause() throws RecognitionException {
        EsperEPL2GrammarParser.elseClause_return retval = new EsperEPL2GrammarParser.elseClause_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token ELSE191=null;
        EsperEPL2GrammarParser.expression_return expression192 = null;


        CommonTree ELSE191_tree=null;

        try {
            // EsperEPL2Grammar.g:761:2: ( ( ELSE expression ) )
            // EsperEPL2Grammar.g:761:4: ( ELSE expression )
            {
            root_0 = (CommonTree)adaptor.nil();

            // EsperEPL2Grammar.g:761:4: ( ELSE expression )
            // EsperEPL2Grammar.g:761:5: ELSE expression
            {
            ELSE191=(Token)match(input,ELSE,FOLLOW_ELSE_in_elseClause3784); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_elseClause3787);
            expression192=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression192.getTree());

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "elseClause"

    public static class expression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expression"
    // EsperEPL2Grammar.g:765:1: expression : caseExpression ;
    public final EsperEPL2GrammarParser.expression_return expression() throws RecognitionException {
        EsperEPL2GrammarParser.expression_return retval = new EsperEPL2GrammarParser.expression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.caseExpression_return caseExpression193 = null;



        try {
            // EsperEPL2Grammar.g:766:2: ( caseExpression )
            // EsperEPL2Grammar.g:766:4: caseExpression
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_caseExpression_in_expression3800);
            caseExpression193=caseExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, caseExpression193.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "expression"

    public static class caseExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "caseExpression"
    // EsperEPL2Grammar.g:769:1: caseExpression : ( CASE ( whenClause )+ ( elseClause )? END | CASE expression ( whenClause )+ ( elseClause )? END -> ^( CASE2 expression ( whenClause )+ ( elseClause )? ) | evalOrExpression );
    public final EsperEPL2GrammarParser.caseExpression_return caseExpression() throws RecognitionException {
        EsperEPL2GrammarParser.caseExpression_return retval = new EsperEPL2GrammarParser.caseExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token CASE194=null;
        Token END197=null;
        Token CASE198=null;
        Token END202=null;
        EsperEPL2GrammarParser.whenClause_return whenClause195 = null;

        EsperEPL2GrammarParser.elseClause_return elseClause196 = null;

        EsperEPL2GrammarParser.expression_return expression199 = null;

        EsperEPL2GrammarParser.whenClause_return whenClause200 = null;

        EsperEPL2GrammarParser.elseClause_return elseClause201 = null;

        EsperEPL2GrammarParser.evalOrExpression_return evalOrExpression203 = null;


        CommonTree CASE194_tree=null;
        CommonTree END197_tree=null;
        CommonTree CASE198_tree=null;
        CommonTree END202_tree=null;
        RewriteRuleTokenStream stream_END=new RewriteRuleTokenStream(adaptor,"token END");
        RewriteRuleTokenStream stream_CASE=new RewriteRuleTokenStream(adaptor,"token CASE");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_whenClause=new RewriteRuleSubtreeStream(adaptor,"rule whenClause");
        RewriteRuleSubtreeStream stream_elseClause=new RewriteRuleSubtreeStream(adaptor,"rule elseClause");
        try {
            // EsperEPL2Grammar.g:770:2: ( CASE ( whenClause )+ ( elseClause )? END | CASE expression ( whenClause )+ ( elseClause )? END -> ^( CASE2 expression ( whenClause )+ ( elseClause )? ) | evalOrExpression )
            int alt77=3;
            alt77 = dfa77.predict(input);
            switch (alt77) {
                case 1 :
                    // EsperEPL2Grammar.g:770:4: CASE ( whenClause )+ ( elseClause )? END
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    if ( state.backtracking==0 ) {
                       paraphrases.push("case expression"); 
                    }
                    CASE194=(Token)match(input,CASE,FOLLOW_CASE_in_caseExpression3814); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CASE194_tree = (CommonTree)adaptor.create(CASE194);
                    root_0 = (CommonTree)adaptor.becomeRoot(CASE194_tree, root_0);
                    }
                    // EsperEPL2Grammar.g:770:52: ( whenClause )+
                    int cnt73=0;
                    loop73:
                    do {
                        int alt73=2;
                        int LA73_0 = input.LA(1);

                        if ( (LA73_0==WHEN) ) {
                            alt73=1;
                        }


                        switch (alt73) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:770:52: whenClause
                    	    {
                    	    pushFollow(FOLLOW_whenClause_in_caseExpression3817);
                    	    whenClause195=whenClause();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, whenClause195.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt73 >= 1 ) break loop73;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(73, input);
                                throw eee;
                        }
                        cnt73++;
                    } while (true);

                    // EsperEPL2Grammar.g:770:64: ( elseClause )?
                    int alt74=2;
                    int LA74_0 = input.LA(1);

                    if ( (LA74_0==ELSE) ) {
                        alt74=1;
                    }
                    switch (alt74) {
                        case 1 :
                            // EsperEPL2Grammar.g:770:64: elseClause
                            {
                            pushFollow(FOLLOW_elseClause_in_caseExpression3820);
                            elseClause196=elseClause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, elseClause196.getTree());

                            }
                            break;

                    }

                    END197=(Token)match(input,END,FOLLOW_END_in_caseExpression3823); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       paraphrases.pop(); 
                    }

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:771:4: CASE expression ( whenClause )+ ( elseClause )? END
                    {
                    if ( state.backtracking==0 ) {
                       paraphrases.push("case expression"); 
                    }
                    CASE198=(Token)match(input,CASE,FOLLOW_CASE_in_caseExpression3834); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CASE.add(CASE198);

                    pushFollow(FOLLOW_expression_in_caseExpression3836);
                    expression199=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression199.getTree());
                    // EsperEPL2Grammar.g:771:62: ( whenClause )+
                    int cnt75=0;
                    loop75:
                    do {
                        int alt75=2;
                        int LA75_0 = input.LA(1);

                        if ( (LA75_0==WHEN) ) {
                            alt75=1;
                        }


                        switch (alt75) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:771:62: whenClause
                    	    {
                    	    pushFollow(FOLLOW_whenClause_in_caseExpression3838);
                    	    whenClause200=whenClause();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_whenClause.add(whenClause200.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt75 >= 1 ) break loop75;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(75, input);
                                throw eee;
                        }
                        cnt75++;
                    } while (true);

                    // EsperEPL2Grammar.g:771:74: ( elseClause )?
                    int alt76=2;
                    int LA76_0 = input.LA(1);

                    if ( (LA76_0==ELSE) ) {
                        alt76=1;
                    }
                    switch (alt76) {
                        case 1 :
                            // EsperEPL2Grammar.g:771:74: elseClause
                            {
                            pushFollow(FOLLOW_elseClause_in_caseExpression3841);
                            elseClause201=elseClause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elseClause.add(elseClause201.getTree());

                            }
                            break;

                    }

                    END202=(Token)match(input,END,FOLLOW_END_in_caseExpression3844); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_END.add(END202);

                    if ( state.backtracking==0 ) {
                       paraphrases.pop(); 
                    }


                    // AST REWRITE
                    // elements: elseClause, expression, whenClause
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 772:4: -> ^( CASE2 expression ( whenClause )+ ( elseClause )? )
                    {
                        // EsperEPL2Grammar.g:772:7: ^( CASE2 expression ( whenClause )+ ( elseClause )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CASE2, "CASE2"), root_1);

                        adaptor.addChild(root_1, stream_expression.nextTree());
                        if ( !(stream_whenClause.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_whenClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_whenClause.nextTree());

                        }
                        stream_whenClause.reset();
                        // EsperEPL2Grammar.g:772:38: ( elseClause )?
                        if ( stream_elseClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_elseClause.nextTree());

                        }
                        stream_elseClause.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:773:4: evalOrExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_evalOrExpression_in_caseExpression3868);
                    evalOrExpression203=evalOrExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, evalOrExpression203.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "caseExpression"

    public static class evalOrExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "evalOrExpression"
    // EsperEPL2Grammar.g:776:1: evalOrExpression : evalAndExpression (op= OR_EXPR evalAndExpression )* -> {$op != null}? ^( EVAL_OR_EXPR ( evalAndExpression )* ) -> evalAndExpression ;
    public final EsperEPL2GrammarParser.evalOrExpression_return evalOrExpression() throws RecognitionException {
        EsperEPL2GrammarParser.evalOrExpression_return retval = new EsperEPL2GrammarParser.evalOrExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token op=null;
        EsperEPL2GrammarParser.evalAndExpression_return evalAndExpression204 = null;

        EsperEPL2GrammarParser.evalAndExpression_return evalAndExpression205 = null;


        CommonTree op_tree=null;
        RewriteRuleTokenStream stream_OR_EXPR=new RewriteRuleTokenStream(adaptor,"token OR_EXPR");
        RewriteRuleSubtreeStream stream_evalAndExpression=new RewriteRuleSubtreeStream(adaptor,"rule evalAndExpression");
        try {
            // EsperEPL2Grammar.g:777:2: ( evalAndExpression (op= OR_EXPR evalAndExpression )* -> {$op != null}? ^( EVAL_OR_EXPR ( evalAndExpression )* ) -> evalAndExpression )
            // EsperEPL2Grammar.g:777:4: evalAndExpression (op= OR_EXPR evalAndExpression )*
            {
            pushFollow(FOLLOW_evalAndExpression_in_evalOrExpression3879);
            evalAndExpression204=evalAndExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_evalAndExpression.add(evalAndExpression204.getTree());
            // EsperEPL2Grammar.g:777:22: (op= OR_EXPR evalAndExpression )*
            loop78:
            do {
                int alt78=2;
                int LA78_0 = input.LA(1);

                if ( (LA78_0==OR_EXPR) ) {
                    alt78=1;
                }


                switch (alt78) {
            	case 1 :
            	    // EsperEPL2Grammar.g:777:23: op= OR_EXPR evalAndExpression
            	    {
            	    op=(Token)match(input,OR_EXPR,FOLLOW_OR_EXPR_in_evalOrExpression3884); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_OR_EXPR.add(op);

            	    pushFollow(FOLLOW_evalAndExpression_in_evalOrExpression3886);
            	    evalAndExpression205=evalAndExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_evalAndExpression.add(evalAndExpression205.getTree());

            	    }
            	    break;

            	default :
            	    break loop78;
                }
            } while (true);



            // AST REWRITE
            // elements: evalAndExpression, evalAndExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 778:3: -> {$op != null}? ^( EVAL_OR_EXPR ( evalAndExpression )* )
            if (op != null) {
                // EsperEPL2Grammar.g:778:21: ^( EVAL_OR_EXPR ( evalAndExpression )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_OR_EXPR, "EVAL_OR_EXPR"), root_1);

                // EsperEPL2Grammar.g:778:36: ( evalAndExpression )*
                while ( stream_evalAndExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_evalAndExpression.nextTree());

                }
                stream_evalAndExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 779:3: -> evalAndExpression
            {
                adaptor.addChild(root_0, stream_evalAndExpression.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "evalOrExpression"

    public static class evalAndExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "evalAndExpression"
    // EsperEPL2Grammar.g:782:1: evalAndExpression : bitWiseExpression (op= AND_EXPR bitWiseExpression )* -> {$op != null}? ^( EVAL_AND_EXPR ( bitWiseExpression )+ ) -> bitWiseExpression ;
    public final EsperEPL2GrammarParser.evalAndExpression_return evalAndExpression() throws RecognitionException {
        EsperEPL2GrammarParser.evalAndExpression_return retval = new EsperEPL2GrammarParser.evalAndExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token op=null;
        EsperEPL2GrammarParser.bitWiseExpression_return bitWiseExpression206 = null;

        EsperEPL2GrammarParser.bitWiseExpression_return bitWiseExpression207 = null;


        CommonTree op_tree=null;
        RewriteRuleTokenStream stream_AND_EXPR=new RewriteRuleTokenStream(adaptor,"token AND_EXPR");
        RewriteRuleSubtreeStream stream_bitWiseExpression=new RewriteRuleSubtreeStream(adaptor,"rule bitWiseExpression");
        try {
            // EsperEPL2Grammar.g:783:2: ( bitWiseExpression (op= AND_EXPR bitWiseExpression )* -> {$op != null}? ^( EVAL_AND_EXPR ( bitWiseExpression )+ ) -> bitWiseExpression )
            // EsperEPL2Grammar.g:783:4: bitWiseExpression (op= AND_EXPR bitWiseExpression )*
            {
            pushFollow(FOLLOW_bitWiseExpression_in_evalAndExpression3918);
            bitWiseExpression206=bitWiseExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_bitWiseExpression.add(bitWiseExpression206.getTree());
            // EsperEPL2Grammar.g:783:22: (op= AND_EXPR bitWiseExpression )*
            loop79:
            do {
                int alt79=2;
                int LA79_0 = input.LA(1);

                if ( (LA79_0==AND_EXPR) ) {
                    alt79=1;
                }


                switch (alt79) {
            	case 1 :
            	    // EsperEPL2Grammar.g:783:23: op= AND_EXPR bitWiseExpression
            	    {
            	    op=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_evalAndExpression3923); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_AND_EXPR.add(op);

            	    pushFollow(FOLLOW_bitWiseExpression_in_evalAndExpression3925);
            	    bitWiseExpression207=bitWiseExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_bitWiseExpression.add(bitWiseExpression207.getTree());

            	    }
            	    break;

            	default :
            	    break loop79;
                }
            } while (true);



            // AST REWRITE
            // elements: bitWiseExpression, bitWiseExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 784:3: -> {$op != null}? ^( EVAL_AND_EXPR ( bitWiseExpression )+ )
            if (op != null) {
                // EsperEPL2Grammar.g:784:21: ^( EVAL_AND_EXPR ( bitWiseExpression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_AND_EXPR, "EVAL_AND_EXPR"), root_1);

                if ( !(stream_bitWiseExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_bitWiseExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_bitWiseExpression.nextTree());

                }
                stream_bitWiseExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 785:3: -> bitWiseExpression
            {
                adaptor.addChild(root_0, stream_bitWiseExpression.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "evalAndExpression"

    public static class bitWiseExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bitWiseExpression"
    // EsperEPL2Grammar.g:788:1: bitWiseExpression : negatedExpression ( ( BAND | BOR | BXOR ) negatedExpression )* ;
    public final EsperEPL2GrammarParser.bitWiseExpression_return bitWiseExpression() throws RecognitionException {
        EsperEPL2GrammarParser.bitWiseExpression_return retval = new EsperEPL2GrammarParser.bitWiseExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token BAND209=null;
        Token BOR210=null;
        Token BXOR211=null;
        EsperEPL2GrammarParser.negatedExpression_return negatedExpression208 = null;

        EsperEPL2GrammarParser.negatedExpression_return negatedExpression212 = null;


        CommonTree BAND209_tree=null;
        CommonTree BOR210_tree=null;
        CommonTree BXOR211_tree=null;

        try {
            // EsperEPL2Grammar.g:789:2: ( negatedExpression ( ( BAND | BOR | BXOR ) negatedExpression )* )
            // EsperEPL2Grammar.g:789:4: negatedExpression ( ( BAND | BOR | BXOR ) negatedExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_negatedExpression_in_bitWiseExpression3957);
            negatedExpression208=negatedExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, negatedExpression208.getTree());
            // EsperEPL2Grammar.g:789:22: ( ( BAND | BOR | BXOR ) negatedExpression )*
            loop81:
            do {
                int alt81=2;
                int LA81_0 = input.LA(1);

                if ( ((LA81_0>=BAND && LA81_0<=BXOR)) ) {
                    alt81=1;
                }


                switch (alt81) {
            	case 1 :
            	    // EsperEPL2Grammar.g:789:24: ( BAND | BOR | BXOR ) negatedExpression
            	    {
            	    // EsperEPL2Grammar.g:789:24: ( BAND | BOR | BXOR )
            	    int alt80=3;
            	    switch ( input.LA(1) ) {
            	    case BAND:
            	        {
            	        alt80=1;
            	        }
            	        break;
            	    case BOR:
            	        {
            	        alt80=2;
            	        }
            	        break;
            	    case BXOR:
            	        {
            	        alt80=3;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 80, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt80) {
            	        case 1 :
            	            // EsperEPL2Grammar.g:789:25: BAND
            	            {
            	            BAND209=(Token)match(input,BAND,FOLLOW_BAND_in_bitWiseExpression3962); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            BAND209_tree = (CommonTree)adaptor.create(BAND209);
            	            root_0 = (CommonTree)adaptor.becomeRoot(BAND209_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // EsperEPL2Grammar.g:789:31: BOR
            	            {
            	            BOR210=(Token)match(input,BOR,FOLLOW_BOR_in_bitWiseExpression3965); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            BOR210_tree = (CommonTree)adaptor.create(BOR210);
            	            root_0 = (CommonTree)adaptor.becomeRoot(BOR210_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 3 :
            	            // EsperEPL2Grammar.g:789:36: BXOR
            	            {
            	            BXOR211=(Token)match(input,BXOR,FOLLOW_BXOR_in_bitWiseExpression3968); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            BXOR211_tree = (CommonTree)adaptor.create(BXOR211);
            	            root_0 = (CommonTree)adaptor.becomeRoot(BXOR211_tree, root_0);
            	            }

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_negatedExpression_in_bitWiseExpression3972);
            	    negatedExpression212=negatedExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, negatedExpression212.getTree());

            	    }
            	    break;

            	default :
            	    break loop81;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "bitWiseExpression"

    public static class negatedExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "negatedExpression"
    // EsperEPL2Grammar.g:792:1: negatedExpression : ( evalEqualsExpression | NOT_EXPR evalEqualsExpression );
    public final EsperEPL2GrammarParser.negatedExpression_return negatedExpression() throws RecognitionException {
        EsperEPL2GrammarParser.negatedExpression_return retval = new EsperEPL2GrammarParser.negatedExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NOT_EXPR214=null;
        EsperEPL2GrammarParser.evalEqualsExpression_return evalEqualsExpression213 = null;

        EsperEPL2GrammarParser.evalEqualsExpression_return evalEqualsExpression215 = null;


        CommonTree NOT_EXPR214_tree=null;

        try {
            // EsperEPL2Grammar.g:793:2: ( evalEqualsExpression | NOT_EXPR evalEqualsExpression )
            int alt82=2;
            int LA82_0 = input.LA(1);

            if ( (LA82_0==WINDOW||LA82_0==ESCAPE||LA82_0==EVERY_EXPR||(LA82_0>=SUM && LA82_0<=COUNT)||LA82_0==OUTER||(LA82_0>=JOIN && LA82_0<=FULL)||(LA82_0>=EVENTS && LA82_0<=LAST)||(LA82_0>=UNIDIRECTIONAL && LA82_0<=CURRENT_TIMESTAMP)||LA82_0==SNAPSHOT||(LA82_0>=VARIABLE && LA82_0<=AT)||(LA82_0>=BOOLEAN_TRUE && LA82_0<=VALUE_NULL)||LA82_0==NUM_DOUBLE||LA82_0==IDENT||LA82_0==LPAREN||(LA82_0>=STRING_LITERAL && LA82_0<=QUOTED_STRING_LITERAL)||(LA82_0>=PLUS && LA82_0<=MINUS)||LA82_0==LCURLY||LA82_0==NUM_INT||LA82_0==QUESTION||(LA82_0>=NUM_LONG && LA82_0<=NUM_FLOAT)) ) {
                alt82=1;
            }
            else if ( (LA82_0==NOT_EXPR) ) {
                alt82=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 82, 0, input);

                throw nvae;
            }
            switch (alt82) {
                case 1 :
                    // EsperEPL2Grammar.g:793:4: evalEqualsExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_evalEqualsExpression_in_negatedExpression3987);
                    evalEqualsExpression213=evalEqualsExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, evalEqualsExpression213.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:794:4: NOT_EXPR evalEqualsExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    NOT_EXPR214=(Token)match(input,NOT_EXPR,FOLLOW_NOT_EXPR_in_negatedExpression3993); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NOT_EXPR214_tree = (CommonTree)adaptor.create(NOT_EXPR214);
                    root_0 = (CommonTree)adaptor.becomeRoot(NOT_EXPR214_tree, root_0);
                    }
                    pushFollow(FOLLOW_evalEqualsExpression_in_negatedExpression3996);
                    evalEqualsExpression215=evalEqualsExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, evalEqualsExpression215.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "negatedExpression"

    public static class evalEqualsExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "evalEqualsExpression"
    // EsperEPL2Grammar.g:797:1: evalEqualsExpression : evalRelationalExpression ( (eq= EQUALS | is= IS | isnot= IS NOT_EXPR | sqlne= SQL_NE | ne= NOT_EQUAL ) evalRelationalExpression )* -> {$eq != null || $is != null}? ^( EVAL_EQUALS_EXPR ( evalRelationalExpression )+ ) -> {$isnot != null || $sqlne != null || $ne != null}? ^( EVAL_NOTEQUALS_EXPR ( evalRelationalExpression )+ ) -> ( evalRelationalExpression )+ ;
    public final EsperEPL2GrammarParser.evalEqualsExpression_return evalEqualsExpression() throws RecognitionException {
        EsperEPL2GrammarParser.evalEqualsExpression_return retval = new EsperEPL2GrammarParser.evalEqualsExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token eq=null;
        Token is=null;
        Token isnot=null;
        Token sqlne=null;
        Token ne=null;
        Token NOT_EXPR217=null;
        EsperEPL2GrammarParser.evalRelationalExpression_return evalRelationalExpression216 = null;

        EsperEPL2GrammarParser.evalRelationalExpression_return evalRelationalExpression218 = null;


        CommonTree eq_tree=null;
        CommonTree is_tree=null;
        CommonTree isnot_tree=null;
        CommonTree sqlne_tree=null;
        CommonTree ne_tree=null;
        CommonTree NOT_EXPR217_tree=null;
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleTokenStream stream_NOT_EXPR=new RewriteRuleTokenStream(adaptor,"token NOT_EXPR");
        RewriteRuleTokenStream stream_SQL_NE=new RewriteRuleTokenStream(adaptor,"token SQL_NE");
        RewriteRuleTokenStream stream_NOT_EQUAL=new RewriteRuleTokenStream(adaptor,"token NOT_EQUAL");
        RewriteRuleTokenStream stream_IS=new RewriteRuleTokenStream(adaptor,"token IS");
        RewriteRuleSubtreeStream stream_evalRelationalExpression=new RewriteRuleSubtreeStream(adaptor,"rule evalRelationalExpression");
        try {
            // EsperEPL2Grammar.g:798:2: ( evalRelationalExpression ( (eq= EQUALS | is= IS | isnot= IS NOT_EXPR | sqlne= SQL_NE | ne= NOT_EQUAL ) evalRelationalExpression )* -> {$eq != null || $is != null}? ^( EVAL_EQUALS_EXPR ( evalRelationalExpression )+ ) -> {$isnot != null || $sqlne != null || $ne != null}? ^( EVAL_NOTEQUALS_EXPR ( evalRelationalExpression )+ ) -> ( evalRelationalExpression )+ )
            // EsperEPL2Grammar.g:798:4: evalRelationalExpression ( (eq= EQUALS | is= IS | isnot= IS NOT_EXPR | sqlne= SQL_NE | ne= NOT_EQUAL ) evalRelationalExpression )*
            {
            pushFollow(FOLLOW_evalRelationalExpression_in_evalEqualsExpression4009);
            evalRelationalExpression216=evalRelationalExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_evalRelationalExpression.add(evalRelationalExpression216.getTree());
            // EsperEPL2Grammar.g:798:29: ( (eq= EQUALS | is= IS | isnot= IS NOT_EXPR | sqlne= SQL_NE | ne= NOT_EQUAL ) evalRelationalExpression )*
            loop84:
            do {
                int alt84=2;
                int LA84_0 = input.LA(1);

                if ( (LA84_0==IS||LA84_0==EQUALS||(LA84_0>=SQL_NE && LA84_0<=NOT_EQUAL)) ) {
                    alt84=1;
                }


                switch (alt84) {
            	case 1 :
            	    // EsperEPL2Grammar.g:799:6: (eq= EQUALS | is= IS | isnot= IS NOT_EXPR | sqlne= SQL_NE | ne= NOT_EQUAL ) evalRelationalExpression
            	    {
            	    // EsperEPL2Grammar.g:799:6: (eq= EQUALS | is= IS | isnot= IS NOT_EXPR | sqlne= SQL_NE | ne= NOT_EQUAL )
            	    int alt83=5;
            	    switch ( input.LA(1) ) {
            	    case EQUALS:
            	        {
            	        alt83=1;
            	        }
            	        break;
            	    case IS:
            	        {
            	        int LA83_2 = input.LA(2);

            	        if ( (LA83_2==NOT_EXPR) ) {
            	            alt83=3;
            	        }
            	        else if ( (LA83_2==WINDOW||LA83_2==ESCAPE||LA83_2==EVERY_EXPR||(LA83_2>=SUM && LA83_2<=COUNT)||LA83_2==OUTER||(LA83_2>=JOIN && LA83_2<=FULL)||(LA83_2>=EVENTS && LA83_2<=LAST)||(LA83_2>=UNIDIRECTIONAL && LA83_2<=CURRENT_TIMESTAMP)||LA83_2==SNAPSHOT||(LA83_2>=VARIABLE && LA83_2<=AT)||(LA83_2>=BOOLEAN_TRUE && LA83_2<=VALUE_NULL)||LA83_2==NUM_DOUBLE||LA83_2==IDENT||LA83_2==LPAREN||(LA83_2>=STRING_LITERAL && LA83_2<=QUOTED_STRING_LITERAL)||(LA83_2>=PLUS && LA83_2<=MINUS)||LA83_2==LCURLY||LA83_2==NUM_INT||LA83_2==QUESTION||(LA83_2>=NUM_LONG && LA83_2<=NUM_FLOAT)) ) {
            	            alt83=2;
            	        }
            	        else {
            	            if (state.backtracking>0) {state.failed=true; return retval;}
            	            NoViableAltException nvae =
            	                new NoViableAltException("", 83, 2, input);

            	            throw nvae;
            	        }
            	        }
            	        break;
            	    case SQL_NE:
            	        {
            	        alt83=4;
            	        }
            	        break;
            	    case NOT_EQUAL:
            	        {
            	        alt83=5;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 83, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt83) {
            	        case 1 :
            	            // EsperEPL2Grammar.g:799:7: eq= EQUALS
            	            {
            	            eq=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_evalEqualsExpression4022); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_EQUALS.add(eq);


            	            }
            	            break;
            	        case 2 :
            	            // EsperEPL2Grammar.g:800:15: is= IS
            	            {
            	            is=(Token)match(input,IS,FOLLOW_IS_in_evalEqualsExpression4040); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_IS.add(is);


            	            }
            	            break;
            	        case 3 :
            	            // EsperEPL2Grammar.g:801:11: isnot= IS NOT_EXPR
            	            {
            	            isnot=(Token)match(input,IS,FOLLOW_IS_in_evalEqualsExpression4054); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_IS.add(isnot);

            	            NOT_EXPR217=(Token)match(input,NOT_EXPR,FOLLOW_NOT_EXPR_in_evalEqualsExpression4056); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NOT_EXPR.add(NOT_EXPR217);


            	            }
            	            break;
            	        case 4 :
            	            // EsperEPL2Grammar.g:802:11: sqlne= SQL_NE
            	            {
            	            sqlne=(Token)match(input,SQL_NE,FOLLOW_SQL_NE_in_evalEqualsExpression4070); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_SQL_NE.add(sqlne);


            	            }
            	            break;
            	        case 5 :
            	            // EsperEPL2Grammar.g:803:11: ne= NOT_EQUAL
            	            {
            	            ne=(Token)match(input,NOT_EQUAL,FOLLOW_NOT_EQUAL_in_evalEqualsExpression4084); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NOT_EQUAL.add(ne);


            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_evalRelationalExpression_in_evalEqualsExpression4094);
            	    evalRelationalExpression218=evalRelationalExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_evalRelationalExpression.add(evalRelationalExpression218.getTree());

            	    }
            	    break;

            	default :
            	    break loop84;
                }
            } while (true);



            // AST REWRITE
            // elements: evalRelationalExpression, evalRelationalExpression, evalRelationalExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 805:6: -> {$eq != null || $is != null}? ^( EVAL_EQUALS_EXPR ( evalRelationalExpression )+ )
            if (eq != null || is != null) {
                // EsperEPL2Grammar.g:805:39: ^( EVAL_EQUALS_EXPR ( evalRelationalExpression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_EQUALS_EXPR, "EVAL_EQUALS_EXPR"), root_1);

                if ( !(stream_evalRelationalExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_evalRelationalExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_evalRelationalExpression.nextTree());

                }
                stream_evalRelationalExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 806:6: -> {$isnot != null || $sqlne != null || $ne != null}? ^( EVAL_NOTEQUALS_EXPR ( evalRelationalExpression )+ )
            if (isnot != null || sqlne != null || ne != null) {
                // EsperEPL2Grammar.g:806:60: ^( EVAL_NOTEQUALS_EXPR ( evalRelationalExpression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_NOTEQUALS_EXPR, "EVAL_NOTEQUALS_EXPR"), root_1);

                if ( !(stream_evalRelationalExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_evalRelationalExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_evalRelationalExpression.nextTree());

                }
                stream_evalRelationalExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 807:6: -> ( evalRelationalExpression )+
            {
                if ( !(stream_evalRelationalExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_evalRelationalExpression.hasNext() ) {
                    adaptor.addChild(root_0, stream_evalRelationalExpression.nextTree());

                }
                stream_evalRelationalExpression.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "evalEqualsExpression"

    public static class evalRelationalExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "evalRelationalExpression"
    // EsperEPL2Grammar.g:810:1: evalRelationalExpression : concatenationExpr ( ( ( (r= LT | r= GT | r= LE | r= GE ) concatenationExpr )* -> {$r != null}? ^( ( concatenationExpr )+ ) -> ( concatenationExpr )+ ) | (n= NOT_EXPR )? ( (i= IN_SET (l= LPAREN | l= LBRACK ) expression ( (col= COLON ( expression ) ) | ( ( COMMA expression )* ) ) (r= RPAREN | r= RBRACK ) ) -> {$col == null && $n == null}? ^( IN_SET concatenationExpr $l ( expression )+ $r) -> {$col == null && $n != null}? ^( NOT_IN_SET concatenationExpr $l ( expression )+ $r) -> {$col != null && $n == null}? ^( IN_RANGE concatenationExpr $l ( expression )+ $r) -> ^( NOT_IN_RANGE concatenationExpr $l ( expression )+ $r) | IN_SET inSubSelectQuery -> {$n == null}? ^( IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) -> ^( NOT_IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) | BETWEEN betweenList -> {$n == null}? ^( BETWEEN concatenationExpr betweenList ) -> ^( NOT_BETWEEN concatenationExpr betweenList ) | LIKE concatenationExpr ( ESCAPE stringconstant )? -> {$n == null}? ^( LIKE ( concatenationExpr )* ( stringconstant )? ) -> ^( NOT_LIKE ( concatenationExpr )* ( stringconstant )? ) | REGEXP concatenationExpr -> {$n == null}? ^( REGEXP ( concatenationExpr )+ ) -> ^( NOT_REGEXP ( concatenationExpr )+ ) ) ) ;
    public final EsperEPL2GrammarParser.evalRelationalExpression_return evalRelationalExpression() throws RecognitionException {
        EsperEPL2GrammarParser.evalRelationalExpression_return retval = new EsperEPL2GrammarParser.evalRelationalExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token r=null;
        Token n=null;
        Token i=null;
        Token l=null;
        Token col=null;
        Token COMMA223=null;
        Token IN_SET225=null;
        Token BETWEEN227=null;
        Token LIKE229=null;
        Token ESCAPE231=null;
        Token REGEXP233=null;
        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr219 = null;

        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr220 = null;

        EsperEPL2GrammarParser.expression_return expression221 = null;

        EsperEPL2GrammarParser.expression_return expression222 = null;

        EsperEPL2GrammarParser.expression_return expression224 = null;

        EsperEPL2GrammarParser.inSubSelectQuery_return inSubSelectQuery226 = null;

        EsperEPL2GrammarParser.betweenList_return betweenList228 = null;

        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr230 = null;

        EsperEPL2GrammarParser.stringconstant_return stringconstant232 = null;

        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr234 = null;


        CommonTree r_tree=null;
        CommonTree n_tree=null;
        CommonTree i_tree=null;
        CommonTree l_tree=null;
        CommonTree col_tree=null;
        CommonTree COMMA223_tree=null;
        CommonTree IN_SET225_tree=null;
        CommonTree BETWEEN227_tree=null;
        CommonTree LIKE229_tree=null;
        CommonTree ESCAPE231_tree=null;
        CommonTree REGEXP233_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_GE=new RewriteRuleTokenStream(adaptor,"token GE");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LT=new RewriteRuleTokenStream(adaptor,"token LT");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_NOT_EXPR=new RewriteRuleTokenStream(adaptor,"token NOT_EXPR");
        RewriteRuleTokenStream stream_ESCAPE=new RewriteRuleTokenStream(adaptor,"token ESCAPE");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_IN_SET=new RewriteRuleTokenStream(adaptor,"token IN_SET");
        RewriteRuleTokenStream stream_REGEXP=new RewriteRuleTokenStream(adaptor,"token REGEXP");
        RewriteRuleTokenStream stream_GT=new RewriteRuleTokenStream(adaptor,"token GT");
        RewriteRuleTokenStream stream_BETWEEN=new RewriteRuleTokenStream(adaptor,"token BETWEEN");
        RewriteRuleTokenStream stream_LE=new RewriteRuleTokenStream(adaptor,"token LE");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_LIKE=new RewriteRuleTokenStream(adaptor,"token LIKE");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_inSubSelectQuery=new RewriteRuleSubtreeStream(adaptor,"rule inSubSelectQuery");
        RewriteRuleSubtreeStream stream_concatenationExpr=new RewriteRuleSubtreeStream(adaptor,"rule concatenationExpr");
        RewriteRuleSubtreeStream stream_stringconstant=new RewriteRuleSubtreeStream(adaptor,"rule stringconstant");
        RewriteRuleSubtreeStream stream_betweenList=new RewriteRuleSubtreeStream(adaptor,"rule betweenList");
        try {
            // EsperEPL2Grammar.g:811:2: ( concatenationExpr ( ( ( (r= LT | r= GT | r= LE | r= GE ) concatenationExpr )* -> {$r != null}? ^( ( concatenationExpr )+ ) -> ( concatenationExpr )+ ) | (n= NOT_EXPR )? ( (i= IN_SET (l= LPAREN | l= LBRACK ) expression ( (col= COLON ( expression ) ) | ( ( COMMA expression )* ) ) (r= RPAREN | r= RBRACK ) ) -> {$col == null && $n == null}? ^( IN_SET concatenationExpr $l ( expression )+ $r) -> {$col == null && $n != null}? ^( NOT_IN_SET concatenationExpr $l ( expression )+ $r) -> {$col != null && $n == null}? ^( IN_RANGE concatenationExpr $l ( expression )+ $r) -> ^( NOT_IN_RANGE concatenationExpr $l ( expression )+ $r) | IN_SET inSubSelectQuery -> {$n == null}? ^( IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) -> ^( NOT_IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) | BETWEEN betweenList -> {$n == null}? ^( BETWEEN concatenationExpr betweenList ) -> ^( NOT_BETWEEN concatenationExpr betweenList ) | LIKE concatenationExpr ( ESCAPE stringconstant )? -> {$n == null}? ^( LIKE ( concatenationExpr )* ( stringconstant )? ) -> ^( NOT_LIKE ( concatenationExpr )* ( stringconstant )? ) | REGEXP concatenationExpr -> {$n == null}? ^( REGEXP ( concatenationExpr )+ ) -> ^( NOT_REGEXP ( concatenationExpr )+ ) ) ) )
            // EsperEPL2Grammar.g:811:4: concatenationExpr ( ( ( (r= LT | r= GT | r= LE | r= GE ) concatenationExpr )* -> {$r != null}? ^( ( concatenationExpr )+ ) -> ( concatenationExpr )+ ) | (n= NOT_EXPR )? ( (i= IN_SET (l= LPAREN | l= LBRACK ) expression ( (col= COLON ( expression ) ) | ( ( COMMA expression )* ) ) (r= RPAREN | r= RBRACK ) ) -> {$col == null && $n == null}? ^( IN_SET concatenationExpr $l ( expression )+ $r) -> {$col == null && $n != null}? ^( NOT_IN_SET concatenationExpr $l ( expression )+ $r) -> {$col != null && $n == null}? ^( IN_RANGE concatenationExpr $l ( expression )+ $r) -> ^( NOT_IN_RANGE concatenationExpr $l ( expression )+ $r) | IN_SET inSubSelectQuery -> {$n == null}? ^( IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) -> ^( NOT_IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) | BETWEEN betweenList -> {$n == null}? ^( BETWEEN concatenationExpr betweenList ) -> ^( NOT_BETWEEN concatenationExpr betweenList ) | LIKE concatenationExpr ( ESCAPE stringconstant )? -> {$n == null}? ^( LIKE ( concatenationExpr )* ( stringconstant )? ) -> ^( NOT_LIKE ( concatenationExpr )* ( stringconstant )? ) | REGEXP concatenationExpr -> {$n == null}? ^( REGEXP ( concatenationExpr )+ ) -> ^( NOT_REGEXP ( concatenationExpr )+ ) ) )
            {
            pushFollow(FOLLOW_concatenationExpr_in_evalRelationalExpression4155);
            concatenationExpr219=concatenationExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_concatenationExpr.add(concatenationExpr219.getTree());
            // EsperEPL2Grammar.g:812:3: ( ( ( (r= LT | r= GT | r= LE | r= GE ) concatenationExpr )* -> {$r != null}? ^( ( concatenationExpr )+ ) -> ( concatenationExpr )+ ) | (n= NOT_EXPR )? ( (i= IN_SET (l= LPAREN | l= LBRACK ) expression ( (col= COLON ( expression ) ) | ( ( COMMA expression )* ) ) (r= RPAREN | r= RBRACK ) ) -> {$col == null && $n == null}? ^( IN_SET concatenationExpr $l ( expression )+ $r) -> {$col == null && $n != null}? ^( NOT_IN_SET concatenationExpr $l ( expression )+ $r) -> {$col != null && $n == null}? ^( IN_RANGE concatenationExpr $l ( expression )+ $r) -> ^( NOT_IN_RANGE concatenationExpr $l ( expression )+ $r) | IN_SET inSubSelectQuery -> {$n == null}? ^( IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) -> ^( NOT_IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) | BETWEEN betweenList -> {$n == null}? ^( BETWEEN concatenationExpr betweenList ) -> ^( NOT_BETWEEN concatenationExpr betweenList ) | LIKE concatenationExpr ( ESCAPE stringconstant )? -> {$n == null}? ^( LIKE ( concatenationExpr )* ( stringconstant )? ) -> ^( NOT_LIKE ( concatenationExpr )* ( stringconstant )? ) | REGEXP concatenationExpr -> {$n == null}? ^( REGEXP ( concatenationExpr )+ ) -> ^( NOT_REGEXP ( concatenationExpr )+ ) ) )
            int alt94=2;
            int LA94_0 = input.LA(1);

            if ( (LA94_0==EOF||(LA94_0>=OR_EXPR && LA94_0<=AND_EXPR)||LA94_0==AS||(LA94_0>=ELSE && LA94_0<=FROM)||LA94_0==IS||(LA94_0>=GROUP && LA94_0<=HAVING)||LA94_0==OUTPUT||(LA94_0>=ORDER && LA94_0<=DESC)||(LA94_0>=TIMEPERIOD_SEC && LA94_0<=TIMEPERIOD_SECONDS)||LA94_0==ROW_LIMIT_EXPR||(LA94_0>=COMMA && LA94_0<=EQUALS)||LA94_0==RPAREN||(LA94_0>=RBRACK && LA94_0<=COLON)||(LA94_0>=BAND && LA94_0<=GE)||LA94_0==RCURLY) ) {
                alt94=1;
            }
            else if ( ((LA94_0>=IN_SET && LA94_0<=REGEXP)||LA94_0==NOT_EXPR) ) {
                alt94=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 94, 0, input);

                throw nvae;
            }
            switch (alt94) {
                case 1 :
                    // EsperEPL2Grammar.g:813:4: ( ( (r= LT | r= GT | r= LE | r= GE ) concatenationExpr )* -> {$r != null}? ^( ( concatenationExpr )+ ) -> ( concatenationExpr )+ )
                    {
                    // EsperEPL2Grammar.g:813:4: ( ( (r= LT | r= GT | r= LE | r= GE ) concatenationExpr )* -> {$r != null}? ^( ( concatenationExpr )+ ) -> ( concatenationExpr )+ )
                    // EsperEPL2Grammar.g:814:6: ( (r= LT | r= GT | r= LE | r= GE ) concatenationExpr )*
                    {
                    // EsperEPL2Grammar.g:814:6: ( (r= LT | r= GT | r= LE | r= GE ) concatenationExpr )*
                    loop86:
                    do {
                        int alt86=2;
                        int LA86_0 = input.LA(1);

                        if ( ((LA86_0>=LT && LA86_0<=GE)) ) {
                            alt86=1;
                        }


                        switch (alt86) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:815:8: (r= LT | r= GT | r= LE | r= GE ) concatenationExpr
                    	    {
                    	    // EsperEPL2Grammar.g:815:8: (r= LT | r= GT | r= LE | r= GE )
                    	    int alt85=4;
                    	    switch ( input.LA(1) ) {
                    	    case LT:
                    	        {
                    	        alt85=1;
                    	        }
                    	        break;
                    	    case GT:
                    	        {
                    	        alt85=2;
                    	        }
                    	        break;
                    	    case LE:
                    	        {
                    	        alt85=3;
                    	        }
                    	        break;
                    	    case GE:
                    	        {
                    	        alt85=4;
                    	        }
                    	        break;
                    	    default:
                    	        if (state.backtracking>0) {state.failed=true; return retval;}
                    	        NoViableAltException nvae =
                    	            new NoViableAltException("", 85, 0, input);

                    	        throw nvae;
                    	    }

                    	    switch (alt85) {
                    	        case 1 :
                    	            // EsperEPL2Grammar.g:815:9: r= LT
                    	            {
                    	            r=(Token)match(input,LT,FOLLOW_LT_in_evalRelationalExpression4187); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_LT.add(r);


                    	            }
                    	            break;
                    	        case 2 :
                    	            // EsperEPL2Grammar.g:815:14: r= GT
                    	            {
                    	            r=(Token)match(input,GT,FOLLOW_GT_in_evalRelationalExpression4191); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_GT.add(r);


                    	            }
                    	            break;
                    	        case 3 :
                    	            // EsperEPL2Grammar.g:815:19: r= LE
                    	            {
                    	            r=(Token)match(input,LE,FOLLOW_LE_in_evalRelationalExpression4195); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_LE.add(r);


                    	            }
                    	            break;
                    	        case 4 :
                    	            // EsperEPL2Grammar.g:815:24: r= GE
                    	            {
                    	            r=(Token)match(input,GE,FOLLOW_GE_in_evalRelationalExpression4199); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_GE.add(r);


                    	            }
                    	            break;

                    	    }

                    	    pushFollow(FOLLOW_concatenationExpr_in_evalRelationalExpression4202);
                    	    concatenationExpr220=concatenationExpr();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_concatenationExpr.add(concatenationExpr220.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop86;
                        }
                    } while (true);



                    // AST REWRITE
                    // elements: concatenationExpr, concatenationExpr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 817:6: -> {$r != null}? ^( ( concatenationExpr )+ )
                    if (r != null) {
                        // EsperEPL2Grammar.g:817:23: ^( ( concatenationExpr )+ )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(r), root_1);

                        if ( !(stream_concatenationExpr.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_concatenationExpr.hasNext() ) {
                            adaptor.addChild(root_1, stream_concatenationExpr.nextTree());

                        }
                        stream_concatenationExpr.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }
                    else // 818:6: -> ( concatenationExpr )+
                    {
                        if ( !(stream_concatenationExpr.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_concatenationExpr.hasNext() ) {
                            adaptor.addChild(root_0, stream_concatenationExpr.nextTree());

                        }
                        stream_concatenationExpr.reset();

                    }

                    retval.tree = root_0;}
                    }


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:820:6: (n= NOT_EXPR )? ( (i= IN_SET (l= LPAREN | l= LBRACK ) expression ( (col= COLON ( expression ) ) | ( ( COMMA expression )* ) ) (r= RPAREN | r= RBRACK ) ) -> {$col == null && $n == null}? ^( IN_SET concatenationExpr $l ( expression )+ $r) -> {$col == null && $n != null}? ^( NOT_IN_SET concatenationExpr $l ( expression )+ $r) -> {$col != null && $n == null}? ^( IN_RANGE concatenationExpr $l ( expression )+ $r) -> ^( NOT_IN_RANGE concatenationExpr $l ( expression )+ $r) | IN_SET inSubSelectQuery -> {$n == null}? ^( IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) -> ^( NOT_IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) | BETWEEN betweenList -> {$n == null}? ^( BETWEEN concatenationExpr betweenList ) -> ^( NOT_BETWEEN concatenationExpr betweenList ) | LIKE concatenationExpr ( ESCAPE stringconstant )? -> {$n == null}? ^( LIKE ( concatenationExpr )* ( stringconstant )? ) -> ^( NOT_LIKE ( concatenationExpr )* ( stringconstant )? ) | REGEXP concatenationExpr -> {$n == null}? ^( REGEXP ( concatenationExpr )+ ) -> ^( NOT_REGEXP ( concatenationExpr )+ ) )
                    {
                    // EsperEPL2Grammar.g:820:6: (n= NOT_EXPR )?
                    int alt87=2;
                    int LA87_0 = input.LA(1);

                    if ( (LA87_0==NOT_EXPR) ) {
                        alt87=1;
                    }
                    switch (alt87) {
                        case 1 :
                            // EsperEPL2Grammar.g:820:7: n= NOT_EXPR
                            {
                            n=(Token)match(input,NOT_EXPR,FOLLOW_NOT_EXPR_in_evalRelationalExpression4253); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NOT_EXPR.add(n);


                            }
                            break;

                    }

                    // EsperEPL2Grammar.g:821:4: ( (i= IN_SET (l= LPAREN | l= LBRACK ) expression ( (col= COLON ( expression ) ) | ( ( COMMA expression )* ) ) (r= RPAREN | r= RBRACK ) ) -> {$col == null && $n == null}? ^( IN_SET concatenationExpr $l ( expression )+ $r) -> {$col == null && $n != null}? ^( NOT_IN_SET concatenationExpr $l ( expression )+ $r) -> {$col != null && $n == null}? ^( IN_RANGE concatenationExpr $l ( expression )+ $r) -> ^( NOT_IN_RANGE concatenationExpr $l ( expression )+ $r) | IN_SET inSubSelectQuery -> {$n == null}? ^( IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) -> ^( NOT_IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) | BETWEEN betweenList -> {$n == null}? ^( BETWEEN concatenationExpr betweenList ) -> ^( NOT_BETWEEN concatenationExpr betweenList ) | LIKE concatenationExpr ( ESCAPE stringconstant )? -> {$n == null}? ^( LIKE ( concatenationExpr )* ( stringconstant )? ) -> ^( NOT_LIKE ( concatenationExpr )* ( stringconstant )? ) | REGEXP concatenationExpr -> {$n == null}? ^( REGEXP ( concatenationExpr )+ ) -> ^( NOT_REGEXP ( concatenationExpr )+ ) )
                    int alt93=5;
                    switch ( input.LA(1) ) {
                    case IN_SET:
                        {
                        int LA93_1 = input.LA(2);

                        if ( (LA93_1==LPAREN) ) {
                            int LA93_5 = input.LA(3);

                            if ( (LA93_5==SELECT) ) {
                                alt93=2;
                            }
                            else if ( (LA93_5==WINDOW||LA93_5==ESCAPE||(LA93_5>=NOT_EXPR && LA93_5<=EVERY_EXPR)||(LA93_5>=SUM && LA93_5<=COUNT)||LA93_5==CASE||LA93_5==OUTER||(LA93_5>=JOIN && LA93_5<=FULL)||(LA93_5>=EVENTS && LA93_5<=LAST)||(LA93_5>=UNIDIRECTIONAL && LA93_5<=CURRENT_TIMESTAMP)||LA93_5==SNAPSHOT||(LA93_5>=VARIABLE && LA93_5<=AT)||(LA93_5>=BOOLEAN_TRUE && LA93_5<=VALUE_NULL)||LA93_5==NUM_DOUBLE||LA93_5==IDENT||LA93_5==LPAREN||(LA93_5>=STRING_LITERAL && LA93_5<=QUOTED_STRING_LITERAL)||(LA93_5>=PLUS && LA93_5<=MINUS)||LA93_5==LCURLY||LA93_5==NUM_INT||LA93_5==QUESTION||(LA93_5>=NUM_LONG && LA93_5<=NUM_FLOAT)) ) {
                                alt93=1;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 93, 5, input);

                                throw nvae;
                            }
                        }
                        else if ( (LA93_1==LBRACK) ) {
                            alt93=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 93, 1, input);

                            throw nvae;
                        }
                        }
                        break;
                    case BETWEEN:
                        {
                        alt93=3;
                        }
                        break;
                    case LIKE:
                        {
                        alt93=4;
                        }
                        break;
                    case REGEXP:
                        {
                        alt93=5;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 93, 0, input);

                        throw nvae;
                    }

                    switch (alt93) {
                        case 1 :
                            // EsperEPL2Grammar.g:824:5: (i= IN_SET (l= LPAREN | l= LBRACK ) expression ( (col= COLON ( expression ) ) | ( ( COMMA expression )* ) ) (r= RPAREN | r= RBRACK ) )
                            {
                            // EsperEPL2Grammar.g:824:5: (i= IN_SET (l= LPAREN | l= LBRACK ) expression ( (col= COLON ( expression ) ) | ( ( COMMA expression )* ) ) (r= RPAREN | r= RBRACK ) )
                            // EsperEPL2Grammar.g:824:6: i= IN_SET (l= LPAREN | l= LBRACK ) expression ( (col= COLON ( expression ) ) | ( ( COMMA expression )* ) ) (r= RPAREN | r= RBRACK )
                            {
                            i=(Token)match(input,IN_SET,FOLLOW_IN_SET_in_evalRelationalExpression4280); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IN_SET.add(i);

                            // EsperEPL2Grammar.g:825:8: (l= LPAREN | l= LBRACK )
                            int alt88=2;
                            int LA88_0 = input.LA(1);

                            if ( (LA88_0==LPAREN) ) {
                                alt88=1;
                            }
                            else if ( (LA88_0==LBRACK) ) {
                                alt88=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 88, 0, input);

                                throw nvae;
                            }
                            switch (alt88) {
                                case 1 :
                                    // EsperEPL2Grammar.g:825:9: l= LPAREN
                                    {
                                    l=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_evalRelationalExpression4292); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_LPAREN.add(l);


                                    }
                                    break;
                                case 2 :
                                    // EsperEPL2Grammar.g:825:20: l= LBRACK
                                    {
                                    l=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_evalRelationalExpression4298); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_LBRACK.add(l);


                                    }
                                    break;

                            }

                            pushFollow(FOLLOW_expression_in_evalRelationalExpression4301);
                            expression221=expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(expression221.getTree());
                            // EsperEPL2Grammar.g:826:7: ( (col= COLON ( expression ) ) | ( ( COMMA expression )* ) )
                            int alt90=2;
                            int LA90_0 = input.LA(1);

                            if ( (LA90_0==COLON) ) {
                                alt90=1;
                            }
                            else if ( (LA90_0==COMMA||LA90_0==RPAREN||LA90_0==RBRACK) ) {
                                alt90=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 90, 0, input);

                                throw nvae;
                            }
                            switch (alt90) {
                                case 1 :
                                    // EsperEPL2Grammar.g:827:8: (col= COLON ( expression ) )
                                    {
                                    // EsperEPL2Grammar.g:827:8: (col= COLON ( expression ) )
                                    // EsperEPL2Grammar.g:827:10: col= COLON ( expression )
                                    {
                                    col=(Token)match(input,COLON,FOLLOW_COLON_in_evalRelationalExpression4323); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_COLON.add(col);

                                    // EsperEPL2Grammar.g:827:20: ( expression )
                                    // EsperEPL2Grammar.g:827:21: expression
                                    {
                                    pushFollow(FOLLOW_expression_in_evalRelationalExpression4326);
                                    expression222=expression();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_expression.add(expression222.getTree());

                                    }


                                    }


                                    }
                                    break;
                                case 2 :
                                    // EsperEPL2Grammar.g:829:8: ( ( COMMA expression )* )
                                    {
                                    // EsperEPL2Grammar.g:829:8: ( ( COMMA expression )* )
                                    // EsperEPL2Grammar.g:829:10: ( COMMA expression )*
                                    {
                                    // EsperEPL2Grammar.g:829:10: ( COMMA expression )*
                                    loop89:
                                    do {
                                        int alt89=2;
                                        int LA89_0 = input.LA(1);

                                        if ( (LA89_0==COMMA) ) {
                                            alt89=1;
                                        }


                                        switch (alt89) {
                                    	case 1 :
                                    	    // EsperEPL2Grammar.g:829:11: COMMA expression
                                    	    {
                                    	    COMMA223=(Token)match(input,COMMA,FOLLOW_COMMA_in_evalRelationalExpression4352); if (state.failed) return retval; 
                                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA223);

                                    	    pushFollow(FOLLOW_expression_in_evalRelationalExpression4354);
                                    	    expression224=expression();

                                    	    state._fsp--;
                                    	    if (state.failed) return retval;
                                    	    if ( state.backtracking==0 ) stream_expression.add(expression224.getTree());

                                    	    }
                                    	    break;

                                    	default :
                                    	    break loop89;
                                        }
                                    } while (true);


                                    }


                                    }
                                    break;

                            }

                            // EsperEPL2Grammar.g:831:8: (r= RPAREN | r= RBRACK )
                            int alt91=2;
                            int LA91_0 = input.LA(1);

                            if ( (LA91_0==RPAREN) ) {
                                alt91=1;
                            }
                            else if ( (LA91_0==RBRACK) ) {
                                alt91=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 91, 0, input);

                                throw nvae;
                            }
                            switch (alt91) {
                                case 1 :
                                    // EsperEPL2Grammar.g:831:9: r= RPAREN
                                    {
                                    r=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_evalRelationalExpression4380); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_RPAREN.add(r);


                                    }
                                    break;
                                case 2 :
                                    // EsperEPL2Grammar.g:831:20: r= RBRACK
                                    {
                                    r=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_evalRelationalExpression4386); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_RBRACK.add(r);


                                    }
                                    break;

                            }


                            }



                            // AST REWRITE
                            // elements: expression, r, concatenationExpr, concatenationExpr, concatenationExpr, r, r, expression, l, l, concatenationExpr, expression, l, expression, l, r, IN_SET
                            // token labels: r, l
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleTokenStream stream_r=new RewriteRuleTokenStream(adaptor,"token r",r);
                            RewriteRuleTokenStream stream_l=new RewriteRuleTokenStream(adaptor,"token l",l);
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 833:9: -> {$col == null && $n == null}? ^( IN_SET concatenationExpr $l ( expression )+ $r)
                            if (col == null && n == null) {
                                // EsperEPL2Grammar.g:833:42: ^( IN_SET concatenationExpr $l ( expression )+ $r)
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_IN_SET.nextNode(), root_1);

                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_l.nextNode());
                                if ( !(stream_expression.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_expression.hasNext() ) {
                                    adaptor.addChild(root_1, stream_expression.nextTree());

                                }
                                stream_expression.reset();
                                adaptor.addChild(root_1, stream_r.nextNode());

                                adaptor.addChild(root_0, root_1);
                                }

                            }
                            else // 834:9: -> {$col == null && $n != null}? ^( NOT_IN_SET concatenationExpr $l ( expression )+ $r)
                            if (col == null && n != null) {
                                // EsperEPL2Grammar.g:834:42: ^( NOT_IN_SET concatenationExpr $l ( expression )+ $r)
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_IN_SET, "NOT_IN_SET"), root_1);

                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_l.nextNode());
                                if ( !(stream_expression.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_expression.hasNext() ) {
                                    adaptor.addChild(root_1, stream_expression.nextTree());

                                }
                                stream_expression.reset();
                                adaptor.addChild(root_1, stream_r.nextNode());

                                adaptor.addChild(root_0, root_1);
                                }

                            }
                            else // 835:9: -> {$col != null && $n == null}? ^( IN_RANGE concatenationExpr $l ( expression )+ $r)
                            if (col != null && n == null) {
                                // EsperEPL2Grammar.g:835:42: ^( IN_RANGE concatenationExpr $l ( expression )+ $r)
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IN_RANGE, "IN_RANGE"), root_1);

                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_l.nextNode());
                                if ( !(stream_expression.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_expression.hasNext() ) {
                                    adaptor.addChild(root_1, stream_expression.nextTree());

                                }
                                stream_expression.reset();
                                adaptor.addChild(root_1, stream_r.nextNode());

                                adaptor.addChild(root_0, root_1);
                                }

                            }
                            else // 836:9: -> ^( NOT_IN_RANGE concatenationExpr $l ( expression )+ $r)
                            {
                                // EsperEPL2Grammar.g:836:12: ^( NOT_IN_RANGE concatenationExpr $l ( expression )+ $r)
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_IN_RANGE, "NOT_IN_RANGE"), root_1);

                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_l.nextNode());
                                if ( !(stream_expression.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_expression.hasNext() ) {
                                    adaptor.addChild(root_1, stream_expression.nextTree());

                                }
                                stream_expression.reset();
                                adaptor.addChild(root_1, stream_r.nextNode());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:837:7: IN_SET inSubSelectQuery
                            {
                            IN_SET225=(Token)match(input,IN_SET,FOLLOW_IN_SET_in_evalRelationalExpression4509); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IN_SET.add(IN_SET225);

                            pushFollow(FOLLOW_inSubSelectQuery_in_evalRelationalExpression4511);
                            inSubSelectQuery226=inSubSelectQuery();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_inSubSelectQuery.add(inSubSelectQuery226.getTree());


                            // AST REWRITE
                            // elements: concatenationExpr, inSubSelectQuery, concatenationExpr, inSubSelectQuery
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 838:9: -> {$n == null}? ^( IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery )
                            if (n == null) {
                                // EsperEPL2Grammar.g:838:26: ^( IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IN_SUBSELECT_EXPR, "IN_SUBSELECT_EXPR"), root_1);

                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_inSubSelectQuery.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }
                            else // 839:9: -> ^( NOT_IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery )
                            {
                                // EsperEPL2Grammar.g:839:12: ^( NOT_IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_IN_SUBSELECT_EXPR, "NOT_IN_SUBSELECT_EXPR"), root_1);

                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_inSubSelectQuery.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 3 :
                            // EsperEPL2Grammar.g:840:7: BETWEEN betweenList
                            {
                            BETWEEN227=(Token)match(input,BETWEEN,FOLLOW_BETWEEN_in_evalRelationalExpression4557); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_BETWEEN.add(BETWEEN227);

                            pushFollow(FOLLOW_betweenList_in_evalRelationalExpression4559);
                            betweenList228=betweenList();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_betweenList.add(betweenList228.getTree());


                            // AST REWRITE
                            // elements: concatenationExpr, betweenList, concatenationExpr, BETWEEN, betweenList
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 841:9: -> {$n == null}? ^( BETWEEN concatenationExpr betweenList )
                            if (n == null) {
                                // EsperEPL2Grammar.g:841:26: ^( BETWEEN concatenationExpr betweenList )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_BETWEEN.nextNode(), root_1);

                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_betweenList.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }
                            else // 842:9: -> ^( NOT_BETWEEN concatenationExpr betweenList )
                            {
                                // EsperEPL2Grammar.g:842:12: ^( NOT_BETWEEN concatenationExpr betweenList )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_BETWEEN, "NOT_BETWEEN"), root_1);

                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_betweenList.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 4 :
                            // EsperEPL2Grammar.g:843:7: LIKE concatenationExpr ( ESCAPE stringconstant )?
                            {
                            LIKE229=(Token)match(input,LIKE,FOLLOW_LIKE_in_evalRelationalExpression4609); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_LIKE.add(LIKE229);

                            pushFollow(FOLLOW_concatenationExpr_in_evalRelationalExpression4611);
                            concatenationExpr230=concatenationExpr();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_concatenationExpr.add(concatenationExpr230.getTree());
                            // EsperEPL2Grammar.g:843:30: ( ESCAPE stringconstant )?
                            int alt92=2;
                            int LA92_0 = input.LA(1);

                            if ( (LA92_0==ESCAPE) ) {
                                alt92=1;
                            }
                            switch (alt92) {
                                case 1 :
                                    // EsperEPL2Grammar.g:843:31: ESCAPE stringconstant
                                    {
                                    ESCAPE231=(Token)match(input,ESCAPE,FOLLOW_ESCAPE_in_evalRelationalExpression4614); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_ESCAPE.add(ESCAPE231);

                                    pushFollow(FOLLOW_stringconstant_in_evalRelationalExpression4616);
                                    stringconstant232=stringconstant();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_stringconstant.add(stringconstant232.getTree());

                                    }
                                    break;

                            }



                            // AST REWRITE
                            // elements: concatenationExpr, LIKE, concatenationExpr, stringconstant, stringconstant
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 844:9: -> {$n == null}? ^( LIKE ( concatenationExpr )* ( stringconstant )? )
                            if (n == null) {
                                // EsperEPL2Grammar.g:844:26: ^( LIKE ( concatenationExpr )* ( stringconstant )? )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_LIKE.nextNode(), root_1);

                                // EsperEPL2Grammar.g:844:33: ( concatenationExpr )*
                                while ( stream_concatenationExpr.hasNext() ) {
                                    adaptor.addChild(root_1, stream_concatenationExpr.nextTree());

                                }
                                stream_concatenationExpr.reset();
                                // EsperEPL2Grammar.g:844:52: ( stringconstant )?
                                if ( stream_stringconstant.hasNext() ) {
                                    adaptor.addChild(root_1, stream_stringconstant.nextTree());

                                }
                                stream_stringconstant.reset();

                                adaptor.addChild(root_0, root_1);
                                }

                            }
                            else // 845:9: -> ^( NOT_LIKE ( concatenationExpr )* ( stringconstant )? )
                            {
                                // EsperEPL2Grammar.g:845:12: ^( NOT_LIKE ( concatenationExpr )* ( stringconstant )? )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_LIKE, "NOT_LIKE"), root_1);

                                // EsperEPL2Grammar.g:845:23: ( concatenationExpr )*
                                while ( stream_concatenationExpr.hasNext() ) {
                                    adaptor.addChild(root_1, stream_concatenationExpr.nextTree());

                                }
                                stream_concatenationExpr.reset();
                                // EsperEPL2Grammar.g:845:42: ( stringconstant )?
                                if ( stream_stringconstant.hasNext() ) {
                                    adaptor.addChild(root_1, stream_stringconstant.nextTree());

                                }
                                stream_stringconstant.reset();

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 5 :
                            // EsperEPL2Grammar.g:846:7: REGEXP concatenationExpr
                            {
                            REGEXP233=(Token)match(input,REGEXP,FOLLOW_REGEXP_in_evalRelationalExpression4668); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_REGEXP.add(REGEXP233);

                            pushFollow(FOLLOW_concatenationExpr_in_evalRelationalExpression4670);
                            concatenationExpr234=concatenationExpr();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_concatenationExpr.add(concatenationExpr234.getTree());


                            // AST REWRITE
                            // elements: concatenationExpr, REGEXP, concatenationExpr
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 847:9: -> {$n == null}? ^( REGEXP ( concatenationExpr )+ )
                            if (n == null) {
                                // EsperEPL2Grammar.g:847:26: ^( REGEXP ( concatenationExpr )+ )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_REGEXP.nextNode(), root_1);

                                if ( !(stream_concatenationExpr.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_concatenationExpr.hasNext() ) {
                                    adaptor.addChild(root_1, stream_concatenationExpr.nextTree());

                                }
                                stream_concatenationExpr.reset();

                                adaptor.addChild(root_0, root_1);
                                }

                            }
                            else // 848:9: -> ^( NOT_REGEXP ( concatenationExpr )+ )
                            {
                                // EsperEPL2Grammar.g:848:12: ^( NOT_REGEXP ( concatenationExpr )+ )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_REGEXP, "NOT_REGEXP"), root_1);

                                if ( !(stream_concatenationExpr.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_concatenationExpr.hasNext() ) {
                                    adaptor.addChild(root_1, stream_concatenationExpr.nextTree());

                                }
                                stream_concatenationExpr.reset();

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "evalRelationalExpression"

    public static class inSubSelectQuery_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inSubSelectQuery"
    // EsperEPL2Grammar.g:853:1: inSubSelectQuery : subQueryExpr -> ^( IN_SUBSELECT_QUERY_EXPR subQueryExpr ) ;
    public final EsperEPL2GrammarParser.inSubSelectQuery_return inSubSelectQuery() throws RecognitionException {
        EsperEPL2GrammarParser.inSubSelectQuery_return retval = new EsperEPL2GrammarParser.inSubSelectQuery_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr235 = null;


        RewriteRuleSubtreeStream stream_subQueryExpr=new RewriteRuleSubtreeStream(adaptor,"rule subQueryExpr");
        try {
            // EsperEPL2Grammar.g:854:2: ( subQueryExpr -> ^( IN_SUBSELECT_QUERY_EXPR subQueryExpr ) )
            // EsperEPL2Grammar.g:854:4: subQueryExpr
            {
            pushFollow(FOLLOW_subQueryExpr_in_inSubSelectQuery4732);
            subQueryExpr235=subQueryExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_subQueryExpr.add(subQueryExpr235.getTree());


            // AST REWRITE
            // elements: subQueryExpr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 855:4: -> ^( IN_SUBSELECT_QUERY_EXPR subQueryExpr )
            {
                // EsperEPL2Grammar.g:855:7: ^( IN_SUBSELECT_QUERY_EXPR subQueryExpr )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IN_SUBSELECT_QUERY_EXPR, "IN_SUBSELECT_QUERY_EXPR"), root_1);

                adaptor.addChild(root_1, stream_subQueryExpr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "inSubSelectQuery"

    public static class concatenationExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "concatenationExpr"
    // EsperEPL2Grammar.g:858:1: concatenationExpr : additiveExpression (c= LOR additiveExpression ( LOR additiveExpression )* )? -> {$c != null}? ^( CONCAT ( additiveExpression )+ ) -> additiveExpression ;
    public final EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr() throws RecognitionException {
        EsperEPL2GrammarParser.concatenationExpr_return retval = new EsperEPL2GrammarParser.concatenationExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token c=null;
        Token LOR238=null;
        EsperEPL2GrammarParser.additiveExpression_return additiveExpression236 = null;

        EsperEPL2GrammarParser.additiveExpression_return additiveExpression237 = null;

        EsperEPL2GrammarParser.additiveExpression_return additiveExpression239 = null;


        CommonTree c_tree=null;
        CommonTree LOR238_tree=null;
        RewriteRuleTokenStream stream_LOR=new RewriteRuleTokenStream(adaptor,"token LOR");
        RewriteRuleSubtreeStream stream_additiveExpression=new RewriteRuleSubtreeStream(adaptor,"rule additiveExpression");
        try {
            // EsperEPL2Grammar.g:859:2: ( additiveExpression (c= LOR additiveExpression ( LOR additiveExpression )* )? -> {$c != null}? ^( CONCAT ( additiveExpression )+ ) -> additiveExpression )
            // EsperEPL2Grammar.g:859:4: additiveExpression (c= LOR additiveExpression ( LOR additiveExpression )* )?
            {
            pushFollow(FOLLOW_additiveExpression_in_concatenationExpr4757);
            additiveExpression236=additiveExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_additiveExpression.add(additiveExpression236.getTree());
            // EsperEPL2Grammar.g:859:23: (c= LOR additiveExpression ( LOR additiveExpression )* )?
            int alt96=2;
            int LA96_0 = input.LA(1);

            if ( (LA96_0==LOR) ) {
                alt96=1;
            }
            switch (alt96) {
                case 1 :
                    // EsperEPL2Grammar.g:859:25: c= LOR additiveExpression ( LOR additiveExpression )*
                    {
                    c=(Token)match(input,LOR,FOLLOW_LOR_in_concatenationExpr4763); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LOR.add(c);

                    pushFollow(FOLLOW_additiveExpression_in_concatenationExpr4765);
                    additiveExpression237=additiveExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_additiveExpression.add(additiveExpression237.getTree());
                    // EsperEPL2Grammar.g:859:50: ( LOR additiveExpression )*
                    loop95:
                    do {
                        int alt95=2;
                        int LA95_0 = input.LA(1);

                        if ( (LA95_0==LOR) ) {
                            alt95=1;
                        }


                        switch (alt95) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:859:52: LOR additiveExpression
                    	    {
                    	    LOR238=(Token)match(input,LOR,FOLLOW_LOR_in_concatenationExpr4769); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_LOR.add(LOR238);

                    	    pushFollow(FOLLOW_additiveExpression_in_concatenationExpr4771);
                    	    additiveExpression239=additiveExpression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_additiveExpression.add(additiveExpression239.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop95;
                        }
                    } while (true);


                    }
                    break;

            }



            // AST REWRITE
            // elements: additiveExpression, additiveExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 860:6: -> {$c != null}? ^( CONCAT ( additiveExpression )+ )
            if (c != null) {
                // EsperEPL2Grammar.g:860:23: ^( CONCAT ( additiveExpression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CONCAT, "CONCAT"), root_1);

                if ( !(stream_additiveExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_additiveExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_additiveExpression.nextTree());

                }
                stream_additiveExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 861:6: -> additiveExpression
            {
                adaptor.addChild(root_0, stream_additiveExpression.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "concatenationExpr"

    public static class additiveExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "additiveExpression"
    // EsperEPL2Grammar.g:864:1: additiveExpression : multiplyExpression ( ( PLUS | MINUS ) multiplyExpression )* ;
    public final EsperEPL2GrammarParser.additiveExpression_return additiveExpression() throws RecognitionException {
        EsperEPL2GrammarParser.additiveExpression_return retval = new EsperEPL2GrammarParser.additiveExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token PLUS241=null;
        Token MINUS242=null;
        EsperEPL2GrammarParser.multiplyExpression_return multiplyExpression240 = null;

        EsperEPL2GrammarParser.multiplyExpression_return multiplyExpression243 = null;


        CommonTree PLUS241_tree=null;
        CommonTree MINUS242_tree=null;

        try {
            // EsperEPL2Grammar.g:865:2: ( multiplyExpression ( ( PLUS | MINUS ) multiplyExpression )* )
            // EsperEPL2Grammar.g:865:4: multiplyExpression ( ( PLUS | MINUS ) multiplyExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_multiplyExpression_in_additiveExpression4812);
            multiplyExpression240=multiplyExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, multiplyExpression240.getTree());
            // EsperEPL2Grammar.g:865:23: ( ( PLUS | MINUS ) multiplyExpression )*
            loop98:
            do {
                int alt98=2;
                int LA98_0 = input.LA(1);

                if ( ((LA98_0>=PLUS && LA98_0<=MINUS)) ) {
                    alt98=1;
                }


                switch (alt98) {
            	case 1 :
            	    // EsperEPL2Grammar.g:865:25: ( PLUS | MINUS ) multiplyExpression
            	    {
            	    // EsperEPL2Grammar.g:865:25: ( PLUS | MINUS )
            	    int alt97=2;
            	    int LA97_0 = input.LA(1);

            	    if ( (LA97_0==PLUS) ) {
            	        alt97=1;
            	    }
            	    else if ( (LA97_0==MINUS) ) {
            	        alt97=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 97, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt97) {
            	        case 1 :
            	            // EsperEPL2Grammar.g:865:26: PLUS
            	            {
            	            PLUS241=(Token)match(input,PLUS,FOLLOW_PLUS_in_additiveExpression4817); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            PLUS241_tree = (CommonTree)adaptor.create(PLUS241);
            	            root_0 = (CommonTree)adaptor.becomeRoot(PLUS241_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // EsperEPL2Grammar.g:865:32: MINUS
            	            {
            	            MINUS242=(Token)match(input,MINUS,FOLLOW_MINUS_in_additiveExpression4820); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            MINUS242_tree = (CommonTree)adaptor.create(MINUS242);
            	            root_0 = (CommonTree)adaptor.becomeRoot(MINUS242_tree, root_0);
            	            }

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_multiplyExpression_in_additiveExpression4824);
            	    multiplyExpression243=multiplyExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, multiplyExpression243.getTree());

            	    }
            	    break;

            	default :
            	    break loop98;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "additiveExpression"

    public static class multiplyExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "multiplyExpression"
    // EsperEPL2Grammar.g:868:1: multiplyExpression : unaryExpression ( ( STAR | DIV | MOD ) unaryExpression )* ;
    public final EsperEPL2GrammarParser.multiplyExpression_return multiplyExpression() throws RecognitionException {
        EsperEPL2GrammarParser.multiplyExpression_return retval = new EsperEPL2GrammarParser.multiplyExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token STAR245=null;
        Token DIV246=null;
        Token MOD247=null;
        EsperEPL2GrammarParser.unaryExpression_return unaryExpression244 = null;

        EsperEPL2GrammarParser.unaryExpression_return unaryExpression248 = null;


        CommonTree STAR245_tree=null;
        CommonTree DIV246_tree=null;
        CommonTree MOD247_tree=null;

        try {
            // EsperEPL2Grammar.g:869:2: ( unaryExpression ( ( STAR | DIV | MOD ) unaryExpression )* )
            // EsperEPL2Grammar.g:869:4: unaryExpression ( ( STAR | DIV | MOD ) unaryExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_unaryExpression_in_multiplyExpression4838);
            unaryExpression244=unaryExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpression244.getTree());
            // EsperEPL2Grammar.g:869:20: ( ( STAR | DIV | MOD ) unaryExpression )*
            loop100:
            do {
                int alt100=2;
                int LA100_0 = input.LA(1);

                if ( (LA100_0==STAR||(LA100_0>=DIV && LA100_0<=MOD)) ) {
                    alt100=1;
                }


                switch (alt100) {
            	case 1 :
            	    // EsperEPL2Grammar.g:869:22: ( STAR | DIV | MOD ) unaryExpression
            	    {
            	    // EsperEPL2Grammar.g:869:22: ( STAR | DIV | MOD )
            	    int alt99=3;
            	    switch ( input.LA(1) ) {
            	    case STAR:
            	        {
            	        alt99=1;
            	        }
            	        break;
            	    case DIV:
            	        {
            	        alt99=2;
            	        }
            	        break;
            	    case MOD:
            	        {
            	        alt99=3;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 99, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt99) {
            	        case 1 :
            	            // EsperEPL2Grammar.g:869:23: STAR
            	            {
            	            STAR245=(Token)match(input,STAR,FOLLOW_STAR_in_multiplyExpression4843); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            STAR245_tree = (CommonTree)adaptor.create(STAR245);
            	            root_0 = (CommonTree)adaptor.becomeRoot(STAR245_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // EsperEPL2Grammar.g:869:29: DIV
            	            {
            	            DIV246=(Token)match(input,DIV,FOLLOW_DIV_in_multiplyExpression4846); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            DIV246_tree = (CommonTree)adaptor.create(DIV246);
            	            root_0 = (CommonTree)adaptor.becomeRoot(DIV246_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 3 :
            	            // EsperEPL2Grammar.g:869:34: MOD
            	            {
            	            MOD247=(Token)match(input,MOD,FOLLOW_MOD_in_multiplyExpression4849); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            MOD247_tree = (CommonTree)adaptor.create(MOD247);
            	            root_0 = (CommonTree)adaptor.becomeRoot(MOD247_tree, root_0);
            	            }

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_unaryExpression_in_multiplyExpression4853);
            	    unaryExpression248=unaryExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpression248.getTree());

            	    }
            	    break;

            	default :
            	    break loop100;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "multiplyExpression"

    public static class unaryExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unaryExpression"
    // EsperEPL2Grammar.g:872:1: unaryExpression : ( MINUS eventProperty -> ^( UNARY_MINUS eventProperty ) | constant | substitution | LPAREN expression RPAREN | eventPropertyOrLibFunction | ( builtinFunc )=> ( builtinFunc ) | arrayExpression | subSelectExpression | existsSubSelectExpression );
    public final EsperEPL2GrammarParser.unaryExpression_return unaryExpression() throws RecognitionException {
        EsperEPL2GrammarParser.unaryExpression_return retval = new EsperEPL2GrammarParser.unaryExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token MINUS249=null;
        Token LPAREN253=null;
        Token RPAREN255=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty250 = null;

        EsperEPL2GrammarParser.constant_return constant251 = null;

        EsperEPL2GrammarParser.substitution_return substitution252 = null;

        EsperEPL2GrammarParser.expression_return expression254 = null;

        EsperEPL2GrammarParser.eventPropertyOrLibFunction_return eventPropertyOrLibFunction256 = null;

        EsperEPL2GrammarParser.builtinFunc_return builtinFunc257 = null;

        EsperEPL2GrammarParser.arrayExpression_return arrayExpression258 = null;

        EsperEPL2GrammarParser.subSelectExpression_return subSelectExpression259 = null;

        EsperEPL2GrammarParser.existsSubSelectExpression_return existsSubSelectExpression260 = null;


        CommonTree MINUS249_tree=null;
        CommonTree LPAREN253_tree=null;
        CommonTree RPAREN255_tree=null;
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleSubtreeStream stream_eventProperty=new RewriteRuleSubtreeStream(adaptor,"rule eventProperty");
        try {
            // EsperEPL2Grammar.g:873:2: ( MINUS eventProperty -> ^( UNARY_MINUS eventProperty ) | constant | substitution | LPAREN expression RPAREN | eventPropertyOrLibFunction | ( builtinFunc )=> ( builtinFunc ) | arrayExpression | subSelectExpression | existsSubSelectExpression )
            int alt101=9;
            alt101 = dfa101.predict(input);
            switch (alt101) {
                case 1 :
                    // EsperEPL2Grammar.g:873:4: MINUS eventProperty
                    {
                    MINUS249=(Token)match(input,MINUS,FOLLOW_MINUS_in_unaryExpression4868); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MINUS.add(MINUS249);

                    pushFollow(FOLLOW_eventProperty_in_unaryExpression4870);
                    eventProperty250=eventProperty();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_eventProperty.add(eventProperty250.getTree());


                    // AST REWRITE
                    // elements: eventProperty
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 873:24: -> ^( UNARY_MINUS eventProperty )
                    {
                        // EsperEPL2Grammar.g:873:27: ^( UNARY_MINUS eventProperty )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(UNARY_MINUS, "UNARY_MINUS"), root_1);

                        adaptor.addChild(root_1, stream_eventProperty.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:874:4: constant
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_constant_in_unaryExpression4883);
                    constant251=constant();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constant251.getTree());

                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:875:4: substitution
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_substitution_in_unaryExpression4888);
                    substitution252=substitution();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, substitution252.getTree());

                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:876:4: LPAREN expression RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    LPAREN253=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_unaryExpression4893); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_unaryExpression4896);
                    expression254=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression254.getTree());
                    RPAREN255=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_unaryExpression4898); if (state.failed) return retval;

                    }
                    break;
                case 5 :
                    // EsperEPL2Grammar.g:877:4: eventPropertyOrLibFunction
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_eventPropertyOrLibFunction_in_unaryExpression4904);
                    eventPropertyOrLibFunction256=eventPropertyOrLibFunction();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, eventPropertyOrLibFunction256.getTree());

                    }
                    break;
                case 6 :
                    // EsperEPL2Grammar.g:878:4: ( builtinFunc )=> ( builtinFunc )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // EsperEPL2Grammar.g:878:21: ( builtinFunc )
                    // EsperEPL2Grammar.g:878:22: builtinFunc
                    {
                    pushFollow(FOLLOW_builtinFunc_in_unaryExpression4916);
                    builtinFunc257=builtinFunc();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, builtinFunc257.getTree());

                    }


                    }
                    break;
                case 7 :
                    // EsperEPL2Grammar.g:879:4: arrayExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_arrayExpression_in_unaryExpression4922);
                    arrayExpression258=arrayExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arrayExpression258.getTree());

                    }
                    break;
                case 8 :
                    // EsperEPL2Grammar.g:880:4: subSelectExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_subSelectExpression_in_unaryExpression4927);
                    subSelectExpression259=subSelectExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, subSelectExpression259.getTree());

                    }
                    break;
                case 9 :
                    // EsperEPL2Grammar.g:881:4: existsSubSelectExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_existsSubSelectExpression_in_unaryExpression4932);
                    existsSubSelectExpression260=existsSubSelectExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, existsSubSelectExpression260.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "unaryExpression"

    public static class subSelectExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "subSelectExpression"
    // EsperEPL2Grammar.g:884:1: subSelectExpression : subQueryExpr -> ^( SUBSELECT_EXPR subQueryExpr ) ;
    public final EsperEPL2GrammarParser.subSelectExpression_return subSelectExpression() throws RecognitionException {
        EsperEPL2GrammarParser.subSelectExpression_return retval = new EsperEPL2GrammarParser.subSelectExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr261 = null;


        RewriteRuleSubtreeStream stream_subQueryExpr=new RewriteRuleSubtreeStream(adaptor,"rule subQueryExpr");
        try {
            // EsperEPL2Grammar.g:885:2: ( subQueryExpr -> ^( SUBSELECT_EXPR subQueryExpr ) )
            // EsperEPL2Grammar.g:885:4: subQueryExpr
            {
            pushFollow(FOLLOW_subQueryExpr_in_subSelectExpression4949);
            subQueryExpr261=subQueryExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_subQueryExpr.add(subQueryExpr261.getTree());


            // AST REWRITE
            // elements: subQueryExpr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 886:3: -> ^( SUBSELECT_EXPR subQueryExpr )
            {
                // EsperEPL2Grammar.g:886:6: ^( SUBSELECT_EXPR subQueryExpr )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SUBSELECT_EXPR, "SUBSELECT_EXPR"), root_1);

                adaptor.addChild(root_1, stream_subQueryExpr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "subSelectExpression"

    public static class existsSubSelectExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "existsSubSelectExpression"
    // EsperEPL2Grammar.g:889:1: existsSubSelectExpression : EXISTS subQueryExpr -> ^( EXISTS_SUBSELECT_EXPR subQueryExpr ) ;
    public final EsperEPL2GrammarParser.existsSubSelectExpression_return existsSubSelectExpression() throws RecognitionException {
        EsperEPL2GrammarParser.existsSubSelectExpression_return retval = new EsperEPL2GrammarParser.existsSubSelectExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token EXISTS262=null;
        EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr263 = null;


        CommonTree EXISTS262_tree=null;
        RewriteRuleTokenStream stream_EXISTS=new RewriteRuleTokenStream(adaptor,"token EXISTS");
        RewriteRuleSubtreeStream stream_subQueryExpr=new RewriteRuleSubtreeStream(adaptor,"rule subQueryExpr");
        try {
            // EsperEPL2Grammar.g:890:2: ( EXISTS subQueryExpr -> ^( EXISTS_SUBSELECT_EXPR subQueryExpr ) )
            // EsperEPL2Grammar.g:890:4: EXISTS subQueryExpr
            {
            EXISTS262=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_existsSubSelectExpression4971); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EXISTS.add(EXISTS262);

            pushFollow(FOLLOW_subQueryExpr_in_existsSubSelectExpression4973);
            subQueryExpr263=subQueryExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_subQueryExpr.add(subQueryExpr263.getTree());


            // AST REWRITE
            // elements: subQueryExpr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 891:3: -> ^( EXISTS_SUBSELECT_EXPR subQueryExpr )
            {
                // EsperEPL2Grammar.g:891:6: ^( EXISTS_SUBSELECT_EXPR subQueryExpr )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EXISTS_SUBSELECT_EXPR, "EXISTS_SUBSELECT_EXPR"), root_1);

                adaptor.addChild(root_1, stream_subQueryExpr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "existsSubSelectExpression"

    public static class subQueryExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "subQueryExpr"
    // EsperEPL2Grammar.g:894:1: subQueryExpr : LPAREN SELECT selectionListElement FROM subSelectFilterExpr ( WHERE whereClause )? RPAREN ;
    public final EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr() throws RecognitionException {
        EsperEPL2GrammarParser.subQueryExpr_return retval = new EsperEPL2GrammarParser.subQueryExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LPAREN264=null;
        Token SELECT265=null;
        Token FROM267=null;
        Token WHERE269=null;
        Token RPAREN271=null;
        EsperEPL2GrammarParser.selectionListElement_return selectionListElement266 = null;

        EsperEPL2GrammarParser.subSelectFilterExpr_return subSelectFilterExpr268 = null;

        EsperEPL2GrammarParser.whereClause_return whereClause270 = null;


        CommonTree LPAREN264_tree=null;
        CommonTree SELECT265_tree=null;
        CommonTree FROM267_tree=null;
        CommonTree WHERE269_tree=null;
        CommonTree RPAREN271_tree=null;

         paraphrases.push("subquery"); 
        try {
            // EsperEPL2Grammar.g:897:2: ( LPAREN SELECT selectionListElement FROM subSelectFilterExpr ( WHERE whereClause )? RPAREN )
            // EsperEPL2Grammar.g:897:4: LPAREN SELECT selectionListElement FROM subSelectFilterExpr ( WHERE whereClause )? RPAREN
            {
            root_0 = (CommonTree)adaptor.nil();

            LPAREN264=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_subQueryExpr5006); if (state.failed) return retval;
            SELECT265=(Token)match(input,SELECT,FOLLOW_SELECT_in_subQueryExpr5012); if (state.failed) return retval;
            pushFollow(FOLLOW_selectionListElement_in_subQueryExpr5015);
            selectionListElement266=selectionListElement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, selectionListElement266.getTree());
            FROM267=(Token)match(input,FROM,FOLLOW_FROM_in_subQueryExpr5022); if (state.failed) return retval;
            pushFollow(FOLLOW_subSelectFilterExpr_in_subQueryExpr5025);
            subSelectFilterExpr268=subSelectFilterExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, subSelectFilterExpr268.getTree());
            // EsperEPL2Grammar.g:900:6: ( WHERE whereClause )?
            int alt102=2;
            int LA102_0 = input.LA(1);

            if ( (LA102_0==WHERE) ) {
                alt102=1;
            }
            switch (alt102) {
                case 1 :
                    // EsperEPL2Grammar.g:900:7: WHERE whereClause
                    {
                    WHERE269=(Token)match(input,WHERE,FOLLOW_WHERE_in_subQueryExpr5033); if (state.failed) return retval;
                    pushFollow(FOLLOW_whereClause_in_subQueryExpr5036);
                    whereClause270=whereClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, whereClause270.getTree());

                    }
                    break;

            }

            RPAREN271=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_subQueryExpr5045); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "subQueryExpr"

    public static class subSelectFilterExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "subSelectFilterExpr"
    // EsperEPL2Grammar.g:904:1: subSelectFilterExpr : eventFilterExpression ( DOT viewExpression ( DOT viewExpression )* )? ( AS i= IDENT | i= IDENT )? (ru= RETAINUNION | ri= RETAININTERSECTION )? -> ^( STREAM_EXPR eventFilterExpression ( viewExpression )* ( $i)? ( $ru)? ( $ri)? ) ;
    public final EsperEPL2GrammarParser.subSelectFilterExpr_return subSelectFilterExpr() throws RecognitionException {
        EsperEPL2GrammarParser.subSelectFilterExpr_return retval = new EsperEPL2GrammarParser.subSelectFilterExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token ru=null;
        Token ri=null;
        Token DOT273=null;
        Token DOT275=null;
        Token AS277=null;
        EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression272 = null;

        EsperEPL2GrammarParser.viewExpression_return viewExpression274 = null;

        EsperEPL2GrammarParser.viewExpression_return viewExpression276 = null;


        CommonTree i_tree=null;
        CommonTree ru_tree=null;
        CommonTree ri_tree=null;
        CommonTree DOT273_tree=null;
        CommonTree DOT275_tree=null;
        CommonTree AS277_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RETAINUNION=new RewriteRuleTokenStream(adaptor,"token RETAINUNION");
        RewriteRuleTokenStream stream_RETAININTERSECTION=new RewriteRuleTokenStream(adaptor,"token RETAININTERSECTION");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_viewExpression=new RewriteRuleSubtreeStream(adaptor,"rule viewExpression");
        RewriteRuleSubtreeStream stream_eventFilterExpression=new RewriteRuleSubtreeStream(adaptor,"rule eventFilterExpression");
         paraphrases.push("subquery filter specification"); 
        try {
            // EsperEPL2Grammar.g:907:2: ( eventFilterExpression ( DOT viewExpression ( DOT viewExpression )* )? ( AS i= IDENT | i= IDENT )? (ru= RETAINUNION | ri= RETAININTERSECTION )? -> ^( STREAM_EXPR eventFilterExpression ( viewExpression )* ( $i)? ( $ru)? ( $ri)? ) )
            // EsperEPL2Grammar.g:907:4: eventFilterExpression ( DOT viewExpression ( DOT viewExpression )* )? ( AS i= IDENT | i= IDENT )? (ru= RETAINUNION | ri= RETAININTERSECTION )?
            {
            pushFollow(FOLLOW_eventFilterExpression_in_subSelectFilterExpr5069);
            eventFilterExpression272=eventFilterExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventFilterExpression.add(eventFilterExpression272.getTree());
            // EsperEPL2Grammar.g:908:3: ( DOT viewExpression ( DOT viewExpression )* )?
            int alt104=2;
            int LA104_0 = input.LA(1);

            if ( (LA104_0==DOT) ) {
                alt104=1;
            }
            switch (alt104) {
                case 1 :
                    // EsperEPL2Grammar.g:908:4: DOT viewExpression ( DOT viewExpression )*
                    {
                    DOT273=(Token)match(input,DOT,FOLLOW_DOT_in_subSelectFilterExpr5074); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT273);

                    pushFollow(FOLLOW_viewExpression_in_subSelectFilterExpr5076);
                    viewExpression274=viewExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression274.getTree());
                    // EsperEPL2Grammar.g:908:23: ( DOT viewExpression )*
                    loop103:
                    do {
                        int alt103=2;
                        int LA103_0 = input.LA(1);

                        if ( (LA103_0==DOT) ) {
                            alt103=1;
                        }


                        switch (alt103) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:908:24: DOT viewExpression
                    	    {
                    	    DOT275=(Token)match(input,DOT,FOLLOW_DOT_in_subSelectFilterExpr5079); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_DOT.add(DOT275);

                    	    pushFollow(FOLLOW_viewExpression_in_subSelectFilterExpr5081);
                    	    viewExpression276=viewExpression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression276.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop103;
                        }
                    } while (true);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:908:47: ( AS i= IDENT | i= IDENT )?
            int alt105=3;
            int LA105_0 = input.LA(1);

            if ( (LA105_0==AS) ) {
                alt105=1;
            }
            else if ( (LA105_0==IDENT) ) {
                alt105=2;
            }
            switch (alt105) {
                case 1 :
                    // EsperEPL2Grammar.g:908:48: AS i= IDENT
                    {
                    AS277=(Token)match(input,AS,FOLLOW_AS_in_subSelectFilterExpr5088); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS277);

                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_subSelectFilterExpr5092); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:908:61: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_subSelectFilterExpr5098); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:908:71: (ru= RETAINUNION | ri= RETAININTERSECTION )?
            int alt106=3;
            int LA106_0 = input.LA(1);

            if ( (LA106_0==RETAINUNION) ) {
                alt106=1;
            }
            else if ( (LA106_0==RETAININTERSECTION) ) {
                alt106=2;
            }
            switch (alt106) {
                case 1 :
                    // EsperEPL2Grammar.g:908:72: ru= RETAINUNION
                    {
                    ru=(Token)match(input,RETAINUNION,FOLLOW_RETAINUNION_in_subSelectFilterExpr5105); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAINUNION.add(ru);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:908:87: ri= RETAININTERSECTION
                    {
                    ri=(Token)match(input,RETAININTERSECTION,FOLLOW_RETAININTERSECTION_in_subSelectFilterExpr5109); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAININTERSECTION.add(ri);


                    }
                    break;

            }



            // AST REWRITE
            // elements: ru, eventFilterExpression, viewExpression, ri, i
            // token labels: ri, ru, i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_ri=new RewriteRuleTokenStream(adaptor,"token ri",ri);
            RewriteRuleTokenStream stream_ru=new RewriteRuleTokenStream(adaptor,"token ru",ru);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 909:3: -> ^( STREAM_EXPR eventFilterExpression ( viewExpression )* ( $i)? ( $ru)? ( $ri)? )
            {
                // EsperEPL2Grammar.g:909:6: ^( STREAM_EXPR eventFilterExpression ( viewExpression )* ( $i)? ( $ru)? ( $ri)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STREAM_EXPR, "STREAM_EXPR"), root_1);

                adaptor.addChild(root_1, stream_eventFilterExpression.nextTree());
                // EsperEPL2Grammar.g:909:42: ( viewExpression )*
                while ( stream_viewExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_viewExpression.nextTree());

                }
                stream_viewExpression.reset();
                // EsperEPL2Grammar.g:909:58: ( $i)?
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());

                }
                stream_i.reset();
                // EsperEPL2Grammar.g:909:62: ( $ru)?
                if ( stream_ru.hasNext() ) {
                    adaptor.addChild(root_1, stream_ru.nextNode());

                }
                stream_ru.reset();
                // EsperEPL2Grammar.g:909:67: ( $ri)?
                if ( stream_ri.hasNext() ) {
                    adaptor.addChild(root_1, stream_ri.nextNode());

                }
                stream_ri.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "subSelectFilterExpr"

    public static class arrayExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "arrayExpression"
    // EsperEPL2Grammar.g:912:1: arrayExpression : LCURLY ( expression ( COMMA expression )* )? RCURLY -> ^( ARRAY_EXPR ( expression )* ) ;
    public final EsperEPL2GrammarParser.arrayExpression_return arrayExpression() throws RecognitionException {
        EsperEPL2GrammarParser.arrayExpression_return retval = new EsperEPL2GrammarParser.arrayExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LCURLY278=null;
        Token COMMA280=null;
        Token RCURLY282=null;
        EsperEPL2GrammarParser.expression_return expression279 = null;

        EsperEPL2GrammarParser.expression_return expression281 = null;


        CommonTree LCURLY278_tree=null;
        CommonTree COMMA280_tree=null;
        CommonTree RCURLY282_tree=null;
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            // EsperEPL2Grammar.g:913:2: ( LCURLY ( expression ( COMMA expression )* )? RCURLY -> ^( ARRAY_EXPR ( expression )* ) )
            // EsperEPL2Grammar.g:913:4: LCURLY ( expression ( COMMA expression )* )? RCURLY
            {
            LCURLY278=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_arrayExpression5149); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCURLY.add(LCURLY278);

            // EsperEPL2Grammar.g:913:11: ( expression ( COMMA expression )* )?
            int alt108=2;
            int LA108_0 = input.LA(1);

            if ( (LA108_0==WINDOW||LA108_0==ESCAPE||(LA108_0>=NOT_EXPR && LA108_0<=EVERY_EXPR)||(LA108_0>=SUM && LA108_0<=COUNT)||LA108_0==CASE||LA108_0==OUTER||(LA108_0>=JOIN && LA108_0<=FULL)||(LA108_0>=EVENTS && LA108_0<=LAST)||(LA108_0>=UNIDIRECTIONAL && LA108_0<=CURRENT_TIMESTAMP)||LA108_0==SNAPSHOT||(LA108_0>=VARIABLE && LA108_0<=AT)||(LA108_0>=BOOLEAN_TRUE && LA108_0<=VALUE_NULL)||LA108_0==NUM_DOUBLE||LA108_0==IDENT||LA108_0==LPAREN||(LA108_0>=STRING_LITERAL && LA108_0<=QUOTED_STRING_LITERAL)||(LA108_0>=PLUS && LA108_0<=MINUS)||LA108_0==LCURLY||LA108_0==NUM_INT||LA108_0==QUESTION||(LA108_0>=NUM_LONG && LA108_0<=NUM_FLOAT)) ) {
                alt108=1;
            }
            switch (alt108) {
                case 1 :
                    // EsperEPL2Grammar.g:913:12: expression ( COMMA expression )*
                    {
                    pushFollow(FOLLOW_expression_in_arrayExpression5152);
                    expression279=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression279.getTree());
                    // EsperEPL2Grammar.g:913:23: ( COMMA expression )*
                    loop107:
                    do {
                        int alt107=2;
                        int LA107_0 = input.LA(1);

                        if ( (LA107_0==COMMA) ) {
                            alt107=1;
                        }


                        switch (alt107) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:913:24: COMMA expression
                    	    {
                    	    COMMA280=(Token)match(input,COMMA,FOLLOW_COMMA_in_arrayExpression5155); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA280);

                    	    pushFollow(FOLLOW_expression_in_arrayExpression5157);
                    	    expression281=expression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_expression.add(expression281.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop107;
                        }
                    } while (true);


                    }
                    break;

            }

            RCURLY282=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_arrayExpression5164); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCURLY.add(RCURLY282);



            // AST REWRITE
            // elements: expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 914:4: -> ^( ARRAY_EXPR ( expression )* )
            {
                // EsperEPL2Grammar.g:914:7: ^( ARRAY_EXPR ( expression )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ARRAY_EXPR, "ARRAY_EXPR"), root_1);

                // EsperEPL2Grammar.g:914:20: ( expression )*
                while ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());

                }
                stream_expression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "arrayExpression"

    public static class builtinFunc_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "builtinFunc"
    // EsperEPL2Grammar.g:917:1: builtinFunc : ( SUM LPAREN ( ALL | DISTINCT )? expression RPAREN | AVG LPAREN ( ALL | DISTINCT )? expression RPAREN | COUNT LPAREN ( ( ( ALL | DISTINCT )? expression ) | ( STAR ) ) RPAREN | MEDIAN LPAREN ( ALL | DISTINCT )? expression RPAREN | STDDEV LPAREN ( ALL | DISTINCT )? expression RPAREN | AVEDEV LPAREN ( ALL | DISTINCT )? expression RPAREN | COALESCE LPAREN expression COMMA expression ( COMMA expression )* RPAREN | PREVIOUS LPAREN expression COMMA eventProperty RPAREN | PRIOR LPAREN NUM_INT COMMA eventProperty RPAREN | INSTANCEOF LPAREN expression COMMA classIdentifier ( COMMA classIdentifier )* RPAREN | CAST LPAREN expression ( COMMA | AS ) classIdentifier RPAREN | EXISTS LPAREN eventProperty RPAREN | CURRENT_TIMESTAMP ( LPAREN RPAREN )? );
    public final EsperEPL2GrammarParser.builtinFunc_return builtinFunc() throws RecognitionException {
        EsperEPL2GrammarParser.builtinFunc_return retval = new EsperEPL2GrammarParser.builtinFunc_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token SUM283=null;
        Token LPAREN284=null;
        Token ALL285=null;
        Token DISTINCT286=null;
        Token RPAREN288=null;
        Token AVG289=null;
        Token LPAREN290=null;
        Token ALL291=null;
        Token DISTINCT292=null;
        Token RPAREN294=null;
        Token COUNT295=null;
        Token LPAREN296=null;
        Token ALL297=null;
        Token DISTINCT298=null;
        Token STAR300=null;
        Token RPAREN301=null;
        Token MEDIAN302=null;
        Token LPAREN303=null;
        Token ALL304=null;
        Token DISTINCT305=null;
        Token RPAREN307=null;
        Token STDDEV308=null;
        Token LPAREN309=null;
        Token ALL310=null;
        Token DISTINCT311=null;
        Token RPAREN313=null;
        Token AVEDEV314=null;
        Token LPAREN315=null;
        Token ALL316=null;
        Token DISTINCT317=null;
        Token RPAREN319=null;
        Token COALESCE320=null;
        Token LPAREN321=null;
        Token COMMA323=null;
        Token COMMA325=null;
        Token RPAREN327=null;
        Token PREVIOUS328=null;
        Token LPAREN329=null;
        Token COMMA331=null;
        Token RPAREN333=null;
        Token PRIOR334=null;
        Token LPAREN335=null;
        Token NUM_INT336=null;
        Token COMMA337=null;
        Token RPAREN339=null;
        Token INSTANCEOF340=null;
        Token LPAREN341=null;
        Token COMMA343=null;
        Token COMMA345=null;
        Token RPAREN347=null;
        Token CAST348=null;
        Token LPAREN349=null;
        Token COMMA351=null;
        Token AS352=null;
        Token RPAREN354=null;
        Token EXISTS355=null;
        Token LPAREN356=null;
        Token RPAREN358=null;
        Token CURRENT_TIMESTAMP359=null;
        Token LPAREN360=null;
        Token RPAREN361=null;
        EsperEPL2GrammarParser.expression_return expression287 = null;

        EsperEPL2GrammarParser.expression_return expression293 = null;

        EsperEPL2GrammarParser.expression_return expression299 = null;

        EsperEPL2GrammarParser.expression_return expression306 = null;

        EsperEPL2GrammarParser.expression_return expression312 = null;

        EsperEPL2GrammarParser.expression_return expression318 = null;

        EsperEPL2GrammarParser.expression_return expression322 = null;

        EsperEPL2GrammarParser.expression_return expression324 = null;

        EsperEPL2GrammarParser.expression_return expression326 = null;

        EsperEPL2GrammarParser.expression_return expression330 = null;

        EsperEPL2GrammarParser.eventProperty_return eventProperty332 = null;

        EsperEPL2GrammarParser.eventProperty_return eventProperty338 = null;

        EsperEPL2GrammarParser.expression_return expression342 = null;

        EsperEPL2GrammarParser.classIdentifier_return classIdentifier344 = null;

        EsperEPL2GrammarParser.classIdentifier_return classIdentifier346 = null;

        EsperEPL2GrammarParser.expression_return expression350 = null;

        EsperEPL2GrammarParser.classIdentifier_return classIdentifier353 = null;

        EsperEPL2GrammarParser.eventProperty_return eventProperty357 = null;


        CommonTree SUM283_tree=null;
        CommonTree LPAREN284_tree=null;
        CommonTree ALL285_tree=null;
        CommonTree DISTINCT286_tree=null;
        CommonTree RPAREN288_tree=null;
        CommonTree AVG289_tree=null;
        CommonTree LPAREN290_tree=null;
        CommonTree ALL291_tree=null;
        CommonTree DISTINCT292_tree=null;
        CommonTree RPAREN294_tree=null;
        CommonTree COUNT295_tree=null;
        CommonTree LPAREN296_tree=null;
        CommonTree ALL297_tree=null;
        CommonTree DISTINCT298_tree=null;
        CommonTree STAR300_tree=null;
        CommonTree RPAREN301_tree=null;
        CommonTree MEDIAN302_tree=null;
        CommonTree LPAREN303_tree=null;
        CommonTree ALL304_tree=null;
        CommonTree DISTINCT305_tree=null;
        CommonTree RPAREN307_tree=null;
        CommonTree STDDEV308_tree=null;
        CommonTree LPAREN309_tree=null;
        CommonTree ALL310_tree=null;
        CommonTree DISTINCT311_tree=null;
        CommonTree RPAREN313_tree=null;
        CommonTree AVEDEV314_tree=null;
        CommonTree LPAREN315_tree=null;
        CommonTree ALL316_tree=null;
        CommonTree DISTINCT317_tree=null;
        CommonTree RPAREN319_tree=null;
        CommonTree COALESCE320_tree=null;
        CommonTree LPAREN321_tree=null;
        CommonTree COMMA323_tree=null;
        CommonTree COMMA325_tree=null;
        CommonTree RPAREN327_tree=null;
        CommonTree PREVIOUS328_tree=null;
        CommonTree LPAREN329_tree=null;
        CommonTree COMMA331_tree=null;
        CommonTree RPAREN333_tree=null;
        CommonTree PRIOR334_tree=null;
        CommonTree LPAREN335_tree=null;
        CommonTree NUM_INT336_tree=null;
        CommonTree COMMA337_tree=null;
        CommonTree RPAREN339_tree=null;
        CommonTree INSTANCEOF340_tree=null;
        CommonTree LPAREN341_tree=null;
        CommonTree COMMA343_tree=null;
        CommonTree COMMA345_tree=null;
        CommonTree RPAREN347_tree=null;
        CommonTree CAST348_tree=null;
        CommonTree LPAREN349_tree=null;
        CommonTree COMMA351_tree=null;
        CommonTree AS352_tree=null;
        CommonTree RPAREN354_tree=null;
        CommonTree EXISTS355_tree=null;
        CommonTree LPAREN356_tree=null;
        CommonTree RPAREN358_tree=null;
        CommonTree CURRENT_TIMESTAMP359_tree=null;
        CommonTree LPAREN360_tree=null;
        CommonTree RPAREN361_tree=null;

        try {
            // EsperEPL2Grammar.g:918:2: ( SUM LPAREN ( ALL | DISTINCT )? expression RPAREN | AVG LPAREN ( ALL | DISTINCT )? expression RPAREN | COUNT LPAREN ( ( ( ALL | DISTINCT )? expression ) | ( STAR ) ) RPAREN | MEDIAN LPAREN ( ALL | DISTINCT )? expression RPAREN | STDDEV LPAREN ( ALL | DISTINCT )? expression RPAREN | AVEDEV LPAREN ( ALL | DISTINCT )? expression RPAREN | COALESCE LPAREN expression COMMA expression ( COMMA expression )* RPAREN | PREVIOUS LPAREN expression COMMA eventProperty RPAREN | PRIOR LPAREN NUM_INT COMMA eventProperty RPAREN | INSTANCEOF LPAREN expression COMMA classIdentifier ( COMMA classIdentifier )* RPAREN | CAST LPAREN expression ( COMMA | AS ) classIdentifier RPAREN | EXISTS LPAREN eventProperty RPAREN | CURRENT_TIMESTAMP ( LPAREN RPAREN )? )
            int alt120=13;
            switch ( input.LA(1) ) {
            case SUM:
                {
                alt120=1;
                }
                break;
            case AVG:
                {
                alt120=2;
                }
                break;
            case COUNT:
                {
                alt120=3;
                }
                break;
            case MEDIAN:
                {
                alt120=4;
                }
                break;
            case STDDEV:
                {
                alt120=5;
                }
                break;
            case AVEDEV:
                {
                alt120=6;
                }
                break;
            case COALESCE:
                {
                alt120=7;
                }
                break;
            case PREVIOUS:
                {
                alt120=8;
                }
                break;
            case PRIOR:
                {
                alt120=9;
                }
                break;
            case INSTANCEOF:
                {
                alt120=10;
                }
                break;
            case CAST:
                {
                alt120=11;
                }
                break;
            case EXISTS:
                {
                alt120=12;
                }
                break;
            case CURRENT_TIMESTAMP:
                {
                alt120=13;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 120, 0, input);

                throw nvae;
            }

            switch (alt120) {
                case 1 :
                    // EsperEPL2Grammar.g:918:4: SUM LPAREN ( ALL | DISTINCT )? expression RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    SUM283=(Token)match(input,SUM,FOLLOW_SUM_in_builtinFunc5187); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SUM283_tree = (CommonTree)adaptor.create(SUM283);
                    root_0 = (CommonTree)adaptor.becomeRoot(SUM283_tree, root_0);
                    }
                    LPAREN284=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc5190); if (state.failed) return retval;
                    // EsperEPL2Grammar.g:918:17: ( ALL | DISTINCT )?
                    int alt109=3;
                    int LA109_0 = input.LA(1);

                    if ( (LA109_0==ALL) ) {
                        alt109=1;
                    }
                    else if ( (LA109_0==DISTINCT) ) {
                        alt109=2;
                    }
                    switch (alt109) {
                        case 1 :
                            // EsperEPL2Grammar.g:918:18: ALL
                            {
                            ALL285=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc5194); if (state.failed) return retval;

                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:918:25: DISTINCT
                            {
                            DISTINCT286=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc5199); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT286_tree = (CommonTree)adaptor.create(DISTINCT286);
                            adaptor.addChild(root_0, DISTINCT286_tree);
                            }

                            }
                            break;

                    }

                    pushFollow(FOLLOW_expression_in_builtinFunc5203);
                    expression287=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression287.getTree());
                    RPAREN288=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc5205); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:919:4: AVG LPAREN ( ALL | DISTINCT )? expression RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    AVG289=(Token)match(input,AVG,FOLLOW_AVG_in_builtinFunc5211); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AVG289_tree = (CommonTree)adaptor.create(AVG289);
                    root_0 = (CommonTree)adaptor.becomeRoot(AVG289_tree, root_0);
                    }
                    LPAREN290=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc5214); if (state.failed) return retval;
                    // EsperEPL2Grammar.g:919:17: ( ALL | DISTINCT )?
                    int alt110=3;
                    int LA110_0 = input.LA(1);

                    if ( (LA110_0==ALL) ) {
                        alt110=1;
                    }
                    else if ( (LA110_0==DISTINCT) ) {
                        alt110=2;
                    }
                    switch (alt110) {
                        case 1 :
                            // EsperEPL2Grammar.g:919:18: ALL
                            {
                            ALL291=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc5218); if (state.failed) return retval;

                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:919:25: DISTINCT
                            {
                            DISTINCT292=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc5223); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT292_tree = (CommonTree)adaptor.create(DISTINCT292);
                            adaptor.addChild(root_0, DISTINCT292_tree);
                            }

                            }
                            break;

                    }

                    pushFollow(FOLLOW_expression_in_builtinFunc5227);
                    expression293=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression293.getTree());
                    RPAREN294=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc5229); if (state.failed) return retval;

                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:920:4: COUNT LPAREN ( ( ( ALL | DISTINCT )? expression ) | ( STAR ) ) RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    COUNT295=(Token)match(input,COUNT,FOLLOW_COUNT_in_builtinFunc5235); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COUNT295_tree = (CommonTree)adaptor.create(COUNT295);
                    root_0 = (CommonTree)adaptor.becomeRoot(COUNT295_tree, root_0);
                    }
                    LPAREN296=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc5238); if (state.failed) return retval;
                    // EsperEPL2Grammar.g:921:3: ( ( ( ALL | DISTINCT )? expression ) | ( STAR ) )
                    int alt112=2;
                    int LA112_0 = input.LA(1);

                    if ( (LA112_0==WINDOW||LA112_0==ESCAPE||(LA112_0>=NOT_EXPR && LA112_0<=EVERY_EXPR)||(LA112_0>=SUM && LA112_0<=COUNT)||LA112_0==CASE||LA112_0==OUTER||(LA112_0>=JOIN && LA112_0<=FULL)||(LA112_0>=DISTINCT && LA112_0<=ALL)||(LA112_0>=EVENTS && LA112_0<=LAST)||(LA112_0>=UNIDIRECTIONAL && LA112_0<=CURRENT_TIMESTAMP)||LA112_0==SNAPSHOT||(LA112_0>=VARIABLE && LA112_0<=AT)||(LA112_0>=BOOLEAN_TRUE && LA112_0<=VALUE_NULL)||LA112_0==NUM_DOUBLE||LA112_0==IDENT||LA112_0==LPAREN||(LA112_0>=STRING_LITERAL && LA112_0<=QUOTED_STRING_LITERAL)||(LA112_0>=PLUS && LA112_0<=MINUS)||LA112_0==LCURLY||LA112_0==NUM_INT||LA112_0==QUESTION||(LA112_0>=NUM_LONG && LA112_0<=NUM_FLOAT)) ) {
                        alt112=1;
                    }
                    else if ( (LA112_0==STAR) ) {
                        alt112=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 112, 0, input);

                        throw nvae;
                    }
                    switch (alt112) {
                        case 1 :
                            // EsperEPL2Grammar.g:922:4: ( ( ALL | DISTINCT )? expression )
                            {
                            // EsperEPL2Grammar.g:922:4: ( ( ALL | DISTINCT )? expression )
                            // EsperEPL2Grammar.g:922:5: ( ALL | DISTINCT )? expression
                            {
                            // EsperEPL2Grammar.g:922:5: ( ALL | DISTINCT )?
                            int alt111=3;
                            int LA111_0 = input.LA(1);

                            if ( (LA111_0==ALL) ) {
                                alt111=1;
                            }
                            else if ( (LA111_0==DISTINCT) ) {
                                alt111=2;
                            }
                            switch (alt111) {
                                case 1 :
                                    // EsperEPL2Grammar.g:922:6: ALL
                                    {
                                    ALL297=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc5250); if (state.failed) return retval;

                                    }
                                    break;
                                case 2 :
                                    // EsperEPL2Grammar.g:922:13: DISTINCT
                                    {
                                    DISTINCT298=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc5255); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                    DISTINCT298_tree = (CommonTree)adaptor.create(DISTINCT298);
                                    adaptor.addChild(root_0, DISTINCT298_tree);
                                    }

                                    }
                                    break;

                            }

                            pushFollow(FOLLOW_expression_in_builtinFunc5259);
                            expression299=expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression299.getTree());

                            }


                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:924:4: ( STAR )
                            {
                            // EsperEPL2Grammar.g:924:4: ( STAR )
                            // EsperEPL2Grammar.g:924:5: STAR
                            {
                            STAR300=(Token)match(input,STAR,FOLLOW_STAR_in_builtinFunc5270); if (state.failed) return retval;

                            }


                            }
                            break;

                    }

                    RPAREN301=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc5281); if (state.failed) return retval;

                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:927:4: MEDIAN LPAREN ( ALL | DISTINCT )? expression RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    MEDIAN302=(Token)match(input,MEDIAN,FOLLOW_MEDIAN_in_builtinFunc5287); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MEDIAN302_tree = (CommonTree)adaptor.create(MEDIAN302);
                    root_0 = (CommonTree)adaptor.becomeRoot(MEDIAN302_tree, root_0);
                    }
                    LPAREN303=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc5290); if (state.failed) return retval;
                    // EsperEPL2Grammar.g:927:20: ( ALL | DISTINCT )?
                    int alt113=3;
                    int LA113_0 = input.LA(1);

                    if ( (LA113_0==ALL) ) {
                        alt113=1;
                    }
                    else if ( (LA113_0==DISTINCT) ) {
                        alt113=2;
                    }
                    switch (alt113) {
                        case 1 :
                            // EsperEPL2Grammar.g:927:21: ALL
                            {
                            ALL304=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc5294); if (state.failed) return retval;

                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:927:28: DISTINCT
                            {
                            DISTINCT305=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc5299); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT305_tree = (CommonTree)adaptor.create(DISTINCT305);
                            adaptor.addChild(root_0, DISTINCT305_tree);
                            }

                            }
                            break;

                    }

                    pushFollow(FOLLOW_expression_in_builtinFunc5303);
                    expression306=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression306.getTree());
                    RPAREN307=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc5305); if (state.failed) return retval;

                    }
                    break;
                case 5 :
                    // EsperEPL2Grammar.g:928:4: STDDEV LPAREN ( ALL | DISTINCT )? expression RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    STDDEV308=(Token)match(input,STDDEV,FOLLOW_STDDEV_in_builtinFunc5311); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STDDEV308_tree = (CommonTree)adaptor.create(STDDEV308);
                    root_0 = (CommonTree)adaptor.becomeRoot(STDDEV308_tree, root_0);
                    }
                    LPAREN309=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc5314); if (state.failed) return retval;
                    // EsperEPL2Grammar.g:928:20: ( ALL | DISTINCT )?
                    int alt114=3;
                    int LA114_0 = input.LA(1);

                    if ( (LA114_0==ALL) ) {
                        alt114=1;
                    }
                    else if ( (LA114_0==DISTINCT) ) {
                        alt114=2;
                    }
                    switch (alt114) {
                        case 1 :
                            // EsperEPL2Grammar.g:928:21: ALL
                            {
                            ALL310=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc5318); if (state.failed) return retval;

                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:928:28: DISTINCT
                            {
                            DISTINCT311=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc5323); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT311_tree = (CommonTree)adaptor.create(DISTINCT311);
                            adaptor.addChild(root_0, DISTINCT311_tree);
                            }

                            }
                            break;

                    }

                    pushFollow(FOLLOW_expression_in_builtinFunc5327);
                    expression312=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression312.getTree());
                    RPAREN313=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc5329); if (state.failed) return retval;

                    }
                    break;
                case 6 :
                    // EsperEPL2Grammar.g:929:4: AVEDEV LPAREN ( ALL | DISTINCT )? expression RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    AVEDEV314=(Token)match(input,AVEDEV,FOLLOW_AVEDEV_in_builtinFunc5335); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AVEDEV314_tree = (CommonTree)adaptor.create(AVEDEV314);
                    root_0 = (CommonTree)adaptor.becomeRoot(AVEDEV314_tree, root_0);
                    }
                    LPAREN315=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc5338); if (state.failed) return retval;
                    // EsperEPL2Grammar.g:929:20: ( ALL | DISTINCT )?
                    int alt115=3;
                    int LA115_0 = input.LA(1);

                    if ( (LA115_0==ALL) ) {
                        alt115=1;
                    }
                    else if ( (LA115_0==DISTINCT) ) {
                        alt115=2;
                    }
                    switch (alt115) {
                        case 1 :
                            // EsperEPL2Grammar.g:929:21: ALL
                            {
                            ALL316=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc5342); if (state.failed) return retval;

                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:929:28: DISTINCT
                            {
                            DISTINCT317=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc5347); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT317_tree = (CommonTree)adaptor.create(DISTINCT317);
                            adaptor.addChild(root_0, DISTINCT317_tree);
                            }

                            }
                            break;

                    }

                    pushFollow(FOLLOW_expression_in_builtinFunc5351);
                    expression318=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression318.getTree());
                    RPAREN319=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc5353); if (state.failed) return retval;

                    }
                    break;
                case 7 :
                    // EsperEPL2Grammar.g:930:4: COALESCE LPAREN expression COMMA expression ( COMMA expression )* RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    COALESCE320=(Token)match(input,COALESCE,FOLLOW_COALESCE_in_builtinFunc5359); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COALESCE320_tree = (CommonTree)adaptor.create(COALESCE320);
                    root_0 = (CommonTree)adaptor.becomeRoot(COALESCE320_tree, root_0);
                    }
                    LPAREN321=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc5362); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc5365);
                    expression322=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression322.getTree());
                    COMMA323=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc5367); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc5370);
                    expression324=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression324.getTree());
                    // EsperEPL2Grammar.g:930:51: ( COMMA expression )*
                    loop116:
                    do {
                        int alt116=2;
                        int LA116_0 = input.LA(1);

                        if ( (LA116_0==COMMA) ) {
                            alt116=1;
                        }


                        switch (alt116) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:930:52: COMMA expression
                    	    {
                    	    COMMA325=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc5373); if (state.failed) return retval;
                    	    pushFollow(FOLLOW_expression_in_builtinFunc5376);
                    	    expression326=expression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression326.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop116;
                        }
                    } while (true);

                    RPAREN327=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc5380); if (state.failed) return retval;

                    }
                    break;
                case 8 :
                    // EsperEPL2Grammar.g:931:4: PREVIOUS LPAREN expression COMMA eventProperty RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    PREVIOUS328=(Token)match(input,PREVIOUS,FOLLOW_PREVIOUS_in_builtinFunc5386); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PREVIOUS328_tree = (CommonTree)adaptor.create(PREVIOUS328);
                    root_0 = (CommonTree)adaptor.becomeRoot(PREVIOUS328_tree, root_0);
                    }
                    LPAREN329=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc5389); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc5392);
                    expression330=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression330.getTree());
                    COMMA331=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc5394); if (state.failed) return retval;
                    pushFollow(FOLLOW_eventProperty_in_builtinFunc5397);
                    eventProperty332=eventProperty();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty332.getTree());
                    RPAREN333=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc5399); if (state.failed) return retval;

                    }
                    break;
                case 9 :
                    // EsperEPL2Grammar.g:932:4: PRIOR LPAREN NUM_INT COMMA eventProperty RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    PRIOR334=(Token)match(input,PRIOR,FOLLOW_PRIOR_in_builtinFunc5405); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PRIOR334_tree = (CommonTree)adaptor.create(PRIOR334);
                    root_0 = (CommonTree)adaptor.becomeRoot(PRIOR334_tree, root_0);
                    }
                    LPAREN335=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc5408); if (state.failed) return retval;
                    NUM_INT336=(Token)match(input,NUM_INT,FOLLOW_NUM_INT_in_builtinFunc5411); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NUM_INT336_tree = (CommonTree)adaptor.create(NUM_INT336);
                    adaptor.addChild(root_0, NUM_INT336_tree);
                    }
                    COMMA337=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc5413); if (state.failed) return retval;
                    pushFollow(FOLLOW_eventProperty_in_builtinFunc5416);
                    eventProperty338=eventProperty();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty338.getTree());
                    RPAREN339=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc5418); if (state.failed) return retval;

                    }
                    break;
                case 10 :
                    // EsperEPL2Grammar.g:935:4: INSTANCEOF LPAREN expression COMMA classIdentifier ( COMMA classIdentifier )* RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    INSTANCEOF340=(Token)match(input,INSTANCEOF,FOLLOW_INSTANCEOF_in_builtinFunc5428); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INSTANCEOF340_tree = (CommonTree)adaptor.create(INSTANCEOF340);
                    root_0 = (CommonTree)adaptor.becomeRoot(INSTANCEOF340_tree, root_0);
                    }
                    LPAREN341=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc5431); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc5434);
                    expression342=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression342.getTree());
                    COMMA343=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc5436); if (state.failed) return retval;
                    pushFollow(FOLLOW_classIdentifier_in_builtinFunc5439);
                    classIdentifier344=classIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier344.getTree());
                    // EsperEPL2Grammar.g:935:58: ( COMMA classIdentifier )*
                    loop117:
                    do {
                        int alt117=2;
                        int LA117_0 = input.LA(1);

                        if ( (LA117_0==COMMA) ) {
                            alt117=1;
                        }


                        switch (alt117) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:935:59: COMMA classIdentifier
                    	    {
                    	    COMMA345=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc5442); if (state.failed) return retval;
                    	    pushFollow(FOLLOW_classIdentifier_in_builtinFunc5445);
                    	    classIdentifier346=classIdentifier();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier346.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop117;
                        }
                    } while (true);

                    RPAREN347=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc5449); if (state.failed) return retval;

                    }
                    break;
                case 11 :
                    // EsperEPL2Grammar.g:936:4: CAST LPAREN expression ( COMMA | AS ) classIdentifier RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    CAST348=(Token)match(input,CAST,FOLLOW_CAST_in_builtinFunc5455); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CAST348_tree = (CommonTree)adaptor.create(CAST348);
                    root_0 = (CommonTree)adaptor.becomeRoot(CAST348_tree, root_0);
                    }
                    LPAREN349=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc5458); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc5461);
                    expression350=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression350.getTree());
                    // EsperEPL2Grammar.g:936:29: ( COMMA | AS )
                    int alt118=2;
                    int LA118_0 = input.LA(1);

                    if ( (LA118_0==COMMA) ) {
                        alt118=1;
                    }
                    else if ( (LA118_0==AS) ) {
                        alt118=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 118, 0, input);

                        throw nvae;
                    }
                    switch (alt118) {
                        case 1 :
                            // EsperEPL2Grammar.g:936:30: COMMA
                            {
                            COMMA351=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc5464); if (state.failed) return retval;

                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:936:39: AS
                            {
                            AS352=(Token)match(input,AS,FOLLOW_AS_in_builtinFunc5469); if (state.failed) return retval;

                            }
                            break;

                    }

                    pushFollow(FOLLOW_classIdentifier_in_builtinFunc5473);
                    classIdentifier353=classIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier353.getTree());
                    RPAREN354=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc5475); if (state.failed) return retval;

                    }
                    break;
                case 12 :
                    // EsperEPL2Grammar.g:937:4: EXISTS LPAREN eventProperty RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    EXISTS355=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_builtinFunc5481); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EXISTS355_tree = (CommonTree)adaptor.create(EXISTS355);
                    root_0 = (CommonTree)adaptor.becomeRoot(EXISTS355_tree, root_0);
                    }
                    LPAREN356=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc5484); if (state.failed) return retval;
                    pushFollow(FOLLOW_eventProperty_in_builtinFunc5487);
                    eventProperty357=eventProperty();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty357.getTree());
                    RPAREN358=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc5489); if (state.failed) return retval;

                    }
                    break;
                case 13 :
                    // EsperEPL2Grammar.g:938:4: CURRENT_TIMESTAMP ( LPAREN RPAREN )?
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    CURRENT_TIMESTAMP359=(Token)match(input,CURRENT_TIMESTAMP,FOLLOW_CURRENT_TIMESTAMP_in_builtinFunc5495); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CURRENT_TIMESTAMP359_tree = (CommonTree)adaptor.create(CURRENT_TIMESTAMP359);
                    root_0 = (CommonTree)adaptor.becomeRoot(CURRENT_TIMESTAMP359_tree, root_0);
                    }
                    // EsperEPL2Grammar.g:938:23: ( LPAREN RPAREN )?
                    int alt119=2;
                    int LA119_0 = input.LA(1);

                    if ( (LA119_0==LPAREN) ) {
                        alt119=1;
                    }
                    switch (alt119) {
                        case 1 :
                            // EsperEPL2Grammar.g:938:24: LPAREN RPAREN
                            {
                            LPAREN360=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc5499); if (state.failed) return retval;
                            RPAREN361=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc5502); if (state.failed) return retval;

                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "builtinFunc"

    public static class maxFunc_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "maxFunc"
    // EsperEPL2Grammar.g:941:1: maxFunc : ( MAX | MIN ) LPAREN expression ( COMMA expression ( COMMA expression )* )? RPAREN ;
    public final EsperEPL2GrammarParser.maxFunc_return maxFunc() throws RecognitionException {
        EsperEPL2GrammarParser.maxFunc_return retval = new EsperEPL2GrammarParser.maxFunc_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token MAX362=null;
        Token MIN363=null;
        Token LPAREN364=null;
        Token COMMA366=null;
        Token COMMA368=null;
        Token RPAREN370=null;
        EsperEPL2GrammarParser.expression_return expression365 = null;

        EsperEPL2GrammarParser.expression_return expression367 = null;

        EsperEPL2GrammarParser.expression_return expression369 = null;


        CommonTree MAX362_tree=null;
        CommonTree MIN363_tree=null;
        CommonTree LPAREN364_tree=null;
        CommonTree COMMA366_tree=null;
        CommonTree COMMA368_tree=null;
        CommonTree RPAREN370_tree=null;

        try {
            // EsperEPL2Grammar.g:942:2: ( ( MAX | MIN ) LPAREN expression ( COMMA expression ( COMMA expression )* )? RPAREN )
            // EsperEPL2Grammar.g:942:4: ( MAX | MIN ) LPAREN expression ( COMMA expression ( COMMA expression )* )? RPAREN
            {
            root_0 = (CommonTree)adaptor.nil();

            // EsperEPL2Grammar.g:942:4: ( MAX | MIN )
            int alt121=2;
            int LA121_0 = input.LA(1);

            if ( (LA121_0==MAX) ) {
                alt121=1;
            }
            else if ( (LA121_0==MIN) ) {
                alt121=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 121, 0, input);

                throw nvae;
            }
            switch (alt121) {
                case 1 :
                    // EsperEPL2Grammar.g:942:5: MAX
                    {
                    MAX362=(Token)match(input,MAX,FOLLOW_MAX_in_maxFunc5518); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MAX362_tree = (CommonTree)adaptor.create(MAX362);
                    root_0 = (CommonTree)adaptor.becomeRoot(MAX362_tree, root_0);
                    }

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:942:12: MIN
                    {
                    MIN363=(Token)match(input,MIN,FOLLOW_MIN_in_maxFunc5523); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MIN363_tree = (CommonTree)adaptor.create(MIN363);
                    root_0 = (CommonTree)adaptor.becomeRoot(MIN363_tree, root_0);
                    }

                    }
                    break;

            }

            LPAREN364=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_maxFunc5527); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_maxFunc5530);
            expression365=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression365.getTree());
            // EsperEPL2Grammar.g:942:37: ( COMMA expression ( COMMA expression )* )?
            int alt123=2;
            int LA123_0 = input.LA(1);

            if ( (LA123_0==COMMA) ) {
                alt123=1;
            }
            switch (alt123) {
                case 1 :
                    // EsperEPL2Grammar.g:942:38: COMMA expression ( COMMA expression )*
                    {
                    COMMA366=(Token)match(input,COMMA,FOLLOW_COMMA_in_maxFunc5533); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_maxFunc5536);
                    expression367=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression367.getTree());
                    // EsperEPL2Grammar.g:942:56: ( COMMA expression )*
                    loop122:
                    do {
                        int alt122=2;
                        int LA122_0 = input.LA(1);

                        if ( (LA122_0==COMMA) ) {
                            alt122=1;
                        }


                        switch (alt122) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:942:57: COMMA expression
                    	    {
                    	    COMMA368=(Token)match(input,COMMA,FOLLOW_COMMA_in_maxFunc5539); if (state.failed) return retval;
                    	    pushFollow(FOLLOW_expression_in_maxFunc5542);
                    	    expression369=expression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression369.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop122;
                        }
                    } while (true);


                    }
                    break;

            }

            RPAREN370=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_maxFunc5549); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "maxFunc"

    public static class eventPropertyOrLibFunction_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "eventPropertyOrLibFunction"
    // EsperEPL2Grammar.g:945:1: eventPropertyOrLibFunction : ( ( eventProperty )=> eventProperty | libFunction );
    public final EsperEPL2GrammarParser.eventPropertyOrLibFunction_return eventPropertyOrLibFunction() throws RecognitionException {
        EsperEPL2GrammarParser.eventPropertyOrLibFunction_return retval = new EsperEPL2GrammarParser.eventPropertyOrLibFunction_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.eventProperty_return eventProperty371 = null;

        EsperEPL2GrammarParser.libFunction_return libFunction372 = null;



        try {
            // EsperEPL2Grammar.g:946:2: ( ( eventProperty )=> eventProperty | libFunction )
            int alt124=2;
            alt124 = dfa124.predict(input);
            switch (alt124) {
                case 1 :
                    // EsperEPL2Grammar.g:946:4: ( eventProperty )=> eventProperty
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_eventProperty_in_eventPropertyOrLibFunction5568);
                    eventProperty371=eventProperty();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty371.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:947:4: libFunction
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_libFunction_in_eventPropertyOrLibFunction5573);
                    libFunction372=libFunction();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, libFunction372.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "eventPropertyOrLibFunction"

    public static class libFunction_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "libFunction"
    // EsperEPL2Grammar.g:950:1: libFunction : ( classIdentifierNonGreedy DOT )? funcIdent LPAREN ( libFunctionArgs )? RPAREN -> ^( LIB_FUNCTION ( classIdentifierNonGreedy )? funcIdent ( libFunctionArgs )? ) ;
    public final EsperEPL2GrammarParser.libFunction_return libFunction() throws RecognitionException {
        EsperEPL2GrammarParser.libFunction_return retval = new EsperEPL2GrammarParser.libFunction_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token DOT374=null;
        Token LPAREN376=null;
        Token RPAREN378=null;
        EsperEPL2GrammarParser.classIdentifierNonGreedy_return classIdentifierNonGreedy373 = null;

        EsperEPL2GrammarParser.funcIdent_return funcIdent375 = null;

        EsperEPL2GrammarParser.libFunctionArgs_return libFunctionArgs377 = null;


        CommonTree DOT374_tree=null;
        CommonTree LPAREN376_tree=null;
        CommonTree RPAREN378_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_libFunctionArgs=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionArgs");
        RewriteRuleSubtreeStream stream_classIdentifierNonGreedy=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifierNonGreedy");
        RewriteRuleSubtreeStream stream_funcIdent=new RewriteRuleSubtreeStream(adaptor,"rule funcIdent");
        try {
            // EsperEPL2Grammar.g:951:2: ( ( classIdentifierNonGreedy DOT )? funcIdent LPAREN ( libFunctionArgs )? RPAREN -> ^( LIB_FUNCTION ( classIdentifierNonGreedy )? funcIdent ( libFunctionArgs )? ) )
            // EsperEPL2Grammar.g:951:4: ( classIdentifierNonGreedy DOT )? funcIdent LPAREN ( libFunctionArgs )? RPAREN
            {
            // EsperEPL2Grammar.g:951:4: ( classIdentifierNonGreedy DOT )?
            int alt125=2;
            int LA125_0 = input.LA(1);

            if ( (LA125_0==IDENT) ) {
                int LA125_1 = input.LA(2);

                if ( (LA125_1==DOT) ) {
                    alt125=1;
                }
            }
            switch (alt125) {
                case 1 :
                    // EsperEPL2Grammar.g:951:5: classIdentifierNonGreedy DOT
                    {
                    pushFollow(FOLLOW_classIdentifierNonGreedy_in_libFunction5586);
                    classIdentifierNonGreedy373=classIdentifierNonGreedy();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_classIdentifierNonGreedy.add(classIdentifierNonGreedy373.getTree());
                    DOT374=(Token)match(input,DOT,FOLLOW_DOT_in_libFunction5588); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT374);


                    }
                    break;

            }

            pushFollow(FOLLOW_funcIdent_in_libFunction5592);
            funcIdent375=funcIdent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_funcIdent.add(funcIdent375.getTree());
            LPAREN376=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_libFunction5594); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN376);

            // EsperEPL2Grammar.g:951:53: ( libFunctionArgs )?
            int alt126=2;
            int LA126_0 = input.LA(1);

            if ( (LA126_0==WINDOW||LA126_0==ESCAPE||(LA126_0>=NOT_EXPR && LA126_0<=EVERY_EXPR)||(LA126_0>=SUM && LA126_0<=COUNT)||LA126_0==CASE||LA126_0==OUTER||(LA126_0>=JOIN && LA126_0<=FULL)||(LA126_0>=DISTINCT && LA126_0<=ALL)||(LA126_0>=EVENTS && LA126_0<=LAST)||(LA126_0>=UNIDIRECTIONAL && LA126_0<=CURRENT_TIMESTAMP)||LA126_0==SNAPSHOT||(LA126_0>=VARIABLE && LA126_0<=AT)||(LA126_0>=BOOLEAN_TRUE && LA126_0<=VALUE_NULL)||LA126_0==NUM_DOUBLE||LA126_0==IDENT||LA126_0==LPAREN||(LA126_0>=STRING_LITERAL && LA126_0<=QUOTED_STRING_LITERAL)||(LA126_0>=PLUS && LA126_0<=MINUS)||LA126_0==LCURLY||LA126_0==NUM_INT||LA126_0==QUESTION||(LA126_0>=NUM_LONG && LA126_0<=NUM_FLOAT)) ) {
                alt126=1;
            }
            switch (alt126) {
                case 1 :
                    // EsperEPL2Grammar.g:951:54: libFunctionArgs
                    {
                    pushFollow(FOLLOW_libFunctionArgs_in_libFunction5597);
                    libFunctionArgs377=libFunctionArgs();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_libFunctionArgs.add(libFunctionArgs377.getTree());

                    }
                    break;

            }

            RPAREN378=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_libFunction5601); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN378);



            // AST REWRITE
            // elements: classIdentifierNonGreedy, funcIdent, libFunctionArgs
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 952:4: -> ^( LIB_FUNCTION ( classIdentifierNonGreedy )? funcIdent ( libFunctionArgs )? )
            {
                // EsperEPL2Grammar.g:952:7: ^( LIB_FUNCTION ( classIdentifierNonGreedy )? funcIdent ( libFunctionArgs )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LIB_FUNCTION, "LIB_FUNCTION"), root_1);

                // EsperEPL2Grammar.g:952:22: ( classIdentifierNonGreedy )?
                if ( stream_classIdentifierNonGreedy.hasNext() ) {
                    adaptor.addChild(root_1, stream_classIdentifierNonGreedy.nextTree());

                }
                stream_classIdentifierNonGreedy.reset();
                adaptor.addChild(root_1, stream_funcIdent.nextTree());
                // EsperEPL2Grammar.g:952:58: ( libFunctionArgs )?
                if ( stream_libFunctionArgs.hasNext() ) {
                    adaptor.addChild(root_1, stream_libFunctionArgs.nextTree());

                }
                stream_libFunctionArgs.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "libFunction"

    public static class funcIdent_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "funcIdent"
    // EsperEPL2Grammar.g:955:1: funcIdent : ( IDENT | max= MAX -> IDENT[$max] | min= MIN -> IDENT[$min] );
    public final EsperEPL2GrammarParser.funcIdent_return funcIdent() throws RecognitionException {
        EsperEPL2GrammarParser.funcIdent_return retval = new EsperEPL2GrammarParser.funcIdent_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token max=null;
        Token min=null;
        Token IDENT379=null;

        CommonTree max_tree=null;
        CommonTree min_tree=null;
        CommonTree IDENT379_tree=null;
        RewriteRuleTokenStream stream_MAX=new RewriteRuleTokenStream(adaptor,"token MAX");
        RewriteRuleTokenStream stream_MIN=new RewriteRuleTokenStream(adaptor,"token MIN");

        try {
            // EsperEPL2Grammar.g:956:2: ( IDENT | max= MAX -> IDENT[$max] | min= MIN -> IDENT[$min] )
            int alt127=3;
            switch ( input.LA(1) ) {
            case IDENT:
                {
                alt127=1;
                }
                break;
            case MAX:
                {
                alt127=2;
                }
                break;
            case MIN:
                {
                alt127=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 127, 0, input);

                throw nvae;
            }

            switch (alt127) {
                case 1 :
                    // EsperEPL2Grammar.g:956:4: IDENT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    IDENT379=(Token)match(input,IDENT,FOLLOW_IDENT_in_funcIdent5631); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IDENT379_tree = (CommonTree)adaptor.create(IDENT379);
                    adaptor.addChild(root_0, IDENT379_tree);
                    }

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:957:4: max= MAX
                    {
                    max=(Token)match(input,MAX,FOLLOW_MAX_in_funcIdent5638); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MAX.add(max);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 957:12: -> IDENT[$max]
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(IDENT, max));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:958:4: min= MIN
                    {
                    min=(Token)match(input,MIN,FOLLOW_MIN_in_funcIdent5650); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MIN.add(min);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 958:12: -> IDENT[$min]
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(IDENT, min));

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "funcIdent"

    public static class libFunctionArgs_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "libFunctionArgs"
    // EsperEPL2Grammar.g:961:1: libFunctionArgs : ( ALL | DISTINCT )? expression ( COMMA expression )* ;
    public final EsperEPL2GrammarParser.libFunctionArgs_return libFunctionArgs() throws RecognitionException {
        EsperEPL2GrammarParser.libFunctionArgs_return retval = new EsperEPL2GrammarParser.libFunctionArgs_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token ALL380=null;
        Token DISTINCT381=null;
        Token COMMA383=null;
        EsperEPL2GrammarParser.expression_return expression382 = null;

        EsperEPL2GrammarParser.expression_return expression384 = null;


        CommonTree ALL380_tree=null;
        CommonTree DISTINCT381_tree=null;
        CommonTree COMMA383_tree=null;

        try {
            // EsperEPL2Grammar.g:962:2: ( ( ALL | DISTINCT )? expression ( COMMA expression )* )
            // EsperEPL2Grammar.g:962:4: ( ALL | DISTINCT )? expression ( COMMA expression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            // EsperEPL2Grammar.g:962:4: ( ALL | DISTINCT )?
            int alt128=3;
            int LA128_0 = input.LA(1);

            if ( (LA128_0==ALL) ) {
                alt128=1;
            }
            else if ( (LA128_0==DISTINCT) ) {
                alt128=2;
            }
            switch (alt128) {
                case 1 :
                    // EsperEPL2Grammar.g:962:5: ALL
                    {
                    ALL380=(Token)match(input,ALL,FOLLOW_ALL_in_libFunctionArgs5668); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:962:12: DISTINCT
                    {
                    DISTINCT381=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_libFunctionArgs5673); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DISTINCT381_tree = (CommonTree)adaptor.create(DISTINCT381);
                    adaptor.addChild(root_0, DISTINCT381_tree);
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_expression_in_libFunctionArgs5677);
            expression382=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression382.getTree());
            // EsperEPL2Grammar.g:962:34: ( COMMA expression )*
            loop129:
            do {
                int alt129=2;
                int LA129_0 = input.LA(1);

                if ( (LA129_0==COMMA) ) {
                    alt129=1;
                }


                switch (alt129) {
            	case 1 :
            	    // EsperEPL2Grammar.g:962:35: COMMA expression
            	    {
            	    COMMA383=(Token)match(input,COMMA,FOLLOW_COMMA_in_libFunctionArgs5680); if (state.failed) return retval;
            	    pushFollow(FOLLOW_expression_in_libFunctionArgs5683);
            	    expression384=expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression384.getTree());

            	    }
            	    break;

            	default :
            	    break loop129;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "libFunctionArgs"

    public static class betweenList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "betweenList"
    // EsperEPL2Grammar.g:965:1: betweenList : concatenationExpr AND_EXPR concatenationExpr ;
    public final EsperEPL2GrammarParser.betweenList_return betweenList() throws RecognitionException {
        EsperEPL2GrammarParser.betweenList_return retval = new EsperEPL2GrammarParser.betweenList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token AND_EXPR386=null;
        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr385 = null;

        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr387 = null;


        CommonTree AND_EXPR386_tree=null;

        try {
            // EsperEPL2Grammar.g:966:2: ( concatenationExpr AND_EXPR concatenationExpr )
            // EsperEPL2Grammar.g:966:4: concatenationExpr AND_EXPR concatenationExpr
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_concatenationExpr_in_betweenList5697);
            concatenationExpr385=concatenationExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, concatenationExpr385.getTree());
            AND_EXPR386=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_betweenList5699); if (state.failed) return retval;
            pushFollow(FOLLOW_concatenationExpr_in_betweenList5702);
            concatenationExpr387=concatenationExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, concatenationExpr387.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "betweenList"

    public static class patternExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "patternExpression"
    // EsperEPL2Grammar.g:975:1: patternExpression : followedByExpression ;
    public final EsperEPL2GrammarParser.patternExpression_return patternExpression() throws RecognitionException {
        EsperEPL2GrammarParser.patternExpression_return retval = new EsperEPL2GrammarParser.patternExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.followedByExpression_return followedByExpression388 = null;



         paraphrases.push("pattern expression"); 
        try {
            // EsperEPL2Grammar.g:978:2: ( followedByExpression )
            // EsperEPL2Grammar.g:978:4: followedByExpression
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_followedByExpression_in_patternExpression5730);
            followedByExpression388=followedByExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, followedByExpression388.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "patternExpression"

    public static class followedByExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "followedByExpression"
    // EsperEPL2Grammar.g:981:1: followedByExpression : orExpression (f= FOLLOWED_BY orExpression )* -> {$f != null}? ^( FOLLOWED_BY_EXPR ( orExpression )+ ) -> orExpression ;
    public final EsperEPL2GrammarParser.followedByExpression_return followedByExpression() throws RecognitionException {
        EsperEPL2GrammarParser.followedByExpression_return retval = new EsperEPL2GrammarParser.followedByExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token f=null;
        EsperEPL2GrammarParser.orExpression_return orExpression389 = null;

        EsperEPL2GrammarParser.orExpression_return orExpression390 = null;


        CommonTree f_tree=null;
        RewriteRuleTokenStream stream_FOLLOWED_BY=new RewriteRuleTokenStream(adaptor,"token FOLLOWED_BY");
        RewriteRuleSubtreeStream stream_orExpression=new RewriteRuleSubtreeStream(adaptor,"rule orExpression");
        try {
            // EsperEPL2Grammar.g:982:2: ( orExpression (f= FOLLOWED_BY orExpression )* -> {$f != null}? ^( FOLLOWED_BY_EXPR ( orExpression )+ ) -> orExpression )
            // EsperEPL2Grammar.g:982:4: orExpression (f= FOLLOWED_BY orExpression )*
            {
            pushFollow(FOLLOW_orExpression_in_followedByExpression5742);
            orExpression389=orExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_orExpression.add(orExpression389.getTree());
            // EsperEPL2Grammar.g:982:17: (f= FOLLOWED_BY orExpression )*
            loop130:
            do {
                int alt130=2;
                int LA130_0 = input.LA(1);

                if ( (LA130_0==FOLLOWED_BY) ) {
                    alt130=1;
                }


                switch (alt130) {
            	case 1 :
            	    // EsperEPL2Grammar.g:982:18: f= FOLLOWED_BY orExpression
            	    {
            	    f=(Token)match(input,FOLLOWED_BY,FOLLOW_FOLLOWED_BY_in_followedByExpression5747); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_FOLLOWED_BY.add(f);

            	    pushFollow(FOLLOW_orExpression_in_followedByExpression5749);
            	    orExpression390=orExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_orExpression.add(orExpression390.getTree());

            	    }
            	    break;

            	default :
            	    break loop130;
                }
            } while (true);



            // AST REWRITE
            // elements: orExpression, orExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 983:6: -> {$f != null}? ^( FOLLOWED_BY_EXPR ( orExpression )+ )
            if (f != null) {
                // EsperEPL2Grammar.g:983:23: ^( FOLLOWED_BY_EXPR ( orExpression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FOLLOWED_BY_EXPR, "FOLLOWED_BY_EXPR"), root_1);

                if ( !(stream_orExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_orExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_orExpression.nextTree());

                }
                stream_orExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 984:6: -> orExpression
            {
                adaptor.addChild(root_0, stream_orExpression.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "followedByExpression"

    public static class orExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "orExpression"
    // EsperEPL2Grammar.g:987:1: orExpression : andExpression (o= OR_EXPR andExpression )* -> {$o != null}? ^( OR_EXPR ( andExpression )+ ) -> andExpression ;
    public final EsperEPL2GrammarParser.orExpression_return orExpression() throws RecognitionException {
        EsperEPL2GrammarParser.orExpression_return retval = new EsperEPL2GrammarParser.orExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token o=null;
        EsperEPL2GrammarParser.andExpression_return andExpression391 = null;

        EsperEPL2GrammarParser.andExpression_return andExpression392 = null;


        CommonTree o_tree=null;
        RewriteRuleTokenStream stream_OR_EXPR=new RewriteRuleTokenStream(adaptor,"token OR_EXPR");
        RewriteRuleSubtreeStream stream_andExpression=new RewriteRuleSubtreeStream(adaptor,"rule andExpression");
        try {
            // EsperEPL2Grammar.g:988:2: ( andExpression (o= OR_EXPR andExpression )* -> {$o != null}? ^( OR_EXPR ( andExpression )+ ) -> andExpression )
            // EsperEPL2Grammar.g:988:4: andExpression (o= OR_EXPR andExpression )*
            {
            pushFollow(FOLLOW_andExpression_in_orExpression5788);
            andExpression391=andExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_andExpression.add(andExpression391.getTree());
            // EsperEPL2Grammar.g:988:18: (o= OR_EXPR andExpression )*
            loop131:
            do {
                int alt131=2;
                int LA131_0 = input.LA(1);

                if ( (LA131_0==OR_EXPR) ) {
                    alt131=1;
                }


                switch (alt131) {
            	case 1 :
            	    // EsperEPL2Grammar.g:988:19: o= OR_EXPR andExpression
            	    {
            	    o=(Token)match(input,OR_EXPR,FOLLOW_OR_EXPR_in_orExpression5793); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_OR_EXPR.add(o);

            	    pushFollow(FOLLOW_andExpression_in_orExpression5795);
            	    andExpression392=andExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_andExpression.add(andExpression392.getTree());

            	    }
            	    break;

            	default :
            	    break loop131;
                }
            } while (true);



            // AST REWRITE
            // elements: andExpression, andExpression, OR_EXPR
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 989:3: -> {$o != null}? ^( OR_EXPR ( andExpression )+ )
            if (o != null) {
                // EsperEPL2Grammar.g:989:20: ^( OR_EXPR ( andExpression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_OR_EXPR.nextNode(), root_1);

                if ( !(stream_andExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_andExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_andExpression.nextTree());

                }
                stream_andExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 990:3: -> andExpression
            {
                adaptor.addChild(root_0, stream_andExpression.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "orExpression"

    public static class andExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "andExpression"
    // EsperEPL2Grammar.g:993:1: andExpression : matchUntilExpression (a= AND_EXPR matchUntilExpression )* -> {$a != null}? ^( AND_EXPR ( matchUntilExpression )+ ) -> matchUntilExpression ;
    public final EsperEPL2GrammarParser.andExpression_return andExpression() throws RecognitionException {
        EsperEPL2GrammarParser.andExpression_return retval = new EsperEPL2GrammarParser.andExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token a=null;
        EsperEPL2GrammarParser.matchUntilExpression_return matchUntilExpression393 = null;

        EsperEPL2GrammarParser.matchUntilExpression_return matchUntilExpression394 = null;


        CommonTree a_tree=null;
        RewriteRuleTokenStream stream_AND_EXPR=new RewriteRuleTokenStream(adaptor,"token AND_EXPR");
        RewriteRuleSubtreeStream stream_matchUntilExpression=new RewriteRuleSubtreeStream(adaptor,"rule matchUntilExpression");
        try {
            // EsperEPL2Grammar.g:994:2: ( matchUntilExpression (a= AND_EXPR matchUntilExpression )* -> {$a != null}? ^( AND_EXPR ( matchUntilExpression )+ ) -> matchUntilExpression )
            // EsperEPL2Grammar.g:994:4: matchUntilExpression (a= AND_EXPR matchUntilExpression )*
            {
            pushFollow(FOLLOW_matchUntilExpression_in_andExpression5827);
            matchUntilExpression393=matchUntilExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchUntilExpression.add(matchUntilExpression393.getTree());
            // EsperEPL2Grammar.g:994:25: (a= AND_EXPR matchUntilExpression )*
            loop132:
            do {
                int alt132=2;
                int LA132_0 = input.LA(1);

                if ( (LA132_0==AND_EXPR) ) {
                    alt132=1;
                }


                switch (alt132) {
            	case 1 :
            	    // EsperEPL2Grammar.g:994:26: a= AND_EXPR matchUntilExpression
            	    {
            	    a=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_andExpression5832); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_AND_EXPR.add(a);

            	    pushFollow(FOLLOW_matchUntilExpression_in_andExpression5834);
            	    matchUntilExpression394=matchUntilExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_matchUntilExpression.add(matchUntilExpression394.getTree());

            	    }
            	    break;

            	default :
            	    break loop132;
                }
            } while (true);



            // AST REWRITE
            // elements: AND_EXPR, matchUntilExpression, matchUntilExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 995:3: -> {$a != null}? ^( AND_EXPR ( matchUntilExpression )+ )
            if (a != null) {
                // EsperEPL2Grammar.g:995:20: ^( AND_EXPR ( matchUntilExpression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_AND_EXPR.nextNode(), root_1);

                if ( !(stream_matchUntilExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_matchUntilExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchUntilExpression.nextTree());

                }
                stream_matchUntilExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 996:3: -> matchUntilExpression
            {
                adaptor.addChild(root_0, stream_matchUntilExpression.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "andExpression"

    public static class matchUntilExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchUntilExpression"
    // EsperEPL2Grammar.g:999:1: matchUntilExpression : (r= matchUntilRange )? qualifyExpression (a= UNTIL qualifyExpression )? -> {r != null && a != null}? ^( MATCH_UNTIL_EXPR matchUntilRange ( qualifyExpression )+ ) -> {r != null && a == null}? ^( MATCH_UNTIL_EXPR matchUntilRange qualifyExpression ) -> {$a != null}? ^( MATCH_UNTIL_EXPR ( qualifyExpression )+ ) -> qualifyExpression ;
    public final EsperEPL2GrammarParser.matchUntilExpression_return matchUntilExpression() throws RecognitionException {
        EsperEPL2GrammarParser.matchUntilExpression_return retval = new EsperEPL2GrammarParser.matchUntilExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token a=null;
        EsperEPL2GrammarParser.matchUntilRange_return r = null;

        EsperEPL2GrammarParser.qualifyExpression_return qualifyExpression395 = null;

        EsperEPL2GrammarParser.qualifyExpression_return qualifyExpression396 = null;


        CommonTree a_tree=null;
        RewriteRuleTokenStream stream_UNTIL=new RewriteRuleTokenStream(adaptor,"token UNTIL");
        RewriteRuleSubtreeStream stream_qualifyExpression=new RewriteRuleSubtreeStream(adaptor,"rule qualifyExpression");
        RewriteRuleSubtreeStream stream_matchUntilRange=new RewriteRuleSubtreeStream(adaptor,"rule matchUntilRange");
        try {
            // EsperEPL2Grammar.g:1000:2: ( (r= matchUntilRange )? qualifyExpression (a= UNTIL qualifyExpression )? -> {r != null && a != null}? ^( MATCH_UNTIL_EXPR matchUntilRange ( qualifyExpression )+ ) -> {r != null && a == null}? ^( MATCH_UNTIL_EXPR matchUntilRange qualifyExpression ) -> {$a != null}? ^( MATCH_UNTIL_EXPR ( qualifyExpression )+ ) -> qualifyExpression )
            // EsperEPL2Grammar.g:1000:4: (r= matchUntilRange )? qualifyExpression (a= UNTIL qualifyExpression )?
            {
            // EsperEPL2Grammar.g:1000:4: (r= matchUntilRange )?
            int alt133=2;
            int LA133_0 = input.LA(1);

            if ( (LA133_0==LBRACK) ) {
                alt133=1;
            }
            switch (alt133) {
                case 1 :
                    // EsperEPL2Grammar.g:1000:5: r= matchUntilRange
                    {
                    pushFollow(FOLLOW_matchUntilRange_in_matchUntilExpression5869);
                    r=matchUntilRange();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_matchUntilRange.add(r.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_qualifyExpression_in_matchUntilExpression5873);
            qualifyExpression395=qualifyExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_qualifyExpression.add(qualifyExpression395.getTree());
            // EsperEPL2Grammar.g:1000:43: (a= UNTIL qualifyExpression )?
            int alt134=2;
            int LA134_0 = input.LA(1);

            if ( (LA134_0==UNTIL) ) {
                alt134=1;
            }
            switch (alt134) {
                case 1 :
                    // EsperEPL2Grammar.g:1000:44: a= UNTIL qualifyExpression
                    {
                    a=(Token)match(input,UNTIL,FOLLOW_UNTIL_in_matchUntilExpression5878); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_UNTIL.add(a);

                    pushFollow(FOLLOW_qualifyExpression_in_matchUntilExpression5880);
                    qualifyExpression396=qualifyExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_qualifyExpression.add(qualifyExpression396.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: matchUntilRange, matchUntilRange, qualifyExpression, qualifyExpression, qualifyExpression, qualifyExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1001:3: -> {r != null && a != null}? ^( MATCH_UNTIL_EXPR matchUntilRange ( qualifyExpression )+ )
            if (r != null && a != null) {
                // EsperEPL2Grammar.g:1001:32: ^( MATCH_UNTIL_EXPR matchUntilRange ( qualifyExpression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_1);

                adaptor.addChild(root_1, stream_matchUntilRange.nextTree());
                if ( !(stream_qualifyExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_qualifyExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_qualifyExpression.nextTree());

                }
                stream_qualifyExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1002:3: -> {r != null && a == null}? ^( MATCH_UNTIL_EXPR matchUntilRange qualifyExpression )
            if (r != null && a == null) {
                // EsperEPL2Grammar.g:1002:32: ^( MATCH_UNTIL_EXPR matchUntilRange qualifyExpression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_1);

                adaptor.addChild(root_1, stream_matchUntilRange.nextTree());
                adaptor.addChild(root_1, stream_qualifyExpression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1003:3: -> {$a != null}? ^( MATCH_UNTIL_EXPR ( qualifyExpression )+ )
            if (a != null) {
                // EsperEPL2Grammar.g:1003:20: ^( MATCH_UNTIL_EXPR ( qualifyExpression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_1);

                if ( !(stream_qualifyExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_qualifyExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_qualifyExpression.nextTree());

                }
                stream_qualifyExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1004:3: -> qualifyExpression
            {
                adaptor.addChild(root_0, stream_qualifyExpression.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchUntilExpression"

    public static class qualifyExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "qualifyExpression"
    // EsperEPL2Grammar.g:1007:1: qualifyExpression : ( EVERY_EXPR | NOT_EXPR )? guardPostFix ;
    public final EsperEPL2GrammarParser.qualifyExpression_return qualifyExpression() throws RecognitionException {
        EsperEPL2GrammarParser.qualifyExpression_return retval = new EsperEPL2GrammarParser.qualifyExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token EVERY_EXPR397=null;
        Token NOT_EXPR398=null;
        EsperEPL2GrammarParser.guardPostFix_return guardPostFix399 = null;


        CommonTree EVERY_EXPR397_tree=null;
        CommonTree NOT_EXPR398_tree=null;

        try {
            // EsperEPL2Grammar.g:1008:2: ( ( EVERY_EXPR | NOT_EXPR )? guardPostFix )
            // EsperEPL2Grammar.g:1008:4: ( EVERY_EXPR | NOT_EXPR )? guardPostFix
            {
            root_0 = (CommonTree)adaptor.nil();

            // EsperEPL2Grammar.g:1008:4: ( EVERY_EXPR | NOT_EXPR )?
            int alt135=3;
            int LA135_0 = input.LA(1);

            if ( (LA135_0==EVERY_EXPR) ) {
                alt135=1;
            }
            else if ( (LA135_0==NOT_EXPR) ) {
                alt135=2;
            }
            switch (alt135) {
                case 1 :
                    // EsperEPL2Grammar.g:1008:5: EVERY_EXPR
                    {
                    EVERY_EXPR397=(Token)match(input,EVERY_EXPR,FOLLOW_EVERY_EXPR_in_qualifyExpression5942); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EVERY_EXPR397_tree = (CommonTree)adaptor.create(EVERY_EXPR397);
                    root_0 = (CommonTree)adaptor.becomeRoot(EVERY_EXPR397_tree, root_0);
                    }

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1008:19: NOT_EXPR
                    {
                    NOT_EXPR398=(Token)match(input,NOT_EXPR,FOLLOW_NOT_EXPR_in_qualifyExpression5947); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NOT_EXPR398_tree = (CommonTree)adaptor.create(NOT_EXPR398);
                    root_0 = (CommonTree)adaptor.becomeRoot(NOT_EXPR398_tree, root_0);
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_guardPostFix_in_qualifyExpression5954);
            guardPostFix399=guardPostFix();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, guardPostFix399.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "qualifyExpression"

    public static class guardPostFix_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "guardPostFix"
    // EsperEPL2Grammar.g:1012:1: guardPostFix : ( atomicExpression | l= LPAREN patternExpression RPAREN ) (w= WHERE guardExpression )? -> {$w != null}? ^( GUARD_EXPR ( atomicExpression )? ( patternExpression )? guardExpression ) -> ( atomicExpression )? ( patternExpression )? ;
    public final EsperEPL2GrammarParser.guardPostFix_return guardPostFix() throws RecognitionException {
        EsperEPL2GrammarParser.guardPostFix_return retval = new EsperEPL2GrammarParser.guardPostFix_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token l=null;
        Token w=null;
        Token RPAREN402=null;
        EsperEPL2GrammarParser.atomicExpression_return atomicExpression400 = null;

        EsperEPL2GrammarParser.patternExpression_return patternExpression401 = null;

        EsperEPL2GrammarParser.guardExpression_return guardExpression403 = null;


        CommonTree l_tree=null;
        CommonTree w_tree=null;
        CommonTree RPAREN402_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_guardExpression=new RewriteRuleSubtreeStream(adaptor,"rule guardExpression");
        RewriteRuleSubtreeStream stream_atomicExpression=new RewriteRuleSubtreeStream(adaptor,"rule atomicExpression");
        RewriteRuleSubtreeStream stream_patternExpression=new RewriteRuleSubtreeStream(adaptor,"rule patternExpression");
        try {
            // EsperEPL2Grammar.g:1013:2: ( ( atomicExpression | l= LPAREN patternExpression RPAREN ) (w= WHERE guardExpression )? -> {$w != null}? ^( GUARD_EXPR ( atomicExpression )? ( patternExpression )? guardExpression ) -> ( atomicExpression )? ( patternExpression )? )
            // EsperEPL2Grammar.g:1013:4: ( atomicExpression | l= LPAREN patternExpression RPAREN ) (w= WHERE guardExpression )?
            {
            // EsperEPL2Grammar.g:1013:4: ( atomicExpression | l= LPAREN patternExpression RPAREN )
            int alt136=2;
            int LA136_0 = input.LA(1);

            if ( (LA136_0==IDENT) ) {
                alt136=1;
            }
            else if ( (LA136_0==LPAREN) ) {
                alt136=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 136, 0, input);

                throw nvae;
            }
            switch (alt136) {
                case 1 :
                    // EsperEPL2Grammar.g:1013:5: atomicExpression
                    {
                    pushFollow(FOLLOW_atomicExpression_in_guardPostFix5967);
                    atomicExpression400=atomicExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_atomicExpression.add(atomicExpression400.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1013:24: l= LPAREN patternExpression RPAREN
                    {
                    l=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_guardPostFix5973); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(l);

                    pushFollow(FOLLOW_patternExpression_in_guardPostFix5975);
                    patternExpression401=patternExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_patternExpression.add(patternExpression401.getTree());
                    RPAREN402=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_guardPostFix5977); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN402);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:1013:59: (w= WHERE guardExpression )?
            int alt137=2;
            int LA137_0 = input.LA(1);

            if ( (LA137_0==WHERE) ) {
                alt137=1;
            }
            switch (alt137) {
                case 1 :
                    // EsperEPL2Grammar.g:1013:60: w= WHERE guardExpression
                    {
                    w=(Token)match(input,WHERE,FOLLOW_WHERE_in_guardPostFix5983); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(w);

                    pushFollow(FOLLOW_guardExpression_in_guardPostFix5985);
                    guardExpression403=guardExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_guardExpression.add(guardExpression403.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: atomicExpression, guardExpression, patternExpression, patternExpression, atomicExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1014:3: -> {$w != null}? ^( GUARD_EXPR ( atomicExpression )? ( patternExpression )? guardExpression )
            if (w != null) {
                // EsperEPL2Grammar.g:1014:20: ^( GUARD_EXPR ( atomicExpression )? ( patternExpression )? guardExpression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GUARD_EXPR, "GUARD_EXPR"), root_1);

                // EsperEPL2Grammar.g:1014:33: ( atomicExpression )?
                if ( stream_atomicExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_atomicExpression.nextTree());

                }
                stream_atomicExpression.reset();
                // EsperEPL2Grammar.g:1014:51: ( patternExpression )?
                if ( stream_patternExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_patternExpression.nextTree());

                }
                stream_patternExpression.reset();
                adaptor.addChild(root_1, stream_guardExpression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1015:3: -> ( atomicExpression )? ( patternExpression )?
            {
                // EsperEPL2Grammar.g:1015:6: ( atomicExpression )?
                if ( stream_atomicExpression.hasNext() ) {
                    adaptor.addChild(root_0, stream_atomicExpression.nextTree());

                }
                stream_atomicExpression.reset();
                // EsperEPL2Grammar.g:1015:24: ( patternExpression )?
                if ( stream_patternExpression.hasNext() ) {
                    adaptor.addChild(root_0, stream_patternExpression.nextTree());

                }
                stream_patternExpression.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "guardPostFix"

    public static class atomicExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "atomicExpression"
    // EsperEPL2Grammar.g:1018:1: atomicExpression : ( observerExpression | eventFilterExpression );
    public final EsperEPL2GrammarParser.atomicExpression_return atomicExpression() throws RecognitionException {
        EsperEPL2GrammarParser.atomicExpression_return retval = new EsperEPL2GrammarParser.atomicExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.observerExpression_return observerExpression404 = null;

        EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression405 = null;



        try {
            // EsperEPL2Grammar.g:1019:2: ( observerExpression | eventFilterExpression )
            int alt138=2;
            int LA138_0 = input.LA(1);

            if ( (LA138_0==IDENT) ) {
                int LA138_1 = input.LA(2);

                if ( (LA138_1==COLON) ) {
                    alt138=1;
                }
                else if ( (LA138_1==EOF||(LA138_1>=OR_EXPR && LA138_1<=AND_EXPR)||LA138_1==WHERE||LA138_1==UNTIL||(LA138_1>=EQUALS && LA138_1<=RPAREN)||LA138_1==RBRACK||LA138_1==FOLLOWED_BY) ) {
                    alt138=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 138, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 138, 0, input);

                throw nvae;
            }
            switch (alt138) {
                case 1 :
                    // EsperEPL2Grammar.g:1019:4: observerExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_observerExpression_in_atomicExpression6027);
                    observerExpression404=observerExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, observerExpression404.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1019:25: eventFilterExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_eventFilterExpression_in_atomicExpression6031);
                    eventFilterExpression405=eventFilterExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, eventFilterExpression405.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "atomicExpression"

    public static class observerExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "observerExpression"
    // EsperEPL2Grammar.g:1022:1: observerExpression : ns= IDENT COLON (nm= IDENT | a= AT ) LPAREN ( expressionWithTimeList )? RPAREN -> {$a != null}? ^( OBSERVER_EXPR $ns ^( IDENT[$a.text] ) ( expressionWithTimeList )? ) -> ^( OBSERVER_EXPR $ns $nm ( expressionWithTimeList )? ) ;
    public final EsperEPL2GrammarParser.observerExpression_return observerExpression() throws RecognitionException {
        EsperEPL2GrammarParser.observerExpression_return retval = new EsperEPL2GrammarParser.observerExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token ns=null;
        Token nm=null;
        Token a=null;
        Token COLON406=null;
        Token LPAREN407=null;
        Token RPAREN409=null;
        EsperEPL2GrammarParser.expressionWithTimeList_return expressionWithTimeList408 = null;


        CommonTree ns_tree=null;
        CommonTree nm_tree=null;
        CommonTree a_tree=null;
        CommonTree COLON406_tree=null;
        CommonTree LPAREN407_tree=null;
        CommonTree RPAREN409_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_AT=new RewriteRuleTokenStream(adaptor,"token AT");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionWithTimeList=new RewriteRuleSubtreeStream(adaptor,"rule expressionWithTimeList");
        try {
            // EsperEPL2Grammar.g:1023:2: (ns= IDENT COLON (nm= IDENT | a= AT ) LPAREN ( expressionWithTimeList )? RPAREN -> {$a != null}? ^( OBSERVER_EXPR $ns ^( IDENT[$a.text] ) ( expressionWithTimeList )? ) -> ^( OBSERVER_EXPR $ns $nm ( expressionWithTimeList )? ) )
            // EsperEPL2Grammar.g:1023:4: ns= IDENT COLON (nm= IDENT | a= AT ) LPAREN ( expressionWithTimeList )? RPAREN
            {
            ns=(Token)match(input,IDENT,FOLLOW_IDENT_in_observerExpression6046); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(ns);

            COLON406=(Token)match(input,COLON,FOLLOW_COLON_in_observerExpression6048); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON406);

            // EsperEPL2Grammar.g:1023:19: (nm= IDENT | a= AT )
            int alt139=2;
            int LA139_0 = input.LA(1);

            if ( (LA139_0==IDENT) ) {
                alt139=1;
            }
            else if ( (LA139_0==AT) ) {
                alt139=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 139, 0, input);

                throw nvae;
            }
            switch (alt139) {
                case 1 :
                    // EsperEPL2Grammar.g:1023:20: nm= IDENT
                    {
                    nm=(Token)match(input,IDENT,FOLLOW_IDENT_in_observerExpression6053); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(nm);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1023:31: a= AT
                    {
                    a=(Token)match(input,AT,FOLLOW_AT_in_observerExpression6059); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AT.add(a);


                    }
                    break;

            }

            LPAREN407=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_observerExpression6062); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN407);

            // EsperEPL2Grammar.g:1023:44: ( expressionWithTimeList )?
            int alt140=2;
            int LA140_0 = input.LA(1);

            if ( (LA140_0==WINDOW||LA140_0==ESCAPE||(LA140_0>=NOT_EXPR && LA140_0<=EVERY_EXPR)||(LA140_0>=SUM && LA140_0<=COUNT)||LA140_0==CASE||LA140_0==OUTER||(LA140_0>=JOIN && LA140_0<=FULL)||(LA140_0>=EVENTS && LA140_0<=LAST)||(LA140_0>=UNIDIRECTIONAL && LA140_0<=CURRENT_TIMESTAMP)||LA140_0==SNAPSHOT||(LA140_0>=VARIABLE && LA140_0<=AT)||(LA140_0>=BOOLEAN_TRUE && LA140_0<=VALUE_NULL)||LA140_0==NUM_DOUBLE||LA140_0==IDENT||LA140_0==LPAREN||(LA140_0>=STAR && LA140_0<=LBRACK)||(LA140_0>=STRING_LITERAL && LA140_0<=QUOTED_STRING_LITERAL)||(LA140_0>=PLUS && LA140_0<=MINUS)||LA140_0==LCURLY||LA140_0==NUM_INT||LA140_0==QUESTION||(LA140_0>=NUM_LONG && LA140_0<=NUM_FLOAT)) ) {
                alt140=1;
            }
            switch (alt140) {
                case 1 :
                    // EsperEPL2Grammar.g:1023:44: expressionWithTimeList
                    {
                    pushFollow(FOLLOW_expressionWithTimeList_in_observerExpression6064);
                    expressionWithTimeList408=expressionWithTimeList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expressionWithTimeList.add(expressionWithTimeList408.getTree());

                    }
                    break;

            }

            RPAREN409=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_observerExpression6067); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN409);



            // AST REWRITE
            // elements: ns, nm, expressionWithTimeList, ns, expressionWithTimeList, IDENT
            // token labels: ns, nm
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_ns=new RewriteRuleTokenStream(adaptor,"token ns",ns);
            RewriteRuleTokenStream stream_nm=new RewriteRuleTokenStream(adaptor,"token nm",nm);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1024:3: -> {$a != null}? ^( OBSERVER_EXPR $ns ^( IDENT[$a.text] ) ( expressionWithTimeList )? )
            if (a != null) {
                // EsperEPL2Grammar.g:1024:20: ^( OBSERVER_EXPR $ns ^( IDENT[$a.text] ) ( expressionWithTimeList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(OBSERVER_EXPR, "OBSERVER_EXPR"), root_1);

                adaptor.addChild(root_1, stream_ns.nextNode());
                // EsperEPL2Grammar.g:1024:40: ^( IDENT[$a.text] )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IDENT, (a!=null?a.getText():null)), root_2);

                adaptor.addChild(root_1, root_2);
                }
                // EsperEPL2Grammar.g:1024:58: ( expressionWithTimeList )?
                if ( stream_expressionWithTimeList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionWithTimeList.nextTree());

                }
                stream_expressionWithTimeList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1025:3: -> ^( OBSERVER_EXPR $ns $nm ( expressionWithTimeList )? )
            {
                // EsperEPL2Grammar.g:1025:6: ^( OBSERVER_EXPR $ns $nm ( expressionWithTimeList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(OBSERVER_EXPR, "OBSERVER_EXPR"), root_1);

                adaptor.addChild(root_1, stream_ns.nextNode());
                adaptor.addChild(root_1, stream_nm.nextNode());
                // EsperEPL2Grammar.g:1025:30: ( expressionWithTimeList )?
                if ( stream_expressionWithTimeList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionWithTimeList.nextTree());

                }
                stream_expressionWithTimeList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "observerExpression"

    public static class guardExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "guardExpression"
    // EsperEPL2Grammar.g:1028:1: guardExpression : IDENT COLON IDENT LPAREN ( expressionWithTimeList )? RPAREN ;
    public final EsperEPL2GrammarParser.guardExpression_return guardExpression() throws RecognitionException {
        EsperEPL2GrammarParser.guardExpression_return retval = new EsperEPL2GrammarParser.guardExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token IDENT410=null;
        Token COLON411=null;
        Token IDENT412=null;
        Token LPAREN413=null;
        Token RPAREN415=null;
        EsperEPL2GrammarParser.expressionWithTimeList_return expressionWithTimeList414 = null;


        CommonTree IDENT410_tree=null;
        CommonTree COLON411_tree=null;
        CommonTree IDENT412_tree=null;
        CommonTree LPAREN413_tree=null;
        CommonTree RPAREN415_tree=null;

        try {
            // EsperEPL2Grammar.g:1029:2: ( IDENT COLON IDENT LPAREN ( expressionWithTimeList )? RPAREN )
            // EsperEPL2Grammar.g:1029:4: IDENT COLON IDENT LPAREN ( expressionWithTimeList )? RPAREN
            {
            root_0 = (CommonTree)adaptor.nil();

            IDENT410=(Token)match(input,IDENT,FOLLOW_IDENT_in_guardExpression6116); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IDENT410_tree = (CommonTree)adaptor.create(IDENT410);
            adaptor.addChild(root_0, IDENT410_tree);
            }
            COLON411=(Token)match(input,COLON,FOLLOW_COLON_in_guardExpression6118); if (state.failed) return retval;
            IDENT412=(Token)match(input,IDENT,FOLLOW_IDENT_in_guardExpression6121); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IDENT412_tree = (CommonTree)adaptor.create(IDENT412);
            adaptor.addChild(root_0, IDENT412_tree);
            }
            LPAREN413=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_guardExpression6123); if (state.failed) return retval;
            // EsperEPL2Grammar.g:1029:31: ( expressionWithTimeList )?
            int alt141=2;
            int LA141_0 = input.LA(1);

            if ( (LA141_0==WINDOW||LA141_0==ESCAPE||(LA141_0>=NOT_EXPR && LA141_0<=EVERY_EXPR)||(LA141_0>=SUM && LA141_0<=COUNT)||LA141_0==CASE||LA141_0==OUTER||(LA141_0>=JOIN && LA141_0<=FULL)||(LA141_0>=EVENTS && LA141_0<=LAST)||(LA141_0>=UNIDIRECTIONAL && LA141_0<=CURRENT_TIMESTAMP)||LA141_0==SNAPSHOT||(LA141_0>=VARIABLE && LA141_0<=AT)||(LA141_0>=BOOLEAN_TRUE && LA141_0<=VALUE_NULL)||LA141_0==NUM_DOUBLE||LA141_0==IDENT||LA141_0==LPAREN||(LA141_0>=STAR && LA141_0<=LBRACK)||(LA141_0>=STRING_LITERAL && LA141_0<=QUOTED_STRING_LITERAL)||(LA141_0>=PLUS && LA141_0<=MINUS)||LA141_0==LCURLY||LA141_0==NUM_INT||LA141_0==QUESTION||(LA141_0>=NUM_LONG && LA141_0<=NUM_FLOAT)) ) {
                alt141=1;
            }
            switch (alt141) {
                case 1 :
                    // EsperEPL2Grammar.g:1029:32: expressionWithTimeList
                    {
                    pushFollow(FOLLOW_expressionWithTimeList_in_guardExpression6127);
                    expressionWithTimeList414=expressionWithTimeList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionWithTimeList414.getTree());

                    }
                    break;

            }

            RPAREN415=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_guardExpression6131); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "guardExpression"

    public static class matchUntilRange_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchUntilRange"
    // EsperEPL2Grammar.g:1033:1: matchUntilRange : LBRACK (l= NUM_INT ( (d1= DOT DOT (r= NUM_INT )? ) | (c1= COLON r= NUM_INT ) )? | db= NUM_DOUBLE (d1= DOT (r= NUM_INT )? | db2= NUM_DOUBLE )? | DOT DOT r= NUM_INT | DOT db3= NUM_DOUBLE ) RBRACK -> {$l != null && d1 != null && r != null}? ^( MATCH_UNTIL_RANGE_CLOSED $l $r) -> {$l != null && d1 != null}? ^( MATCH_UNTIL_RANGE_HALFOPEN $l) -> {$l != null && c1 != null}? ^( MATCH_UNTIL_RANGE_CLOSED $l $r) -> {$l != null}? ^( MATCH_UNTIL_RANGE_BOUNDED $l) -> {$db != null && d1 != null && r != null}? ^( MATCH_UNTIL_RANGE_CLOSED $db $r) -> {$db != null && d1 != null}? ^( MATCH_UNTIL_RANGE_HALFOPEN $db) -> {$db != null && db2 != null}? ^( MATCH_UNTIL_RANGE_CLOSED $db $db2) -> {$db3 != null}? ^( MATCH_UNTIL_RANGE_HALFCLOSED $db3) -> {$r != null}? ^( MATCH_UNTIL_RANGE_HALFCLOSED $r) -> ^( MATCH_UNTIL_RANGE_HALFCLOSED $db) ;
    public final EsperEPL2GrammarParser.matchUntilRange_return matchUntilRange() throws RecognitionException {
        EsperEPL2GrammarParser.matchUntilRange_return retval = new EsperEPL2GrammarParser.matchUntilRange_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token l=null;
        Token d1=null;
        Token r=null;
        Token c1=null;
        Token db=null;
        Token db2=null;
        Token db3=null;
        Token LBRACK416=null;
        Token DOT417=null;
        Token DOT418=null;
        Token DOT419=null;
        Token DOT420=null;
        Token RBRACK421=null;

        CommonTree l_tree=null;
        CommonTree d1_tree=null;
        CommonTree r_tree=null;
        CommonTree c1_tree=null;
        CommonTree db_tree=null;
        CommonTree db2_tree=null;
        CommonTree db3_tree=null;
        CommonTree LBRACK416_tree=null;
        CommonTree DOT417_tree=null;
        CommonTree DOT418_tree=null;
        CommonTree DOT419_tree=null;
        CommonTree DOT420_tree=null;
        CommonTree RBRACK421_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_NUM_DOUBLE=new RewriteRuleTokenStream(adaptor,"token NUM_DOUBLE");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_NUM_INT=new RewriteRuleTokenStream(adaptor,"token NUM_INT");

        try {
            // EsperEPL2Grammar.g:1034:2: ( LBRACK (l= NUM_INT ( (d1= DOT DOT (r= NUM_INT )? ) | (c1= COLON r= NUM_INT ) )? | db= NUM_DOUBLE (d1= DOT (r= NUM_INT )? | db2= NUM_DOUBLE )? | DOT DOT r= NUM_INT | DOT db3= NUM_DOUBLE ) RBRACK -> {$l != null && d1 != null && r != null}? ^( MATCH_UNTIL_RANGE_CLOSED $l $r) -> {$l != null && d1 != null}? ^( MATCH_UNTIL_RANGE_HALFOPEN $l) -> {$l != null && c1 != null}? ^( MATCH_UNTIL_RANGE_CLOSED $l $r) -> {$l != null}? ^( MATCH_UNTIL_RANGE_BOUNDED $l) -> {$db != null && d1 != null && r != null}? ^( MATCH_UNTIL_RANGE_CLOSED $db $r) -> {$db != null && d1 != null}? ^( MATCH_UNTIL_RANGE_HALFOPEN $db) -> {$db != null && db2 != null}? ^( MATCH_UNTIL_RANGE_CLOSED $db $db2) -> {$db3 != null}? ^( MATCH_UNTIL_RANGE_HALFCLOSED $db3) -> {$r != null}? ^( MATCH_UNTIL_RANGE_HALFCLOSED $r) -> ^( MATCH_UNTIL_RANGE_HALFCLOSED $db) )
            // EsperEPL2Grammar.g:1034:4: LBRACK (l= NUM_INT ( (d1= DOT DOT (r= NUM_INT )? ) | (c1= COLON r= NUM_INT ) )? | db= NUM_DOUBLE (d1= DOT (r= NUM_INT )? | db2= NUM_DOUBLE )? | DOT DOT r= NUM_INT | DOT db3= NUM_DOUBLE ) RBRACK
            {
            LBRACK416=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_matchUntilRange6145); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK416);

            // EsperEPL2Grammar.g:1034:11: (l= NUM_INT ( (d1= DOT DOT (r= NUM_INT )? ) | (c1= COLON r= NUM_INT ) )? | db= NUM_DOUBLE (d1= DOT (r= NUM_INT )? | db2= NUM_DOUBLE )? | DOT DOT r= NUM_INT | DOT db3= NUM_DOUBLE )
            int alt146=4;
            switch ( input.LA(1) ) {
            case NUM_INT:
                {
                alt146=1;
                }
                break;
            case NUM_DOUBLE:
                {
                alt146=2;
                }
                break;
            case DOT:
                {
                int LA146_3 = input.LA(2);

                if ( (LA146_3==DOT) ) {
                    alt146=3;
                }
                else if ( (LA146_3==NUM_DOUBLE) ) {
                    alt146=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 146, 3, input);

                    throw nvae;
                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 146, 0, input);

                throw nvae;
            }

            switch (alt146) {
                case 1 :
                    // EsperEPL2Grammar.g:1035:4: l= NUM_INT ( (d1= DOT DOT (r= NUM_INT )? ) | (c1= COLON r= NUM_INT ) )?
                    {
                    l=(Token)match(input,NUM_INT,FOLLOW_NUM_INT_in_matchUntilRange6154); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_INT.add(l);

                    // EsperEPL2Grammar.g:1035:14: ( (d1= DOT DOT (r= NUM_INT )? ) | (c1= COLON r= NUM_INT ) )?
                    int alt143=3;
                    int LA143_0 = input.LA(1);

                    if ( (LA143_0==DOT) ) {
                        alt143=1;
                    }
                    else if ( (LA143_0==COLON) ) {
                        alt143=2;
                    }
                    switch (alt143) {
                        case 1 :
                            // EsperEPL2Grammar.g:1035:17: (d1= DOT DOT (r= NUM_INT )? )
                            {
                            // EsperEPL2Grammar.g:1035:17: (d1= DOT DOT (r= NUM_INT )? )
                            // EsperEPL2Grammar.g:1035:18: d1= DOT DOT (r= NUM_INT )?
                            {
                            d1=(Token)match(input,DOT,FOLLOW_DOT_in_matchUntilRange6162); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DOT.add(d1);

                            DOT417=(Token)match(input,DOT,FOLLOW_DOT_in_matchUntilRange6164); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DOT.add(DOT417);

                            // EsperEPL2Grammar.g:1035:30: (r= NUM_INT )?
                            int alt142=2;
                            int LA142_0 = input.LA(1);

                            if ( (LA142_0==NUM_INT) ) {
                                alt142=1;
                            }
                            switch (alt142) {
                                case 1 :
                                    // EsperEPL2Grammar.g:1035:30: r= NUM_INT
                                    {
                                    r=(Token)match(input,NUM_INT,FOLLOW_NUM_INT_in_matchUntilRange6168); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_NUM_INT.add(r);


                                    }
                                    break;

                            }


                            }


                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1036:17: (c1= COLON r= NUM_INT )
                            {
                            // EsperEPL2Grammar.g:1036:17: (c1= COLON r= NUM_INT )
                            // EsperEPL2Grammar.g:1036:18: c1= COLON r= NUM_INT
                            {
                            c1=(Token)match(input,COLON,FOLLOW_COLON_in_matchUntilRange6192); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COLON.add(c1);

                            r=(Token)match(input,NUM_INT,FOLLOW_NUM_INT_in_matchUntilRange6196); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NUM_INT.add(r);


                            }


                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1038:8: db= NUM_DOUBLE (d1= DOT (r= NUM_INT )? | db2= NUM_DOUBLE )?
                    {
                    db=(Token)match(input,NUM_DOUBLE,FOLLOW_NUM_DOUBLE_in_matchUntilRange6218); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_DOUBLE.add(db);

                    // EsperEPL2Grammar.g:1038:22: (d1= DOT (r= NUM_INT )? | db2= NUM_DOUBLE )?
                    int alt145=3;
                    int LA145_0 = input.LA(1);

                    if ( (LA145_0==DOT) ) {
                        alt145=1;
                    }
                    else if ( (LA145_0==NUM_DOUBLE) ) {
                        alt145=2;
                    }
                    switch (alt145) {
                        case 1 :
                            // EsperEPL2Grammar.g:1039:27: d1= DOT (r= NUM_INT )?
                            {
                            d1=(Token)match(input,DOT,FOLLOW_DOT_in_matchUntilRange6250); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DOT.add(d1);

                            // EsperEPL2Grammar.g:1039:35: (r= NUM_INT )?
                            int alt144=2;
                            int LA144_0 = input.LA(1);

                            if ( (LA144_0==NUM_INT) ) {
                                alt144=1;
                            }
                            switch (alt144) {
                                case 1 :
                                    // EsperEPL2Grammar.g:1039:35: r= NUM_INT
                                    {
                                    r=(Token)match(input,NUM_INT,FOLLOW_NUM_INT_in_matchUntilRange6254); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_NUM_INT.add(r);


                                    }
                                    break;

                            }


                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1041:27: db2= NUM_DOUBLE
                            {
                            db2=(Token)match(input,NUM_DOUBLE,FOLLOW_NUM_DOUBLE_in_matchUntilRange6314); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NUM_DOUBLE.add(db2);


                            }
                            break;

                    }


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1043:8: DOT DOT r= NUM_INT
                    {
                    DOT418=(Token)match(input,DOT,FOLLOW_DOT_in_matchUntilRange6351); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT418);

                    DOT419=(Token)match(input,DOT,FOLLOW_DOT_in_matchUntilRange6353); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT419);

                    r=(Token)match(input,NUM_INT,FOLLOW_NUM_INT_in_matchUntilRange6357); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_INT.add(r);


                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:1044:8: DOT db3= NUM_DOUBLE
                    {
                    DOT420=(Token)match(input,DOT,FOLLOW_DOT_in_matchUntilRange6366); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT420);

                    db3=(Token)match(input,NUM_DOUBLE,FOLLOW_NUM_DOUBLE_in_matchUntilRange6370); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_DOUBLE.add(db3);


                    }
                    break;

            }

            RBRACK421=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_matchUntilRange6381); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK421);



            // AST REWRITE
            // elements: r, l, l, db, db3, db, r, r, db, r, db, l, db2, l
            // token labels: db, r, l, db2, db3
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_db=new RewriteRuleTokenStream(adaptor,"token db",db);
            RewriteRuleTokenStream stream_r=new RewriteRuleTokenStream(adaptor,"token r",r);
            RewriteRuleTokenStream stream_l=new RewriteRuleTokenStream(adaptor,"token l",l);
            RewriteRuleTokenStream stream_db2=new RewriteRuleTokenStream(adaptor,"token db2",db2);
            RewriteRuleTokenStream stream_db3=new RewriteRuleTokenStream(adaptor,"token db3",db3);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1047:3: -> {$l != null && d1 != null && r != null}? ^( MATCH_UNTIL_RANGE_CLOSED $l $r)
            if (l != null && d1 != null && r != null) {
                // EsperEPL2Grammar.g:1047:47: ^( MATCH_UNTIL_RANGE_CLOSED $l $r)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_CLOSED, "MATCH_UNTIL_RANGE_CLOSED"), root_1);

                adaptor.addChild(root_1, stream_l.nextNode());
                adaptor.addChild(root_1, stream_r.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1048:3: -> {$l != null && d1 != null}? ^( MATCH_UNTIL_RANGE_HALFOPEN $l)
            if (l != null && d1 != null) {
                // EsperEPL2Grammar.g:1048:34: ^( MATCH_UNTIL_RANGE_HALFOPEN $l)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_HALFOPEN, "MATCH_UNTIL_RANGE_HALFOPEN"), root_1);

                adaptor.addChild(root_1, stream_l.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1049:3: -> {$l != null && c1 != null}? ^( MATCH_UNTIL_RANGE_CLOSED $l $r)
            if (l != null && c1 != null) {
                // EsperEPL2Grammar.g:1049:34: ^( MATCH_UNTIL_RANGE_CLOSED $l $r)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_CLOSED, "MATCH_UNTIL_RANGE_CLOSED"), root_1);

                adaptor.addChild(root_1, stream_l.nextNode());
                adaptor.addChild(root_1, stream_r.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1050:3: -> {$l != null}? ^( MATCH_UNTIL_RANGE_BOUNDED $l)
            if (l != null) {
                // EsperEPL2Grammar.g:1050:20: ^( MATCH_UNTIL_RANGE_BOUNDED $l)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_BOUNDED, "MATCH_UNTIL_RANGE_BOUNDED"), root_1);

                adaptor.addChild(root_1, stream_l.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1051:3: -> {$db != null && d1 != null && r != null}? ^( MATCH_UNTIL_RANGE_CLOSED $db $r)
            if (db != null && d1 != null && r != null) {
                // EsperEPL2Grammar.g:1051:48: ^( MATCH_UNTIL_RANGE_CLOSED $db $r)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_CLOSED, "MATCH_UNTIL_RANGE_CLOSED"), root_1);

                adaptor.addChild(root_1, stream_db.nextNode());
                adaptor.addChild(root_1, stream_r.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1052:3: -> {$db != null && d1 != null}? ^( MATCH_UNTIL_RANGE_HALFOPEN $db)
            if (db != null && d1 != null) {
                // EsperEPL2Grammar.g:1052:35: ^( MATCH_UNTIL_RANGE_HALFOPEN $db)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_HALFOPEN, "MATCH_UNTIL_RANGE_HALFOPEN"), root_1);

                adaptor.addChild(root_1, stream_db.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1053:3: -> {$db != null && db2 != null}? ^( MATCH_UNTIL_RANGE_CLOSED $db $db2)
            if (db != null && db2 != null) {
                // EsperEPL2Grammar.g:1053:36: ^( MATCH_UNTIL_RANGE_CLOSED $db $db2)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_CLOSED, "MATCH_UNTIL_RANGE_CLOSED"), root_1);

                adaptor.addChild(root_1, stream_db.nextNode());
                adaptor.addChild(root_1, stream_db2.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1054:3: -> {$db3 != null}? ^( MATCH_UNTIL_RANGE_HALFCLOSED $db3)
            if (db3 != null) {
                // EsperEPL2Grammar.g:1054:22: ^( MATCH_UNTIL_RANGE_HALFCLOSED $db3)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_HALFCLOSED, "MATCH_UNTIL_RANGE_HALFCLOSED"), root_1);

                adaptor.addChild(root_1, stream_db3.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1055:3: -> {$r != null}? ^( MATCH_UNTIL_RANGE_HALFCLOSED $r)
            if (r != null) {
                // EsperEPL2Grammar.g:1055:20: ^( MATCH_UNTIL_RANGE_HALFCLOSED $r)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_HALFCLOSED, "MATCH_UNTIL_RANGE_HALFCLOSED"), root_1);

                adaptor.addChild(root_1, stream_r.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1056:3: -> ^( MATCH_UNTIL_RANGE_HALFCLOSED $db)
            {
                // EsperEPL2Grammar.g:1056:6: ^( MATCH_UNTIL_RANGE_HALFCLOSED $db)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_HALFCLOSED, "MATCH_UNTIL_RANGE_HALFCLOSED"), root_1);

                adaptor.addChild(root_1, stream_db.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchUntilRange"

    public static class eventFilterExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "eventFilterExpression"
    // EsperEPL2Grammar.g:1064:1: eventFilterExpression : (i= IDENT EQUALS )? classIdentifier ( LPAREN ( expressionList )? RPAREN )? -> ^( EVENT_FILTER_EXPR ( $i)? classIdentifier ( expressionList )? ) ;
    public final EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression() throws RecognitionException {
        EsperEPL2GrammarParser.eventFilterExpression_return retval = new EsperEPL2GrammarParser.eventFilterExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token EQUALS422=null;
        Token LPAREN424=null;
        Token RPAREN426=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier423 = null;

        EsperEPL2GrammarParser.expressionList_return expressionList425 = null;


        CommonTree i_tree=null;
        CommonTree EQUALS422_tree=null;
        CommonTree LPAREN424_tree=null;
        CommonTree RPAREN426_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
         paraphrases.push("filter specification"); 
        try {
            // EsperEPL2Grammar.g:1067:5: ( (i= IDENT EQUALS )? classIdentifier ( LPAREN ( expressionList )? RPAREN )? -> ^( EVENT_FILTER_EXPR ( $i)? classIdentifier ( expressionList )? ) )
            // EsperEPL2Grammar.g:1067:9: (i= IDENT EQUALS )? classIdentifier ( LPAREN ( expressionList )? RPAREN )?
            {
            // EsperEPL2Grammar.g:1067:9: (i= IDENT EQUALS )?
            int alt147=2;
            int LA147_0 = input.LA(1);

            if ( (LA147_0==IDENT) ) {
                int LA147_1 = input.LA(2);

                if ( (LA147_1==EQUALS) ) {
                    alt147=1;
                }
            }
            switch (alt147) {
                case 1 :
                    // EsperEPL2Grammar.g:1067:10: i= IDENT EQUALS
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_eventFilterExpression6566); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);

                    EQUALS422=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_eventFilterExpression6568); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS422);


                    }
                    break;

            }

            pushFollow(FOLLOW_classIdentifier_in_eventFilterExpression6577);
            classIdentifier423=classIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier423.getTree());
            // EsperEPL2Grammar.g:1069:9: ( LPAREN ( expressionList )? RPAREN )?
            int alt149=2;
            int LA149_0 = input.LA(1);

            if ( (LA149_0==LPAREN) ) {
                alt149=1;
            }
            switch (alt149) {
                case 1 :
                    // EsperEPL2Grammar.g:1069:10: LPAREN ( expressionList )? RPAREN
                    {
                    LPAREN424=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_eventFilterExpression6588); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN424);

                    // EsperEPL2Grammar.g:1069:17: ( expressionList )?
                    int alt148=2;
                    int LA148_0 = input.LA(1);

                    if ( (LA148_0==WINDOW||LA148_0==ESCAPE||(LA148_0>=NOT_EXPR && LA148_0<=EVERY_EXPR)||(LA148_0>=SUM && LA148_0<=COUNT)||LA148_0==CASE||LA148_0==OUTER||(LA148_0>=JOIN && LA148_0<=FULL)||(LA148_0>=EVENTS && LA148_0<=LAST)||(LA148_0>=UNIDIRECTIONAL && LA148_0<=CURRENT_TIMESTAMP)||LA148_0==SNAPSHOT||(LA148_0>=VARIABLE && LA148_0<=AT)||(LA148_0>=BOOLEAN_TRUE && LA148_0<=VALUE_NULL)||LA148_0==NUM_DOUBLE||LA148_0==IDENT||LA148_0==LPAREN||(LA148_0>=STRING_LITERAL && LA148_0<=QUOTED_STRING_LITERAL)||(LA148_0>=PLUS && LA148_0<=MINUS)||LA148_0==LCURLY||LA148_0==NUM_INT||LA148_0==QUESTION||(LA148_0>=NUM_LONG && LA148_0<=NUM_FLOAT)) ) {
                        alt148=1;
                    }
                    switch (alt148) {
                        case 1 :
                            // EsperEPL2Grammar.g:1069:17: expressionList
                            {
                            pushFollow(FOLLOW_expressionList_in_eventFilterExpression6590);
                            expressionList425=expressionList();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList425.getTree());

                            }
                            break;

                    }

                    RPAREN426=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_eventFilterExpression6593); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN426);


                    }
                    break;

            }



            // AST REWRITE
            // elements: i, expressionList, classIdentifier
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1070:9: -> ^( EVENT_FILTER_EXPR ( $i)? classIdentifier ( expressionList )? )
            {
                // EsperEPL2Grammar.g:1070:12: ^( EVENT_FILTER_EXPR ( $i)? classIdentifier ( expressionList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_FILTER_EXPR, "EVENT_FILTER_EXPR"), root_1);

                // EsperEPL2Grammar.g:1070:32: ( $i)?
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());

                }
                stream_i.reset();
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                // EsperEPL2Grammar.g:1070:52: ( expressionList )?
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());

                }
                stream_expressionList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "eventFilterExpression"

    public static class classIdentifier_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "classIdentifier"
    // EsperEPL2Grammar.g:1073:1: classIdentifier : i1= IDENT ( DOT i2= IDENT )* -> ^( CLASS_IDENT[identifier] ) ;
    public final EsperEPL2GrammarParser.classIdentifier_return classIdentifier() throws RecognitionException {
        EsperEPL2GrammarParser.classIdentifier_return retval = new EsperEPL2GrammarParser.classIdentifier_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i1=null;
        Token i2=null;
        Token DOT427=null;

        CommonTree i1_tree=null;
        CommonTree i2_tree=null;
        CommonTree DOT427_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");

         String identifier = ""; 
        try {
            // EsperEPL2Grammar.g:1075:2: (i1= IDENT ( DOT i2= IDENT )* -> ^( CLASS_IDENT[identifier] ) )
            // EsperEPL2Grammar.g:1075:4: i1= IDENT ( DOT i2= IDENT )*
            {
            i1=(Token)match(input,IDENT,FOLLOW_IDENT_in_classIdentifier6641); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i1);

            if ( state.backtracking==0 ) {
               identifier = i1.getText(); 
            }
            // EsperEPL2Grammar.g:1076:6: ( DOT i2= IDENT )*
            loop150:
            do {
                int alt150=2;
                int LA150_0 = input.LA(1);

                if ( (LA150_0==DOT) ) {
                    int LA150_4 = input.LA(2);

                    if ( (LA150_4==IDENT) ) {
                        int LA150_32 = input.LA(3);

                        if ( (LA150_32==EOF||(LA150_32>=OR_EXPR && LA150_32<=AND_EXPR)||(LA150_32>=WHERE && LA150_32<=AS)||LA150_32==SELECT||(LA150_32>=INNER && LA150_32<=ON)||(LA150_32>=GROUP && LA150_32<=HAVING)||LA150_32==OUTPUT||LA150_32==INSERT||LA150_32==ORDER||(LA150_32>=UNIDIRECTIONAL && LA150_32<=RETAININTERSECTION)||LA150_32==DELETE||LA150_32==SET||LA150_32==UNTIL||LA150_32==ROW_LIMIT_EXPR||(LA150_32>=IDENT && LA150_32<=COMMA)||(LA150_32>=DOT && LA150_32<=RPAREN)||LA150_32==RBRACK||LA150_32==FOLLOWED_BY) ) {
                            alt150=1;
                        }


                    }


                }


                switch (alt150) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1077:8: DOT i2= IDENT
            	    {
            	    DOT427=(Token)match(input,DOT,FOLLOW_DOT_in_classIdentifier6660); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT427);

            	    i2=(Token)match(input,IDENT,FOLLOW_IDENT_in_classIdentifier6664); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_IDENT.add(i2);

            	    if ( state.backtracking==0 ) {
            	       identifier += "." + i2.getText(); 
            	    }

            	    }
            	    break;

            	default :
            	    break loop150;
                }
            } while (true);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1079:6: -> ^( CLASS_IDENT[identifier] )
            {
                // EsperEPL2Grammar.g:1079:9: ^( CLASS_IDENT[identifier] )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CLASS_IDENT, identifier), root_1);

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "classIdentifier"

    public static class classIdentifierNonGreedy_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "classIdentifierNonGreedy"
    // EsperEPL2Grammar.g:1082:1: classIdentifierNonGreedy : i1= IDENT ( options {greedy=false; } : DOT i2= IDENT )* -> ^( CLASS_IDENT[identifier] ) ;
    public final EsperEPL2GrammarParser.classIdentifierNonGreedy_return classIdentifierNonGreedy() throws RecognitionException {
        EsperEPL2GrammarParser.classIdentifierNonGreedy_return retval = new EsperEPL2GrammarParser.classIdentifierNonGreedy_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i1=null;
        Token i2=null;
        Token DOT428=null;

        CommonTree i1_tree=null;
        CommonTree i2_tree=null;
        CommonTree DOT428_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");

         String identifier = ""; 
        try {
            // EsperEPL2Grammar.g:1084:2: (i1= IDENT ( options {greedy=false; } : DOT i2= IDENT )* -> ^( CLASS_IDENT[identifier] ) )
            // EsperEPL2Grammar.g:1084:4: i1= IDENT ( options {greedy=false; } : DOT i2= IDENT )*
            {
            i1=(Token)match(input,IDENT,FOLLOW_IDENT_in_classIdentifierNonGreedy6709); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i1);

            if ( state.backtracking==0 ) {
               identifier = i1.getText(); 
            }
            // EsperEPL2Grammar.g:1085:6: ( options {greedy=false; } : DOT i2= IDENT )*
            loop151:
            do {
                int alt151=2;
                int LA151_0 = input.LA(1);

                if ( (LA151_0==DOT) ) {
                    int LA151_1 = input.LA(2);

                    if ( (LA151_1==IDENT) ) {
                        int LA151_2 = input.LA(3);

                        if ( (LA151_2==DOT) ) {
                            alt151=1;
                        }
                        else if ( (LA151_2==LPAREN) ) {
                            alt151=2;
                        }


                    }
                    else if ( ((LA151_1>=MAX && LA151_1<=MIN)) ) {
                        alt151=2;
                    }


                }


                switch (alt151) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1087:8: DOT i2= IDENT
            	    {
            	    DOT428=(Token)match(input,DOT,FOLLOW_DOT_in_classIdentifierNonGreedy6744); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT428);

            	    i2=(Token)match(input,IDENT,FOLLOW_IDENT_in_classIdentifierNonGreedy6748); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_IDENT.add(i2);

            	    if ( state.backtracking==0 ) {
            	       identifier += "." + i2.getText(); 
            	    }

            	    }
            	    break;

            	default :
            	    break loop151;
                }
            } while (true);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1089:6: -> ^( CLASS_IDENT[identifier] )
            {
                // EsperEPL2Grammar.g:1089:9: ^( CLASS_IDENT[identifier] )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CLASS_IDENT, identifier), root_1);

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "classIdentifierNonGreedy"

    public static class expressionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expressionList"
    // EsperEPL2Grammar.g:1092:1: expressionList : expression ( COMMA expression )* ;
    public final EsperEPL2GrammarParser.expressionList_return expressionList() throws RecognitionException {
        EsperEPL2GrammarParser.expressionList_return retval = new EsperEPL2GrammarParser.expressionList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA430=null;
        EsperEPL2GrammarParser.expression_return expression429 = null;

        EsperEPL2GrammarParser.expression_return expression431 = null;


        CommonTree COMMA430_tree=null;

        try {
            // EsperEPL2Grammar.g:1093:6: ( expression ( COMMA expression )* )
            // EsperEPL2Grammar.g:1093:11: expression ( COMMA expression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_expression_in_expressionList6790);
            expression429=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression429.getTree());
            // EsperEPL2Grammar.g:1093:22: ( COMMA expression )*
            loop152:
            do {
                int alt152=2;
                int LA152_0 = input.LA(1);

                if ( (LA152_0==COMMA) ) {
                    alt152=1;
                }


                switch (alt152) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1093:23: COMMA expression
            	    {
            	    COMMA430=(Token)match(input,COMMA,FOLLOW_COMMA_in_expressionList6793); if (state.failed) return retval;
            	    pushFollow(FOLLOW_expression_in_expressionList6796);
            	    expression431=expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression431.getTree());

            	    }
            	    break;

            	default :
            	    break loop152;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "expressionList"

    public static class expressionWithTimeList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expressionWithTimeList"
    // EsperEPL2Grammar.g:1096:1: expressionWithTimeList : expressionWithTime ( COMMA expressionWithTime )* ;
    public final EsperEPL2GrammarParser.expressionWithTimeList_return expressionWithTimeList() throws RecognitionException {
        EsperEPL2GrammarParser.expressionWithTimeList_return retval = new EsperEPL2GrammarParser.expressionWithTimeList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA433=null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime432 = null;

        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime434 = null;


        CommonTree COMMA433_tree=null;

        try {
            // EsperEPL2Grammar.g:1097:6: ( expressionWithTime ( COMMA expressionWithTime )* )
            // EsperEPL2Grammar.g:1097:11: expressionWithTime ( COMMA expressionWithTime )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_expressionWithTime_in_expressionWithTimeList6824);
            expressionWithTime432=expressionWithTime();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionWithTime432.getTree());
            // EsperEPL2Grammar.g:1097:30: ( COMMA expressionWithTime )*
            loop153:
            do {
                int alt153=2;
                int LA153_0 = input.LA(1);

                if ( (LA153_0==COMMA) ) {
                    alt153=1;
                }


                switch (alt153) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1097:31: COMMA expressionWithTime
            	    {
            	    COMMA433=(Token)match(input,COMMA,FOLLOW_COMMA_in_expressionWithTimeList6827); if (state.failed) return retval;
            	    pushFollow(FOLLOW_expressionWithTime_in_expressionWithTimeList6830);
            	    expressionWithTime434=expressionWithTime();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionWithTime434.getTree());

            	    }
            	    break;

            	default :
            	    break loop153;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "expressionWithTimeList"

    public static class expressionWithTime_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expressionWithTime"
    // EsperEPL2Grammar.g:1100:1: expressionWithTime : ( ( lastOperand )=> lastOperand | ( lastWeekdayOperand )=> lastWeekdayOperand | ( timePeriod )=> timePeriod | ( expressionQualifyable )=> expressionQualifyable | ( rangeOperand )=> rangeOperand | ( frequencyOperand )=> frequencyOperand | ( lastOperator )=> lastOperator | ( weekDayOperator )=> weekDayOperator | ( numericParameterList )=> numericParameterList | numberSetStar );
    public final EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime() throws RecognitionException {
        EsperEPL2GrammarParser.expressionWithTime_return retval = new EsperEPL2GrammarParser.expressionWithTime_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.lastOperand_return lastOperand435 = null;

        EsperEPL2GrammarParser.lastWeekdayOperand_return lastWeekdayOperand436 = null;

        EsperEPL2GrammarParser.timePeriod_return timePeriod437 = null;

        EsperEPL2GrammarParser.expressionQualifyable_return expressionQualifyable438 = null;

        EsperEPL2GrammarParser.rangeOperand_return rangeOperand439 = null;

        EsperEPL2GrammarParser.frequencyOperand_return frequencyOperand440 = null;

        EsperEPL2GrammarParser.lastOperator_return lastOperator441 = null;

        EsperEPL2GrammarParser.weekDayOperator_return weekDayOperator442 = null;

        EsperEPL2GrammarParser.numericParameterList_return numericParameterList443 = null;

        EsperEPL2GrammarParser.numberSetStar_return numberSetStar444 = null;



        try {
            // EsperEPL2Grammar.g:1101:2: ( ( lastOperand )=> lastOperand | ( lastWeekdayOperand )=> lastWeekdayOperand | ( timePeriod )=> timePeriod | ( expressionQualifyable )=> expressionQualifyable | ( rangeOperand )=> rangeOperand | ( frequencyOperand )=> frequencyOperand | ( lastOperator )=> lastOperator | ( weekDayOperator )=> weekDayOperator | ( numericParameterList )=> numericParameterList | numberSetStar )
            int alt154=10;
            alt154 = dfa154.predict(input);
            switch (alt154) {
                case 1 :
                    // EsperEPL2Grammar.g:1101:7: ( lastOperand )=> lastOperand
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_lastOperand_in_expressionWithTime6856);
                    lastOperand435=lastOperand();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lastOperand435.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1102:4: ( lastWeekdayOperand )=> lastWeekdayOperand
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_lastWeekdayOperand_in_expressionWithTime6867);
                    lastWeekdayOperand436=lastWeekdayOperand();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lastWeekdayOperand436.getTree());

                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1103:4: ( timePeriod )=> timePeriod
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_timePeriod_in_expressionWithTime6878);
                    timePeriod437=timePeriod();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, timePeriod437.getTree());

                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:1104:4: ( expressionQualifyable )=> expressionQualifyable
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_expressionQualifyable_in_expressionWithTime6889);
                    expressionQualifyable438=expressionQualifyable();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionQualifyable438.getTree());

                    }
                    break;
                case 5 :
                    // EsperEPL2Grammar.g:1105:4: ( rangeOperand )=> rangeOperand
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_rangeOperand_in_expressionWithTime6900);
                    rangeOperand439=rangeOperand();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rangeOperand439.getTree());

                    }
                    break;
                case 6 :
                    // EsperEPL2Grammar.g:1106:5: ( frequencyOperand )=> frequencyOperand
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_frequencyOperand_in_expressionWithTime6912);
                    frequencyOperand440=frequencyOperand();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, frequencyOperand440.getTree());

                    }
                    break;
                case 7 :
                    // EsperEPL2Grammar.g:1107:4: ( lastOperator )=> lastOperator
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_lastOperator_in_expressionWithTime6923);
                    lastOperator441=lastOperator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lastOperator441.getTree());

                    }
                    break;
                case 8 :
                    // EsperEPL2Grammar.g:1108:4: ( weekDayOperator )=> weekDayOperator
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_weekDayOperator_in_expressionWithTime6935);
                    weekDayOperator442=weekDayOperator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, weekDayOperator442.getTree());

                    }
                    break;
                case 9 :
                    // EsperEPL2Grammar.g:1109:5: ( numericParameterList )=> numericParameterList
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_numericParameterList_in_expressionWithTime6947);
                    numericParameterList443=numericParameterList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numericParameterList443.getTree());

                    }
                    break;
                case 10 :
                    // EsperEPL2Grammar.g:1110:4: numberSetStar
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_numberSetStar_in_expressionWithTime6952);
                    numberSetStar444=numberSetStar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numberSetStar444.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "expressionWithTime"

    public static class expressionQualifyable_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expressionQualifyable"
    // EsperEPL2Grammar.g:1113:1: expressionQualifyable : expression (a= ASC | d= DESC | s= TIMEPERIOD_SECONDS | s= TIMEPERIOD_SECOND | s= TIMEPERIOD_SEC )? -> {d != null || a != null}? ^( OBJECT_PARAM_ORDERED_EXPR expression ( $a)? ( $d)? ) -> {s != null}? ^( TIME_PERIOD ^( SECOND_PART expression ) ) -> expression ;
    public final EsperEPL2GrammarParser.expressionQualifyable_return expressionQualifyable() throws RecognitionException {
        EsperEPL2GrammarParser.expressionQualifyable_return retval = new EsperEPL2GrammarParser.expressionQualifyable_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token a=null;
        Token d=null;
        Token s=null;
        EsperEPL2GrammarParser.expression_return expression445 = null;


        CommonTree a_tree=null;
        CommonTree d_tree=null;
        CommonTree s_tree=null;
        RewriteRuleTokenStream stream_TIMEPERIOD_SEC=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SEC");
        RewriteRuleTokenStream stream_TIMEPERIOD_SECOND=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SECOND");
        RewriteRuleTokenStream stream_ASC=new RewriteRuleTokenStream(adaptor,"token ASC");
        RewriteRuleTokenStream stream_DESC=new RewriteRuleTokenStream(adaptor,"token DESC");
        RewriteRuleTokenStream stream_TIMEPERIOD_SECONDS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SECONDS");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            // EsperEPL2Grammar.g:1114:2: ( expression (a= ASC | d= DESC | s= TIMEPERIOD_SECONDS | s= TIMEPERIOD_SECOND | s= TIMEPERIOD_SEC )? -> {d != null || a != null}? ^( OBJECT_PARAM_ORDERED_EXPR expression ( $a)? ( $d)? ) -> {s != null}? ^( TIME_PERIOD ^( SECOND_PART expression ) ) -> expression )
            // EsperEPL2Grammar.g:1114:4: expression (a= ASC | d= DESC | s= TIMEPERIOD_SECONDS | s= TIMEPERIOD_SECOND | s= TIMEPERIOD_SEC )?
            {
            pushFollow(FOLLOW_expression_in_expressionQualifyable6963);
            expression445=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression445.getTree());
            // EsperEPL2Grammar.g:1114:15: (a= ASC | d= DESC | s= TIMEPERIOD_SECONDS | s= TIMEPERIOD_SECOND | s= TIMEPERIOD_SEC )?
            int alt155=6;
            switch ( input.LA(1) ) {
                case ASC:
                    {
                    alt155=1;
                    }
                    break;
                case DESC:
                    {
                    alt155=2;
                    }
                    break;
                case TIMEPERIOD_SECONDS:
                    {
                    alt155=3;
                    }
                    break;
                case TIMEPERIOD_SECOND:
                    {
                    alt155=4;
                    }
                    break;
                case TIMEPERIOD_SEC:
                    {
                    alt155=5;
                    }
                    break;
            }

            switch (alt155) {
                case 1 :
                    // EsperEPL2Grammar.g:1114:16: a= ASC
                    {
                    a=(Token)match(input,ASC,FOLLOW_ASC_in_expressionQualifyable6968); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASC.add(a);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1114:22: d= DESC
                    {
                    d=(Token)match(input,DESC,FOLLOW_DESC_in_expressionQualifyable6972); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DESC.add(d);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1114:29: s= TIMEPERIOD_SECONDS
                    {
                    s=(Token)match(input,TIMEPERIOD_SECONDS,FOLLOW_TIMEPERIOD_SECONDS_in_expressionQualifyable6976); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SECONDS.add(s);


                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:1114:50: s= TIMEPERIOD_SECOND
                    {
                    s=(Token)match(input,TIMEPERIOD_SECOND,FOLLOW_TIMEPERIOD_SECOND_in_expressionQualifyable6980); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SECOND.add(s);


                    }
                    break;
                case 5 :
                    // EsperEPL2Grammar.g:1114:70: s= TIMEPERIOD_SEC
                    {
                    s=(Token)match(input,TIMEPERIOD_SEC,FOLLOW_TIMEPERIOD_SEC_in_expressionQualifyable6984); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SEC.add(s);


                    }
                    break;

            }



            // AST REWRITE
            // elements: d, expression, expression, a, expression
            // token labels: d, a
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_d=new RewriteRuleTokenStream(adaptor,"token d",d);
            RewriteRuleTokenStream stream_a=new RewriteRuleTokenStream(adaptor,"token a",a);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1115:3: -> {d != null || a != null}? ^( OBJECT_PARAM_ORDERED_EXPR expression ( $a)? ( $d)? )
            if (d != null || a != null) {
                // EsperEPL2Grammar.g:1115:32: ^( OBJECT_PARAM_ORDERED_EXPR expression ( $a)? ( $d)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(OBJECT_PARAM_ORDERED_EXPR, "OBJECT_PARAM_ORDERED_EXPR"), root_1);

                adaptor.addChild(root_1, stream_expression.nextTree());
                // EsperEPL2Grammar.g:1115:71: ( $a)?
                if ( stream_a.hasNext() ) {
                    adaptor.addChild(root_1, stream_a.nextNode());

                }
                stream_a.reset();
                // EsperEPL2Grammar.g:1115:75: ( $d)?
                if ( stream_d.hasNext() ) {
                    adaptor.addChild(root_1, stream_d.nextNode());

                }
                stream_d.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1116:3: -> {s != null}? ^( TIME_PERIOD ^( SECOND_PART expression ) )
            if (s != null) {
                // EsperEPL2Grammar.g:1116:19: ^( TIME_PERIOD ^( SECOND_PART expression ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TIME_PERIOD, "TIME_PERIOD"), root_1);

                // EsperEPL2Grammar.g:1116:33: ^( SECOND_PART expression )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SECOND_PART, "SECOND_PART"), root_2);

                adaptor.addChild(root_2, stream_expression.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1117:3: -> expression
            {
                adaptor.addChild(root_0, stream_expression.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "expressionQualifyable"

    public static class numberSetStar_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "numberSetStar"
    // EsperEPL2Grammar.g:1121:1: numberSetStar : STAR -> ^( NUMBERSETSTAR ) ;
    public final EsperEPL2GrammarParser.numberSetStar_return numberSetStar() throws RecognitionException {
        EsperEPL2GrammarParser.numberSetStar_return retval = new EsperEPL2GrammarParser.numberSetStar_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token STAR446=null;

        CommonTree STAR446_tree=null;
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");

        try {
            // EsperEPL2Grammar.g:1122:2: ( STAR -> ^( NUMBERSETSTAR ) )
            // EsperEPL2Grammar.g:1122:4: STAR
            {
            STAR446=(Token)match(input,STAR,FOLLOW_STAR_in_numberSetStar7041); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_STAR.add(STAR446);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1123:3: -> ^( NUMBERSETSTAR )
            {
                // EsperEPL2Grammar.g:1123:6: ^( NUMBERSETSTAR )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMBERSETSTAR, "NUMBERSETSTAR"), root_1);

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "numberSetStar"

    public static class lastWeekdayOperand_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lastWeekdayOperand"
    // EsperEPL2Grammar.g:1126:1: lastWeekdayOperand : LW ;
    public final EsperEPL2GrammarParser.lastWeekdayOperand_return lastWeekdayOperand() throws RecognitionException {
        EsperEPL2GrammarParser.lastWeekdayOperand_return retval = new EsperEPL2GrammarParser.lastWeekdayOperand_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LW447=null;

        CommonTree LW447_tree=null;

        try {
            // EsperEPL2Grammar.g:1127:2: ( LW )
            // EsperEPL2Grammar.g:1127:4: LW
            {
            root_0 = (CommonTree)adaptor.nil();

            LW447=(Token)match(input,LW,FOLLOW_LW_in_lastWeekdayOperand7061); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LW447_tree = (CommonTree)adaptor.create(LW447);
            root_0 = (CommonTree)adaptor.becomeRoot(LW447_tree, root_0);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lastWeekdayOperand"

    public static class lastOperand_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lastOperand"
    // EsperEPL2Grammar.g:1130:1: lastOperand : LAST ;
    public final EsperEPL2GrammarParser.lastOperand_return lastOperand() throws RecognitionException {
        EsperEPL2GrammarParser.lastOperand_return retval = new EsperEPL2GrammarParser.lastOperand_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LAST448=null;

        CommonTree LAST448_tree=null;

        try {
            // EsperEPL2Grammar.g:1131:2: ( LAST )
            // EsperEPL2Grammar.g:1131:4: LAST
            {
            root_0 = (CommonTree)adaptor.nil();

            LAST448=(Token)match(input,LAST,FOLLOW_LAST_in_lastOperand7074); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LAST448_tree = (CommonTree)adaptor.create(LAST448);
            root_0 = (CommonTree)adaptor.becomeRoot(LAST448_tree, root_0);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lastOperand"

    public static class frequencyOperand_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "frequencyOperand"
    // EsperEPL2Grammar.g:1134:1: frequencyOperand : STAR DIV ( number | i= IDENT | substitution ) -> {i!= null}? ^( NUMERIC_PARAM_FREQUENCY ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( NUMERIC_PARAM_FREQUENCY ( number )? ( substitution )? ) ;
    public final EsperEPL2GrammarParser.frequencyOperand_return frequencyOperand() throws RecognitionException {
        EsperEPL2GrammarParser.frequencyOperand_return retval = new EsperEPL2GrammarParser.frequencyOperand_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token STAR449=null;
        Token DIV450=null;
        EsperEPL2GrammarParser.number_return number451 = null;

        EsperEPL2GrammarParser.substitution_return substitution452 = null;


        CommonTree i_tree=null;
        CommonTree STAR449_tree=null;
        CommonTree DIV450_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_DIV=new RewriteRuleTokenStream(adaptor,"token DIV");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            // EsperEPL2Grammar.g:1135:2: ( STAR DIV ( number | i= IDENT | substitution ) -> {i!= null}? ^( NUMERIC_PARAM_FREQUENCY ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( NUMERIC_PARAM_FREQUENCY ( number )? ( substitution )? ) )
            // EsperEPL2Grammar.g:1135:4: STAR DIV ( number | i= IDENT | substitution )
            {
            STAR449=(Token)match(input,STAR,FOLLOW_STAR_in_frequencyOperand7086); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_STAR.add(STAR449);

            DIV450=(Token)match(input,DIV,FOLLOW_DIV_in_frequencyOperand7088); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DIV.add(DIV450);

            // EsperEPL2Grammar.g:1135:13: ( number | i= IDENT | substitution )
            int alt156=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt156=1;
                }
                break;
            case IDENT:
                {
                alt156=2;
                }
                break;
            case QUESTION:
                {
                alt156=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 156, 0, input);

                throw nvae;
            }

            switch (alt156) {
                case 1 :
                    // EsperEPL2Grammar.g:1135:14: number
                    {
                    pushFollow(FOLLOW_number_in_frequencyOperand7091);
                    number451=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number451.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1135:21: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_frequencyOperand7095); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1135:29: substitution
                    {
                    pushFollow(FOLLOW_substitution_in_frequencyOperand7097);
                    substitution452=substitution();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution452.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: i, number, substitution
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1136:3: -> {i!= null}? ^( NUMERIC_PARAM_FREQUENCY ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
            if (i!= null) {
                // EsperEPL2Grammar.g:1136:18: ^( NUMERIC_PARAM_FREQUENCY ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_FREQUENCY, "NUMERIC_PARAM_FREQUENCY"), root_1);

                // EsperEPL2Grammar.g:1136:44: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1136:62: ^( EVENT_PROP_SIMPLE $i)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1137:3: -> ^( NUMERIC_PARAM_FREQUENCY ( number )? ( substitution )? )
            {
                // EsperEPL2Grammar.g:1137:6: ^( NUMERIC_PARAM_FREQUENCY ( number )? ( substitution )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_FREQUENCY, "NUMERIC_PARAM_FREQUENCY"), root_1);

                // EsperEPL2Grammar.g:1137:32: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:1137:40: ( substitution )?
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());

                }
                stream_substitution.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "frequencyOperand"

    public static class rangeOperand_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rangeOperand"
    // EsperEPL2Grammar.g:1140:1: rangeOperand : ( number | i1= IDENT | substitution ) COLON ( number | i2= IDENT | substitution ) -> {i1 != null && i2 != null}? ^( NUMERIC_PARAM_RANGE ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i1) ) ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i2) ) ) -> {i1 != null && i2 == null}? ^( NUMERIC_PARAM_RANGE ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i1) ) ( number )? ( substitution )? ) -> {i1 == null && i2 != null}? ^( NUMERIC_PARAM_RANGE ( number )? ( substitution )? ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i2) ) ) -> ^( NUMERIC_PARAM_RANGE ( number )* ( substitution )* ) ;
    public final EsperEPL2GrammarParser.rangeOperand_return rangeOperand() throws RecognitionException {
        EsperEPL2GrammarParser.rangeOperand_return retval = new EsperEPL2GrammarParser.rangeOperand_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i1=null;
        Token i2=null;
        Token COLON455=null;
        EsperEPL2GrammarParser.number_return number453 = null;

        EsperEPL2GrammarParser.substitution_return substitution454 = null;

        EsperEPL2GrammarParser.number_return number456 = null;

        EsperEPL2GrammarParser.substitution_return substitution457 = null;


        CommonTree i1_tree=null;
        CommonTree i2_tree=null;
        CommonTree COLON455_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            // EsperEPL2Grammar.g:1141:2: ( ( number | i1= IDENT | substitution ) COLON ( number | i2= IDENT | substitution ) -> {i1 != null && i2 != null}? ^( NUMERIC_PARAM_RANGE ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i1) ) ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i2) ) ) -> {i1 != null && i2 == null}? ^( NUMERIC_PARAM_RANGE ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i1) ) ( number )? ( substitution )? ) -> {i1 == null && i2 != null}? ^( NUMERIC_PARAM_RANGE ( number )? ( substitution )? ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i2) ) ) -> ^( NUMERIC_PARAM_RANGE ( number )* ( substitution )* ) )
            // EsperEPL2Grammar.g:1141:4: ( number | i1= IDENT | substitution ) COLON ( number | i2= IDENT | substitution )
            {
            // EsperEPL2Grammar.g:1141:4: ( number | i1= IDENT | substitution )
            int alt157=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt157=1;
                }
                break;
            case IDENT:
                {
                alt157=2;
                }
                break;
            case QUESTION:
                {
                alt157=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 157, 0, input);

                throw nvae;
            }

            switch (alt157) {
                case 1 :
                    // EsperEPL2Grammar.g:1141:5: number
                    {
                    pushFollow(FOLLOW_number_in_rangeOperand7146);
                    number453=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number453.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1141:12: i1= IDENT
                    {
                    i1=(Token)match(input,IDENT,FOLLOW_IDENT_in_rangeOperand7150); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i1);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1141:21: substitution
                    {
                    pushFollow(FOLLOW_substitution_in_rangeOperand7152);
                    substitution454=substitution();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution454.getTree());

                    }
                    break;

            }

            COLON455=(Token)match(input,COLON,FOLLOW_COLON_in_rangeOperand7155); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON455);

            // EsperEPL2Grammar.g:1141:41: ( number | i2= IDENT | substitution )
            int alt158=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt158=1;
                }
                break;
            case IDENT:
                {
                alt158=2;
                }
                break;
            case QUESTION:
                {
                alt158=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 158, 0, input);

                throw nvae;
            }

            switch (alt158) {
                case 1 :
                    // EsperEPL2Grammar.g:1141:42: number
                    {
                    pushFollow(FOLLOW_number_in_rangeOperand7158);
                    number456=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number456.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1141:49: i2= IDENT
                    {
                    i2=(Token)match(input,IDENT,FOLLOW_IDENT_in_rangeOperand7162); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i2);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1141:58: substitution
                    {
                    pushFollow(FOLLOW_substitution_in_rangeOperand7164);
                    substitution457=substitution();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution457.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: substitution, i2, substitution, number, substitution, number, number, i1, i1, i2
            // token labels: i2, i1
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i2=new RewriteRuleTokenStream(adaptor,"token i2",i2);
            RewriteRuleTokenStream stream_i1=new RewriteRuleTokenStream(adaptor,"token i1",i1);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1142:3: -> {i1 != null && i2 != null}? ^( NUMERIC_PARAM_RANGE ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i1) ) ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i2) ) )
            if (i1 != null && i2 != null) {
                // EsperEPL2Grammar.g:1142:34: ^( NUMERIC_PARAM_RANGE ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i1) ) ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i2) ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_RANGE, "NUMERIC_PARAM_RANGE"), root_1);

                // EsperEPL2Grammar.g:1142:56: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i1) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1142:74: ^( EVENT_PROP_SIMPLE $i1)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i1.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }
                // EsperEPL2Grammar.g:1142:100: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i2) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1142:118: ^( EVENT_PROP_SIMPLE $i2)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i2.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1143:3: -> {i1 != null && i2 == null}? ^( NUMERIC_PARAM_RANGE ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i1) ) ( number )? ( substitution )? )
            if (i1 != null && i2 == null) {
                // EsperEPL2Grammar.g:1143:34: ^( NUMERIC_PARAM_RANGE ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i1) ) ( number )? ( substitution )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_RANGE, "NUMERIC_PARAM_RANGE"), root_1);

                // EsperEPL2Grammar.g:1143:56: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i1) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1143:74: ^( EVENT_PROP_SIMPLE $i1)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i1.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }
                // EsperEPL2Grammar.g:1143:100: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:1143:108: ( substitution )?
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());

                }
                stream_substitution.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1144:3: -> {i1 == null && i2 != null}? ^( NUMERIC_PARAM_RANGE ( number )? ( substitution )? ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i2) ) )
            if (i1 == null && i2 != null) {
                // EsperEPL2Grammar.g:1144:34: ^( NUMERIC_PARAM_RANGE ( number )? ( substitution )? ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i2) ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_RANGE, "NUMERIC_PARAM_RANGE"), root_1);

                // EsperEPL2Grammar.g:1144:56: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:1144:64: ( substitution )?
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());

                }
                stream_substitution.reset();
                // EsperEPL2Grammar.g:1144:78: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i2) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1144:96: ^( EVENT_PROP_SIMPLE $i2)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i2.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1145:3: -> ^( NUMERIC_PARAM_RANGE ( number )* ( substitution )* )
            {
                // EsperEPL2Grammar.g:1145:6: ^( NUMERIC_PARAM_RANGE ( number )* ( substitution )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_RANGE, "NUMERIC_PARAM_RANGE"), root_1);

                // EsperEPL2Grammar.g:1145:28: ( number )*
                while ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:1145:36: ( substitution )*
                while ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());

                }
                stream_substitution.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "rangeOperand"

    public static class lastOperator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lastOperator"
    // EsperEPL2Grammar.g:1148:1: lastOperator : ( number | i= IDENT | substitution ) LAST -> {i!= null}? ^( LAST_OPERATOR ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( LAST_OPERATOR ( number )? ( substitution )? ) ;
    public final EsperEPL2GrammarParser.lastOperator_return lastOperator() throws RecognitionException {
        EsperEPL2GrammarParser.lastOperator_return retval = new EsperEPL2GrammarParser.lastOperator_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token LAST460=null;
        EsperEPL2GrammarParser.number_return number458 = null;

        EsperEPL2GrammarParser.substitution_return substitution459 = null;


        CommonTree i_tree=null;
        CommonTree LAST460_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_LAST=new RewriteRuleTokenStream(adaptor,"token LAST");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            // EsperEPL2Grammar.g:1149:2: ( ( number | i= IDENT | substitution ) LAST -> {i!= null}? ^( LAST_OPERATOR ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( LAST_OPERATOR ( number )? ( substitution )? ) )
            // EsperEPL2Grammar.g:1149:4: ( number | i= IDENT | substitution ) LAST
            {
            // EsperEPL2Grammar.g:1149:4: ( number | i= IDENT | substitution )
            int alt159=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt159=1;
                }
                break;
            case IDENT:
                {
                alt159=2;
                }
                break;
            case QUESTION:
                {
                alt159=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 159, 0, input);

                throw nvae;
            }

            switch (alt159) {
                case 1 :
                    // EsperEPL2Grammar.g:1149:5: number
                    {
                    pushFollow(FOLLOW_number_in_lastOperator7278);
                    number458=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number458.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1149:12: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_lastOperator7282); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1149:20: substitution
                    {
                    pushFollow(FOLLOW_substitution_in_lastOperator7284);
                    substitution459=substitution();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution459.getTree());

                    }
                    break;

            }

            LAST460=(Token)match(input,LAST,FOLLOW_LAST_in_lastOperator7287); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LAST.add(LAST460);



            // AST REWRITE
            // elements: substitution, i, number
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1150:3: -> {i!= null}? ^( LAST_OPERATOR ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
            if (i!= null) {
                // EsperEPL2Grammar.g:1150:18: ^( LAST_OPERATOR ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LAST_OPERATOR, "LAST_OPERATOR"), root_1);

                // EsperEPL2Grammar.g:1150:34: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1150:52: ^( EVENT_PROP_SIMPLE $i)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1151:3: -> ^( LAST_OPERATOR ( number )? ( substitution )? )
            {
                // EsperEPL2Grammar.g:1151:6: ^( LAST_OPERATOR ( number )? ( substitution )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LAST_OPERATOR, "LAST_OPERATOR"), root_1);

                // EsperEPL2Grammar.g:1151:22: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:1151:30: ( substitution )?
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());

                }
                stream_substitution.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lastOperator"

    public static class weekDayOperator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "weekDayOperator"
    // EsperEPL2Grammar.g:1154:1: weekDayOperator : ( number | i= IDENT | substitution ) WEEKDAY -> {i!= null}? ^( WEEKDAY_OPERATOR ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( WEEKDAY_OPERATOR ( number )? ( substitution )? ) ;
    public final EsperEPL2GrammarParser.weekDayOperator_return weekDayOperator() throws RecognitionException {
        EsperEPL2GrammarParser.weekDayOperator_return retval = new EsperEPL2GrammarParser.weekDayOperator_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token WEEKDAY463=null;
        EsperEPL2GrammarParser.number_return number461 = null;

        EsperEPL2GrammarParser.substitution_return substitution462 = null;


        CommonTree i_tree=null;
        CommonTree WEEKDAY463_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_WEEKDAY=new RewriteRuleTokenStream(adaptor,"token WEEKDAY");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            // EsperEPL2Grammar.g:1155:2: ( ( number | i= IDENT | substitution ) WEEKDAY -> {i!= null}? ^( WEEKDAY_OPERATOR ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( WEEKDAY_OPERATOR ( number )? ( substitution )? ) )
            // EsperEPL2Grammar.g:1155:4: ( number | i= IDENT | substitution ) WEEKDAY
            {
            // EsperEPL2Grammar.g:1155:4: ( number | i= IDENT | substitution )
            int alt160=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt160=1;
                }
                break;
            case IDENT:
                {
                alt160=2;
                }
                break;
            case QUESTION:
                {
                alt160=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 160, 0, input);

                throw nvae;
            }

            switch (alt160) {
                case 1 :
                    // EsperEPL2Grammar.g:1155:5: number
                    {
                    pushFollow(FOLLOW_number_in_weekDayOperator7335);
                    number461=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number461.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1155:12: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_weekDayOperator7339); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1155:20: substitution
                    {
                    pushFollow(FOLLOW_substitution_in_weekDayOperator7341);
                    substitution462=substitution();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution462.getTree());

                    }
                    break;

            }

            WEEKDAY463=(Token)match(input,WEEKDAY,FOLLOW_WEEKDAY_in_weekDayOperator7344); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_WEEKDAY.add(WEEKDAY463);



            // AST REWRITE
            // elements: number, i, substitution
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1156:3: -> {i!= null}? ^( WEEKDAY_OPERATOR ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
            if (i!= null) {
                // EsperEPL2Grammar.g:1156:18: ^( WEEKDAY_OPERATOR ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WEEKDAY_OPERATOR, "WEEKDAY_OPERATOR"), root_1);

                // EsperEPL2Grammar.g:1156:37: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1156:55: ^( EVENT_PROP_SIMPLE $i)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1157:3: -> ^( WEEKDAY_OPERATOR ( number )? ( substitution )? )
            {
                // EsperEPL2Grammar.g:1157:6: ^( WEEKDAY_OPERATOR ( number )? ( substitution )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WEEKDAY_OPERATOR, "WEEKDAY_OPERATOR"), root_1);

                // EsperEPL2Grammar.g:1157:25: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:1157:33: ( substitution )?
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());

                }
                stream_substitution.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "weekDayOperator"

    public static class numericParameterList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "numericParameterList"
    // EsperEPL2Grammar.g:1160:1: numericParameterList : LBRACK numericListParameter ( COMMA numericListParameter )* RBRACK -> ^( NUMERIC_PARAM_LIST ( numericListParameter )+ ) ;
    public final EsperEPL2GrammarParser.numericParameterList_return numericParameterList() throws RecognitionException {
        EsperEPL2GrammarParser.numericParameterList_return retval = new EsperEPL2GrammarParser.numericParameterList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LBRACK464=null;
        Token COMMA466=null;
        Token RBRACK468=null;
        EsperEPL2GrammarParser.numericListParameter_return numericListParameter465 = null;

        EsperEPL2GrammarParser.numericListParameter_return numericListParameter467 = null;


        CommonTree LBRACK464_tree=null;
        CommonTree COMMA466_tree=null;
        CommonTree RBRACK468_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_numericListParameter=new RewriteRuleSubtreeStream(adaptor,"rule numericListParameter");
        try {
            // EsperEPL2Grammar.g:1161:2: ( LBRACK numericListParameter ( COMMA numericListParameter )* RBRACK -> ^( NUMERIC_PARAM_LIST ( numericListParameter )+ ) )
            // EsperEPL2Grammar.g:1161:4: LBRACK numericListParameter ( COMMA numericListParameter )* RBRACK
            {
            LBRACK464=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_numericParameterList7391); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK464);

            pushFollow(FOLLOW_numericListParameter_in_numericParameterList7393);
            numericListParameter465=numericListParameter();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_numericListParameter.add(numericListParameter465.getTree());
            // EsperEPL2Grammar.g:1161:32: ( COMMA numericListParameter )*
            loop161:
            do {
                int alt161=2;
                int LA161_0 = input.LA(1);

                if ( (LA161_0==COMMA) ) {
                    alt161=1;
                }


                switch (alt161) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1161:33: COMMA numericListParameter
            	    {
            	    COMMA466=(Token)match(input,COMMA,FOLLOW_COMMA_in_numericParameterList7396); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA466);

            	    pushFollow(FOLLOW_numericListParameter_in_numericParameterList7398);
            	    numericListParameter467=numericListParameter();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_numericListParameter.add(numericListParameter467.getTree());

            	    }
            	    break;

            	default :
            	    break loop161;
                }
            } while (true);

            RBRACK468=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_numericParameterList7402); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK468);



            // AST REWRITE
            // elements: numericListParameter
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1162:3: -> ^( NUMERIC_PARAM_LIST ( numericListParameter )+ )
            {
                // EsperEPL2Grammar.g:1162:6: ^( NUMERIC_PARAM_LIST ( numericListParameter )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_LIST, "NUMERIC_PARAM_LIST"), root_1);

                if ( !(stream_numericListParameter.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_numericListParameter.hasNext() ) {
                    adaptor.addChild(root_1, stream_numericListParameter.nextTree());

                }
                stream_numericListParameter.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "numericParameterList"

    public static class numericListParameter_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "numericListParameter"
    // EsperEPL2Grammar.g:1165:1: numericListParameter : ( rangeOperand | frequencyOperand | numberconstant );
    public final EsperEPL2GrammarParser.numericListParameter_return numericListParameter() throws RecognitionException {
        EsperEPL2GrammarParser.numericListParameter_return retval = new EsperEPL2GrammarParser.numericListParameter_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.rangeOperand_return rangeOperand469 = null;

        EsperEPL2GrammarParser.frequencyOperand_return frequencyOperand470 = null;

        EsperEPL2GrammarParser.numberconstant_return numberconstant471 = null;



        try {
            // EsperEPL2Grammar.g:1166:2: ( rangeOperand | frequencyOperand | numberconstant )
            int alt162=3;
            switch ( input.LA(1) ) {
            case NUM_INT:
                {
                int LA162_1 = input.LA(2);

                if ( (LA162_1==COLON) ) {
                    alt162=1;
                }
                else if ( (LA162_1==COMMA||LA162_1==RBRACK) ) {
                    alt162=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 162, 1, input);

                    throw nvae;
                }
                }
                break;
            case NUM_LONG:
                {
                int LA162_2 = input.LA(2);

                if ( (LA162_2==COLON) ) {
                    alt162=1;
                }
                else if ( (LA162_2==COMMA||LA162_2==RBRACK) ) {
                    alt162=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 162, 2, input);

                    throw nvae;
                }
                }
                break;
            case NUM_FLOAT:
                {
                int LA162_3 = input.LA(2);

                if ( (LA162_3==COMMA||LA162_3==RBRACK) ) {
                    alt162=3;
                }
                else if ( (LA162_3==COLON) ) {
                    alt162=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 162, 3, input);

                    throw nvae;
                }
                }
                break;
            case NUM_DOUBLE:
                {
                int LA162_4 = input.LA(2);

                if ( (LA162_4==COMMA||LA162_4==RBRACK) ) {
                    alt162=3;
                }
                else if ( (LA162_4==COLON) ) {
                    alt162=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 162, 4, input);

                    throw nvae;
                }
                }
                break;
            case IDENT:
            case QUESTION:
                {
                alt162=1;
                }
                break;
            case STAR:
                {
                alt162=2;
                }
                break;
            case PLUS:
            case MINUS:
                {
                alt162=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 162, 0, input);

                throw nvae;
            }

            switch (alt162) {
                case 1 :
                    // EsperEPL2Grammar.g:1166:4: rangeOperand
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_rangeOperand_in_numericListParameter7424);
                    rangeOperand469=rangeOperand();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rangeOperand469.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1167:5: frequencyOperand
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_frequencyOperand_in_numericListParameter7430);
                    frequencyOperand470=frequencyOperand();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, frequencyOperand470.getTree());

                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1168:4: numberconstant
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_numberconstant_in_numericListParameter7435);
                    numberconstant471=numberconstant();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numberconstant471.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "numericListParameter"

    public static class eventProperty_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "eventProperty"
    // EsperEPL2Grammar.g:1171:1: eventProperty : eventPropertyAtomic ( DOT eventPropertyAtomic )* -> ^( EVENT_PROP_EXPR ( eventPropertyAtomic )+ ) ;
    public final EsperEPL2GrammarParser.eventProperty_return eventProperty() throws RecognitionException {
        EsperEPL2GrammarParser.eventProperty_return retval = new EsperEPL2GrammarParser.eventProperty_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token DOT473=null;
        EsperEPL2GrammarParser.eventPropertyAtomic_return eventPropertyAtomic472 = null;

        EsperEPL2GrammarParser.eventPropertyAtomic_return eventPropertyAtomic474 = null;


        CommonTree DOT473_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_eventPropertyAtomic=new RewriteRuleSubtreeStream(adaptor,"rule eventPropertyAtomic");
        try {
            // EsperEPL2Grammar.g:1172:2: ( eventPropertyAtomic ( DOT eventPropertyAtomic )* -> ^( EVENT_PROP_EXPR ( eventPropertyAtomic )+ ) )
            // EsperEPL2Grammar.g:1172:4: eventPropertyAtomic ( DOT eventPropertyAtomic )*
            {
            pushFollow(FOLLOW_eventPropertyAtomic_in_eventProperty7451);
            eventPropertyAtomic472=eventPropertyAtomic();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventPropertyAtomic.add(eventPropertyAtomic472.getTree());
            // EsperEPL2Grammar.g:1172:24: ( DOT eventPropertyAtomic )*
            loop163:
            do {
                int alt163=2;
                int LA163_0 = input.LA(1);

                if ( (LA163_0==DOT) ) {
                    alt163=1;
                }


                switch (alt163) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1172:25: DOT eventPropertyAtomic
            	    {
            	    DOT473=(Token)match(input,DOT,FOLLOW_DOT_in_eventProperty7454); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT473);

            	    pushFollow(FOLLOW_eventPropertyAtomic_in_eventProperty7456);
            	    eventPropertyAtomic474=eventPropertyAtomic();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_eventPropertyAtomic.add(eventPropertyAtomic474.getTree());

            	    }
            	    break;

            	default :
            	    break loop163;
                }
            } while (true);



            // AST REWRITE
            // elements: eventPropertyAtomic
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1173:3: -> ^( EVENT_PROP_EXPR ( eventPropertyAtomic )+ )
            {
                // EsperEPL2Grammar.g:1173:6: ^( EVENT_PROP_EXPR ( eventPropertyAtomic )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_1);

                if ( !(stream_eventPropertyAtomic.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_eventPropertyAtomic.hasNext() ) {
                    adaptor.addChild(root_1, stream_eventPropertyAtomic.nextTree());

                }
                stream_eventPropertyAtomic.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "eventProperty"

    public static class eventPropertyAtomic_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "eventPropertyAtomic"
    // EsperEPL2Grammar.g:1176:1: eventPropertyAtomic : eventPropertyIdent (lb= LBRACK ni= NUM_INT RBRACK (q= QUESTION )? | lp= LPAREN (s= STRING_LITERAL | s= QUOTED_STRING_LITERAL ) RPAREN (q= QUESTION )? | q1= QUESTION )? -> {lb!= null && $q == null}? ^( EVENT_PROP_INDEXED eventPropertyIdent $ni) -> {lb!= null && $q != null}? ^( EVENT_PROP_DYNAMIC_INDEXED eventPropertyIdent $ni) -> {lp!= null && $q == null}? ^( EVENT_PROP_MAPPED eventPropertyIdent $s) -> {lp!= null && $q != null}? ^( EVENT_PROP_DYNAMIC_MAPPED eventPropertyIdent $s) -> {q1 != null}? ^( EVENT_PROP_DYNAMIC_SIMPLE eventPropertyIdent ) -> ^( EVENT_PROP_SIMPLE eventPropertyIdent ) ;
    public final EsperEPL2GrammarParser.eventPropertyAtomic_return eventPropertyAtomic() throws RecognitionException {
        EsperEPL2GrammarParser.eventPropertyAtomic_return retval = new EsperEPL2GrammarParser.eventPropertyAtomic_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token lb=null;
        Token ni=null;
        Token q=null;
        Token lp=null;
        Token s=null;
        Token q1=null;
        Token RBRACK476=null;
        Token RPAREN477=null;
        EsperEPL2GrammarParser.eventPropertyIdent_return eventPropertyIdent475 = null;


        CommonTree lb_tree=null;
        CommonTree ni_tree=null;
        CommonTree q_tree=null;
        CommonTree lp_tree=null;
        CommonTree s_tree=null;
        CommonTree q1_tree=null;
        CommonTree RBRACK476_tree=null;
        CommonTree RPAREN477_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token STRING_LITERAL");
        RewriteRuleTokenStream stream_QUESTION=new RewriteRuleTokenStream(adaptor,"token QUESTION");
        RewriteRuleTokenStream stream_QUOTED_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token QUOTED_STRING_LITERAL");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_NUM_INT=new RewriteRuleTokenStream(adaptor,"token NUM_INT");
        RewriteRuleSubtreeStream stream_eventPropertyIdent=new RewriteRuleSubtreeStream(adaptor,"rule eventPropertyIdent");
        try {
            // EsperEPL2Grammar.g:1177:2: ( eventPropertyIdent (lb= LBRACK ni= NUM_INT RBRACK (q= QUESTION )? | lp= LPAREN (s= STRING_LITERAL | s= QUOTED_STRING_LITERAL ) RPAREN (q= QUESTION )? | q1= QUESTION )? -> {lb!= null && $q == null}? ^( EVENT_PROP_INDEXED eventPropertyIdent $ni) -> {lb!= null && $q != null}? ^( EVENT_PROP_DYNAMIC_INDEXED eventPropertyIdent $ni) -> {lp!= null && $q == null}? ^( EVENT_PROP_MAPPED eventPropertyIdent $s) -> {lp!= null && $q != null}? ^( EVENT_PROP_DYNAMIC_MAPPED eventPropertyIdent $s) -> {q1 != null}? ^( EVENT_PROP_DYNAMIC_SIMPLE eventPropertyIdent ) -> ^( EVENT_PROP_SIMPLE eventPropertyIdent ) )
            // EsperEPL2Grammar.g:1177:4: eventPropertyIdent (lb= LBRACK ni= NUM_INT RBRACK (q= QUESTION )? | lp= LPAREN (s= STRING_LITERAL | s= QUOTED_STRING_LITERAL ) RPAREN (q= QUESTION )? | q1= QUESTION )?
            {
            pushFollow(FOLLOW_eventPropertyIdent_in_eventPropertyAtomic7482);
            eventPropertyIdent475=eventPropertyIdent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventPropertyIdent.add(eventPropertyIdent475.getTree());
            // EsperEPL2Grammar.g:1177:23: (lb= LBRACK ni= NUM_INT RBRACK (q= QUESTION )? | lp= LPAREN (s= STRING_LITERAL | s= QUOTED_STRING_LITERAL ) RPAREN (q= QUESTION )? | q1= QUESTION )?
            int alt167=4;
            switch ( input.LA(1) ) {
                case LBRACK:
                    {
                    alt167=1;
                    }
                    break;
                case LPAREN:
                    {
                    alt167=2;
                    }
                    break;
                case QUESTION:
                    {
                    alt167=3;
                    }
                    break;
            }

            switch (alt167) {
                case 1 :
                    // EsperEPL2Grammar.g:1178:4: lb= LBRACK ni= NUM_INT RBRACK (q= QUESTION )?
                    {
                    lb=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_eventPropertyAtomic7491); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LBRACK.add(lb);

                    ni=(Token)match(input,NUM_INT,FOLLOW_NUM_INT_in_eventPropertyAtomic7495); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_INT.add(ni);

                    RBRACK476=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_eventPropertyAtomic7497); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK476);

                    // EsperEPL2Grammar.g:1178:32: (q= QUESTION )?
                    int alt164=2;
                    int LA164_0 = input.LA(1);

                    if ( (LA164_0==QUESTION) ) {
                        alt164=1;
                    }
                    switch (alt164) {
                        case 1 :
                            // EsperEPL2Grammar.g:1178:33: q= QUESTION
                            {
                            q=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_eventPropertyAtomic7502); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUESTION.add(q);


                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1180:4: lp= LPAREN (s= STRING_LITERAL | s= QUOTED_STRING_LITERAL ) RPAREN (q= QUESTION )?
                    {
                    lp=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_eventPropertyAtomic7516); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(lp);

                    // EsperEPL2Grammar.g:1180:14: (s= STRING_LITERAL | s= QUOTED_STRING_LITERAL )
                    int alt165=2;
                    int LA165_0 = input.LA(1);

                    if ( (LA165_0==STRING_LITERAL) ) {
                        alt165=1;
                    }
                    else if ( (LA165_0==QUOTED_STRING_LITERAL) ) {
                        alt165=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 165, 0, input);

                        throw nvae;
                    }
                    switch (alt165) {
                        case 1 :
                            // EsperEPL2Grammar.g:1180:15: s= STRING_LITERAL
                            {
                            s=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_eventPropertyAtomic7521); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_STRING_LITERAL.add(s);


                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1180:34: s= QUOTED_STRING_LITERAL
                            {
                            s=(Token)match(input,QUOTED_STRING_LITERAL,FOLLOW_QUOTED_STRING_LITERAL_in_eventPropertyAtomic7527); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUOTED_STRING_LITERAL.add(s);


                            }
                            break;

                    }

                    RPAREN477=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_eventPropertyAtomic7530); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN477);

                    // EsperEPL2Grammar.g:1180:66: (q= QUESTION )?
                    int alt166=2;
                    int LA166_0 = input.LA(1);

                    if ( (LA166_0==QUESTION) ) {
                        alt166=1;
                    }
                    switch (alt166) {
                        case 1 :
                            // EsperEPL2Grammar.g:1180:67: q= QUESTION
                            {
                            q=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_eventPropertyAtomic7535); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUESTION.add(q);


                            }
                            break;

                    }


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1182:4: q1= QUESTION
                    {
                    q1=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_eventPropertyAtomic7549); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUESTION.add(q1);


                    }
                    break;

            }



            // AST REWRITE
            // elements: eventPropertyIdent, eventPropertyIdent, eventPropertyIdent, ni, eventPropertyIdent, s, eventPropertyIdent, eventPropertyIdent, s, ni
            // token labels: s, ni
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_ni=new RewriteRuleTokenStream(adaptor,"token ni",ni);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1185:3: -> {lb!= null && $q == null}? ^( EVENT_PROP_INDEXED eventPropertyIdent $ni)
            if (lb!= null && q == null) {
                // EsperEPL2Grammar.g:1185:33: ^( EVENT_PROP_INDEXED eventPropertyIdent $ni)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_INDEXED, "EVENT_PROP_INDEXED"), root_1);

                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_1, stream_ni.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1186:3: -> {lb!= null && $q != null}? ^( EVENT_PROP_DYNAMIC_INDEXED eventPropertyIdent $ni)
            if (lb!= null && q != null) {
                // EsperEPL2Grammar.g:1186:33: ^( EVENT_PROP_DYNAMIC_INDEXED eventPropertyIdent $ni)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_DYNAMIC_INDEXED, "EVENT_PROP_DYNAMIC_INDEXED"), root_1);

                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_1, stream_ni.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1187:3: -> {lp!= null && $q == null}? ^( EVENT_PROP_MAPPED eventPropertyIdent $s)
            if (lp!= null && q == null) {
                // EsperEPL2Grammar.g:1187:33: ^( EVENT_PROP_MAPPED eventPropertyIdent $s)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_MAPPED, "EVENT_PROP_MAPPED"), root_1);

                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_1, stream_s.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1188:3: -> {lp!= null && $q != null}? ^( EVENT_PROP_DYNAMIC_MAPPED eventPropertyIdent $s)
            if (lp!= null && q != null) {
                // EsperEPL2Grammar.g:1188:33: ^( EVENT_PROP_DYNAMIC_MAPPED eventPropertyIdent $s)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_DYNAMIC_MAPPED, "EVENT_PROP_DYNAMIC_MAPPED"), root_1);

                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_1, stream_s.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1189:3: -> {q1 != null}? ^( EVENT_PROP_DYNAMIC_SIMPLE eventPropertyIdent )
            if (q1 != null) {
                // EsperEPL2Grammar.g:1189:27: ^( EVENT_PROP_DYNAMIC_SIMPLE eventPropertyIdent )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_DYNAMIC_SIMPLE, "EVENT_PROP_DYNAMIC_SIMPLE"), root_1);

                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1190:3: -> ^( EVENT_PROP_SIMPLE eventPropertyIdent )
            {
                // EsperEPL2Grammar.g:1190:6: ^( EVENT_PROP_SIMPLE eventPropertyIdent )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_1);

                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "eventPropertyAtomic"

    public static class eventPropertyIdent_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "eventPropertyIdent"
    // EsperEPL2Grammar.g:1193:1: eventPropertyIdent : ipi= keywordAllowedIdent ( ESCAPECHAR DOT (ipi2= keywordAllowedIdent )? )* -> ^( IDENT[identifier] ) ;
    public final EsperEPL2GrammarParser.eventPropertyIdent_return eventPropertyIdent() throws RecognitionException {
        EsperEPL2GrammarParser.eventPropertyIdent_return retval = new EsperEPL2GrammarParser.eventPropertyIdent_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token ESCAPECHAR478=null;
        Token DOT479=null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return ipi = null;

        EsperEPL2GrammarParser.keywordAllowedIdent_return ipi2 = null;


        CommonTree ESCAPECHAR478_tree=null;
        CommonTree DOT479_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_ESCAPECHAR=new RewriteRuleTokenStream(adaptor,"token ESCAPECHAR");
        RewriteRuleSubtreeStream stream_keywordAllowedIdent=new RewriteRuleSubtreeStream(adaptor,"rule keywordAllowedIdent");
         String identifier = ""; 
        try {
            // EsperEPL2Grammar.g:1195:2: (ipi= keywordAllowedIdent ( ESCAPECHAR DOT (ipi2= keywordAllowedIdent )? )* -> ^( IDENT[identifier] ) )
            // EsperEPL2Grammar.g:1195:4: ipi= keywordAllowedIdent ( ESCAPECHAR DOT (ipi2= keywordAllowedIdent )? )*
            {
            pushFollow(FOLLOW_keywordAllowedIdent_in_eventPropertyIdent7672);
            ipi=keywordAllowedIdent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(ipi.getTree());
            if ( state.backtracking==0 ) {
               identifier = ipi.getTree().toString(); 
            }
            // EsperEPL2Grammar.g:1196:3: ( ESCAPECHAR DOT (ipi2= keywordAllowedIdent )? )*
            loop169:
            do {
                int alt169=2;
                int LA169_0 = input.LA(1);

                if ( (LA169_0==ESCAPECHAR) ) {
                    alt169=1;
                }


                switch (alt169) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1197:5: ESCAPECHAR DOT (ipi2= keywordAllowedIdent )?
            	    {
            	    ESCAPECHAR478=(Token)match(input,ESCAPECHAR,FOLLOW_ESCAPECHAR_in_eventPropertyIdent7684); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_ESCAPECHAR.add(ESCAPECHAR478);

            	    DOT479=(Token)match(input,DOT,FOLLOW_DOT_in_eventPropertyIdent7686); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT479);

            	    // EsperEPL2Grammar.g:1197:24: (ipi2= keywordAllowedIdent )?
            	    int alt168=2;
            	    alt168 = dfa168.predict(input);
            	    switch (alt168) {
            	        case 1 :
            	            // EsperEPL2Grammar.g:1197:24: ipi2= keywordAllowedIdent
            	            {
            	            pushFollow(FOLLOW_keywordAllowedIdent_in_eventPropertyIdent7690);
            	            ipi2=keywordAllowedIdent();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(ipi2.getTree());

            	            }
            	            break;

            	    }

            	    if ( state.backtracking==0 ) {
            	       identifier += "."; if (ipi2 != null) identifier += ipi2.getTree().toString(); 
            	    }

            	    }
            	    break;

            	default :
            	    break loop169;
                }
            } while (true);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1199:7: -> ^( IDENT[identifier] )
            {
                // EsperEPL2Grammar.g:1199:10: ^( IDENT[identifier] )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IDENT, identifier), root_1);

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "eventPropertyIdent"

    public static class keywordAllowedIdent_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keywordAllowedIdent"
    // EsperEPL2Grammar.g:1202:1: keywordAllowedIdent : (i1= IDENT | AT | COUNT | ESCAPE | EVERY_EXPR | SUM | AVG | MAX | MIN | COALESCE | MEDIAN | STDDEV | AVEDEV | EVENTS | FIRST | LAST | UNIDIRECTIONAL | RETAINUNION | RETAININTERSECTION | UNTIL | PATTERN | SQL | METADATASQL | PREVIOUS | PRIOR | WEEKDAY | LW | INSTANCEOF | CAST | SNAPSHOT | VARIABLE | WINDOW | LEFT | RIGHT | OUTER | FULL | JOIN -> ^( IDENT[identifier] ) );
    public final EsperEPL2GrammarParser.keywordAllowedIdent_return keywordAllowedIdent() throws RecognitionException {
        EsperEPL2GrammarParser.keywordAllowedIdent_return retval = new EsperEPL2GrammarParser.keywordAllowedIdent_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i1=null;
        Token AT480=null;
        Token COUNT481=null;
        Token ESCAPE482=null;
        Token EVERY_EXPR483=null;
        Token SUM484=null;
        Token AVG485=null;
        Token MAX486=null;
        Token MIN487=null;
        Token COALESCE488=null;
        Token MEDIAN489=null;
        Token STDDEV490=null;
        Token AVEDEV491=null;
        Token EVENTS492=null;
        Token FIRST493=null;
        Token LAST494=null;
        Token UNIDIRECTIONAL495=null;
        Token RETAINUNION496=null;
        Token RETAININTERSECTION497=null;
        Token UNTIL498=null;
        Token PATTERN499=null;
        Token SQL500=null;
        Token METADATASQL501=null;
        Token PREVIOUS502=null;
        Token PRIOR503=null;
        Token WEEKDAY504=null;
        Token LW505=null;
        Token INSTANCEOF506=null;
        Token CAST507=null;
        Token SNAPSHOT508=null;
        Token VARIABLE509=null;
        Token WINDOW510=null;
        Token LEFT511=null;
        Token RIGHT512=null;
        Token OUTER513=null;
        Token FULL514=null;
        Token JOIN515=null;

        CommonTree i1_tree=null;
        CommonTree AT480_tree=null;
        CommonTree COUNT481_tree=null;
        CommonTree ESCAPE482_tree=null;
        CommonTree EVERY_EXPR483_tree=null;
        CommonTree SUM484_tree=null;
        CommonTree AVG485_tree=null;
        CommonTree MAX486_tree=null;
        CommonTree MIN487_tree=null;
        CommonTree COALESCE488_tree=null;
        CommonTree MEDIAN489_tree=null;
        CommonTree STDDEV490_tree=null;
        CommonTree AVEDEV491_tree=null;
        CommonTree EVENTS492_tree=null;
        CommonTree FIRST493_tree=null;
        CommonTree LAST494_tree=null;
        CommonTree UNIDIRECTIONAL495_tree=null;
        CommonTree RETAINUNION496_tree=null;
        CommonTree RETAININTERSECTION497_tree=null;
        CommonTree UNTIL498_tree=null;
        CommonTree PATTERN499_tree=null;
        CommonTree SQL500_tree=null;
        CommonTree METADATASQL501_tree=null;
        CommonTree PREVIOUS502_tree=null;
        CommonTree PRIOR503_tree=null;
        CommonTree WEEKDAY504_tree=null;
        CommonTree LW505_tree=null;
        CommonTree INSTANCEOF506_tree=null;
        CommonTree CAST507_tree=null;
        CommonTree SNAPSHOT508_tree=null;
        CommonTree VARIABLE509_tree=null;
        CommonTree WINDOW510_tree=null;
        CommonTree LEFT511_tree=null;
        CommonTree RIGHT512_tree=null;
        CommonTree OUTER513_tree=null;
        CommonTree FULL514_tree=null;
        CommonTree JOIN515_tree=null;
        RewriteRuleTokenStream stream_JOIN=new RewriteRuleTokenStream(adaptor,"token JOIN");

         String identifier = ""; 
        try {
            // EsperEPL2Grammar.g:1204:2: (i1= IDENT | AT | COUNT | ESCAPE | EVERY_EXPR | SUM | AVG | MAX | MIN | COALESCE | MEDIAN | STDDEV | AVEDEV | EVENTS | FIRST | LAST | UNIDIRECTIONAL | RETAINUNION | RETAININTERSECTION | UNTIL | PATTERN | SQL | METADATASQL | PREVIOUS | PRIOR | WEEKDAY | LW | INSTANCEOF | CAST | SNAPSHOT | VARIABLE | WINDOW | LEFT | RIGHT | OUTER | FULL | JOIN -> ^( IDENT[identifier] ) )
            int alt170=37;
            switch ( input.LA(1) ) {
            case IDENT:
                {
                alt170=1;
                }
                break;
            case AT:
                {
                alt170=2;
                }
                break;
            case COUNT:
                {
                alt170=3;
                }
                break;
            case ESCAPE:
                {
                alt170=4;
                }
                break;
            case EVERY_EXPR:
                {
                alt170=5;
                }
                break;
            case SUM:
                {
                alt170=6;
                }
                break;
            case AVG:
                {
                alt170=7;
                }
                break;
            case MAX:
                {
                alt170=8;
                }
                break;
            case MIN:
                {
                alt170=9;
                }
                break;
            case COALESCE:
                {
                alt170=10;
                }
                break;
            case MEDIAN:
                {
                alt170=11;
                }
                break;
            case STDDEV:
                {
                alt170=12;
                }
                break;
            case AVEDEV:
                {
                alt170=13;
                }
                break;
            case EVENTS:
                {
                alt170=14;
                }
                break;
            case FIRST:
                {
                alt170=15;
                }
                break;
            case LAST:
                {
                alt170=16;
                }
                break;
            case UNIDIRECTIONAL:
                {
                alt170=17;
                }
                break;
            case RETAINUNION:
                {
                alt170=18;
                }
                break;
            case RETAININTERSECTION:
                {
                alt170=19;
                }
                break;
            case UNTIL:
                {
                alt170=20;
                }
                break;
            case PATTERN:
                {
                alt170=21;
                }
                break;
            case SQL:
                {
                alt170=22;
                }
                break;
            case METADATASQL:
                {
                alt170=23;
                }
                break;
            case PREVIOUS:
                {
                alt170=24;
                }
                break;
            case PRIOR:
                {
                alt170=25;
                }
                break;
            case WEEKDAY:
                {
                alt170=26;
                }
                break;
            case LW:
                {
                alt170=27;
                }
                break;
            case INSTANCEOF:
                {
                alt170=28;
                }
                break;
            case CAST:
                {
                alt170=29;
                }
                break;
            case SNAPSHOT:
                {
                alt170=30;
                }
                break;
            case VARIABLE:
                {
                alt170=31;
                }
                break;
            case WINDOW:
                {
                alt170=32;
                }
                break;
            case LEFT:
                {
                alt170=33;
                }
                break;
            case RIGHT:
                {
                alt170=34;
                }
                break;
            case OUTER:
                {
                alt170=35;
                }
                break;
            case FULL:
                {
                alt170=36;
                }
                break;
            case JOIN:
                {
                alt170=37;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 170, 0, input);

                throw nvae;
            }

            switch (alt170) {
                case 1 :
                    // EsperEPL2Grammar.g:1204:4: i1= IDENT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    i1=(Token)match(input,IDENT,FOLLOW_IDENT_in_keywordAllowedIdent7733); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    i1_tree = (CommonTree)adaptor.create(i1);
                    adaptor.addChild(root_0, i1_tree);
                    }
                    if ( state.backtracking==0 ) {
                       identifier = i1.getText(); 
                    }

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1205:4: AT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    AT480=(Token)match(input,AT,FOLLOW_AT_in_keywordAllowedIdent7740); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AT480_tree = (CommonTree)adaptor.create(AT480);
                    adaptor.addChild(root_0, AT480_tree);
                    }
                    if ( state.backtracking==0 ) {
                       identifier = "at"; 
                    }

                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1206:4: COUNT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    COUNT481=(Token)match(input,COUNT,FOLLOW_COUNT_in_keywordAllowedIdent7747); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COUNT481_tree = (CommonTree)adaptor.create(COUNT481);
                    adaptor.addChild(root_0, COUNT481_tree);
                    }
                    if ( state.backtracking==0 ) {
                       identifier = "count"; 
                    }

                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:1207:4: ESCAPE
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    ESCAPE482=(Token)match(input,ESCAPE,FOLLOW_ESCAPE_in_keywordAllowedIdent7754); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ESCAPE482_tree = (CommonTree)adaptor.create(ESCAPE482);
                    adaptor.addChild(root_0, ESCAPE482_tree);
                    }
                    if ( state.backtracking==0 ) {
                       identifier = "escape"; 
                    }

                    }
                    break;
                case 5 :
                    // EsperEPL2Grammar.g:1208:8: EVERY_EXPR
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    EVERY_EXPR483=(Token)match(input,EVERY_EXPR,FOLLOW_EVERY_EXPR_in_keywordAllowedIdent7765); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EVERY_EXPR483_tree = (CommonTree)adaptor.create(EVERY_EXPR483);
                    adaptor.addChild(root_0, EVERY_EXPR483_tree);
                    }
                    if ( state.backtracking==0 ) {
                       identifier = "every"; 
                    }

                    }
                    break;
                case 6 :
                    // EsperEPL2Grammar.g:1209:4: SUM
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    SUM484=(Token)match(input,SUM,FOLLOW_SUM_in_keywordAllowedIdent7772); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SUM484_tree = (CommonTree)adaptor.create(SUM484);
                    adaptor.addChild(root_0, SUM484_tree);
                    }
                    if ( state.backtracking==0 ) {
                       identifier = "sum"; 
                    }

                    }
                    break;
                case 7 :
                    // EsperEPL2Grammar.g:1210:4: AVG
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    AVG485=(Token)match(input,AVG,FOLLOW_AVG_in_keywordAllowedIdent7779); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AVG485_tree = (CommonTree)adaptor.create(AVG485);
                    adaptor.addChild(root_0, AVG485_tree);
                    }
                    if ( state.backtracking==0 ) {
                       identifier = "avg"; 
                    }

                    }
                    break;
                case 8 :
                    // EsperEPL2Grammar.g:1211:4: MAX
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    MAX486=(Token)match(input,MAX,FOLLOW_MAX_in_keywordAllowedIdent7786); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MAX486_tree = (CommonTree)adaptor.create(MAX486);
                    adaptor.addChild(root_0, MAX486_tree);
                    }
                    if ( state.backtracking==0 ) {
                       identifier = "max"; 
                    }

                    }
                    break;
                case 9 :
                    // EsperEPL2Grammar.g:1212:4: MIN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    MIN487=(Token)match(input,MIN,FOLLOW_MIN_in_keywordAllowedIdent7793); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MIN487_tree = (CommonTree)adaptor.create(MIN487);
                    adaptor.addChild(root_0, MIN487_tree);
                    }
                    if ( state.backtracking==0 ) {
                       identifier = "min"; 
                    }

                    }
                    break;
                case 10 :
                    // EsperEPL2Grammar.g:1213:4: COALESCE
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    COALESCE488=(Token)match(input,COALESCE,FOLLOW_COALESCE_in_keywordAllowedIdent7800); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COALESCE488_tree = (CommonTree)adaptor.create(COALESCE488);
                    adaptor.addChild(root_0, COALESCE488_tree);
                    }
                    if ( state.backtracking==0 ) {
                       identifier = "coalesce"; 
                    }

                    }
                    break;
                case 11 :
                    // EsperEPL2Grammar.g:1214:4: MEDIAN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    MEDIAN489=(Token)match(input,MEDIAN,FOLLOW_MEDIAN_in_keywordAllowedIdent7807); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MEDIAN489_tree = (CommonTree)adaptor.create(MEDIAN489);
                    adaptor.addChild(root_0, MEDIAN489_tree);
                    }
                    if ( state.backtracking==0 ) {
                       identifier = "median"; 
                    }

                    }
                    break;
                case 12 :
                    // EsperEPL2Grammar.g:1215:4: STDDEV
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    STDDEV490=(Token)match(input,STDDEV,FOLLOW_STDDEV_in_keywordAllowedIdent7814); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STDDEV490_tree = (CommonTree)adaptor.create(STDDEV490);
                    adaptor.addChild(root_0, STDDEV490_tree);
                    }
                    if ( state.backtracking==0 ) {
                       identifier = "stddev"; 
                    }

                    }
                    break;
                case 13 :
                    // EsperEPL2Grammar.g:1216:4: AVEDEV
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    AVEDEV491=(Token)match(input,AVEDEV,FOLLOW_AVEDEV_in_keywordAllowedIdent7821); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AVEDEV491_tree = (CommonTree)adaptor.create(AVEDEV491);
                    adaptor.addChild(root_0, AVEDEV491_tree);
                    }
                    if ( state.backtracking==0 ) {
                       identifier = "avedev"; 
                    }

                    }
                    break;
                case 14 :
                    // EsperEPL2Grammar.g:1217:4: EVENTS
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    EVENTS492=(Token)match(input,EVENTS,FOLLOW_EVENTS_in_keywordAllowedIdent7828); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EVENTS492_tree = (CommonTree)adaptor.create(EVENTS492);
                    adaptor.addChild(root_0, EVENTS492_tree);
                    }
                    if ( state.backtracking==0 ) {
                       identifier = "events"; 
                    }

                    }
                    break;
                case 15 :
                    // EsperEPL2Grammar.g:1218:4: FIRST
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    FIRST493=(Token)match(input,FIRST,FOLLOW_FIRST_in_keywordAllowedIdent7835); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FIRST493_tree = (CommonTree)adaptor.create(FIRST493);
                    adaptor.addChild(root_0, FIRST493_tree);
                    }
                    if ( state.backtracking==0 ) {
                       identifier = "first"; 
                    }

                    }
                    break;
                case 16 :
                    // EsperEPL2Grammar.g:1219:4: LAST
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    LAST494=(Token)match(input,LAST,FOLLOW_LAST_in_keywordAllowedIdent7842); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LAST494_tree = (CommonTree)adaptor.create(LAST494);
                    adaptor.addChild(root_0, LAST494_tree);
                    }
                    if ( state.backtracking==0 ) {
                       identifier = "last"; 
                    }

                    }
                    break;
                case 17 :
                    // EsperEPL2Grammar.g:1220:4: UNIDIRECTIONAL
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    UNIDIRECTIONAL495=(Token)match(input,UNIDIRECTIONAL,FOLLOW_UNIDIRECTIONAL_in_keywordAllowedIdent7849); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    UNIDIRECTIONAL495_tree = (CommonTree)adaptor.create(UNIDIRECTIONAL495);
                    adaptor.addChild(root_0, UNIDIRECTIONAL495_tree);
                    }
                    if ( state.backtracking==0 ) {
                       identifier = "unidirectional"; 
                    }

                    }
                    break;
                case 18 :
                    // EsperEPL2Grammar.g:1221:4: RETAINUNION
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    RETAINUNION496=(Token)match(input,RETAINUNION,FOLLOW_RETAINUNION_in_keywordAllowedIdent7856); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RETAINUNION496_tree = (CommonTree)adaptor.create(RETAINUNION496);
                    adaptor.addChild(root_0, RETAINUNION496_tree);
                    }
                    if ( state.backtracking==0 ) {
                       identifier = "retain-union"; 
                    }

                    }
                    break;
                case 19 :
                    // EsperEPL2Grammar.g:1222:4: RETAININTERSECTION
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    RETAININTERSECTION497=(Token)match(input,RETAININTERSECTION,FOLLOW_RETAININTERSECTION_in_keywordAllowedIdent7863); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RETAININTERSECTION497_tree = (CommonTree)adaptor.create(RETAININTERSECTION497);
                    adaptor.addChild(root_0, RETAININTERSECTION497_tree);
                    }
                    if ( state.backtracking==0 ) {
                       identifier = "retain-intersection"; 
                    }

                    }
                    break;
                case 20 :
                    // EsperEPL2Grammar.g:1223:4: UNTIL
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    UNTIL498=(Token)match(input,UNTIL,FOLLOW_UNTIL_in_keywordAllowedIdent7870); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    UNTIL498_tree = (CommonTree)adaptor.create(UNTIL498);
                    adaptor.addChild(root_0, UNTIL498_tree);
                    }
                    if ( state.backtracking==0 ) {
                       identifier = "until"; 
                    }

                    }
                    break;
                case 21 :
                    // EsperEPL2Grammar.g:1224:4: PATTERN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    PATTERN499=(Token)match(input,PATTERN,FOLLOW_PATTERN_in_keywordAllowedIdent7877); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PATTERN499_tree = (CommonTree)adaptor.create(PATTERN499);
                    adaptor.addChild(root_0, PATTERN499_tree);
                    }
                    if ( state.backtracking==0 ) {
                       identifier = "pattern"; 
                    }

                    }
                    break;
                case 22 :
                    // EsperEPL2Grammar.g:1225:4: SQL
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    SQL500=(Token)match(input,SQL,FOLLOW_SQL_in_keywordAllowedIdent7884); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SQL500_tree = (CommonTree)adaptor.create(SQL500);
                    adaptor.addChild(root_0, SQL500_tree);
                    }
                    if ( state.backtracking==0 ) {
                       identifier = "sql"; 
                    }

                    }
                    break;
                case 23 :
                    // EsperEPL2Grammar.g:1226:4: METADATASQL
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    METADATASQL501=(Token)match(input,METADATASQL,FOLLOW_METADATASQL_in_keywordAllowedIdent7891); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    METADATASQL501_tree = (CommonTree)adaptor.create(METADATASQL501);
                    adaptor.addChild(root_0, METADATASQL501_tree);
                    }
                    if ( state.backtracking==0 ) {
                       identifier = "metadatasql"; 
                    }

                    }
                    break;
                case 24 :
                    // EsperEPL2Grammar.g:1227:4: PREVIOUS
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    PREVIOUS502=(Token)match(input,PREVIOUS,FOLLOW_PREVIOUS_in_keywordAllowedIdent7898); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PREVIOUS502_tree = (CommonTree)adaptor.create(PREVIOUS502);
                    adaptor.addChild(root_0, PREVIOUS502_tree);
                    }
                    if ( state.backtracking==0 ) {
                       identifier = "prev"; 
                    }

                    }
                    break;
                case 25 :
                    // EsperEPL2Grammar.g:1228:4: PRIOR
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    PRIOR503=(Token)match(input,PRIOR,FOLLOW_PRIOR_in_keywordAllowedIdent7905); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PRIOR503_tree = (CommonTree)adaptor.create(PRIOR503);
                    adaptor.addChild(root_0, PRIOR503_tree);
                    }
                    if ( state.backtracking==0 ) {
                       identifier = "prior"; 
                    }

                    }
                    break;
                case 26 :
                    // EsperEPL2Grammar.g:1229:4: WEEKDAY
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    WEEKDAY504=(Token)match(input,WEEKDAY,FOLLOW_WEEKDAY_in_keywordAllowedIdent7912); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    WEEKDAY504_tree = (CommonTree)adaptor.create(WEEKDAY504);
                    adaptor.addChild(root_0, WEEKDAY504_tree);
                    }
                    if ( state.backtracking==0 ) {
                       identifier = "weekday"; 
                    }

                    }
                    break;
                case 27 :
                    // EsperEPL2Grammar.g:1230:4: LW
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    LW505=(Token)match(input,LW,FOLLOW_LW_in_keywordAllowedIdent7919); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LW505_tree = (CommonTree)adaptor.create(LW505);
                    adaptor.addChild(root_0, LW505_tree);
                    }
                    if ( state.backtracking==0 ) {
                       identifier = "lastweekday"; 
                    }

                    }
                    break;
                case 28 :
                    // EsperEPL2Grammar.g:1231:4: INSTANCEOF
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    INSTANCEOF506=(Token)match(input,INSTANCEOF,FOLLOW_INSTANCEOF_in_keywordAllowedIdent7926); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INSTANCEOF506_tree = (CommonTree)adaptor.create(INSTANCEOF506);
                    adaptor.addChild(root_0, INSTANCEOF506_tree);
                    }
                    if ( state.backtracking==0 ) {
                       identifier = "instanceof"; 
                    }

                    }
                    break;
                case 29 :
                    // EsperEPL2Grammar.g:1232:4: CAST
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    CAST507=(Token)match(input,CAST,FOLLOW_CAST_in_keywordAllowedIdent7933); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CAST507_tree = (CommonTree)adaptor.create(CAST507);
                    adaptor.addChild(root_0, CAST507_tree);
                    }
                    if ( state.backtracking==0 ) {
                       identifier = "cast"; 
                    }

                    }
                    break;
                case 30 :
                    // EsperEPL2Grammar.g:1233:4: SNAPSHOT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    SNAPSHOT508=(Token)match(input,SNAPSHOT,FOLLOW_SNAPSHOT_in_keywordAllowedIdent7940); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SNAPSHOT508_tree = (CommonTree)adaptor.create(SNAPSHOT508);
                    adaptor.addChild(root_0, SNAPSHOT508_tree);
                    }
                    if ( state.backtracking==0 ) {
                       identifier = "snapshot"; 
                    }

                    }
                    break;
                case 31 :
                    // EsperEPL2Grammar.g:1234:4: VARIABLE
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    VARIABLE509=(Token)match(input,VARIABLE,FOLLOW_VARIABLE_in_keywordAllowedIdent7947); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    VARIABLE509_tree = (CommonTree)adaptor.create(VARIABLE509);
                    adaptor.addChild(root_0, VARIABLE509_tree);
                    }
                    if ( state.backtracking==0 ) {
                       identifier = "variable"; 
                    }

                    }
                    break;
                case 32 :
                    // EsperEPL2Grammar.g:1235:4: WINDOW
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    WINDOW510=(Token)match(input,WINDOW,FOLLOW_WINDOW_in_keywordAllowedIdent7956); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    WINDOW510_tree = (CommonTree)adaptor.create(WINDOW510);
                    adaptor.addChild(root_0, WINDOW510_tree);
                    }
                    if ( state.backtracking==0 ) {
                       identifier = "window"; 
                    }

                    }
                    break;
                case 33 :
                    // EsperEPL2Grammar.g:1236:4: LEFT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    LEFT511=(Token)match(input,LEFT,FOLLOW_LEFT_in_keywordAllowedIdent7963); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LEFT511_tree = (CommonTree)adaptor.create(LEFT511);
                    adaptor.addChild(root_0, LEFT511_tree);
                    }
                    if ( state.backtracking==0 ) {
                       identifier = "left"; 
                    }

                    }
                    break;
                case 34 :
                    // EsperEPL2Grammar.g:1237:4: RIGHT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    RIGHT512=(Token)match(input,RIGHT,FOLLOW_RIGHT_in_keywordAllowedIdent7970); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RIGHT512_tree = (CommonTree)adaptor.create(RIGHT512);
                    adaptor.addChild(root_0, RIGHT512_tree);
                    }
                    if ( state.backtracking==0 ) {
                       identifier = "right"; 
                    }

                    }
                    break;
                case 35 :
                    // EsperEPL2Grammar.g:1238:4: OUTER
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    OUTER513=(Token)match(input,OUTER,FOLLOW_OUTER_in_keywordAllowedIdent7977); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    OUTER513_tree = (CommonTree)adaptor.create(OUTER513);
                    adaptor.addChild(root_0, OUTER513_tree);
                    }
                    if ( state.backtracking==0 ) {
                       identifier = "outer"; 
                    }

                    }
                    break;
                case 36 :
                    // EsperEPL2Grammar.g:1239:4: FULL
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    FULL514=(Token)match(input,FULL,FOLLOW_FULL_in_keywordAllowedIdent7984); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FULL514_tree = (CommonTree)adaptor.create(FULL514);
                    adaptor.addChild(root_0, FULL514_tree);
                    }
                    if ( state.backtracking==0 ) {
                       identifier = "full"; 
                    }

                    }
                    break;
                case 37 :
                    // EsperEPL2Grammar.g:1240:4: JOIN
                    {
                    JOIN515=(Token)match(input,JOIN,FOLLOW_JOIN_in_keywordAllowedIdent7991); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_JOIN.add(JOIN515);

                    if ( state.backtracking==0 ) {
                       identifier = "join"; 
                    }


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1241:2: -> ^( IDENT[identifier] )
                    {
                        // EsperEPL2Grammar.g:1241:5: ^( IDENT[identifier] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IDENT, identifier), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "keywordAllowedIdent"

    public static class timePeriod_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "timePeriod"
    // EsperEPL2Grammar.g:1244:1: timePeriod : ( dayPart ( hourPart )? ( minutePart )? ( secondPart )? ( millisecondPart )? | hourPart ( minutePart )? ( secondPart )? ( millisecondPart )? | minutePart ( secondPart )? ( millisecondPart )? | secondPart ( millisecondPart )? | millisecondPart ) -> ^( TIME_PERIOD ( dayPart )? ( hourPart )? ( minutePart )? ( secondPart )? ( millisecondPart )? ) ;
    public final EsperEPL2GrammarParser.timePeriod_return timePeriod() throws RecognitionException {
        EsperEPL2GrammarParser.timePeriod_return retval = new EsperEPL2GrammarParser.timePeriod_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.dayPart_return dayPart516 = null;

        EsperEPL2GrammarParser.hourPart_return hourPart517 = null;

        EsperEPL2GrammarParser.minutePart_return minutePart518 = null;

        EsperEPL2GrammarParser.secondPart_return secondPart519 = null;

        EsperEPL2GrammarParser.millisecondPart_return millisecondPart520 = null;

        EsperEPL2GrammarParser.hourPart_return hourPart521 = null;

        EsperEPL2GrammarParser.minutePart_return minutePart522 = null;

        EsperEPL2GrammarParser.secondPart_return secondPart523 = null;

        EsperEPL2GrammarParser.millisecondPart_return millisecondPart524 = null;

        EsperEPL2GrammarParser.minutePart_return minutePart525 = null;

        EsperEPL2GrammarParser.secondPart_return secondPart526 = null;

        EsperEPL2GrammarParser.millisecondPart_return millisecondPart527 = null;

        EsperEPL2GrammarParser.secondPart_return secondPart528 = null;

        EsperEPL2GrammarParser.millisecondPart_return millisecondPart529 = null;

        EsperEPL2GrammarParser.millisecondPart_return millisecondPart530 = null;


        RewriteRuleSubtreeStream stream_secondPart=new RewriteRuleSubtreeStream(adaptor,"rule secondPart");
        RewriteRuleSubtreeStream stream_minutePart=new RewriteRuleSubtreeStream(adaptor,"rule minutePart");
        RewriteRuleSubtreeStream stream_millisecondPart=new RewriteRuleSubtreeStream(adaptor,"rule millisecondPart");
        RewriteRuleSubtreeStream stream_dayPart=new RewriteRuleSubtreeStream(adaptor,"rule dayPart");
        RewriteRuleSubtreeStream stream_hourPart=new RewriteRuleSubtreeStream(adaptor,"rule hourPart");
        try {
            // EsperEPL2Grammar.g:1245:2: ( ( dayPart ( hourPart )? ( minutePart )? ( secondPart )? ( millisecondPart )? | hourPart ( minutePart )? ( secondPart )? ( millisecondPart )? | minutePart ( secondPart )? ( millisecondPart )? | secondPart ( millisecondPart )? | millisecondPart ) -> ^( TIME_PERIOD ( dayPart )? ( hourPart )? ( minutePart )? ( secondPart )? ( millisecondPart )? ) )
            // EsperEPL2Grammar.g:1246:2: ( dayPart ( hourPart )? ( minutePart )? ( secondPart )? ( millisecondPart )? | hourPart ( minutePart )? ( secondPart )? ( millisecondPart )? | minutePart ( secondPart )? ( millisecondPart )? | secondPart ( millisecondPart )? | millisecondPart )
            {
            // EsperEPL2Grammar.g:1246:2: ( dayPart ( hourPart )? ( minutePart )? ( secondPart )? ( millisecondPart )? | hourPart ( minutePart )? ( secondPart )? ( millisecondPart )? | minutePart ( secondPart )? ( millisecondPart )? | secondPart ( millisecondPart )? | millisecondPart )
            int alt181=5;
            switch ( input.LA(1) ) {
            case NUM_INT:
                {
                switch ( input.LA(2) ) {
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt181=2;
                    }
                    break;
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt181=3;
                    }
                    break;
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt181=4;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt181=1;
                    }
                    break;
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt181=5;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 181, 1, input);

                    throw nvae;
                }

                }
                break;
            case NUM_LONG:
                {
                switch ( input.LA(2) ) {
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt181=3;
                    }
                    break;
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt181=2;
                    }
                    break;
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt181=4;
                    }
                    break;
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt181=5;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt181=1;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 181, 2, input);

                    throw nvae;
                }

                }
                break;
            case NUM_FLOAT:
                {
                switch ( input.LA(2) ) {
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt181=5;
                    }
                    break;
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt181=4;
                    }
                    break;
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt181=2;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt181=1;
                    }
                    break;
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt181=3;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 181, 3, input);

                    throw nvae;
                }

                }
                break;
            case NUM_DOUBLE:
                {
                switch ( input.LA(2) ) {
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt181=5;
                    }
                    break;
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt181=4;
                    }
                    break;
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt181=2;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt181=1;
                    }
                    break;
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt181=3;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 181, 4, input);

                    throw nvae;
                }

                }
                break;
            case IDENT:
                {
                switch ( input.LA(2) ) {
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt181=5;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt181=1;
                    }
                    break;
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt181=3;
                    }
                    break;
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt181=2;
                    }
                    break;
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt181=4;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 181, 5, input);

                    throw nvae;
                }

                }
                break;
            case QUESTION:
                {
                switch ( input.LA(2) ) {
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt181=3;
                    }
                    break;
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt181=2;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt181=1;
                    }
                    break;
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt181=4;
                    }
                    break;
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt181=5;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 181, 6, input);

                    throw nvae;
                }

                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 181, 0, input);

                throw nvae;
            }

            switch (alt181) {
                case 1 :
                    // EsperEPL2Grammar.g:1247:3: dayPart ( hourPart )? ( minutePart )? ( secondPart )? ( millisecondPart )?
                    {
                    pushFollow(FOLLOW_dayPart_in_timePeriod8023);
                    dayPart516=dayPart();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_dayPart.add(dayPart516.getTree());
                    // EsperEPL2Grammar.g:1247:11: ( hourPart )?
                    int alt171=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA171_1 = input.LA(2);

                            if ( ((LA171_1>=TIMEPERIOD_HOUR && LA171_1<=TIMEPERIOD_HOURS)) ) {
                                alt171=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA171_2 = input.LA(2);

                            if ( ((LA171_2>=TIMEPERIOD_HOUR && LA171_2<=TIMEPERIOD_HOURS)) ) {
                                alt171=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA171_3 = input.LA(2);

                            if ( ((LA171_3>=TIMEPERIOD_HOUR && LA171_3<=TIMEPERIOD_HOURS)) ) {
                                alt171=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA171_4 = input.LA(2);

                            if ( ((LA171_4>=TIMEPERIOD_HOUR && LA171_4<=TIMEPERIOD_HOURS)) ) {
                                alt171=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA171_5 = input.LA(2);

                            if ( ((LA171_5>=TIMEPERIOD_HOUR && LA171_5<=TIMEPERIOD_HOURS)) ) {
                                alt171=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA171_6 = input.LA(2);

                            if ( ((LA171_6>=TIMEPERIOD_HOUR && LA171_6<=TIMEPERIOD_HOURS)) ) {
                                alt171=1;
                            }
                            }
                            break;
                    }

                    switch (alt171) {
                        case 1 :
                            // EsperEPL2Grammar.g:1247:11: hourPart
                            {
                            pushFollow(FOLLOW_hourPart_in_timePeriod8025);
                            hourPart517=hourPart();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_hourPart.add(hourPart517.getTree());

                            }
                            break;

                    }

                    // EsperEPL2Grammar.g:1247:21: ( minutePart )?
                    int alt172=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA172_1 = input.LA(2);

                            if ( (LA172_1==MIN||(LA172_1>=TIMEPERIOD_MINUTE && LA172_1<=TIMEPERIOD_MINUTES)) ) {
                                alt172=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA172_2 = input.LA(2);

                            if ( (LA172_2==MIN||(LA172_2>=TIMEPERIOD_MINUTE && LA172_2<=TIMEPERIOD_MINUTES)) ) {
                                alt172=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA172_3 = input.LA(2);

                            if ( (LA172_3==MIN||(LA172_3>=TIMEPERIOD_MINUTE && LA172_3<=TIMEPERIOD_MINUTES)) ) {
                                alt172=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA172_4 = input.LA(2);

                            if ( (LA172_4==MIN||(LA172_4>=TIMEPERIOD_MINUTE && LA172_4<=TIMEPERIOD_MINUTES)) ) {
                                alt172=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA172_5 = input.LA(2);

                            if ( (LA172_5==MIN||(LA172_5>=TIMEPERIOD_MINUTE && LA172_5<=TIMEPERIOD_MINUTES)) ) {
                                alt172=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA172_6 = input.LA(2);

                            if ( (LA172_6==MIN||(LA172_6>=TIMEPERIOD_MINUTE && LA172_6<=TIMEPERIOD_MINUTES)) ) {
                                alt172=1;
                            }
                            }
                            break;
                    }

                    switch (alt172) {
                        case 1 :
                            // EsperEPL2Grammar.g:1247:21: minutePart
                            {
                            pushFollow(FOLLOW_minutePart_in_timePeriod8028);
                            minutePart518=minutePart();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_minutePart.add(minutePart518.getTree());

                            }
                            break;

                    }

                    // EsperEPL2Grammar.g:1247:33: ( secondPart )?
                    int alt173=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA173_1 = input.LA(2);

                            if ( ((LA173_1>=TIMEPERIOD_SEC && LA173_1<=TIMEPERIOD_SECONDS)) ) {
                                alt173=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA173_2 = input.LA(2);

                            if ( ((LA173_2>=TIMEPERIOD_SEC && LA173_2<=TIMEPERIOD_SECONDS)) ) {
                                alt173=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA173_3 = input.LA(2);

                            if ( ((LA173_3>=TIMEPERIOD_SEC && LA173_3<=TIMEPERIOD_SECONDS)) ) {
                                alt173=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA173_4 = input.LA(2);

                            if ( ((LA173_4>=TIMEPERIOD_SEC && LA173_4<=TIMEPERIOD_SECONDS)) ) {
                                alt173=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA173_5 = input.LA(2);

                            if ( ((LA173_5>=TIMEPERIOD_SEC && LA173_5<=TIMEPERIOD_SECONDS)) ) {
                                alt173=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA173_6 = input.LA(2);

                            if ( ((LA173_6>=TIMEPERIOD_SEC && LA173_6<=TIMEPERIOD_SECONDS)) ) {
                                alt173=1;
                            }
                            }
                            break;
                    }

                    switch (alt173) {
                        case 1 :
                            // EsperEPL2Grammar.g:1247:33: secondPart
                            {
                            pushFollow(FOLLOW_secondPart_in_timePeriod8031);
                            secondPart519=secondPart();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_secondPart.add(secondPart519.getTree());

                            }
                            break;

                    }

                    // EsperEPL2Grammar.g:1247:45: ( millisecondPart )?
                    int alt174=2;
                    int LA174_0 = input.LA(1);

                    if ( (LA174_0==NUM_DOUBLE||LA174_0==IDENT||LA174_0==NUM_INT||LA174_0==QUESTION||(LA174_0>=NUM_LONG && LA174_0<=NUM_FLOAT)) ) {
                        alt174=1;
                    }
                    switch (alt174) {
                        case 1 :
                            // EsperEPL2Grammar.g:1247:45: millisecondPart
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod8034);
                            millisecondPart520=millisecondPart();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart520.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1248:4: hourPart ( minutePart )? ( secondPart )? ( millisecondPart )?
                    {
                    pushFollow(FOLLOW_hourPart_in_timePeriod8040);
                    hourPart521=hourPart();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_hourPart.add(hourPart521.getTree());
                    // EsperEPL2Grammar.g:1248:13: ( minutePart )?
                    int alt175=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA175_1 = input.LA(2);

                            if ( (LA175_1==MIN||(LA175_1>=TIMEPERIOD_MINUTE && LA175_1<=TIMEPERIOD_MINUTES)) ) {
                                alt175=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA175_2 = input.LA(2);

                            if ( (LA175_2==MIN||(LA175_2>=TIMEPERIOD_MINUTE && LA175_2<=TIMEPERIOD_MINUTES)) ) {
                                alt175=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA175_3 = input.LA(2);

                            if ( (LA175_3==MIN||(LA175_3>=TIMEPERIOD_MINUTE && LA175_3<=TIMEPERIOD_MINUTES)) ) {
                                alt175=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA175_4 = input.LA(2);

                            if ( (LA175_4==MIN||(LA175_4>=TIMEPERIOD_MINUTE && LA175_4<=TIMEPERIOD_MINUTES)) ) {
                                alt175=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA175_5 = input.LA(2);

                            if ( (LA175_5==MIN||(LA175_5>=TIMEPERIOD_MINUTE && LA175_5<=TIMEPERIOD_MINUTES)) ) {
                                alt175=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA175_6 = input.LA(2);

                            if ( (LA175_6==MIN||(LA175_6>=TIMEPERIOD_MINUTE && LA175_6<=TIMEPERIOD_MINUTES)) ) {
                                alt175=1;
                            }
                            }
                            break;
                    }

                    switch (alt175) {
                        case 1 :
                            // EsperEPL2Grammar.g:1248:13: minutePart
                            {
                            pushFollow(FOLLOW_minutePart_in_timePeriod8042);
                            minutePart522=minutePart();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_minutePart.add(minutePart522.getTree());

                            }
                            break;

                    }

                    // EsperEPL2Grammar.g:1248:25: ( secondPart )?
                    int alt176=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA176_1 = input.LA(2);

                            if ( ((LA176_1>=TIMEPERIOD_SEC && LA176_1<=TIMEPERIOD_SECONDS)) ) {
                                alt176=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA176_2 = input.LA(2);

                            if ( ((LA176_2>=TIMEPERIOD_SEC && LA176_2<=TIMEPERIOD_SECONDS)) ) {
                                alt176=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA176_3 = input.LA(2);

                            if ( ((LA176_3>=TIMEPERIOD_SEC && LA176_3<=TIMEPERIOD_SECONDS)) ) {
                                alt176=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA176_4 = input.LA(2);

                            if ( ((LA176_4>=TIMEPERIOD_SEC && LA176_4<=TIMEPERIOD_SECONDS)) ) {
                                alt176=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA176_5 = input.LA(2);

                            if ( ((LA176_5>=TIMEPERIOD_SEC && LA176_5<=TIMEPERIOD_SECONDS)) ) {
                                alt176=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA176_6 = input.LA(2);

                            if ( ((LA176_6>=TIMEPERIOD_SEC && LA176_6<=TIMEPERIOD_SECONDS)) ) {
                                alt176=1;
                            }
                            }
                            break;
                    }

                    switch (alt176) {
                        case 1 :
                            // EsperEPL2Grammar.g:1248:25: secondPart
                            {
                            pushFollow(FOLLOW_secondPart_in_timePeriod8045);
                            secondPart523=secondPart();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_secondPart.add(secondPart523.getTree());

                            }
                            break;

                    }

                    // EsperEPL2Grammar.g:1248:37: ( millisecondPart )?
                    int alt177=2;
                    int LA177_0 = input.LA(1);

                    if ( (LA177_0==NUM_DOUBLE||LA177_0==IDENT||LA177_0==NUM_INT||LA177_0==QUESTION||(LA177_0>=NUM_LONG && LA177_0<=NUM_FLOAT)) ) {
                        alt177=1;
                    }
                    switch (alt177) {
                        case 1 :
                            // EsperEPL2Grammar.g:1248:37: millisecondPart
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod8048);
                            millisecondPart524=millisecondPart();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart524.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1249:4: minutePart ( secondPart )? ( millisecondPart )?
                    {
                    pushFollow(FOLLOW_minutePart_in_timePeriod8054);
                    minutePart525=minutePart();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_minutePart.add(minutePart525.getTree());
                    // EsperEPL2Grammar.g:1249:15: ( secondPart )?
                    int alt178=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA178_1 = input.LA(2);

                            if ( ((LA178_1>=TIMEPERIOD_SEC && LA178_1<=TIMEPERIOD_SECONDS)) ) {
                                alt178=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA178_2 = input.LA(2);

                            if ( ((LA178_2>=TIMEPERIOD_SEC && LA178_2<=TIMEPERIOD_SECONDS)) ) {
                                alt178=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA178_3 = input.LA(2);

                            if ( ((LA178_3>=TIMEPERIOD_SEC && LA178_3<=TIMEPERIOD_SECONDS)) ) {
                                alt178=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA178_4 = input.LA(2);

                            if ( ((LA178_4>=TIMEPERIOD_SEC && LA178_4<=TIMEPERIOD_SECONDS)) ) {
                                alt178=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA178_5 = input.LA(2);

                            if ( ((LA178_5>=TIMEPERIOD_SEC && LA178_5<=TIMEPERIOD_SECONDS)) ) {
                                alt178=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA178_6 = input.LA(2);

                            if ( ((LA178_6>=TIMEPERIOD_SEC && LA178_6<=TIMEPERIOD_SECONDS)) ) {
                                alt178=1;
                            }
                            }
                            break;
                    }

                    switch (alt178) {
                        case 1 :
                            // EsperEPL2Grammar.g:1249:15: secondPart
                            {
                            pushFollow(FOLLOW_secondPart_in_timePeriod8056);
                            secondPart526=secondPart();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_secondPart.add(secondPart526.getTree());

                            }
                            break;

                    }

                    // EsperEPL2Grammar.g:1249:27: ( millisecondPart )?
                    int alt179=2;
                    int LA179_0 = input.LA(1);

                    if ( (LA179_0==NUM_DOUBLE||LA179_0==IDENT||LA179_0==NUM_INT||LA179_0==QUESTION||(LA179_0>=NUM_LONG && LA179_0<=NUM_FLOAT)) ) {
                        alt179=1;
                    }
                    switch (alt179) {
                        case 1 :
                            // EsperEPL2Grammar.g:1249:27: millisecondPart
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod8059);
                            millisecondPart527=millisecondPart();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart527.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:1250:4: secondPart ( millisecondPart )?
                    {
                    pushFollow(FOLLOW_secondPart_in_timePeriod8065);
                    secondPart528=secondPart();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_secondPart.add(secondPart528.getTree());
                    // EsperEPL2Grammar.g:1250:15: ( millisecondPart )?
                    int alt180=2;
                    int LA180_0 = input.LA(1);

                    if ( (LA180_0==NUM_DOUBLE||LA180_0==IDENT||LA180_0==NUM_INT||LA180_0==QUESTION||(LA180_0>=NUM_LONG && LA180_0<=NUM_FLOAT)) ) {
                        alt180=1;
                    }
                    switch (alt180) {
                        case 1 :
                            // EsperEPL2Grammar.g:1250:15: millisecondPart
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod8067);
                            millisecondPart529=millisecondPart();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart529.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 5 :
                    // EsperEPL2Grammar.g:1251:4: millisecondPart
                    {
                    pushFollow(FOLLOW_millisecondPart_in_timePeriod8073);
                    millisecondPart530=millisecondPart();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart530.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: millisecondPart, minutePart, secondPart, dayPart, hourPart
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1253:3: -> ^( TIME_PERIOD ( dayPart )? ( hourPart )? ( minutePart )? ( secondPart )? ( millisecondPart )? )
            {
                // EsperEPL2Grammar.g:1253:6: ^( TIME_PERIOD ( dayPart )? ( hourPart )? ( minutePart )? ( secondPart )? ( millisecondPart )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TIME_PERIOD, "TIME_PERIOD"), root_1);

                // EsperEPL2Grammar.g:1253:20: ( dayPart )?
                if ( stream_dayPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_dayPart.nextTree());

                }
                stream_dayPart.reset();
                // EsperEPL2Grammar.g:1253:29: ( hourPart )?
                if ( stream_hourPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_hourPart.nextTree());

                }
                stream_hourPart.reset();
                // EsperEPL2Grammar.g:1253:39: ( minutePart )?
                if ( stream_minutePart.hasNext() ) {
                    adaptor.addChild(root_1, stream_minutePart.nextTree());

                }
                stream_minutePart.reset();
                // EsperEPL2Grammar.g:1253:51: ( secondPart )?
                if ( stream_secondPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_secondPart.nextTree());

                }
                stream_secondPart.reset();
                // EsperEPL2Grammar.g:1253:63: ( millisecondPart )?
                if ( stream_millisecondPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_millisecondPart.nextTree());

                }
                stream_millisecondPart.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "timePeriod"

    public static class dayPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dayPart"
    // EsperEPL2Grammar.g:1256:1: dayPart : ( number | i= IDENT | substitution ) ( TIMEPERIOD_DAYS | TIMEPERIOD_DAY ) -> {i!= null}? ^( DAY_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( DAY_PART ( number )? ( substitution )? ) ;
    public final EsperEPL2GrammarParser.dayPart_return dayPart() throws RecognitionException {
        EsperEPL2GrammarParser.dayPart_return retval = new EsperEPL2GrammarParser.dayPart_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token TIMEPERIOD_DAYS533=null;
        Token TIMEPERIOD_DAY534=null;
        EsperEPL2GrammarParser.number_return number531 = null;

        EsperEPL2GrammarParser.substitution_return substitution532 = null;


        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_DAYS533_tree=null;
        CommonTree TIMEPERIOD_DAY534_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_DAY=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_DAY");
        RewriteRuleTokenStream stream_TIMEPERIOD_DAYS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_DAYS");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            // EsperEPL2Grammar.g:1257:2: ( ( number | i= IDENT | substitution ) ( TIMEPERIOD_DAYS | TIMEPERIOD_DAY ) -> {i!= null}? ^( DAY_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( DAY_PART ( number )? ( substitution )? ) )
            // EsperEPL2Grammar.g:1257:4: ( number | i= IDENT | substitution ) ( TIMEPERIOD_DAYS | TIMEPERIOD_DAY )
            {
            // EsperEPL2Grammar.g:1257:4: ( number | i= IDENT | substitution )
            int alt182=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt182=1;
                }
                break;
            case IDENT:
                {
                alt182=2;
                }
                break;
            case QUESTION:
                {
                alt182=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 182, 0, input);

                throw nvae;
            }

            switch (alt182) {
                case 1 :
                    // EsperEPL2Grammar.g:1257:5: number
                    {
                    pushFollow(FOLLOW_number_in_dayPart8111);
                    number531=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number531.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1257:12: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_dayPart8115); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1257:20: substitution
                    {
                    pushFollow(FOLLOW_substitution_in_dayPart8117);
                    substitution532=substitution();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution532.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:1257:34: ( TIMEPERIOD_DAYS | TIMEPERIOD_DAY )
            int alt183=2;
            int LA183_0 = input.LA(1);

            if ( (LA183_0==TIMEPERIOD_DAYS) ) {
                alt183=1;
            }
            else if ( (LA183_0==TIMEPERIOD_DAY) ) {
                alt183=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 183, 0, input);

                throw nvae;
            }
            switch (alt183) {
                case 1 :
                    // EsperEPL2Grammar.g:1257:35: TIMEPERIOD_DAYS
                    {
                    TIMEPERIOD_DAYS533=(Token)match(input,TIMEPERIOD_DAYS,FOLLOW_TIMEPERIOD_DAYS_in_dayPart8121); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_DAYS.add(TIMEPERIOD_DAYS533);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1257:53: TIMEPERIOD_DAY
                    {
                    TIMEPERIOD_DAY534=(Token)match(input,TIMEPERIOD_DAY,FOLLOW_TIMEPERIOD_DAY_in_dayPart8125); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_DAY.add(TIMEPERIOD_DAY534);


                    }
                    break;

            }



            // AST REWRITE
            // elements: substitution, i, number
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1258:3: -> {i!= null}? ^( DAY_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
            if (i!= null) {
                // EsperEPL2Grammar.g:1258:18: ^( DAY_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DAY_PART, "DAY_PART"), root_1);

                // EsperEPL2Grammar.g:1258:29: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1258:47: ^( EVENT_PROP_SIMPLE $i)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1259:3: -> ^( DAY_PART ( number )? ( substitution )? )
            {
                // EsperEPL2Grammar.g:1259:6: ^( DAY_PART ( number )? ( substitution )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DAY_PART, "DAY_PART"), root_1);

                // EsperEPL2Grammar.g:1259:17: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:1259:25: ( substitution )?
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());

                }
                stream_substitution.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "dayPart"

    public static class hourPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "hourPart"
    // EsperEPL2Grammar.g:1262:1: hourPart : ( number | i= IDENT | substitution ) ( TIMEPERIOD_HOURS | TIMEPERIOD_HOUR ) -> {i!= null}? ^( HOUR_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( HOUR_PART ( number )? ( substitution )? ) ;
    public final EsperEPL2GrammarParser.hourPart_return hourPart() throws RecognitionException {
        EsperEPL2GrammarParser.hourPart_return retval = new EsperEPL2GrammarParser.hourPart_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token TIMEPERIOD_HOURS537=null;
        Token TIMEPERIOD_HOUR538=null;
        EsperEPL2GrammarParser.number_return number535 = null;

        EsperEPL2GrammarParser.substitution_return substitution536 = null;


        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_HOURS537_tree=null;
        CommonTree TIMEPERIOD_HOUR538_tree=null;
        RewriteRuleTokenStream stream_TIMEPERIOD_HOURS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_HOURS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_HOUR=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_HOUR");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            // EsperEPL2Grammar.g:1263:2: ( ( number | i= IDENT | substitution ) ( TIMEPERIOD_HOURS | TIMEPERIOD_HOUR ) -> {i!= null}? ^( HOUR_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( HOUR_PART ( number )? ( substitution )? ) )
            // EsperEPL2Grammar.g:1263:4: ( number | i= IDENT | substitution ) ( TIMEPERIOD_HOURS | TIMEPERIOD_HOUR )
            {
            // EsperEPL2Grammar.g:1263:4: ( number | i= IDENT | substitution )
            int alt184=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt184=1;
                }
                break;
            case IDENT:
                {
                alt184=2;
                }
                break;
            case QUESTION:
                {
                alt184=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 184, 0, input);

                throw nvae;
            }

            switch (alt184) {
                case 1 :
                    // EsperEPL2Grammar.g:1263:5: number
                    {
                    pushFollow(FOLLOW_number_in_hourPart8174);
                    number535=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number535.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1263:12: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_hourPart8178); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1263:20: substitution
                    {
                    pushFollow(FOLLOW_substitution_in_hourPart8180);
                    substitution536=substitution();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution536.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:1263:34: ( TIMEPERIOD_HOURS | TIMEPERIOD_HOUR )
            int alt185=2;
            int LA185_0 = input.LA(1);

            if ( (LA185_0==TIMEPERIOD_HOURS) ) {
                alt185=1;
            }
            else if ( (LA185_0==TIMEPERIOD_HOUR) ) {
                alt185=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 185, 0, input);

                throw nvae;
            }
            switch (alt185) {
                case 1 :
                    // EsperEPL2Grammar.g:1263:35: TIMEPERIOD_HOURS
                    {
                    TIMEPERIOD_HOURS537=(Token)match(input,TIMEPERIOD_HOURS,FOLLOW_TIMEPERIOD_HOURS_in_hourPart8184); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_HOURS.add(TIMEPERIOD_HOURS537);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1263:54: TIMEPERIOD_HOUR
                    {
                    TIMEPERIOD_HOUR538=(Token)match(input,TIMEPERIOD_HOUR,FOLLOW_TIMEPERIOD_HOUR_in_hourPart8188); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_HOUR.add(TIMEPERIOD_HOUR538);


                    }
                    break;

            }



            // AST REWRITE
            // elements: i, substitution, number
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1264:3: -> {i!= null}? ^( HOUR_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
            if (i!= null) {
                // EsperEPL2Grammar.g:1264:18: ^( HOUR_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(HOUR_PART, "HOUR_PART"), root_1);

                // EsperEPL2Grammar.g:1264:30: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1264:48: ^( EVENT_PROP_SIMPLE $i)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1265:3: -> ^( HOUR_PART ( number )? ( substitution )? )
            {
                // EsperEPL2Grammar.g:1265:6: ^( HOUR_PART ( number )? ( substitution )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(HOUR_PART, "HOUR_PART"), root_1);

                // EsperEPL2Grammar.g:1265:18: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:1265:26: ( substitution )?
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());

                }
                stream_substitution.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "hourPart"

    public static class minutePart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "minutePart"
    // EsperEPL2Grammar.g:1268:1: minutePart : ( number | i= IDENT | substitution ) ( TIMEPERIOD_MINUTES | TIMEPERIOD_MINUTE | MIN ) -> {i!= null}? ^( MINUTE_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( MINUTE_PART ( number )? ( substitution )? ) ;
    public final EsperEPL2GrammarParser.minutePart_return minutePart() throws RecognitionException {
        EsperEPL2GrammarParser.minutePart_return retval = new EsperEPL2GrammarParser.minutePart_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token TIMEPERIOD_MINUTES541=null;
        Token TIMEPERIOD_MINUTE542=null;
        Token MIN543=null;
        EsperEPL2GrammarParser.number_return number539 = null;

        EsperEPL2GrammarParser.substitution_return substitution540 = null;


        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_MINUTES541_tree=null;
        CommonTree TIMEPERIOD_MINUTE542_tree=null;
        CommonTree MIN543_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_MINUTE=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MINUTE");
        RewriteRuleTokenStream stream_MIN=new RewriteRuleTokenStream(adaptor,"token MIN");
        RewriteRuleTokenStream stream_TIMEPERIOD_MINUTES=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MINUTES");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            // EsperEPL2Grammar.g:1269:2: ( ( number | i= IDENT | substitution ) ( TIMEPERIOD_MINUTES | TIMEPERIOD_MINUTE | MIN ) -> {i!= null}? ^( MINUTE_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( MINUTE_PART ( number )? ( substitution )? ) )
            // EsperEPL2Grammar.g:1269:4: ( number | i= IDENT | substitution ) ( TIMEPERIOD_MINUTES | TIMEPERIOD_MINUTE | MIN )
            {
            // EsperEPL2Grammar.g:1269:4: ( number | i= IDENT | substitution )
            int alt186=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt186=1;
                }
                break;
            case IDENT:
                {
                alt186=2;
                }
                break;
            case QUESTION:
                {
                alt186=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 186, 0, input);

                throw nvae;
            }

            switch (alt186) {
                case 1 :
                    // EsperEPL2Grammar.g:1269:5: number
                    {
                    pushFollow(FOLLOW_number_in_minutePart8237);
                    number539=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number539.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1269:12: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_minutePart8241); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1269:20: substitution
                    {
                    pushFollow(FOLLOW_substitution_in_minutePart8243);
                    substitution540=substitution();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution540.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:1269:34: ( TIMEPERIOD_MINUTES | TIMEPERIOD_MINUTE | MIN )
            int alt187=3;
            switch ( input.LA(1) ) {
            case TIMEPERIOD_MINUTES:
                {
                alt187=1;
                }
                break;
            case TIMEPERIOD_MINUTE:
                {
                alt187=2;
                }
                break;
            case MIN:
                {
                alt187=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 187, 0, input);

                throw nvae;
            }

            switch (alt187) {
                case 1 :
                    // EsperEPL2Grammar.g:1269:35: TIMEPERIOD_MINUTES
                    {
                    TIMEPERIOD_MINUTES541=(Token)match(input,TIMEPERIOD_MINUTES,FOLLOW_TIMEPERIOD_MINUTES_in_minutePart8247); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MINUTES.add(TIMEPERIOD_MINUTES541);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1269:56: TIMEPERIOD_MINUTE
                    {
                    TIMEPERIOD_MINUTE542=(Token)match(input,TIMEPERIOD_MINUTE,FOLLOW_TIMEPERIOD_MINUTE_in_minutePart8251); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MINUTE.add(TIMEPERIOD_MINUTE542);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1269:76: MIN
                    {
                    MIN543=(Token)match(input,MIN,FOLLOW_MIN_in_minutePart8255); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MIN.add(MIN543);


                    }
                    break;

            }



            // AST REWRITE
            // elements: number, i, substitution
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1270:3: -> {i!= null}? ^( MINUTE_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
            if (i!= null) {
                // EsperEPL2Grammar.g:1270:18: ^( MINUTE_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MINUTE_PART, "MINUTE_PART"), root_1);

                // EsperEPL2Grammar.g:1270:32: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1270:50: ^( EVENT_PROP_SIMPLE $i)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1271:3: -> ^( MINUTE_PART ( number )? ( substitution )? )
            {
                // EsperEPL2Grammar.g:1271:6: ^( MINUTE_PART ( number )? ( substitution )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MINUTE_PART, "MINUTE_PART"), root_1);

                // EsperEPL2Grammar.g:1271:20: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:1271:28: ( substitution )?
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());

                }
                stream_substitution.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "minutePart"

    public static class secondPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "secondPart"
    // EsperEPL2Grammar.g:1274:1: secondPart : ( number | i= IDENT | substitution ) ( TIMEPERIOD_SECONDS | TIMEPERIOD_SECOND | TIMEPERIOD_SEC ) -> {i!= null}? ^( SECOND_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( SECOND_PART ( number )? ( substitution )? ) ;
    public final EsperEPL2GrammarParser.secondPart_return secondPart() throws RecognitionException {
        EsperEPL2GrammarParser.secondPart_return retval = new EsperEPL2GrammarParser.secondPart_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token TIMEPERIOD_SECONDS546=null;
        Token TIMEPERIOD_SECOND547=null;
        Token TIMEPERIOD_SEC548=null;
        EsperEPL2GrammarParser.number_return number544 = null;

        EsperEPL2GrammarParser.substitution_return substitution545 = null;


        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_SECONDS546_tree=null;
        CommonTree TIMEPERIOD_SECOND547_tree=null;
        CommonTree TIMEPERIOD_SEC548_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_SEC=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SEC");
        RewriteRuleTokenStream stream_TIMEPERIOD_SECOND=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SECOND");
        RewriteRuleTokenStream stream_TIMEPERIOD_SECONDS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SECONDS");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            // EsperEPL2Grammar.g:1275:2: ( ( number | i= IDENT | substitution ) ( TIMEPERIOD_SECONDS | TIMEPERIOD_SECOND | TIMEPERIOD_SEC ) -> {i!= null}? ^( SECOND_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( SECOND_PART ( number )? ( substitution )? ) )
            // EsperEPL2Grammar.g:1275:4: ( number | i= IDENT | substitution ) ( TIMEPERIOD_SECONDS | TIMEPERIOD_SECOND | TIMEPERIOD_SEC )
            {
            // EsperEPL2Grammar.g:1275:4: ( number | i= IDENT | substitution )
            int alt188=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt188=1;
                }
                break;
            case IDENT:
                {
                alt188=2;
                }
                break;
            case QUESTION:
                {
                alt188=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 188, 0, input);

                throw nvae;
            }

            switch (alt188) {
                case 1 :
                    // EsperEPL2Grammar.g:1275:5: number
                    {
                    pushFollow(FOLLOW_number_in_secondPart8305);
                    number544=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number544.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1275:12: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_secondPart8309); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1275:20: substitution
                    {
                    pushFollow(FOLLOW_substitution_in_secondPart8311);
                    substitution545=substitution();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution545.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:1275:34: ( TIMEPERIOD_SECONDS | TIMEPERIOD_SECOND | TIMEPERIOD_SEC )
            int alt189=3;
            switch ( input.LA(1) ) {
            case TIMEPERIOD_SECONDS:
                {
                alt189=1;
                }
                break;
            case TIMEPERIOD_SECOND:
                {
                alt189=2;
                }
                break;
            case TIMEPERIOD_SEC:
                {
                alt189=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 189, 0, input);

                throw nvae;
            }

            switch (alt189) {
                case 1 :
                    // EsperEPL2Grammar.g:1275:35: TIMEPERIOD_SECONDS
                    {
                    TIMEPERIOD_SECONDS546=(Token)match(input,TIMEPERIOD_SECONDS,FOLLOW_TIMEPERIOD_SECONDS_in_secondPart8315); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SECONDS.add(TIMEPERIOD_SECONDS546);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1275:56: TIMEPERIOD_SECOND
                    {
                    TIMEPERIOD_SECOND547=(Token)match(input,TIMEPERIOD_SECOND,FOLLOW_TIMEPERIOD_SECOND_in_secondPart8319); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SECOND.add(TIMEPERIOD_SECOND547);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1275:76: TIMEPERIOD_SEC
                    {
                    TIMEPERIOD_SEC548=(Token)match(input,TIMEPERIOD_SEC,FOLLOW_TIMEPERIOD_SEC_in_secondPart8323); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SEC.add(TIMEPERIOD_SEC548);


                    }
                    break;

            }



            // AST REWRITE
            // elements: number, substitution, i
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1276:3: -> {i!= null}? ^( SECOND_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
            if (i!= null) {
                // EsperEPL2Grammar.g:1276:18: ^( SECOND_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SECOND_PART, "SECOND_PART"), root_1);

                // EsperEPL2Grammar.g:1276:32: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1276:50: ^( EVENT_PROP_SIMPLE $i)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1277:3: -> ^( SECOND_PART ( number )? ( substitution )? )
            {
                // EsperEPL2Grammar.g:1277:6: ^( SECOND_PART ( number )? ( substitution )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SECOND_PART, "SECOND_PART"), root_1);

                // EsperEPL2Grammar.g:1277:20: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:1277:28: ( substitution )?
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());

                }
                stream_substitution.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "secondPart"

    public static class millisecondPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "millisecondPart"
    // EsperEPL2Grammar.g:1280:1: millisecondPart : ( number | i= IDENT | substitution ) ( TIMEPERIOD_MILLISECONDS | TIMEPERIOD_MILLISECOND | TIMEPERIOD_MILLISEC ) -> {i!= null}? ^( MILLISECOND_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( MILLISECOND_PART ( number )? ( substitution )? ) ;
    public final EsperEPL2GrammarParser.millisecondPart_return millisecondPart() throws RecognitionException {
        EsperEPL2GrammarParser.millisecondPart_return retval = new EsperEPL2GrammarParser.millisecondPart_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token TIMEPERIOD_MILLISECONDS551=null;
        Token TIMEPERIOD_MILLISECOND552=null;
        Token TIMEPERIOD_MILLISEC553=null;
        EsperEPL2GrammarParser.number_return number549 = null;

        EsperEPL2GrammarParser.substitution_return substitution550 = null;


        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_MILLISECONDS551_tree=null;
        CommonTree TIMEPERIOD_MILLISECOND552_tree=null;
        CommonTree TIMEPERIOD_MILLISEC553_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_MILLISEC=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MILLISEC");
        RewriteRuleTokenStream stream_TIMEPERIOD_MILLISECOND=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MILLISECOND");
        RewriteRuleTokenStream stream_TIMEPERIOD_MILLISECONDS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MILLISECONDS");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            // EsperEPL2Grammar.g:1281:2: ( ( number | i= IDENT | substitution ) ( TIMEPERIOD_MILLISECONDS | TIMEPERIOD_MILLISECOND | TIMEPERIOD_MILLISEC ) -> {i!= null}? ^( MILLISECOND_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( MILLISECOND_PART ( number )? ( substitution )? ) )
            // EsperEPL2Grammar.g:1281:4: ( number | i= IDENT | substitution ) ( TIMEPERIOD_MILLISECONDS | TIMEPERIOD_MILLISECOND | TIMEPERIOD_MILLISEC )
            {
            // EsperEPL2Grammar.g:1281:4: ( number | i= IDENT | substitution )
            int alt190=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt190=1;
                }
                break;
            case IDENT:
                {
                alt190=2;
                }
                break;
            case QUESTION:
                {
                alt190=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 190, 0, input);

                throw nvae;
            }

            switch (alt190) {
                case 1 :
                    // EsperEPL2Grammar.g:1281:5: number
                    {
                    pushFollow(FOLLOW_number_in_millisecondPart8373);
                    number549=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number549.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1281:12: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_millisecondPart8377); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1281:20: substitution
                    {
                    pushFollow(FOLLOW_substitution_in_millisecondPart8379);
                    substitution550=substitution();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution550.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:1281:34: ( TIMEPERIOD_MILLISECONDS | TIMEPERIOD_MILLISECOND | TIMEPERIOD_MILLISEC )
            int alt191=3;
            switch ( input.LA(1) ) {
            case TIMEPERIOD_MILLISECONDS:
                {
                alt191=1;
                }
                break;
            case TIMEPERIOD_MILLISECOND:
                {
                alt191=2;
                }
                break;
            case TIMEPERIOD_MILLISEC:
                {
                alt191=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 191, 0, input);

                throw nvae;
            }

            switch (alt191) {
                case 1 :
                    // EsperEPL2Grammar.g:1281:35: TIMEPERIOD_MILLISECONDS
                    {
                    TIMEPERIOD_MILLISECONDS551=(Token)match(input,TIMEPERIOD_MILLISECONDS,FOLLOW_TIMEPERIOD_MILLISECONDS_in_millisecondPart8383); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MILLISECONDS.add(TIMEPERIOD_MILLISECONDS551);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1281:61: TIMEPERIOD_MILLISECOND
                    {
                    TIMEPERIOD_MILLISECOND552=(Token)match(input,TIMEPERIOD_MILLISECOND,FOLLOW_TIMEPERIOD_MILLISECOND_in_millisecondPart8387); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MILLISECOND.add(TIMEPERIOD_MILLISECOND552);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1281:86: TIMEPERIOD_MILLISEC
                    {
                    TIMEPERIOD_MILLISEC553=(Token)match(input,TIMEPERIOD_MILLISEC,FOLLOW_TIMEPERIOD_MILLISEC_in_millisecondPart8391); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MILLISEC.add(TIMEPERIOD_MILLISEC553);


                    }
                    break;

            }



            // AST REWRITE
            // elements: substitution, number, i
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1282:3: -> {i!= null}? ^( MILLISECOND_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
            if (i!= null) {
                // EsperEPL2Grammar.g:1282:18: ^( MILLISECOND_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MILLISECOND_PART, "MILLISECOND_PART"), root_1);

                // EsperEPL2Grammar.g:1282:37: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1282:55: ^( EVENT_PROP_SIMPLE $i)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1283:3: -> ^( MILLISECOND_PART ( number )? ( substitution )? )
            {
                // EsperEPL2Grammar.g:1283:6: ^( MILLISECOND_PART ( number )? ( substitution )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MILLISECOND_PART, "MILLISECOND_PART"), root_1);

                // EsperEPL2Grammar.g:1283:25: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:1283:33: ( substitution )?
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());

                }
                stream_substitution.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "millisecondPart"

    public static class number_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "number"
    // EsperEPL2Grammar.g:1286:1: number : (ni= NUM_INT -> INT_TYPE[$ni] | nl= NUM_LONG -> LONG_TYPE[$nl] | nf= NUM_FLOAT -> FLOAT_TYPE[$nf] | nd= NUM_DOUBLE -> DOUBLE_TYPE[$nd] );
    public final EsperEPL2GrammarParser.number_return number() throws RecognitionException {
        EsperEPL2GrammarParser.number_return retval = new EsperEPL2GrammarParser.number_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token ni=null;
        Token nl=null;
        Token nf=null;
        Token nd=null;

        CommonTree ni_tree=null;
        CommonTree nl_tree=null;
        CommonTree nf_tree=null;
        CommonTree nd_tree=null;
        RewriteRuleTokenStream stream_NUM_LONG=new RewriteRuleTokenStream(adaptor,"token NUM_LONG");
        RewriteRuleTokenStream stream_NUM_DOUBLE=new RewriteRuleTokenStream(adaptor,"token NUM_DOUBLE");
        RewriteRuleTokenStream stream_NUM_FLOAT=new RewriteRuleTokenStream(adaptor,"token NUM_FLOAT");
        RewriteRuleTokenStream stream_NUM_INT=new RewriteRuleTokenStream(adaptor,"token NUM_INT");

        try {
            // EsperEPL2Grammar.g:1287:5: (ni= NUM_INT -> INT_TYPE[$ni] | nl= NUM_LONG -> LONG_TYPE[$nl] | nf= NUM_FLOAT -> FLOAT_TYPE[$nf] | nd= NUM_DOUBLE -> DOUBLE_TYPE[$nd] )
            int alt192=4;
            switch ( input.LA(1) ) {
            case NUM_INT:
                {
                alt192=1;
                }
                break;
            case NUM_LONG:
                {
                alt192=2;
                }
                break;
            case NUM_FLOAT:
                {
                alt192=3;
                }
                break;
            case NUM_DOUBLE:
                {
                alt192=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 192, 0, input);

                throw nvae;
            }

            switch (alt192) {
                case 1 :
                    // EsperEPL2Grammar.g:1287:9: ni= NUM_INT
                    {
                    ni=(Token)match(input,NUM_INT,FOLLOW_NUM_INT_in_number8446); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_INT.add(ni);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1287:20: -> INT_TYPE[$ni]
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(INT_TYPE, ni));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1288:9: nl= NUM_LONG
                    {
                    nl=(Token)match(input,NUM_LONG,FOLLOW_NUM_LONG_in_number8463); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_LONG.add(nl);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1288:21: -> LONG_TYPE[$nl]
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(LONG_TYPE, nl));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1289:9: nf= NUM_FLOAT
                    {
                    nf=(Token)match(input,NUM_FLOAT,FOLLOW_NUM_FLOAT_in_number8480); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_FLOAT.add(nf);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1289:22: -> FLOAT_TYPE[$nf]
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(FLOAT_TYPE, nf));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:1290:9: nd= NUM_DOUBLE
                    {
                    nd=(Token)match(input,NUM_DOUBLE,FOLLOW_NUM_DOUBLE_in_number8497); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_DOUBLE.add(nd);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1290:23: -> DOUBLE_TYPE[$nd]
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(DOUBLE_TYPE, nd));

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "number"

    public static class substitution_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "substitution"
    // EsperEPL2Grammar.g:1293:1: substitution : q= QUESTION -> SUBSTITUTION[$q] ;
    public final EsperEPL2GrammarParser.substitution_return substitution() throws RecognitionException {
        EsperEPL2GrammarParser.substitution_return retval = new EsperEPL2GrammarParser.substitution_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token q=null;

        CommonTree q_tree=null;
        RewriteRuleTokenStream stream_QUESTION=new RewriteRuleTokenStream(adaptor,"token QUESTION");

        try {
            // EsperEPL2Grammar.g:1294:2: (q= QUESTION -> SUBSTITUTION[$q] )
            // EsperEPL2Grammar.g:1294:4: q= QUESTION
            {
            q=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_substitution8518); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_QUESTION.add(q);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1294:15: -> SUBSTITUTION[$q]
            {
                adaptor.addChild(root_0, (CommonTree)adaptor.create(SUBSTITUTION, q));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "substitution"

    public static class constant_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "constant"
    // EsperEPL2Grammar.g:1297:1: constant : ( numberconstant | stringconstant | t= BOOLEAN_TRUE -> ^( BOOL_TYPE[$t] ) | f= BOOLEAN_FALSE -> ^( BOOL_TYPE[$f] ) | nu= VALUE_NULL -> ^( NULL_TYPE[$nu] ) );
    public final EsperEPL2GrammarParser.constant_return constant() throws RecognitionException {
        EsperEPL2GrammarParser.constant_return retval = new EsperEPL2GrammarParser.constant_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token t=null;
        Token f=null;
        Token nu=null;
        EsperEPL2GrammarParser.numberconstant_return numberconstant554 = null;

        EsperEPL2GrammarParser.stringconstant_return stringconstant555 = null;


        CommonTree t_tree=null;
        CommonTree f_tree=null;
        CommonTree nu_tree=null;
        RewriteRuleTokenStream stream_BOOLEAN_TRUE=new RewriteRuleTokenStream(adaptor,"token BOOLEAN_TRUE");
        RewriteRuleTokenStream stream_VALUE_NULL=new RewriteRuleTokenStream(adaptor,"token VALUE_NULL");
        RewriteRuleTokenStream stream_BOOLEAN_FALSE=new RewriteRuleTokenStream(adaptor,"token BOOLEAN_FALSE");

        try {
            // EsperEPL2Grammar.g:1298:2: ( numberconstant | stringconstant | t= BOOLEAN_TRUE -> ^( BOOL_TYPE[$t] ) | f= BOOLEAN_FALSE -> ^( BOOL_TYPE[$f] ) | nu= VALUE_NULL -> ^( NULL_TYPE[$nu] ) )
            int alt193=5;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case PLUS:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt193=1;
                }
                break;
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
                {
                alt193=2;
                }
                break;
            case BOOLEAN_TRUE:
                {
                alt193=3;
                }
                break;
            case BOOLEAN_FALSE:
                {
                alt193=4;
                }
                break;
            case VALUE_NULL:
                {
                alt193=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 193, 0, input);

                throw nvae;
            }

            switch (alt193) {
                case 1 :
                    // EsperEPL2Grammar.g:1298:6: numberconstant
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_numberconstant_in_constant8537);
                    numberconstant554=numberconstant();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numberconstant554.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1299:6: stringconstant
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_stringconstant_in_constant8544);
                    stringconstant555=stringconstant();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stringconstant555.getTree());

                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1300:10: t= BOOLEAN_TRUE
                    {
                    t=(Token)match(input,BOOLEAN_TRUE,FOLLOW_BOOLEAN_TRUE_in_constant8557); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BOOLEAN_TRUE.add(t);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1300:25: -> ^( BOOL_TYPE[$t] )
                    {
                        // EsperEPL2Grammar.g:1300:28: ^( BOOL_TYPE[$t] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BOOL_TYPE, t), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:1301:10: f= BOOLEAN_FALSE
                    {
                    f=(Token)match(input,BOOLEAN_FALSE,FOLLOW_BOOLEAN_FALSE_in_constant8577); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BOOLEAN_FALSE.add(f);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1301:26: -> ^( BOOL_TYPE[$f] )
                    {
                        // EsperEPL2Grammar.g:1301:29: ^( BOOL_TYPE[$f] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BOOL_TYPE, f), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    // EsperEPL2Grammar.g:1302:10: nu= VALUE_NULL
                    {
                    nu=(Token)match(input,VALUE_NULL,FOLLOW_VALUE_NULL_in_constant8597); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_VALUE_NULL.add(nu);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1302:24: -> ^( NULL_TYPE[$nu] )
                    {
                        // EsperEPL2Grammar.g:1302:27: ^( NULL_TYPE[$nu] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NULL_TYPE, nu), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "constant"

    public static class numberconstant_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "numberconstant"
    // EsperEPL2Grammar.g:1305:1: numberconstant : (m= MINUS | p= PLUS )? number -> {$m != null}? -> number ;
    public final EsperEPL2GrammarParser.numberconstant_return numberconstant() throws RecognitionException {
        EsperEPL2GrammarParser.numberconstant_return retval = new EsperEPL2GrammarParser.numberconstant_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token m=null;
        Token p=null;
        EsperEPL2GrammarParser.number_return number556 = null;


        CommonTree m_tree=null;
        CommonTree p_tree=null;
        RewriteRuleTokenStream stream_PLUS=new RewriteRuleTokenStream(adaptor,"token PLUS");
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        try {
            // EsperEPL2Grammar.g:1306:2: ( (m= MINUS | p= PLUS )? number -> {$m != null}? -> number )
            // EsperEPL2Grammar.g:1306:5: (m= MINUS | p= PLUS )? number
            {
            // EsperEPL2Grammar.g:1306:5: (m= MINUS | p= PLUS )?
            int alt194=3;
            int LA194_0 = input.LA(1);

            if ( (LA194_0==MINUS) ) {
                alt194=1;
            }
            else if ( (LA194_0==PLUS) ) {
                alt194=2;
            }
            switch (alt194) {
                case 1 :
                    // EsperEPL2Grammar.g:1306:6: m= MINUS
                    {
                    m=(Token)match(input,MINUS,FOLLOW_MINUS_in_numberconstant8619); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MINUS.add(m);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1306:16: p= PLUS
                    {
                    p=(Token)match(input,PLUS,FOLLOW_PLUS_in_numberconstant8625); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PLUS.add(p);


                    }
                    break;

            }

            pushFollow(FOLLOW_number_in_numberconstant8629);
            number556=number();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_number.add(number556.getTree());


            // AST REWRITE
            // elements: number
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1307:3: -> {$m != null}?
            if (m != null) {
                adaptor.addChild(root_0, adaptor.create((number556!=null?((CommonTree)number556.tree):null).getType(), "-" + (number556!=null?input.toString(number556.start,number556.stop):null)));

            }
            else // 1308:3: -> number
            {
                adaptor.addChild(root_0, stream_number.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "numberconstant"

    public static class stringconstant_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "stringconstant"
    // EsperEPL2Grammar.g:1311:1: stringconstant : (sl= STRING_LITERAL -> ^( STRING_TYPE[$sl] ) | qsl= QUOTED_STRING_LITERAL -> ^( STRING_TYPE[$qsl] ) );
    public final EsperEPL2GrammarParser.stringconstant_return stringconstant() throws RecognitionException {
        EsperEPL2GrammarParser.stringconstant_return retval = new EsperEPL2GrammarParser.stringconstant_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token sl=null;
        Token qsl=null;

        CommonTree sl_tree=null;
        CommonTree qsl_tree=null;
        RewriteRuleTokenStream stream_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token STRING_LITERAL");
        RewriteRuleTokenStream stream_QUOTED_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token QUOTED_STRING_LITERAL");

        try {
            // EsperEPL2Grammar.g:1312:2: (sl= STRING_LITERAL -> ^( STRING_TYPE[$sl] ) | qsl= QUOTED_STRING_LITERAL -> ^( STRING_TYPE[$qsl] ) )
            int alt195=2;
            int LA195_0 = input.LA(1);

            if ( (LA195_0==STRING_LITERAL) ) {
                alt195=1;
            }
            else if ( (LA195_0==QUOTED_STRING_LITERAL) ) {
                alt195=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 195, 0, input);

                throw nvae;
            }
            switch (alt195) {
                case 1 :
                    // EsperEPL2Grammar.g:1312:6: sl= STRING_LITERAL
                    {
                    sl=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_stringconstant8658); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STRING_LITERAL.add(sl);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1312:24: -> ^( STRING_TYPE[$sl] )
                    {
                        // EsperEPL2Grammar.g:1312:27: ^( STRING_TYPE[$sl] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STRING_TYPE, sl), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1313:6: qsl= QUOTED_STRING_LITERAL
                    {
                    qsl=(Token)match(input,QUOTED_STRING_LITERAL,FOLLOW_QUOTED_STRING_LITERAL_in_stringconstant8674); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUOTED_STRING_LITERAL.add(qsl);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1313:32: -> ^( STRING_TYPE[$qsl] )
                    {
                        // EsperEPL2Grammar.g:1313:35: ^( STRING_TYPE[$qsl] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STRING_TYPE, qsl), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "stringconstant"

    // $ANTLR start synpred1_EsperEPL2Grammar
    public final void synpred1_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:651:4: ( streamSelector )
        // EsperEPL2Grammar.g:651:5: streamSelector
        {
        pushFollow(FOLLOW_streamSelector_in_synpred1_EsperEPL2Grammar2734);
        streamSelector();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred1_EsperEPL2Grammar

    // $ANTLR start synpred2_EsperEPL2Grammar
    public final void synpred2_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:729:7: ( timePeriod )
        // EsperEPL2Grammar.g:729:8: timePeriod
        {
        pushFollow(FOLLOW_timePeriod_in_synpred2_EsperEPL2Grammar3422);
        timePeriod();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred2_EsperEPL2Grammar

    // $ANTLR start synpred3_EsperEPL2Grammar
    public final void synpred3_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:878:4: ( builtinFunc )
        // EsperEPL2Grammar.g:878:5: builtinFunc
        {
        pushFollow(FOLLOW_builtinFunc_in_synpred3_EsperEPL2Grammar4910);
        builtinFunc();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred3_EsperEPL2Grammar

    // $ANTLR start synpred4_EsperEPL2Grammar
    public final void synpred4_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:946:4: ( eventProperty )
        // EsperEPL2Grammar.g:946:5: eventProperty
        {
        pushFollow(FOLLOW_eventProperty_in_synpred4_EsperEPL2Grammar5563);
        eventProperty();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred4_EsperEPL2Grammar

    // $ANTLR start synpred5_EsperEPL2Grammar
    public final void synpred5_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1101:7: ( lastOperand )
        // EsperEPL2Grammar.g:1101:8: lastOperand
        {
        pushFollow(FOLLOW_lastOperand_in_synpred5_EsperEPL2Grammar6851);
        lastOperand();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred5_EsperEPL2Grammar

    // $ANTLR start synpred6_EsperEPL2Grammar
    public final void synpred6_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1102:4: ( lastWeekdayOperand )
        // EsperEPL2Grammar.g:1102:5: lastWeekdayOperand
        {
        pushFollow(FOLLOW_lastWeekdayOperand_in_synpred6_EsperEPL2Grammar6862);
        lastWeekdayOperand();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred6_EsperEPL2Grammar

    // $ANTLR start synpred7_EsperEPL2Grammar
    public final void synpred7_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1103:4: ( timePeriod )
        // EsperEPL2Grammar.g:1103:5: timePeriod
        {
        pushFollow(FOLLOW_timePeriod_in_synpred7_EsperEPL2Grammar6873);
        timePeriod();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred7_EsperEPL2Grammar

    // $ANTLR start synpred8_EsperEPL2Grammar
    public final void synpred8_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1104:4: ( expressionQualifyable )
        // EsperEPL2Grammar.g:1104:5: expressionQualifyable
        {
        pushFollow(FOLLOW_expressionQualifyable_in_synpred8_EsperEPL2Grammar6884);
        expressionQualifyable();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred8_EsperEPL2Grammar

    // $ANTLR start synpred9_EsperEPL2Grammar
    public final void synpred9_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1105:4: ( rangeOperand )
        // EsperEPL2Grammar.g:1105:5: rangeOperand
        {
        pushFollow(FOLLOW_rangeOperand_in_synpred9_EsperEPL2Grammar6895);
        rangeOperand();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred9_EsperEPL2Grammar

    // $ANTLR start synpred10_EsperEPL2Grammar
    public final void synpred10_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1106:5: ( frequencyOperand )
        // EsperEPL2Grammar.g:1106:6: frequencyOperand
        {
        pushFollow(FOLLOW_frequencyOperand_in_synpred10_EsperEPL2Grammar6907);
        frequencyOperand();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred10_EsperEPL2Grammar

    // $ANTLR start synpred11_EsperEPL2Grammar
    public final void synpred11_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1107:4: ( lastOperator )
        // EsperEPL2Grammar.g:1107:5: lastOperator
        {
        pushFollow(FOLLOW_lastOperator_in_synpred11_EsperEPL2Grammar6918);
        lastOperator();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred11_EsperEPL2Grammar

    // $ANTLR start synpred12_EsperEPL2Grammar
    public final void synpred12_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1108:4: ( weekDayOperator )
        // EsperEPL2Grammar.g:1108:5: weekDayOperator
        {
        pushFollow(FOLLOW_weekDayOperator_in_synpred12_EsperEPL2Grammar6929);
        weekDayOperator();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred12_EsperEPL2Grammar

    // $ANTLR start synpred13_EsperEPL2Grammar
    public final void synpred13_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1109:5: ( numericParameterList )
        // EsperEPL2Grammar.g:1109:6: numericParameterList
        {
        pushFollow(FOLLOW_numericParameterList_in_synpred13_EsperEPL2Grammar6942);
        numericParameterList();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred13_EsperEPL2Grammar

    // Delegated rules

    public final boolean synpred3_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred3_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred5_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred5_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred4_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred4_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred7_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred7_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred11_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred11_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred2_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred2_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred12_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred12_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred13_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred13_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred6_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred6_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred10_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred10_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred1_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred1_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred8_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred8_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred9_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred9_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA46 dfa46 = new DFA46(this);
    protected DFA77 dfa77 = new DFA77(this);
    protected DFA101 dfa101 = new DFA101(this);
    protected DFA124 dfa124 = new DFA124(this);
    protected DFA154 dfa154 = new DFA154(this);
    protected DFA168 dfa168 = new DFA168(this);
    static final String DFA46_eotS =
        "\177\uffff";
    static final String DFA46_eofS =
        "\177\uffff";
    static final String DFA46_minS =
        "\1\5\1\uffff\1\6\66\uffff\1\5\105\uffff";
    static final String DFA46_maxS =
        "\1\u00f0\1\uffff\1\u00ee\66\uffff\1\u00d5\105\uffff";
    static final String DFA46_acceptS =
        "\1\uffff\1\1\1\uffff\1\3\125\uffff\1\2\45\uffff";
    static final String DFA46_specialS =
        "\71\uffff\1\0\105\uffff}>";
    static final String[] DFA46_transitionS = {
            "\1\3\4\uffff\1\3\2\uffff\2\3\2\uffff\11\3\1\uffff\1\3\6\uffff"+
            "\1\3\1\uffff\4\3\10\uffff\3\3\10\uffff\16\3\1\uffff\1\3\1\uffff"+
            "\3\3\14\uffff\3\3\157\uffff\1\3\1\uffff\1\2\3\uffff\1\3\1\uffff"+
            "\1\1\3\uffff\2\3\12\uffff\2\3\2\uffff\1\3\1\uffff\1\3\1\uffff"+
            "\1\3\1\uffff\2\3",
            "",
            "\4\3\1\uffff\3\3\2\uffff\1\3\20\uffff\1\3\7\uffff\1\3\u00a6"+
            "\uffff\2\3\1\71\1\3\1\uffff\2\3\4\uffff\16\3\4\uffff\2\3",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\3\4\uffff\1\3\3\uffff\1\3\2\uffff\11\3\10\uffff\1\3\1\uffff"+
            "\4\3\10\uffff\3\3\10\uffff\10\3\1\uffff\4\3\2\uffff\1\3\1\uffff"+
            "\3\3\u0080\uffff\1\3\5\uffff\1\131",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA46_eot = DFA.unpackEncodedString(DFA46_eotS);
    static final short[] DFA46_eof = DFA.unpackEncodedString(DFA46_eofS);
    static final char[] DFA46_min = DFA.unpackEncodedStringToUnsignedChars(DFA46_minS);
    static final char[] DFA46_max = DFA.unpackEncodedStringToUnsignedChars(DFA46_maxS);
    static final short[] DFA46_accept = DFA.unpackEncodedString(DFA46_acceptS);
    static final short[] DFA46_special = DFA.unpackEncodedString(DFA46_specialS);
    static final short[][] DFA46_transition;

    static {
        int numStates = DFA46_transitionS.length;
        DFA46_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA46_transition[i] = DFA.unpackEncodedString(DFA46_transitionS[i]);
        }
    }

    class DFA46 extends DFA {

        public DFA46(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 46;
            this.eot = DFA46_eot;
            this.eof = DFA46_eof;
            this.min = DFA46_min;
            this.max = DFA46_max;
            this.accept = DFA46_accept;
            this.special = DFA46_special;
            this.transition = DFA46_transition;
        }
        public String getDescription() {
            return "648:1: selectionListElement : (s= STAR -> WILDCARD_SELECT[$s] | ( streamSelector )=> streamSelector | expression ( AS i= keywordAllowedIdent )? -> {identifier != null}? ^( SELECTION_ELEMENT_EXPR expression IDENT[identifier] ) -> {identifier == null}? ^( SELECTION_ELEMENT_EXPR expression ) -> ^( SELECTION_ELEMENT_EXPR expression ) );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA46_57 = input.LA(1);

                         
                        int index46_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA46_57==STAR) && (synpred1_EsperEPL2Grammar())) {s = 89;}

                        else if ( (LA46_57==WINDOW||LA46_57==ESCAPE||LA46_57==EVERY_EXPR||(LA46_57>=SUM && LA46_57<=COUNT)||LA46_57==OUTER||(LA46_57>=JOIN && LA46_57<=FULL)||(LA46_57>=EVENTS && LA46_57<=LAST)||(LA46_57>=UNIDIRECTIONAL && LA46_57<=PRIOR)||(LA46_57>=WEEKDAY && LA46_57<=CAST)||LA46_57==SNAPSHOT||(LA46_57>=VARIABLE && LA46_57<=AT)||LA46_57==IDENT) ) {s = 3;}

                         
                        input.seek(index46_57);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 46, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA77_eotS =
        "\160\uffff";
    static final String DFA77_eofS =
        "\160\uffff";
    static final String DFA77_minS =
        "\2\5\156\uffff";
    static final String DFA77_maxS =
        "\2\u00f0\156\uffff";
    static final String DFA77_acceptS =
        "\2\uffff\1\3\65\uffff\1\2\66\uffff\1\1";
    static final String DFA77_specialS =
        "\160\uffff}>";
    static final String[] DFA77_transitionS = {
            "\1\2\4\uffff\1\2\2\uffff\2\2\2\uffff\11\2\1\uffff\1\1\6\uffff"+
            "\1\2\1\uffff\4\2\10\uffff\3\2\10\uffff\16\2\1\uffff\1\2\1\uffff"+
            "\3\2\14\uffff\3\2\157\uffff\1\2\1\uffff\1\2\3\uffff\1\2\5\uffff"+
            "\2\2\12\uffff\2\2\2\uffff\1\2\1\uffff\1\2\1\uffff\1\2\1\uffff"+
            "\2\2",
            "\1\70\4\uffff\1\70\2\uffff\2\70\2\uffff\11\70\1\uffff\1\70"+
            "\2\uffff\1\157\3\uffff\1\70\1\uffff\4\70\10\uffff\3\70\10\uffff"+
            "\16\70\1\uffff\1\70\1\uffff\3\70\14\uffff\3\70\157\uffff\1\70"+
            "\1\uffff\1\70\3\uffff\1\70\5\uffff\2\70\12\uffff\2\70\2\uffff"+
            "\1\70\1\uffff\1\70\1\uffff\1\70\1\uffff\2\70",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA77_eot = DFA.unpackEncodedString(DFA77_eotS);
    static final short[] DFA77_eof = DFA.unpackEncodedString(DFA77_eofS);
    static final char[] DFA77_min = DFA.unpackEncodedStringToUnsignedChars(DFA77_minS);
    static final char[] DFA77_max = DFA.unpackEncodedStringToUnsignedChars(DFA77_maxS);
    static final short[] DFA77_accept = DFA.unpackEncodedString(DFA77_acceptS);
    static final short[] DFA77_special = DFA.unpackEncodedString(DFA77_specialS);
    static final short[][] DFA77_transition;

    static {
        int numStates = DFA77_transitionS.length;
        DFA77_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA77_transition[i] = DFA.unpackEncodedString(DFA77_transitionS[i]);
        }
    }

    class DFA77 extends DFA {

        public DFA77(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 77;
            this.eot = DFA77_eot;
            this.eof = DFA77_eof;
            this.min = DFA77_min;
            this.max = DFA77_max;
            this.accept = DFA77_accept;
            this.special = DFA77_special;
            this.transition = DFA77_transition;
        }
        public String getDescription() {
            return "769:1: caseExpression : ( CASE ( whenClause )+ ( elseClause )? END | CASE expression ( whenClause )+ ( elseClause )? END -> ^( CASE2 expression ( whenClause )+ ( elseClause )? ) | evalOrExpression );";
        }
    }
    static final String DFA101_eotS =
        "\u072e\uffff";
    static final String DFA101_eofS =
        "\20\uffff\1\16\2\uffff\2\16\2\uffff\4\16\12\uffff\2\16\2\uffff"+
        "\2\16\u0703\uffff";
    static final String DFA101_minS =
        "\2\5\13\uffff\1\5\2\uffff\1\6\2\uffff\2\6\2\uffff\4\6\12\uffff"+
        "\2\6\2\uffff\2\6\10\uffff\1\u00d3\143\uffff\1\5\63\uffff\1\5\63"+
        "\uffff\1\5\63\uffff\1\5\63\uffff\1\5\63\uffff\1\5\63\uffff\1\5\63"+
        "\uffff\1\5\63\uffff\1\u00d9\63\uffff\1\5\63\uffff\1\5\63\uffff\1"+
        "\5\2\6\101\uffff\2\6\56\uffff\2\6\67\uffff\2\6\76\uffff\2\6\67\uffff"+
        "\2\6\67\uffff\2\6\56\uffff\2\6\70\uffff\2\6\65\uffff\2\6\133\uffff"+
        "\1\0\30\uffff\1\0\30\uffff\1\0\30\uffff\1\0\30\uffff\1\0\30\uffff"+
        "\1\0\137\uffff\1\0\30\uffff\1\0\30\uffff\1\0\30\uffff\1\0\30\uffff"+
        "\1\0\30\uffff\1\0\u00a3\uffff";
    static final String DFA101_maxS =
        "\2\u00f0\13\uffff\1\u00f0\2\uffff\1\u00ee\2\uffff\2\u00ee\2\uffff"+
        "\4\u00ee\12\uffff\2\u00ee\2\uffff\2\u00ee\10\uffff\1\u00d3\143\uffff"+
        "\1\u00f0\63\uffff\1\u00f0\63\uffff\1\u00f0\63\uffff\1\u00f0\63\uffff"+
        "\1\u00f0\63\uffff\1\u00f0\63\uffff\1\u00f0\63\uffff\1\u00f0\63\uffff"+
        "\1\u00eb\63\uffff\1\u00f0\63\uffff\1\u00f0\63\uffff\1\u00cf\2\u00e8"+
        "\101\uffff\2\u00e8\56\uffff\2\u00e8\67\uffff\2\u00e8\76\uffff\2"+
        "\u00e8\67\uffff\2\u00e8\67\uffff\2\u00e8\56\uffff\2\u00e8\70\uffff"+
        "\2\u00e8\65\uffff\2\u00e8\133\uffff\1\0\30\uffff\1\0\30\uffff\1"+
        "\0\30\uffff\1\0\30\uffff\1\0\30\uffff\1\0\137\uffff\1\0\30\uffff"+
        "\1\0\30\uffff\1\0\30\uffff\1\0\30\uffff\1\0\30\uffff\1\0\u00a3\uffff";
    static final String DFA101_acceptS =
        "\2\uffff\1\2\11\uffff\1\3\1\uffff\1\5\45\uffff\1\6\1\7\1\1\50\uffff"+
        "\1\10\1\4\u0275\uffff\101\6\2\uffff\56\6\2\uffff\67\6\2\uffff\76"+
        "\6\2\uffff\67\6\2\uffff\67\6\2\uffff\56\6\2\uffff\66\6\4\uffff\65"+
        "\6\2\uffff\65\6\1\11\45\6\1\uffff\30\6\1\uffff\30\6\1\uffff\30\6"+
        "\1\uffff\30\6\1\uffff\30\6\1\uffff\61\6\1\uffff\31\6\1\uffff\23"+
        "\6\1\uffff\30\6\1\uffff\30\6\1\uffff\30\6\1\uffff\30\6\1\uffff\30"+
        "\6\1\uffff\5\6\1\uffff\31\6\1\uffff\31\6\1\uffff\62\6\2\uffff\32"+
        "\6\1\uffff\32\6";
    static final String DFA101_specialS =
        "\1\0\u0096\uffff\1\1\63\uffff\1\2\63\uffff\1\3\63\uffff\1\4\63"+
        "\uffff\1\5\63\uffff\1\6\63\uffff\1\7\63\uffff\1\10\63\uffff\1\11"+
        "\63\uffff\1\12\63\uffff\1\13\63\uffff\1\14\1\15\1\16\101\uffff\1"+
        "\17\1\20\56\uffff\1\21\1\22\67\uffff\1\23\1\24\76\uffff\1\25\1\26"+
        "\67\uffff\1\27\1\30\67\uffff\1\31\1\32\56\uffff\1\33\1\34\70\uffff"+
        "\1\35\1\36\65\uffff\1\37\1\40\133\uffff\1\41\30\uffff\1\42\30\uffff"+
        "\1\43\30\uffff\1\44\30\uffff\1\45\30\uffff\1\46\137\uffff\1\47\30"+
        "\uffff\1\50\30\uffff\1\51\30\uffff\1\52\30\uffff\1\53\30\uffff\1"+
        "\54\u00a3\uffff}>";
    static final String[] DFA101_transitionS = {
            "\1\16\4\uffff\1\16\3\uffff\1\16\2\uffff\1\23\1\24\2\16\1\27"+
            "\1\30\1\31\1\32\1\20\10\uffff\1\16\1\uffff\4\16\10\uffff\3\16"+
            "\10\uffff\6\16\1\45\1\46\1\63\2\16\1\51\1\52\1\64\1\uffff\1"+
            "\16\1\uffff\3\16\14\uffff\3\2\157\uffff\1\2\1\uffff\1\16\3\uffff"+
            "\1\15\5\uffff\2\2\12\uffff\1\2\1\1\2\uffff\1\65\1\uffff\1\2"+
            "\1\uffff\1\14\1\uffff\2\2",
            "\1\66\4\uffff\1\66\3\uffff\1\66\2\uffff\11\66\10\uffff\1\66"+
            "\1\uffff\4\66\10\uffff\3\66\10\uffff\10\66\1\uffff\4\66\2\uffff"+
            "\1\66\1\uffff\3\66\176\uffff\1\2\1\uffff\1\66\33\uffff\1\2\3"+
            "\uffff\2\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\140\4\uffff\1\140\2\uffff\2\140\2\uffff\11\140\1\137\1"+
            "\140\6\uffff\1\140\1\uffff\4\140\10\uffff\3\140\10\uffff\16"+
            "\140\1\uffff\1\140\1\uffff\3\140\14\uffff\3\140\157\uffff\1"+
            "\140\1\uffff\1\140\3\uffff\1\140\5\uffff\2\140\12\uffff\2\140"+
            "\2\uffff\1\140\1\uffff\1\140\1\uffff\1\140\1\uffff\2\140",
            "",
            "",
            "\10\16\2\uffff\1\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\2\uffff\1\16\5\uffff\3\16\35\uffff\3\16\6\uffff\1\16\161\uffff"+
            "\3\16\1\u0097\5\16\2\uffff\16\16\1\uffff\1\16\2\uffff\2\16",
            "",
            "",
            "\10\16\2\uffff\1\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\2\uffff\1\16\5\uffff\3\16\35\uffff\3\16\6\uffff\1\16\161\uffff"+
            "\3\16\1\u00cb\5\16\2\uffff\16\16\1\uffff\1\16\2\uffff\2\16",
            "\10\16\2\uffff\1\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\2\uffff\1\16\5\uffff\3\16\35\uffff\3\16\6\uffff\1\16\161\uffff"+
            "\3\16\1\u00ff\5\16\2\uffff\16\16\1\uffff\1\16\2\uffff\2\16",
            "",
            "",
            "\10\16\2\uffff\1\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\2\uffff\1\16\5\uffff\3\16\35\uffff\3\16\6\uffff\1\16\161\uffff"+
            "\3\16\1\u0133\5\16\2\uffff\16\16\1\uffff\1\16\2\uffff\2\16",
            "\10\16\2\uffff\1\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\2\uffff\1\16\5\uffff\3\16\35\uffff\3\16\6\uffff\1\16\161\uffff"+
            "\3\16\1\u0167\5\16\2\uffff\16\16\1\uffff\1\16\2\uffff\2\16",
            "\10\16\2\uffff\1\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\2\uffff\1\16\5\uffff\3\16\35\uffff\3\16\6\uffff\1\16\161\uffff"+
            "\3\16\1\u019b\5\16\2\uffff\16\16\1\uffff\1\16\2\uffff\2\16",
            "\10\16\2\uffff\1\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\2\uffff\1\16\5\uffff\3\16\35\uffff\3\16\6\uffff\1\16\161\uffff"+
            "\3\16\1\u01cf\5\16\2\uffff\16\16\1\uffff\1\16\2\uffff\2\16",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\10\16\2\uffff\1\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\2\uffff\1\16\5\uffff\3\16\35\uffff\3\16\6\uffff\1\16\161\uffff"+
            "\3\16\1\u0203\5\16\2\uffff\16\16\1\uffff\1\16\2\uffff\2\16",
            "\10\16\2\uffff\1\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\2\uffff\1\16\5\uffff\3\16\35\uffff\3\16\6\uffff\1\16\161\uffff"+
            "\3\16\1\u0237\5\16\2\uffff\16\16\1\uffff\1\16\2\uffff\2\16",
            "",
            "",
            "\10\16\2\uffff\1\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\2\uffff\1\16\5\uffff\3\16\35\uffff\3\16\6\uffff\1\16\161\uffff"+
            "\3\16\1\u026b\5\16\2\uffff\16\16\1\uffff\1\16\2\uffff\2\16",
            "\10\16\2\uffff\1\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\2\uffff\1\16\5\uffff\3\16\35\uffff\3\16\6\uffff\1\16\161\uffff"+
            "\3\16\1\u029f\5\16\2\uffff\16\16\1\uffff\1\16\2\uffff\2\16",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u02d3",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0303\4\uffff\1\u02e7\2\uffff\1\u030c\1\u02e8\2\uffff\1"+
            "\u02e9\1\u02ea\1\u02eb\1\u02ec\1\u02ed\1\u02ee\1\u02ef\1\u02f0"+
            "\1\u02e6\1\uffff\1\u02d8\6\uffff\1\u0306\1\uffff\1\u0308\1\u0304"+
            "\1\u0305\1\u0307\5\uffff\1\u02d7\1\u02d6\1\uffff\1\u02f1\1\u02f2"+
            "\1\u02f3\10\uffff\1\u02f4\1\u02f5\1\u02f6\1\u02f8\1\u02f9\1"+
            "\u02fa\1\u02fb\1\u02fc\1\u0309\1\u02fd\1\u02fe\1\u02ff\1\u0300"+
            "\1\u030a\1\uffff\1\u0301\1\uffff\1\u0302\1\u02f7\1\u02e5\14"+
            "\uffff\1\u02df\1\u02e0\1\u02e1\157\uffff\1\u02de\1\uffff\1\u02e4"+
            "\3\uffff\1\u02e3\1\uffff\1\u030d\3\uffff\1\u02d4\1\u02d5\12"+
            "\uffff\1\u02da\1\u02d9\2\uffff\1\u030b\1\uffff\1\u02db\1\uffff"+
            "\1\u02e2\1\uffff\1\u02dc\1\u02dd",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u033d\4\uffff\1\u0321\2\uffff\1\u0346\1\u0322\2\uffff\1"+
            "\u0323\1\u0324\1\u0325\1\u0326\1\u0327\1\u0328\1\u0329\1\u032a"+
            "\1\u0320\1\uffff\1\u0310\6\uffff\1\u0340\1\uffff\1\u0342\1\u033e"+
            "\1\u033f\1\u0341\5\uffff\1\u030f\1\u030e\1\uffff\1\u032b\1\u032c"+
            "\1\u032d\10\uffff\1\u032e\1\u032f\1\u0330\1\u0332\1\u0333\1"+
            "\u0334\1\u0335\1\u0336\1\u0343\1\u0337\1\u0338\1\u0339\1\u033a"+
            "\1\u0344\1\uffff\1\u033b\1\uffff\1\u033c\1\u0331\1\u031f\14"+
            "\uffff\1\u0319\1\u031a\1\u031b\157\uffff\1\u0316\1\uffff\1\u031e"+
            "\3\uffff\1\u031d\5\uffff\1\u0317\1\u0318\12\uffff\1\u0312\1"+
            "\u0311\2\uffff\1\u0345\1\uffff\1\u0313\1\uffff\1\u031c\1\uffff"+
            "\1\u0314\1\u0315",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0376\4\uffff\1\u035a\2\uffff\1\u037f\1\u035b\2\uffff\1"+
            "\u035c\1\u035d\1\u035e\1\u035f\1\u0360\1\u0361\1\u0362\1\u0363"+
            "\1\u0359\1\uffff\1\u034b\6\uffff\1\u0379\1\uffff\1\u037b\1\u0377"+
            "\1\u0378\1\u037a\5\uffff\1\u034a\1\u0349\1\uffff\1\u0364\1\u0365"+
            "\1\u0366\10\uffff\1\u0367\1\u0368\1\u0369\1\u036b\1\u036c\1"+
            "\u036d\1\u036e\1\u036f\1\u037c\1\u0370\1\u0371\1\u0372\1\u0373"+
            "\1\u037d\1\uffff\1\u0374\1\uffff\1\u0375\1\u036a\1\u0358\14"+
            "\uffff\1\u0352\1\u0353\1\u0354\157\uffff\1\u0351\1\uffff\1\u0357"+
            "\3\uffff\1\u0356\5\uffff\1\u0347\1\u0348\12\uffff\1\u034d\1"+
            "\u034c\2\uffff\1\u037e\1\uffff\1\u034e\1\uffff\1\u0355\1\uffff"+
            "\1\u034f\1\u0350",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u03ad\4\uffff\1\u0391\2\uffff\1\u03b6\1\u0392\2\uffff\1"+
            "\u0393\1\u0394\1\u0395\1\u0396\1\u0397\1\u0398\1\u0399\1\u039a"+
            "\1\u0390\1\uffff\1\u0382\6\uffff\1\u03b0\1\uffff\1\u03b2\1\u03ae"+
            "\1\u03af\1\u03b1\10\uffff\1\u039b\1\u039c\1\u039d\10\uffff\1"+
            "\u039e\1\u039f\1\u03a0\1\u03a2\1\u03a3\1\u03a4\1\u03a5\1\u03a6"+
            "\1\u03b3\1\u03a7\1\u03a8\1\u03a9\1\u03aa\1\u03b4\1\uffff\1\u03ab"+
            "\1\uffff\1\u03ac\1\u03a1\1\u038f\14\uffff\1\u0389\1\u038a\1"+
            "\u038b\157\uffff\1\u0388\1\uffff\1\u038e\3\uffff\1\u038d\5\uffff"+
            "\1\u0380\1\u0381\12\uffff\1\u0384\1\u0383\2\uffff\1\u03b5\1"+
            "\uffff\1\u0385\1\uffff\1\u038c\1\uffff\1\u0386\1\u0387",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u03e6\4\uffff\1\u03ca\2\uffff\1\u03ef\1\u03cb\2\uffff\1"+
            "\u03cc\1\u03cd\1\u03ce\1\u03cf\1\u03d0\1\u03d1\1\u03d2\1\u03d3"+
            "\1\u03c9\1\uffff\1\u03b9\6\uffff\1\u03e9\1\uffff\1\u03eb\1\u03e7"+
            "\1\u03e8\1\u03ea\5\uffff\1\u03b8\1\u03b7\1\uffff\1\u03d4\1\u03d5"+
            "\1\u03d6\10\uffff\1\u03d7\1\u03d8\1\u03d9\1\u03db\1\u03dc\1"+
            "\u03dd\1\u03de\1\u03df\1\u03ec\1\u03e0\1\u03e1\1\u03e2\1\u03e3"+
            "\1\u03ed\1\uffff\1\u03e4\1\uffff\1\u03e5\1\u03da\1\u03c8\14"+
            "\uffff\1\u03c2\1\u03c3\1\u03c4\157\uffff\1\u03bf\1\uffff\1\u03c7"+
            "\3\uffff\1\u03c6\5\uffff\1\u03c0\1\u03c1\12\uffff\1\u03bb\1"+
            "\u03ba\2\uffff\1\u03ee\1\uffff\1\u03bc\1\uffff\1\u03c5\1\uffff"+
            "\1\u03bd\1\u03be",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u041f\4\uffff\1\u0403\2\uffff\1\u0428\1\u0404\2\uffff\1"+
            "\u0405\1\u0406\1\u0407\1\u0408\1\u0409\1\u040a\1\u040b\1\u040c"+
            "\1\u0402\1\uffff\1\u03f2\6\uffff\1\u0422\1\uffff\1\u0424\1\u0420"+
            "\1\u0421\1\u0423\5\uffff\1\u03f1\1\u03f0\1\uffff\1\u040d\1\u040e"+
            "\1\u040f\10\uffff\1\u0410\1\u0411\1\u0412\1\u0414\1\u0415\1"+
            "\u0416\1\u0417\1\u0418\1\u0425\1\u0419\1\u041a\1\u041b\1\u041c"+
            "\1\u0426\1\uffff\1\u041d\1\uffff\1\u041e\1\u0413\1\u0401\14"+
            "\uffff\1\u03fb\1\u03fc\1\u03fd\157\uffff\1\u03f8\1\uffff\1\u0400"+
            "\3\uffff\1\u03ff\5\uffff\1\u03f9\1\u03fa\12\uffff\1\u03f4\1"+
            "\u03f3\2\uffff\1\u0427\1\uffff\1\u03f5\1\uffff\1\u03fe\1\uffff"+
            "\1\u03f6\1\u03f7",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0458\4\uffff\1\u043c\2\uffff\1\u0461\1\u043d\2\uffff\1"+
            "\u043e\1\u043f\1\u0440\1\u0441\1\u0442\1\u0443\1\u0444\1\u0445"+
            "\1\u043b\1\uffff\1\u042b\6\uffff\1\u045b\1\uffff\1\u045d\1\u0459"+
            "\1\u045a\1\u045c\5\uffff\1\u042a\1\u0429\1\uffff\1\u0446\1\u0447"+
            "\1\u0448\10\uffff\1\u0449\1\u044a\1\u044b\1\u044d\1\u044e\1"+
            "\u044f\1\u0450\1\u0451\1\u045e\1\u0452\1\u0453\1\u0454\1\u0455"+
            "\1\u045f\1\uffff\1\u0456\1\uffff\1\u0457\1\u044c\1\u043a\14"+
            "\uffff\1\u0434\1\u0435\1\u0436\157\uffff\1\u0431\1\uffff\1\u0439"+
            "\3\uffff\1\u0438\5\uffff\1\u0432\1\u0433\12\uffff\1\u042d\1"+
            "\u042c\2\uffff\1\u0460\1\uffff\1\u042e\1\uffff\1\u0437\1\uffff"+
            "\1\u042f\1\u0430",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u048f\4\uffff\1\u0473\2\uffff\1\u0498\1\u0474\2\uffff\1"+
            "\u0475\1\u0476\1\u0477\1\u0478\1\u0479\1\u047a\1\u047b\1\u047c"+
            "\1\u0472\1\uffff\1\u0464\6\uffff\1\u0492\1\uffff\1\u0494\1\u0490"+
            "\1\u0491\1\u0493\10\uffff\1\u047d\1\u047e\1\u047f\10\uffff\1"+
            "\u0480\1\u0481\1\u0482\1\u0484\1\u0485\1\u0486\1\u0487\1\u0488"+
            "\1\u0495\1\u0489\1\u048a\1\u048b\1\u048c\1\u0496\1\uffff\1\u048d"+
            "\1\uffff\1\u048e\1\u0483\1\u0471\14\uffff\1\u046b\1\u046c\1"+
            "\u046d\157\uffff\1\u046a\1\uffff\1\u0470\3\uffff\1\u046f\5\uffff"+
            "\1\u0462\1\u0463\12\uffff\1\u0466\1\u0465\2\uffff\1\u0497\1"+
            "\uffff\1\u0467\1\uffff\1\u046e\1\uffff\1\u0468\1\u0469",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\2\16\20\uffff\1\u0499",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u04c9\4\uffff\1\u04ad\2\uffff\1\u04d2\1\u04ae\2\uffff\1"+
            "\u04af\1\u04b0\1\u04b1\1\u04b2\1\u04b3\1\u04b4\1\u04b5\1\u04b6"+
            "\1\u04ac\1\uffff\1\u049e\6\uffff\1\u04cc\1\uffff\1\u04ce\1\u04ca"+
            "\1\u04cb\1\u04cd\10\uffff\1\u04b7\1\u04b8\1\u04b9\10\uffff\1"+
            "\u04ba\1\u04bb\1\u04bc\1\u04be\1\u04bf\1\u04c0\1\u04c1\1\u04c2"+
            "\1\u04cf\1\u04c3\1\u04c4\1\u04c5\1\u04c6\1\u04d0\1\uffff\1\u04c7"+
            "\1\uffff\1\u04c8\1\u04bd\1\u04ab\14\uffff\1\u04a5\1\u04a6\1"+
            "\u04a7\157\uffff\1\u04a4\1\uffff\1\u04aa\3\uffff\1\u04a9\5\uffff"+
            "\1\u049c\1\u049d\12\uffff\1\u04a0\1\u049f\2\uffff\1\u04d1\1"+
            "\uffff\1\u04a1\1\uffff\1\u04a8\1\uffff\1\u04a2\1\u04a3",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0500\4\uffff\1\u04e4\2\uffff\1\u0509\1\u04e5\2\uffff\1"+
            "\u04e6\1\u04e7\1\u04e8\1\u04e9\1\u04ea\1\u04eb\1\u04ec\1\u04ed"+
            "\1\u04e3\1\uffff\1\u04d5\6\uffff\1\u0503\1\uffff\1\u0505\1\u0501"+
            "\1\u0502\1\u0504\10\uffff\1\u04ee\1\u04ef\1\u04f0\10\uffff\1"+
            "\u04f1\1\u04f2\1\u04f3\1\u04f5\1\u04f6\1\u04f7\1\u04f8\1\u04f9"+
            "\1\u0506\1\u04fa\1\u04fb\1\u04fc\1\u04fd\1\u0507\1\uffff\1\u04fe"+
            "\1\uffff\1\u04ff\1\u04f4\1\u04e2\14\uffff\1\u04dc\1\u04dd\1"+
            "\u04de\157\uffff\1\u04db\1\uffff\1\u04e1\3\uffff\1\u04e0\5\uffff"+
            "\1\u04d3\1\u04d4\12\uffff\1\u04d7\1\u04d6\2\uffff\1\u0508\1"+
            "\uffff\1\u04d8\1\uffff\1\u04df\1\uffff\1\u04d9\1\u04da",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u052a\4\uffff\1\u050e\3\uffff\1\u050f\2\uffff\1\u0510\1"+
            "\u0511\1\u0512\1\u0513\1\u0514\1\u0515\1\u0516\1\u0517\1\u050d"+
            "\1\u050a\7\uffff\1\u052d\1\uffff\1\u052f\1\u052b\1\u052c\1\u052e"+
            "\10\uffff\1\u0518\1\u0519\1\u051a\10\uffff\1\u051b\1\u051c\1"+
            "\u051d\1\u051f\1\u0520\1\u0521\1\u0522\1\u0523\1\uffff\1\u0524"+
            "\1\u0525\1\u0526\1\u0527\2\uffff\1\u0528\1\uffff\1\u0529\1\u051e"+
            "\1\u050c\u0080\uffff\1\u050b",
            "\1\u0545\1\u0546\1\u0547\1\u0548\1\uffff\1\u0543\1\u0542\1"+
            "\u0544\33\uffff\1\u053c\u00a7\uffff\1\u053b\2\uffff\1\u0530"+
            "\1\u0531\5\uffff\1\u053f\1\u0540\1\u0541\1\u053d\1\u053e\1\u0537"+
            "\1\u0538\1\u0539\1\u053a\1\u0536\1\u0534\1\u0535\1\u0532\1\u0533",
            "\1\u055e\1\u055f\1\u0560\1\u0561\1\uffff\1\u055c\1\u055b\1"+
            "\u055d\33\uffff\1\u0555\u00a7\uffff\1\u0554\2\uffff\1\u0549"+
            "\1\u054a\5\uffff\1\u0558\1\u0559\1\u055a\1\u0556\1\u0557\1\u0550"+
            "\1\u0551\1\u0552\1\u0553\1\u054f\1\u054d\1\u054e\1\u054b\1\u054c",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0577\1\u0578\1\u0579\1\u057a\1\uffff\1\u0575\1\u0574\1"+
            "\u0576\33\uffff\1\u056e\u00a7\uffff\1\u056d\2\uffff\1\u0562"+
            "\1\u0563\5\uffff\1\u0571\1\u0572\1\u0573\1\u056f\1\u0570\1\u0569"+
            "\1\u056a\1\u056b\1\u056c\1\u0568\1\u0566\1\u0567\1\u0564\1\u0565",
            "\1\u0590\1\u0591\1\u0592\1\u0593\1\uffff\1\u058e\1\u058d\1"+
            "\u058f\33\uffff\1\u0587\u00a7\uffff\1\u0586\2\uffff\1\u057b"+
            "\1\u057c\5\uffff\1\u058a\1\u058b\1\u058c\1\u0588\1\u0589\1\u0582"+
            "\1\u0583\1\u0584\1\u0585\1\u0581\1\u057f\1\u0580\1\u057d\1\u057e",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u05a9\1\u05aa\1\u05ab\1\u05ac\1\uffff\1\u05a7\1\u05a6\1"+
            "\u05a8\33\uffff\1\u05a0\u00a7\uffff\1\u059f\2\uffff\1\u0594"+
            "\1\u0595\5\uffff\1\u05a3\1\u05a4\1\u05a5\1\u05a1\1\u05a2\1\u059b"+
            "\1\u059c\1\u059d\1\u059e\1\u059a\1\u0598\1\u0599\1\u0596\1\u0597",
            "\1\u05c2\1\u05c3\1\u05c4\1\u05c5\1\uffff\1\u05c0\1\u05bf\1"+
            "\u05c1\33\uffff\1\u05b9\u00a7\uffff\1\u05b8\2\uffff\1\u05ad"+
            "\1\u05ae\5\uffff\1\u05bc\1\u05bd\1\u05be\1\u05ba\1\u05bb\1\u05b4"+
            "\1\u05b5\1\u05b6\1\u05b7\1\u05b3\1\u05b1\1\u05b2\1\u05af\1\u05b0",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u05db\1\u05dc\1\u05dd\1\u05de\1\uffff\1\u05d8\1\u05d7\1"+
            "\u05da\33\uffff\1\u05d1\u00a6\uffff\1\u05d9\1\u05d0\2\uffff"+
            "\1\16\1\u05c6\5\uffff\1\u05d4\1\u05d5\1\u05d6\1\u05d2\1\u05d3"+
            "\1\u05cc\1\u05cd\1\u05ce\1\u05cf\1\u05cb\1\u05c9\1\u05ca\1\u05c7"+
            "\1\u05c8",
            "\1\u05f5\1\u05f6\1\u05f7\1\u05f8\1\uffff\1\u05f2\1\u05f1\1"+
            "\u05f4\33\uffff\1\u05eb\u00a6\uffff\1\u05f3\1\u05ea\2\uffff"+
            "\1\16\1\u05e0\5\uffff\1\u05ee\1\u05ef\1\u05f0\1\u05ec\1\u05ed"+
            "\1\u05e6\1\u05e7\1\u05e8\1\u05e9\1\u05e5\1\u05e3\1\u05e4\1\u05e1"+
            "\1\u05e2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u060f\1\u0610\1\u0611\1\u0612\1\uffff\1\u060c\1\u060b\1"+
            "\u060e\33\uffff\1\u0605\u00a7\uffff\1\u0604\2\uffff\1\u060d"+
            "\1\u05fa\5\uffff\1\u0608\1\u0609\1\u060a\1\u0606\1\u0607\1\u0600"+
            "\1\u0601\1\u0602\1\u0603\1\u05ff\1\u05fd\1\u05fe\1\u05fb\1\u05fc",
            "\1\u0628\1\u0629\1\u062a\1\u062b\1\uffff\1\u0625\1\u0624\1"+
            "\u0627\33\uffff\1\u061e\u00a7\uffff\1\u061d\2\uffff\1\u0626"+
            "\1\u0613\5\uffff\1\u0621\1\u0622\1\u0623\1\u061f\1\u0620\1\u0619"+
            "\1\u061a\1\u061b\1\u061c\1\u0618\1\u0616\1\u0617\1\u0614\1\u0615",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0641\1\u0642\1\u0643\1\u0644\1\uffff\1\u063e\1\u063d\1"+
            "\u0640\33\uffff\1\u0637\u00a7\uffff\1\u0636\2\uffff\1\u063f"+
            "\1\u062c\5\uffff\1\u063a\1\u063b\1\u063c\1\u0638\1\u0639\1\u0632"+
            "\1\u0633\1\u0634\1\u0635\1\u0631\1\u062f\1\u0630\1\u062d\1\u062e",
            "\1\u065a\1\u065b\1\u065c\1\u065d\1\uffff\1\u0657\1\u0656\1"+
            "\u0659\33\uffff\1\u0650\u00a7\uffff\1\u064f\2\uffff\1\u0658"+
            "\1\u0645\5\uffff\1\u0653\1\u0654\1\u0655\1\u0651\1\u0652\1\u064b"+
            "\1\u064c\1\u064d\1\u064e\1\u064a\1\u0648\1\u0649\1\u0646\1\u0647",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0673\1\u0674\1\u0675\1\u0676\1\uffff\1\u0670\1\u066f\1"+
            "\u0672\33\uffff\1\u0669\u00a7\uffff\1\u0668\2\uffff\1\u0671"+
            "\1\u065e\5\uffff\1\u066c\1\u066d\1\u066e\1\u066a\1\u066b\1\u0664"+
            "\1\u0665\1\u0666\1\u0667\1\u0663\1\u0661\1\u0662\1\u065f\1\u0660",
            "\1\u068c\1\u068d\1\u068e\1\u068f\1\uffff\1\u0689\1\u0688\1"+
            "\u068b\33\uffff\1\u0682\u00a7\uffff\1\u0681\2\uffff\1\u068a"+
            "\1\u0677\5\uffff\1\u0685\1\u0686\1\u0687\1\u0683\1\u0684\1\u067d"+
            "\1\u067e\1\u067f\1\u0680\1\u067c\1\u067a\1\u067b\1\u0678\1\u0679",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u06a6\1\u06a7\1\u06a8\1\u06a9\1\uffff\1\u06a3\1\u06a2\1"+
            "\u06a5\33\uffff\1\u069c\u00a6\uffff\1\u06a4\1\u069b\2\uffff"+
            "\1\16\1\u0691\5\uffff\1\u069f\1\u06a0\1\u06a1\1\u069d\1\u069e"+
            "\1\u0697\1\u0698\1\u0699\1\u069a\1\u0696\1\u0694\1\u0695\1\u0692"+
            "\1\u0693",
            "\1\u06c0\1\u06c1\1\u06c2\1\u06c3\1\uffff\1\u06bd\1\u06bc\1"+
            "\u06bf\33\uffff\1\u06b6\u00a6\uffff\1\u06be\1\u06b5\2\uffff"+
            "\1\16\1\u06ab\5\uffff\1\u06b9\1\u06ba\1\u06bb\1\u06b7\1\u06b8"+
            "\1\u06b1\1\u06b2\1\u06b3\1\u06b4\1\u06b0\1\u06ae\1\u06af\1\u06ac"+
            "\1\u06ad",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u06da\1\u06db\1\u06dc\1\u06dd\1\uffff\1\u06d7\1\u06d6\1"+
            "\u06d9\33\uffff\1\u06d0\u00a6\uffff\1\u06d8\1\u06cf\2\uffff"+
            "\1\16\1\u06c5\5\uffff\1\u06d3\1\u06d4\1\u06d5\1\u06d1\1\u06d2"+
            "\1\u06cb\1\u06cc\1\u06cd\1\u06ce\1\u06ca\1\u06c8\1\u06c9\1\u06c6"+
            "\1\u06c7",
            "\1\u06f3\1\u06f4\1\u06f5\1\u06f6\1\uffff\1\u06f0\1\u06ef\1"+
            "\u06f2\33\uffff\1\u06e9\u00a6\uffff\1\u06f1\1\u06e8\2\uffff"+
            "\1\16\1\u06de\5\uffff\1\u06ec\1\u06ed\1\u06ee\1\u06ea\1\u06eb"+
            "\1\u06e4\1\u06e5\1\u06e6\1\u06e7\1\u06e3\1\u06e1\1\u06e2\1\u06df"+
            "\1\u06e0",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u070f\1\u0710\1\u0711\1\u0712\1\uffff\1\u070b\1\u070a\1"+
            "\u070e\2\uffff\1\u070d\30\uffff\1\u0704\u00a6\uffff\1\u070c"+
            "\1\u0703\2\uffff\1\16\1\u06f9\5\uffff\1\u0707\1\u0708\1\u0709"+
            "\1\u0705\1\u0706\1\u06ff\1\u0700\1\u0701\1\u0702\1\u06fe\1\u06fc"+
            "\1\u06fd\1\u06fa\1\u06fb",
            "\1\u072a\1\u072b\1\u072c\1\u072d\1\uffff\1\u0726\1\u0725\1"+
            "\u0729\2\uffff\1\u0728\30\uffff\1\u071f\u00a6\uffff\1\u0727"+
            "\1\u071e\2\uffff\1\16\1\u0714\5\uffff\1\u0722\1\u0723\1\u0724"+
            "\1\u0720\1\u0721\1\u071a\1\u071b\1\u071c\1\u071d\1\u0719\1\u0717"+
            "\1\u0718\1\u0715\1\u0716",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA101_eot = DFA.unpackEncodedString(DFA101_eotS);
    static final short[] DFA101_eof = DFA.unpackEncodedString(DFA101_eofS);
    static final char[] DFA101_min = DFA.unpackEncodedStringToUnsignedChars(DFA101_minS);
    static final char[] DFA101_max = DFA.unpackEncodedStringToUnsignedChars(DFA101_maxS);
    static final short[] DFA101_accept = DFA.unpackEncodedString(DFA101_acceptS);
    static final short[] DFA101_special = DFA.unpackEncodedString(DFA101_specialS);
    static final short[][] DFA101_transition;

    static {
        int numStates = DFA101_transitionS.length;
        DFA101_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA101_transition[i] = DFA.unpackEncodedString(DFA101_transitionS[i]);
        }
    }

    class DFA101 extends DFA {

        public DFA101(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 101;
            this.eot = DFA101_eot;
            this.eof = DFA101_eof;
            this.min = DFA101_min;
            this.max = DFA101_max;
            this.accept = DFA101_accept;
            this.special = DFA101_special;
            this.transition = DFA101_transition;
        }
        public String getDescription() {
            return "872:1: unaryExpression : ( MINUS eventProperty -> ^( UNARY_MINUS eventProperty ) | constant | substitution | LPAREN expression RPAREN | eventPropertyOrLibFunction | ( builtinFunc )=> ( builtinFunc ) | arrayExpression | subSelectExpression | existsSubSelectExpression );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA101_0 = input.LA(1);

                         
                        int index101_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA101_0==MINUS) ) {s = 1;}

                        else if ( ((LA101_0>=BOOLEAN_TRUE && LA101_0<=VALUE_NULL)||LA101_0==NUM_DOUBLE||(LA101_0>=STRING_LITERAL && LA101_0<=QUOTED_STRING_LITERAL)||LA101_0==PLUS||LA101_0==NUM_INT||(LA101_0>=NUM_LONG && LA101_0<=NUM_FLOAT)) ) {s = 2;}

                        else if ( (LA101_0==QUESTION) ) {s = 12;}

                        else if ( (LA101_0==LPAREN) ) {s = 13;}

                        else if ( (LA101_0==WINDOW||LA101_0==ESCAPE||LA101_0==EVERY_EXPR||(LA101_0>=MAX && LA101_0<=MIN)||LA101_0==OUTER||(LA101_0>=JOIN && LA101_0<=FULL)||(LA101_0>=EVENTS && LA101_0<=LAST)||(LA101_0>=UNIDIRECTIONAL && LA101_0<=METADATASQL)||(LA101_0>=WEEKDAY && LA101_0<=LW)||LA101_0==SNAPSHOT||(LA101_0>=VARIABLE && LA101_0<=AT)||LA101_0==IDENT) ) {s = 14;}

                        else if ( (LA101_0==COUNT) ) {s = 16;}

                        else if ( (LA101_0==SUM) ) {s = 19;}

                        else if ( (LA101_0==AVG) ) {s = 20;}

                        else if ( (LA101_0==COALESCE) ) {s = 23;}

                        else if ( (LA101_0==MEDIAN) ) {s = 24;}

                        else if ( (LA101_0==STDDEV) ) {s = 25;}

                        else if ( (LA101_0==AVEDEV) ) {s = 26;}

                        else if ( (LA101_0==PREVIOUS) ) {s = 37;}

                        else if ( (LA101_0==PRIOR) ) {s = 38;}

                        else if ( (LA101_0==INSTANCEOF) ) {s = 41;}

                        else if ( (LA101_0==CAST) ) {s = 42;}

                        else if ( (LA101_0==EXISTS) ) {s = 51;}

                        else if ( (LA101_0==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 52;}

                        else if ( (LA101_0==LCURLY) ) {s = 53;}

                         
                        input.seek(index101_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA101_151 = input.LA(1);

                         
                        int index101_151 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA101_151==STRING_LITERAL) ) {s = 724;}

                        else if ( (LA101_151==QUOTED_STRING_LITERAL) ) {s = 725;}

                        else if ( (LA101_151==ALL) && (synpred3_EsperEPL2Grammar())) {s = 726;}

                        else if ( (LA101_151==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 727;}

                        else if ( (LA101_151==CASE) && (synpred3_EsperEPL2Grammar())) {s = 728;}

                        else if ( (LA101_151==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 729;}

                        else if ( (LA101_151==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 730;}

                        else if ( (LA101_151==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 731;}

                        else if ( (LA101_151==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 732;}

                        else if ( (LA101_151==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 733;}

                        else if ( (LA101_151==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 734;}

                        else if ( (LA101_151==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 735;}

                        else if ( (LA101_151==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 736;}

                        else if ( (LA101_151==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 737;}

                        else if ( (LA101_151==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 738;}

                        else if ( (LA101_151==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 739;}

                        else if ( (LA101_151==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 740;}

                        else if ( (LA101_151==AT) && (synpred3_EsperEPL2Grammar())) {s = 741;}

                        else if ( (LA101_151==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 742;}

                        else if ( (LA101_151==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 743;}

                        else if ( (LA101_151==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 744;}

                        else if ( (LA101_151==SUM) && (synpred3_EsperEPL2Grammar())) {s = 745;}

                        else if ( (LA101_151==AVG) && (synpred3_EsperEPL2Grammar())) {s = 746;}

                        else if ( (LA101_151==MAX) && (synpred3_EsperEPL2Grammar())) {s = 747;}

                        else if ( (LA101_151==MIN) && (synpred3_EsperEPL2Grammar())) {s = 748;}

                        else if ( (LA101_151==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 749;}

                        else if ( (LA101_151==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 750;}

                        else if ( (LA101_151==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 751;}

                        else if ( (LA101_151==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 752;}

                        else if ( (LA101_151==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 753;}

                        else if ( (LA101_151==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 754;}

                        else if ( (LA101_151==LAST) && (synpred3_EsperEPL2Grammar())) {s = 755;}

                        else if ( (LA101_151==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 756;}

                        else if ( (LA101_151==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 757;}

                        else if ( (LA101_151==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 758;}

                        else if ( (LA101_151==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 759;}

                        else if ( (LA101_151==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 760;}

                        else if ( (LA101_151==SQL) && (synpred3_EsperEPL2Grammar())) {s = 761;}

                        else if ( (LA101_151==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 762;}

                        else if ( (LA101_151==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 763;}

                        else if ( (LA101_151==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 764;}

                        else if ( (LA101_151==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 765;}

                        else if ( (LA101_151==LW) && (synpred3_EsperEPL2Grammar())) {s = 766;}

                        else if ( (LA101_151==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 767;}

                        else if ( (LA101_151==CAST) && (synpred3_EsperEPL2Grammar())) {s = 768;}

                        else if ( (LA101_151==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 769;}

                        else if ( (LA101_151==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 770;}

                        else if ( (LA101_151==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 771;}

                        else if ( (LA101_151==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 772;}

                        else if ( (LA101_151==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 773;}

                        else if ( (LA101_151==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 774;}

                        else if ( (LA101_151==FULL) && (synpred3_EsperEPL2Grammar())) {s = 775;}

                        else if ( (LA101_151==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 776;}

                        else if ( (LA101_151==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 777;}

                        else if ( (LA101_151==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 778;}

                        else if ( (LA101_151==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 779;}

                        else if ( (LA101_151==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 780;}

                        else if ( (LA101_151==STAR) && (synpred3_EsperEPL2Grammar())) {s = 781;}

                         
                        input.seek(index101_151);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA101_203 = input.LA(1);

                         
                        int index101_203 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA101_203==ALL) && (synpred3_EsperEPL2Grammar())) {s = 782;}

                        else if ( (LA101_203==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 783;}

                        else if ( (LA101_203==CASE) && (synpred3_EsperEPL2Grammar())) {s = 784;}

                        else if ( (LA101_203==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 785;}

                        else if ( (LA101_203==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 786;}

                        else if ( (LA101_203==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 787;}

                        else if ( (LA101_203==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 788;}

                        else if ( (LA101_203==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 789;}

                        else if ( (LA101_203==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 790;}

                        else if ( (LA101_203==STRING_LITERAL) ) {s = 791;}

                        else if ( (LA101_203==QUOTED_STRING_LITERAL) ) {s = 792;}

                        else if ( (LA101_203==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 793;}

                        else if ( (LA101_203==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 794;}

                        else if ( (LA101_203==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 795;}

                        else if ( (LA101_203==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 796;}

                        else if ( (LA101_203==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 797;}

                        else if ( (LA101_203==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 798;}

                        else if ( (LA101_203==AT) && (synpred3_EsperEPL2Grammar())) {s = 799;}

                        else if ( (LA101_203==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 800;}

                        else if ( (LA101_203==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 801;}

                        else if ( (LA101_203==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 802;}

                        else if ( (LA101_203==SUM) && (synpred3_EsperEPL2Grammar())) {s = 803;}

                        else if ( (LA101_203==AVG) && (synpred3_EsperEPL2Grammar())) {s = 804;}

                        else if ( (LA101_203==MAX) && (synpred3_EsperEPL2Grammar())) {s = 805;}

                        else if ( (LA101_203==MIN) && (synpred3_EsperEPL2Grammar())) {s = 806;}

                        else if ( (LA101_203==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 807;}

                        else if ( (LA101_203==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 808;}

                        else if ( (LA101_203==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 809;}

                        else if ( (LA101_203==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 810;}

                        else if ( (LA101_203==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 811;}

                        else if ( (LA101_203==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 812;}

                        else if ( (LA101_203==LAST) && (synpred3_EsperEPL2Grammar())) {s = 813;}

                        else if ( (LA101_203==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 814;}

                        else if ( (LA101_203==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 815;}

                        else if ( (LA101_203==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 816;}

                        else if ( (LA101_203==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 817;}

                        else if ( (LA101_203==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 818;}

                        else if ( (LA101_203==SQL) && (synpred3_EsperEPL2Grammar())) {s = 819;}

                        else if ( (LA101_203==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 820;}

                        else if ( (LA101_203==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 821;}

                        else if ( (LA101_203==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 822;}

                        else if ( (LA101_203==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 823;}

                        else if ( (LA101_203==LW) && (synpred3_EsperEPL2Grammar())) {s = 824;}

                        else if ( (LA101_203==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 825;}

                        else if ( (LA101_203==CAST) && (synpred3_EsperEPL2Grammar())) {s = 826;}

                        else if ( (LA101_203==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 827;}

                        else if ( (LA101_203==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 828;}

                        else if ( (LA101_203==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 829;}

                        else if ( (LA101_203==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 830;}

                        else if ( (LA101_203==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 831;}

                        else if ( (LA101_203==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 832;}

                        else if ( (LA101_203==FULL) && (synpred3_EsperEPL2Grammar())) {s = 833;}

                        else if ( (LA101_203==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 834;}

                        else if ( (LA101_203==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 835;}

                        else if ( (LA101_203==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 836;}

                        else if ( (LA101_203==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 837;}

                        else if ( (LA101_203==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 838;}

                         
                        input.seek(index101_203);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA101_255 = input.LA(1);

                         
                        int index101_255 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA101_255==STRING_LITERAL) ) {s = 839;}

                        else if ( (LA101_255==QUOTED_STRING_LITERAL) ) {s = 840;}

                        else if ( (LA101_255==ALL) && (synpred3_EsperEPL2Grammar())) {s = 841;}

                        else if ( (LA101_255==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 842;}

                        else if ( (LA101_255==CASE) && (synpred3_EsperEPL2Grammar())) {s = 843;}

                        else if ( (LA101_255==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 844;}

                        else if ( (LA101_255==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 845;}

                        else if ( (LA101_255==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 846;}

                        else if ( (LA101_255==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 847;}

                        else if ( (LA101_255==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 848;}

                        else if ( (LA101_255==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 849;}

                        else if ( (LA101_255==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 850;}

                        else if ( (LA101_255==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 851;}

                        else if ( (LA101_255==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 852;}

                        else if ( (LA101_255==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 853;}

                        else if ( (LA101_255==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 854;}

                        else if ( (LA101_255==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 855;}

                        else if ( (LA101_255==AT) && (synpred3_EsperEPL2Grammar())) {s = 856;}

                        else if ( (LA101_255==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 857;}

                        else if ( (LA101_255==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 858;}

                        else if ( (LA101_255==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 859;}

                        else if ( (LA101_255==SUM) && (synpred3_EsperEPL2Grammar())) {s = 860;}

                        else if ( (LA101_255==AVG) && (synpred3_EsperEPL2Grammar())) {s = 861;}

                        else if ( (LA101_255==MAX) && (synpred3_EsperEPL2Grammar())) {s = 862;}

                        else if ( (LA101_255==MIN) && (synpred3_EsperEPL2Grammar())) {s = 863;}

                        else if ( (LA101_255==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 864;}

                        else if ( (LA101_255==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 865;}

                        else if ( (LA101_255==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 866;}

                        else if ( (LA101_255==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 867;}

                        else if ( (LA101_255==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 868;}

                        else if ( (LA101_255==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 869;}

                        else if ( (LA101_255==LAST) && (synpred3_EsperEPL2Grammar())) {s = 870;}

                        else if ( (LA101_255==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 871;}

                        else if ( (LA101_255==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 872;}

                        else if ( (LA101_255==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 873;}

                        else if ( (LA101_255==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 874;}

                        else if ( (LA101_255==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 875;}

                        else if ( (LA101_255==SQL) && (synpred3_EsperEPL2Grammar())) {s = 876;}

                        else if ( (LA101_255==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 877;}

                        else if ( (LA101_255==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 878;}

                        else if ( (LA101_255==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 879;}

                        else if ( (LA101_255==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 880;}

                        else if ( (LA101_255==LW) && (synpred3_EsperEPL2Grammar())) {s = 881;}

                        else if ( (LA101_255==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 882;}

                        else if ( (LA101_255==CAST) && (synpred3_EsperEPL2Grammar())) {s = 883;}

                        else if ( (LA101_255==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 884;}

                        else if ( (LA101_255==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 885;}

                        else if ( (LA101_255==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 886;}

                        else if ( (LA101_255==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 887;}

                        else if ( (LA101_255==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 888;}

                        else if ( (LA101_255==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 889;}

                        else if ( (LA101_255==FULL) && (synpred3_EsperEPL2Grammar())) {s = 890;}

                        else if ( (LA101_255==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 891;}

                        else if ( (LA101_255==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 892;}

                        else if ( (LA101_255==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 893;}

                        else if ( (LA101_255==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 894;}

                        else if ( (LA101_255==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 895;}

                         
                        input.seek(index101_255);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA101_307 = input.LA(1);

                         
                        int index101_307 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA101_307==STRING_LITERAL) ) {s = 896;}

                        else if ( (LA101_307==QUOTED_STRING_LITERAL) ) {s = 897;}

                        else if ( (LA101_307==CASE) && (synpred3_EsperEPL2Grammar())) {s = 898;}

                        else if ( (LA101_307==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 899;}

                        else if ( (LA101_307==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 900;}

                        else if ( (LA101_307==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 901;}

                        else if ( (LA101_307==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 902;}

                        else if ( (LA101_307==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 903;}

                        else if ( (LA101_307==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 904;}

                        else if ( (LA101_307==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 905;}

                        else if ( (LA101_307==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 906;}

                        else if ( (LA101_307==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 907;}

                        else if ( (LA101_307==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 908;}

                        else if ( (LA101_307==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 909;}

                        else if ( (LA101_307==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 910;}

                        else if ( (LA101_307==AT) && (synpred3_EsperEPL2Grammar())) {s = 911;}

                        else if ( (LA101_307==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 912;}

                        else if ( (LA101_307==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 913;}

                        else if ( (LA101_307==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 914;}

                        else if ( (LA101_307==SUM) && (synpred3_EsperEPL2Grammar())) {s = 915;}

                        else if ( (LA101_307==AVG) && (synpred3_EsperEPL2Grammar())) {s = 916;}

                        else if ( (LA101_307==MAX) && (synpred3_EsperEPL2Grammar())) {s = 917;}

                        else if ( (LA101_307==MIN) && (synpred3_EsperEPL2Grammar())) {s = 918;}

                        else if ( (LA101_307==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 919;}

                        else if ( (LA101_307==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 920;}

                        else if ( (LA101_307==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 921;}

                        else if ( (LA101_307==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 922;}

                        else if ( (LA101_307==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 923;}

                        else if ( (LA101_307==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 924;}

                        else if ( (LA101_307==LAST) && (synpred3_EsperEPL2Grammar())) {s = 925;}

                        else if ( (LA101_307==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 926;}

                        else if ( (LA101_307==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 927;}

                        else if ( (LA101_307==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 928;}

                        else if ( (LA101_307==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 929;}

                        else if ( (LA101_307==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 930;}

                        else if ( (LA101_307==SQL) && (synpred3_EsperEPL2Grammar())) {s = 931;}

                        else if ( (LA101_307==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 932;}

                        else if ( (LA101_307==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 933;}

                        else if ( (LA101_307==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 934;}

                        else if ( (LA101_307==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 935;}

                        else if ( (LA101_307==LW) && (synpred3_EsperEPL2Grammar())) {s = 936;}

                        else if ( (LA101_307==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 937;}

                        else if ( (LA101_307==CAST) && (synpred3_EsperEPL2Grammar())) {s = 938;}

                        else if ( (LA101_307==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 939;}

                        else if ( (LA101_307==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 940;}

                        else if ( (LA101_307==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 941;}

                        else if ( (LA101_307==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 942;}

                        else if ( (LA101_307==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 943;}

                        else if ( (LA101_307==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 944;}

                        else if ( (LA101_307==FULL) && (synpred3_EsperEPL2Grammar())) {s = 945;}

                        else if ( (LA101_307==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 946;}

                        else if ( (LA101_307==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 947;}

                        else if ( (LA101_307==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 948;}

                        else if ( (LA101_307==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 949;}

                        else if ( (LA101_307==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 950;}

                         
                        input.seek(index101_307);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA101_359 = input.LA(1);

                         
                        int index101_359 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA101_359==ALL) && (synpred3_EsperEPL2Grammar())) {s = 951;}

                        else if ( (LA101_359==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 952;}

                        else if ( (LA101_359==CASE) && (synpred3_EsperEPL2Grammar())) {s = 953;}

                        else if ( (LA101_359==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 954;}

                        else if ( (LA101_359==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 955;}

                        else if ( (LA101_359==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 956;}

                        else if ( (LA101_359==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 957;}

                        else if ( (LA101_359==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 958;}

                        else if ( (LA101_359==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 959;}

                        else if ( (LA101_359==STRING_LITERAL) ) {s = 960;}

                        else if ( (LA101_359==QUOTED_STRING_LITERAL) ) {s = 961;}

                        else if ( (LA101_359==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 962;}

                        else if ( (LA101_359==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 963;}

                        else if ( (LA101_359==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 964;}

                        else if ( (LA101_359==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 965;}

                        else if ( (LA101_359==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 966;}

                        else if ( (LA101_359==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 967;}

                        else if ( (LA101_359==AT) && (synpred3_EsperEPL2Grammar())) {s = 968;}

                        else if ( (LA101_359==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 969;}

                        else if ( (LA101_359==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 970;}

                        else if ( (LA101_359==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 971;}

                        else if ( (LA101_359==SUM) && (synpred3_EsperEPL2Grammar())) {s = 972;}

                        else if ( (LA101_359==AVG) && (synpred3_EsperEPL2Grammar())) {s = 973;}

                        else if ( (LA101_359==MAX) && (synpred3_EsperEPL2Grammar())) {s = 974;}

                        else if ( (LA101_359==MIN) && (synpred3_EsperEPL2Grammar())) {s = 975;}

                        else if ( (LA101_359==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 976;}

                        else if ( (LA101_359==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 977;}

                        else if ( (LA101_359==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 978;}

                        else if ( (LA101_359==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 979;}

                        else if ( (LA101_359==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 980;}

                        else if ( (LA101_359==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 981;}

                        else if ( (LA101_359==LAST) && (synpred3_EsperEPL2Grammar())) {s = 982;}

                        else if ( (LA101_359==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 983;}

                        else if ( (LA101_359==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 984;}

                        else if ( (LA101_359==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 985;}

                        else if ( (LA101_359==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 986;}

                        else if ( (LA101_359==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 987;}

                        else if ( (LA101_359==SQL) && (synpred3_EsperEPL2Grammar())) {s = 988;}

                        else if ( (LA101_359==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 989;}

                        else if ( (LA101_359==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 990;}

                        else if ( (LA101_359==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 991;}

                        else if ( (LA101_359==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 992;}

                        else if ( (LA101_359==LW) && (synpred3_EsperEPL2Grammar())) {s = 993;}

                        else if ( (LA101_359==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 994;}

                        else if ( (LA101_359==CAST) && (synpred3_EsperEPL2Grammar())) {s = 995;}

                        else if ( (LA101_359==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 996;}

                        else if ( (LA101_359==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 997;}

                        else if ( (LA101_359==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 998;}

                        else if ( (LA101_359==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 999;}

                        else if ( (LA101_359==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1000;}

                        else if ( (LA101_359==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1001;}

                        else if ( (LA101_359==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1002;}

                        else if ( (LA101_359==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1003;}

                        else if ( (LA101_359==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1004;}

                        else if ( (LA101_359==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1005;}

                        else if ( (LA101_359==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1006;}

                        else if ( (LA101_359==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1007;}

                         
                        input.seek(index101_359);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA101_411 = input.LA(1);

                         
                        int index101_411 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA101_411==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1008;}

                        else if ( (LA101_411==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1009;}

                        else if ( (LA101_411==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1010;}

                        else if ( (LA101_411==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1011;}

                        else if ( (LA101_411==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1012;}

                        else if ( (LA101_411==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1013;}

                        else if ( (LA101_411==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1014;}

                        else if ( (LA101_411==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1015;}

                        else if ( (LA101_411==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1016;}

                        else if ( (LA101_411==STRING_LITERAL) ) {s = 1017;}

                        else if ( (LA101_411==QUOTED_STRING_LITERAL) ) {s = 1018;}

                        else if ( (LA101_411==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1019;}

                        else if ( (LA101_411==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1020;}

                        else if ( (LA101_411==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1021;}

                        else if ( (LA101_411==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1022;}

                        else if ( (LA101_411==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1023;}

                        else if ( (LA101_411==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1024;}

                        else if ( (LA101_411==AT) && (synpred3_EsperEPL2Grammar())) {s = 1025;}

                        else if ( (LA101_411==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1026;}

                        else if ( (LA101_411==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1027;}

                        else if ( (LA101_411==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1028;}

                        else if ( (LA101_411==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1029;}

                        else if ( (LA101_411==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1030;}

                        else if ( (LA101_411==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1031;}

                        else if ( (LA101_411==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1032;}

                        else if ( (LA101_411==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1033;}

                        else if ( (LA101_411==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1034;}

                        else if ( (LA101_411==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1035;}

                        else if ( (LA101_411==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1036;}

                        else if ( (LA101_411==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1037;}

                        else if ( (LA101_411==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1038;}

                        else if ( (LA101_411==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1039;}

                        else if ( (LA101_411==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1040;}

                        else if ( (LA101_411==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1041;}

                        else if ( (LA101_411==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1042;}

                        else if ( (LA101_411==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1043;}

                        else if ( (LA101_411==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1044;}

                        else if ( (LA101_411==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1045;}

                        else if ( (LA101_411==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1046;}

                        else if ( (LA101_411==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1047;}

                        else if ( (LA101_411==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1048;}

                        else if ( (LA101_411==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1049;}

                        else if ( (LA101_411==LW) && (synpred3_EsperEPL2Grammar())) {s = 1050;}

                        else if ( (LA101_411==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1051;}

                        else if ( (LA101_411==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1052;}

                        else if ( (LA101_411==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1053;}

                        else if ( (LA101_411==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1054;}

                        else if ( (LA101_411==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1055;}

                        else if ( (LA101_411==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1056;}

                        else if ( (LA101_411==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1057;}

                        else if ( (LA101_411==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1058;}

                        else if ( (LA101_411==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1059;}

                        else if ( (LA101_411==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1060;}

                        else if ( (LA101_411==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1061;}

                        else if ( (LA101_411==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1062;}

                        else if ( (LA101_411==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1063;}

                        else if ( (LA101_411==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1064;}

                         
                        input.seek(index101_411);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA101_463 = input.LA(1);

                         
                        int index101_463 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA101_463==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1065;}

                        else if ( (LA101_463==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1066;}

                        else if ( (LA101_463==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1067;}

                        else if ( (LA101_463==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1068;}

                        else if ( (LA101_463==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1069;}

                        else if ( (LA101_463==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1070;}

                        else if ( (LA101_463==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1071;}

                        else if ( (LA101_463==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1072;}

                        else if ( (LA101_463==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1073;}

                        else if ( (LA101_463==STRING_LITERAL) ) {s = 1074;}

                        else if ( (LA101_463==QUOTED_STRING_LITERAL) ) {s = 1075;}

                        else if ( (LA101_463==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1076;}

                        else if ( (LA101_463==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1077;}

                        else if ( (LA101_463==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1078;}

                        else if ( (LA101_463==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1079;}

                        else if ( (LA101_463==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1080;}

                        else if ( (LA101_463==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1081;}

                        else if ( (LA101_463==AT) && (synpred3_EsperEPL2Grammar())) {s = 1082;}

                        else if ( (LA101_463==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1083;}

                        else if ( (LA101_463==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1084;}

                        else if ( (LA101_463==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1085;}

                        else if ( (LA101_463==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1086;}

                        else if ( (LA101_463==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1087;}

                        else if ( (LA101_463==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1088;}

                        else if ( (LA101_463==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1089;}

                        else if ( (LA101_463==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1090;}

                        else if ( (LA101_463==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1091;}

                        else if ( (LA101_463==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1092;}

                        else if ( (LA101_463==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1093;}

                        else if ( (LA101_463==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1094;}

                        else if ( (LA101_463==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1095;}

                        else if ( (LA101_463==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1096;}

                        else if ( (LA101_463==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1097;}

                        else if ( (LA101_463==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1098;}

                        else if ( (LA101_463==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1099;}

                        else if ( (LA101_463==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1100;}

                        else if ( (LA101_463==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1101;}

                        else if ( (LA101_463==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1102;}

                        else if ( (LA101_463==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1103;}

                        else if ( (LA101_463==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1104;}

                        else if ( (LA101_463==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1105;}

                        else if ( (LA101_463==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1106;}

                        else if ( (LA101_463==LW) && (synpred3_EsperEPL2Grammar())) {s = 1107;}

                        else if ( (LA101_463==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1108;}

                        else if ( (LA101_463==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1109;}

                        else if ( (LA101_463==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1110;}

                        else if ( (LA101_463==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1111;}

                        else if ( (LA101_463==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1112;}

                        else if ( (LA101_463==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1113;}

                        else if ( (LA101_463==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1114;}

                        else if ( (LA101_463==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1115;}

                        else if ( (LA101_463==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1116;}

                        else if ( (LA101_463==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1117;}

                        else if ( (LA101_463==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1118;}

                        else if ( (LA101_463==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1119;}

                        else if ( (LA101_463==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1120;}

                        else if ( (LA101_463==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1121;}

                         
                        input.seek(index101_463);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA101_515 = input.LA(1);

                         
                        int index101_515 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA101_515==STRING_LITERAL) ) {s = 1122;}

                        else if ( (LA101_515==QUOTED_STRING_LITERAL) ) {s = 1123;}

                        else if ( (LA101_515==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1124;}

                        else if ( (LA101_515==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1125;}

                        else if ( (LA101_515==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1126;}

                        else if ( (LA101_515==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1127;}

                        else if ( (LA101_515==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1128;}

                        else if ( (LA101_515==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1129;}

                        else if ( (LA101_515==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1130;}

                        else if ( (LA101_515==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1131;}

                        else if ( (LA101_515==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1132;}

                        else if ( (LA101_515==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1133;}

                        else if ( (LA101_515==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1134;}

                        else if ( (LA101_515==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1135;}

                        else if ( (LA101_515==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1136;}

                        else if ( (LA101_515==AT) && (synpred3_EsperEPL2Grammar())) {s = 1137;}

                        else if ( (LA101_515==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1138;}

                        else if ( (LA101_515==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1139;}

                        else if ( (LA101_515==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1140;}

                        else if ( (LA101_515==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1141;}

                        else if ( (LA101_515==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1142;}

                        else if ( (LA101_515==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1143;}

                        else if ( (LA101_515==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1144;}

                        else if ( (LA101_515==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1145;}

                        else if ( (LA101_515==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1146;}

                        else if ( (LA101_515==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1147;}

                        else if ( (LA101_515==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1148;}

                        else if ( (LA101_515==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1149;}

                        else if ( (LA101_515==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1150;}

                        else if ( (LA101_515==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1151;}

                        else if ( (LA101_515==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1152;}

                        else if ( (LA101_515==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1153;}

                        else if ( (LA101_515==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1154;}

                        else if ( (LA101_515==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1155;}

                        else if ( (LA101_515==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1156;}

                        else if ( (LA101_515==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1157;}

                        else if ( (LA101_515==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1158;}

                        else if ( (LA101_515==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1159;}

                        else if ( (LA101_515==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1160;}

                        else if ( (LA101_515==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1161;}

                        else if ( (LA101_515==LW) && (synpred3_EsperEPL2Grammar())) {s = 1162;}

                        else if ( (LA101_515==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1163;}

                        else if ( (LA101_515==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1164;}

                        else if ( (LA101_515==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1165;}

                        else if ( (LA101_515==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1166;}

                        else if ( (LA101_515==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1167;}

                        else if ( (LA101_515==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1168;}

                        else if ( (LA101_515==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1169;}

                        else if ( (LA101_515==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1170;}

                        else if ( (LA101_515==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1171;}

                        else if ( (LA101_515==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1172;}

                        else if ( (LA101_515==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1173;}

                        else if ( (LA101_515==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1174;}

                        else if ( (LA101_515==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1175;}

                        else if ( (LA101_515==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1176;}

                         
                        input.seek(index101_515);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA101_567 = input.LA(1);

                         
                        int index101_567 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA101_567==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1177;}

                        else if ( ((LA101_567>=STRING_LITERAL && LA101_567<=QUOTED_STRING_LITERAL)) ) {s = 14;}

                         
                        input.seek(index101_567);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA101_619 = input.LA(1);

                         
                        int index101_619 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA101_619==STRING_LITERAL) ) {s = 1180;}

                        else if ( (LA101_619==QUOTED_STRING_LITERAL) ) {s = 1181;}

                        else if ( (LA101_619==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1182;}

                        else if ( (LA101_619==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1183;}

                        else if ( (LA101_619==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1184;}

                        else if ( (LA101_619==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1185;}

                        else if ( (LA101_619==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1186;}

                        else if ( (LA101_619==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1187;}

                        else if ( (LA101_619==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1188;}

                        else if ( (LA101_619==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1189;}

                        else if ( (LA101_619==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1190;}

                        else if ( (LA101_619==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1191;}

                        else if ( (LA101_619==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1192;}

                        else if ( (LA101_619==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1193;}

                        else if ( (LA101_619==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1194;}

                        else if ( (LA101_619==AT) && (synpred3_EsperEPL2Grammar())) {s = 1195;}

                        else if ( (LA101_619==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1196;}

                        else if ( (LA101_619==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1197;}

                        else if ( (LA101_619==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1198;}

                        else if ( (LA101_619==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1199;}

                        else if ( (LA101_619==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1200;}

                        else if ( (LA101_619==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1201;}

                        else if ( (LA101_619==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1202;}

                        else if ( (LA101_619==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1203;}

                        else if ( (LA101_619==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1204;}

                        else if ( (LA101_619==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1205;}

                        else if ( (LA101_619==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1206;}

                        else if ( (LA101_619==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1207;}

                        else if ( (LA101_619==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1208;}

                        else if ( (LA101_619==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1209;}

                        else if ( (LA101_619==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1210;}

                        else if ( (LA101_619==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1211;}

                        else if ( (LA101_619==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1212;}

                        else if ( (LA101_619==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1213;}

                        else if ( (LA101_619==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1214;}

                        else if ( (LA101_619==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1215;}

                        else if ( (LA101_619==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1216;}

                        else if ( (LA101_619==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1217;}

                        else if ( (LA101_619==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1218;}

                        else if ( (LA101_619==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1219;}

                        else if ( (LA101_619==LW) && (synpred3_EsperEPL2Grammar())) {s = 1220;}

                        else if ( (LA101_619==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1221;}

                        else if ( (LA101_619==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1222;}

                        else if ( (LA101_619==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1223;}

                        else if ( (LA101_619==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1224;}

                        else if ( (LA101_619==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1225;}

                        else if ( (LA101_619==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1226;}

                        else if ( (LA101_619==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1227;}

                        else if ( (LA101_619==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1228;}

                        else if ( (LA101_619==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1229;}

                        else if ( (LA101_619==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1230;}

                        else if ( (LA101_619==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1231;}

                        else if ( (LA101_619==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1232;}

                        else if ( (LA101_619==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1233;}

                        else if ( (LA101_619==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1234;}

                         
                        input.seek(index101_619);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA101_671 = input.LA(1);

                         
                        int index101_671 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA101_671==STRING_LITERAL) ) {s = 1235;}

                        else if ( (LA101_671==QUOTED_STRING_LITERAL) ) {s = 1236;}

                        else if ( (LA101_671==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1237;}

                        else if ( (LA101_671==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1238;}

                        else if ( (LA101_671==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1239;}

                        else if ( (LA101_671==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1240;}

                        else if ( (LA101_671==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1241;}

                        else if ( (LA101_671==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1242;}

                        else if ( (LA101_671==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1243;}

                        else if ( (LA101_671==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1244;}

                        else if ( (LA101_671==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1245;}

                        else if ( (LA101_671==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1246;}

                        else if ( (LA101_671==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1247;}

                        else if ( (LA101_671==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1248;}

                        else if ( (LA101_671==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1249;}

                        else if ( (LA101_671==AT) && (synpred3_EsperEPL2Grammar())) {s = 1250;}

                        else if ( (LA101_671==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1251;}

                        else if ( (LA101_671==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1252;}

                        else if ( (LA101_671==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1253;}

                        else if ( (LA101_671==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1254;}

                        else if ( (LA101_671==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1255;}

                        else if ( (LA101_671==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1256;}

                        else if ( (LA101_671==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1257;}

                        else if ( (LA101_671==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1258;}

                        else if ( (LA101_671==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1259;}

                        else if ( (LA101_671==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1260;}

                        else if ( (LA101_671==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1261;}

                        else if ( (LA101_671==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1262;}

                        else if ( (LA101_671==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1263;}

                        else if ( (LA101_671==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1264;}

                        else if ( (LA101_671==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1265;}

                        else if ( (LA101_671==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1266;}

                        else if ( (LA101_671==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1267;}

                        else if ( (LA101_671==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1268;}

                        else if ( (LA101_671==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1269;}

                        else if ( (LA101_671==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1270;}

                        else if ( (LA101_671==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1271;}

                        else if ( (LA101_671==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1272;}

                        else if ( (LA101_671==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1273;}

                        else if ( (LA101_671==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1274;}

                        else if ( (LA101_671==LW) && (synpred3_EsperEPL2Grammar())) {s = 1275;}

                        else if ( (LA101_671==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1276;}

                        else if ( (LA101_671==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1277;}

                        else if ( (LA101_671==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1278;}

                        else if ( (LA101_671==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1279;}

                        else if ( (LA101_671==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1280;}

                        else if ( (LA101_671==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1281;}

                        else if ( (LA101_671==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1282;}

                        else if ( (LA101_671==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1283;}

                        else if ( (LA101_671==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1284;}

                        else if ( (LA101_671==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1285;}

                        else if ( (LA101_671==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1286;}

                        else if ( (LA101_671==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1287;}

                        else if ( (LA101_671==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1288;}

                        else if ( (LA101_671==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1289;}

                         
                        input.seek(index101_671);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA101_723 = input.LA(1);

                         
                        int index101_723 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA101_723==SELECT) ) {s = 1290;}

                        else if ( (LA101_723==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1291;}

                        else if ( (LA101_723==AT) && (synpred3_EsperEPL2Grammar())) {s = 1292;}

                        else if ( (LA101_723==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1293;}

                        else if ( (LA101_723==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1294;}

                        else if ( (LA101_723==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1295;}

                        else if ( (LA101_723==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1296;}

                        else if ( (LA101_723==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1297;}

                        else if ( (LA101_723==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1298;}

                        else if ( (LA101_723==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1299;}

                        else if ( (LA101_723==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1300;}

                        else if ( (LA101_723==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1301;}

                        else if ( (LA101_723==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1302;}

                        else if ( (LA101_723==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1303;}

                        else if ( (LA101_723==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1304;}

                        else if ( (LA101_723==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1305;}

                        else if ( (LA101_723==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1306;}

                        else if ( (LA101_723==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1307;}

                        else if ( (LA101_723==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1308;}

                        else if ( (LA101_723==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1309;}

                        else if ( (LA101_723==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1310;}

                        else if ( (LA101_723==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1311;}

                        else if ( (LA101_723==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1312;}

                        else if ( (LA101_723==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1313;}

                        else if ( (LA101_723==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1314;}

                        else if ( (LA101_723==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1315;}

                        else if ( (LA101_723==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1316;}

                        else if ( (LA101_723==LW) && (synpred3_EsperEPL2Grammar())) {s = 1317;}

                        else if ( (LA101_723==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1318;}

                        else if ( (LA101_723==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1319;}

                        else if ( (LA101_723==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1320;}

                        else if ( (LA101_723==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1321;}

                        else if ( (LA101_723==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1322;}

                        else if ( (LA101_723==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1323;}

                        else if ( (LA101_723==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1324;}

                        else if ( (LA101_723==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1325;}

                        else if ( (LA101_723==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1326;}

                        else if ( (LA101_723==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1327;}

                         
                        input.seek(index101_723);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA101_724 = input.LA(1);

                         
                        int index101_724 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA101_724==RPAREN) ) {s = 1328;}

                        else if ( (LA101_724==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1329;}

                        else if ( (LA101_724==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1330;}

                        else if ( (LA101_724==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1331;}

                        else if ( (LA101_724==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1332;}

                        else if ( (LA101_724==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1333;}

                        else if ( (LA101_724==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1334;}

                        else if ( (LA101_724==LT) && (synpred3_EsperEPL2Grammar())) {s = 1335;}

                        else if ( (LA101_724==GT) && (synpred3_EsperEPL2Grammar())) {s = 1336;}

                        else if ( (LA101_724==LE) && (synpred3_EsperEPL2Grammar())) {s = 1337;}

                        else if ( (LA101_724==GE) && (synpred3_EsperEPL2Grammar())) {s = 1338;}

                        else if ( (LA101_724==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1339;}

                        else if ( (LA101_724==IS) && (synpred3_EsperEPL2Grammar())) {s = 1340;}

                        else if ( (LA101_724==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1341;}

                        else if ( (LA101_724==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1342;}

                        else if ( (LA101_724==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1343;}

                        else if ( (LA101_724==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1344;}

                        else if ( (LA101_724==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1345;}

                        else if ( (LA101_724==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1346;}

                        else if ( (LA101_724==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1347;}

                        else if ( (LA101_724==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1348;}

                        else if ( (LA101_724==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1349;}

                        else if ( (LA101_724==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1350;}

                        else if ( (LA101_724==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1351;}

                        else if ( (LA101_724==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1352;}

                         
                        input.seek(index101_724);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA101_725 = input.LA(1);

                         
                        int index101_725 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA101_725==RPAREN) ) {s = 1353;}

                        else if ( (LA101_725==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1354;}

                        else if ( (LA101_725==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1355;}

                        else if ( (LA101_725==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1356;}

                        else if ( (LA101_725==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1357;}

                        else if ( (LA101_725==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1358;}

                        else if ( (LA101_725==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1359;}

                        else if ( (LA101_725==LT) && (synpred3_EsperEPL2Grammar())) {s = 1360;}

                        else if ( (LA101_725==GT) && (synpred3_EsperEPL2Grammar())) {s = 1361;}

                        else if ( (LA101_725==LE) && (synpred3_EsperEPL2Grammar())) {s = 1362;}

                        else if ( (LA101_725==GE) && (synpred3_EsperEPL2Grammar())) {s = 1363;}

                        else if ( (LA101_725==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1364;}

                        else if ( (LA101_725==IS) && (synpred3_EsperEPL2Grammar())) {s = 1365;}

                        else if ( (LA101_725==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1366;}

                        else if ( (LA101_725==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1367;}

                        else if ( (LA101_725==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1368;}

                        else if ( (LA101_725==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1369;}

                        else if ( (LA101_725==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1370;}

                        else if ( (LA101_725==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1371;}

                        else if ( (LA101_725==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1372;}

                        else if ( (LA101_725==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1373;}

                        else if ( (LA101_725==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1374;}

                        else if ( (LA101_725==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1375;}

                        else if ( (LA101_725==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1376;}

                        else if ( (LA101_725==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1377;}

                         
                        input.seek(index101_725);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA101_791 = input.LA(1);

                         
                        int index101_791 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA101_791==RPAREN) ) {s = 1378;}

                        else if ( (LA101_791==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1379;}

                        else if ( (LA101_791==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1380;}

                        else if ( (LA101_791==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1381;}

                        else if ( (LA101_791==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1382;}

                        else if ( (LA101_791==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1383;}

                        else if ( (LA101_791==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1384;}

                        else if ( (LA101_791==LT) && (synpred3_EsperEPL2Grammar())) {s = 1385;}

                        else if ( (LA101_791==GT) && (synpred3_EsperEPL2Grammar())) {s = 1386;}

                        else if ( (LA101_791==LE) && (synpred3_EsperEPL2Grammar())) {s = 1387;}

                        else if ( (LA101_791==GE) && (synpred3_EsperEPL2Grammar())) {s = 1388;}

                        else if ( (LA101_791==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1389;}

                        else if ( (LA101_791==IS) && (synpred3_EsperEPL2Grammar())) {s = 1390;}

                        else if ( (LA101_791==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1391;}

                        else if ( (LA101_791==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1392;}

                        else if ( (LA101_791==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1393;}

                        else if ( (LA101_791==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1394;}

                        else if ( (LA101_791==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1395;}

                        else if ( (LA101_791==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1396;}

                        else if ( (LA101_791==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1397;}

                        else if ( (LA101_791==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1398;}

                        else if ( (LA101_791==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1399;}

                        else if ( (LA101_791==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1400;}

                        else if ( (LA101_791==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1401;}

                        else if ( (LA101_791==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1402;}

                         
                        input.seek(index101_791);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA101_792 = input.LA(1);

                         
                        int index101_792 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA101_792==RPAREN) ) {s = 1403;}

                        else if ( (LA101_792==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1404;}

                        else if ( (LA101_792==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1405;}

                        else if ( (LA101_792==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1406;}

                        else if ( (LA101_792==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1407;}

                        else if ( (LA101_792==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1408;}

                        else if ( (LA101_792==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1409;}

                        else if ( (LA101_792==LT) && (synpred3_EsperEPL2Grammar())) {s = 1410;}

                        else if ( (LA101_792==GT) && (synpred3_EsperEPL2Grammar())) {s = 1411;}

                        else if ( (LA101_792==LE) && (synpred3_EsperEPL2Grammar())) {s = 1412;}

                        else if ( (LA101_792==GE) && (synpred3_EsperEPL2Grammar())) {s = 1413;}

                        else if ( (LA101_792==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1414;}

                        else if ( (LA101_792==IS) && (synpred3_EsperEPL2Grammar())) {s = 1415;}

                        else if ( (LA101_792==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1416;}

                        else if ( (LA101_792==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1417;}

                        else if ( (LA101_792==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1418;}

                        else if ( (LA101_792==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1419;}

                        else if ( (LA101_792==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1420;}

                        else if ( (LA101_792==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1421;}

                        else if ( (LA101_792==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1422;}

                        else if ( (LA101_792==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1423;}

                        else if ( (LA101_792==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1424;}

                        else if ( (LA101_792==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1425;}

                        else if ( (LA101_792==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1426;}

                        else if ( (LA101_792==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1427;}

                         
                        input.seek(index101_792);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA101_839 = input.LA(1);

                         
                        int index101_839 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA101_839==RPAREN) ) {s = 1428;}

                        else if ( (LA101_839==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1429;}

                        else if ( (LA101_839==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1430;}

                        else if ( (LA101_839==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1431;}

                        else if ( (LA101_839==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1432;}

                        else if ( (LA101_839==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1433;}

                        else if ( (LA101_839==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1434;}

                        else if ( (LA101_839==LT) && (synpred3_EsperEPL2Grammar())) {s = 1435;}

                        else if ( (LA101_839==GT) && (synpred3_EsperEPL2Grammar())) {s = 1436;}

                        else if ( (LA101_839==LE) && (synpred3_EsperEPL2Grammar())) {s = 1437;}

                        else if ( (LA101_839==GE) && (synpred3_EsperEPL2Grammar())) {s = 1438;}

                        else if ( (LA101_839==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1439;}

                        else if ( (LA101_839==IS) && (synpred3_EsperEPL2Grammar())) {s = 1440;}

                        else if ( (LA101_839==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1441;}

                        else if ( (LA101_839==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1442;}

                        else if ( (LA101_839==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1443;}

                        else if ( (LA101_839==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1444;}

                        else if ( (LA101_839==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1445;}

                        else if ( (LA101_839==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1446;}

                        else if ( (LA101_839==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1447;}

                        else if ( (LA101_839==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1448;}

                        else if ( (LA101_839==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1449;}

                        else if ( (LA101_839==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1450;}

                        else if ( (LA101_839==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1451;}

                        else if ( (LA101_839==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1452;}

                         
                        input.seek(index101_839);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA101_840 = input.LA(1);

                         
                        int index101_840 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA101_840==RPAREN) ) {s = 1453;}

                        else if ( (LA101_840==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1454;}

                        else if ( (LA101_840==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1455;}

                        else if ( (LA101_840==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1456;}

                        else if ( (LA101_840==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1457;}

                        else if ( (LA101_840==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1458;}

                        else if ( (LA101_840==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1459;}

                        else if ( (LA101_840==LT) && (synpred3_EsperEPL2Grammar())) {s = 1460;}

                        else if ( (LA101_840==GT) && (synpred3_EsperEPL2Grammar())) {s = 1461;}

                        else if ( (LA101_840==LE) && (synpred3_EsperEPL2Grammar())) {s = 1462;}

                        else if ( (LA101_840==GE) && (synpred3_EsperEPL2Grammar())) {s = 1463;}

                        else if ( (LA101_840==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1464;}

                        else if ( (LA101_840==IS) && (synpred3_EsperEPL2Grammar())) {s = 1465;}

                        else if ( (LA101_840==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1466;}

                        else if ( (LA101_840==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1467;}

                        else if ( (LA101_840==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1468;}

                        else if ( (LA101_840==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1469;}

                        else if ( (LA101_840==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1470;}

                        else if ( (LA101_840==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1471;}

                        else if ( (LA101_840==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1472;}

                        else if ( (LA101_840==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1473;}

                        else if ( (LA101_840==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1474;}

                        else if ( (LA101_840==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1475;}

                        else if ( (LA101_840==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1476;}

                        else if ( (LA101_840==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1477;}

                         
                        input.seek(index101_840);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA101_896 = input.LA(1);

                         
                        int index101_896 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA101_896==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1478;}

                        else if ( (LA101_896==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1479;}

                        else if ( (LA101_896==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1480;}

                        else if ( (LA101_896==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1481;}

                        else if ( (LA101_896==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1482;}

                        else if ( (LA101_896==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1483;}

                        else if ( (LA101_896==LT) && (synpred3_EsperEPL2Grammar())) {s = 1484;}

                        else if ( (LA101_896==GT) && (synpred3_EsperEPL2Grammar())) {s = 1485;}

                        else if ( (LA101_896==LE) && (synpred3_EsperEPL2Grammar())) {s = 1486;}

                        else if ( (LA101_896==GE) && (synpred3_EsperEPL2Grammar())) {s = 1487;}

                        else if ( (LA101_896==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1488;}

                        else if ( (LA101_896==IS) && (synpred3_EsperEPL2Grammar())) {s = 1489;}

                        else if ( (LA101_896==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1490;}

                        else if ( (LA101_896==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1491;}

                        else if ( (LA101_896==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1492;}

                        else if ( (LA101_896==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1493;}

                        else if ( (LA101_896==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1494;}

                        else if ( (LA101_896==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1495;}

                        else if ( (LA101_896==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1496;}

                        else if ( (LA101_896==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 1497;}

                        else if ( (LA101_896==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1498;}

                        else if ( (LA101_896==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1499;}

                        else if ( (LA101_896==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1500;}

                        else if ( (LA101_896==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1501;}

                        else if ( (LA101_896==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1502;}

                        else if ( (LA101_896==RPAREN) ) {s = 14;}

                         
                        input.seek(index101_896);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA101_897 = input.LA(1);

                         
                        int index101_897 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA101_897==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1504;}

                        else if ( (LA101_897==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1505;}

                        else if ( (LA101_897==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1506;}

                        else if ( (LA101_897==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1507;}

                        else if ( (LA101_897==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1508;}

                        else if ( (LA101_897==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1509;}

                        else if ( (LA101_897==LT) && (synpred3_EsperEPL2Grammar())) {s = 1510;}

                        else if ( (LA101_897==GT) && (synpred3_EsperEPL2Grammar())) {s = 1511;}

                        else if ( (LA101_897==LE) && (synpred3_EsperEPL2Grammar())) {s = 1512;}

                        else if ( (LA101_897==GE) && (synpred3_EsperEPL2Grammar())) {s = 1513;}

                        else if ( (LA101_897==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1514;}

                        else if ( (LA101_897==IS) && (synpred3_EsperEPL2Grammar())) {s = 1515;}

                        else if ( (LA101_897==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1516;}

                        else if ( (LA101_897==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1517;}

                        else if ( (LA101_897==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1518;}

                        else if ( (LA101_897==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1519;}

                        else if ( (LA101_897==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1520;}

                        else if ( (LA101_897==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1521;}

                        else if ( (LA101_897==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1522;}

                        else if ( (LA101_897==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 1523;}

                        else if ( (LA101_897==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1524;}

                        else if ( (LA101_897==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1525;}

                        else if ( (LA101_897==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1526;}

                        else if ( (LA101_897==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1527;}

                        else if ( (LA101_897==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1528;}

                        else if ( (LA101_897==RPAREN) ) {s = 14;}

                         
                        input.seek(index101_897);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA101_960 = input.LA(1);

                         
                        int index101_960 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA101_960==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1530;}

                        else if ( (LA101_960==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1531;}

                        else if ( (LA101_960==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1532;}

                        else if ( (LA101_960==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1533;}

                        else if ( (LA101_960==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1534;}

                        else if ( (LA101_960==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1535;}

                        else if ( (LA101_960==LT) && (synpred3_EsperEPL2Grammar())) {s = 1536;}

                        else if ( (LA101_960==GT) && (synpred3_EsperEPL2Grammar())) {s = 1537;}

                        else if ( (LA101_960==LE) && (synpred3_EsperEPL2Grammar())) {s = 1538;}

                        else if ( (LA101_960==GE) && (synpred3_EsperEPL2Grammar())) {s = 1539;}

                        else if ( (LA101_960==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1540;}

                        else if ( (LA101_960==IS) && (synpred3_EsperEPL2Grammar())) {s = 1541;}

                        else if ( (LA101_960==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1542;}

                        else if ( (LA101_960==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1543;}

                        else if ( (LA101_960==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1544;}

                        else if ( (LA101_960==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1545;}

                        else if ( (LA101_960==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1546;}

                        else if ( (LA101_960==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1547;}

                        else if ( (LA101_960==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1548;}

                        else if ( (LA101_960==RPAREN) ) {s = 1549;}

                        else if ( (LA101_960==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1550;}

                        else if ( (LA101_960==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1551;}

                        else if ( (LA101_960==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1552;}

                        else if ( (LA101_960==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1553;}

                        else if ( (LA101_960==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1554;}

                         
                        input.seek(index101_960);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA101_961 = input.LA(1);

                         
                        int index101_961 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA101_961==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1555;}

                        else if ( (LA101_961==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1556;}

                        else if ( (LA101_961==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1557;}

                        else if ( (LA101_961==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1558;}

                        else if ( (LA101_961==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1559;}

                        else if ( (LA101_961==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1560;}

                        else if ( (LA101_961==LT) && (synpred3_EsperEPL2Grammar())) {s = 1561;}

                        else if ( (LA101_961==GT) && (synpred3_EsperEPL2Grammar())) {s = 1562;}

                        else if ( (LA101_961==LE) && (synpred3_EsperEPL2Grammar())) {s = 1563;}

                        else if ( (LA101_961==GE) && (synpred3_EsperEPL2Grammar())) {s = 1564;}

                        else if ( (LA101_961==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1565;}

                        else if ( (LA101_961==IS) && (synpred3_EsperEPL2Grammar())) {s = 1566;}

                        else if ( (LA101_961==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1567;}

                        else if ( (LA101_961==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1568;}

                        else if ( (LA101_961==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1569;}

                        else if ( (LA101_961==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1570;}

                        else if ( (LA101_961==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1571;}

                        else if ( (LA101_961==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1572;}

                        else if ( (LA101_961==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1573;}

                        else if ( (LA101_961==RPAREN) ) {s = 1574;}

                        else if ( (LA101_961==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1575;}

                        else if ( (LA101_961==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1576;}

                        else if ( (LA101_961==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1577;}

                        else if ( (LA101_961==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1578;}

                        else if ( (LA101_961==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1579;}

                         
                        input.seek(index101_961);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA101_1017 = input.LA(1);

                         
                        int index101_1017 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA101_1017==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1580;}

                        else if ( (LA101_1017==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1581;}

                        else if ( (LA101_1017==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1582;}

                        else if ( (LA101_1017==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1583;}

                        else if ( (LA101_1017==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1584;}

                        else if ( (LA101_1017==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1585;}

                        else if ( (LA101_1017==LT) && (synpred3_EsperEPL2Grammar())) {s = 1586;}

                        else if ( (LA101_1017==GT) && (synpred3_EsperEPL2Grammar())) {s = 1587;}

                        else if ( (LA101_1017==LE) && (synpred3_EsperEPL2Grammar())) {s = 1588;}

                        else if ( (LA101_1017==GE) && (synpred3_EsperEPL2Grammar())) {s = 1589;}

                        else if ( (LA101_1017==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1590;}

                        else if ( (LA101_1017==IS) && (synpred3_EsperEPL2Grammar())) {s = 1591;}

                        else if ( (LA101_1017==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1592;}

                        else if ( (LA101_1017==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1593;}

                        else if ( (LA101_1017==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1594;}

                        else if ( (LA101_1017==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1595;}

                        else if ( (LA101_1017==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1596;}

                        else if ( (LA101_1017==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1597;}

                        else if ( (LA101_1017==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1598;}

                        else if ( (LA101_1017==RPAREN) ) {s = 1599;}

                        else if ( (LA101_1017==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1600;}

                        else if ( (LA101_1017==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1601;}

                        else if ( (LA101_1017==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1602;}

                        else if ( (LA101_1017==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1603;}

                        else if ( (LA101_1017==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1604;}

                         
                        input.seek(index101_1017);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA101_1018 = input.LA(1);

                         
                        int index101_1018 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA101_1018==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1605;}

                        else if ( (LA101_1018==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1606;}

                        else if ( (LA101_1018==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1607;}

                        else if ( (LA101_1018==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1608;}

                        else if ( (LA101_1018==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1609;}

                        else if ( (LA101_1018==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1610;}

                        else if ( (LA101_1018==LT) && (synpred3_EsperEPL2Grammar())) {s = 1611;}

                        else if ( (LA101_1018==GT) && (synpred3_EsperEPL2Grammar())) {s = 1612;}

                        else if ( (LA101_1018==LE) && (synpred3_EsperEPL2Grammar())) {s = 1613;}

                        else if ( (LA101_1018==GE) && (synpred3_EsperEPL2Grammar())) {s = 1614;}

                        else if ( (LA101_1018==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1615;}

                        else if ( (LA101_1018==IS) && (synpred3_EsperEPL2Grammar())) {s = 1616;}

                        else if ( (LA101_1018==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1617;}

                        else if ( (LA101_1018==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1618;}

                        else if ( (LA101_1018==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1619;}

                        else if ( (LA101_1018==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1620;}

                        else if ( (LA101_1018==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1621;}

                        else if ( (LA101_1018==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1622;}

                        else if ( (LA101_1018==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1623;}

                        else if ( (LA101_1018==RPAREN) ) {s = 1624;}

                        else if ( (LA101_1018==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1625;}

                        else if ( (LA101_1018==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1626;}

                        else if ( (LA101_1018==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1627;}

                        else if ( (LA101_1018==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1628;}

                        else if ( (LA101_1018==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1629;}

                         
                        input.seek(index101_1018);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA101_1074 = input.LA(1);

                         
                        int index101_1074 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA101_1074==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1630;}

                        else if ( (LA101_1074==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1631;}

                        else if ( (LA101_1074==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1632;}

                        else if ( (LA101_1074==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1633;}

                        else if ( (LA101_1074==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1634;}

                        else if ( (LA101_1074==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1635;}

                        else if ( (LA101_1074==LT) && (synpred3_EsperEPL2Grammar())) {s = 1636;}

                        else if ( (LA101_1074==GT) && (synpred3_EsperEPL2Grammar())) {s = 1637;}

                        else if ( (LA101_1074==LE) && (synpred3_EsperEPL2Grammar())) {s = 1638;}

                        else if ( (LA101_1074==GE) && (synpred3_EsperEPL2Grammar())) {s = 1639;}

                        else if ( (LA101_1074==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1640;}

                        else if ( (LA101_1074==IS) && (synpred3_EsperEPL2Grammar())) {s = 1641;}

                        else if ( (LA101_1074==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1642;}

                        else if ( (LA101_1074==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1643;}

                        else if ( (LA101_1074==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1644;}

                        else if ( (LA101_1074==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1645;}

                        else if ( (LA101_1074==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1646;}

                        else if ( (LA101_1074==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1647;}

                        else if ( (LA101_1074==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1648;}

                        else if ( (LA101_1074==RPAREN) ) {s = 1649;}

                        else if ( (LA101_1074==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1650;}

                        else if ( (LA101_1074==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1651;}

                        else if ( (LA101_1074==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1652;}

                        else if ( (LA101_1074==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1653;}

                        else if ( (LA101_1074==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1654;}

                         
                        input.seek(index101_1074);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA101_1075 = input.LA(1);

                         
                        int index101_1075 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA101_1075==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1655;}

                        else if ( (LA101_1075==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1656;}

                        else if ( (LA101_1075==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1657;}

                        else if ( (LA101_1075==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1658;}

                        else if ( (LA101_1075==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1659;}

                        else if ( (LA101_1075==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1660;}

                        else if ( (LA101_1075==LT) && (synpred3_EsperEPL2Grammar())) {s = 1661;}

                        else if ( (LA101_1075==GT) && (synpred3_EsperEPL2Grammar())) {s = 1662;}

                        else if ( (LA101_1075==LE) && (synpred3_EsperEPL2Grammar())) {s = 1663;}

                        else if ( (LA101_1075==GE) && (synpred3_EsperEPL2Grammar())) {s = 1664;}

                        else if ( (LA101_1075==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1665;}

                        else if ( (LA101_1075==IS) && (synpred3_EsperEPL2Grammar())) {s = 1666;}

                        else if ( (LA101_1075==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1667;}

                        else if ( (LA101_1075==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1668;}

                        else if ( (LA101_1075==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1669;}

                        else if ( (LA101_1075==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1670;}

                        else if ( (LA101_1075==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1671;}

                        else if ( (LA101_1075==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1672;}

                        else if ( (LA101_1075==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1673;}

                        else if ( (LA101_1075==RPAREN) ) {s = 1674;}

                        else if ( (LA101_1075==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1675;}

                        else if ( (LA101_1075==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1676;}

                        else if ( (LA101_1075==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1677;}

                        else if ( (LA101_1075==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1678;}

                        else if ( (LA101_1075==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1679;}

                         
                        input.seek(index101_1075);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA101_1122 = input.LA(1);

                         
                        int index101_1122 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA101_1122==RPAREN) ) {s = 14;}

                        else if ( (LA101_1122==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1681;}

                        else if ( (LA101_1122==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1682;}

                        else if ( (LA101_1122==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1683;}

                        else if ( (LA101_1122==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1684;}

                        else if ( (LA101_1122==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1685;}

                        else if ( (LA101_1122==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1686;}

                        else if ( (LA101_1122==LT) && (synpred3_EsperEPL2Grammar())) {s = 1687;}

                        else if ( (LA101_1122==GT) && (synpred3_EsperEPL2Grammar())) {s = 1688;}

                        else if ( (LA101_1122==LE) && (synpred3_EsperEPL2Grammar())) {s = 1689;}

                        else if ( (LA101_1122==GE) && (synpred3_EsperEPL2Grammar())) {s = 1690;}

                        else if ( (LA101_1122==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1691;}

                        else if ( (LA101_1122==IS) && (synpred3_EsperEPL2Grammar())) {s = 1692;}

                        else if ( (LA101_1122==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1693;}

                        else if ( (LA101_1122==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1694;}

                        else if ( (LA101_1122==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1695;}

                        else if ( (LA101_1122==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1696;}

                        else if ( (LA101_1122==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1697;}

                        else if ( (LA101_1122==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1698;}

                        else if ( (LA101_1122==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1699;}

                        else if ( (LA101_1122==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 1700;}

                        else if ( (LA101_1122==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1701;}

                        else if ( (LA101_1122==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1702;}

                        else if ( (LA101_1122==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1703;}

                        else if ( (LA101_1122==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1704;}

                        else if ( (LA101_1122==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1705;}

                         
                        input.seek(index101_1122);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA101_1123 = input.LA(1);

                         
                        int index101_1123 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA101_1123==RPAREN) ) {s = 14;}

                        else if ( (LA101_1123==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1707;}

                        else if ( (LA101_1123==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1708;}

                        else if ( (LA101_1123==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1709;}

                        else if ( (LA101_1123==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1710;}

                        else if ( (LA101_1123==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1711;}

                        else if ( (LA101_1123==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1712;}

                        else if ( (LA101_1123==LT) && (synpred3_EsperEPL2Grammar())) {s = 1713;}

                        else if ( (LA101_1123==GT) && (synpred3_EsperEPL2Grammar())) {s = 1714;}

                        else if ( (LA101_1123==LE) && (synpred3_EsperEPL2Grammar())) {s = 1715;}

                        else if ( (LA101_1123==GE) && (synpred3_EsperEPL2Grammar())) {s = 1716;}

                        else if ( (LA101_1123==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1717;}

                        else if ( (LA101_1123==IS) && (synpred3_EsperEPL2Grammar())) {s = 1718;}

                        else if ( (LA101_1123==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1719;}

                        else if ( (LA101_1123==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1720;}

                        else if ( (LA101_1123==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1721;}

                        else if ( (LA101_1123==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1722;}

                        else if ( (LA101_1123==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1723;}

                        else if ( (LA101_1123==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1724;}

                        else if ( (LA101_1123==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1725;}

                        else if ( (LA101_1123==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 1726;}

                        else if ( (LA101_1123==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1727;}

                        else if ( (LA101_1123==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1728;}

                        else if ( (LA101_1123==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1729;}

                        else if ( (LA101_1123==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1730;}

                        else if ( (LA101_1123==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1731;}

                         
                        input.seek(index101_1123);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA101_1180 = input.LA(1);

                         
                        int index101_1180 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA101_1180==RPAREN) ) {s = 14;}

                        else if ( (LA101_1180==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1733;}

                        else if ( (LA101_1180==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1734;}

                        else if ( (LA101_1180==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1735;}

                        else if ( (LA101_1180==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1736;}

                        else if ( (LA101_1180==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1737;}

                        else if ( (LA101_1180==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1738;}

                        else if ( (LA101_1180==LT) && (synpred3_EsperEPL2Grammar())) {s = 1739;}

                        else if ( (LA101_1180==GT) && (synpred3_EsperEPL2Grammar())) {s = 1740;}

                        else if ( (LA101_1180==LE) && (synpred3_EsperEPL2Grammar())) {s = 1741;}

                        else if ( (LA101_1180==GE) && (synpred3_EsperEPL2Grammar())) {s = 1742;}

                        else if ( (LA101_1180==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1743;}

                        else if ( (LA101_1180==IS) && (synpred3_EsperEPL2Grammar())) {s = 1744;}

                        else if ( (LA101_1180==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1745;}

                        else if ( (LA101_1180==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1746;}

                        else if ( (LA101_1180==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1747;}

                        else if ( (LA101_1180==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1748;}

                        else if ( (LA101_1180==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1749;}

                        else if ( (LA101_1180==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1750;}

                        else if ( (LA101_1180==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1751;}

                        else if ( (LA101_1180==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 1752;}

                        else if ( (LA101_1180==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1753;}

                        else if ( (LA101_1180==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1754;}

                        else if ( (LA101_1180==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1755;}

                        else if ( (LA101_1180==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1756;}

                        else if ( (LA101_1180==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1757;}

                         
                        input.seek(index101_1180);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA101_1181 = input.LA(1);

                         
                        int index101_1181 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA101_1181==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1758;}

                        else if ( (LA101_1181==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1759;}

                        else if ( (LA101_1181==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1760;}

                        else if ( (LA101_1181==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1761;}

                        else if ( (LA101_1181==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1762;}

                        else if ( (LA101_1181==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1763;}

                        else if ( (LA101_1181==LT) && (synpred3_EsperEPL2Grammar())) {s = 1764;}

                        else if ( (LA101_1181==GT) && (synpred3_EsperEPL2Grammar())) {s = 1765;}

                        else if ( (LA101_1181==LE) && (synpred3_EsperEPL2Grammar())) {s = 1766;}

                        else if ( (LA101_1181==GE) && (synpred3_EsperEPL2Grammar())) {s = 1767;}

                        else if ( (LA101_1181==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1768;}

                        else if ( (LA101_1181==IS) && (synpred3_EsperEPL2Grammar())) {s = 1769;}

                        else if ( (LA101_1181==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1770;}

                        else if ( (LA101_1181==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1771;}

                        else if ( (LA101_1181==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1772;}

                        else if ( (LA101_1181==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1773;}

                        else if ( (LA101_1181==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1774;}

                        else if ( (LA101_1181==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1775;}

                        else if ( (LA101_1181==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1776;}

                        else if ( (LA101_1181==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 1777;}

                        else if ( (LA101_1181==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1778;}

                        else if ( (LA101_1181==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1779;}

                        else if ( (LA101_1181==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1780;}

                        else if ( (LA101_1181==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1781;}

                        else if ( (LA101_1181==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1782;}

                        else if ( (LA101_1181==RPAREN) ) {s = 14;}

                         
                        input.seek(index101_1181);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA101_1235 = input.LA(1);

                         
                        int index101_1235 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA101_1235==RPAREN) ) {s = 14;}

                        else if ( (LA101_1235==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1785;}

                        else if ( (LA101_1235==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1786;}

                        else if ( (LA101_1235==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1787;}

                        else if ( (LA101_1235==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1788;}

                        else if ( (LA101_1235==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1789;}

                        else if ( (LA101_1235==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1790;}

                        else if ( (LA101_1235==LT) && (synpred3_EsperEPL2Grammar())) {s = 1791;}

                        else if ( (LA101_1235==GT) && (synpred3_EsperEPL2Grammar())) {s = 1792;}

                        else if ( (LA101_1235==LE) && (synpred3_EsperEPL2Grammar())) {s = 1793;}

                        else if ( (LA101_1235==GE) && (synpred3_EsperEPL2Grammar())) {s = 1794;}

                        else if ( (LA101_1235==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1795;}

                        else if ( (LA101_1235==IS) && (synpred3_EsperEPL2Grammar())) {s = 1796;}

                        else if ( (LA101_1235==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1797;}

                        else if ( (LA101_1235==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1798;}

                        else if ( (LA101_1235==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1799;}

                        else if ( (LA101_1235==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1800;}

                        else if ( (LA101_1235==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1801;}

                        else if ( (LA101_1235==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1802;}

                        else if ( (LA101_1235==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1803;}

                        else if ( (LA101_1235==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 1804;}

                        else if ( (LA101_1235==AS) && (synpred3_EsperEPL2Grammar())) {s = 1805;}

                        else if ( (LA101_1235==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1806;}

                        else if ( (LA101_1235==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1807;}

                        else if ( (LA101_1235==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1808;}

                        else if ( (LA101_1235==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1809;}

                        else if ( (LA101_1235==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1810;}

                         
                        input.seek(index101_1235);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA101_1236 = input.LA(1);

                         
                        int index101_1236 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA101_1236==RPAREN) ) {s = 14;}

                        else if ( (LA101_1236==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1812;}

                        else if ( (LA101_1236==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1813;}

                        else if ( (LA101_1236==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1814;}

                        else if ( (LA101_1236==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1815;}

                        else if ( (LA101_1236==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1816;}

                        else if ( (LA101_1236==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1817;}

                        else if ( (LA101_1236==LT) && (synpred3_EsperEPL2Grammar())) {s = 1818;}

                        else if ( (LA101_1236==GT) && (synpred3_EsperEPL2Grammar())) {s = 1819;}

                        else if ( (LA101_1236==LE) && (synpred3_EsperEPL2Grammar())) {s = 1820;}

                        else if ( (LA101_1236==GE) && (synpred3_EsperEPL2Grammar())) {s = 1821;}

                        else if ( (LA101_1236==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1822;}

                        else if ( (LA101_1236==IS) && (synpred3_EsperEPL2Grammar())) {s = 1823;}

                        else if ( (LA101_1236==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1824;}

                        else if ( (LA101_1236==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1825;}

                        else if ( (LA101_1236==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1826;}

                        else if ( (LA101_1236==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1827;}

                        else if ( (LA101_1236==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1828;}

                        else if ( (LA101_1236==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1829;}

                        else if ( (LA101_1236==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1830;}

                        else if ( (LA101_1236==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 1831;}

                        else if ( (LA101_1236==AS) && (synpred3_EsperEPL2Grammar())) {s = 1832;}

                        else if ( (LA101_1236==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1833;}

                        else if ( (LA101_1236==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1834;}

                        else if ( (LA101_1236==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1835;}

                        else if ( (LA101_1236==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1836;}

                        else if ( (LA101_1236==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1837;}

                         
                        input.seek(index101_1236);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA101_1328 = input.LA(1);

                         
                        int index101_1328 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 1837;}

                         
                        input.seek(index101_1328);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA101_1353 = input.LA(1);

                         
                        int index101_1353 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 1837;}

                         
                        input.seek(index101_1353);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA101_1378 = input.LA(1);

                         
                        int index101_1378 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 1837;}

                         
                        input.seek(index101_1378);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA101_1403 = input.LA(1);

                         
                        int index101_1403 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 1837;}

                         
                        input.seek(index101_1403);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA101_1428 = input.LA(1);

                         
                        int index101_1428 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 1837;}

                         
                        input.seek(index101_1428);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA101_1453 = input.LA(1);

                         
                        int index101_1453 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 1837;}

                         
                        input.seek(index101_1453);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA101_1549 = input.LA(1);

                         
                        int index101_1549 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 1837;}

                         
                        input.seek(index101_1549);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA101_1574 = input.LA(1);

                         
                        int index101_1574 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 1837;}

                         
                        input.seek(index101_1574);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA101_1599 = input.LA(1);

                         
                        int index101_1599 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 1837;}

                         
                        input.seek(index101_1599);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA101_1624 = input.LA(1);

                         
                        int index101_1624 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 1837;}

                         
                        input.seek(index101_1624);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA101_1649 = input.LA(1);

                         
                        int index101_1649 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 1837;}

                         
                        input.seek(index101_1649);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA101_1674 = input.LA(1);

                         
                        int index101_1674 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 1837;}

                         
                        input.seek(index101_1674);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 101, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA124_eotS =
        "\u02cd\uffff";
    static final String DFA124_eofS =
        "\1\uffff\1\103\6\uffff\1\167\1\u00ab\u00f2\uffff\1\u01e5\6\uffff"+
        "\1\u0219\1\u024d\u01c8\uffff";
    static final String DFA124_minS =
        "\1\5\1\6\6\uffff\2\6\36\uffff\1\5\1\uffff\1\5\61\uffff\1\5\63\uffff"+
        "\1\5\61\uffff\2\6\70\uffff\1\6\6\uffff\2\6\34\uffff\2\6\70\uffff"+
        "\2\6\114\uffff\1\0\31\uffff\1\0\7\uffff\1\0\60\uffff\1\0\2\uffff"+
        "\1\0\63\uffff\1\0\105\uffff\1\0\31\uffff\1\0\31\uffff\1\0\31\uffff"+
        "\1\0\5\uffff";
    static final String DFA124_maxS =
        "\1\u00cf\1\u00ee\6\uffff\2\u00ee\36\uffff\1\u00f0\1\uffff\1\u00cf"+
        "\61\uffff\1\u00f0\63\uffff\1\u00f0\61\uffff\2\u00e8\70\uffff\1\u00ee"+
        "\6\uffff\2\u00ee\34\uffff\2\u00e8\70\uffff\2\u00e8\114\uffff\1\0"+
        "\31\uffff\1\0\7\uffff\1\0\60\uffff\1\0\2\uffff\1\0\63\uffff\1\0"+
        "\105\uffff\1\0\31\uffff\1\0\31\uffff\1\0\31\uffff\1\0\5\uffff";
    static final String DFA124_acceptS =
        "\2\uffff\6\1\2\uffff\36\1\1\uffff\1\1\1\uffff\61\1\1\uffff\63\1"+
        "\1\uffff\61\1\2\uffff\1\2\70\uffff\6\1\2\uffff\34\1\u00a8\uffff"+
        "\2\1\1\uffff\60\1\1\uffff\2\1\1\uffff\63\1\1\uffff\61\1\150\uffff";
    static final String DFA124_specialS =
        "\1\0\1\1\6\uffff\1\2\1\3\40\uffff\1\4\u00d1\uffff\1\5\6\uffff\1"+
        "\6\1\7\u00a4\uffff\1\10\31\uffff\1\11\7\uffff\1\12\60\uffff\1\13"+
        "\2\uffff\1\14\63\uffff\1\15\105\uffff\1\16\31\uffff\1\17\31\uffff"+
        "\1\20\31\uffff\1\21\5\uffff}>";
    static final String[] DFA124_transitionS = {
            "\1\40\4\uffff\1\4\3\uffff\1\5\2\uffff\1\6\1\7\1\10\1\11\1\12"+
            "\1\13\1\14\1\15\1\3\10\uffff\1\43\1\uffff\1\45\1\41\1\42\1\44"+
            "\10\uffff\1\16\1\17\1\20\10\uffff\1\21\1\22\1\23\1\25\1\26\1"+
            "\27\1\30\1\31\1\uffff\1\32\1\33\1\34\1\35\2\uffff\1\36\1\uffff"+
            "\1\37\1\24\1\2\u0080\uffff\1\1",
            "\1\125\1\126\1\127\1\130\1\131\1\75\1\74\1\124\2\uffff\1\106"+
            "\14\uffff\1\113\1\115\1\112\1\114\1\107\7\uffff\1\66\1\uffff"+
            "\1\76\1\77\2\uffff\1\100\5\uffff\1\101\1\110\1\111\35\uffff"+
            "\1\123\1\122\1\121\6\uffff\1\102\161\uffff\1\105\1\65\1\52\1"+
            "\50\1\104\1\53\1\47\1\117\1\116\2\uffff\1\71\1\72\1\73\1\67"+
            "\1\70\1\61\1\62\1\63\1\64\1\60\1\56\1\57\1\54\1\55\1\uffff\1"+
            "\120\2\uffff\1\51\1\46",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0089\1\u008a\1\u008b\1\u008c\1\u008d\1\161\1\160\1\u0088"+
            "\2\uffff\1\172\14\uffff\1\177\1\u0081\1\176\1\u0080\1\173\7"+
            "\uffff\1\152\1\uffff\1\162\1\163\2\uffff\1\164\5\uffff\1\165"+
            "\1\174\1\175\35\uffff\1\u0087\1\u0086\1\u0085\6\uffff\1\166"+
            "\161\uffff\1\171\1\151\1\136\1\134\1\170\1\137\1\133\1\u0083"+
            "\1\u0082\2\uffff\1\155\1\156\1\157\1\153\1\154\1\145\1\146\1"+
            "\147\1\150\1\144\1\142\1\143\1\140\1\141\1\uffff\1\u0084\2\uffff"+
            "\1\135\1\132",
            "\1\u00bd\1\u00be\1\u00bf\1\u00c0\1\u00c1\1\u00a5\1\u00a4\1"+
            "\u00bc\2\uffff\1\u00ae\14\uffff\1\u00b3\1\u00b5\1\u00b2\1\u00b4"+
            "\1\u00af\7\uffff\1\u009e\1\uffff\1\u00a6\1\u00a7\2\uffff\1\u00a8"+
            "\5\uffff\1\u00a9\1\u00b0\1\u00b1\35\uffff\1\u00bb\1\u00ba\1"+
            "\u00b9\6\uffff\1\u00aa\161\uffff\1\u00ad\1\u009d\1\u0092\1\u0090"+
            "\1\u00ac\1\u0093\1\u008f\1\u00b7\1\u00b6\2\uffff\1\u00a1\1\u00a2"+
            "\1\u00a3\1\u009f\1\u00a0\1\u0099\1\u009a\1\u009b\1\u009c\1\u0098"+
            "\1\u0096\1\u0097\1\u0094\1\u0095\1\uffff\1\u00b8\2\uffff\1\u0091"+
            "\1\u008e",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u00c4\4\uffff\1\u00c4\2\uffff\2\u00c4\2\uffff\11\u00c4"+
            "\1\uffff\1\u00c4\6\uffff\1\u00c4\1\uffff\4\u00c4\5\uffff\2\u00c4"+
            "\1\uffff\3\u00c4\10\uffff\16\u00c4\1\uffff\1\u00c4\1\uffff\3"+
            "\u00c4\14\uffff\3\u00c4\157\uffff\1\u00c4\1\uffff\1\u00c4\3"+
            "\uffff\2\u00c4\4\uffff\1\u00c2\1\u00c3\12\uffff\2\u00c4\2\uffff"+
            "\1\u00c4\1\uffff\1\u00c4\1\uffff\1\u00c4\1\uffff\2\u00c4",
            "",
            "\1\u011b\4\uffff\1\u00ff\3\uffff\1\u0100\2\uffff\1\u0101\1"+
            "\u0102\1\u0103\1\u0104\1\u0105\1\u0106\1\u0107\1\u0108\1\u00fe"+
            "\10\uffff\1\u011e\1\uffff\1\u0120\1\u011c\1\u011d\1\u011f\10"+
            "\uffff\1\u0109\1\u010a\1\u010b\10\uffff\1\u010c\1\u010d\1\u010e"+
            "\1\u0110\1\u0111\1\u0112\1\u0113\1\u0114\1\uffff\1\u0115\1\u0116"+
            "\1\u0117\1\u0118\2\uffff\1\u0119\1\uffff\1\u011a\1\u010f\1\u00fd"+
            "\u0080\uffff\1\u00fc",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u00c4\4\uffff\1\u00c4\2\uffff\2\u00c4\2\uffff\11\u00c4"+
            "\1\uffff\1\u00c4\6\uffff\1\u00c4\1\uffff\4\u00c4\5\uffff\2\u00c4"+
            "\1\uffff\3\u00c4\10\uffff\16\u00c4\1\uffff\1\u00c4\1\uffff\3"+
            "\u00c4\14\uffff\3\u00c4\157\uffff\1\u00c4\1\uffff\1\u00c4\3"+
            "\uffff\2\u00c4\4\uffff\1\u0121\1\u0122\12\uffff\2\u00c4\2\uffff"+
            "\1\u00c4\1\uffff\1\u00c4\1\uffff\1\u00c4\1\uffff\2\u00c4",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u00c4\4\uffff\1\u00c4\2\uffff\2\u00c4\2\uffff\11\u00c4"+
            "\1\uffff\1\u00c4\6\uffff\1\u00c4\1\uffff\4\u00c4\5\uffff\2\u00c4"+
            "\1\uffff\3\u00c4\10\uffff\16\u00c4\1\uffff\1\u00c4\1\uffff\3"+
            "\u00c4\14\uffff\3\u00c4\157\uffff\1\u00c4\1\uffff\1\u00c4\3"+
            "\uffff\2\u00c4\4\uffff\1\u015b\1\u015c\12\uffff\2\u00c4\2\uffff"+
            "\1\u00c4\1\uffff\1\u00c4\1\uffff\1\u00c4\1\uffff\2\u00c4",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\4\u00c4\1\uffff\3\u00c4\33\uffff\1\u00c4\u00a6\uffff\2\u00c4"+
            "\2\uffff\1\u01a9\1\u00c4\5\uffff\16\u00c4",
            "\4\u00c4\1\uffff\3\u00c4\33\uffff\1\u00c4\u00a6\uffff\2\u00c4"+
            "\2\uffff\1\u01c3\1\u00c4\5\uffff\16\u00c4",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u01f7\1\u01f8\1\u01f9\1\u01fa\1\u01fb\1\u01df\1\u01de\1"+
            "\u01f6\2\uffff\1\u01e8\14\uffff\1\u01ed\1\u01ef\1\u01ec\1\u01ee"+
            "\1\u01e9\7\uffff\1\u01d8\1\uffff\1\u01e0\1\u01e1\2\uffff\1\u01e2"+
            "\5\uffff\1\u01e3\1\u01ea\1\u01eb\35\uffff\1\u01f5\1\u01f4\1"+
            "\u01f3\6\uffff\1\u01e4\161\uffff\1\u01e7\1\u01d7\1\u01fc\1\u01cb"+
            "\1\u01e6\1\u01cd\1\u01ca\1\u01f1\1\u01f0\2\uffff\1\u01db\1\u01dc"+
            "\1\u01dd\1\u01d9\1\u01da\1\u01d3\1\u01d4\1\u01d5\1\u01d6\1\u01d2"+
            "\1\u01d0\1\u01d1\1\u01ce\1\u01cf\1\uffff\1\u01f2\2\uffff\1\u01cc"+
            "\1\u01c9",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u022b\1\u022c\1\u022d\1\u022e\1\u022f\1\u0213\1\u0212\1"+
            "\u022a\2\uffff\1\u021c\14\uffff\1\u0221\1\u0223\1\u0220\1\u0222"+
            "\1\u021d\7\uffff\1\u020c\1\uffff\1\u0214\1\u0215\2\uffff\1\u0216"+
            "\5\uffff\1\u0217\1\u021e\1\u021f\35\uffff\1\u0229\1\u0228\1"+
            "\u0227\6\uffff\1\u0218\161\uffff\1\u021b\1\u020b\1\u0230\1\u01ff"+
            "\1\u021a\1\u0201\1\u01fe\1\u0225\1\u0224\2\uffff\1\u020f\1\u0210"+
            "\1\u0211\1\u020d\1\u020e\1\u0207\1\u0208\1\u0209\1\u020a\1\u0206"+
            "\1\u0204\1\u0205\1\u0202\1\u0203\1\uffff\1\u0226\2\uffff\1\u0200"+
            "\1\u01fd",
            "\1\u025f\1\u0260\1\u0261\1\u0262\1\u0263\1\u0247\1\u0246\1"+
            "\u025e\2\uffff\1\u0250\14\uffff\1\u0255\1\u0257\1\u0254\1\u0256"+
            "\1\u0251\7\uffff\1\u0240\1\uffff\1\u0248\1\u0249\2\uffff\1\u024a"+
            "\5\uffff\1\u024b\1\u0252\1\u0253\35\uffff\1\u025d\1\u025c\1"+
            "\u025b\6\uffff\1\u024c\161\uffff\1\u024f\1\u023f\1\u0264\1\u0233"+
            "\1\u024e\1\u0235\1\u0232\1\u0259\1\u0258\2\uffff\1\u0243\1\u0244"+
            "\1\u0245\1\u0241\1\u0242\1\u023b\1\u023c\1\u023d\1\u023e\1\u023a"+
            "\1\u0238\1\u0239\1\u0236\1\u0237\1\uffff\1\u025a\2\uffff\1\u0234"+
            "\1\u0231",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\4\u00c4\1\uffff\3\u00c4\33\uffff\1\u00c4\u00a6\uffff\2\u00c4"+
            "\2\uffff\1\u0279\1\u00c4\5\uffff\16\u00c4",
            "\4\u00c4\1\uffff\3\u00c4\33\uffff\1\u00c4\u00a6\uffff\2\u00c4"+
            "\2\uffff\1\u0293\1\u00c4\5\uffff\16\u00c4",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\4\u00c4\1\uffff\3\u00c4\33\uffff\1\u00c4\u00a6\uffff\2\u00c4"+
            "\2\uffff\1\u02ad\1\u00c4\5\uffff\16\u00c4",
            "\4\u00c4\1\uffff\3\u00c4\33\uffff\1\u00c4\u00a6\uffff\2\u00c4"+
            "\2\uffff\1\u02c7\1\u00c4\5\uffff\16\u00c4",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA124_eot = DFA.unpackEncodedString(DFA124_eotS);
    static final short[] DFA124_eof = DFA.unpackEncodedString(DFA124_eofS);
    static final char[] DFA124_min = DFA.unpackEncodedStringToUnsignedChars(DFA124_minS);
    static final char[] DFA124_max = DFA.unpackEncodedStringToUnsignedChars(DFA124_maxS);
    static final short[] DFA124_accept = DFA.unpackEncodedString(DFA124_acceptS);
    static final short[] DFA124_special = DFA.unpackEncodedString(DFA124_specialS);
    static final short[][] DFA124_transition;

    static {
        int numStates = DFA124_transitionS.length;
        DFA124_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA124_transition[i] = DFA.unpackEncodedString(DFA124_transitionS[i]);
        }
    }

    class DFA124 extends DFA {

        public DFA124(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 124;
            this.eot = DFA124_eot;
            this.eof = DFA124_eof;
            this.min = DFA124_min;
            this.max = DFA124_max;
            this.accept = DFA124_accept;
            this.special = DFA124_special;
            this.transition = DFA124_transition;
        }
        public String getDescription() {
            return "945:1: eventPropertyOrLibFunction : ( ( eventProperty )=> eventProperty | libFunction );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA124_0 = input.LA(1);

                         
                        int index124_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA124_0==IDENT) ) {s = 1;}

                        else if ( (LA124_0==AT) && (synpred4_EsperEPL2Grammar())) {s = 2;}

                        else if ( (LA124_0==COUNT) && (synpred4_EsperEPL2Grammar())) {s = 3;}

                        else if ( (LA124_0==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 4;}

                        else if ( (LA124_0==EVERY_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 5;}

                        else if ( (LA124_0==SUM) && (synpred4_EsperEPL2Grammar())) {s = 6;}

                        else if ( (LA124_0==AVG) && (synpred4_EsperEPL2Grammar())) {s = 7;}

                        else if ( (LA124_0==MAX) ) {s = 8;}

                        else if ( (LA124_0==MIN) ) {s = 9;}

                        else if ( (LA124_0==COALESCE) && (synpred4_EsperEPL2Grammar())) {s = 10;}

                        else if ( (LA124_0==MEDIAN) && (synpred4_EsperEPL2Grammar())) {s = 11;}

                        else if ( (LA124_0==STDDEV) && (synpred4_EsperEPL2Grammar())) {s = 12;}

                        else if ( (LA124_0==AVEDEV) && (synpred4_EsperEPL2Grammar())) {s = 13;}

                        else if ( (LA124_0==EVENTS) && (synpred4_EsperEPL2Grammar())) {s = 14;}

                        else if ( (LA124_0==FIRST) && (synpred4_EsperEPL2Grammar())) {s = 15;}

                        else if ( (LA124_0==LAST) && (synpred4_EsperEPL2Grammar())) {s = 16;}

                        else if ( (LA124_0==UNIDIRECTIONAL) && (synpred4_EsperEPL2Grammar())) {s = 17;}

                        else if ( (LA124_0==RETAINUNION) && (synpred4_EsperEPL2Grammar())) {s = 18;}

                        else if ( (LA124_0==RETAININTERSECTION) && (synpred4_EsperEPL2Grammar())) {s = 19;}

                        else if ( (LA124_0==UNTIL) && (synpred4_EsperEPL2Grammar())) {s = 20;}

                        else if ( (LA124_0==PATTERN) && (synpred4_EsperEPL2Grammar())) {s = 21;}

                        else if ( (LA124_0==SQL) && (synpred4_EsperEPL2Grammar())) {s = 22;}

                        else if ( (LA124_0==METADATASQL) && (synpred4_EsperEPL2Grammar())) {s = 23;}

                        else if ( (LA124_0==PREVIOUS) && (synpred4_EsperEPL2Grammar())) {s = 24;}

                        else if ( (LA124_0==PRIOR) && (synpred4_EsperEPL2Grammar())) {s = 25;}

                        else if ( (LA124_0==WEEKDAY) && (synpred4_EsperEPL2Grammar())) {s = 26;}

                        else if ( (LA124_0==LW) && (synpred4_EsperEPL2Grammar())) {s = 27;}

                        else if ( (LA124_0==INSTANCEOF) && (synpred4_EsperEPL2Grammar())) {s = 28;}

                        else if ( (LA124_0==CAST) && (synpred4_EsperEPL2Grammar())) {s = 29;}

                        else if ( (LA124_0==SNAPSHOT) && (synpred4_EsperEPL2Grammar())) {s = 30;}

                        else if ( (LA124_0==VARIABLE) && (synpred4_EsperEPL2Grammar())) {s = 31;}

                        else if ( (LA124_0==WINDOW) && (synpred4_EsperEPL2Grammar())) {s = 32;}

                        else if ( (LA124_0==LEFT) && (synpred4_EsperEPL2Grammar())) {s = 33;}

                        else if ( (LA124_0==RIGHT) && (synpred4_EsperEPL2Grammar())) {s = 34;}

                        else if ( (LA124_0==OUTER) && (synpred4_EsperEPL2Grammar())) {s = 35;}

                        else if ( (LA124_0==FULL) && (synpred4_EsperEPL2Grammar())) {s = 36;}

                        else if ( (LA124_0==JOIN) && (synpred4_EsperEPL2Grammar())) {s = 37;}

                         
                        input.seek(index124_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA124_1 = input.LA(1);

                         
                        int index124_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA124_1==ESCAPECHAR) && (synpred4_EsperEPL2Grammar())) {s = 38;}

                        else if ( (LA124_1==LBRACK) && (synpred4_EsperEPL2Grammar())) {s = 39;}

                        else if ( (LA124_1==LPAREN) ) {s = 40;}

                        else if ( (LA124_1==QUESTION) && (synpred4_EsperEPL2Grammar())) {s = 41;}

                        else if ( (LA124_1==DOT) ) {s = 42;}

                        else if ( (LA124_1==STAR) && (synpred4_EsperEPL2Grammar())) {s = 43;}

                        else if ( (LA124_1==DIV) && (synpred4_EsperEPL2Grammar())) {s = 44;}

                        else if ( (LA124_1==MOD) && (synpred4_EsperEPL2Grammar())) {s = 45;}

                        else if ( (LA124_1==PLUS) && (synpred4_EsperEPL2Grammar())) {s = 46;}

                        else if ( (LA124_1==MINUS) && (synpred4_EsperEPL2Grammar())) {s = 47;}

                        else if ( (LA124_1==LOR) && (synpred4_EsperEPL2Grammar())) {s = 48;}

                        else if ( (LA124_1==LT) && (synpred4_EsperEPL2Grammar())) {s = 49;}

                        else if ( (LA124_1==GT) && (synpred4_EsperEPL2Grammar())) {s = 50;}

                        else if ( (LA124_1==LE) && (synpred4_EsperEPL2Grammar())) {s = 51;}

                        else if ( (LA124_1==GE) && (synpred4_EsperEPL2Grammar())) {s = 52;}

                        else if ( (LA124_1==EQUALS) && (synpred4_EsperEPL2Grammar())) {s = 53;}

                        else if ( (LA124_1==IS) && (synpred4_EsperEPL2Grammar())) {s = 54;}

                        else if ( (LA124_1==SQL_NE) && (synpred4_EsperEPL2Grammar())) {s = 55;}

                        else if ( (LA124_1==NOT_EQUAL) && (synpred4_EsperEPL2Grammar())) {s = 56;}

                        else if ( (LA124_1==BAND) && (synpred4_EsperEPL2Grammar())) {s = 57;}

                        else if ( (LA124_1==BOR) && (synpred4_EsperEPL2Grammar())) {s = 58;}

                        else if ( (LA124_1==BXOR) && (synpred4_EsperEPL2Grammar())) {s = 59;}

                        else if ( (LA124_1==AND_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 60;}

                        else if ( (LA124_1==OR_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 61;}

                        else if ( (LA124_1==GROUP) && (synpred4_EsperEPL2Grammar())) {s = 62;}

                        else if ( (LA124_1==HAVING) && (synpred4_EsperEPL2Grammar())) {s = 63;}

                        else if ( (LA124_1==OUTPUT) && (synpred4_EsperEPL2Grammar())) {s = 64;}

                        else if ( (LA124_1==ORDER) && (synpred4_EsperEPL2Grammar())) {s = 65;}

                        else if ( (LA124_1==ROW_LIMIT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 66;}

                        else if ( (LA124_1==EOF) && (synpred4_EsperEPL2Grammar())) {s = 67;}

                        else if ( (LA124_1==RPAREN) && (synpred4_EsperEPL2Grammar())) {s = 68;}

                        else if ( (LA124_1==COMMA) && (synpred4_EsperEPL2Grammar())) {s = 69;}

                        else if ( (LA124_1==AS) && (synpred4_EsperEPL2Grammar())) {s = 70;}

                        else if ( (LA124_1==FROM) && (synpred4_EsperEPL2Grammar())) {s = 71;}

                        else if ( (LA124_1==ASC) && (synpred4_EsperEPL2Grammar())) {s = 72;}

                        else if ( (LA124_1==DESC) && (synpred4_EsperEPL2Grammar())) {s = 73;}

                        else if ( (LA124_1==THEN) && (synpred4_EsperEPL2Grammar())) {s = 74;}

                        else if ( (LA124_1==ELSE) && (synpred4_EsperEPL2Grammar())) {s = 75;}

                        else if ( (LA124_1==END) && (synpred4_EsperEPL2Grammar())) {s = 76;}

                        else if ( (LA124_1==WHEN) && (synpred4_EsperEPL2Grammar())) {s = 77;}

                        else if ( (LA124_1==COLON) && (synpred4_EsperEPL2Grammar())) {s = 78;}

                        else if ( (LA124_1==RBRACK) && (synpred4_EsperEPL2Grammar())) {s = 79;}

                        else if ( (LA124_1==RCURLY) && (synpred4_EsperEPL2Grammar())) {s = 80;}

                        else if ( (LA124_1==TIMEPERIOD_SECONDS) && (synpred4_EsperEPL2Grammar())) {s = 81;}

                        else if ( (LA124_1==TIMEPERIOD_SECOND) && (synpred4_EsperEPL2Grammar())) {s = 82;}

                        else if ( (LA124_1==TIMEPERIOD_SEC) && (synpred4_EsperEPL2Grammar())) {s = 83;}

                        else if ( (LA124_1==NOT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 84;}

                        else if ( (LA124_1==IN_SET) && (synpred4_EsperEPL2Grammar())) {s = 85;}

                        else if ( (LA124_1==BETWEEN) && (synpred4_EsperEPL2Grammar())) {s = 86;}

                        else if ( (LA124_1==LIKE) && (synpred4_EsperEPL2Grammar())) {s = 87;}

                        else if ( (LA124_1==REGEXP) && (synpred4_EsperEPL2Grammar())) {s = 88;}

                        else if ( (LA124_1==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 89;}

                         
                        input.seek(index124_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA124_8 = input.LA(1);

                         
                        int index124_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA124_8==ESCAPECHAR) && (synpred4_EsperEPL2Grammar())) {s = 90;}

                        else if ( (LA124_8==LBRACK) && (synpred4_EsperEPL2Grammar())) {s = 91;}

                        else if ( (LA124_8==LPAREN) ) {s = 92;}

                        else if ( (LA124_8==QUESTION) && (synpred4_EsperEPL2Grammar())) {s = 93;}

                        else if ( (LA124_8==DOT) && (synpred4_EsperEPL2Grammar())) {s = 94;}

                        else if ( (LA124_8==STAR) && (synpred4_EsperEPL2Grammar())) {s = 95;}

                        else if ( (LA124_8==DIV) && (synpred4_EsperEPL2Grammar())) {s = 96;}

                        else if ( (LA124_8==MOD) && (synpred4_EsperEPL2Grammar())) {s = 97;}

                        else if ( (LA124_8==PLUS) && (synpred4_EsperEPL2Grammar())) {s = 98;}

                        else if ( (LA124_8==MINUS) && (synpred4_EsperEPL2Grammar())) {s = 99;}

                        else if ( (LA124_8==LOR) && (synpred4_EsperEPL2Grammar())) {s = 100;}

                        else if ( (LA124_8==LT) && (synpred4_EsperEPL2Grammar())) {s = 101;}

                        else if ( (LA124_8==GT) && (synpred4_EsperEPL2Grammar())) {s = 102;}

                        else if ( (LA124_8==LE) && (synpred4_EsperEPL2Grammar())) {s = 103;}

                        else if ( (LA124_8==GE) && (synpred4_EsperEPL2Grammar())) {s = 104;}

                        else if ( (LA124_8==EQUALS) && (synpred4_EsperEPL2Grammar())) {s = 105;}

                        else if ( (LA124_8==IS) && (synpred4_EsperEPL2Grammar())) {s = 106;}

                        else if ( (LA124_8==SQL_NE) && (synpred4_EsperEPL2Grammar())) {s = 107;}

                        else if ( (LA124_8==NOT_EQUAL) && (synpred4_EsperEPL2Grammar())) {s = 108;}

                        else if ( (LA124_8==BAND) && (synpred4_EsperEPL2Grammar())) {s = 109;}

                        else if ( (LA124_8==BOR) && (synpred4_EsperEPL2Grammar())) {s = 110;}

                        else if ( (LA124_8==BXOR) && (synpred4_EsperEPL2Grammar())) {s = 111;}

                        else if ( (LA124_8==AND_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 112;}

                        else if ( (LA124_8==OR_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 113;}

                        else if ( (LA124_8==GROUP) && (synpred4_EsperEPL2Grammar())) {s = 114;}

                        else if ( (LA124_8==HAVING) && (synpred4_EsperEPL2Grammar())) {s = 115;}

                        else if ( (LA124_8==OUTPUT) && (synpred4_EsperEPL2Grammar())) {s = 116;}

                        else if ( (LA124_8==ORDER) && (synpred4_EsperEPL2Grammar())) {s = 117;}

                        else if ( (LA124_8==ROW_LIMIT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 118;}

                        else if ( (LA124_8==EOF) && (synpred4_EsperEPL2Grammar())) {s = 119;}

                        else if ( (LA124_8==RPAREN) && (synpred4_EsperEPL2Grammar())) {s = 120;}

                        else if ( (LA124_8==COMMA) && (synpred4_EsperEPL2Grammar())) {s = 121;}

                        else if ( (LA124_8==AS) && (synpred4_EsperEPL2Grammar())) {s = 122;}

                        else if ( (LA124_8==FROM) && (synpred4_EsperEPL2Grammar())) {s = 123;}

                        else if ( (LA124_8==ASC) && (synpred4_EsperEPL2Grammar())) {s = 124;}

                        else if ( (LA124_8==DESC) && (synpred4_EsperEPL2Grammar())) {s = 125;}

                        else if ( (LA124_8==THEN) && (synpred4_EsperEPL2Grammar())) {s = 126;}

                        else if ( (LA124_8==ELSE) && (synpred4_EsperEPL2Grammar())) {s = 127;}

                        else if ( (LA124_8==END) && (synpred4_EsperEPL2Grammar())) {s = 128;}

                        else if ( (LA124_8==WHEN) && (synpred4_EsperEPL2Grammar())) {s = 129;}

                        else if ( (LA124_8==COLON) && (synpred4_EsperEPL2Grammar())) {s = 130;}

                        else if ( (LA124_8==RBRACK) && (synpred4_EsperEPL2Grammar())) {s = 131;}

                        else if ( (LA124_8==RCURLY) && (synpred4_EsperEPL2Grammar())) {s = 132;}

                        else if ( (LA124_8==TIMEPERIOD_SECONDS) && (synpred4_EsperEPL2Grammar())) {s = 133;}

                        else if ( (LA124_8==TIMEPERIOD_SECOND) && (synpred4_EsperEPL2Grammar())) {s = 134;}

                        else if ( (LA124_8==TIMEPERIOD_SEC) && (synpred4_EsperEPL2Grammar())) {s = 135;}

                        else if ( (LA124_8==NOT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 136;}

                        else if ( (LA124_8==IN_SET) && (synpred4_EsperEPL2Grammar())) {s = 137;}

                        else if ( (LA124_8==BETWEEN) && (synpred4_EsperEPL2Grammar())) {s = 138;}

                        else if ( (LA124_8==LIKE) && (synpred4_EsperEPL2Grammar())) {s = 139;}

                        else if ( (LA124_8==REGEXP) && (synpred4_EsperEPL2Grammar())) {s = 140;}

                        else if ( (LA124_8==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 141;}

                         
                        input.seek(index124_8);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA124_9 = input.LA(1);

                         
                        int index124_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA124_9==ESCAPECHAR) && (synpred4_EsperEPL2Grammar())) {s = 142;}

                        else if ( (LA124_9==LBRACK) && (synpred4_EsperEPL2Grammar())) {s = 143;}

                        else if ( (LA124_9==LPAREN) ) {s = 144;}

                        else if ( (LA124_9==QUESTION) && (synpred4_EsperEPL2Grammar())) {s = 145;}

                        else if ( (LA124_9==DOT) && (synpred4_EsperEPL2Grammar())) {s = 146;}

                        else if ( (LA124_9==STAR) && (synpred4_EsperEPL2Grammar())) {s = 147;}

                        else if ( (LA124_9==DIV) && (synpred4_EsperEPL2Grammar())) {s = 148;}

                        else if ( (LA124_9==MOD) && (synpred4_EsperEPL2Grammar())) {s = 149;}

                        else if ( (LA124_9==PLUS) && (synpred4_EsperEPL2Grammar())) {s = 150;}

                        else if ( (LA124_9==MINUS) && (synpred4_EsperEPL2Grammar())) {s = 151;}

                        else if ( (LA124_9==LOR) && (synpred4_EsperEPL2Grammar())) {s = 152;}

                        else if ( (LA124_9==LT) && (synpred4_EsperEPL2Grammar())) {s = 153;}

                        else if ( (LA124_9==GT) && (synpred4_EsperEPL2Grammar())) {s = 154;}

                        else if ( (LA124_9==LE) && (synpred4_EsperEPL2Grammar())) {s = 155;}

                        else if ( (LA124_9==GE) && (synpred4_EsperEPL2Grammar())) {s = 156;}

                        else if ( (LA124_9==EQUALS) && (synpred4_EsperEPL2Grammar())) {s = 157;}

                        else if ( (LA124_9==IS) && (synpred4_EsperEPL2Grammar())) {s = 158;}

                        else if ( (LA124_9==SQL_NE) && (synpred4_EsperEPL2Grammar())) {s = 159;}

                        else if ( (LA124_9==NOT_EQUAL) && (synpred4_EsperEPL2Grammar())) {s = 160;}

                        else if ( (LA124_9==BAND) && (synpred4_EsperEPL2Grammar())) {s = 161;}

                        else if ( (LA124_9==BOR) && (synpred4_EsperEPL2Grammar())) {s = 162;}

                        else if ( (LA124_9==BXOR) && (synpred4_EsperEPL2Grammar())) {s = 163;}

                        else if ( (LA124_9==AND_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 164;}

                        else if ( (LA124_9==OR_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 165;}

                        else if ( (LA124_9==GROUP) && (synpred4_EsperEPL2Grammar())) {s = 166;}

                        else if ( (LA124_9==HAVING) && (synpred4_EsperEPL2Grammar())) {s = 167;}

                        else if ( (LA124_9==OUTPUT) && (synpred4_EsperEPL2Grammar())) {s = 168;}

                        else if ( (LA124_9==ORDER) && (synpred4_EsperEPL2Grammar())) {s = 169;}

                        else if ( (LA124_9==ROW_LIMIT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 170;}

                        else if ( (LA124_9==EOF) && (synpred4_EsperEPL2Grammar())) {s = 171;}

                        else if ( (LA124_9==RPAREN) && (synpred4_EsperEPL2Grammar())) {s = 172;}

                        else if ( (LA124_9==COMMA) && (synpred4_EsperEPL2Grammar())) {s = 173;}

                        else if ( (LA124_9==AS) && (synpred4_EsperEPL2Grammar())) {s = 174;}

                        else if ( (LA124_9==FROM) && (synpred4_EsperEPL2Grammar())) {s = 175;}

                        else if ( (LA124_9==ASC) && (synpred4_EsperEPL2Grammar())) {s = 176;}

                        else if ( (LA124_9==DESC) && (synpred4_EsperEPL2Grammar())) {s = 177;}

                        else if ( (LA124_9==THEN) && (synpred4_EsperEPL2Grammar())) {s = 178;}

                        else if ( (LA124_9==ELSE) && (synpred4_EsperEPL2Grammar())) {s = 179;}

                        else if ( (LA124_9==END) && (synpred4_EsperEPL2Grammar())) {s = 180;}

                        else if ( (LA124_9==WHEN) && (synpred4_EsperEPL2Grammar())) {s = 181;}

                        else if ( (LA124_9==COLON) && (synpred4_EsperEPL2Grammar())) {s = 182;}

                        else if ( (LA124_9==RBRACK) && (synpred4_EsperEPL2Grammar())) {s = 183;}

                        else if ( (LA124_9==RCURLY) && (synpred4_EsperEPL2Grammar())) {s = 184;}

                        else if ( (LA124_9==TIMEPERIOD_SECONDS) && (synpred4_EsperEPL2Grammar())) {s = 185;}

                        else if ( (LA124_9==TIMEPERIOD_SECOND) && (synpred4_EsperEPL2Grammar())) {s = 186;}

                        else if ( (LA124_9==TIMEPERIOD_SEC) && (synpred4_EsperEPL2Grammar())) {s = 187;}

                        else if ( (LA124_9==NOT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 188;}

                        else if ( (LA124_9==IN_SET) && (synpred4_EsperEPL2Grammar())) {s = 189;}

                        else if ( (LA124_9==BETWEEN) && (synpred4_EsperEPL2Grammar())) {s = 190;}

                        else if ( (LA124_9==LIKE) && (synpred4_EsperEPL2Grammar())) {s = 191;}

                        else if ( (LA124_9==REGEXP) && (synpred4_EsperEPL2Grammar())) {s = 192;}

                        else if ( (LA124_9==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 193;}

                         
                        input.seek(index124_9);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA124_42 = input.LA(1);

                         
                        int index124_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA124_42==IDENT) ) {s = 252;}

                        else if ( (LA124_42==AT) && (synpred4_EsperEPL2Grammar())) {s = 253;}

                        else if ( (LA124_42==COUNT) && (synpred4_EsperEPL2Grammar())) {s = 254;}

                        else if ( (LA124_42==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 255;}

                        else if ( (LA124_42==EVERY_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 256;}

                        else if ( (LA124_42==SUM) && (synpred4_EsperEPL2Grammar())) {s = 257;}

                        else if ( (LA124_42==AVG) && (synpred4_EsperEPL2Grammar())) {s = 258;}

                        else if ( (LA124_42==MAX) ) {s = 259;}

                        else if ( (LA124_42==MIN) ) {s = 260;}

                        else if ( (LA124_42==COALESCE) && (synpred4_EsperEPL2Grammar())) {s = 261;}

                        else if ( (LA124_42==MEDIAN) && (synpred4_EsperEPL2Grammar())) {s = 262;}

                        else if ( (LA124_42==STDDEV) && (synpred4_EsperEPL2Grammar())) {s = 263;}

                        else if ( (LA124_42==AVEDEV) && (synpred4_EsperEPL2Grammar())) {s = 264;}

                        else if ( (LA124_42==EVENTS) && (synpred4_EsperEPL2Grammar())) {s = 265;}

                        else if ( (LA124_42==FIRST) && (synpred4_EsperEPL2Grammar())) {s = 266;}

                        else if ( (LA124_42==LAST) && (synpred4_EsperEPL2Grammar())) {s = 267;}

                        else if ( (LA124_42==UNIDIRECTIONAL) && (synpred4_EsperEPL2Grammar())) {s = 268;}

                        else if ( (LA124_42==RETAINUNION) && (synpred4_EsperEPL2Grammar())) {s = 269;}

                        else if ( (LA124_42==RETAININTERSECTION) && (synpred4_EsperEPL2Grammar())) {s = 270;}

                        else if ( (LA124_42==UNTIL) && (synpred4_EsperEPL2Grammar())) {s = 271;}

                        else if ( (LA124_42==PATTERN) && (synpred4_EsperEPL2Grammar())) {s = 272;}

                        else if ( (LA124_42==SQL) && (synpred4_EsperEPL2Grammar())) {s = 273;}

                        else if ( (LA124_42==METADATASQL) && (synpred4_EsperEPL2Grammar())) {s = 274;}

                        else if ( (LA124_42==PREVIOUS) && (synpred4_EsperEPL2Grammar())) {s = 275;}

                        else if ( (LA124_42==PRIOR) && (synpred4_EsperEPL2Grammar())) {s = 276;}

                        else if ( (LA124_42==WEEKDAY) && (synpred4_EsperEPL2Grammar())) {s = 277;}

                        else if ( (LA124_42==LW) && (synpred4_EsperEPL2Grammar())) {s = 278;}

                        else if ( (LA124_42==INSTANCEOF) && (synpred4_EsperEPL2Grammar())) {s = 279;}

                        else if ( (LA124_42==CAST) && (synpred4_EsperEPL2Grammar())) {s = 280;}

                        else if ( (LA124_42==SNAPSHOT) && (synpred4_EsperEPL2Grammar())) {s = 281;}

                        else if ( (LA124_42==VARIABLE) && (synpred4_EsperEPL2Grammar())) {s = 282;}

                        else if ( (LA124_42==WINDOW) && (synpred4_EsperEPL2Grammar())) {s = 283;}

                        else if ( (LA124_42==LEFT) && (synpred4_EsperEPL2Grammar())) {s = 284;}

                        else if ( (LA124_42==RIGHT) && (synpred4_EsperEPL2Grammar())) {s = 285;}

                        else if ( (LA124_42==OUTER) && (synpred4_EsperEPL2Grammar())) {s = 286;}

                        else if ( (LA124_42==FULL) && (synpred4_EsperEPL2Grammar())) {s = 287;}

                        else if ( (LA124_42==JOIN) && (synpred4_EsperEPL2Grammar())) {s = 288;}

                         
                        input.seek(index124_42);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA124_252 = input.LA(1);

                         
                        int index124_252 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA124_252==ESCAPECHAR) && (synpred4_EsperEPL2Grammar())) {s = 457;}

                        else if ( (LA124_252==LBRACK) && (synpred4_EsperEPL2Grammar())) {s = 458;}

                        else if ( (LA124_252==LPAREN) ) {s = 459;}

                        else if ( (LA124_252==QUESTION) && (synpred4_EsperEPL2Grammar())) {s = 460;}

                        else if ( (LA124_252==STAR) && (synpred4_EsperEPL2Grammar())) {s = 461;}

                        else if ( (LA124_252==DIV) && (synpred4_EsperEPL2Grammar())) {s = 462;}

                        else if ( (LA124_252==MOD) && (synpred4_EsperEPL2Grammar())) {s = 463;}

                        else if ( (LA124_252==PLUS) && (synpred4_EsperEPL2Grammar())) {s = 464;}

                        else if ( (LA124_252==MINUS) && (synpred4_EsperEPL2Grammar())) {s = 465;}

                        else if ( (LA124_252==LOR) && (synpred4_EsperEPL2Grammar())) {s = 466;}

                        else if ( (LA124_252==LT) && (synpred4_EsperEPL2Grammar())) {s = 467;}

                        else if ( (LA124_252==GT) && (synpred4_EsperEPL2Grammar())) {s = 468;}

                        else if ( (LA124_252==LE) && (synpred4_EsperEPL2Grammar())) {s = 469;}

                        else if ( (LA124_252==GE) && (synpred4_EsperEPL2Grammar())) {s = 470;}

                        else if ( (LA124_252==EQUALS) && (synpred4_EsperEPL2Grammar())) {s = 471;}

                        else if ( (LA124_252==IS) && (synpred4_EsperEPL2Grammar())) {s = 472;}

                        else if ( (LA124_252==SQL_NE) && (synpred4_EsperEPL2Grammar())) {s = 473;}

                        else if ( (LA124_252==NOT_EQUAL) && (synpred4_EsperEPL2Grammar())) {s = 474;}

                        else if ( (LA124_252==BAND) && (synpred4_EsperEPL2Grammar())) {s = 475;}

                        else if ( (LA124_252==BOR) && (synpred4_EsperEPL2Grammar())) {s = 476;}

                        else if ( (LA124_252==BXOR) && (synpred4_EsperEPL2Grammar())) {s = 477;}

                        else if ( (LA124_252==AND_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 478;}

                        else if ( (LA124_252==OR_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 479;}

                        else if ( (LA124_252==GROUP) && (synpred4_EsperEPL2Grammar())) {s = 480;}

                        else if ( (LA124_252==HAVING) && (synpred4_EsperEPL2Grammar())) {s = 481;}

                        else if ( (LA124_252==OUTPUT) && (synpred4_EsperEPL2Grammar())) {s = 482;}

                        else if ( (LA124_252==ORDER) && (synpred4_EsperEPL2Grammar())) {s = 483;}

                        else if ( (LA124_252==ROW_LIMIT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 484;}

                        else if ( (LA124_252==EOF) && (synpred4_EsperEPL2Grammar())) {s = 485;}

                        else if ( (LA124_252==RPAREN) && (synpred4_EsperEPL2Grammar())) {s = 486;}

                        else if ( (LA124_252==COMMA) && (synpred4_EsperEPL2Grammar())) {s = 487;}

                        else if ( (LA124_252==AS) && (synpred4_EsperEPL2Grammar())) {s = 488;}

                        else if ( (LA124_252==FROM) && (synpred4_EsperEPL2Grammar())) {s = 489;}

                        else if ( (LA124_252==ASC) && (synpred4_EsperEPL2Grammar())) {s = 490;}

                        else if ( (LA124_252==DESC) && (synpred4_EsperEPL2Grammar())) {s = 491;}

                        else if ( (LA124_252==THEN) && (synpred4_EsperEPL2Grammar())) {s = 492;}

                        else if ( (LA124_252==ELSE) && (synpred4_EsperEPL2Grammar())) {s = 493;}

                        else if ( (LA124_252==END) && (synpred4_EsperEPL2Grammar())) {s = 494;}

                        else if ( (LA124_252==WHEN) && (synpred4_EsperEPL2Grammar())) {s = 495;}

                        else if ( (LA124_252==COLON) && (synpred4_EsperEPL2Grammar())) {s = 496;}

                        else if ( (LA124_252==RBRACK) && (synpred4_EsperEPL2Grammar())) {s = 497;}

                        else if ( (LA124_252==RCURLY) && (synpred4_EsperEPL2Grammar())) {s = 498;}

                        else if ( (LA124_252==TIMEPERIOD_SECONDS) && (synpred4_EsperEPL2Grammar())) {s = 499;}

                        else if ( (LA124_252==TIMEPERIOD_SECOND) && (synpred4_EsperEPL2Grammar())) {s = 500;}

                        else if ( (LA124_252==TIMEPERIOD_SEC) && (synpred4_EsperEPL2Grammar())) {s = 501;}

                        else if ( (LA124_252==NOT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 502;}

                        else if ( (LA124_252==IN_SET) && (synpred4_EsperEPL2Grammar())) {s = 503;}

                        else if ( (LA124_252==BETWEEN) && (synpred4_EsperEPL2Grammar())) {s = 504;}

                        else if ( (LA124_252==LIKE) && (synpred4_EsperEPL2Grammar())) {s = 505;}

                        else if ( (LA124_252==REGEXP) && (synpred4_EsperEPL2Grammar())) {s = 506;}

                        else if ( (LA124_252==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 507;}

                        else if ( (LA124_252==DOT) ) {s = 508;}

                         
                        input.seek(index124_252);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA124_259 = input.LA(1);

                         
                        int index124_259 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA124_259==ESCAPECHAR) && (synpred4_EsperEPL2Grammar())) {s = 509;}

                        else if ( (LA124_259==LBRACK) && (synpred4_EsperEPL2Grammar())) {s = 510;}

                        else if ( (LA124_259==LPAREN) ) {s = 511;}

                        else if ( (LA124_259==QUESTION) && (synpred4_EsperEPL2Grammar())) {s = 512;}

                        else if ( (LA124_259==STAR) && (synpred4_EsperEPL2Grammar())) {s = 513;}

                        else if ( (LA124_259==DIV) && (synpred4_EsperEPL2Grammar())) {s = 514;}

                        else if ( (LA124_259==MOD) && (synpred4_EsperEPL2Grammar())) {s = 515;}

                        else if ( (LA124_259==PLUS) && (synpred4_EsperEPL2Grammar())) {s = 516;}

                        else if ( (LA124_259==MINUS) && (synpred4_EsperEPL2Grammar())) {s = 517;}

                        else if ( (LA124_259==LOR) && (synpred4_EsperEPL2Grammar())) {s = 518;}

                        else if ( (LA124_259==LT) && (synpred4_EsperEPL2Grammar())) {s = 519;}

                        else if ( (LA124_259==GT) && (synpred4_EsperEPL2Grammar())) {s = 520;}

                        else if ( (LA124_259==LE) && (synpred4_EsperEPL2Grammar())) {s = 521;}

                        else if ( (LA124_259==GE) && (synpred4_EsperEPL2Grammar())) {s = 522;}

                        else if ( (LA124_259==EQUALS) && (synpred4_EsperEPL2Grammar())) {s = 523;}

                        else if ( (LA124_259==IS) && (synpred4_EsperEPL2Grammar())) {s = 524;}

                        else if ( (LA124_259==SQL_NE) && (synpred4_EsperEPL2Grammar())) {s = 525;}

                        else if ( (LA124_259==NOT_EQUAL) && (synpred4_EsperEPL2Grammar())) {s = 526;}

                        else if ( (LA124_259==BAND) && (synpred4_EsperEPL2Grammar())) {s = 527;}

                        else if ( (LA124_259==BOR) && (synpred4_EsperEPL2Grammar())) {s = 528;}

                        else if ( (LA124_259==BXOR) && (synpred4_EsperEPL2Grammar())) {s = 529;}

                        else if ( (LA124_259==AND_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 530;}

                        else if ( (LA124_259==OR_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 531;}

                        else if ( (LA124_259==GROUP) && (synpred4_EsperEPL2Grammar())) {s = 532;}

                        else if ( (LA124_259==HAVING) && (synpred4_EsperEPL2Grammar())) {s = 533;}

                        else if ( (LA124_259==OUTPUT) && (synpred4_EsperEPL2Grammar())) {s = 534;}

                        else if ( (LA124_259==ORDER) && (synpred4_EsperEPL2Grammar())) {s = 535;}

                        else if ( (LA124_259==ROW_LIMIT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 536;}

                        else if ( (LA124_259==EOF) && (synpred4_EsperEPL2Grammar())) {s = 537;}

                        else if ( (LA124_259==RPAREN) && (synpred4_EsperEPL2Grammar())) {s = 538;}

                        else if ( (LA124_259==COMMA) && (synpred4_EsperEPL2Grammar())) {s = 539;}

                        else if ( (LA124_259==AS) && (synpred4_EsperEPL2Grammar())) {s = 540;}

                        else if ( (LA124_259==FROM) && (synpred4_EsperEPL2Grammar())) {s = 541;}

                        else if ( (LA124_259==ASC) && (synpred4_EsperEPL2Grammar())) {s = 542;}

                        else if ( (LA124_259==DESC) && (synpred4_EsperEPL2Grammar())) {s = 543;}

                        else if ( (LA124_259==THEN) && (synpred4_EsperEPL2Grammar())) {s = 544;}

                        else if ( (LA124_259==ELSE) && (synpred4_EsperEPL2Grammar())) {s = 545;}

                        else if ( (LA124_259==END) && (synpred4_EsperEPL2Grammar())) {s = 546;}

                        else if ( (LA124_259==WHEN) && (synpred4_EsperEPL2Grammar())) {s = 547;}

                        else if ( (LA124_259==COLON) && (synpred4_EsperEPL2Grammar())) {s = 548;}

                        else if ( (LA124_259==RBRACK) && (synpred4_EsperEPL2Grammar())) {s = 549;}

                        else if ( (LA124_259==RCURLY) && (synpred4_EsperEPL2Grammar())) {s = 550;}

                        else if ( (LA124_259==TIMEPERIOD_SECONDS) && (synpred4_EsperEPL2Grammar())) {s = 551;}

                        else if ( (LA124_259==TIMEPERIOD_SECOND) && (synpred4_EsperEPL2Grammar())) {s = 552;}

                        else if ( (LA124_259==TIMEPERIOD_SEC) && (synpred4_EsperEPL2Grammar())) {s = 553;}

                        else if ( (LA124_259==NOT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 554;}

                        else if ( (LA124_259==IN_SET) && (synpred4_EsperEPL2Grammar())) {s = 555;}

                        else if ( (LA124_259==BETWEEN) && (synpred4_EsperEPL2Grammar())) {s = 556;}

                        else if ( (LA124_259==LIKE) && (synpred4_EsperEPL2Grammar())) {s = 557;}

                        else if ( (LA124_259==REGEXP) && (synpred4_EsperEPL2Grammar())) {s = 558;}

                        else if ( (LA124_259==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 559;}

                        else if ( (LA124_259==DOT) && (synpred4_EsperEPL2Grammar())) {s = 560;}

                         
                        input.seek(index124_259);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA124_260 = input.LA(1);

                         
                        int index124_260 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA124_260==ESCAPECHAR) && (synpred4_EsperEPL2Grammar())) {s = 561;}

                        else if ( (LA124_260==LBRACK) && (synpred4_EsperEPL2Grammar())) {s = 562;}

                        else if ( (LA124_260==LPAREN) ) {s = 563;}

                        else if ( (LA124_260==QUESTION) && (synpred4_EsperEPL2Grammar())) {s = 564;}

                        else if ( (LA124_260==STAR) && (synpred4_EsperEPL2Grammar())) {s = 565;}

                        else if ( (LA124_260==DIV) && (synpred4_EsperEPL2Grammar())) {s = 566;}

                        else if ( (LA124_260==MOD) && (synpred4_EsperEPL2Grammar())) {s = 567;}

                        else if ( (LA124_260==PLUS) && (synpred4_EsperEPL2Grammar())) {s = 568;}

                        else if ( (LA124_260==MINUS) && (synpred4_EsperEPL2Grammar())) {s = 569;}

                        else if ( (LA124_260==LOR) && (synpred4_EsperEPL2Grammar())) {s = 570;}

                        else if ( (LA124_260==LT) && (synpred4_EsperEPL2Grammar())) {s = 571;}

                        else if ( (LA124_260==GT) && (synpred4_EsperEPL2Grammar())) {s = 572;}

                        else if ( (LA124_260==LE) && (synpred4_EsperEPL2Grammar())) {s = 573;}

                        else if ( (LA124_260==GE) && (synpred4_EsperEPL2Grammar())) {s = 574;}

                        else if ( (LA124_260==EQUALS) && (synpred4_EsperEPL2Grammar())) {s = 575;}

                        else if ( (LA124_260==IS) && (synpred4_EsperEPL2Grammar())) {s = 576;}

                        else if ( (LA124_260==SQL_NE) && (synpred4_EsperEPL2Grammar())) {s = 577;}

                        else if ( (LA124_260==NOT_EQUAL) && (synpred4_EsperEPL2Grammar())) {s = 578;}

                        else if ( (LA124_260==BAND) && (synpred4_EsperEPL2Grammar())) {s = 579;}

                        else if ( (LA124_260==BOR) && (synpred4_EsperEPL2Grammar())) {s = 580;}

                        else if ( (LA124_260==BXOR) && (synpred4_EsperEPL2Grammar())) {s = 581;}

                        else if ( (LA124_260==AND_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 582;}

                        else if ( (LA124_260==OR_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 583;}

                        else if ( (LA124_260==GROUP) && (synpred4_EsperEPL2Grammar())) {s = 584;}

                        else if ( (LA124_260==HAVING) && (synpred4_EsperEPL2Grammar())) {s = 585;}

                        else if ( (LA124_260==OUTPUT) && (synpred4_EsperEPL2Grammar())) {s = 586;}

                        else if ( (LA124_260==ORDER) && (synpred4_EsperEPL2Grammar())) {s = 587;}

                        else if ( (LA124_260==ROW_LIMIT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 588;}

                        else if ( (LA124_260==EOF) && (synpred4_EsperEPL2Grammar())) {s = 589;}

                        else if ( (LA124_260==RPAREN) && (synpred4_EsperEPL2Grammar())) {s = 590;}

                        else if ( (LA124_260==COMMA) && (synpred4_EsperEPL2Grammar())) {s = 591;}

                        else if ( (LA124_260==AS) && (synpred4_EsperEPL2Grammar())) {s = 592;}

                        else if ( (LA124_260==FROM) && (synpred4_EsperEPL2Grammar())) {s = 593;}

                        else if ( (LA124_260==ASC) && (synpred4_EsperEPL2Grammar())) {s = 594;}

                        else if ( (LA124_260==DESC) && (synpred4_EsperEPL2Grammar())) {s = 595;}

                        else if ( (LA124_260==THEN) && (synpred4_EsperEPL2Grammar())) {s = 596;}

                        else if ( (LA124_260==ELSE) && (synpred4_EsperEPL2Grammar())) {s = 597;}

                        else if ( (LA124_260==END) && (synpred4_EsperEPL2Grammar())) {s = 598;}

                        else if ( (LA124_260==WHEN) && (synpred4_EsperEPL2Grammar())) {s = 599;}

                        else if ( (LA124_260==COLON) && (synpred4_EsperEPL2Grammar())) {s = 600;}

                        else if ( (LA124_260==RBRACK) && (synpred4_EsperEPL2Grammar())) {s = 601;}

                        else if ( (LA124_260==RCURLY) && (synpred4_EsperEPL2Grammar())) {s = 602;}

                        else if ( (LA124_260==TIMEPERIOD_SECONDS) && (synpred4_EsperEPL2Grammar())) {s = 603;}

                        else if ( (LA124_260==TIMEPERIOD_SECOND) && (synpred4_EsperEPL2Grammar())) {s = 604;}

                        else if ( (LA124_260==TIMEPERIOD_SEC) && (synpred4_EsperEPL2Grammar())) {s = 605;}

                        else if ( (LA124_260==NOT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 606;}

                        else if ( (LA124_260==IN_SET) && (synpred4_EsperEPL2Grammar())) {s = 607;}

                        else if ( (LA124_260==BETWEEN) && (synpred4_EsperEPL2Grammar())) {s = 608;}

                        else if ( (LA124_260==LIKE) && (synpred4_EsperEPL2Grammar())) {s = 609;}

                        else if ( (LA124_260==REGEXP) && (synpred4_EsperEPL2Grammar())) {s = 610;}

                        else if ( (LA124_260==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 611;}

                        else if ( (LA124_260==DOT) && (synpred4_EsperEPL2Grammar())) {s = 612;}

                         
                        input.seek(index124_260);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA124_425 = input.LA(1);

                         
                        int index124_425 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 612;}

                        else if ( (true) ) {s = 196;}

                         
                        input.seek(index124_425);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA124_451 = input.LA(1);

                         
                        int index124_451 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 612;}

                        else if ( (true) ) {s = 196;}

                         
                        input.seek(index124_451);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA124_459 = input.LA(1);

                         
                        int index124_459 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 612;}

                        else if ( (true) ) {s = 196;}

                         
                        input.seek(index124_459);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA124_508 = input.LA(1);

                         
                        int index124_508 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 612;}

                        else if ( (true) ) {s = 196;}

                         
                        input.seek(index124_508);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA124_511 = input.LA(1);

                         
                        int index124_511 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 612;}

                        else if ( (true) ) {s = 196;}

                         
                        input.seek(index124_511);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA124_563 = input.LA(1);

                         
                        int index124_563 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 612;}

                        else if ( (true) ) {s = 196;}

                         
                        input.seek(index124_563);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA124_633 = input.LA(1);

                         
                        int index124_633 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 612;}

                        else if ( (true) ) {s = 196;}

                         
                        input.seek(index124_633);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA124_659 = input.LA(1);

                         
                        int index124_659 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 612;}

                        else if ( (true) ) {s = 196;}

                         
                        input.seek(index124_659);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA124_685 = input.LA(1);

                         
                        int index124_685 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 612;}

                        else if ( (true) ) {s = 196;}

                         
                        input.seek(index124_685);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA124_711 = input.LA(1);

                         
                        int index124_711 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 612;}

                        else if ( (true) ) {s = 196;}

                         
                        input.seek(index124_711);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 124, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA154_eotS =
        "\u0224\uffff";
    static final String DFA154_eofS =
        "\u0224\uffff";
    static final String DFA154_minS =
        "\1\5\2\0\6\6\57\uffff\1\u00d0\126\uffff\3\0\63\uffff\3\0\53\uffff"+
        "\3\0\54\uffff\3\0\57\uffff\3\0\43\uffff\3\0\u00a7\uffff";
    static final String DFA154_maxS =
        "\1\u00f0\2\0\4\u00e8\1\u00ee\1\u00e8\57\uffff\1\u00e7\126\uffff"+
        "\3\0\63\uffff\3\0\53\uffff\3\0\54\uffff\3\0\57\uffff\3\0\43\uffff"+
        "\3\0\u00a7\uffff";
    static final String DFA154_acceptS =
        "\11\uffff\57\4\1\uffff\1\11\44\uffff\1\1\44\uffff\1\2\3\3\1\5\2"+
        "\3\1\7\1\10\3\3\3\uffff\2\3\61\4\3\uffff\7\4\1\5\5\3\1\7\5\3\1\10"+
        "\2\3\25\4\3\uffff\7\4\3\3\1\5\2\3\1\7\1\10\5\3\1\10\2\3\25\4\3\uffff"+
        "\7\4\1\5\3\3\1\7\3\3\1\4\5\3\1\5\31\4\3\uffff\7\4\5\3\1\10\1\7\25"+
        "\4\3\uffff\7\4\1\5\5\3\1\7\5\3\1\10\1\6\1\12\u0091\uffff";
    static final String DFA154_specialS =
        "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\57\uffff\1\11\126\uffff\1"+
        "\12\1\13\1\14\63\uffff\1\15\1\16\1\17\53\uffff\1\20\1\21\1\22\54"+
        "\uffff\1\23\1\24\1\25\57\uffff\1\26\1\27\1\30\43\uffff\1\31\1\32"+
        "\1\33\u00a7\uffff}>";
    static final String[] DFA154_transitionS = {
            "\1\56\4\uffff\1\24\2\uffff\1\67\1\25\2\uffff\1\26\1\27\1\30"+
            "\1\31\1\32\1\33\1\34\1\35\1\23\1\uffff\1\11\6\uffff\1\61\1\uffff"+
            "\1\63\1\57\1\60\1\62\10\uffff\1\36\1\37\1\1\10\uffff\1\40\1"+
            "\41\1\42\1\44\1\45\1\46\1\47\1\50\1\64\1\51\1\2\1\52\1\53\1"+
            "\65\1\uffff\1\54\1\uffff\1\55\1\43\1\22\14\uffff\1\16\1\17\1"+
            "\20\157\uffff\1\6\1\uffff\1\7\3\uffff\1\21\1\uffff\1\70\1\71"+
            "\2\uffff\1\14\1\15\12\uffff\1\13\1\12\2\uffff\1\66\1\uffff\1"+
            "\3\1\uffff\1\10\1\uffff\1\4\1\5",
            "\1\uffff",
            "\1\uffff",
            "\1\u00ac\1\u00ad\1\u00ae\1\u00af\1\uffff\1\u00a6\1\u00a5\1"+
            "\u00ab\6\uffff\1\u0086\24\uffff\1\u009f\10\uffff\1\u008a\3\uffff"+
            "\1\u00a7\1\u00a8\14\uffff\1\u008b\12\uffff\1\u0089\1\u0088\1"+
            "\u0093\1\u0092\1\u0085\1\u0084\1\u0091\1\u0090\1\u008f\1\u008e"+
            "\1\u008d\1\u008c\165\uffff\1\u00a9\1\u009e\2\uffff\1\u00aa\1"+
            "\u0094\2\uffff\1\u0087\2\uffff\1\u00a2\1\u00a3\1\u00a4\1\u00a0"+
            "\1\u00a1\1\u009a\1\u009b\1\u009c\1\u009d\1\u0099\1\u0097\1\u0098"+
            "\1\u0095\1\u0096",
            "\1\u00cb\1\u00cc\1\u00cd\1\u00ce\1\uffff\1\u00c2\1\u00c1\1"+
            "\u00ca\6\uffff\1\u00d2\24\uffff\1\u00bb\10\uffff\1\u00d5\3\uffff"+
            "\1\u00c3\1\u00c4\14\uffff\1\u00db\12\uffff\1\u00d4\1\u00d3\1"+
            "\u00d7\1\u00d6\1\u00d1\1\u00d0\1\u00c7\1\u00c6\1\u00c5\1\u00da"+
            "\1\u00d9\1\u00d8\165\uffff\1\u00c8\1\u00ba\2\uffff\1\u00c9\1"+
            "\u00b0\2\uffff\1\u00cf\2\uffff\1\u00be\1\u00bf\1\u00c0\1\u00bc"+
            "\1\u00bd\1\u00b6\1\u00b7\1\u00b8\1\u00b9\1\u00b5\1\u00b3\1\u00b4"+
            "\1\u00b1\1\u00b2",
            "\1\u00f9\1\u00fa\1\u00fb\1\u00fc\1\uffff\1\u00f0\1\u00ef\1"+
            "\u00f8\6\uffff\1\u00ff\24\uffff\1\u00e9\10\uffff\1\u0103\3\uffff"+
            "\1\u00f1\1\u00f2\14\uffff\1\u0104\12\uffff\1\u00dd\1\u00dc\1"+
            "\u0102\1\u0101\1\u00fe\1\u00fd\1\u00f5\1\u00f4\1\u00f3\1\u0107"+
            "\1\u0106\1\u0105\165\uffff\1\u00f6\1\u00e8\2\uffff\1\u00f7\1"+
            "\u00de\2\uffff\1\u0100\2\uffff\1\u00ec\1\u00ed\1\u00ee\1\u00ea"+
            "\1\u00eb\1\u00e4\1\u00e5\1\u00e6\1\u00e7\1\u00e3\1\u00e1\1\u00e2"+
            "\1\u00df\1\u00e0",
            "\1\u0128\1\u0129\1\u012a\1\u012b\1\uffff\1\u011f\1\u011e\1"+
            "\u0127\6\uffff\1\u012f\24\uffff\1\u0118\10\uffff\1\u0130\3\uffff"+
            "\1\u0120\1\u0121\14\uffff\1\u010a\12\uffff\1\u010c\1\u010b\1"+
            "\u0109\1\u0108\1\u012e\1\u012d\1\u0124\1\u0123\1\u0122\1\u0133"+
            "\1\u0132\1\u0131\165\uffff\1\u0125\1\u0117\2\uffff\1\u0126\1"+
            "\u010d\2\uffff\1\u012c\2\uffff\1\u011b\1\u011c\1\u011d\1\u0119"+
            "\1\u011a\1\u0113\1\u0114\1\u0115\1\u0116\1\u0112\1\u0110\1\u0111"+
            "\1\u010e\1\u010f",
            "\1\u015a\1\u015b\1\u015c\1\u015d\1\uffff\1\u0151\1\u0150\1"+
            "\u0159\6\uffff\1\u0139\24\uffff\1\u014a\10\uffff\1\u0164\3\uffff"+
            "\1\u0152\1\u0153\14\uffff\1\u0163\12\uffff\1\u0162\1\u0161\1"+
            "\u0136\1\u0135\1\u0138\1\u0137\1\u0156\1\u0155\1\u0154\1\u0160"+
            "\1\u015f\1\u015e\165\uffff\1\u0157\1\u0149\1\u013e\1\u0134\1"+
            "\u0158\1\u013f\1\u013c\1\uffff\1\u013a\2\uffff\1\u014d\1\u014e"+
            "\1\u014f\1\u014b\1\u014c\1\u0145\1\u0146\1\u0147\1\u0148\1\u0144"+
            "\1\u0142\1\u0143\1\u0140\1\u0141\4\uffff\1\u013d\1\u013b",
            "\1\u0180\1\u0181\1\u0182\1\u0183\1\uffff\1\u0177\1\u0176\1"+
            "\u017f\6\uffff\1\u0189\24\uffff\1\u0170\10\uffff\1\u018a\3\uffff"+
            "\1\u0178\1\u0179\14\uffff\1\u0190\12\uffff\1\u0186\1\u0185\1"+
            "\u018f\1\u018e\1\u0188\1\u0187\1\u017c\1\u017b\1\u017a\1\u018d"+
            "\1\u018c\1\u018b\165\uffff\1\u017d\1\u016f\2\uffff\1\u017e\1"+
            "\u0165\2\uffff\1\u0184\2\uffff\1\u0173\1\u0174\1\u0175\1\u0171"+
            "\1\u0172\1\u016b\1\u016c\1\u016d\1\u016e\1\u016a\1\u0168\1\u0169"+
            "\1\u0166\1\u0167",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0192\3\uffff\1\u0192\22\uffff\1\u0191",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA154_eot = DFA.unpackEncodedString(DFA154_eotS);
    static final short[] DFA154_eof = DFA.unpackEncodedString(DFA154_eofS);
    static final char[] DFA154_min = DFA.unpackEncodedStringToUnsignedChars(DFA154_minS);
    static final char[] DFA154_max = DFA.unpackEncodedStringToUnsignedChars(DFA154_maxS);
    static final short[] DFA154_accept = DFA.unpackEncodedString(DFA154_acceptS);
    static final short[] DFA154_special = DFA.unpackEncodedString(DFA154_specialS);
    static final short[][] DFA154_transition;

    static {
        int numStates = DFA154_transitionS.length;
        DFA154_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA154_transition[i] = DFA.unpackEncodedString(DFA154_transitionS[i]);
        }
    }

    class DFA154 extends DFA {

        public DFA154(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 154;
            this.eot = DFA154_eot;
            this.eof = DFA154_eof;
            this.min = DFA154_min;
            this.max = DFA154_max;
            this.accept = DFA154_accept;
            this.special = DFA154_special;
            this.transition = DFA154_transition;
        }
        public String getDescription() {
            return "1100:1: expressionWithTime : ( ( lastOperand )=> lastOperand | ( lastWeekdayOperand )=> lastWeekdayOperand | ( timePeriod )=> timePeriod | ( expressionQualifyable )=> expressionQualifyable | ( rangeOperand )=> rangeOperand | ( frequencyOperand )=> frequencyOperand | ( lastOperator )=> lastOperator | ( weekDayOperator )=> weekDayOperator | ( numericParameterList )=> numericParameterList | numberSetStar );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA154_0 = input.LA(1);

                         
                        int index154_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA154_0==LAST) ) {s = 1;}

                        else if ( (LA154_0==LW) ) {s = 2;}

                        else if ( (LA154_0==NUM_INT) ) {s = 3;}

                        else if ( (LA154_0==NUM_LONG) ) {s = 4;}

                        else if ( (LA154_0==NUM_FLOAT) ) {s = 5;}

                        else if ( (LA154_0==NUM_DOUBLE) ) {s = 6;}

                        else if ( (LA154_0==IDENT) ) {s = 7;}

                        else if ( (LA154_0==QUESTION) ) {s = 8;}

                        else if ( (LA154_0==CASE) && (synpred8_EsperEPL2Grammar())) {s = 9;}

                        else if ( (LA154_0==MINUS) && (synpred8_EsperEPL2Grammar())) {s = 10;}

                        else if ( (LA154_0==PLUS) && (synpred8_EsperEPL2Grammar())) {s = 11;}

                        else if ( (LA154_0==STRING_LITERAL) && (synpred8_EsperEPL2Grammar())) {s = 12;}

                        else if ( (LA154_0==QUOTED_STRING_LITERAL) && (synpred8_EsperEPL2Grammar())) {s = 13;}

                        else if ( (LA154_0==BOOLEAN_TRUE) && (synpred8_EsperEPL2Grammar())) {s = 14;}

                        else if ( (LA154_0==BOOLEAN_FALSE) && (synpred8_EsperEPL2Grammar())) {s = 15;}

                        else if ( (LA154_0==VALUE_NULL) && (synpred8_EsperEPL2Grammar())) {s = 16;}

                        else if ( (LA154_0==LPAREN) && (synpred8_EsperEPL2Grammar())) {s = 17;}

                        else if ( (LA154_0==AT) && (synpred8_EsperEPL2Grammar())) {s = 18;}

                        else if ( (LA154_0==COUNT) && (synpred8_EsperEPL2Grammar())) {s = 19;}

                        else if ( (LA154_0==ESCAPE) && (synpred8_EsperEPL2Grammar())) {s = 20;}

                        else if ( (LA154_0==EVERY_EXPR) && (synpred8_EsperEPL2Grammar())) {s = 21;}

                        else if ( (LA154_0==SUM) && (synpred8_EsperEPL2Grammar())) {s = 22;}

                        else if ( (LA154_0==AVG) && (synpred8_EsperEPL2Grammar())) {s = 23;}

                        else if ( (LA154_0==MAX) && (synpred8_EsperEPL2Grammar())) {s = 24;}

                        else if ( (LA154_0==MIN) && (synpred8_EsperEPL2Grammar())) {s = 25;}

                        else if ( (LA154_0==COALESCE) && (synpred8_EsperEPL2Grammar())) {s = 26;}

                        else if ( (LA154_0==MEDIAN) && (synpred8_EsperEPL2Grammar())) {s = 27;}

                        else if ( (LA154_0==STDDEV) && (synpred8_EsperEPL2Grammar())) {s = 28;}

                        else if ( (LA154_0==AVEDEV) && (synpred8_EsperEPL2Grammar())) {s = 29;}

                        else if ( (LA154_0==EVENTS) && (synpred8_EsperEPL2Grammar())) {s = 30;}

                        else if ( (LA154_0==FIRST) && (synpred8_EsperEPL2Grammar())) {s = 31;}

                        else if ( (LA154_0==UNIDIRECTIONAL) && (synpred8_EsperEPL2Grammar())) {s = 32;}

                        else if ( (LA154_0==RETAINUNION) && (synpred8_EsperEPL2Grammar())) {s = 33;}

                        else if ( (LA154_0==RETAININTERSECTION) && (synpred8_EsperEPL2Grammar())) {s = 34;}

                        else if ( (LA154_0==UNTIL) && (synpred8_EsperEPL2Grammar())) {s = 35;}

                        else if ( (LA154_0==PATTERN) && (synpred8_EsperEPL2Grammar())) {s = 36;}

                        else if ( (LA154_0==SQL) && (synpred8_EsperEPL2Grammar())) {s = 37;}

                        else if ( (LA154_0==METADATASQL) && (synpred8_EsperEPL2Grammar())) {s = 38;}

                        else if ( (LA154_0==PREVIOUS) && (synpred8_EsperEPL2Grammar())) {s = 39;}

                        else if ( (LA154_0==PRIOR) && (synpred8_EsperEPL2Grammar())) {s = 40;}

                        else if ( (LA154_0==WEEKDAY) && (synpred8_EsperEPL2Grammar())) {s = 41;}

                        else if ( (LA154_0==INSTANCEOF) && (synpred8_EsperEPL2Grammar())) {s = 42;}

                        else if ( (LA154_0==CAST) && (synpred8_EsperEPL2Grammar())) {s = 43;}

                        else if ( (LA154_0==SNAPSHOT) && (synpred8_EsperEPL2Grammar())) {s = 44;}

                        else if ( (LA154_0==VARIABLE) && (synpred8_EsperEPL2Grammar())) {s = 45;}

                        else if ( (LA154_0==WINDOW) && (synpred8_EsperEPL2Grammar())) {s = 46;}

                        else if ( (LA154_0==LEFT) && (synpred8_EsperEPL2Grammar())) {s = 47;}

                        else if ( (LA154_0==RIGHT) && (synpred8_EsperEPL2Grammar())) {s = 48;}

                        else if ( (LA154_0==OUTER) && (synpred8_EsperEPL2Grammar())) {s = 49;}

                        else if ( (LA154_0==FULL) && (synpred8_EsperEPL2Grammar())) {s = 50;}

                        else if ( (LA154_0==JOIN) && (synpred8_EsperEPL2Grammar())) {s = 51;}

                        else if ( (LA154_0==EXISTS) && (synpred8_EsperEPL2Grammar())) {s = 52;}

                        else if ( (LA154_0==CURRENT_TIMESTAMP) && (synpred8_EsperEPL2Grammar())) {s = 53;}

                        else if ( (LA154_0==LCURLY) && (synpred8_EsperEPL2Grammar())) {s = 54;}

                        else if ( (LA154_0==NOT_EXPR) && (synpred8_EsperEPL2Grammar())) {s = 55;}

                        else if ( (LA154_0==STAR) ) {s = 56;}

                        else if ( (LA154_0==LBRACK) && (synpred13_EsperEPL2Grammar())) {s = 57;}

                         
                        input.seek(index154_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA154_1 = input.LA(1);

                         
                        int index154_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_EsperEPL2Grammar()) ) {s = 94;}

                        else if ( (synpred8_EsperEPL2Grammar()) ) {s = 55;}

                         
                        input.seek(index154_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA154_2 = input.LA(1);

                         
                        int index154_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_EsperEPL2Grammar()) ) {s = 131;}

                        else if ( (synpred8_EsperEPL2Grammar()) ) {s = 55;}

                         
                        input.seek(index154_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA154_3 = input.LA(1);

                         
                        int index154_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA154_3==TIMEPERIOD_MINUTES) && (synpred7_EsperEPL2Grammar())) {s = 132;}

                        else if ( (LA154_3==TIMEPERIOD_MINUTE) && (synpred7_EsperEPL2Grammar())) {s = 133;}

                        else if ( (LA154_3==MIN) && (synpred7_EsperEPL2Grammar())) {s = 134;}

                        else if ( (LA154_3==COLON) && (synpred9_EsperEPL2Grammar())) {s = 135;}

                        else if ( (LA154_3==TIMEPERIOD_DAYS) && (synpred7_EsperEPL2Grammar())) {s = 136;}

                        else if ( (LA154_3==TIMEPERIOD_DAY) && (synpred7_EsperEPL2Grammar())) {s = 137;}

                        else if ( (LA154_3==LAST) && (synpred11_EsperEPL2Grammar())) {s = 138;}

                        else if ( (LA154_3==WEEKDAY) && (synpred12_EsperEPL2Grammar())) {s = 139;}

                        else if ( (LA154_3==TIMEPERIOD_MILLISECONDS) && (synpred7_EsperEPL2Grammar())) {s = 140;}

                        else if ( (LA154_3==TIMEPERIOD_MILLISECOND) && (synpred7_EsperEPL2Grammar())) {s = 141;}

                        else if ( (LA154_3==TIMEPERIOD_MILLISEC) && (synpred7_EsperEPL2Grammar())) {s = 142;}

                        else if ( (LA154_3==TIMEPERIOD_SECONDS) ) {s = 143;}

                        else if ( (LA154_3==TIMEPERIOD_SECOND) ) {s = 144;}

                        else if ( (LA154_3==TIMEPERIOD_SEC) ) {s = 145;}

                        else if ( (LA154_3==TIMEPERIOD_HOURS) && (synpred7_EsperEPL2Grammar())) {s = 146;}

                        else if ( (LA154_3==TIMEPERIOD_HOUR) && (synpred7_EsperEPL2Grammar())) {s = 147;}

                        else if ( (LA154_3==STAR) && (synpred8_EsperEPL2Grammar())) {s = 148;}

                        else if ( (LA154_3==DIV) && (synpred8_EsperEPL2Grammar())) {s = 149;}

                        else if ( (LA154_3==MOD) && (synpred8_EsperEPL2Grammar())) {s = 150;}

                        else if ( (LA154_3==PLUS) && (synpred8_EsperEPL2Grammar())) {s = 151;}

                        else if ( (LA154_3==MINUS) && (synpred8_EsperEPL2Grammar())) {s = 152;}

                        else if ( (LA154_3==LOR) && (synpred8_EsperEPL2Grammar())) {s = 153;}

                        else if ( (LA154_3==LT) && (synpred8_EsperEPL2Grammar())) {s = 154;}

                        else if ( (LA154_3==GT) && (synpred8_EsperEPL2Grammar())) {s = 155;}

                        else if ( (LA154_3==LE) && (synpred8_EsperEPL2Grammar())) {s = 156;}

                        else if ( (LA154_3==GE) && (synpred8_EsperEPL2Grammar())) {s = 157;}

                        else if ( (LA154_3==EQUALS) && (synpred8_EsperEPL2Grammar())) {s = 158;}

                        else if ( (LA154_3==IS) && (synpred8_EsperEPL2Grammar())) {s = 159;}

                        else if ( (LA154_3==SQL_NE) && (synpred8_EsperEPL2Grammar())) {s = 160;}

                        else if ( (LA154_3==NOT_EQUAL) && (synpred8_EsperEPL2Grammar())) {s = 161;}

                        else if ( (LA154_3==BAND) && (synpred8_EsperEPL2Grammar())) {s = 162;}

                        else if ( (LA154_3==BOR) && (synpred8_EsperEPL2Grammar())) {s = 163;}

                        else if ( (LA154_3==BXOR) && (synpred8_EsperEPL2Grammar())) {s = 164;}

                        else if ( (LA154_3==AND_EXPR) && (synpred8_EsperEPL2Grammar())) {s = 165;}

                        else if ( (LA154_3==OR_EXPR) && (synpred8_EsperEPL2Grammar())) {s = 166;}

                        else if ( (LA154_3==ASC) && (synpred8_EsperEPL2Grammar())) {s = 167;}

                        else if ( (LA154_3==DESC) && (synpred8_EsperEPL2Grammar())) {s = 168;}

                        else if ( (LA154_3==COMMA) && (synpred8_EsperEPL2Grammar())) {s = 169;}

                        else if ( (LA154_3==RPAREN) && (synpred8_EsperEPL2Grammar())) {s = 170;}

                        else if ( (LA154_3==NOT_EXPR) && (synpred8_EsperEPL2Grammar())) {s = 171;}

                        else if ( (LA154_3==IN_SET) && (synpred8_EsperEPL2Grammar())) {s = 172;}

                        else if ( (LA154_3==BETWEEN) && (synpred8_EsperEPL2Grammar())) {s = 173;}

                        else if ( (LA154_3==LIKE) && (synpred8_EsperEPL2Grammar())) {s = 174;}

                        else if ( (LA154_3==REGEXP) && (synpred8_EsperEPL2Grammar())) {s = 175;}

                         
                        input.seek(index154_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA154_4 = input.LA(1);

                         
                        int index154_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA154_4==STAR) && (synpred8_EsperEPL2Grammar())) {s = 176;}

                        else if ( (LA154_4==DIV) && (synpred8_EsperEPL2Grammar())) {s = 177;}

                        else if ( (LA154_4==MOD) && (synpred8_EsperEPL2Grammar())) {s = 178;}

                        else if ( (LA154_4==PLUS) && (synpred8_EsperEPL2Grammar())) {s = 179;}

                        else if ( (LA154_4==MINUS) && (synpred8_EsperEPL2Grammar())) {s = 180;}

                        else if ( (LA154_4==LOR) && (synpred8_EsperEPL2Grammar())) {s = 181;}

                        else if ( (LA154_4==LT) && (synpred8_EsperEPL2Grammar())) {s = 182;}

                        else if ( (LA154_4==GT) && (synpred8_EsperEPL2Grammar())) {s = 183;}

                        else if ( (LA154_4==LE) && (synpred8_EsperEPL2Grammar())) {s = 184;}

                        else if ( (LA154_4==GE) && (synpred8_EsperEPL2Grammar())) {s = 185;}

                        else if ( (LA154_4==EQUALS) && (synpred8_EsperEPL2Grammar())) {s = 186;}

                        else if ( (LA154_4==IS) && (synpred8_EsperEPL2Grammar())) {s = 187;}

                        else if ( (LA154_4==SQL_NE) && (synpred8_EsperEPL2Grammar())) {s = 188;}

                        else if ( (LA154_4==NOT_EQUAL) && (synpred8_EsperEPL2Grammar())) {s = 189;}

                        else if ( (LA154_4==BAND) && (synpred8_EsperEPL2Grammar())) {s = 190;}

                        else if ( (LA154_4==BOR) && (synpred8_EsperEPL2Grammar())) {s = 191;}

                        else if ( (LA154_4==BXOR) && (synpred8_EsperEPL2Grammar())) {s = 192;}

                        else if ( (LA154_4==AND_EXPR) && (synpred8_EsperEPL2Grammar())) {s = 193;}

                        else if ( (LA154_4==OR_EXPR) && (synpred8_EsperEPL2Grammar())) {s = 194;}

                        else if ( (LA154_4==ASC) && (synpred8_EsperEPL2Grammar())) {s = 195;}

                        else if ( (LA154_4==DESC) && (synpred8_EsperEPL2Grammar())) {s = 196;}

                        else if ( (LA154_4==TIMEPERIOD_SECONDS) ) {s = 197;}

                        else if ( (LA154_4==TIMEPERIOD_SECOND) ) {s = 198;}

                        else if ( (LA154_4==TIMEPERIOD_SEC) ) {s = 199;}

                        else if ( (LA154_4==COMMA) && (synpred8_EsperEPL2Grammar())) {s = 200;}

                        else if ( (LA154_4==RPAREN) && (synpred8_EsperEPL2Grammar())) {s = 201;}

                        else if ( (LA154_4==NOT_EXPR) && (synpred8_EsperEPL2Grammar())) {s = 202;}

                        else if ( (LA154_4==IN_SET) && (synpred8_EsperEPL2Grammar())) {s = 203;}

                        else if ( (LA154_4==BETWEEN) && (synpred8_EsperEPL2Grammar())) {s = 204;}

                        else if ( (LA154_4==LIKE) && (synpred8_EsperEPL2Grammar())) {s = 205;}

                        else if ( (LA154_4==REGEXP) && (synpred8_EsperEPL2Grammar())) {s = 206;}

                        else if ( (LA154_4==COLON) && (synpred9_EsperEPL2Grammar())) {s = 207;}

                        else if ( (LA154_4==TIMEPERIOD_MINUTES) && (synpred7_EsperEPL2Grammar())) {s = 208;}

                        else if ( (LA154_4==TIMEPERIOD_MINUTE) && (synpred7_EsperEPL2Grammar())) {s = 209;}

                        else if ( (LA154_4==MIN) && (synpred7_EsperEPL2Grammar())) {s = 210;}

                        else if ( (LA154_4==TIMEPERIOD_DAYS) && (synpred7_EsperEPL2Grammar())) {s = 211;}

                        else if ( (LA154_4==TIMEPERIOD_DAY) && (synpred7_EsperEPL2Grammar())) {s = 212;}

                        else if ( (LA154_4==LAST) && (synpred11_EsperEPL2Grammar())) {s = 213;}

                        else if ( (LA154_4==TIMEPERIOD_HOURS) && (synpred7_EsperEPL2Grammar())) {s = 214;}

                        else if ( (LA154_4==TIMEPERIOD_HOUR) && (synpred7_EsperEPL2Grammar())) {s = 215;}

                        else if ( (LA154_4==TIMEPERIOD_MILLISECONDS) && (synpred7_EsperEPL2Grammar())) {s = 216;}

                        else if ( (LA154_4==TIMEPERIOD_MILLISECOND) && (synpred7_EsperEPL2Grammar())) {s = 217;}

                        else if ( (LA154_4==TIMEPERIOD_MILLISEC) && (synpred7_EsperEPL2Grammar())) {s = 218;}

                        else if ( (LA154_4==WEEKDAY) && (synpred12_EsperEPL2Grammar())) {s = 219;}

                         
                        input.seek(index154_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA154_5 = input.LA(1);

                         
                        int index154_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA154_5==TIMEPERIOD_DAYS) && (synpred7_EsperEPL2Grammar())) {s = 220;}

                        else if ( (LA154_5==TIMEPERIOD_DAY) && (synpred7_EsperEPL2Grammar())) {s = 221;}

                        else if ( (LA154_5==STAR) && (synpred8_EsperEPL2Grammar())) {s = 222;}

                        else if ( (LA154_5==DIV) && (synpred8_EsperEPL2Grammar())) {s = 223;}

                        else if ( (LA154_5==MOD) && (synpred8_EsperEPL2Grammar())) {s = 224;}

                        else if ( (LA154_5==PLUS) && (synpred8_EsperEPL2Grammar())) {s = 225;}

                        else if ( (LA154_5==MINUS) && (synpred8_EsperEPL2Grammar())) {s = 226;}

                        else if ( (LA154_5==LOR) && (synpred8_EsperEPL2Grammar())) {s = 227;}

                        else if ( (LA154_5==LT) && (synpred8_EsperEPL2Grammar())) {s = 228;}

                        else if ( (LA154_5==GT) && (synpred8_EsperEPL2Grammar())) {s = 229;}

                        else if ( (LA154_5==LE) && (synpred8_EsperEPL2Grammar())) {s = 230;}

                        else if ( (LA154_5==GE) && (synpred8_EsperEPL2Grammar())) {s = 231;}

                        else if ( (LA154_5==EQUALS) && (synpred8_EsperEPL2Grammar())) {s = 232;}

                        else if ( (LA154_5==IS) && (synpred8_EsperEPL2Grammar())) {s = 233;}

                        else if ( (LA154_5==SQL_NE) && (synpred8_EsperEPL2Grammar())) {s = 234;}

                        else if ( (LA154_5==NOT_EQUAL) && (synpred8_EsperEPL2Grammar())) {s = 235;}

                        else if ( (LA154_5==BAND) && (synpred8_EsperEPL2Grammar())) {s = 236;}

                        else if ( (LA154_5==BOR) && (synpred8_EsperEPL2Grammar())) {s = 237;}

                        else if ( (LA154_5==BXOR) && (synpred8_EsperEPL2Grammar())) {s = 238;}

                        else if ( (LA154_5==AND_EXPR) && (synpred8_EsperEPL2Grammar())) {s = 239;}

                        else if ( (LA154_5==OR_EXPR) && (synpred8_EsperEPL2Grammar())) {s = 240;}

                        else if ( (LA154_5==ASC) && (synpred8_EsperEPL2Grammar())) {s = 241;}

                        else if ( (LA154_5==DESC) && (synpred8_EsperEPL2Grammar())) {s = 242;}

                        else if ( (LA154_5==TIMEPERIOD_SECONDS) ) {s = 243;}

                        else if ( (LA154_5==TIMEPERIOD_SECOND) ) {s = 244;}

                        else if ( (LA154_5==TIMEPERIOD_SEC) ) {s = 245;}

                        else if ( (LA154_5==COMMA) && (synpred8_EsperEPL2Grammar())) {s = 246;}

                        else if ( (LA154_5==RPAREN) && (synpred8_EsperEPL2Grammar())) {s = 247;}

                        else if ( (LA154_5==NOT_EXPR) && (synpred8_EsperEPL2Grammar())) {s = 248;}

                        else if ( (LA154_5==IN_SET) && (synpred8_EsperEPL2Grammar())) {s = 249;}

                        else if ( (LA154_5==BETWEEN) && (synpred8_EsperEPL2Grammar())) {s = 250;}

                        else if ( (LA154_5==LIKE) && (synpred8_EsperEPL2Grammar())) {s = 251;}

                        else if ( (LA154_5==REGEXP) && (synpred8_EsperEPL2Grammar())) {s = 252;}

                        else if ( (LA154_5==TIMEPERIOD_MINUTES) && (synpred7_EsperEPL2Grammar())) {s = 253;}

                        else if ( (LA154_5==TIMEPERIOD_MINUTE) && (synpred7_EsperEPL2Grammar())) {s = 254;}

                        else if ( (LA154_5==MIN) && (synpred7_EsperEPL2Grammar())) {s = 255;}

                        else if ( (LA154_5==COLON) && (synpred9_EsperEPL2Grammar())) {s = 256;}

                        else if ( (LA154_5==TIMEPERIOD_HOURS) && (synpred7_EsperEPL2Grammar())) {s = 257;}

                        else if ( (LA154_5==TIMEPERIOD_HOUR) && (synpred7_EsperEPL2Grammar())) {s = 258;}

                        else if ( (LA154_5==LAST) && (synpred11_EsperEPL2Grammar())) {s = 259;}

                        else if ( (LA154_5==WEEKDAY) && (synpred12_EsperEPL2Grammar())) {s = 260;}

                        else if ( (LA154_5==TIMEPERIOD_MILLISECONDS) && (synpred7_EsperEPL2Grammar())) {s = 261;}

                        else if ( (LA154_5==TIMEPERIOD_MILLISECOND) && (synpred7_EsperEPL2Grammar())) {s = 262;}

                        else if ( (LA154_5==TIMEPERIOD_MILLISEC) && (synpred7_EsperEPL2Grammar())) {s = 263;}

                         
                        input.seek(index154_5);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA154_6 = input.LA(1);

                         
                        int index154_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA154_6==TIMEPERIOD_HOURS) && (synpred7_EsperEPL2Grammar())) {s = 264;}

                        else if ( (LA154_6==TIMEPERIOD_HOUR) && (synpred7_EsperEPL2Grammar())) {s = 265;}

                        else if ( (LA154_6==WEEKDAY) && (synpred12_EsperEPL2Grammar())) {s = 266;}

                        else if ( (LA154_6==TIMEPERIOD_DAYS) && (synpred7_EsperEPL2Grammar())) {s = 267;}

                        else if ( (LA154_6==TIMEPERIOD_DAY) && (synpred7_EsperEPL2Grammar())) {s = 268;}

                        else if ( (LA154_6==STAR) && (synpred8_EsperEPL2Grammar())) {s = 269;}

                        else if ( (LA154_6==DIV) && (synpred8_EsperEPL2Grammar())) {s = 270;}

                        else if ( (LA154_6==MOD) && (synpred8_EsperEPL2Grammar())) {s = 271;}

                        else if ( (LA154_6==PLUS) && (synpred8_EsperEPL2Grammar())) {s = 272;}

                        else if ( (LA154_6==MINUS) && (synpred8_EsperEPL2Grammar())) {s = 273;}

                        else if ( (LA154_6==LOR) && (synpred8_EsperEPL2Grammar())) {s = 274;}

                        else if ( (LA154_6==LT) && (synpred8_EsperEPL2Grammar())) {s = 275;}

                        else if ( (LA154_6==GT) && (synpred8_EsperEPL2Grammar())) {s = 276;}

                        else if ( (LA154_6==LE) && (synpred8_EsperEPL2Grammar())) {s = 277;}

                        else if ( (LA154_6==GE) && (synpred8_EsperEPL2Grammar())) {s = 278;}

                        else if ( (LA154_6==EQUALS) && (synpred8_EsperEPL2Grammar())) {s = 279;}

                        else if ( (LA154_6==IS) && (synpred8_EsperEPL2Grammar())) {s = 280;}

                        else if ( (LA154_6==SQL_NE) && (synpred8_EsperEPL2Grammar())) {s = 281;}

                        else if ( (LA154_6==NOT_EQUAL) && (synpred8_EsperEPL2Grammar())) {s = 282;}

                        else if ( (LA154_6==BAND) && (synpred8_EsperEPL2Grammar())) {s = 283;}

                        else if ( (LA154_6==BOR) && (synpred8_EsperEPL2Grammar())) {s = 284;}

                        else if ( (LA154_6==BXOR) && (synpred8_EsperEPL2Grammar())) {s = 285;}

                        else if ( (LA154_6==AND_EXPR) && (synpred8_EsperEPL2Grammar())) {s = 286;}

                        else if ( (LA154_6==OR_EXPR) && (synpred8_EsperEPL2Grammar())) {s = 287;}

                        else if ( (LA154_6==ASC) && (synpred8_EsperEPL2Grammar())) {s = 288;}

                        else if ( (LA154_6==DESC) && (synpred8_EsperEPL2Grammar())) {s = 289;}

                        else if ( (LA154_6==TIMEPERIOD_SECONDS) ) {s = 290;}

                        else if ( (LA154_6==TIMEPERIOD_SECOND) ) {s = 291;}

                        else if ( (LA154_6==TIMEPERIOD_SEC) ) {s = 292;}

                        else if ( (LA154_6==COMMA) && (synpred8_EsperEPL2Grammar())) {s = 293;}

                        else if ( (LA154_6==RPAREN) && (synpred8_EsperEPL2Grammar())) {s = 294;}

                        else if ( (LA154_6==NOT_EXPR) && (synpred8_EsperEPL2Grammar())) {s = 295;}

                        else if ( (LA154_6==IN_SET) && (synpred8_EsperEPL2Grammar())) {s = 296;}

                        else if ( (LA154_6==BETWEEN) && (synpred8_EsperEPL2Grammar())) {s = 297;}

                        else if ( (LA154_6==LIKE) && (synpred8_EsperEPL2Grammar())) {s = 298;}

                        else if ( (LA154_6==REGEXP) && (synpred8_EsperEPL2Grammar())) {s = 299;}

                        else if ( (LA154_6==COLON) && (synpred9_EsperEPL2Grammar())) {s = 300;}

                        else if ( (LA154_6==TIMEPERIOD_MINUTES) && (synpred7_EsperEPL2Grammar())) {s = 301;}

                        else if ( (LA154_6==TIMEPERIOD_MINUTE) && (synpred7_EsperEPL2Grammar())) {s = 302;}

                        else if ( (LA154_6==MIN) && (synpred7_EsperEPL2Grammar())) {s = 303;}

                        else if ( (LA154_6==LAST) && (synpred11_EsperEPL2Grammar())) {s = 304;}

                        else if ( (LA154_6==TIMEPERIOD_MILLISECONDS) && (synpred7_EsperEPL2Grammar())) {s = 305;}

                        else if ( (LA154_6==TIMEPERIOD_MILLISECOND) && (synpred7_EsperEPL2Grammar())) {s = 306;}

                        else if ( (LA154_6==TIMEPERIOD_MILLISEC) && (synpred7_EsperEPL2Grammar())) {s = 307;}

                         
                        input.seek(index154_6);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA154_7 = input.LA(1);

                         
                        int index154_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA154_7==LPAREN) && (synpred8_EsperEPL2Grammar())) {s = 308;}

                        else if ( (LA154_7==TIMEPERIOD_HOURS) && (synpred7_EsperEPL2Grammar())) {s = 309;}

                        else if ( (LA154_7==TIMEPERIOD_HOUR) && (synpred7_EsperEPL2Grammar())) {s = 310;}

                        else if ( (LA154_7==TIMEPERIOD_MINUTES) && (synpred7_EsperEPL2Grammar())) {s = 311;}

                        else if ( (LA154_7==TIMEPERIOD_MINUTE) && (synpred7_EsperEPL2Grammar())) {s = 312;}

                        else if ( (LA154_7==MIN) && (synpred7_EsperEPL2Grammar())) {s = 313;}

                        else if ( (LA154_7==COLON) && (synpred9_EsperEPL2Grammar())) {s = 314;}

                        else if ( (LA154_7==ESCAPECHAR) && (synpred8_EsperEPL2Grammar())) {s = 315;}

                        else if ( (LA154_7==LBRACK) && (synpred8_EsperEPL2Grammar())) {s = 316;}

                        else if ( (LA154_7==QUESTION) && (synpred8_EsperEPL2Grammar())) {s = 317;}

                        else if ( (LA154_7==DOT) && (synpred8_EsperEPL2Grammar())) {s = 318;}

                        else if ( (LA154_7==STAR) && (synpred8_EsperEPL2Grammar())) {s = 319;}

                        else if ( (LA154_7==DIV) && (synpred8_EsperEPL2Grammar())) {s = 320;}

                        else if ( (LA154_7==MOD) && (synpred8_EsperEPL2Grammar())) {s = 321;}

                        else if ( (LA154_7==PLUS) && (synpred8_EsperEPL2Grammar())) {s = 322;}

                        else if ( (LA154_7==MINUS) && (synpred8_EsperEPL2Grammar())) {s = 323;}

                        else if ( (LA154_7==LOR) && (synpred8_EsperEPL2Grammar())) {s = 324;}

                        else if ( (LA154_7==LT) && (synpred8_EsperEPL2Grammar())) {s = 325;}

                        else if ( (LA154_7==GT) && (synpred8_EsperEPL2Grammar())) {s = 326;}

                        else if ( (LA154_7==LE) && (synpred8_EsperEPL2Grammar())) {s = 327;}

                        else if ( (LA154_7==GE) && (synpred8_EsperEPL2Grammar())) {s = 328;}

                        else if ( (LA154_7==EQUALS) && (synpred8_EsperEPL2Grammar())) {s = 329;}

                        else if ( (LA154_7==IS) && (synpred8_EsperEPL2Grammar())) {s = 330;}

                        else if ( (LA154_7==SQL_NE) && (synpred8_EsperEPL2Grammar())) {s = 331;}

                        else if ( (LA154_7==NOT_EQUAL) && (synpred8_EsperEPL2Grammar())) {s = 332;}

                        else if ( (LA154_7==BAND) && (synpred8_EsperEPL2Grammar())) {s = 333;}

                        else if ( (LA154_7==BOR) && (synpred8_EsperEPL2Grammar())) {s = 334;}

                        else if ( (LA154_7==BXOR) && (synpred8_EsperEPL2Grammar())) {s = 335;}

                        else if ( (LA154_7==AND_EXPR) && (synpred8_EsperEPL2Grammar())) {s = 336;}

                        else if ( (LA154_7==OR_EXPR) && (synpred8_EsperEPL2Grammar())) {s = 337;}

                        else if ( (LA154_7==ASC) && (synpred8_EsperEPL2Grammar())) {s = 338;}

                        else if ( (LA154_7==DESC) && (synpred8_EsperEPL2Grammar())) {s = 339;}

                        else if ( (LA154_7==TIMEPERIOD_SECONDS) ) {s = 340;}

                        else if ( (LA154_7==TIMEPERIOD_SECOND) ) {s = 341;}

                        else if ( (LA154_7==TIMEPERIOD_SEC) ) {s = 342;}

                        else if ( (LA154_7==COMMA) && (synpred8_EsperEPL2Grammar())) {s = 343;}

                        else if ( (LA154_7==RPAREN) && (synpred8_EsperEPL2Grammar())) {s = 344;}

                        else if ( (LA154_7==NOT_EXPR) && (synpred8_EsperEPL2Grammar())) {s = 345;}

                        else if ( (LA154_7==IN_SET) && (synpred8_EsperEPL2Grammar())) {s = 346;}

                        else if ( (LA154_7==BETWEEN) && (synpred8_EsperEPL2Grammar())) {s = 347;}

                        else if ( (LA154_7==LIKE) && (synpred8_EsperEPL2Grammar())) {s = 348;}

                        else if ( (LA154_7==REGEXP) && (synpred8_EsperEPL2Grammar())) {s = 349;}

                        else if ( (LA154_7==TIMEPERIOD_MILLISECONDS) && (synpred7_EsperEPL2Grammar())) {s = 350;}

                        else if ( (LA154_7==TIMEPERIOD_MILLISECOND) && (synpred7_EsperEPL2Grammar())) {s = 351;}

                        else if ( (LA154_7==TIMEPERIOD_MILLISEC) && (synpred7_EsperEPL2Grammar())) {s = 352;}

                        else if ( (LA154_7==TIMEPERIOD_DAYS) && (synpred7_EsperEPL2Grammar())) {s = 353;}

                        else if ( (LA154_7==TIMEPERIOD_DAY) && (synpred7_EsperEPL2Grammar())) {s = 354;}

                        else if ( (LA154_7==WEEKDAY) && (synpred12_EsperEPL2Grammar())) {s = 355;}

                        else if ( (LA154_7==LAST) && (synpred11_EsperEPL2Grammar())) {s = 356;}

                         
                        input.seek(index154_7);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA154_8 = input.LA(1);

                         
                        int index154_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA154_8==STAR) && (synpred8_EsperEPL2Grammar())) {s = 357;}

                        else if ( (LA154_8==DIV) && (synpred8_EsperEPL2Grammar())) {s = 358;}

                        else if ( (LA154_8==MOD) && (synpred8_EsperEPL2Grammar())) {s = 359;}

                        else if ( (LA154_8==PLUS) && (synpred8_EsperEPL2Grammar())) {s = 360;}

                        else if ( (LA154_8==MINUS) && (synpred8_EsperEPL2Grammar())) {s = 361;}

                        else if ( (LA154_8==LOR) && (synpred8_EsperEPL2Grammar())) {s = 362;}

                        else if ( (LA154_8==LT) && (synpred8_EsperEPL2Grammar())) {s = 363;}

                        else if ( (LA154_8==GT) && (synpred8_EsperEPL2Grammar())) {s = 364;}

                        else if ( (LA154_8==LE) && (synpred8_EsperEPL2Grammar())) {s = 365;}

                        else if ( (LA154_8==GE) && (synpred8_EsperEPL2Grammar())) {s = 366;}

                        else if ( (LA154_8==EQUALS) && (synpred8_EsperEPL2Grammar())) {s = 367;}

                        else if ( (LA154_8==IS) && (synpred8_EsperEPL2Grammar())) {s = 368;}

                        else if ( (LA154_8==SQL_NE) && (synpred8_EsperEPL2Grammar())) {s = 369;}

                        else if ( (LA154_8==NOT_EQUAL) && (synpred8_EsperEPL2Grammar())) {s = 370;}

                        else if ( (LA154_8==BAND) && (synpred8_EsperEPL2Grammar())) {s = 371;}

                        else if ( (LA154_8==BOR) && (synpred8_EsperEPL2Grammar())) {s = 372;}

                        else if ( (LA154_8==BXOR) && (synpred8_EsperEPL2Grammar())) {s = 373;}

                        else if ( (LA154_8==AND_EXPR) && (synpred8_EsperEPL2Grammar())) {s = 374;}

                        else if ( (LA154_8==OR_EXPR) && (synpred8_EsperEPL2Grammar())) {s = 375;}

                        else if ( (LA154_8==ASC) && (synpred8_EsperEPL2Grammar())) {s = 376;}

                        else if ( (LA154_8==DESC) && (synpred8_EsperEPL2Grammar())) {s = 377;}

                        else if ( (LA154_8==TIMEPERIOD_SECONDS) ) {s = 378;}

                        else if ( (LA154_8==TIMEPERIOD_SECOND) ) {s = 379;}

                        else if ( (LA154_8==TIMEPERIOD_SEC) ) {s = 380;}

                        else if ( (LA154_8==COMMA) && (synpred8_EsperEPL2Grammar())) {s = 381;}

                        else if ( (LA154_8==RPAREN) && (synpred8_EsperEPL2Grammar())) {s = 382;}

                        else if ( (LA154_8==NOT_EXPR) && (synpred8_EsperEPL2Grammar())) {s = 383;}

                        else if ( (LA154_8==IN_SET) && (synpred8_EsperEPL2Grammar())) {s = 384;}

                        else if ( (LA154_8==BETWEEN) && (synpred8_EsperEPL2Grammar())) {s = 385;}

                        else if ( (LA154_8==LIKE) && (synpred8_EsperEPL2Grammar())) {s = 386;}

                        else if ( (LA154_8==REGEXP) && (synpred8_EsperEPL2Grammar())) {s = 387;}

                        else if ( (LA154_8==COLON) && (synpred9_EsperEPL2Grammar())) {s = 388;}

                        else if ( (LA154_8==TIMEPERIOD_DAYS) && (synpred7_EsperEPL2Grammar())) {s = 389;}

                        else if ( (LA154_8==TIMEPERIOD_DAY) && (synpred7_EsperEPL2Grammar())) {s = 390;}

                        else if ( (LA154_8==TIMEPERIOD_MINUTES) && (synpred7_EsperEPL2Grammar())) {s = 391;}

                        else if ( (LA154_8==TIMEPERIOD_MINUTE) && (synpred7_EsperEPL2Grammar())) {s = 392;}

                        else if ( (LA154_8==MIN) && (synpred7_EsperEPL2Grammar())) {s = 393;}

                        else if ( (LA154_8==LAST) && (synpred11_EsperEPL2Grammar())) {s = 394;}

                        else if ( (LA154_8==TIMEPERIOD_MILLISECONDS) && (synpred7_EsperEPL2Grammar())) {s = 395;}

                        else if ( (LA154_8==TIMEPERIOD_MILLISECOND) && (synpred7_EsperEPL2Grammar())) {s = 396;}

                        else if ( (LA154_8==TIMEPERIOD_MILLISEC) && (synpred7_EsperEPL2Grammar())) {s = 397;}

                        else if ( (LA154_8==TIMEPERIOD_HOURS) && (synpred7_EsperEPL2Grammar())) {s = 398;}

                        else if ( (LA154_8==TIMEPERIOD_HOUR) && (synpred7_EsperEPL2Grammar())) {s = 399;}

                        else if ( (LA154_8==WEEKDAY) && (synpred12_EsperEPL2Grammar())) {s = 400;}

                         
                        input.seek(index154_8);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA154_56 = input.LA(1);

                         
                        int index154_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA154_56==DIV) && (synpred10_EsperEPL2Grammar())) {s = 401;}

                        else if ( (LA154_56==COMMA||LA154_56==RPAREN) ) {s = 402;}

                         
                        input.seek(index154_56);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA154_143 = input.LA(1);

                         
                        int index154_143 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_EsperEPL2Grammar()) ) {s = 399;}

                        else if ( (synpred8_EsperEPL2Grammar()) ) {s = 387;}

                         
                        input.seek(index154_143);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA154_144 = input.LA(1);

                         
                        int index154_144 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_EsperEPL2Grammar()) ) {s = 399;}

                        else if ( (synpred8_EsperEPL2Grammar()) ) {s = 387;}

                         
                        input.seek(index154_144);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA154_145 = input.LA(1);

                         
                        int index154_145 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_EsperEPL2Grammar()) ) {s = 399;}

                        else if ( (synpred8_EsperEPL2Grammar()) ) {s = 387;}

                         
                        input.seek(index154_145);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA154_197 = input.LA(1);

                         
                        int index154_197 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_EsperEPL2Grammar()) ) {s = 399;}

                        else if ( (synpred8_EsperEPL2Grammar()) ) {s = 387;}

                         
                        input.seek(index154_197);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA154_198 = input.LA(1);

                         
                        int index154_198 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_EsperEPL2Grammar()) ) {s = 399;}

                        else if ( (synpred8_EsperEPL2Grammar()) ) {s = 387;}

                         
                        input.seek(index154_198);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA154_199 = input.LA(1);

                         
                        int index154_199 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_EsperEPL2Grammar()) ) {s = 399;}

                        else if ( (synpred8_EsperEPL2Grammar()) ) {s = 387;}

                         
                        input.seek(index154_199);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA154_243 = input.LA(1);

                         
                        int index154_243 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_EsperEPL2Grammar()) ) {s = 399;}

                        else if ( (synpred8_EsperEPL2Grammar()) ) {s = 387;}

                         
                        input.seek(index154_243);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA154_244 = input.LA(1);

                         
                        int index154_244 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_EsperEPL2Grammar()) ) {s = 399;}

                        else if ( (synpred8_EsperEPL2Grammar()) ) {s = 387;}

                         
                        input.seek(index154_244);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA154_245 = input.LA(1);

                         
                        int index154_245 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_EsperEPL2Grammar()) ) {s = 399;}

                        else if ( (synpred8_EsperEPL2Grammar()) ) {s = 387;}

                         
                        input.seek(index154_245);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA154_290 = input.LA(1);

                         
                        int index154_290 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_EsperEPL2Grammar()) ) {s = 399;}

                        else if ( (synpred8_EsperEPL2Grammar()) ) {s = 387;}

                         
                        input.seek(index154_290);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA154_291 = input.LA(1);

                         
                        int index154_291 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_EsperEPL2Grammar()) ) {s = 399;}

                        else if ( (synpred8_EsperEPL2Grammar()) ) {s = 387;}

                         
                        input.seek(index154_291);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA154_292 = input.LA(1);

                         
                        int index154_292 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_EsperEPL2Grammar()) ) {s = 399;}

                        else if ( (synpred8_EsperEPL2Grammar()) ) {s = 387;}

                         
                        input.seek(index154_292);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA154_340 = input.LA(1);

                         
                        int index154_340 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_EsperEPL2Grammar()) ) {s = 399;}

                        else if ( (synpred8_EsperEPL2Grammar()) ) {s = 387;}

                         
                        input.seek(index154_340);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA154_341 = input.LA(1);

                         
                        int index154_341 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_EsperEPL2Grammar()) ) {s = 399;}

                        else if ( (synpred8_EsperEPL2Grammar()) ) {s = 387;}

                         
                        input.seek(index154_341);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA154_342 = input.LA(1);

                         
                        int index154_342 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_EsperEPL2Grammar()) ) {s = 399;}

                        else if ( (synpred8_EsperEPL2Grammar()) ) {s = 387;}

                         
                        input.seek(index154_342);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA154_378 = input.LA(1);

                         
                        int index154_378 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_EsperEPL2Grammar()) ) {s = 399;}

                        else if ( (synpred8_EsperEPL2Grammar()) ) {s = 387;}

                         
                        input.seek(index154_378);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA154_379 = input.LA(1);

                         
                        int index154_379 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_EsperEPL2Grammar()) ) {s = 399;}

                        else if ( (synpred8_EsperEPL2Grammar()) ) {s = 387;}

                         
                        input.seek(index154_379);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA154_380 = input.LA(1);

                         
                        int index154_380 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_EsperEPL2Grammar()) ) {s = 399;}

                        else if ( (synpred8_EsperEPL2Grammar()) ) {s = 387;}

                         
                        input.seek(index154_380);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 154, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA168_eotS =
        "\u0185\uffff";
    static final String DFA168_eofS =
        "\1\46\3\uffff\1\1\34\uffff\2\1\1\uffff\2\1\u015f\uffff";
    static final String DFA168_minS =
        "\1\5\3\uffff\1\6\34\uffff\2\6\1\uffff\2\6\u015f\uffff";
    static final String DFA168_maxS =
        "\1\u00ee\3\uffff\1\u00ee\34\uffff\2\u00ee\1\uffff\2\u00ee\u015f"+
        "\uffff";
    static final String DFA168_acceptS =
        "\1\uffff\1\1\44\uffff\1\2\u015e\uffff";
    static final String DFA168_specialS =
        "\u0185\uffff}>";
    static final String[] DFA168_transitionS = {
            "\1\1\4\46\1\4\3\46\1\1\2\46\11\1\3\uffff\5\46\1\1\1\46\1\45"+
            "\1\41\1\42\1\44\1\uffff\1\46\1\uffff\2\46\2\uffff\1\46\3\1\2"+
            "\uffff\3\46\3\uffff\10\1\1\uffff\4\1\2\uffff\1\1\1\uffff\3\1"+
            "\6\uffff\3\46\6\uffff\1\46\160\uffff\1\1\11\46\2\uffff\16\46"+
            "\1\uffff\1\46\2\uffff\2\46",
            "",
            "",
            "",
            "\10\1\1\uffff\2\1\14\uffff\5\1\1\uffff\5\1\1\uffff\1\1\1\uffff"+
            "\2\1\2\uffff\1\1\5\uffff\3\1\35\uffff\3\1\6\uffff\1\1\161\uffff"+
            "\11\1\2\46\16\1\1\uffff\1\1\2\uffff\2\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\10\1\1\uffff\2\1\14\uffff\5\1\1\46\5\1\1\uffff\1\1\1\uffff"+
            "\2\1\2\uffff\1\1\5\uffff\3\1\35\uffff\3\1\6\uffff\1\1\161\uffff"+
            "\11\1\2\uffff\16\1\1\uffff\1\1\2\uffff\2\1",
            "\10\1\1\uffff\2\1\14\uffff\5\1\1\46\5\1\1\uffff\1\1\1\uffff"+
            "\2\1\2\uffff\1\1\5\uffff\3\1\35\uffff\3\1\6\uffff\1\1\161\uffff"+
            "\11\1\2\uffff\16\1\1\uffff\1\1\2\uffff\2\1",
            "",
            "\10\1\1\uffff\2\1\14\uffff\5\1\1\46\5\1\1\uffff\1\1\1\uffff"+
            "\2\1\2\uffff\1\1\5\uffff\3\1\35\uffff\3\1\6\uffff\1\1\161\uffff"+
            "\11\1\2\uffff\16\1\1\uffff\1\1\2\uffff\2\1",
            "\10\1\1\uffff\2\1\14\uffff\5\1\1\uffff\5\1\1\uffff\1\1\1\uffff"+
            "\2\1\2\uffff\1\1\5\uffff\3\1\6\uffff\2\46\25\uffff\3\1\6\uffff"+
            "\1\1\160\uffff\1\46\11\1\2\uffff\16\1\1\uffff\1\1\2\uffff\2"+
            "\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA168_eot = DFA.unpackEncodedString(DFA168_eotS);
    static final short[] DFA168_eof = DFA.unpackEncodedString(DFA168_eofS);
    static final char[] DFA168_min = DFA.unpackEncodedStringToUnsignedChars(DFA168_minS);
    static final char[] DFA168_max = DFA.unpackEncodedStringToUnsignedChars(DFA168_maxS);
    static final short[] DFA168_accept = DFA.unpackEncodedString(DFA168_acceptS);
    static final short[] DFA168_special = DFA.unpackEncodedString(DFA168_specialS);
    static final short[][] DFA168_transition;

    static {
        int numStates = DFA168_transitionS.length;
        DFA168_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA168_transition[i] = DFA.unpackEncodedString(DFA168_transitionS[i]);
        }
    }

    class DFA168 extends DFA {

        public DFA168(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 168;
            this.eot = DFA168_eot;
            this.eof = DFA168_eof;
            this.min = DFA168_min;
            this.max = DFA168_max;
            this.accept = DFA168_accept;
            this.special = DFA168_special;
            this.transition = DFA168_transition;
        }
        public String getDescription() {
            return "1197:24: (ipi2= keywordAllowedIdent )?";
        }
    }
 

    public static final BitSet FOLLOW_patternExpression_in_startPatternExpressionRule1278 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_startPatternExpressionRule1282 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eplExpression_in_startEPLExpressionRule1296 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_startEPLExpressionRule1300 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventProperty_in_startEventPropertyRule1323 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_startEventPropertyRule1327 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_selectExpr_in_eplExpression1343 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_createWindowExpr_in_eplExpression1348 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_createVariableExpr_in_eplExpression1353 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_onExpr_in_eplExpression1358 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSERT_in_selectExpr1371 = new BitSet(new long[]{0x0310000000000000L});
    public static final BitSet FOLLOW_insertIntoExpr_in_selectExpr1374 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_SELECT_in_selectExpr1380 = new BitSet(new long[]{0xFF0700F40BFE6420L,0x00000000380075FFL,0x0000000000000000L,0x0001AA600628A000L});
    public static final BitSet FOLLOW_selectClause_in_selectExpr1383 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_FROM_in_selectExpr1387 = new BitSet(new long[]{0xC000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_fromClause_in_selectExpr1390 = new BitSet(new long[]{0x0020980000008002L,0x0000000040000000L});
    public static final BitSet FOLLOW_WHERE_in_selectExpr1395 = new BitSet(new long[]{0xFF0700F40BFE6420L,0x00000000380075FFL,0x0000000000000000L,0x0001AA600628A000L});
    public static final BitSet FOLLOW_whereClause_in_selectExpr1398 = new BitSet(new long[]{0x0020980000000002L,0x0000000040000000L});
    public static final BitSet FOLLOW_GROUP_in_selectExpr1405 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_BY_in_selectExpr1408 = new BitSet(new long[]{0xFF0700F40BFE6420L,0x00000000380075FFL,0x0000000000000000L,0x0001AA600628A000L});
    public static final BitSet FOLLOW_groupByListExpr_in_selectExpr1411 = new BitSet(new long[]{0x0020900000000002L,0x0000000040000000L});
    public static final BitSet FOLLOW_HAVING_in_selectExpr1418 = new BitSet(new long[]{0xFF0700F40BFE6420L,0x00000000380075FFL,0x0000000000000000L,0x0001AA600628A000L});
    public static final BitSet FOLLOW_havingClause_in_selectExpr1421 = new BitSet(new long[]{0x0020800000000002L,0x0000000040000000L});
    public static final BitSet FOLLOW_OUTPUT_in_selectExpr1428 = new BitSet(new long[]{0x0006400040004000L,0x0000000000004400L});
    public static final BitSet FOLLOW_outputLimit_in_selectExpr1431 = new BitSet(new long[]{0x0020000000000002L,0x0000000040000000L});
    public static final BitSet FOLLOW_ORDER_in_selectExpr1438 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_BY_in_selectExpr1441 = new BitSet(new long[]{0xFF0700F40BFE6420L,0x00000000380075FFL,0x0000000000000000L,0x0001AA600628A000L});
    public static final BitSet FOLLOW_orderByListExpr_in_selectExpr1444 = new BitSet(new long[]{0x0000000000000002L,0x0000000040000000L});
    public static final BitSet FOLLOW_ROW_LIMIT_EXPR_in_selectExpr1451 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000188600000A000L});
    public static final BitSet FOLLOW_rowLimit_in_selectExpr1454 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ON_in_onExpr1469 = new BitSet(new long[]{0x4000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_eventFilterExpression_in_onExpr1472 = new BitSet(new long[]{0x0008000004010000L,0x0000000000000A00L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_patternInclusionExpression_in_onExpr1476 = new BitSet(new long[]{0x0008000004010000L,0x0000000000000A00L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_AS_in_onExpr1480 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_IDENT_in_onExpr1484 = new BitSet(new long[]{0x0008000004010000L,0x0000000000000A00L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_IDENT_in_onExpr1490 = new BitSet(new long[]{0x0008000004010000L,0x0000000000000A00L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_onDeleteExpr_in_onExpr1498 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_onSelectExpr_in_onExpr1502 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_onSetExpr_in_onExpr1506 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSERT_in_onSelectExpr1559 = new BitSet(new long[]{0x0310000000000000L});
    public static final BitSet FOLLOW_insertIntoExpr_in_onSelectExpr1561 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_SELECT_in_onSelectExpr1567 = new BitSet(new long[]{0xFF0700F40BFE6420L,0x00000000380075FFL,0x0000000000000000L,0x0001AA600628A000L});
    public static final BitSet FOLLOW_selectionList_in_onSelectExpr1569 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_onExprFrom_in_onSelectExpr1573 = new BitSet(new long[]{0x0020180000008002L});
    public static final BitSet FOLLOW_WHERE_in_onSelectExpr1578 = new BitSet(new long[]{0xFF0700F40BFE6420L,0x00000000380075FFL,0x0000000000000000L,0x0001AA600628A000L});
    public static final BitSet FOLLOW_whereClause_in_onSelectExpr1580 = new BitSet(new long[]{0x0020180000000002L});
    public static final BitSet FOLLOW_GROUP_in_onSelectExpr1589 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_BY_in_onSelectExpr1591 = new BitSet(new long[]{0xFF0700F40BFE6420L,0x00000000380075FFL,0x0000000000000000L,0x0001AA600628A000L});
    public static final BitSet FOLLOW_groupByListExpr_in_onSelectExpr1593 = new BitSet(new long[]{0x0020100000000002L});
    public static final BitSet FOLLOW_HAVING_in_onSelectExpr1600 = new BitSet(new long[]{0xFF0700F40BFE6420L,0x00000000380075FFL,0x0000000000000000L,0x0001AA600628A000L});
    public static final BitSet FOLLOW_havingClause_in_onSelectExpr1602 = new BitSet(new long[]{0x0020000000000002L});
    public static final BitSet FOLLOW_ORDER_in_onSelectExpr1609 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_BY_in_onSelectExpr1611 = new BitSet(new long[]{0xFF0700F40BFE6420L,0x00000000380075FFL,0x0000000000000000L,0x0001AA600628A000L});
    public static final BitSet FOLLOW_orderByListExpr_in_onSelectExpr1613 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DELETE_in_onDeleteExpr1666 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_onExprFrom_in_onDeleteExpr1670 = new BitSet(new long[]{0x0000000000008002L});
    public static final BitSet FOLLOW_WHERE_in_onDeleteExpr1675 = new BitSet(new long[]{0xFF0700F40BFE6420L,0x00000000380075FFL,0x0000000000000000L,0x0001AA600628A000L});
    public static final BitSet FOLLOW_whereClause_in_onDeleteExpr1677 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SET_in_onSetExpr1717 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_onSetAssignment_in_onSetExpr1719 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_COMMA_in_onSetExpr1722 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_onSetAssignment_in_onSetExpr1724 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_IDENT_in_onSetAssignment1749 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_EQUALS_in_onSetAssignment1751 = new BitSet(new long[]{0xFF0700F40BFE6420L,0x00000000380075FFL,0x0000000000000000L,0x0001AA600628A000L});
    public static final BitSet FOLLOW_expression_in_onSetAssignment1754 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FROM_in_onExprFrom1767 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_IDENT_in_onExprFrom1771 = new BitSet(new long[]{0x0000000000010002L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_AS_in_onExprFrom1774 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_IDENT_in_onExprFrom1778 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_onExprFrom1784 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CREATE_in_createWindowExpr1812 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_WINDOW_in_createWindowExpr1814 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_IDENT_in_createWindowExpr1818 = new BitSet(new long[]{0x3000000004010000L,0x0000000000000000L,0x0000000000000000L,0x00000000000C8000L});
    public static final BitSet FOLLOW_DOT_in_createWindowExpr1821 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_viewExpression_in_createWindowExpr1823 = new BitSet(new long[]{0x3000000004010000L,0x0000000000000000L,0x0000000000000000L,0x00000000000C8000L});
    public static final BitSet FOLLOW_DOT_in_createWindowExpr1826 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_viewExpression_in_createWindowExpr1828 = new BitSet(new long[]{0x3000000004010000L,0x0000000000000000L,0x0000000000000000L,0x00000000000C8000L});
    public static final BitSet FOLLOW_RETAINUNION_in_createWindowExpr1837 = new BitSet(new long[]{0x0000000004010000L,0x0000000000000000L,0x0000000000000000L,0x0000000000088000L});
    public static final BitSet FOLLOW_RETAININTERSECTION_in_createWindowExpr1841 = new BitSet(new long[]{0x0000000004010000L,0x0000000000000000L,0x0000000000000000L,0x0000000000088000L});
    public static final BitSet FOLLOW_AS_in_createWindowExpr1845 = new BitSet(new long[]{0x0000000004000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000088000L});
    public static final BitSet FOLLOW_createWindowExprModelAfter_in_createWindowExpr1860 = new BitSet(new long[]{0x0008000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_createWindowExpr1875 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_createWindowColumnList_in_createWindowExpr1877 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_RPAREN_in_createWindowExpr1879 = new BitSet(new long[]{0x0008000000000002L});
    public static final BitSet FOLLOW_INSERT_in_createWindowExpr1896 = new BitSet(new long[]{0x0000000000008002L});
    public static final BitSet FOLLOW_WHERE_in_createWindowExpr1899 = new BitSet(new long[]{0xFF0700F40BFE6420L,0x00000000380075FFL,0x0000000000000000L,0x0001AA600628A000L});
    public static final BitSet FOLLOW_expression_in_createWindowExpr1901 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SELECT_in_createWindowExprModelAfter1988 = new BitSet(new long[]{0xF80700F403FE4420L,0x00000000380074F7L,0x0000000000000000L,0x000188600620A000L});
    public static final BitSet FOLLOW_createSelectionList_in_createWindowExprModelAfter1991 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_FROM_in_createWindowExprModelAfter1993 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_classIdentifier_in_createWindowExprModelAfter1998 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CREATE_in_createVariableExpr2011 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_VARIABLE_in_createVariableExpr2013 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_IDENT_in_createVariableExpr2017 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_IDENT_in_createVariableExpr2021 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_EQUALS_in_createVariableExpr2024 = new BitSet(new long[]{0xFF0700F40BFE6420L,0x00000000380075FFL,0x0000000000000000L,0x0001AA600628A000L});
    public static final BitSet FOLLOW_expression_in_createVariableExpr2026 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_createWindowColumnListElement_in_createWindowColumnList2069 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_COMMA_in_createWindowColumnList2072 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_createWindowColumnListElement_in_createWindowColumnList2074 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_IDENT_in_createWindowColumnListElement2104 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_IDENT_in_createWindowColumnListElement2108 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_createSelectionListElement_in_createSelectionList2146 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_COMMA_in_createSelectionList2149 = new BitSet(new long[]{0xF80700F403FE4420L,0x00000000380074F7L,0x0000000000000000L,0x000188600620A000L});
    public static final BitSet FOLLOW_createSelectionListElement_in_createSelectionList2151 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_STAR_in_createSelectionListElement2180 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventProperty_in_createSelectionListElement2192 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_AS_in_createSelectionListElement2195 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_IDENT_in_createSelectionListElement2199 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constant_in_createSelectionListElement2220 = new BitSet(new long[]{0x0000000000010000L});
    public static final BitSet FOLLOW_AS_in_createSelectionListElement2222 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_IDENT_in_createSelectionListElement2226 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ISTREAM_in_insertIntoExpr2265 = new BitSet(new long[]{0x0010000000000000L});
    public static final BitSet FOLLOW_RSTREAM_in_insertIntoExpr2271 = new BitSet(new long[]{0x0010000000000000L});
    public static final BitSet FOLLOW_INTO_in_insertIntoExpr2275 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_IDENT_in_insertIntoExpr2279 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_insertIntoColumnList_in_insertIntoExpr2282 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_insertIntoColumnList2316 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_IDENT_in_insertIntoColumnList2318 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000110000L});
    public static final BitSet FOLLOW_COMMA_in_insertIntoColumnList2321 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_IDENT_in_insertIntoColumnList2323 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000110000L});
    public static final BitSet FOLLOW_RPAREN_in_insertIntoColumnList2327 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_streamExpression_in_fromClause2362 = new BitSet(new long[]{0x000000F800000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_regularJoin_in_fromClause2365 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_outerJoinList_in_fromClause2369 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_regularJoin2383 = new BitSet(new long[]{0xC000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_streamExpression_in_regularJoin2386 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_outerJoin_in_outerJoinList2400 = new BitSet(new long[]{0x000000F800000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_outerJoin_in_outerJoinList2403 = new BitSet(new long[]{0x000000F800000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_LEFT_in_outerJoin2446 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_RIGHT_in_outerJoin2450 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_FULL_in_outerJoin2454 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_OUTER_in_outerJoin2457 = new BitSet(new long[]{0x0000001000000000L});
    public static final BitSet FOLLOW_INNER_in_outerJoin2478 = new BitSet(new long[]{0x0000001000000000L});
    public static final BitSet FOLLOW_JOIN_in_outerJoin2492 = new BitSet(new long[]{0xC000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_streamExpression_in_outerJoin2494 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_outerJoinIdent_in_outerJoin2496 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ON_in_outerJoinIdent2561 = new BitSet(new long[]{0xF80700F403FE4420L,0x00000000000074F7L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_outerJoinIdentPair_in_outerJoinIdent2564 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_AND_EXPR_in_outerJoinIdent2567 = new BitSet(new long[]{0xF80700F403FE4420L,0x00000000000074F7L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_outerJoinIdentPair_in_outerJoinIdent2570 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_eventProperty_in_outerJoinIdentPair2585 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_EQUALS_in_outerJoinIdentPair2587 = new BitSet(new long[]{0xF80700F403FE4420L,0x00000000000074F7L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_eventProperty_in_outerJoinIdentPair2590 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_evalOrExpression_in_whereClause2612 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RSTREAM_in_selectClause2648 = new BitSet(new long[]{0xFF0700F40BFE6420L,0x00000000380075FFL,0x0000000000000000L,0x0001AA600628A000L});
    public static final BitSet FOLLOW_ISTREAM_in_selectClause2654 = new BitSet(new long[]{0xFF0700F40BFE6420L,0x00000000380075FFL,0x0000000000000000L,0x0001AA600628A000L});
    public static final BitSet FOLLOW_IRSTREAM_in_selectClause2660 = new BitSet(new long[]{0xFF0700F40BFE6420L,0x00000000380075FFL,0x0000000000000000L,0x0001AA600628A000L});
    public static final BitSet FOLLOW_selectionList_in_selectClause2664 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_selectionListElement_in_selectionList2691 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_COMMA_in_selectionList2694 = new BitSet(new long[]{0xFF0700F40BFE6420L,0x00000000380075FFL,0x0000000000000000L,0x0001AA600628A000L});
    public static final BitSet FOLLOW_selectionListElement_in_selectionList2697 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_STAR_in_selectionListElement2723 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_streamSelector_in_selectionListElement2739 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_selectionListElement2744 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_AS_in_selectionListElement2747 = new BitSet(new long[]{0xF80700F403FE4420L,0x00000000000074F7L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_selectionListElement2751 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_streamSelector2807 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_DOT_in_streamSelector2809 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_STAR_in_streamSelector2811 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_AS_in_streamSelector2814 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_IDENT_in_streamSelector2818 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventFilterExpression_in_streamExpression2848 = new BitSet(new long[]{0x3800000000010002L,0x0000000000000000L,0x0000000000000000L,0x0000000000048000L});
    public static final BitSet FOLLOW_patternInclusionExpression_in_streamExpression2852 = new BitSet(new long[]{0x3800000000010002L,0x0000000000000000L,0x0000000000000000L,0x0000000000048000L});
    public static final BitSet FOLLOW_databaseJoinExpression_in_streamExpression2856 = new BitSet(new long[]{0x3800000000010002L,0x0000000000000000L,0x0000000000000000L,0x0000000000048000L});
    public static final BitSet FOLLOW_methodJoinExpression_in_streamExpression2860 = new BitSet(new long[]{0x3800000000010002L,0x0000000000000000L,0x0000000000000000L,0x0000000000048000L});
    public static final BitSet FOLLOW_DOT_in_streamExpression2866 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_viewExpression_in_streamExpression2868 = new BitSet(new long[]{0x3800000000010002L,0x0000000000000000L,0x0000000000000000L,0x0000000000048000L});
    public static final BitSet FOLLOW_DOT_in_streamExpression2871 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_viewExpression_in_streamExpression2873 = new BitSet(new long[]{0x3800000000010002L,0x0000000000000000L,0x0000000000000000L,0x0000000000048000L});
    public static final BitSet FOLLOW_AS_in_streamExpression2880 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_IDENT_in_streamExpression2884 = new BitSet(new long[]{0x3800000000000002L});
    public static final BitSet FOLLOW_IDENT_in_streamExpression2890 = new BitSet(new long[]{0x3800000000000002L});
    public static final BitSet FOLLOW_UNIDIRECTIONAL_in_streamExpression2897 = new BitSet(new long[]{0x3000000000000002L});
    public static final BitSet FOLLOW_RETAINUNION_in_streamExpression2904 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETAININTERSECTION_in_streamExpression2908 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PATTERN_in_patternInclusionExpression2965 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_LBRACK_in_patternInclusionExpression2967 = new BitSet(new long[]{0x0000000000006000L,0x0000000000000000L,0x0000000000000000L,0x0000000000488000L});
    public static final BitSet FOLLOW_patternExpression_in_patternInclusionExpression2969 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_RBRACK_in_patternInclusionExpression2971 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL_in_databaseJoinExpression3004 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_COLON_in_databaseJoinExpression3006 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_IDENT_in_databaseJoinExpression3010 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_LBRACK_in_databaseJoinExpression3012 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000006000000L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_databaseJoinExpression3017 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_QUOTED_STRING_LITERAL_in_databaseJoinExpression3023 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_METADATASQL_in_databaseJoinExpression3027 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000006000000L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_databaseJoinExpression3032 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_QUOTED_STRING_LITERAL_in_databaseJoinExpression3038 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_RBRACK_in_databaseJoinExpression3043 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_methodJoinExpression3094 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_COLON_in_methodJoinExpression3096 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_classIdentifier_in_methodJoinExpression3098 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_LPAREN_in_methodJoinExpression3101 = new BitSet(new long[]{0xFF0700F40BFE6420L,0x00000000380075FFL,0x0000000000000000L,0x0001AA600638A000L});
    public static final BitSet FOLLOW_expressionList_in_methodJoinExpression3103 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_RPAREN_in_methodJoinExpression3106 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_viewExpression3159 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_COLON_in_viewExpression3161 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_IDENT_in_viewExpression3165 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_LPAREN_in_viewExpression3167 = new BitSet(new long[]{0xFF0700F40BFE6420L,0x00000000380075FFL,0x0000000000000000L,0x0001AA600678A000L});
    public static final BitSet FOLLOW_expressionWithTimeList_in_viewExpression3169 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_RPAREN_in_viewExpression3172 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_groupByListExpr3211 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_COMMA_in_groupByListExpr3214 = new BitSet(new long[]{0xFF0700F40BFE6420L,0x00000000380075FFL,0x0000000000000000L,0x0001AA600628A000L});
    public static final BitSet FOLLOW_expression_in_groupByListExpr3216 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_orderByListElement_in_orderByListExpr3251 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_COMMA_in_orderByListExpr3254 = new BitSet(new long[]{0xFF0700F40BFE6420L,0x00000000380075FFL,0x0000000000000000L,0x0001AA600628A000L});
    public static final BitSet FOLLOW_orderByListElement_in_orderByListExpr3256 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_expression_in_orderByListElement3281 = new BitSet(new long[]{0x00C0000000000002L});
    public static final BitSet FOLLOW_ASC_in_orderByListElement3286 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DESC_in_orderByListElement3290 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_evalOrExpression_in_havingClause3328 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALL_in_outputLimit3366 = new BitSet(new long[]{0x0000000040004000L,0x0000000000004000L});
    public static final BitSet FOLLOW_FIRST_in_outputLimit3370 = new BitSet(new long[]{0x0000000040004000L,0x0000000000004000L});
    public static final BitSet FOLLOW_LAST_in_outputLimit3374 = new BitSet(new long[]{0x0000000040004000L,0x0000000000004000L});
    public static final BitSet FOLLOW_SNAPSHOT_in_outputLimit3378 = new BitSet(new long[]{0x0000000040004000L,0x0000000000004000L});
    public static final BitSet FOLLOW_EVERY_EXPR_in_outputLimit3405 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001A8600000A000L});
    public static final BitSet FOLLOW_timePeriod_in_outputLimit3427 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_outputLimit3436 = new BitSet(new long[]{0x0001000000000000L});
    public static final BitSet FOLLOW_IDENT_in_outputLimit3442 = new BitSet(new long[]{0x0001000000000000L});
    public static final BitSet FOLLOW_EVENTS_in_outputLimit3448 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AT_in_outputLimit3471 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_crontabLimitParameterSet_in_outputLimit3473 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHEN_in_outputLimit3487 = new BitSet(new long[]{0xFF0700F40BFE6420L,0x00000000380075FFL,0x0000000000000000L,0x0001AA600628A000L});
    public static final BitSet FOLLOW_expression_in_outputLimit3489 = new BitSet(new long[]{0x0000000080000002L});
    public static final BitSet FOLLOW_THEN_in_outputLimit3492 = new BitSet(new long[]{0x0008000004010000L,0x0000000000000A00L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_onSetExpr_in_outputLimit3494 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberconstant_in_rowLimit3623 = new BitSet(new long[]{0x0000000000000002L,0x0000000080000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_IDENT_in_rowLimit3629 = new BitSet(new long[]{0x0000000000000002L,0x0000000080000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_COMMA_in_rowLimit3636 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000188600000A000L});
    public static final BitSet FOLLOW_OFFSET_in_rowLimit3642 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000188600000A000L});
    public static final BitSet FOLLOW_numberconstant_in_rowLimit3648 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_rowLimit3654 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_crontabLimitParameterSet3706 = new BitSet(new long[]{0xFF0700F40BFE6420L,0x00000000380075FFL,0x0000000000000000L,0x0001AA600668A000L});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet3708 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_COMMA_in_crontabLimitParameterSet3710 = new BitSet(new long[]{0xFF0700F40BFE6420L,0x00000000380075FFL,0x0000000000000000L,0x0001AA600668A000L});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet3712 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_COMMA_in_crontabLimitParameterSet3714 = new BitSet(new long[]{0xFF0700F40BFE6420L,0x00000000380075FFL,0x0000000000000000L,0x0001AA600668A000L});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet3716 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_COMMA_in_crontabLimitParameterSet3718 = new BitSet(new long[]{0xFF0700F40BFE6420L,0x00000000380075FFL,0x0000000000000000L,0x0001AA600668A000L});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet3720 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_COMMA_in_crontabLimitParameterSet3722 = new BitSet(new long[]{0xFF0700F40BFE6420L,0x00000000380075FFL,0x0000000000000000L,0x0001AA600668A000L});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet3724 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000110000L});
    public static final BitSet FOLLOW_COMMA_in_crontabLimitParameterSet3727 = new BitSet(new long[]{0xFF0700F40BFE6420L,0x00000000380075FFL,0x0000000000000000L,0x0001AA600668A000L});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet3729 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_RPAREN_in_crontabLimitParameterSet3733 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHEN_in_whenClause3763 = new BitSet(new long[]{0xFF0700F40BFE6420L,0x00000000380075FFL,0x0000000000000000L,0x0001AA600628A000L});
    public static final BitSet FOLLOW_expression_in_whenClause3766 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_THEN_in_whenClause3768 = new BitSet(new long[]{0xFF0700F40BFE6420L,0x00000000380075FFL,0x0000000000000000L,0x0001AA600628A000L});
    public static final BitSet FOLLOW_expression_in_whenClause3771 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ELSE_in_elseClause3784 = new BitSet(new long[]{0xFF0700F40BFE6420L,0x00000000380075FFL,0x0000000000000000L,0x0001AA600628A000L});
    public static final BitSet FOLLOW_expression_in_elseClause3787 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_caseExpression_in_expression3800 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CASE_in_caseExpression3814 = new BitSet(new long[]{0x0000000040000000L});
    public static final BitSet FOLLOW_whenClause_in_caseExpression3817 = new BitSet(new long[]{0x0000000160000000L});
    public static final BitSet FOLLOW_elseClause_in_caseExpression3820 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_END_in_caseExpression3823 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CASE_in_caseExpression3834 = new BitSet(new long[]{0xFF0700F40BFE6420L,0x00000000380075FFL,0x0000000000000000L,0x0001AA600628A000L});
    public static final BitSet FOLLOW_expression_in_caseExpression3836 = new BitSet(new long[]{0x0000000040000000L});
    public static final BitSet FOLLOW_whenClause_in_caseExpression3838 = new BitSet(new long[]{0x0000000160000000L});
    public static final BitSet FOLLOW_elseClause_in_caseExpression3841 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_END_in_caseExpression3844 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_evalOrExpression_in_caseExpression3868 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_evalAndExpression_in_evalOrExpression3879 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_OR_EXPR_in_evalOrExpression3884 = new BitSet(new long[]{0xFF0700F40BFE6420L,0x00000000380075FFL,0x0000000000000000L,0x0001AA600628A000L});
    public static final BitSet FOLLOW_evalAndExpression_in_evalOrExpression3886 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_bitWiseExpression_in_evalAndExpression3918 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_AND_EXPR_in_evalAndExpression3923 = new BitSet(new long[]{0xFF0700F40BFE6420L,0x00000000380075FFL,0x0000000000000000L,0x0001AA600628A000L});
    public static final BitSet FOLLOW_bitWiseExpression_in_evalAndExpression3925 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_negatedExpression_in_bitWiseExpression3957 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000038000000L});
    public static final BitSet FOLLOW_BAND_in_bitWiseExpression3962 = new BitSet(new long[]{0xFF0700F40BFE6420L,0x00000000380075FFL,0x0000000000000000L,0x0001AA600628A000L});
    public static final BitSet FOLLOW_BOR_in_bitWiseExpression3965 = new BitSet(new long[]{0xFF0700F40BFE6420L,0x00000000380075FFL,0x0000000000000000L,0x0001AA600628A000L});
    public static final BitSet FOLLOW_BXOR_in_bitWiseExpression3968 = new BitSet(new long[]{0xFF0700F40BFE6420L,0x00000000380075FFL,0x0000000000000000L,0x0001AA600628A000L});
    public static final BitSet FOLLOW_negatedExpression_in_bitWiseExpression3972 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000038000000L});
    public static final BitSet FOLLOW_evalEqualsExpression_in_negatedExpression3987 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_EXPR_in_negatedExpression3993 = new BitSet(new long[]{0xF80700F403FE4420L,0x00000000380075FFL,0x0000000000000000L,0x0001AA600608A000L});
    public static final BitSet FOLLOW_evalEqualsExpression_in_negatedExpression3996 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_evalRelationalExpression_in_evalEqualsExpression4009 = new BitSet(new long[]{0x0000020000000002L,0x0000000000000000L,0x0000000000000000L,0x00000000C0020000L});
    public static final BitSet FOLLOW_EQUALS_in_evalEqualsExpression4022 = new BitSet(new long[]{0xF80700F403FE4420L,0x00000000380075FFL,0x0000000000000000L,0x0001AA600608A000L});
    public static final BitSet FOLLOW_IS_in_evalEqualsExpression4040 = new BitSet(new long[]{0xF80700F403FE4420L,0x00000000380075FFL,0x0000000000000000L,0x0001AA600608A000L});
    public static final BitSet FOLLOW_IS_in_evalEqualsExpression4054 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_NOT_EXPR_in_evalEqualsExpression4056 = new BitSet(new long[]{0xF80700F403FE4420L,0x00000000380075FFL,0x0000000000000000L,0x0001AA600608A000L});
    public static final BitSet FOLLOW_SQL_NE_in_evalEqualsExpression4070 = new BitSet(new long[]{0xF80700F403FE4420L,0x00000000380075FFL,0x0000000000000000L,0x0001AA600608A000L});
    public static final BitSet FOLLOW_NOT_EQUAL_in_evalEqualsExpression4084 = new BitSet(new long[]{0xF80700F403FE4420L,0x00000000380075FFL,0x0000000000000000L,0x0001AA600608A000L});
    public static final BitSet FOLLOW_evalRelationalExpression_in_evalEqualsExpression4094 = new BitSet(new long[]{0x0000020000000002L,0x0000000000000000L,0x0000000000000000L,0x00000000C0020000L});
    public static final BitSet FOLLOW_concatenationExpr_in_evalRelationalExpression4155 = new BitSet(new long[]{0x00000000000023C2L,0x0000000000000000L,0x0000000000000000L,0x0000000F00000000L});
    public static final BitSet FOLLOW_LT_in_evalRelationalExpression4187 = new BitSet(new long[]{0xF80700F403FE4420L,0x00000000380075FFL,0x0000000000000000L,0x0001AA600608A000L});
    public static final BitSet FOLLOW_GT_in_evalRelationalExpression4191 = new BitSet(new long[]{0xF80700F403FE4420L,0x00000000380075FFL,0x0000000000000000L,0x0001AA600608A000L});
    public static final BitSet FOLLOW_LE_in_evalRelationalExpression4195 = new BitSet(new long[]{0xF80700F403FE4420L,0x00000000380075FFL,0x0000000000000000L,0x0001AA600608A000L});
    public static final BitSet FOLLOW_GE_in_evalRelationalExpression4199 = new BitSet(new long[]{0xF80700F403FE4420L,0x00000000380075FFL,0x0000000000000000L,0x0001AA600608A000L});
    public static final BitSet FOLLOW_concatenationExpr_in_evalRelationalExpression4202 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000F00000000L});
    public static final BitSet FOLLOW_NOT_EXPR_in_evalRelationalExpression4253 = new BitSet(new long[]{0x00000000000003C0L});
    public static final BitSet FOLLOW_IN_SET_in_evalRelationalExpression4280 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000480000L});
    public static final BitSet FOLLOW_LPAREN_in_evalRelationalExpression4292 = new BitSet(new long[]{0xFF0700F40BFE6420L,0x00000000380075FFL,0x0000000000000000L,0x0001AA600628A000L});
    public static final BitSet FOLLOW_LBRACK_in_evalRelationalExpression4298 = new BitSet(new long[]{0xFF0700F40BFE6420L,0x00000000380075FFL,0x0000000000000000L,0x0001AA600628A000L});
    public static final BitSet FOLLOW_expression_in_evalRelationalExpression4301 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001910000L});
    public static final BitSet FOLLOW_COLON_in_evalRelationalExpression4323 = new BitSet(new long[]{0xFF0700F40BFE6420L,0x00000000380075FFL,0x0000000000000000L,0x0001AA600628A000L});
    public static final BitSet FOLLOW_expression_in_evalRelationalExpression4326 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000900000L});
    public static final BitSet FOLLOW_COMMA_in_evalRelationalExpression4352 = new BitSet(new long[]{0xFF0700F40BFE6420L,0x00000000380075FFL,0x0000000000000000L,0x0001AA600628A000L});
    public static final BitSet FOLLOW_expression_in_evalRelationalExpression4354 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000910000L});
    public static final BitSet FOLLOW_RPAREN_in_evalRelationalExpression4380 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RBRACK_in_evalRelationalExpression4386 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IN_SET_in_evalRelationalExpression4509 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_inSubSelectQuery_in_evalRelationalExpression4511 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BETWEEN_in_evalRelationalExpression4557 = new BitSet(new long[]{0xF80700F403FE4420L,0x00000000380075FFL,0x0000000000000000L,0x0001AA600608A000L});
    public static final BitSet FOLLOW_betweenList_in_evalRelationalExpression4559 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LIKE_in_evalRelationalExpression4609 = new BitSet(new long[]{0xF80700F403FE4420L,0x00000000380075FFL,0x0000000000000000L,0x0001AA600608A000L});
    public static final BitSet FOLLOW_concatenationExpr_in_evalRelationalExpression4611 = new BitSet(new long[]{0x0000000000000402L});
    public static final BitSet FOLLOW_ESCAPE_in_evalRelationalExpression4614 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000006000000L});
    public static final BitSet FOLLOW_stringconstant_in_evalRelationalExpression4616 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGEXP_in_evalRelationalExpression4668 = new BitSet(new long[]{0xF80700F403FE4420L,0x00000000380075FFL,0x0000000000000000L,0x0001AA600608A000L});
    public static final BitSet FOLLOW_concatenationExpr_in_evalRelationalExpression4670 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subQueryExpr_in_inSubSelectQuery4732 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_additiveExpression_in_concatenationExpr4757 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_LOR_in_concatenationExpr4763 = new BitSet(new long[]{0xF80700F403FE4420L,0x00000000380075FFL,0x0000000000000000L,0x0001AA600608A000L});
    public static final BitSet FOLLOW_additiveExpression_in_concatenationExpr4765 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_LOR_in_concatenationExpr4769 = new BitSet(new long[]{0xF80700F403FE4420L,0x00000000380075FFL,0x0000000000000000L,0x0001AA600608A000L});
    public static final BitSet FOLLOW_additiveExpression_in_concatenationExpr4771 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_multiplyExpression_in_additiveExpression4812 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000006000000000L});
    public static final BitSet FOLLOW_PLUS_in_additiveExpression4817 = new BitSet(new long[]{0xF80700F403FE4420L,0x00000000380075FFL,0x0000000000000000L,0x0001AA600608A000L});
    public static final BitSet FOLLOW_MINUS_in_additiveExpression4820 = new BitSet(new long[]{0xF80700F403FE4420L,0x00000000380075FFL,0x0000000000000000L,0x0001AA600608A000L});
    public static final BitSet FOLLOW_multiplyExpression_in_additiveExpression4824 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000006000000000L});
    public static final BitSet FOLLOW_unaryExpression_in_multiplyExpression4838 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000018000200000L});
    public static final BitSet FOLLOW_STAR_in_multiplyExpression4843 = new BitSet(new long[]{0xF80700F403FE4420L,0x00000000380075FFL,0x0000000000000000L,0x0001AA600608A000L});
    public static final BitSet FOLLOW_DIV_in_multiplyExpression4846 = new BitSet(new long[]{0xF80700F403FE4420L,0x00000000380075FFL,0x0000000000000000L,0x0001AA600608A000L});
    public static final BitSet FOLLOW_MOD_in_multiplyExpression4849 = new BitSet(new long[]{0xF80700F403FE4420L,0x00000000380075FFL,0x0000000000000000L,0x0001AA600608A000L});
    public static final BitSet FOLLOW_unaryExpression_in_multiplyExpression4853 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000018000200000L});
    public static final BitSet FOLLOW_MINUS_in_unaryExpression4868 = new BitSet(new long[]{0xF80700F403FE4420L,0x00000000000074F7L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_eventProperty_in_unaryExpression4870 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constant_in_unaryExpression4883 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_substitution_in_unaryExpression4888 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_unaryExpression4893 = new BitSet(new long[]{0xFF0700F40BFE6420L,0x00000000380075FFL,0x0000000000000000L,0x0001AA600628A000L});
    public static final BitSet FOLLOW_expression_in_unaryExpression4896 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_RPAREN_in_unaryExpression4898 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventPropertyOrLibFunction_in_unaryExpression4904 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_builtinFunc_in_unaryExpression4916 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arrayExpression_in_unaryExpression4922 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subSelectExpression_in_unaryExpression4927 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_existsSubSelectExpression_in_unaryExpression4932 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subQueryExpr_in_subSelectExpression4949 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXISTS_in_existsSubSelectExpression4971 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_subQueryExpr_in_existsSubSelectExpression4973 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_subQueryExpr5006 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_SELECT_in_subQueryExpr5012 = new BitSet(new long[]{0xFF0700F40BFE6420L,0x00000000380075FFL,0x0000000000000000L,0x0001AA600628A000L});
    public static final BitSet FOLLOW_selectionListElement_in_subQueryExpr5015 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_FROM_in_subQueryExpr5022 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_subSelectFilterExpr_in_subQueryExpr5025 = new BitSet(new long[]{0x0000000000008000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_WHERE_in_subQueryExpr5033 = new BitSet(new long[]{0xFF0700F40BFE6420L,0x00000000380075FFL,0x0000000000000000L,0x0001AA600628A000L});
    public static final BitSet FOLLOW_whereClause_in_subQueryExpr5036 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_RPAREN_in_subQueryExpr5045 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventFilterExpression_in_subSelectFilterExpr5069 = new BitSet(new long[]{0x3000000000010002L,0x0000000000000000L,0x0000000000000000L,0x0000000000048000L});
    public static final BitSet FOLLOW_DOT_in_subSelectFilterExpr5074 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_viewExpression_in_subSelectFilterExpr5076 = new BitSet(new long[]{0x3000000000010002L,0x0000000000000000L,0x0000000000000000L,0x0000000000048000L});
    public static final BitSet FOLLOW_DOT_in_subSelectFilterExpr5079 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_viewExpression_in_subSelectFilterExpr5081 = new BitSet(new long[]{0x3000000000010002L,0x0000000000000000L,0x0000000000000000L,0x0000000000048000L});
    public static final BitSet FOLLOW_AS_in_subSelectFilterExpr5088 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_IDENT_in_subSelectFilterExpr5092 = new BitSet(new long[]{0x3000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_subSelectFilterExpr5098 = new BitSet(new long[]{0x3000000000000002L});
    public static final BitSet FOLLOW_RETAINUNION_in_subSelectFilterExpr5105 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETAININTERSECTION_in_subSelectFilterExpr5109 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCURLY_in_arrayExpression5149 = new BitSet(new long[]{0xFF0700F40BFE6420L,0x00000000380075FFL,0x0000000000000000L,0x0001AE600628A000L});
    public static final BitSet FOLLOW_expression_in_arrayExpression5152 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000010000L});
    public static final BitSet FOLLOW_COMMA_in_arrayExpression5155 = new BitSet(new long[]{0xFF0700F40BFE6420L,0x00000000380075FFL,0x0000000000000000L,0x0001AA600628A000L});
    public static final BitSet FOLLOW_expression_in_arrayExpression5157 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000010000L});
    public static final BitSet FOLLOW_RCURLY_in_arrayExpression5164 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SUM_in_builtinFunc5187 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc5190 = new BitSet(new long[]{0xFF0760F40BFE6420L,0x00000000380075FFL,0x0000000000000000L,0x0001AA600628A000L});
    public static final BitSet FOLLOW_ALL_in_builtinFunc5194 = new BitSet(new long[]{0xFF0700F40BFE6420L,0x00000000380075FFL,0x0000000000000000L,0x0001AA600628A000L});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc5199 = new BitSet(new long[]{0xFF0700F40BFE6420L,0x00000000380075FFL,0x0000000000000000L,0x0001AA600628A000L});
    public static final BitSet FOLLOW_expression_in_builtinFunc5203 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc5205 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AVG_in_builtinFunc5211 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc5214 = new BitSet(new long[]{0xFF0760F40BFE6420L,0x00000000380075FFL,0x0000000000000000L,0x0001AA600628A000L});
    public static final BitSet FOLLOW_ALL_in_builtinFunc5218 = new BitSet(new long[]{0xFF0700F40BFE6420L,0x00000000380075FFL,0x0000000000000000L,0x0001AA600628A000L});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc5223 = new BitSet(new long[]{0xFF0700F40BFE6420L,0x00000000380075FFL,0x0000000000000000L,0x0001AA600628A000L});
    public static final BitSet FOLLOW_expression_in_builtinFunc5227 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc5229 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COUNT_in_builtinFunc5235 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc5238 = new BitSet(new long[]{0xFF0760F40BFE6420L,0x00000000380075FFL,0x0000000000000000L,0x0001AA600628A000L});
    public static final BitSet FOLLOW_ALL_in_builtinFunc5250 = new BitSet(new long[]{0xFF0700F40BFE6420L,0x00000000380075FFL,0x0000000000000000L,0x0001AA600628A000L});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc5255 = new BitSet(new long[]{0xFF0700F40BFE6420L,0x00000000380075FFL,0x0000000000000000L,0x0001AA600628A000L});
    public static final BitSet FOLLOW_expression_in_builtinFunc5259 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_STAR_in_builtinFunc5270 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc5281 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MEDIAN_in_builtinFunc5287 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc5290 = new BitSet(new long[]{0xFF0760F40BFE6420L,0x00000000380075FFL,0x0000000000000000L,0x0001AA600628A000L});
    public static final BitSet FOLLOW_ALL_in_builtinFunc5294 = new BitSet(new long[]{0xFF0700F40BFE6420L,0x00000000380075FFL,0x0000000000000000L,0x0001AA600628A000L});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc5299 = new BitSet(new long[]{0xFF0700F40BFE6420L,0x00000000380075FFL,0x0000000000000000L,0x0001AA600628A000L});
    public static final BitSet FOLLOW_expression_in_builtinFunc5303 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc5305 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STDDEV_in_builtinFunc5311 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc5314 = new BitSet(new long[]{0xFF0760F40BFE6420L,0x00000000380075FFL,0x0000000000000000L,0x0001AA600628A000L});
    public static final BitSet FOLLOW_ALL_in_builtinFunc5318 = new BitSet(new long[]{0xFF0700F40BFE6420L,0x00000000380075FFL,0x0000000000000000L,0x0001AA600628A000L});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc5323 = new BitSet(new long[]{0xFF0700F40BFE6420L,0x00000000380075FFL,0x0000000000000000L,0x0001AA600628A000L});
    public static final BitSet FOLLOW_expression_in_builtinFunc5327 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc5329 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AVEDEV_in_builtinFunc5335 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc5338 = new BitSet(new long[]{0xFF0760F40BFE6420L,0x00000000380075FFL,0x0000000000000000L,0x0001AA600628A000L});
    public static final BitSet FOLLOW_ALL_in_builtinFunc5342 = new BitSet(new long[]{0xFF0700F40BFE6420L,0x00000000380075FFL,0x0000000000000000L,0x0001AA600628A000L});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc5347 = new BitSet(new long[]{0xFF0700F40BFE6420L,0x00000000380075FFL,0x0000000000000000L,0x0001AA600628A000L});
    public static final BitSet FOLLOW_expression_in_builtinFunc5351 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc5353 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COALESCE_in_builtinFunc5359 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc5362 = new BitSet(new long[]{0xFF0700F40BFE6420L,0x00000000380075FFL,0x0000000000000000L,0x0001AA600628A000L});
    public static final BitSet FOLLOW_expression_in_builtinFunc5365 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc5367 = new BitSet(new long[]{0xFF0700F40BFE6420L,0x00000000380075FFL,0x0000000000000000L,0x0001AA600628A000L});
    public static final BitSet FOLLOW_expression_in_builtinFunc5370 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000110000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc5373 = new BitSet(new long[]{0xFF0700F40BFE6420L,0x00000000380075FFL,0x0000000000000000L,0x0001AA600628A000L});
    public static final BitSet FOLLOW_expression_in_builtinFunc5376 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000110000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc5380 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PREVIOUS_in_builtinFunc5386 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc5389 = new BitSet(new long[]{0xFF0700F40BFE6420L,0x00000000380075FFL,0x0000000000000000L,0x0001AA600628A000L});
    public static final BitSet FOLLOW_expression_in_builtinFunc5392 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc5394 = new BitSet(new long[]{0xF80700F403FE4420L,0x00000000000074F7L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_eventProperty_in_builtinFunc5397 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc5399 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRIOR_in_builtinFunc5405 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc5408 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_NUM_INT_in_builtinFunc5411 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc5413 = new BitSet(new long[]{0xF80700F403FE4420L,0x00000000000074F7L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_eventProperty_in_builtinFunc5416 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc5418 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSTANCEOF_in_builtinFunc5428 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc5431 = new BitSet(new long[]{0xFF0700F40BFE6420L,0x00000000380075FFL,0x0000000000000000L,0x0001AA600628A000L});
    public static final BitSet FOLLOW_expression_in_builtinFunc5434 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc5436 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_classIdentifier_in_builtinFunc5439 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000110000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc5442 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_classIdentifier_in_builtinFunc5445 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000110000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc5449 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CAST_in_builtinFunc5455 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc5458 = new BitSet(new long[]{0xFF0700F40BFE6420L,0x00000000380075FFL,0x0000000000000000L,0x0001AA600628A000L});
    public static final BitSet FOLLOW_expression_in_builtinFunc5461 = new BitSet(new long[]{0x0000000000010000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc5464 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_AS_in_builtinFunc5469 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_classIdentifier_in_builtinFunc5473 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc5475 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXISTS_in_builtinFunc5481 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc5484 = new BitSet(new long[]{0xF80700F403FE4420L,0x00000000000074F7L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_eventProperty_in_builtinFunc5487 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc5489 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CURRENT_TIMESTAMP_in_builtinFunc5495 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc5499 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc5502 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MAX_in_maxFunc5518 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_MIN_in_maxFunc5523 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_LPAREN_in_maxFunc5527 = new BitSet(new long[]{0xFF0700F40BFE6420L,0x00000000380075FFL,0x0000000000000000L,0x0001AA600628A000L});
    public static final BitSet FOLLOW_expression_in_maxFunc5530 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000110000L});
    public static final BitSet FOLLOW_COMMA_in_maxFunc5533 = new BitSet(new long[]{0xFF0700F40BFE6420L,0x00000000380075FFL,0x0000000000000000L,0x0001AA600628A000L});
    public static final BitSet FOLLOW_expression_in_maxFunc5536 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000110000L});
    public static final BitSet FOLLOW_COMMA_in_maxFunc5539 = new BitSet(new long[]{0xFF0700F40BFE6420L,0x00000000380075FFL,0x0000000000000000L,0x0001AA600628A000L});
    public static final BitSet FOLLOW_expression_in_maxFunc5542 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000110000L});
    public static final BitSet FOLLOW_RPAREN_in_maxFunc5549 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventProperty_in_eventPropertyOrLibFunction5568 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_libFunction_in_eventPropertyOrLibFunction5573 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classIdentifierNonGreedy_in_libFunction5586 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_DOT_in_libFunction5588 = new BitSet(new long[]{0xF80700F403FE4420L,0x00000000000074F7L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_funcIdent_in_libFunction5592 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_LPAREN_in_libFunction5594 = new BitSet(new long[]{0xFF0760F40BFE6420L,0x00000000380075FFL,0x0000000000000000L,0x0001AA600638A000L});
    public static final BitSet FOLLOW_libFunctionArgs_in_libFunction5597 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_RPAREN_in_libFunction5601 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_funcIdent5631 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MAX_in_funcIdent5638 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MIN_in_funcIdent5650 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALL_in_libFunctionArgs5668 = new BitSet(new long[]{0xFF0700F40BFE6420L,0x00000000380075FFL,0x0000000000000000L,0x0001AA600628A000L});
    public static final BitSet FOLLOW_DISTINCT_in_libFunctionArgs5673 = new BitSet(new long[]{0xFF0700F40BFE6420L,0x00000000380075FFL,0x0000000000000000L,0x0001AA600628A000L});
    public static final BitSet FOLLOW_expression_in_libFunctionArgs5677 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_COMMA_in_libFunctionArgs5680 = new BitSet(new long[]{0xFF0700F40BFE6420L,0x00000000380075FFL,0x0000000000000000L,0x0001AA600628A000L});
    public static final BitSet FOLLOW_expression_in_libFunctionArgs5683 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_concatenationExpr_in_betweenList5697 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_AND_EXPR_in_betweenList5699 = new BitSet(new long[]{0xF80700F403FE4420L,0x00000000380075FFL,0x0000000000000000L,0x0001AA600608A000L});
    public static final BitSet FOLLOW_concatenationExpr_in_betweenList5702 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_followedByExpression_in_patternExpression5730 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_orExpression_in_followedByExpression5742 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_FOLLOWED_BY_in_followedByExpression5747 = new BitSet(new long[]{0x0000000000006000L,0x0000000000000000L,0x0000000000000000L,0x0000000000488000L});
    public static final BitSet FOLLOW_orExpression_in_followedByExpression5749 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_andExpression_in_orExpression5788 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_OR_EXPR_in_orExpression5793 = new BitSet(new long[]{0x0000000000006000L,0x0000000000000000L,0x0000000000000000L,0x0000000000488000L});
    public static final BitSet FOLLOW_andExpression_in_orExpression5795 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_matchUntilExpression_in_andExpression5827 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_AND_EXPR_in_andExpression5832 = new BitSet(new long[]{0x0000000000006000L,0x0000000000000000L,0x0000000000000000L,0x0000000000488000L});
    public static final BitSet FOLLOW_matchUntilExpression_in_andExpression5834 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_matchUntilRange_in_matchUntilExpression5869 = new BitSet(new long[]{0x0000000000006000L,0x0000000000000000L,0x0000000000000000L,0x0000000000488000L});
    public static final BitSet FOLLOW_qualifyExpression_in_matchUntilExpression5873 = new BitSet(new long[]{0x0000000000000002L,0x0000000000002000L});
    public static final BitSet FOLLOW_UNTIL_in_matchUntilExpression5878 = new BitSet(new long[]{0x0000000000006000L,0x0000000000000000L,0x0000000000000000L,0x0000000000488000L});
    public static final BitSet FOLLOW_qualifyExpression_in_matchUntilExpression5880 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EVERY_EXPR_in_qualifyExpression5942 = new BitSet(new long[]{0x0000000000006000L,0x0000000000000000L,0x0000000000000000L,0x0000000000488000L});
    public static final BitSet FOLLOW_NOT_EXPR_in_qualifyExpression5947 = new BitSet(new long[]{0x0000000000006000L,0x0000000000000000L,0x0000000000000000L,0x0000000000488000L});
    public static final BitSet FOLLOW_guardPostFix_in_qualifyExpression5954 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_atomicExpression_in_guardPostFix5967 = new BitSet(new long[]{0x0000000000008002L});
    public static final BitSet FOLLOW_LPAREN_in_guardPostFix5973 = new BitSet(new long[]{0x0000000000006000L,0x0000000000000000L,0x0000000000000000L,0x0000000000488000L});
    public static final BitSet FOLLOW_patternExpression_in_guardPostFix5975 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_RPAREN_in_guardPostFix5977 = new BitSet(new long[]{0x0000000000008002L});
    public static final BitSet FOLLOW_WHERE_in_guardPostFix5983 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_guardExpression_in_guardPostFix5985 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_observerExpression_in_atomicExpression6027 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventFilterExpression_in_atomicExpression6031 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_observerExpression6046 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_COLON_in_observerExpression6048 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_IDENT_in_observerExpression6053 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_AT_in_observerExpression6059 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_LPAREN_in_observerExpression6062 = new BitSet(new long[]{0xFF0700F40BFE6420L,0x00000000380075FFL,0x0000000000000000L,0x0001AA600678A000L});
    public static final BitSet FOLLOW_expressionWithTimeList_in_observerExpression6064 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_RPAREN_in_observerExpression6067 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_guardExpression6116 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_COLON_in_guardExpression6118 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_IDENT_in_guardExpression6121 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_LPAREN_in_guardExpression6123 = new BitSet(new long[]{0xFF0700F40BFE6420L,0x00000000380075FFL,0x0000000000000000L,0x0001AA600678A000L});
    public static final BitSet FOLLOW_expressionWithTimeList_in_guardExpression6127 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_RPAREN_in_guardExpression6131 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACK_in_matchUntilRange6145 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000042000L});
    public static final BitSet FOLLOW_NUM_INT_in_matchUntilRange6154 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001840000L});
    public static final BitSet FOLLOW_DOT_in_matchUntilRange6162 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_DOT_in_matchUntilRange6164 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000800000L});
    public static final BitSet FOLLOW_NUM_INT_in_matchUntilRange6168 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_COLON_in_matchUntilRange6192 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_NUM_INT_in_matchUntilRange6196 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_NUM_DOUBLE_in_matchUntilRange6218 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000842000L});
    public static final BitSet FOLLOW_DOT_in_matchUntilRange6250 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000800000L});
    public static final BitSet FOLLOW_NUM_INT_in_matchUntilRange6254 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_NUM_DOUBLE_in_matchUntilRange6314 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_DOT_in_matchUntilRange6351 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_DOT_in_matchUntilRange6353 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_NUM_INT_in_matchUntilRange6357 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_DOT_in_matchUntilRange6366 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_NUM_DOUBLE_in_matchUntilRange6370 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_RBRACK_in_matchUntilRange6381 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_eventFilterExpression6566 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_EQUALS_in_eventFilterExpression6568 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_classIdentifier_in_eventFilterExpression6577 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_LPAREN_in_eventFilterExpression6588 = new BitSet(new long[]{0xFF0700F40BFE6420L,0x00000000380075FFL,0x0000000000000000L,0x0001AA600638A000L});
    public static final BitSet FOLLOW_expressionList_in_eventFilterExpression6590 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_RPAREN_in_eventFilterExpression6593 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_classIdentifier6641 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_DOT_in_classIdentifier6660 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_IDENT_in_classIdentifier6664 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_IDENT_in_classIdentifierNonGreedy6709 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_DOT_in_classIdentifierNonGreedy6744 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_IDENT_in_classIdentifierNonGreedy6748 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_expression_in_expressionList6790 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_COMMA_in_expressionList6793 = new BitSet(new long[]{0xFF0700F40BFE6420L,0x00000000380075FFL,0x0000000000000000L,0x0001AA600628A000L});
    public static final BitSet FOLLOW_expression_in_expressionList6796 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_expressionWithTime_in_expressionWithTimeList6824 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_COMMA_in_expressionWithTimeList6827 = new BitSet(new long[]{0xFF0700F40BFE6420L,0x00000000380075FFL,0x0000000000000000L,0x0001AA600668A000L});
    public static final BitSet FOLLOW_expressionWithTime_in_expressionWithTimeList6830 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_lastOperand_in_expressionWithTime6856 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastWeekdayOperand_in_expressionWithTime6867 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_timePeriod_in_expressionWithTime6878 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expressionQualifyable_in_expressionWithTime6889 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rangeOperand_in_expressionWithTime6900 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_frequencyOperand_in_expressionWithTime6912 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastOperator_in_expressionWithTime6923 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_weekDayOperator_in_expressionWithTime6935 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numericParameterList_in_expressionWithTime6947 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberSetStar_in_expressionWithTime6952 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_expressionQualifyable6963 = new BitSet(new long[]{0x00C0000000000002L,0x0000000000E00000L});
    public static final BitSet FOLLOW_ASC_in_expressionQualifyable6968 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DESC_in_expressionQualifyable6972 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_SECONDS_in_expressionQualifyable6976 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_SECOND_in_expressionQualifyable6980 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_SEC_in_expressionQualifyable6984 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_numberSetStar7041 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LW_in_lastWeekdayOperand7061 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LAST_in_lastOperand7074 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_frequencyOperand7086 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_DIV_in_frequencyOperand7088 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001A8600000A000L});
    public static final BitSet FOLLOW_number_in_frequencyOperand7091 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_frequencyOperand7095 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_substitution_in_frequencyOperand7097 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_rangeOperand7146 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_IDENT_in_rangeOperand7150 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_substitution_in_rangeOperand7152 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_COLON_in_rangeOperand7155 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001A8600000A000L});
    public static final BitSet FOLLOW_number_in_rangeOperand7158 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_rangeOperand7162 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_substitution_in_rangeOperand7164 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_lastOperator7278 = new BitSet(new long[]{0x0004000000000000L});
    public static final BitSet FOLLOW_IDENT_in_lastOperator7282 = new BitSet(new long[]{0x0004000000000000L});
    public static final BitSet FOLLOW_substitution_in_lastOperator7284 = new BitSet(new long[]{0x0004000000000000L});
    public static final BitSet FOLLOW_LAST_in_lastOperator7287 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_weekDayOperator7335 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_IDENT_in_weekDayOperator7339 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_substitution_in_weekDayOperator7341 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_WEEKDAY_in_weekDayOperator7344 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACK_in_numericParameterList7391 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001A8600020A000L});
    public static final BitSet FOLLOW_numericListParameter_in_numericParameterList7393 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000810000L});
    public static final BitSet FOLLOW_COMMA_in_numericParameterList7396 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001A8600020A000L});
    public static final BitSet FOLLOW_numericListParameter_in_numericParameterList7398 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000810000L});
    public static final BitSet FOLLOW_RBRACK_in_numericParameterList7402 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rangeOperand_in_numericListParameter7424 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_frequencyOperand_in_numericListParameter7430 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberconstant_in_numericListParameter7435 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventPropertyAtomic_in_eventProperty7451 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_DOT_in_eventProperty7454 = new BitSet(new long[]{0xF80700F403FE4420L,0x00000000000074F7L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_eventPropertyAtomic_in_eventProperty7456 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_eventPropertyIdent_in_eventPropertyAtomic7482 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000200000480000L});
    public static final BitSet FOLLOW_LBRACK_in_eventPropertyAtomic7491 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_NUM_INT_in_eventPropertyAtomic7495 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_RBRACK_in_eventPropertyAtomic7497 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_QUESTION_in_eventPropertyAtomic7502 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_eventPropertyAtomic7516 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000006000000L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_eventPropertyAtomic7521 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_QUOTED_STRING_LITERAL_in_eventPropertyAtomic7527 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_RPAREN_in_eventPropertyAtomic7530 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_QUESTION_in_eventPropertyAtomic7535 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUESTION_in_eventPropertyAtomic7549 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_eventPropertyIdent7672 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_ESCAPECHAR_in_eventPropertyIdent7684 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_DOT_in_eventPropertyIdent7686 = new BitSet(new long[]{0xF80700F403FE4422L,0x00000000000074F7L,0x0000000000000000L,0x0000400000008000L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_eventPropertyIdent7690 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_IDENT_in_keywordAllowedIdent7733 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AT_in_keywordAllowedIdent7740 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COUNT_in_keywordAllowedIdent7747 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ESCAPE_in_keywordAllowedIdent7754 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EVERY_EXPR_in_keywordAllowedIdent7765 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SUM_in_keywordAllowedIdent7772 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AVG_in_keywordAllowedIdent7779 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MAX_in_keywordAllowedIdent7786 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MIN_in_keywordAllowedIdent7793 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COALESCE_in_keywordAllowedIdent7800 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MEDIAN_in_keywordAllowedIdent7807 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STDDEV_in_keywordAllowedIdent7814 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AVEDEV_in_keywordAllowedIdent7821 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EVENTS_in_keywordAllowedIdent7828 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FIRST_in_keywordAllowedIdent7835 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LAST_in_keywordAllowedIdent7842 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNIDIRECTIONAL_in_keywordAllowedIdent7849 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETAINUNION_in_keywordAllowedIdent7856 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETAININTERSECTION_in_keywordAllowedIdent7863 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNTIL_in_keywordAllowedIdent7870 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PATTERN_in_keywordAllowedIdent7877 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL_in_keywordAllowedIdent7884 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_METADATASQL_in_keywordAllowedIdent7891 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PREVIOUS_in_keywordAllowedIdent7898 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRIOR_in_keywordAllowedIdent7905 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WEEKDAY_in_keywordAllowedIdent7912 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LW_in_keywordAllowedIdent7919 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSTANCEOF_in_keywordAllowedIdent7926 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CAST_in_keywordAllowedIdent7933 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SNAPSHOT_in_keywordAllowedIdent7940 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VARIABLE_in_keywordAllowedIdent7947 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WINDOW_in_keywordAllowedIdent7956 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_in_keywordAllowedIdent7963 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RIGHT_in_keywordAllowedIdent7970 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OUTER_in_keywordAllowedIdent7977 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FULL_in_keywordAllowedIdent7984 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_JOIN_in_keywordAllowedIdent7991 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dayPart_in_timePeriod8023 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0001A8600000A000L});
    public static final BitSet FOLLOW_hourPart_in_timePeriod8025 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0001A8600000A000L});
    public static final BitSet FOLLOW_minutePart_in_timePeriod8028 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0001A8600000A000L});
    public static final BitSet FOLLOW_secondPart_in_timePeriod8031 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0001A8600000A000L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod8034 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_hourPart_in_timePeriod8040 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0001A8600000A000L});
    public static final BitSet FOLLOW_minutePart_in_timePeriod8042 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0001A8600000A000L});
    public static final BitSet FOLLOW_secondPart_in_timePeriod8045 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0001A8600000A000L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod8048 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_minutePart_in_timePeriod8054 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0001A8600000A000L});
    public static final BitSet FOLLOW_secondPart_in_timePeriod8056 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0001A8600000A000L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod8059 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_secondPart_in_timePeriod8065 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0001A8600000A000L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod8067 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod8073 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_dayPart8111 = new BitSet(new long[]{0x0000000000000000L,0x0000000000018000L});
    public static final BitSet FOLLOW_IDENT_in_dayPart8115 = new BitSet(new long[]{0x0000000000000000L,0x0000000000018000L});
    public static final BitSet FOLLOW_substitution_in_dayPart8117 = new BitSet(new long[]{0x0000000000000000L,0x0000000000018000L});
    public static final BitSet FOLLOW_TIMEPERIOD_DAYS_in_dayPart8121 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_DAY_in_dayPart8125 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_hourPart8174 = new BitSet(new long[]{0x0000000000000000L,0x0000000000060000L});
    public static final BitSet FOLLOW_IDENT_in_hourPart8178 = new BitSet(new long[]{0x0000000000000000L,0x0000000000060000L});
    public static final BitSet FOLLOW_substitution_in_hourPart8180 = new BitSet(new long[]{0x0000000000000000L,0x0000000000060000L});
    public static final BitSet FOLLOW_TIMEPERIOD_HOURS_in_hourPart8184 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_HOUR_in_hourPart8188 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_minutePart8237 = new BitSet(new long[]{0x0000000000100000L,0x0000000000180000L});
    public static final BitSet FOLLOW_IDENT_in_minutePart8241 = new BitSet(new long[]{0x0000000000100000L,0x0000000000180000L});
    public static final BitSet FOLLOW_substitution_in_minutePart8243 = new BitSet(new long[]{0x0000000000100000L,0x0000000000180000L});
    public static final BitSet FOLLOW_TIMEPERIOD_MINUTES_in_minutePart8247 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_MINUTE_in_minutePart8251 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MIN_in_minutePart8255 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_secondPart8305 = new BitSet(new long[]{0x0000000000000000L,0x0000000000E00000L});
    public static final BitSet FOLLOW_IDENT_in_secondPart8309 = new BitSet(new long[]{0x0000000000000000L,0x0000000000E00000L});
    public static final BitSet FOLLOW_substitution_in_secondPart8311 = new BitSet(new long[]{0x0000000000000000L,0x0000000000E00000L});
    public static final BitSet FOLLOW_TIMEPERIOD_SECONDS_in_secondPart8315 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_SECOND_in_secondPart8319 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_SEC_in_secondPart8323 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_millisecondPart8373 = new BitSet(new long[]{0x0000000000000000L,0x0000000007000000L});
    public static final BitSet FOLLOW_IDENT_in_millisecondPart8377 = new BitSet(new long[]{0x0000000000000000L,0x0000000007000000L});
    public static final BitSet FOLLOW_substitution_in_millisecondPart8379 = new BitSet(new long[]{0x0000000000000000L,0x0000000007000000L});
    public static final BitSet FOLLOW_TIMEPERIOD_MILLISECONDS_in_millisecondPart8383 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_MILLISECOND_in_millisecondPart8387 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_MILLISEC_in_millisecondPart8391 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUM_INT_in_number8446 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUM_LONG_in_number8463 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUM_FLOAT_in_number8480 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUM_DOUBLE_in_number8497 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUESTION_in_substitution8518 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberconstant_in_constant8537 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stringconstant_in_constant8544 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BOOLEAN_TRUE_in_constant8557 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BOOLEAN_FALSE_in_constant8577 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VALUE_NULL_in_constant8597 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUS_in_numberconstant8619 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001886000002000L});
    public static final BitSet FOLLOW_PLUS_in_numberconstant8625 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001886000002000L});
    public static final BitSet FOLLOW_number_in_numberconstant8629 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_stringconstant8658 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUOTED_STRING_LITERAL_in_stringconstant8674 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_streamSelector_in_synpred1_EsperEPL2Grammar2734 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_timePeriod_in_synpred2_EsperEPL2Grammar3422 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_builtinFunc_in_synpred3_EsperEPL2Grammar4910 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventProperty_in_synpred4_EsperEPL2Grammar5563 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastOperand_in_synpred5_EsperEPL2Grammar6851 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastWeekdayOperand_in_synpred6_EsperEPL2Grammar6862 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_timePeriod_in_synpred7_EsperEPL2Grammar6873 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expressionQualifyable_in_synpred8_EsperEPL2Grammar6884 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rangeOperand_in_synpred9_EsperEPL2Grammar6895 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_frequencyOperand_in_synpred10_EsperEPL2Grammar6907 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastOperator_in_synpred11_EsperEPL2Grammar6918 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_weekDayOperator_in_synpred12_EsperEPL2Grammar6929 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numericParameterList_in_synpred13_EsperEPL2Grammar6942 = new BitSet(new long[]{0x0000000000000002L});

}