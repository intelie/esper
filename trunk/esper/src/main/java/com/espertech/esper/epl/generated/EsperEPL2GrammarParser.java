// $ANTLR 3.1.1 EsperEPL2Grammar.g 2009-04-21 09:09:39

  package com.espertech.esper.epl.generated;


import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.tree.*;

public class EsperEPL2GrammarParser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "CREATE", "WINDOW", "IN_SET", "BETWEEN", "LIKE", "REGEXP", "ESCAPE", "OR_EXPR", "AND_EXPR", "NOT_EXPR", "EVERY_EXPR", "WHERE", "AS", "SUM", "AVG", "MAX", "MIN", "COALESCE", "MEDIAN", "STDDEV", "AVEDEV", "COUNT", "SELECT", "CASE", "CASE2", "ELSE", "WHEN", "THEN", "END", "FROM", "OUTER", "INNER", "JOIN", "LEFT", "RIGHT", "FULL", "ON", "IS", "BY", "GROUP", "HAVING", "DISTINCT", "ALL", "ANY", "SOME", "OUTPUT", "EVENTS", "FIRST", "LAST", "INSERT", "INTO", "ORDER", "ASC", "DESC", "RSTREAM", "ISTREAM", "IRSTREAM", "UNIDIRECTIONAL", "RETAINUNION", "RETAININTERSECTION", "PATTERN", "SQL", "METADATASQL", "PREVIOUS", "PRIOR", "EXISTS", "WEEKDAY", "LW", "INSTANCEOF", "CAST", "CURRENT_TIMESTAMP", "DELETE", "SNAPSHOT", "SET", "VARIABLE", "UNTIL", "AT", "TIMEPERIOD_DAY", "TIMEPERIOD_DAYS", "TIMEPERIOD_HOUR", "TIMEPERIOD_HOURS", "TIMEPERIOD_MINUTE", "TIMEPERIOD_MINUTES", "TIMEPERIOD_SEC", "TIMEPERIOD_SECOND", "TIMEPERIOD_SECONDS", "TIMEPERIOD_MILLISEC", "TIMEPERIOD_MILLISECOND", "TIMEPERIOD_MILLISECONDS", "BOOLEAN_TRUE", "BOOLEAN_FALSE", "VALUE_NULL", "ROW_LIMIT_EXPR", "OFFSET", "NUMERIC_PARAM_RANGE", "NUMERIC_PARAM_LIST", "NUMERIC_PARAM_FREQUENCY", "OBJECT_PARAM_ORDERED_EXPR", "FOLLOWED_BY_EXPR", "ARRAY_PARAM_LIST", "PATTERN_FILTER_EXPR", "PATTERN_NOT_EXPR", "EVENT_FILTER_EXPR", "EVENT_FILTER_PROPERTY_EXPR", "EVENT_FILTER_PROPERTY_EXPR_ATOM", "PROPERTY_SELECTION_ELEMENT_EXPR", "PROPERTY_SELECTION_STREAM", "PROPERTY_WILDCARD_SELECT", "EVENT_FILTER_IDENT", "EVENT_FILTER_PARAM", "EVENT_FILTER_RANGE", "EVENT_FILTER_NOT_RANGE", "EVENT_FILTER_IN", "EVENT_FILTER_NOT_IN", "EVENT_FILTER_BETWEEN", "EVENT_FILTER_NOT_BETWEEN", "CLASS_IDENT", "GUARD_EXPR", "OBSERVER_EXPR", "VIEW_EXPR", "PATTERN_INCL_EXPR", "DATABASE_JOIN_EXPR", "WHERE_EXPR", "HAVING_EXPR", "EVAL_BITWISE_EXPR", "EVAL_AND_EXPR", "EVAL_OR_EXPR", "EVAL_EQUALS_EXPR", "EVAL_NOTEQUALS_EXPR", "EVAL_EQUALS_GROUP_EXPR", "EVAL_NOTEQUALS_GROUP_EXPR", "EVAL_IDENT", "SELECTION_EXPR", "SELECTION_ELEMENT_EXPR", "SELECTION_STREAM", "STREAM_EXPR", "OUTERJOIN_EXPR", "INNERJOIN_EXPR", "LEFT_OUTERJOIN_EXPR", "RIGHT_OUTERJOIN_EXPR", "FULL_OUTERJOIN_EXPR", "GROUP_BY_EXPR", "ORDER_BY_EXPR", "ORDER_ELEMENT_EXPR", "EVENT_PROP_EXPR", "EVENT_PROP_SIMPLE", "EVENT_PROP_MAPPED", "EVENT_PROP_INDEXED", "EVENT_PROP_DYNAMIC_SIMPLE", "EVENT_PROP_DYNAMIC_INDEXED", "EVENT_PROP_DYNAMIC_MAPPED", "EVENT_LIMIT_EXPR", "TIMEPERIOD_LIMIT_EXPR", "CRONTAB_LIMIT_EXPR", "CRONTAB_LIMIT_EXPR_PARAM", "WHEN_LIMIT_EXPR", "INSERTINTO_EXPR", "INSERTINTO_EXPRCOL", "CONCAT", "LIB_FUNCTION", "UNARY_MINUS", "TIME_PERIOD", "ARRAY_EXPR", "DAY_PART", "HOUR_PART", "MINUTE_PART", "SECOND_PART", "MILLISECOND_PART", "NOT_IN_SET", "NOT_BETWEEN", "NOT_LIKE", "NOT_REGEXP", "DBSELECT_EXPR", "DBFROM_CLAUSE", "DBWHERE_CLAUSE", "WILDCARD_SELECT", "INSERTINTO_STREAM_NAME", "IN_RANGE", "NOT_IN_RANGE", "SUBSELECT_EXPR", "SUBSELECT_GROUP_EXPR", "EXISTS_SUBSELECT_EXPR", "IN_SUBSELECT_EXPR", "NOT_IN_SUBSELECT_EXPR", "IN_SUBSELECT_QUERY_EXPR", "LAST_OPERATOR", "WEEKDAY_OPERATOR", "SUBSTITUTION", "CAST_EXPR", "CREATE_WINDOW_EXPR", "CREATE_WINDOW_SELECT_EXPR", "ON_EXPR", "ON_DELETE_EXPR", "ON_SELECT_EXPR", "ON_EXPR_FROM", "ON_SET_EXPR", "CREATE_VARIABLE_EXPR", "METHOD_JOIN_EXPR", "MATCH_UNTIL_EXPR", "MATCH_UNTIL_RANGE_HALFOPEN", "MATCH_UNTIL_RANGE_HALFCLOSED", "MATCH_UNTIL_RANGE_CLOSED", "MATCH_UNTIL_RANGE_BOUNDED", "CREATE_WINDOW_COL_TYPE_LIST", "CREATE_WINDOW_COL_TYPE", "NUMBERSETSTAR", "ANNOTATION", "ANNOTATION_ARRAY", "ANNOTATION_VALUE", "INT_TYPE", "LONG_TYPE", "FLOAT_TYPE", "DOUBLE_TYPE", "STRING_TYPE", "BOOL_TYPE", "NULL_TYPE", "NUM_DOUBLE", "EPL_EXPR", "COMMA", "IDENT", "EQUALS", "DOT", "LPAREN", "RPAREN", "STAR", "LBRACK", "RBRACK", "COLON", "STRING_LITERAL", "QUOTED_STRING_LITERAL", "BAND", "BOR", "BXOR", "SQL_NE", "NOT_EQUAL", "LT", "GT", "LE", "GE", "LOR", "PLUS", "MINUS", "DIV", "MOD", "LCURLY", "RCURLY", "NUM_INT", "FOLLOWED_BY", "QUESTION", "ESCAPECHAR", "TICKED_STRING_LITERAL", "NUM_LONG", "NUM_FLOAT", "EQUAL", "LNOT", "BNOT", "DIV_ASSIGN", "PLUS_ASSIGN", "INC", "MINUS_ASSIGN", "DEC", "STAR_ASSIGN", "MOD_ASSIGN", "SR", "SR_ASSIGN", "BSR", "BSR_ASSIGN", "SL", "SL_ASSIGN", "BXOR_ASSIGN", "BOR_ASSIGN", "BAND_ASSIGN", "LAND", "SEMI", "EMAILAT", "WS", "SL_COMMENT", "ML_COMMENT", "EscapeSequence", "UnicodeEscape", "OctalEscape", "HexDigit", "EXPONENT", "FLOAT_SUFFIX"
    };
    public static final int CRONTAB_LIMIT_EXPR=157;
    public static final int FLOAT_SUFFIX=287;
    public static final int STAR=228;
    public static final int NUMERIC_PARAM_LIST=99;
    public static final int MOD=247;
    public static final int ISTREAM=59;
    public static final int OUTERJOIN_EXPR=140;
    public static final int BSR=269;
    public static final int EOF=-1;
    public static final int LIB_FUNCTION=163;
    public static final int TIMEPERIOD_MILLISECONDS=92;
    public static final int FULL_OUTERJOIN_EXPR=144;
    public static final int INC=262;
    public static final int LNOT=258;
    public static final int RPAREN=227;
    public static final int CREATE=4;
    public static final int STRING_LITERAL=232;
    public static final int BSR_ASSIGN=270;
    public static final int CAST_EXPR=192;
    public static final int STREAM_EXPR=139;
    public static final int TIMEPERIOD_SECONDS=89;
    public static final int NOT_EQUAL=238;
    public static final int METADATASQL=66;
    public static final int EVENT_FILTER_PROPERTY_EXPR=107;
    public static final int REGEXP=9;
    public static final int FOLLOWED_BY_EXPR=102;
    public static final int FOLLOWED_BY=251;
    public static final int HOUR_PART=168;
    public static final int RBRACK=230;
    public static final int MATCH_UNTIL_RANGE_CLOSED=205;
    public static final int GE=242;
    public static final int METHOD_JOIN_EXPR=201;
    public static final int ASC=56;
    public static final int IN_SET=6;
    public static final int EVENT_FILTER_EXPR=106;
    public static final int MINUS_ASSIGN=263;
    public static final int ELSE=29;
    public static final int EVENT_FILTER_NOT_IN=117;
    public static final int NUM_DOUBLE=220;
    public static final int INSERTINTO_STREAM_NAME=180;
    public static final int LCURLY=248;
    public static final int TIMEPERIOD_MILLISEC=90;
    public static final int UNARY_MINUS=164;
    public static final int RETAINUNION=62;
    public static final int DBWHERE_CLAUSE=178;
    public static final int MEDIAN=22;
    public static final int EVENTS=50;
    public static final int AND_EXPR=12;
    public static final int GROUP=43;
    public static final int EVENT_FILTER_NOT_RANGE=115;
    public static final int WS=279;
    public static final int EMAILAT=278;
    public static final int SUBSELECT_GROUP_EXPR=184;
    public static final int ESCAPECHAR=253;
    public static final int SL_COMMENT=280;
    public static final int NULL_TYPE=219;
    public static final int MATCH_UNTIL_RANGE_HALFOPEN=203;
    public static final int GT=240;
    public static final int BNOT=259;
    public static final int WHERE_EXPR=126;
    public static final int END=32;
    public static final int LAND=276;
    public static final int INNERJOIN_EXPR=141;
    public static final int NOT_REGEXP=175;
    public static final int MATCH_UNTIL_EXPR=202;
    public static final int EVENT_PROP_EXPR=148;
    public static final int LBRACK=229;
    public static final int VIEW_EXPR=123;
    public static final int ANNOTATION=210;
    public static final int LONG_TYPE=214;
    public static final int EVENT_FILTER_PROPERTY_EXPR_ATOM=108;
    public static final int TIMEPERIOD_SEC=87;
    public static final int TICKED_STRING_LITERAL=254;
    public static final int ON_SELECT_EXPR=197;
    public static final int MINUTE_PART=169;
    public static final int PATTERN_NOT_EXPR=105;
    public static final int SQL_NE=237;
    public static final int SUM=17;
    public static final int HexDigit=285;
    public static final int LPAREN=226;
    public static final int AT=80;
    public static final int IN_SUBSELECT_EXPR=186;
    public static final int AS=16;
    public static final int OR_EXPR=11;
    public static final int BOOLEAN_TRUE=93;
    public static final int THEN=31;
    public static final int NOT_IN_RANGE=182;
    public static final int OFFSET=97;
    public static final int AVG=18;
    public static final int LEFT=37;
    public static final int PREVIOUS=67;
    public static final int SECOND_PART=170;
    public static final int IDENT=223;
    public static final int DATABASE_JOIN_EXPR=125;
    public static final int PLUS=244;
    public static final int BXOR=236;
    public static final int CASE2=28;
    public static final int TIMEPERIOD_DAY=81;
    public static final int EXISTS=69;
    public static final int EVENT_PROP_INDEXED=151;
    public static final int TIMEPERIOD_MILLISECOND=91;
    public static final int EVAL_NOTEQUALS_EXPR=132;
    public static final int MATCH_UNTIL_RANGE_HALFCLOSED=204;
    public static final int CREATE_VARIABLE_EXPR=200;
    public static final int CREATE_WINDOW_COL_TYPE=208;
    public static final int LIKE=8;
    public static final int OUTER=34;
    public static final int BY=42;
    public static final int ARRAY_PARAM_LIST=103;
    public static final int RIGHT_OUTERJOIN_EXPR=143;
    public static final int NUMBERSETSTAR=209;
    public static final int LAST_OPERATOR=189;
    public static final int PATTERN_FILTER_EXPR=104;
    public static final int EVAL_AND_EXPR=129;
    public static final int LEFT_OUTERJOIN_EXPR=142;
    public static final int EPL_EXPR=221;
    public static final int GROUP_BY_EXPR=145;
    public static final int SET=77;
    public static final int RIGHT=38;
    public static final int HAVING=44;
    public static final int INSTANCEOF=72;
    public static final int MIN=20;
    public static final int EVENT_PROP_SIMPLE=149;
    public static final int MINUS=245;
    public static final int SEMI=277;
    public static final int STAR_ASSIGN=265;
    public static final int COLON=231;
    public static final int EVAL_EQUALS_GROUP_EXPR=133;
    public static final int BAND_ASSIGN=275;
    public static final int CRONTAB_LIMIT_EXPR_PARAM=158;
    public static final int VALUE_NULL=95;
    public static final int NOT_IN_SET=172;
    public static final int EVENT_PROP_DYNAMIC_SIMPLE=152;
    public static final int SL=271;
    public static final int WHEN=30;
    public static final int NOT_IN_SUBSELECT_EXPR=187;
    public static final int GUARD_EXPR=121;
    public static final int SR=267;
    public static final int RCURLY=249;
    public static final int PLUS_ASSIGN=261;
    public static final int DAY_PART=167;
    public static final int EXISTS_SUBSELECT_EXPR=185;
    public static final int EVENT_FILTER_IN=116;
    public static final int DIV=246;
    public static final int OBJECT_PARAM_ORDERED_EXPR=101;
    public static final int OctalEscape=284;
    public static final int BETWEEN=7;
    public static final int MILLISECOND_PART=171;
    public static final int PRIOR=68;
    public static final int FIRST=51;
    public static final int ROW_LIMIT_EXPR=96;
    public static final int SELECTION_EXPR=136;
    public static final int LOR=243;
    public static final int CAST=73;
    public static final int LW=71;
    public static final int WILDCARD_SELECT=179;
    public static final int EXPONENT=286;
    public static final int LT=239;
    public static final int PATTERN_INCL_EXPR=124;
    public static final int ORDER_BY_EXPR=146;
    public static final int BOOL_TYPE=218;
    public static final int MOD_ASSIGN=266;
    public static final int ANNOTATION_ARRAY=211;
    public static final int CASE=27;
    public static final int IN_SUBSELECT_QUERY_EXPR=188;
    public static final int EQUALS=224;
    public static final int COUNT=25;
    public static final int RETAININTERSECTION=63;
    public static final int DIV_ASSIGN=260;
    public static final int SL_ASSIGN=272;
    public static final int PATTERN=64;
    public static final int SQL=65;
    public static final int WEEKDAY=70;
    public static final int FULL=39;
    public static final int INSERT=53;
    public static final int ESCAPE=10;
    public static final int ARRAY_EXPR=166;
    public static final int LAST=52;
    public static final int BOOLEAN_FALSE=94;
    public static final int EVAL_NOTEQUALS_GROUP_EXPR=134;
    public static final int SELECT=26;
    public static final int INTO=54;
    public static final int FLOAT_TYPE=215;
    public static final int TIMEPERIOD_SECOND=88;
    public static final int COALESCE=21;
    public static final int EVENT_FILTER_BETWEEN=118;
    public static final int ANNOTATION_VALUE=212;
    public static final int SUBSELECT_EXPR=183;
    public static final int NUMERIC_PARAM_RANGE=98;
    public static final int CONCAT=162;
    public static final int CLASS_IDENT=120;
    public static final int ON_EXPR=195;
    public static final int CREATE_WINDOW_EXPR=193;
    public static final int PROPERTY_SELECTION_STREAM=110;
    public static final int ON_DELETE_EXPR=196;
    public static final int NUM_LONG=255;
    public static final int ON=40;
    public static final int TIME_PERIOD=165;
    public static final int DOUBLE_TYPE=216;
    public static final int DELETE=75;
    public static final int INT_TYPE=213;
    public static final int EVERY_EXPR=14;
    public static final int EVAL_BITWISE_EXPR=128;
    public static final int ORDER_ELEMENT_EXPR=147;
    public static final int TIMEPERIOD_HOURS=84;
    public static final int VARIABLE=78;
    public static final int SUBSTITUTION=191;
    public static final int UNTIL=79;
    public static final int STRING_TYPE=217;
    public static final int NUM_INT=250;
    public static final int ON_SET_EXPR=199;
    public static final int STDDEV=23;
    public static final int NUM_FLOAT=256;
    public static final int ON_EXPR_FROM=198;
    public static final int FROM=33;
    public static final int DISTINCT=45;
    public static final int EscapeSequence=282;
    public static final int OUTPUT=49;
    public static final int PROPERTY_SELECTION_ELEMENT_EXPR=109;
    public static final int WEEKDAY_OPERATOR=190;
    public static final int DEC=264;
    public static final int CREATE_WINDOW_COL_TYPE_LIST=207;
    public static final int WHERE=15;
    public static final int INNER=35;
    public static final int BXOR_ASSIGN=273;
    public static final int NUMERIC_PARAM_FREQUENCY=100;
    public static final int SNAPSHOT=76;
    public static final int ORDER=55;
    public static final int EVENT_FILTER_PARAM=113;
    public static final int EVENT_PROP_DYNAMIC_MAPPED=154;
    public static final int IRSTREAM=60;
    public static final int MAX=19;
    public static final int TIMEPERIOD_DAYS=82;
    public static final int EVENT_FILTER_RANGE=114;
    public static final int ML_COMMENT=281;
    public static final int EVENT_PROP_DYNAMIC_INDEXED=153;
    public static final int BOR_ASSIGN=274;
    public static final int COMMA=222;
    public static final int IS=41;
    public static final int WHEN_LIMIT_EXPR=159;
    public static final int TIMEPERIOD_LIMIT_EXPR=156;
    public static final int SOME=48;
    public static final int EQUAL=257;
    public static final int BOR=235;
    public static final int TIMEPERIOD_HOUR=83;
    public static final int ALL=46;
    public static final int EVENT_FILTER_NOT_BETWEEN=119;
    public static final int IN_RANGE=181;
    public static final int DOT=225;
    public static final int CURRENT_TIMESTAMP=74;
    public static final int PROPERTY_WILDCARD_SELECT=111;
    public static final int INSERTINTO_EXPR=160;
    public static final int UNIDIRECTIONAL=61;
    public static final int HAVING_EXPR=127;
    public static final int MATCH_UNTIL_RANGE_BOUNDED=206;
    public static final int EVAL_EQUALS_EXPR=131;
    public static final int TIMEPERIOD_MINUTES=86;
    public static final int RSTREAM=58;
    public static final int NOT_LIKE=174;
    public static final int EVENT_LIMIT_EXPR=155;
    public static final int TIMEPERIOD_MINUTE=85;
    public static final int NOT_BETWEEN=173;
    public static final int EVAL_OR_EXPR=130;
    public static final int BAND=234;
    public static final int QUOTED_STRING_LITERAL=233;
    public static final int JOIN=36;
    public static final int ANY=47;
    public static final int NOT_EXPR=13;
    public static final int QUESTION=252;
    public static final int OBSERVER_EXPR=122;
    public static final int EVENT_FILTER_IDENT=112;
    public static final int EVENT_PROP_MAPPED=150;
    public static final int UnicodeEscape=283;
    public static final int AVEDEV=24;
    public static final int DBSELECT_EXPR=176;
    public static final int SELECTION_ELEMENT_EXPR=137;
    public static final int CREATE_WINDOW_SELECT_EXPR=194;
    public static final int WINDOW=5;
    public static final int INSERTINTO_EXPRCOL=161;
    public static final int DESC=57;
    public static final int SELECTION_STREAM=138;
    public static final int SR_ASSIGN=268;
    public static final int LE=241;
    public static final int DBFROM_CLAUSE=177;
    public static final int EVAL_IDENT=135;

    // delegates
    // delegators


        public EsperEPL2GrammarParser(TokenStream input) {
            this(input, new RecognizerSharedState());
        }
        public EsperEPL2GrammarParser(TokenStream input, RecognizerSharedState state) {
            super(input, state);
             
        }
        
    protected TreeAdaptor adaptor = new CommonTreeAdaptor();

    public void setTreeAdaptor(TreeAdaptor adaptor) {
        this.adaptor = adaptor;
    }
    public TreeAdaptor getTreeAdaptor() {
        return adaptor;
    }

    public String[] getTokenNames() { return EsperEPL2GrammarParser.tokenNames; }
    public String getGrammarFileName() { return "EsperEPL2Grammar.g"; }


      // provide nice error messages
      private Stack<String> paraphrases = new Stack<String>();
      
      // static information initialized once
      private static Map<Integer, String> lexerTokenParaphases = new HashMap<Integer, String>();
      private static Map<Integer, String> parserTokenParaphases = new HashMap<Integer, String>();
      private static java.util.Set<String> parserKeywordSet = new java.util.HashSet<String>();
        
      public Stack getParaphrases() {
        return paraphrases;
      }

      public java.util.Set<String> getKeywords() {
      	getParserTokenParaphrases();
      	return parserKeywordSet;
      }
      
      public String removeTicks(String tickedString) {
      	return com.espertech.esper.epl.parse.ASTConstantHelper.removeTicks(tickedString);
      }
      
      public Map<Integer, String> getLexerTokenParaphrases() {
        if (lexerTokenParaphases.size() == 0) {
          	lexerTokenParaphases.put(IDENT, "an identifier");
          	lexerTokenParaphases.put(NUM_INT, "a numeric literal");
    	lexerTokenParaphases.put(FOLLOWED_BY, "an followed-by '->'");
    	lexerTokenParaphases.put(EQUALS, "an equals '='");
    	lexerTokenParaphases.put(SQL_NE, "a sql-style not equals '<>'");
    	lexerTokenParaphases.put(QUESTION, "a questionmark '?'");
    	lexerTokenParaphases.put(LPAREN, "an opening parenthesis '('");
    	lexerTokenParaphases.put(RPAREN, "a closing parenthesis ')'");
    	lexerTokenParaphases.put(LBRACK, "a left angle bracket '['");
    	lexerTokenParaphases.put(RBRACK, "a right angle bracket ']'");
    	lexerTokenParaphases.put(LCURLY, "a left curly bracket '{'");
    	lexerTokenParaphases.put(RCURLY, "a right curly bracket '}'");
    	lexerTokenParaphases.put(COLON, "a colon ':'");
    	lexerTokenParaphases.put(COMMA, "a comma ','");
    	lexerTokenParaphases.put(EQUAL, "an equals compare '=='");
    	lexerTokenParaphases.put(LNOT, "a not '!'");
    	lexerTokenParaphases.put(BNOT, "a binary not '~'");
    	lexerTokenParaphases.put(NOT_EQUAL, "a not equals '!='");
    	lexerTokenParaphases.put(DIV, "a division operator '\'");
    	lexerTokenParaphases.put(DIV_ASSIGN, "a division assign '/='");
    	lexerTokenParaphases.put(PLUS, "a plus operator '+'");
    	lexerTokenParaphases.put(PLUS_ASSIGN, "a plus assign '+='");
    	lexerTokenParaphases.put(INC, "an increment operator '++'");
    	lexerTokenParaphases.put(MINUS, "a minus '-'");
    	lexerTokenParaphases.put(MINUS_ASSIGN, "a minus assign '-='");
    	lexerTokenParaphases.put(DEC, "a decrement operator '--'");
    	lexerTokenParaphases.put(STAR, "a star '*'");
    	lexerTokenParaphases.put(STAR_ASSIGN, "a star assign '*='");
    	lexerTokenParaphases.put(MOD, "a modulo");
    	lexerTokenParaphases.put(MOD_ASSIGN, "a modulo assign");
    	lexerTokenParaphases.put(SR, "a shift right '>>'");
    	lexerTokenParaphases.put(SR_ASSIGN, "a shift right assign '>>='");
    	lexerTokenParaphases.put(BSR, "a binary shift right '>>>'");
    	lexerTokenParaphases.put(BSR_ASSIGN, "a binary shift right assign '>>>='");
    	lexerTokenParaphases.put(GE, "a greater equals '>='");
    	lexerTokenParaphases.put(GT, "a greater then '>'");
    	lexerTokenParaphases.put(SL, "a shift left '<<'");
    	lexerTokenParaphases.put(SL_ASSIGN, "a shift left assign '<<='");
    	lexerTokenParaphases.put(LE, "a less equals '<='");
    	lexerTokenParaphases.put(LT, "a lesser then '<'");
    	lexerTokenParaphases.put(BXOR, "a binary xor '^'");
    	lexerTokenParaphases.put(BXOR_ASSIGN, "a binary xor assign '^='");
    	lexerTokenParaphases.put(BOR, "a binary or '|'");
    	lexerTokenParaphases.put(BOR_ASSIGN, "a binary or assign '|='");
    	lexerTokenParaphases.put(LOR, "a logical or '||'");
    	lexerTokenParaphases.put(BAND, "a binary and '&'");
    	lexerTokenParaphases.put(BAND_ASSIGN, "a binary and assign '&='");
    	lexerTokenParaphases.put(LAND, "a logical and '&&'");
    	lexerTokenParaphases.put(SEMI, "a semicolon ';'");
    	lexerTokenParaphases.put(DOT, "a dot '.'");		
        }
        return lexerTokenParaphases;
      }
      
      public Map<Integer, String> getParserTokenParaphrases() {
        if (parserTokenParaphases.size() == 0) {
    	parserTokenParaphases.put(CREATE, "'create'");
    	parserTokenParaphases.put(WINDOW, "'window'");
    	parserTokenParaphases.put(IN_SET, "'in'");
    	parserTokenParaphases.put(BETWEEN, "'between'");
    	parserTokenParaphases.put(LIKE, "'like'");
    	parserTokenParaphases.put(REGEXP, "'regexp'");
    	parserTokenParaphases.put(ESCAPE, "'escape'");
    	parserTokenParaphases.put(OR_EXPR, "'or'");
    	parserTokenParaphases.put(AND_EXPR, "'and'");
    	parserTokenParaphases.put(NOT_EXPR, "'not'");
    	parserTokenParaphases.put(EVERY_EXPR, "'every'");
    	parserTokenParaphases.put(WHERE, "'where'");
    	parserTokenParaphases.put(AS, "'as'");	
    	parserTokenParaphases.put(SUM, "'sum'");
    	parserTokenParaphases.put(AVG, "'avg'");
    	parserTokenParaphases.put(MAX, "'max'");
    	parserTokenParaphases.put(MIN, "'min'");
    	parserTokenParaphases.put(COALESCE, "'coalesce'");
    	parserTokenParaphases.put(MEDIAN, "'median'");
    	parserTokenParaphases.put(STDDEV, "'stddev'");
    	parserTokenParaphases.put(AVEDEV, "'avedev'");
    	parserTokenParaphases.put(COUNT, "'count'");
    	parserTokenParaphases.put(SELECT, "'select'");
    	parserTokenParaphases.put(CASE, "'case'");
    	parserTokenParaphases.put(CASE2, "'case'");
    	parserTokenParaphases.put(ELSE, "'else'");
    	parserTokenParaphases.put(WHEN, "'when'");
    	parserTokenParaphases.put(THEN, "'then'");
    	parserTokenParaphases.put(END, "'end'");
    	parserTokenParaphases.put(FROM, "'from'");
    	parserTokenParaphases.put(OUTER, "'outer'");
    	parserTokenParaphases.put(INNER, "'inner'");
    	parserTokenParaphases.put(JOIN, "'join'");
    	parserTokenParaphases.put(LEFT, "'left'");
    	parserTokenParaphases.put(RIGHT, "'right'");
    	parserTokenParaphases.put(FULL, "'full'");
    	parserTokenParaphases.put(ON, "'on'");	
    	parserTokenParaphases.put(IS, "'is'");
    	parserTokenParaphases.put(BY, "'by'");
    	parserTokenParaphases.put(GROUP, "'group'");
    	parserTokenParaphases.put(HAVING, "'having'");
    	parserTokenParaphases.put(DISTINCT, "'distinct'");
    	parserTokenParaphases.put(ALL, "'all'");
    	parserTokenParaphases.put(ANY, "'any'");
    	parserTokenParaphases.put(SOME, "'some'");
    	parserTokenParaphases.put(OUTPUT, "'output'");
    	parserTokenParaphases.put(EVENTS, "'events'");
    	parserTokenParaphases.put(FIRST, "'first'");
    	parserTokenParaphases.put(LAST, "'last'");
    	parserTokenParaphases.put(INSERT, "'insert'");
    	parserTokenParaphases.put(INTO, "'into'");
    	parserTokenParaphases.put(ORDER, "'order'");
    	parserTokenParaphases.put(ASC, "'asc'");
    	parserTokenParaphases.put(DESC, "'desc'");
    	parserTokenParaphases.put(RSTREAM, "'rstream'");
    	parserTokenParaphases.put(ISTREAM, "'istream'");
    	parserTokenParaphases.put(IRSTREAM, "'irstream'");
    	parserTokenParaphases.put(UNIDIRECTIONAL, "'unidirectional'");
    	parserTokenParaphases.put(RETAINUNION, "'retain-union'");
    	parserTokenParaphases.put(RETAININTERSECTION, "'retain-intersection'");
    	parserTokenParaphases.put(PATTERN, "'pattern'");
    	parserTokenParaphases.put(SQL, "'sql'");
    	parserTokenParaphases.put(METADATASQL, "'metadatasql'");
    	parserTokenParaphases.put(PREVIOUS, "'prev'");
    	parserTokenParaphases.put(PRIOR, "'prior'");
    	parserTokenParaphases.put(EXISTS, "'exists'");
    	parserTokenParaphases.put(WEEKDAY, "'weekday'");
    	parserTokenParaphases.put(LW, "'lastweekday'");
    	parserTokenParaphases.put(INSTANCEOF, "'instanceof'");
    	parserTokenParaphases.put(CAST, "'cast'");
    	parserTokenParaphases.put(CURRENT_TIMESTAMP, "'current_timestamp'");
    	parserTokenParaphases.put(DELETE, "'delete'");
    	parserTokenParaphases.put(SNAPSHOT, "'snapshot'");
    	parserTokenParaphases.put(SET, "'set'");
    	parserTokenParaphases.put(VARIABLE, "'variable'");
    	parserTokenParaphases.put(UNTIL, "'until'");
    	parserTokenParaphases.put(AT, "'at'");
    	parserTokenParaphases.put(TIMEPERIOD_DAY, "'day'");
    	parserTokenParaphases.put(TIMEPERIOD_DAYS, "'days'");
    	parserTokenParaphases.put(TIMEPERIOD_HOUR, "'hour'");
    	parserTokenParaphases.put(TIMEPERIOD_HOURS, "'hours'");
    	parserTokenParaphases.put(TIMEPERIOD_MINUTE, "'minute'");
    	parserTokenParaphases.put(TIMEPERIOD_MINUTES, "'minutes'");
    	parserTokenParaphases.put(TIMEPERIOD_SEC, "'sec'");
    	parserTokenParaphases.put(TIMEPERIOD_SECOND, "'second'");
    	parserTokenParaphases.put(TIMEPERIOD_SECONDS, "'seconds'");
    	parserTokenParaphases.put(TIMEPERIOD_MILLISEC, "'msec'");
    	parserTokenParaphases.put(TIMEPERIOD_MILLISECOND, "'millisecond'");
    	parserTokenParaphases.put(TIMEPERIOD_MILLISECONDS, "'milliseconds'");
    	parserTokenParaphases.put(BOOLEAN_TRUE, "'true'");
    	parserTokenParaphases.put(BOOLEAN_FALSE, "'false'");
    	parserTokenParaphases.put(VALUE_NULL, "'null'");
    	parserTokenParaphases.put(ROW_LIMIT_EXPR, "'limit'");
    	parserTokenParaphases.put(OFFSET, "'offset'");

    	parserKeywordSet = new java.util.TreeSet<String>(parserTokenParaphases.values());
        }
        return parserTokenParaphases;
      }

      protected void mismatch(IntStream input, int ttype, BitSet follow) throws RecognitionException {
        throw new MismatchedTokenException(ttype, input);  
      }

      public void recoverFromMismatchedToken(IntStream intStream, RecognitionException recognitionException, int i, BitSet bitSet) throws RecognitionException {
        throw recognitionException;
      }

      public Object recoverFromMismatchedSet(IntStream intStream, RecognitionException recognitionException, BitSet bitSet) throws RecognitionException {
        throw recognitionException;
      }

      protected boolean recoverFromMismatchedElement(IntStream intStream, RecognitionException recognitionException, BitSet bitSet) {
        throw new RuntimeException("Error recovering from mismatched element: " + recognitionException.getMessage(), recognitionException);
      }
      public void displayRecognitionError(String[] tokenNames,
                                            RecognitionException e) {
        throw new RuntimeException(e);
      }


    public static class startPatternExpressionRule_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "startPatternExpressionRule"
    // EsperEPL2Grammar.g:474:1: startPatternExpressionRule : ( annotations )? patternExpression EOF ;
    public final EsperEPL2GrammarParser.startPatternExpressionRule_return startPatternExpressionRule() throws RecognitionException {
        EsperEPL2GrammarParser.startPatternExpressionRule_return retval = new EsperEPL2GrammarParser.startPatternExpressionRule_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token EOF3=null;
        EsperEPL2GrammarParser.annotations_return annotations1 = null;

        EsperEPL2GrammarParser.patternExpression_return patternExpression2 = null;


        CommonTree EOF3_tree=null;

        try {
            // EsperEPL2Grammar.g:475:2: ( ( annotations )? patternExpression EOF )
            // EsperEPL2Grammar.g:475:4: ( annotations )? patternExpression EOF
            {
            root_0 = (CommonTree)adaptor.nil();

            // EsperEPL2Grammar.g:475:4: ( annotations )?
            int alt1=2;
            int LA1_0 = input.LA(1);

            if ( (LA1_0==EMAILAT) ) {
                alt1=1;
            }
            switch (alt1) {
                case 1 :
                    // EsperEPL2Grammar.g:475:4: annotations
                    {
                    pushFollow(FOLLOW_annotations_in_startPatternExpressionRule1369);
                    annotations1=annotations();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotations1.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_patternExpression_in_startPatternExpressionRule1375);
            patternExpression2=patternExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, patternExpression2.getTree());
            EOF3=(Token)match(input,EOF,FOLLOW_EOF_in_startPatternExpressionRule1379); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "startPatternExpressionRule"

    public static class startEPLExpressionRule_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "startEPLExpressionRule"
    // EsperEPL2Grammar.g:480:1: startEPLExpressionRule : ( annotations )? eplExpression EOF -> ^( EPL_EXPR annotations eplExpression ) ;
    public final EsperEPL2GrammarParser.startEPLExpressionRule_return startEPLExpressionRule() throws RecognitionException {
        EsperEPL2GrammarParser.startEPLExpressionRule_return retval = new EsperEPL2GrammarParser.startEPLExpressionRule_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token EOF6=null;
        EsperEPL2GrammarParser.annotations_return annotations4 = null;

        EsperEPL2GrammarParser.eplExpression_return eplExpression5 = null;


        CommonTree EOF6_tree=null;
        RewriteRuleTokenStream stream_EOF=new RewriteRuleTokenStream(adaptor,"token EOF");
        RewriteRuleSubtreeStream stream_annotations=new RewriteRuleSubtreeStream(adaptor,"rule annotations");
        RewriteRuleSubtreeStream stream_eplExpression=new RewriteRuleSubtreeStream(adaptor,"rule eplExpression");
        try {
            // EsperEPL2Grammar.g:481:2: ( ( annotations )? eplExpression EOF -> ^( EPL_EXPR annotations eplExpression ) )
            // EsperEPL2Grammar.g:481:4: ( annotations )? eplExpression EOF
            {
            // EsperEPL2Grammar.g:481:4: ( annotations )?
            int alt2=2;
            int LA2_0 = input.LA(1);

            if ( (LA2_0==EMAILAT) ) {
                alt2=1;
            }
            switch (alt2) {
                case 1 :
                    // EsperEPL2Grammar.g:481:4: annotations
                    {
                    pushFollow(FOLLOW_annotations_in_startEPLExpressionRule1393);
                    annotations4=annotations();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_annotations.add(annotations4.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_eplExpression_in_startEPLExpressionRule1399);
            eplExpression5=eplExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eplExpression.add(eplExpression5.getTree());
            EOF6=(Token)match(input,EOF,FOLLOW_EOF_in_startEPLExpressionRule1403); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EOF.add(EOF6);



            // AST REWRITE
            // elements: annotations, eplExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 484:3: -> ^( EPL_EXPR annotations eplExpression )
            {
                // EsperEPL2Grammar.g:484:6: ^( EPL_EXPR annotations eplExpression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EPL_EXPR, "EPL_EXPR"), root_1);

                adaptor.addChild(root_1, stream_annotations.nextTree());
                adaptor.addChild(root_1, stream_eplExpression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "startEPLExpressionRule"

    public static class startEventPropertyRule_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "startEventPropertyRule"
    // EsperEPL2Grammar.g:487:1: startEventPropertyRule : eventProperty EOF ;
    public final EsperEPL2GrammarParser.startEventPropertyRule_return startEventPropertyRule() throws RecognitionException {
        EsperEPL2GrammarParser.startEventPropertyRule_return retval = new EsperEPL2GrammarParser.startEventPropertyRule_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token EOF8=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty7 = null;


        CommonTree EOF8_tree=null;

        try {
            // EsperEPL2Grammar.g:488:2: ( eventProperty EOF )
            // EsperEPL2Grammar.g:488:4: eventProperty EOF
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_eventProperty_in_startEventPropertyRule1428);
            eventProperty7=eventProperty();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty7.getTree());
            EOF8=(Token)match(input,EOF,FOLLOW_EOF_in_startEventPropertyRule1432); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "startEventPropertyRule"

    public static class annotations_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotations"
    // EsperEPL2Grammar.g:495:1: annotations : ( annotation )+ ;
    public final EsperEPL2GrammarParser.annotations_return annotations() throws RecognitionException {
        EsperEPL2GrammarParser.annotations_return retval = new EsperEPL2GrammarParser.annotations_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.annotation_return annotation9 = null;



        try {
            // EsperEPL2Grammar.g:496:5: ( ( annotation )+ )
            // EsperEPL2Grammar.g:496:9: ( annotation )+
            {
            root_0 = (CommonTree)adaptor.nil();

            // EsperEPL2Grammar.g:496:9: ( annotation )+
            int cnt3=0;
            loop3:
            do {
                int alt3=2;
                int LA3_0 = input.LA(1);

                if ( (LA3_0==EMAILAT) ) {
                    alt3=1;
                }


                switch (alt3) {
            	case 1 :
            	    // EsperEPL2Grammar.g:496:9: annotation
            	    {
            	    pushFollow(FOLLOW_annotation_in_annotations1452);
            	    annotation9=annotation();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotation9.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt3 >= 1 ) break loop3;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(3, input);
                        throw eee;
                }
                cnt3++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "annotations"

    public static class annotation_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotation"
    // EsperEPL2Grammar.g:499:1: annotation : '@' classIdentifier ( '(' ( elementValuePairs | elementValue )? ')' )? -> ^( ANNOTATION classIdentifier ( elementValuePairs )? ( elementValue )? ) ;
    public final EsperEPL2GrammarParser.annotation_return annotation() throws RecognitionException {
        EsperEPL2GrammarParser.annotation_return retval = new EsperEPL2GrammarParser.annotation_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token char_literal10=null;
        Token char_literal12=null;
        Token char_literal15=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier11 = null;

        EsperEPL2GrammarParser.elementValuePairs_return elementValuePairs13 = null;

        EsperEPL2GrammarParser.elementValue_return elementValue14 = null;


        CommonTree char_literal10_tree=null;
        CommonTree char_literal12_tree=null;
        CommonTree char_literal15_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_EMAILAT=new RewriteRuleTokenStream(adaptor,"token EMAILAT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_elementValue=new RewriteRuleSubtreeStream(adaptor,"rule elementValue");
        RewriteRuleSubtreeStream stream_elementValuePairs=new RewriteRuleSubtreeStream(adaptor,"rule elementValuePairs");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            // EsperEPL2Grammar.g:500:5: ( '@' classIdentifier ( '(' ( elementValuePairs | elementValue )? ')' )? -> ^( ANNOTATION classIdentifier ( elementValuePairs )? ( elementValue )? ) )
            // EsperEPL2Grammar.g:500:9: '@' classIdentifier ( '(' ( elementValuePairs | elementValue )? ')' )?
            {
            char_literal10=(Token)match(input,EMAILAT,FOLLOW_EMAILAT_in_annotation1472); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EMAILAT.add(char_literal10);

            pushFollow(FOLLOW_classIdentifier_in_annotation1474);
            classIdentifier11=classIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier11.getTree());
            // EsperEPL2Grammar.g:500:29: ( '(' ( elementValuePairs | elementValue )? ')' )?
            int alt5=2;
            int LA5_0 = input.LA(1);

            if ( (LA5_0==LPAREN) ) {
                int LA5_1 = input.LA(2);

                if ( (LA5_1==IDENT) ) {
                    int LA5_18 = input.LA(3);

                    if ( (LA5_18==EQUALS) ) {
                        int LA5_36 = input.LA(4);

                        if ( ((LA5_36>=BOOLEAN_TRUE && LA5_36<=VALUE_NULL)||LA5_36==NUM_DOUBLE||(LA5_36>=STRING_LITERAL && LA5_36<=QUOTED_STRING_LITERAL)||(LA5_36>=PLUS && LA5_36<=MINUS)||LA5_36==LCURLY||LA5_36==NUM_INT||(LA5_36>=NUM_LONG && LA5_36<=NUM_FLOAT)||LA5_36==EMAILAT) ) {
                            alt5=1;
                        }
                    }
                }
                else if ( ((LA5_1>=BOOLEAN_TRUE && LA5_1<=VALUE_NULL)||LA5_1==NUM_DOUBLE||LA5_1==RPAREN||(LA5_1>=STRING_LITERAL && LA5_1<=QUOTED_STRING_LITERAL)||(LA5_1>=PLUS && LA5_1<=MINUS)||LA5_1==LCURLY||LA5_1==NUM_INT||(LA5_1>=NUM_LONG && LA5_1<=NUM_FLOAT)||LA5_1==EMAILAT) ) {
                    alt5=1;
                }
            }
            switch (alt5) {
                case 1 :
                    // EsperEPL2Grammar.g:500:31: '(' ( elementValuePairs | elementValue )? ')'
                    {
                    char_literal12=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_annotation1478); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(char_literal12);

                    // EsperEPL2Grammar.g:500:35: ( elementValuePairs | elementValue )?
                    int alt4=3;
                    int LA4_0 = input.LA(1);

                    if ( (LA4_0==IDENT) ) {
                        alt4=1;
                    }
                    else if ( ((LA4_0>=BOOLEAN_TRUE && LA4_0<=VALUE_NULL)||LA4_0==NUM_DOUBLE||(LA4_0>=STRING_LITERAL && LA4_0<=QUOTED_STRING_LITERAL)||(LA4_0>=PLUS && LA4_0<=MINUS)||LA4_0==LCURLY||LA4_0==NUM_INT||(LA4_0>=NUM_LONG && LA4_0<=NUM_FLOAT)||LA4_0==EMAILAT) ) {
                        alt4=2;
                    }
                    switch (alt4) {
                        case 1 :
                            // EsperEPL2Grammar.g:500:37: elementValuePairs
                            {
                            pushFollow(FOLLOW_elementValuePairs_in_annotation1482);
                            elementValuePairs13=elementValuePairs();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elementValuePairs.add(elementValuePairs13.getTree());

                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:500:57: elementValue
                            {
                            pushFollow(FOLLOW_elementValue_in_annotation1486);
                            elementValue14=elementValue();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elementValue.add(elementValue14.getTree());

                            }
                            break;

                    }

                    char_literal15=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_annotation1491); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(char_literal15);


                    }
                    break;

            }



            // AST REWRITE
            // elements: classIdentifier, elementValuePairs, elementValue
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 501:2: -> ^( ANNOTATION classIdentifier ( elementValuePairs )? ( elementValue )? )
            {
                // EsperEPL2Grammar.g:501:5: ^( ANNOTATION classIdentifier ( elementValuePairs )? ( elementValue )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION, "ANNOTATION"), root_1);

                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                // EsperEPL2Grammar.g:501:34: ( elementValuePairs )?
                if ( stream_elementValuePairs.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValuePairs.nextTree());

                }
                stream_elementValuePairs.reset();
                // EsperEPL2Grammar.g:501:53: ( elementValue )?
                if ( stream_elementValue.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValue.nextTree());

                }
                stream_elementValue.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "annotation"

    public static class elementValuePairs_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValuePairs"
    // EsperEPL2Grammar.g:504:1: elementValuePairs : elementValuePair ( COMMA elementValuePair )* ;
    public final EsperEPL2GrammarParser.elementValuePairs_return elementValuePairs() throws RecognitionException {
        EsperEPL2GrammarParser.elementValuePairs_return retval = new EsperEPL2GrammarParser.elementValuePairs_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA17=null;
        EsperEPL2GrammarParser.elementValuePair_return elementValuePair16 = null;

        EsperEPL2GrammarParser.elementValuePair_return elementValuePair18 = null;


        CommonTree COMMA17_tree=null;

        try {
            // EsperEPL2Grammar.g:505:5: ( elementValuePair ( COMMA elementValuePair )* )
            // EsperEPL2Grammar.g:505:9: elementValuePair ( COMMA elementValuePair )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_elementValuePair_in_elementValuePairs1532);
            elementValuePair16=elementValuePair();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValuePair16.getTree());
            // EsperEPL2Grammar.g:505:26: ( COMMA elementValuePair )*
            loop6:
            do {
                int alt6=2;
                int LA6_0 = input.LA(1);

                if ( (LA6_0==COMMA) ) {
                    alt6=1;
                }


                switch (alt6) {
            	case 1 :
            	    // EsperEPL2Grammar.g:505:27: COMMA elementValuePair
            	    {
            	    COMMA17=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValuePairs1535); if (state.failed) return retval;
            	    pushFollow(FOLLOW_elementValuePair_in_elementValuePairs1538);
            	    elementValuePair18=elementValuePair();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValuePair18.getTree());

            	    }
            	    break;

            	default :
            	    break loop6;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "elementValuePairs"

    public static class elementValuePair_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValuePair"
    // EsperEPL2Grammar.g:508:1: elementValuePair : i= IDENT '=' elementValue -> ^( ANNOTATION_VALUE $i elementValue ) ;
    public final EsperEPL2GrammarParser.elementValuePair_return elementValuePair() throws RecognitionException {
        EsperEPL2GrammarParser.elementValuePair_return retval = new EsperEPL2GrammarParser.elementValuePair_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token char_literal19=null;
        EsperEPL2GrammarParser.elementValue_return elementValue20 = null;


        CommonTree i_tree=null;
        CommonTree char_literal19_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleSubtreeStream stream_elementValue=new RewriteRuleSubtreeStream(adaptor,"rule elementValue");
        try {
            // EsperEPL2Grammar.g:509:5: (i= IDENT '=' elementValue -> ^( ANNOTATION_VALUE $i elementValue ) )
            // EsperEPL2Grammar.g:509:9: i= IDENT '=' elementValue
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_elementValuePair1561); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);

            char_literal19=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_elementValuePair1563); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EQUALS.add(char_literal19);

            pushFollow(FOLLOW_elementValue_in_elementValuePair1565);
            elementValue20=elementValue();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_elementValue.add(elementValue20.getTree());


            // AST REWRITE
            // elements: elementValue, i
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 510:2: -> ^( ANNOTATION_VALUE $i elementValue )
            {
                // EsperEPL2Grammar.g:510:5: ^( ANNOTATION_VALUE $i elementValue )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION_VALUE, "ANNOTATION_VALUE"), root_1);

                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_elementValue.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "elementValuePair"

    public static class elementValue_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValue"
    // EsperEPL2Grammar.g:513:1: elementValue : ( annotation | ( elementValueArrayInitializer ) -> elementValueArrayInitializer | constant );
    public final EsperEPL2GrammarParser.elementValue_return elementValue() throws RecognitionException {
        EsperEPL2GrammarParser.elementValue_return retval = new EsperEPL2GrammarParser.elementValue_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.annotation_return annotation21 = null;

        EsperEPL2GrammarParser.elementValueArrayInitializer_return elementValueArrayInitializer22 = null;

        EsperEPL2GrammarParser.constant_return constant23 = null;


        RewriteRuleSubtreeStream stream_elementValueArrayInitializer=new RewriteRuleSubtreeStream(adaptor,"rule elementValueArrayInitializer");
        try {
            // EsperEPL2Grammar.g:514:5: ( annotation | ( elementValueArrayInitializer ) -> elementValueArrayInitializer | constant )
            int alt7=3;
            switch ( input.LA(1) ) {
            case EMAILAT:
                {
                alt7=1;
                }
                break;
            case LCURLY:
                {
                alt7=2;
                }
                break;
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case NUM_DOUBLE:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case PLUS:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt7=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 7, 0, input);

                throw nvae;
            }

            switch (alt7) {
                case 1 :
                    // EsperEPL2Grammar.g:514:9: annotation
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_annotation_in_elementValue1600);
                    annotation21=annotation();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotation21.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:515:9: ( elementValueArrayInitializer )
                    {
                    // EsperEPL2Grammar.g:515:9: ( elementValueArrayInitializer )
                    // EsperEPL2Grammar.g:515:10: elementValueArrayInitializer
                    {
                    pushFollow(FOLLOW_elementValueArrayInitializer_in_elementValue1611);
                    elementValueArrayInitializer22=elementValueArrayInitializer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_elementValueArrayInitializer.add(elementValueArrayInitializer22.getTree());

                    }



                    // AST REWRITE
                    // elements: elementValueArrayInitializer
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 515:40: -> elementValueArrayInitializer
                    {
                        adaptor.addChild(root_0, stream_elementValueArrayInitializer.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:516:7: constant
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_constant_in_elementValue1624);
                    constant23=constant();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constant23.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "elementValue"

    public static class elementValueArrayInitializer_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValueArrayInitializer"
    // EsperEPL2Grammar.g:519:1: elementValueArrayInitializer : '{' ( elementValue ( ',' elementValue )* )? ( ',' )? '}' -> ^( ANNOTATION_ARRAY ( elementValue )* ) ;
    public final EsperEPL2GrammarParser.elementValueArrayInitializer_return elementValueArrayInitializer() throws RecognitionException {
        EsperEPL2GrammarParser.elementValueArrayInitializer_return retval = new EsperEPL2GrammarParser.elementValueArrayInitializer_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token char_literal24=null;
        Token char_literal26=null;
        Token char_literal28=null;
        Token char_literal29=null;
        EsperEPL2GrammarParser.elementValue_return elementValue25 = null;

        EsperEPL2GrammarParser.elementValue_return elementValue27 = null;


        CommonTree char_literal24_tree=null;
        CommonTree char_literal26_tree=null;
        CommonTree char_literal28_tree=null;
        CommonTree char_literal29_tree=null;
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_elementValue=new RewriteRuleSubtreeStream(adaptor,"rule elementValue");
        try {
            // EsperEPL2Grammar.g:520:5: ( '{' ( elementValue ( ',' elementValue )* )? ( ',' )? '}' -> ^( ANNOTATION_ARRAY ( elementValue )* ) )
            // EsperEPL2Grammar.g:520:9: '{' ( elementValue ( ',' elementValue )* )? ( ',' )? '}'
            {
            char_literal24=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_elementValueArrayInitializer1647); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCURLY.add(char_literal24);

            // EsperEPL2Grammar.g:520:13: ( elementValue ( ',' elementValue )* )?
            int alt9=2;
            int LA9_0 = input.LA(1);

            if ( ((LA9_0>=BOOLEAN_TRUE && LA9_0<=VALUE_NULL)||LA9_0==NUM_DOUBLE||(LA9_0>=STRING_LITERAL && LA9_0<=QUOTED_STRING_LITERAL)||(LA9_0>=PLUS && LA9_0<=MINUS)||LA9_0==LCURLY||LA9_0==NUM_INT||(LA9_0>=NUM_LONG && LA9_0<=NUM_FLOAT)||LA9_0==EMAILAT) ) {
                alt9=1;
            }
            switch (alt9) {
                case 1 :
                    // EsperEPL2Grammar.g:520:14: elementValue ( ',' elementValue )*
                    {
                    pushFollow(FOLLOW_elementValue_in_elementValueArrayInitializer1650);
                    elementValue25=elementValue();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_elementValue.add(elementValue25.getTree());
                    // EsperEPL2Grammar.g:520:27: ( ',' elementValue )*
                    loop8:
                    do {
                        int alt8=2;
                        int LA8_0 = input.LA(1);

                        if ( (LA8_0==COMMA) ) {
                            int LA8_1 = input.LA(2);

                            if ( ((LA8_1>=BOOLEAN_TRUE && LA8_1<=VALUE_NULL)||LA8_1==NUM_DOUBLE||(LA8_1>=STRING_LITERAL && LA8_1<=QUOTED_STRING_LITERAL)||(LA8_1>=PLUS && LA8_1<=MINUS)||LA8_1==LCURLY||LA8_1==NUM_INT||(LA8_1>=NUM_LONG && LA8_1<=NUM_FLOAT)||LA8_1==EMAILAT) ) {
                                alt8=1;
                            }


                        }


                        switch (alt8) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:520:28: ',' elementValue
                    	    {
                    	    char_literal26=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValueArrayInitializer1653); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(char_literal26);

                    	    pushFollow(FOLLOW_elementValue_in_elementValueArrayInitializer1655);
                    	    elementValue27=elementValue();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_elementValue.add(elementValue27.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop8;
                        }
                    } while (true);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:520:49: ( ',' )?
            int alt10=2;
            int LA10_0 = input.LA(1);

            if ( (LA10_0==COMMA) ) {
                alt10=1;
            }
            switch (alt10) {
                case 1 :
                    // EsperEPL2Grammar.g:520:50: ','
                    {
                    char_literal28=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValueArrayInitializer1662); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(char_literal28);


                    }
                    break;

            }

            char_literal29=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_elementValueArrayInitializer1666); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCURLY.add(char_literal29);



            // AST REWRITE
            // elements: elementValue
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 521:2: -> ^( ANNOTATION_ARRAY ( elementValue )* )
            {
                // EsperEPL2Grammar.g:521:5: ^( ANNOTATION_ARRAY ( elementValue )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION_ARRAY, "ANNOTATION_ARRAY"), root_1);

                // EsperEPL2Grammar.g:521:24: ( elementValue )*
                while ( stream_elementValue.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValue.nextTree());

                }
                stream_elementValue.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "elementValueArrayInitializer"

    public static class eplExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "eplExpression"
    // EsperEPL2Grammar.g:527:1: eplExpression : ( selectExpr | createWindowExpr | createVariableExpr | onExpr );
    public final EsperEPL2GrammarParser.eplExpression_return eplExpression() throws RecognitionException {
        EsperEPL2GrammarParser.eplExpression_return retval = new EsperEPL2GrammarParser.eplExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.selectExpr_return selectExpr30 = null;

        EsperEPL2GrammarParser.createWindowExpr_return createWindowExpr31 = null;

        EsperEPL2GrammarParser.createVariableExpr_return createVariableExpr32 = null;

        EsperEPL2GrammarParser.onExpr_return onExpr33 = null;



        try {
            // EsperEPL2Grammar.g:528:2: ( selectExpr | createWindowExpr | createVariableExpr | onExpr )
            int alt11=4;
            switch ( input.LA(1) ) {
            case SELECT:
            case INSERT:
                {
                alt11=1;
                }
                break;
            case CREATE:
                {
                int LA11_3 = input.LA(2);

                if ( (LA11_3==WINDOW) ) {
                    alt11=2;
                }
                else if ( (LA11_3==VARIABLE) ) {
                    alt11=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 11, 3, input);

                    throw nvae;
                }
                }
                break;
            case ON:
                {
                alt11=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 11, 0, input);

                throw nvae;
            }

            switch (alt11) {
                case 1 :
                    // EsperEPL2Grammar.g:528:4: selectExpr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_selectExpr_in_eplExpression1698);
                    selectExpr30=selectExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, selectExpr30.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:529:4: createWindowExpr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_createWindowExpr_in_eplExpression1703);
                    createWindowExpr31=createWindowExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createWindowExpr31.getTree());

                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:530:4: createVariableExpr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_createVariableExpr_in_eplExpression1708);
                    createVariableExpr32=createVariableExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createVariableExpr32.getTree());

                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:531:4: onExpr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_onExpr_in_eplExpression1713);
                    onExpr33=onExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, onExpr33.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "eplExpression"

    public static class selectExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "selectExpr"
    // EsperEPL2Grammar.g:534:1: selectExpr : ( INSERT insertIntoExpr )? SELECT selectClause FROM fromClause ( WHERE whereClause )? ( GROUP BY groupByListExpr )? ( HAVING havingClause )? ( OUTPUT outputLimit )? ( ORDER BY orderByListExpr )? ( ROW_LIMIT_EXPR rowLimit )? ;
    public final EsperEPL2GrammarParser.selectExpr_return selectExpr() throws RecognitionException {
        EsperEPL2GrammarParser.selectExpr_return retval = new EsperEPL2GrammarParser.selectExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token INSERT34=null;
        Token SELECT36=null;
        Token FROM38=null;
        Token WHERE40=null;
        Token GROUP42=null;
        Token BY43=null;
        Token HAVING45=null;
        Token OUTPUT47=null;
        Token ORDER49=null;
        Token BY50=null;
        Token ROW_LIMIT_EXPR52=null;
        EsperEPL2GrammarParser.insertIntoExpr_return insertIntoExpr35 = null;

        EsperEPL2GrammarParser.selectClause_return selectClause37 = null;

        EsperEPL2GrammarParser.fromClause_return fromClause39 = null;

        EsperEPL2GrammarParser.whereClause_return whereClause41 = null;

        EsperEPL2GrammarParser.groupByListExpr_return groupByListExpr44 = null;

        EsperEPL2GrammarParser.havingClause_return havingClause46 = null;

        EsperEPL2GrammarParser.outputLimit_return outputLimit48 = null;

        EsperEPL2GrammarParser.orderByListExpr_return orderByListExpr51 = null;

        EsperEPL2GrammarParser.rowLimit_return rowLimit53 = null;


        CommonTree INSERT34_tree=null;
        CommonTree SELECT36_tree=null;
        CommonTree FROM38_tree=null;
        CommonTree WHERE40_tree=null;
        CommonTree GROUP42_tree=null;
        CommonTree BY43_tree=null;
        CommonTree HAVING45_tree=null;
        CommonTree OUTPUT47_tree=null;
        CommonTree ORDER49_tree=null;
        CommonTree BY50_tree=null;
        CommonTree ROW_LIMIT_EXPR52_tree=null;

        try {
            // EsperEPL2Grammar.g:535:2: ( ( INSERT insertIntoExpr )? SELECT selectClause FROM fromClause ( WHERE whereClause )? ( GROUP BY groupByListExpr )? ( HAVING havingClause )? ( OUTPUT outputLimit )? ( ORDER BY orderByListExpr )? ( ROW_LIMIT_EXPR rowLimit )? )
            // EsperEPL2Grammar.g:535:4: ( INSERT insertIntoExpr )? SELECT selectClause FROM fromClause ( WHERE whereClause )? ( GROUP BY groupByListExpr )? ( HAVING havingClause )? ( OUTPUT outputLimit )? ( ORDER BY orderByListExpr )? ( ROW_LIMIT_EXPR rowLimit )?
            {
            root_0 = (CommonTree)adaptor.nil();

            // EsperEPL2Grammar.g:535:4: ( INSERT insertIntoExpr )?
            int alt12=2;
            int LA12_0 = input.LA(1);

            if ( (LA12_0==INSERT) ) {
                alt12=1;
            }
            switch (alt12) {
                case 1 :
                    // EsperEPL2Grammar.g:535:5: INSERT insertIntoExpr
                    {
                    INSERT34=(Token)match(input,INSERT,FOLLOW_INSERT_in_selectExpr1726); if (state.failed) return retval;
                    pushFollow(FOLLOW_insertIntoExpr_in_selectExpr1729);
                    insertIntoExpr35=insertIntoExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, insertIntoExpr35.getTree());

                    }
                    break;

            }

            SELECT36=(Token)match(input,SELECT,FOLLOW_SELECT_in_selectExpr1735); if (state.failed) return retval;
            pushFollow(FOLLOW_selectClause_in_selectExpr1738);
            selectClause37=selectClause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, selectClause37.getTree());
            FROM38=(Token)match(input,FROM,FOLLOW_FROM_in_selectExpr1742); if (state.failed) return retval;
            pushFollow(FOLLOW_fromClause_in_selectExpr1745);
            fromClause39=fromClause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, fromClause39.getTree());
            // EsperEPL2Grammar.g:538:3: ( WHERE whereClause )?
            int alt13=2;
            int LA13_0 = input.LA(1);

            if ( (LA13_0==WHERE) ) {
                alt13=1;
            }
            switch (alt13) {
                case 1 :
                    // EsperEPL2Grammar.g:538:4: WHERE whereClause
                    {
                    WHERE40=(Token)match(input,WHERE,FOLLOW_WHERE_in_selectExpr1750); if (state.failed) return retval;
                    pushFollow(FOLLOW_whereClause_in_selectExpr1753);
                    whereClause41=whereClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, whereClause41.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:539:3: ( GROUP BY groupByListExpr )?
            int alt14=2;
            int LA14_0 = input.LA(1);

            if ( (LA14_0==GROUP) ) {
                alt14=1;
            }
            switch (alt14) {
                case 1 :
                    // EsperEPL2Grammar.g:539:4: GROUP BY groupByListExpr
                    {
                    GROUP42=(Token)match(input,GROUP,FOLLOW_GROUP_in_selectExpr1760); if (state.failed) return retval;
                    BY43=(Token)match(input,BY,FOLLOW_BY_in_selectExpr1763); if (state.failed) return retval;
                    pushFollow(FOLLOW_groupByListExpr_in_selectExpr1766);
                    groupByListExpr44=groupByListExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, groupByListExpr44.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:540:3: ( HAVING havingClause )?
            int alt15=2;
            int LA15_0 = input.LA(1);

            if ( (LA15_0==HAVING) ) {
                alt15=1;
            }
            switch (alt15) {
                case 1 :
                    // EsperEPL2Grammar.g:540:4: HAVING havingClause
                    {
                    HAVING45=(Token)match(input,HAVING,FOLLOW_HAVING_in_selectExpr1773); if (state.failed) return retval;
                    pushFollow(FOLLOW_havingClause_in_selectExpr1776);
                    havingClause46=havingClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, havingClause46.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:541:3: ( OUTPUT outputLimit )?
            int alt16=2;
            int LA16_0 = input.LA(1);

            if ( (LA16_0==OUTPUT) ) {
                alt16=1;
            }
            switch (alt16) {
                case 1 :
                    // EsperEPL2Grammar.g:541:4: OUTPUT outputLimit
                    {
                    OUTPUT47=(Token)match(input,OUTPUT,FOLLOW_OUTPUT_in_selectExpr1783); if (state.failed) return retval;
                    pushFollow(FOLLOW_outputLimit_in_selectExpr1786);
                    outputLimit48=outputLimit();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, outputLimit48.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:542:3: ( ORDER BY orderByListExpr )?
            int alt17=2;
            int LA17_0 = input.LA(1);

            if ( (LA17_0==ORDER) ) {
                alt17=1;
            }
            switch (alt17) {
                case 1 :
                    // EsperEPL2Grammar.g:542:4: ORDER BY orderByListExpr
                    {
                    ORDER49=(Token)match(input,ORDER,FOLLOW_ORDER_in_selectExpr1793); if (state.failed) return retval;
                    BY50=(Token)match(input,BY,FOLLOW_BY_in_selectExpr1796); if (state.failed) return retval;
                    pushFollow(FOLLOW_orderByListExpr_in_selectExpr1799);
                    orderByListExpr51=orderByListExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, orderByListExpr51.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:543:3: ( ROW_LIMIT_EXPR rowLimit )?
            int alt18=2;
            int LA18_0 = input.LA(1);

            if ( (LA18_0==ROW_LIMIT_EXPR) ) {
                alt18=1;
            }
            switch (alt18) {
                case 1 :
                    // EsperEPL2Grammar.g:543:4: ROW_LIMIT_EXPR rowLimit
                    {
                    ROW_LIMIT_EXPR52=(Token)match(input,ROW_LIMIT_EXPR,FOLLOW_ROW_LIMIT_EXPR_in_selectExpr1806); if (state.failed) return retval;
                    pushFollow(FOLLOW_rowLimit_in_selectExpr1809);
                    rowLimit53=rowLimit();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rowLimit53.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "selectExpr"

    public static class onExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "onExpr"
    // EsperEPL2Grammar.g:546:1: onExpr : ON ( eventFilterExpression | patternInclusionExpression ) ( AS i= IDENT | i= IDENT )? ( onDeleteExpr | onSelectExpr | onSetExpr ) -> ^( ON_EXPR ( eventFilterExpression )? ( patternInclusionExpression )? ( $i)? ( onDeleteExpr )? ( onSelectExpr )? ( onSetExpr )? ) ;
    public final EsperEPL2GrammarParser.onExpr_return onExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onExpr_return retval = new EsperEPL2GrammarParser.onExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token ON54=null;
        Token AS57=null;
        EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression55 = null;

        EsperEPL2GrammarParser.patternInclusionExpression_return patternInclusionExpression56 = null;

        EsperEPL2GrammarParser.onDeleteExpr_return onDeleteExpr58 = null;

        EsperEPL2GrammarParser.onSelectExpr_return onSelectExpr59 = null;

        EsperEPL2GrammarParser.onSetExpr_return onSetExpr60 = null;


        CommonTree i_tree=null;
        CommonTree ON54_tree=null;
        CommonTree AS57_tree=null;
        RewriteRuleTokenStream stream_ON=new RewriteRuleTokenStream(adaptor,"token ON");
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_onSelectExpr=new RewriteRuleSubtreeStream(adaptor,"rule onSelectExpr");
        RewriteRuleSubtreeStream stream_onDeleteExpr=new RewriteRuleSubtreeStream(adaptor,"rule onDeleteExpr");
        RewriteRuleSubtreeStream stream_eventFilterExpression=new RewriteRuleSubtreeStream(adaptor,"rule eventFilterExpression");
        RewriteRuleSubtreeStream stream_onSetExpr=new RewriteRuleSubtreeStream(adaptor,"rule onSetExpr");
        RewriteRuleSubtreeStream stream_patternInclusionExpression=new RewriteRuleSubtreeStream(adaptor,"rule patternInclusionExpression");
        try {
            // EsperEPL2Grammar.g:547:2: ( ON ( eventFilterExpression | patternInclusionExpression ) ( AS i= IDENT | i= IDENT )? ( onDeleteExpr | onSelectExpr | onSetExpr ) -> ^( ON_EXPR ( eventFilterExpression )? ( patternInclusionExpression )? ( $i)? ( onDeleteExpr )? ( onSelectExpr )? ( onSetExpr )? ) )
            // EsperEPL2Grammar.g:547:4: ON ( eventFilterExpression | patternInclusionExpression ) ( AS i= IDENT | i= IDENT )? ( onDeleteExpr | onSelectExpr | onSetExpr )
            {
            ON54=(Token)match(input,ON,FOLLOW_ON_in_onExpr1824); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ON.add(ON54);

            // EsperEPL2Grammar.g:547:7: ( eventFilterExpression | patternInclusionExpression )
            int alt19=2;
            int LA19_0 = input.LA(1);

            if ( (LA19_0==IDENT||LA19_0==TICKED_STRING_LITERAL) ) {
                alt19=1;
            }
            else if ( (LA19_0==PATTERN) ) {
                alt19=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 19, 0, input);

                throw nvae;
            }
            switch (alt19) {
                case 1 :
                    // EsperEPL2Grammar.g:547:8: eventFilterExpression
                    {
                    pushFollow(FOLLOW_eventFilterExpression_in_onExpr1827);
                    eventFilterExpression55=eventFilterExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_eventFilterExpression.add(eventFilterExpression55.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:547:32: patternInclusionExpression
                    {
                    pushFollow(FOLLOW_patternInclusionExpression_in_onExpr1831);
                    patternInclusionExpression56=patternInclusionExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_patternInclusionExpression.add(patternInclusionExpression56.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:547:60: ( AS i= IDENT | i= IDENT )?
            int alt20=3;
            int LA20_0 = input.LA(1);

            if ( (LA20_0==AS) ) {
                alt20=1;
            }
            else if ( (LA20_0==IDENT) ) {
                alt20=2;
            }
            switch (alt20) {
                case 1 :
                    // EsperEPL2Grammar.g:547:61: AS i= IDENT
                    {
                    AS57=(Token)match(input,AS,FOLLOW_AS_in_onExpr1835); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS57);

                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onExpr1839); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:547:74: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onExpr1845); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:548:3: ( onDeleteExpr | onSelectExpr | onSetExpr )
            int alt21=3;
            switch ( input.LA(1) ) {
            case DELETE:
                {
                alt21=1;
                }
                break;
            case SELECT:
            case INSERT:
                {
                alt21=2;
                }
                break;
            case SET:
                {
                alt21=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 21, 0, input);

                throw nvae;
            }

            switch (alt21) {
                case 1 :
                    // EsperEPL2Grammar.g:548:4: onDeleteExpr
                    {
                    pushFollow(FOLLOW_onDeleteExpr_in_onExpr1853);
                    onDeleteExpr58=onDeleteExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onDeleteExpr.add(onDeleteExpr58.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:548:19: onSelectExpr
                    {
                    pushFollow(FOLLOW_onSelectExpr_in_onExpr1857);
                    onSelectExpr59=onSelectExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onSelectExpr.add(onSelectExpr59.getTree());

                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:548:34: onSetExpr
                    {
                    pushFollow(FOLLOW_onSetExpr_in_onExpr1861);
                    onSetExpr60=onSetExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onSetExpr.add(onSetExpr60.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: eventFilterExpression, i, onDeleteExpr, onSetExpr, onSelectExpr, patternInclusionExpression
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 549:3: -> ^( ON_EXPR ( eventFilterExpression )? ( patternInclusionExpression )? ( $i)? ( onDeleteExpr )? ( onSelectExpr )? ( onSetExpr )? )
            {
                // EsperEPL2Grammar.g:549:6: ^( ON_EXPR ( eventFilterExpression )? ( patternInclusionExpression )? ( $i)? ( onDeleteExpr )? ( onSelectExpr )? ( onSetExpr )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_EXPR, "ON_EXPR"), root_1);

                // EsperEPL2Grammar.g:549:16: ( eventFilterExpression )?
                if ( stream_eventFilterExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_eventFilterExpression.nextTree());

                }
                stream_eventFilterExpression.reset();
                // EsperEPL2Grammar.g:549:39: ( patternInclusionExpression )?
                if ( stream_patternInclusionExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_patternInclusionExpression.nextTree());

                }
                stream_patternInclusionExpression.reset();
                // EsperEPL2Grammar.g:549:67: ( $i)?
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());

                }
                stream_i.reset();
                // EsperEPL2Grammar.g:549:71: ( onDeleteExpr )?
                if ( stream_onDeleteExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onDeleteExpr.nextTree());

                }
                stream_onDeleteExpr.reset();
                // EsperEPL2Grammar.g:549:85: ( onSelectExpr )?
                if ( stream_onSelectExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSelectExpr.nextTree());

                }
                stream_onSelectExpr.reset();
                // EsperEPL2Grammar.g:549:99: ( onSetExpr )?
                if ( stream_onSetExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetExpr.nextTree());

                }
                stream_onSetExpr.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "onExpr"

    public static class onSelectExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "onSelectExpr"
    // EsperEPL2Grammar.g:552:1: onSelectExpr : ( INSERT insertIntoExpr )? SELECT selectionList onExprFrom ( WHERE whereClause )? ( GROUP BY groupByListExpr )? ( HAVING havingClause )? ( ORDER BY orderByListExpr )? -> ^( ON_SELECT_EXPR ( insertIntoExpr )? selectionList onExprFrom ( whereClause )? ( groupByListExpr )? ( havingClause )? ( orderByListExpr )? ) ;
    public final EsperEPL2GrammarParser.onSelectExpr_return onSelectExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onSelectExpr_return retval = new EsperEPL2GrammarParser.onSelectExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token INSERT61=null;
        Token SELECT63=null;
        Token WHERE66=null;
        Token GROUP68=null;
        Token BY69=null;
        Token HAVING71=null;
        Token ORDER73=null;
        Token BY74=null;
        EsperEPL2GrammarParser.insertIntoExpr_return insertIntoExpr62 = null;

        EsperEPL2GrammarParser.selectionList_return selectionList64 = null;

        EsperEPL2GrammarParser.onExprFrom_return onExprFrom65 = null;

        EsperEPL2GrammarParser.whereClause_return whereClause67 = null;

        EsperEPL2GrammarParser.groupByListExpr_return groupByListExpr70 = null;

        EsperEPL2GrammarParser.havingClause_return havingClause72 = null;

        EsperEPL2GrammarParser.orderByListExpr_return orderByListExpr75 = null;


        CommonTree INSERT61_tree=null;
        CommonTree SELECT63_tree=null;
        CommonTree WHERE66_tree=null;
        CommonTree GROUP68_tree=null;
        CommonTree BY69_tree=null;
        CommonTree HAVING71_tree=null;
        CommonTree ORDER73_tree=null;
        CommonTree BY74_tree=null;
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_GROUP=new RewriteRuleTokenStream(adaptor,"token GROUP");
        RewriteRuleTokenStream stream_BY=new RewriteRuleTokenStream(adaptor,"token BY");
        RewriteRuleTokenStream stream_HAVING=new RewriteRuleTokenStream(adaptor,"token HAVING");
        RewriteRuleTokenStream stream_INSERT=new RewriteRuleTokenStream(adaptor,"token INSERT");
        RewriteRuleTokenStream stream_ORDER=new RewriteRuleTokenStream(adaptor,"token ORDER");
        RewriteRuleTokenStream stream_SELECT=new RewriteRuleTokenStream(adaptor,"token SELECT");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_groupByListExpr=new RewriteRuleSubtreeStream(adaptor,"rule groupByListExpr");
        RewriteRuleSubtreeStream stream_insertIntoExpr=new RewriteRuleSubtreeStream(adaptor,"rule insertIntoExpr");
        RewriteRuleSubtreeStream stream_orderByListExpr=new RewriteRuleSubtreeStream(adaptor,"rule orderByListExpr");
        RewriteRuleSubtreeStream stream_selectionList=new RewriteRuleSubtreeStream(adaptor,"rule selectionList");
        RewriteRuleSubtreeStream stream_onExprFrom=new RewriteRuleSubtreeStream(adaptor,"rule onExprFrom");
        RewriteRuleSubtreeStream stream_havingClause=new RewriteRuleSubtreeStream(adaptor,"rule havingClause");
         paraphrases.push("on-select clause"); 
        try {
            // EsperEPL2Grammar.g:555:2: ( ( INSERT insertIntoExpr )? SELECT selectionList onExprFrom ( WHERE whereClause )? ( GROUP BY groupByListExpr )? ( HAVING havingClause )? ( ORDER BY orderByListExpr )? -> ^( ON_SELECT_EXPR ( insertIntoExpr )? selectionList onExprFrom ( whereClause )? ( groupByListExpr )? ( havingClause )? ( orderByListExpr )? ) )
            // EsperEPL2Grammar.g:555:4: ( INSERT insertIntoExpr )? SELECT selectionList onExprFrom ( WHERE whereClause )? ( GROUP BY groupByListExpr )? ( HAVING havingClause )? ( ORDER BY orderByListExpr )?
            {
            // EsperEPL2Grammar.g:555:4: ( INSERT insertIntoExpr )?
            int alt22=2;
            int LA22_0 = input.LA(1);

            if ( (LA22_0==INSERT) ) {
                alt22=1;
            }
            switch (alt22) {
                case 1 :
                    // EsperEPL2Grammar.g:555:5: INSERT insertIntoExpr
                    {
                    INSERT61=(Token)match(input,INSERT,FOLLOW_INSERT_in_onSelectExpr1914); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INSERT.add(INSERT61);

                    pushFollow(FOLLOW_insertIntoExpr_in_onSelectExpr1916);
                    insertIntoExpr62=insertIntoExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_insertIntoExpr.add(insertIntoExpr62.getTree());

                    }
                    break;

            }

            SELECT63=(Token)match(input,SELECT,FOLLOW_SELECT_in_onSelectExpr1922); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SELECT.add(SELECT63);

            pushFollow(FOLLOW_selectionList_in_onSelectExpr1924);
            selectionList64=selectionList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_selectionList.add(selectionList64.getTree());
            pushFollow(FOLLOW_onExprFrom_in_onSelectExpr1928);
            onExprFrom65=onExprFrom();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_onExprFrom.add(onExprFrom65.getTree());
            // EsperEPL2Grammar.g:558:3: ( WHERE whereClause )?
            int alt23=2;
            int LA23_0 = input.LA(1);

            if ( (LA23_0==WHERE) ) {
                alt23=1;
            }
            switch (alt23) {
                case 1 :
                    // EsperEPL2Grammar.g:558:4: WHERE whereClause
                    {
                    WHERE66=(Token)match(input,WHERE,FOLLOW_WHERE_in_onSelectExpr1933); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE66);

                    pushFollow(FOLLOW_whereClause_in_onSelectExpr1935);
                    whereClause67=whereClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause67.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:559:3: ( GROUP BY groupByListExpr )?
            int alt24=2;
            int LA24_0 = input.LA(1);

            if ( (LA24_0==GROUP) ) {
                alt24=1;
            }
            switch (alt24) {
                case 1 :
                    // EsperEPL2Grammar.g:559:4: GROUP BY groupByListExpr
                    {
                    GROUP68=(Token)match(input,GROUP,FOLLOW_GROUP_in_onSelectExpr1944); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_GROUP.add(GROUP68);

                    BY69=(Token)match(input,BY,FOLLOW_BY_in_onSelectExpr1946); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BY.add(BY69);

                    pushFollow(FOLLOW_groupByListExpr_in_onSelectExpr1948);
                    groupByListExpr70=groupByListExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_groupByListExpr.add(groupByListExpr70.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:560:3: ( HAVING havingClause )?
            int alt25=2;
            int LA25_0 = input.LA(1);

            if ( (LA25_0==HAVING) ) {
                alt25=1;
            }
            switch (alt25) {
                case 1 :
                    // EsperEPL2Grammar.g:560:4: HAVING havingClause
                    {
                    HAVING71=(Token)match(input,HAVING,FOLLOW_HAVING_in_onSelectExpr1955); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_HAVING.add(HAVING71);

                    pushFollow(FOLLOW_havingClause_in_onSelectExpr1957);
                    havingClause72=havingClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_havingClause.add(havingClause72.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:561:3: ( ORDER BY orderByListExpr )?
            int alt26=2;
            int LA26_0 = input.LA(1);

            if ( (LA26_0==ORDER) ) {
                alt26=1;
            }
            switch (alt26) {
                case 1 :
                    // EsperEPL2Grammar.g:561:4: ORDER BY orderByListExpr
                    {
                    ORDER73=(Token)match(input,ORDER,FOLLOW_ORDER_in_onSelectExpr1964); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ORDER.add(ORDER73);

                    BY74=(Token)match(input,BY,FOLLOW_BY_in_onSelectExpr1966); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BY.add(BY74);

                    pushFollow(FOLLOW_orderByListExpr_in_onSelectExpr1968);
                    orderByListExpr75=orderByListExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_orderByListExpr.add(orderByListExpr75.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: insertIntoExpr, havingClause, selectionList, onExprFrom, whereClause, orderByListExpr, groupByListExpr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 562:3: -> ^( ON_SELECT_EXPR ( insertIntoExpr )? selectionList onExprFrom ( whereClause )? ( groupByListExpr )? ( havingClause )? ( orderByListExpr )? )
            {
                // EsperEPL2Grammar.g:562:6: ^( ON_SELECT_EXPR ( insertIntoExpr )? selectionList onExprFrom ( whereClause )? ( groupByListExpr )? ( havingClause )? ( orderByListExpr )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_SELECT_EXPR, "ON_SELECT_EXPR"), root_1);

                // EsperEPL2Grammar.g:562:23: ( insertIntoExpr )?
                if ( stream_insertIntoExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_insertIntoExpr.nextTree());

                }
                stream_insertIntoExpr.reset();
                adaptor.addChild(root_1, stream_selectionList.nextTree());
                adaptor.addChild(root_1, stream_onExprFrom.nextTree());
                // EsperEPL2Grammar.g:562:64: ( whereClause )?
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());

                }
                stream_whereClause.reset();
                // EsperEPL2Grammar.g:562:77: ( groupByListExpr )?
                if ( stream_groupByListExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_groupByListExpr.nextTree());

                }
                stream_groupByListExpr.reset();
                // EsperEPL2Grammar.g:562:94: ( havingClause )?
                if ( stream_havingClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_havingClause.nextTree());

                }
                stream_havingClause.reset();
                // EsperEPL2Grammar.g:562:108: ( orderByListExpr )?
                if ( stream_orderByListExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_orderByListExpr.nextTree());

                }
                stream_orderByListExpr.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "onSelectExpr"

    public static class onDeleteExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "onDeleteExpr"
    // EsperEPL2Grammar.g:565:1: onDeleteExpr : DELETE onExprFrom ( WHERE whereClause )? -> ^( ON_DELETE_EXPR onExprFrom ( whereClause )? ) ;
    public final EsperEPL2GrammarParser.onDeleteExpr_return onDeleteExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onDeleteExpr_return retval = new EsperEPL2GrammarParser.onDeleteExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token DELETE76=null;
        Token WHERE78=null;
        EsperEPL2GrammarParser.onExprFrom_return onExprFrom77 = null;

        EsperEPL2GrammarParser.whereClause_return whereClause79 = null;


        CommonTree DELETE76_tree=null;
        CommonTree WHERE78_tree=null;
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_DELETE=new RewriteRuleTokenStream(adaptor,"token DELETE");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_onExprFrom=new RewriteRuleSubtreeStream(adaptor,"rule onExprFrom");
         paraphrases.push("on-delete clause"); 
        try {
            // EsperEPL2Grammar.g:568:2: ( DELETE onExprFrom ( WHERE whereClause )? -> ^( ON_DELETE_EXPR onExprFrom ( whereClause )? ) )
            // EsperEPL2Grammar.g:568:4: DELETE onExprFrom ( WHERE whereClause )?
            {
            DELETE76=(Token)match(input,DELETE,FOLLOW_DELETE_in_onDeleteExpr2021); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DELETE.add(DELETE76);

            pushFollow(FOLLOW_onExprFrom_in_onDeleteExpr2025);
            onExprFrom77=onExprFrom();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_onExprFrom.add(onExprFrom77.getTree());
            // EsperEPL2Grammar.g:570:3: ( WHERE whereClause )?
            int alt27=2;
            int LA27_0 = input.LA(1);

            if ( (LA27_0==WHERE) ) {
                alt27=1;
            }
            switch (alt27) {
                case 1 :
                    // EsperEPL2Grammar.g:570:4: WHERE whereClause
                    {
                    WHERE78=(Token)match(input,WHERE,FOLLOW_WHERE_in_onDeleteExpr2030); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE78);

                    pushFollow(FOLLOW_whereClause_in_onDeleteExpr2032);
                    whereClause79=whereClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause79.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: whereClause, onExprFrom
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 571:3: -> ^( ON_DELETE_EXPR onExprFrom ( whereClause )? )
            {
                // EsperEPL2Grammar.g:571:6: ^( ON_DELETE_EXPR onExprFrom ( whereClause )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_DELETE_EXPR, "ON_DELETE_EXPR"), root_1);

                adaptor.addChild(root_1, stream_onExprFrom.nextTree());
                // EsperEPL2Grammar.g:571:34: ( whereClause )?
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());

                }
                stream_whereClause.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "onDeleteExpr"

    public static class onSetExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "onSetExpr"
    // EsperEPL2Grammar.g:574:1: onSetExpr : SET onSetAssignment ( COMMA onSetAssignment )* -> ^( ON_SET_EXPR ( onSetAssignment )+ ) ;
    public final EsperEPL2GrammarParser.onSetExpr_return onSetExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onSetExpr_return retval = new EsperEPL2GrammarParser.onSetExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token SET80=null;
        Token COMMA82=null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment81 = null;

        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment83 = null;


        CommonTree SET80_tree=null;
        CommonTree COMMA82_tree=null;
        RewriteRuleTokenStream stream_SET=new RewriteRuleTokenStream(adaptor,"token SET");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_onSetAssignment=new RewriteRuleSubtreeStream(adaptor,"rule onSetAssignment");
         paraphrases.push("on-set clause"); 
        try {
            // EsperEPL2Grammar.g:577:2: ( SET onSetAssignment ( COMMA onSetAssignment )* -> ^( ON_SET_EXPR ( onSetAssignment )+ ) )
            // EsperEPL2Grammar.g:577:4: SET onSetAssignment ( COMMA onSetAssignment )*
            {
            SET80=(Token)match(input,SET,FOLLOW_SET_in_onSetExpr2072); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SET.add(SET80);

            pushFollow(FOLLOW_onSetAssignment_in_onSetExpr2074);
            onSetAssignment81=onSetAssignment();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment81.getTree());
            // EsperEPL2Grammar.g:577:24: ( COMMA onSetAssignment )*
            loop28:
            do {
                int alt28=2;
                int LA28_0 = input.LA(1);

                if ( (LA28_0==COMMA) ) {
                    alt28=1;
                }


                switch (alt28) {
            	case 1 :
            	    // EsperEPL2Grammar.g:577:25: COMMA onSetAssignment
            	    {
            	    COMMA82=(Token)match(input,COMMA,FOLLOW_COMMA_in_onSetExpr2077); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA82);

            	    pushFollow(FOLLOW_onSetAssignment_in_onSetExpr2079);
            	    onSetAssignment83=onSetAssignment();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment83.getTree());

            	    }
            	    break;

            	default :
            	    break loop28;
                }
            } while (true);



            // AST REWRITE
            // elements: onSetAssignment
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 578:3: -> ^( ON_SET_EXPR ( onSetAssignment )+ )
            {
                // EsperEPL2Grammar.g:578:6: ^( ON_SET_EXPR ( onSetAssignment )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_SET_EXPR, "ON_SET_EXPR"), root_1);

                if ( !(stream_onSetAssignment.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_onSetAssignment.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetAssignment.nextTree());

                }
                stream_onSetAssignment.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "onSetExpr"

    public static class onSetAssignment_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "onSetAssignment"
    // EsperEPL2Grammar.g:581:1: onSetAssignment : IDENT EQUALS expression ;
    public final EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment() throws RecognitionException {
        EsperEPL2GrammarParser.onSetAssignment_return retval = new EsperEPL2GrammarParser.onSetAssignment_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token IDENT84=null;
        Token EQUALS85=null;
        EsperEPL2GrammarParser.expression_return expression86 = null;


        CommonTree IDENT84_tree=null;
        CommonTree EQUALS85_tree=null;

        try {
            // EsperEPL2Grammar.g:582:2: ( IDENT EQUALS expression )
            // EsperEPL2Grammar.g:582:4: IDENT EQUALS expression
            {
            root_0 = (CommonTree)adaptor.nil();

            IDENT84=(Token)match(input,IDENT,FOLLOW_IDENT_in_onSetAssignment2104); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IDENT84_tree = (CommonTree)adaptor.create(IDENT84);
            adaptor.addChild(root_0, IDENT84_tree);
            }
            EQUALS85=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_onSetAssignment2106); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_onSetAssignment2109);
            expression86=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression86.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "onSetAssignment"

    public static class onExprFrom_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "onExprFrom"
    // EsperEPL2Grammar.g:585:1: onExprFrom : FROM n= IDENT ( AS i= IDENT | i= IDENT )? -> ^( ON_EXPR_FROM $n ( $i)? ) ;
    public final EsperEPL2GrammarParser.onExprFrom_return onExprFrom() throws RecognitionException {
        EsperEPL2GrammarParser.onExprFrom_return retval = new EsperEPL2GrammarParser.onExprFrom_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token n=null;
        Token i=null;
        Token FROM87=null;
        Token AS88=null;

        CommonTree n_tree=null;
        CommonTree i_tree=null;
        CommonTree FROM87_tree=null;
        CommonTree AS88_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_FROM=new RewriteRuleTokenStream(adaptor,"token FROM");

        try {
            // EsperEPL2Grammar.g:586:2: ( FROM n= IDENT ( AS i= IDENT | i= IDENT )? -> ^( ON_EXPR_FROM $n ( $i)? ) )
            // EsperEPL2Grammar.g:586:4: FROM n= IDENT ( AS i= IDENT | i= IDENT )?
            {
            FROM87=(Token)match(input,FROM,FOLLOW_FROM_in_onExprFrom2122); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_FROM.add(FROM87);

            n=(Token)match(input,IDENT,FOLLOW_IDENT_in_onExprFrom2126); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(n);

            // EsperEPL2Grammar.g:586:17: ( AS i= IDENT | i= IDENT )?
            int alt29=3;
            int LA29_0 = input.LA(1);

            if ( (LA29_0==AS) ) {
                alt29=1;
            }
            else if ( (LA29_0==IDENT) ) {
                alt29=2;
            }
            switch (alt29) {
                case 1 :
                    // EsperEPL2Grammar.g:586:18: AS i= IDENT
                    {
                    AS88=(Token)match(input,AS,FOLLOW_AS_in_onExprFrom2129); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS88);

                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onExprFrom2133); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:586:31: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onExprFrom2139); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;

            }



            // AST REWRITE
            // elements: i, n
            // token labels: n, i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_n=new RewriteRuleTokenStream(adaptor,"token n",n);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 587:3: -> ^( ON_EXPR_FROM $n ( $i)? )
            {
                // EsperEPL2Grammar.g:587:6: ^( ON_EXPR_FROM $n ( $i)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_EXPR_FROM, "ON_EXPR_FROM"), root_1);

                adaptor.addChild(root_1, stream_n.nextNode());
                // EsperEPL2Grammar.g:587:24: ( $i)?
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());

                }
                stream_i.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "onExprFrom"

    public static class createWindowExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "createWindowExpr"
    // EsperEPL2Grammar.g:590:1: createWindowExpr : CREATE WINDOW i= IDENT ( DOT viewExpression ( DOT viewExpression )* )? (ru= RETAINUNION | ri= RETAININTERSECTION )? ( AS )? ( createWindowExprModelAfter | LPAREN createWindowColumnList RPAREN ) (i1= INSERT ( WHERE expression )? )? -> {i1 != null}? ^( CREATE_WINDOW_EXPR $i ( viewExpression )* ( $ru)? ( $ri)? ( createWindowExprModelAfter )? ( createWindowColumnList )? ^( INSERT ( expression )? ) ) -> ^( CREATE_WINDOW_EXPR $i ( viewExpression )* ( $ru)? ( $ri)? ( createWindowExprModelAfter )? ( createWindowColumnList )? ) ;
    public final EsperEPL2GrammarParser.createWindowExpr_return createWindowExpr() throws RecognitionException {
        EsperEPL2GrammarParser.createWindowExpr_return retval = new EsperEPL2GrammarParser.createWindowExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token ru=null;
        Token ri=null;
        Token i1=null;
        Token CREATE89=null;
        Token WINDOW90=null;
        Token DOT91=null;
        Token DOT93=null;
        Token AS95=null;
        Token LPAREN97=null;
        Token RPAREN99=null;
        Token WHERE100=null;
        EsperEPL2GrammarParser.viewExpression_return viewExpression92 = null;

        EsperEPL2GrammarParser.viewExpression_return viewExpression94 = null;

        EsperEPL2GrammarParser.createWindowExprModelAfter_return createWindowExprModelAfter96 = null;

        EsperEPL2GrammarParser.createWindowColumnList_return createWindowColumnList98 = null;

        EsperEPL2GrammarParser.expression_return expression101 = null;


        CommonTree i_tree=null;
        CommonTree ru_tree=null;
        CommonTree ri_tree=null;
        CommonTree i1_tree=null;
        CommonTree CREATE89_tree=null;
        CommonTree WINDOW90_tree=null;
        CommonTree DOT91_tree=null;
        CommonTree DOT93_tree=null;
        CommonTree AS95_tree=null;
        CommonTree LPAREN97_tree=null;
        CommonTree RPAREN99_tree=null;
        CommonTree WHERE100_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_CREATE=new RewriteRuleTokenStream(adaptor,"token CREATE");
        RewriteRuleTokenStream stream_WINDOW=new RewriteRuleTokenStream(adaptor,"token WINDOW");
        RewriteRuleTokenStream stream_RETAINUNION=new RewriteRuleTokenStream(adaptor,"token RETAINUNION");
        RewriteRuleTokenStream stream_RETAININTERSECTION=new RewriteRuleTokenStream(adaptor,"token RETAININTERSECTION");
        RewriteRuleTokenStream stream_INSERT=new RewriteRuleTokenStream(adaptor,"token INSERT");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_createWindowExprModelAfter=new RewriteRuleSubtreeStream(adaptor,"rule createWindowExprModelAfter");
        RewriteRuleSubtreeStream stream_viewExpression=new RewriteRuleSubtreeStream(adaptor,"rule viewExpression");
        RewriteRuleSubtreeStream stream_createWindowColumnList=new RewriteRuleSubtreeStream(adaptor,"rule createWindowColumnList");
        try {
            // EsperEPL2Grammar.g:591:2: ( CREATE WINDOW i= IDENT ( DOT viewExpression ( DOT viewExpression )* )? (ru= RETAINUNION | ri= RETAININTERSECTION )? ( AS )? ( createWindowExprModelAfter | LPAREN createWindowColumnList RPAREN ) (i1= INSERT ( WHERE expression )? )? -> {i1 != null}? ^( CREATE_WINDOW_EXPR $i ( viewExpression )* ( $ru)? ( $ri)? ( createWindowExprModelAfter )? ( createWindowColumnList )? ^( INSERT ( expression )? ) ) -> ^( CREATE_WINDOW_EXPR $i ( viewExpression )* ( $ru)? ( $ri)? ( createWindowExprModelAfter )? ( createWindowColumnList )? ) )
            // EsperEPL2Grammar.g:591:4: CREATE WINDOW i= IDENT ( DOT viewExpression ( DOT viewExpression )* )? (ru= RETAINUNION | ri= RETAININTERSECTION )? ( AS )? ( createWindowExprModelAfter | LPAREN createWindowColumnList RPAREN ) (i1= INSERT ( WHERE expression )? )?
            {
            CREATE89=(Token)match(input,CREATE,FOLLOW_CREATE_in_createWindowExpr2167); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CREATE.add(CREATE89);

            WINDOW90=(Token)match(input,WINDOW,FOLLOW_WINDOW_in_createWindowExpr2169); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_WINDOW.add(WINDOW90);

            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_createWindowExpr2173); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);

            // EsperEPL2Grammar.g:591:26: ( DOT viewExpression ( DOT viewExpression )* )?
            int alt31=2;
            int LA31_0 = input.LA(1);

            if ( (LA31_0==DOT) ) {
                alt31=1;
            }
            switch (alt31) {
                case 1 :
                    // EsperEPL2Grammar.g:591:27: DOT viewExpression ( DOT viewExpression )*
                    {
                    DOT91=(Token)match(input,DOT,FOLLOW_DOT_in_createWindowExpr2176); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT91);

                    pushFollow(FOLLOW_viewExpression_in_createWindowExpr2178);
                    viewExpression92=viewExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression92.getTree());
                    // EsperEPL2Grammar.g:591:46: ( DOT viewExpression )*
                    loop30:
                    do {
                        int alt30=2;
                        int LA30_0 = input.LA(1);

                        if ( (LA30_0==DOT) ) {
                            alt30=1;
                        }


                        switch (alt30) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:591:47: DOT viewExpression
                    	    {
                    	    DOT93=(Token)match(input,DOT,FOLLOW_DOT_in_createWindowExpr2181); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_DOT.add(DOT93);

                    	    pushFollow(FOLLOW_viewExpression_in_createWindowExpr2183);
                    	    viewExpression94=viewExpression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression94.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop30;
                        }
                    } while (true);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:591:70: (ru= RETAINUNION | ri= RETAININTERSECTION )?
            int alt32=3;
            int LA32_0 = input.LA(1);

            if ( (LA32_0==RETAINUNION) ) {
                alt32=1;
            }
            else if ( (LA32_0==RETAININTERSECTION) ) {
                alt32=2;
            }
            switch (alt32) {
                case 1 :
                    // EsperEPL2Grammar.g:591:71: ru= RETAINUNION
                    {
                    ru=(Token)match(input,RETAINUNION,FOLLOW_RETAINUNION_in_createWindowExpr2192); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAINUNION.add(ru);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:591:86: ri= RETAININTERSECTION
                    {
                    ri=(Token)match(input,RETAININTERSECTION,FOLLOW_RETAININTERSECTION_in_createWindowExpr2196); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAININTERSECTION.add(ri);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:591:110: ( AS )?
            int alt33=2;
            int LA33_0 = input.LA(1);

            if ( (LA33_0==AS) ) {
                alt33=1;
            }
            switch (alt33) {
                case 1 :
                    // EsperEPL2Grammar.g:591:110: AS
                    {
                    AS95=(Token)match(input,AS,FOLLOW_AS_in_createWindowExpr2200); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS95);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:592:5: ( createWindowExprModelAfter | LPAREN createWindowColumnList RPAREN )
            int alt34=2;
            int LA34_0 = input.LA(1);

            if ( (LA34_0==SELECT||LA34_0==IDENT||LA34_0==TICKED_STRING_LITERAL) ) {
                alt34=1;
            }
            else if ( (LA34_0==LPAREN) ) {
                alt34=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 34, 0, input);

                throw nvae;
            }
            switch (alt34) {
                case 1 :
                    // EsperEPL2Grammar.g:593:6: createWindowExprModelAfter
                    {
                    pushFollow(FOLLOW_createWindowExprModelAfter_in_createWindowExpr2215);
                    createWindowExprModelAfter96=createWindowExprModelAfter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_createWindowExprModelAfter.add(createWindowExprModelAfter96.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:594:10: LPAREN createWindowColumnList RPAREN
                    {
                    LPAREN97=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_createWindowExpr2230); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN97);

                    pushFollow(FOLLOW_createWindowColumnList_in_createWindowExpr2232);
                    createWindowColumnList98=createWindowColumnList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_createWindowColumnList.add(createWindowColumnList98.getTree());
                    RPAREN99=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_createWindowExpr2234); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN99);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:596:5: (i1= INSERT ( WHERE expression )? )?
            int alt36=2;
            int LA36_0 = input.LA(1);

            if ( (LA36_0==INSERT) ) {
                alt36=1;
            }
            switch (alt36) {
                case 1 :
                    // EsperEPL2Grammar.g:596:6: i1= INSERT ( WHERE expression )?
                    {
                    i1=(Token)match(input,INSERT,FOLLOW_INSERT_in_createWindowExpr2251); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INSERT.add(i1);

                    // EsperEPL2Grammar.g:596:16: ( WHERE expression )?
                    int alt35=2;
                    int LA35_0 = input.LA(1);

                    if ( (LA35_0==WHERE) ) {
                        alt35=1;
                    }
                    switch (alt35) {
                        case 1 :
                            // EsperEPL2Grammar.g:596:17: WHERE expression
                            {
                            WHERE100=(Token)match(input,WHERE,FOLLOW_WHERE_in_createWindowExpr2254); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_WHERE.add(WHERE100);

                            pushFollow(FOLLOW_expression_in_createWindowExpr2256);
                            expression101=expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(expression101.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }



            // AST REWRITE
            // elements: viewExpression, createWindowExprModelAfter, expression, viewExpression, INSERT, ri, ri, ru, createWindowColumnList, i, ru, i, createWindowExprModelAfter, createWindowColumnList
            // token labels: ri, ru, i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_ri=new RewriteRuleTokenStream(adaptor,"token ri",ri);
            RewriteRuleTokenStream stream_ru=new RewriteRuleTokenStream(adaptor,"token ru",ru);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 597:3: -> {i1 != null}? ^( CREATE_WINDOW_EXPR $i ( viewExpression )* ( $ru)? ( $ri)? ( createWindowExprModelAfter )? ( createWindowColumnList )? ^( INSERT ( expression )? ) )
            if (i1 != null) {
                // EsperEPL2Grammar.g:597:20: ^( CREATE_WINDOW_EXPR $i ( viewExpression )* ( $ru)? ( $ri)? ( createWindowExprModelAfter )? ( createWindowColumnList )? ^( INSERT ( expression )? ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_WINDOW_EXPR, "CREATE_WINDOW_EXPR"), root_1);

                adaptor.addChild(root_1, stream_i.nextNode());
                // EsperEPL2Grammar.g:597:44: ( viewExpression )*
                while ( stream_viewExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_viewExpression.nextTree());

                }
                stream_viewExpression.reset();
                // EsperEPL2Grammar.g:597:60: ( $ru)?
                if ( stream_ru.hasNext() ) {
                    adaptor.addChild(root_1, stream_ru.nextNode());

                }
                stream_ru.reset();
                // EsperEPL2Grammar.g:597:65: ( $ri)?
                if ( stream_ri.hasNext() ) {
                    adaptor.addChild(root_1, stream_ri.nextNode());

                }
                stream_ri.reset();
                // EsperEPL2Grammar.g:597:70: ( createWindowExprModelAfter )?
                if ( stream_createWindowExprModelAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_createWindowExprModelAfter.nextTree());

                }
                stream_createWindowExprModelAfter.reset();
                // EsperEPL2Grammar.g:597:98: ( createWindowColumnList )?
                if ( stream_createWindowColumnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_createWindowColumnList.nextTree());

                }
                stream_createWindowColumnList.reset();
                // EsperEPL2Grammar.g:598:5: ^( INSERT ( expression )? )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot(stream_INSERT.nextNode(), root_2);

                // EsperEPL2Grammar.g:598:14: ( expression )?
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_2, stream_expression.nextTree());

                }
                stream_expression.reset();

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 599:3: -> ^( CREATE_WINDOW_EXPR $i ( viewExpression )* ( $ru)? ( $ri)? ( createWindowExprModelAfter )? ( createWindowColumnList )? )
            {
                // EsperEPL2Grammar.g:599:6: ^( CREATE_WINDOW_EXPR $i ( viewExpression )* ( $ru)? ( $ri)? ( createWindowExprModelAfter )? ( createWindowColumnList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_WINDOW_EXPR, "CREATE_WINDOW_EXPR"), root_1);

                adaptor.addChild(root_1, stream_i.nextNode());
                // EsperEPL2Grammar.g:599:30: ( viewExpression )*
                while ( stream_viewExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_viewExpression.nextTree());

                }
                stream_viewExpression.reset();
                // EsperEPL2Grammar.g:599:46: ( $ru)?
                if ( stream_ru.hasNext() ) {
                    adaptor.addChild(root_1, stream_ru.nextNode());

                }
                stream_ru.reset();
                // EsperEPL2Grammar.g:599:51: ( $ri)?
                if ( stream_ri.hasNext() ) {
                    adaptor.addChild(root_1, stream_ri.nextNode());

                }
                stream_ri.reset();
                // EsperEPL2Grammar.g:599:56: ( createWindowExprModelAfter )?
                if ( stream_createWindowExprModelAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_createWindowExprModelAfter.nextTree());

                }
                stream_createWindowExprModelAfter.reset();
                // EsperEPL2Grammar.g:599:84: ( createWindowColumnList )?
                if ( stream_createWindowColumnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_createWindowColumnList.nextTree());

                }
                stream_createWindowColumnList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "createWindowExpr"

    public static class createWindowExprModelAfter_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "createWindowExprModelAfter"
    // EsperEPL2Grammar.g:602:1: createWindowExprModelAfter : ( SELECT createSelectionList FROM )? classIdentifier ;
    public final EsperEPL2GrammarParser.createWindowExprModelAfter_return createWindowExprModelAfter() throws RecognitionException {
        EsperEPL2GrammarParser.createWindowExprModelAfter_return retval = new EsperEPL2GrammarParser.createWindowExprModelAfter_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token SELECT102=null;
        Token FROM104=null;
        EsperEPL2GrammarParser.createSelectionList_return createSelectionList103 = null;

        EsperEPL2GrammarParser.classIdentifier_return classIdentifier105 = null;


        CommonTree SELECT102_tree=null;
        CommonTree FROM104_tree=null;

        try {
            // EsperEPL2Grammar.g:603:2: ( ( SELECT createSelectionList FROM )? classIdentifier )
            // EsperEPL2Grammar.g:603:4: ( SELECT createSelectionList FROM )? classIdentifier
            {
            root_0 = (CommonTree)adaptor.nil();

            // EsperEPL2Grammar.g:603:4: ( SELECT createSelectionList FROM )?
            int alt37=2;
            int LA37_0 = input.LA(1);

            if ( (LA37_0==SELECT) ) {
                alt37=1;
            }
            switch (alt37) {
                case 1 :
                    // EsperEPL2Grammar.g:603:5: SELECT createSelectionList FROM
                    {
                    SELECT102=(Token)match(input,SELECT,FOLLOW_SELECT_in_createWindowExprModelAfter2343); if (state.failed) return retval;
                    pushFollow(FOLLOW_createSelectionList_in_createWindowExprModelAfter2346);
                    createSelectionList103=createSelectionList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createSelectionList103.getTree());
                    FROM104=(Token)match(input,FROM,FOLLOW_FROM_in_createWindowExprModelAfter2348); if (state.failed) return retval;

                    }
                    break;

            }

            pushFollow(FOLLOW_classIdentifier_in_createWindowExprModelAfter2353);
            classIdentifier105=classIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier105.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "createWindowExprModelAfter"

    public static class createVariableExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "createVariableExpr"
    // EsperEPL2Grammar.g:606:1: createVariableExpr : CREATE VARIABLE t= IDENT n= IDENT ( EQUALS expression )? -> ^( CREATE_VARIABLE_EXPR $t $n ( expression )? ) ;
    public final EsperEPL2GrammarParser.createVariableExpr_return createVariableExpr() throws RecognitionException {
        EsperEPL2GrammarParser.createVariableExpr_return retval = new EsperEPL2GrammarParser.createVariableExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token t=null;
        Token n=null;
        Token CREATE106=null;
        Token VARIABLE107=null;
        Token EQUALS108=null;
        EsperEPL2GrammarParser.expression_return expression109 = null;


        CommonTree t_tree=null;
        CommonTree n_tree=null;
        CommonTree CREATE106_tree=null;
        CommonTree VARIABLE107_tree=null;
        CommonTree EQUALS108_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_CREATE=new RewriteRuleTokenStream(adaptor,"token CREATE");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleTokenStream stream_VARIABLE=new RewriteRuleTokenStream(adaptor,"token VARIABLE");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            // EsperEPL2Grammar.g:607:2: ( CREATE VARIABLE t= IDENT n= IDENT ( EQUALS expression )? -> ^( CREATE_VARIABLE_EXPR $t $n ( expression )? ) )
            // EsperEPL2Grammar.g:607:4: CREATE VARIABLE t= IDENT n= IDENT ( EQUALS expression )?
            {
            CREATE106=(Token)match(input,CREATE,FOLLOW_CREATE_in_createVariableExpr2366); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CREATE.add(CREATE106);

            VARIABLE107=(Token)match(input,VARIABLE,FOLLOW_VARIABLE_in_createVariableExpr2368); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_VARIABLE.add(VARIABLE107);

            t=(Token)match(input,IDENT,FOLLOW_IDENT_in_createVariableExpr2372); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(t);

            n=(Token)match(input,IDENT,FOLLOW_IDENT_in_createVariableExpr2376); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(n);

            // EsperEPL2Grammar.g:607:36: ( EQUALS expression )?
            int alt38=2;
            int LA38_0 = input.LA(1);

            if ( (LA38_0==EQUALS) ) {
                alt38=1;
            }
            switch (alt38) {
                case 1 :
                    // EsperEPL2Grammar.g:607:37: EQUALS expression
                    {
                    EQUALS108=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_createVariableExpr2379); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS108);

                    pushFollow(FOLLOW_expression_in_createVariableExpr2381);
                    expression109=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression109.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: n, t, expression
            // token labels: t, n
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_t=new RewriteRuleTokenStream(adaptor,"token t",t);
            RewriteRuleTokenStream stream_n=new RewriteRuleTokenStream(adaptor,"token n",n);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 608:3: -> ^( CREATE_VARIABLE_EXPR $t $n ( expression )? )
            {
                // EsperEPL2Grammar.g:608:6: ^( CREATE_VARIABLE_EXPR $t $n ( expression )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_VARIABLE_EXPR, "CREATE_VARIABLE_EXPR"), root_1);

                adaptor.addChild(root_1, stream_t.nextNode());
                adaptor.addChild(root_1, stream_n.nextNode());
                // EsperEPL2Grammar.g:608:35: ( expression )?
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());

                }
                stream_expression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "createVariableExpr"

    public static class createWindowColumnList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "createWindowColumnList"
    // EsperEPL2Grammar.g:611:1: createWindowColumnList : createWindowColumnListElement ( COMMA createWindowColumnListElement )* -> ^( CREATE_WINDOW_COL_TYPE_LIST ( createWindowColumnListElement )+ ) ;
    public final EsperEPL2GrammarParser.createWindowColumnList_return createWindowColumnList() throws RecognitionException {
        EsperEPL2GrammarParser.createWindowColumnList_return retval = new EsperEPL2GrammarParser.createWindowColumnList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA111=null;
        EsperEPL2GrammarParser.createWindowColumnListElement_return createWindowColumnListElement110 = null;

        EsperEPL2GrammarParser.createWindowColumnListElement_return createWindowColumnListElement112 = null;


        CommonTree COMMA111_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_createWindowColumnListElement=new RewriteRuleSubtreeStream(adaptor,"rule createWindowColumnListElement");
         paraphrases.push("create window column list"); 
        try {
            // EsperEPL2Grammar.g:614:2: ( createWindowColumnListElement ( COMMA createWindowColumnListElement )* -> ^( CREATE_WINDOW_COL_TYPE_LIST ( createWindowColumnListElement )+ ) )
            // EsperEPL2Grammar.g:614:4: createWindowColumnListElement ( COMMA createWindowColumnListElement )*
            {
            pushFollow(FOLLOW_createWindowColumnListElement_in_createWindowColumnList2424);
            createWindowColumnListElement110=createWindowColumnListElement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_createWindowColumnListElement.add(createWindowColumnListElement110.getTree());
            // EsperEPL2Grammar.g:614:34: ( COMMA createWindowColumnListElement )*
            loop39:
            do {
                int alt39=2;
                int LA39_0 = input.LA(1);

                if ( (LA39_0==COMMA) ) {
                    alt39=1;
                }


                switch (alt39) {
            	case 1 :
            	    // EsperEPL2Grammar.g:614:35: COMMA createWindowColumnListElement
            	    {
            	    COMMA111=(Token)match(input,COMMA,FOLLOW_COMMA_in_createWindowColumnList2427); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA111);

            	    pushFollow(FOLLOW_createWindowColumnListElement_in_createWindowColumnList2429);
            	    createWindowColumnListElement112=createWindowColumnListElement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_createWindowColumnListElement.add(createWindowColumnListElement112.getTree());

            	    }
            	    break;

            	default :
            	    break loop39;
                }
            } while (true);



            // AST REWRITE
            // elements: createWindowColumnListElement
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 615:3: -> ^( CREATE_WINDOW_COL_TYPE_LIST ( createWindowColumnListElement )+ )
            {
                // EsperEPL2Grammar.g:615:6: ^( CREATE_WINDOW_COL_TYPE_LIST ( createWindowColumnListElement )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_WINDOW_COL_TYPE_LIST, "CREATE_WINDOW_COL_TYPE_LIST"), root_1);

                if ( !(stream_createWindowColumnListElement.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_createWindowColumnListElement.hasNext() ) {
                    adaptor.addChild(root_1, stream_createWindowColumnListElement.nextTree());

                }
                stream_createWindowColumnListElement.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "createWindowColumnList"

    public static class createWindowColumnListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "createWindowColumnListElement"
    // EsperEPL2Grammar.g:618:1: createWindowColumnListElement : name= IDENT type= IDENT -> ^( CREATE_WINDOW_COL_TYPE $name $type) ;
    public final EsperEPL2GrammarParser.createWindowColumnListElement_return createWindowColumnListElement() throws RecognitionException {
        EsperEPL2GrammarParser.createWindowColumnListElement_return retval = new EsperEPL2GrammarParser.createWindowColumnListElement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token name=null;
        Token type=null;

        CommonTree name_tree=null;
        CommonTree type_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");

        try {
            // EsperEPL2Grammar.g:619:2: (name= IDENT type= IDENT -> ^( CREATE_WINDOW_COL_TYPE $name $type) )
            // EsperEPL2Grammar.g:619:7: name= IDENT type= IDENT
            {
            name=(Token)match(input,IDENT,FOLLOW_IDENT_in_createWindowColumnListElement2459); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(name);

            type=(Token)match(input,IDENT,FOLLOW_IDENT_in_createWindowColumnListElement2463); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(type);



            // AST REWRITE
            // elements: name, type
            // token labels: name, type
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_name=new RewriteRuleTokenStream(adaptor,"token name",name);
            RewriteRuleTokenStream stream_type=new RewriteRuleTokenStream(adaptor,"token type",type);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 620:3: -> ^( CREATE_WINDOW_COL_TYPE $name $type)
            {
                // EsperEPL2Grammar.g:620:6: ^( CREATE_WINDOW_COL_TYPE $name $type)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_WINDOW_COL_TYPE, "CREATE_WINDOW_COL_TYPE"), root_1);

                adaptor.addChild(root_1, stream_name.nextNode());
                adaptor.addChild(root_1, stream_type.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "createWindowColumnListElement"

    public static class createSelectionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "createSelectionList"
    // EsperEPL2Grammar.g:623:1: createSelectionList : createSelectionListElement ( COMMA createSelectionListElement )* -> ^( CREATE_WINDOW_SELECT_EXPR ( createSelectionListElement )+ ) ;
    public final EsperEPL2GrammarParser.createSelectionList_return createSelectionList() throws RecognitionException {
        EsperEPL2GrammarParser.createSelectionList_return retval = new EsperEPL2GrammarParser.createSelectionList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA114=null;
        EsperEPL2GrammarParser.createSelectionListElement_return createSelectionListElement113 = null;

        EsperEPL2GrammarParser.createSelectionListElement_return createSelectionListElement115 = null;


        CommonTree COMMA114_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_createSelectionListElement=new RewriteRuleSubtreeStream(adaptor,"rule createSelectionListElement");
         paraphrases.push("select clause"); 
        try {
            // EsperEPL2Grammar.g:626:2: ( createSelectionListElement ( COMMA createSelectionListElement )* -> ^( CREATE_WINDOW_SELECT_EXPR ( createSelectionListElement )+ ) )
            // EsperEPL2Grammar.g:626:4: createSelectionListElement ( COMMA createSelectionListElement )*
            {
            pushFollow(FOLLOW_createSelectionListElement_in_createSelectionList2501);
            createSelectionListElement113=createSelectionListElement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_createSelectionListElement.add(createSelectionListElement113.getTree());
            // EsperEPL2Grammar.g:626:31: ( COMMA createSelectionListElement )*
            loop40:
            do {
                int alt40=2;
                int LA40_0 = input.LA(1);

                if ( (LA40_0==COMMA) ) {
                    alt40=1;
                }


                switch (alt40) {
            	case 1 :
            	    // EsperEPL2Grammar.g:626:32: COMMA createSelectionListElement
            	    {
            	    COMMA114=(Token)match(input,COMMA,FOLLOW_COMMA_in_createSelectionList2504); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA114);

            	    pushFollow(FOLLOW_createSelectionListElement_in_createSelectionList2506);
            	    createSelectionListElement115=createSelectionListElement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_createSelectionListElement.add(createSelectionListElement115.getTree());

            	    }
            	    break;

            	default :
            	    break loop40;
                }
            } while (true);



            // AST REWRITE
            // elements: createSelectionListElement
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 627:3: -> ^( CREATE_WINDOW_SELECT_EXPR ( createSelectionListElement )+ )
            {
                // EsperEPL2Grammar.g:627:6: ^( CREATE_WINDOW_SELECT_EXPR ( createSelectionListElement )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_WINDOW_SELECT_EXPR, "CREATE_WINDOW_SELECT_EXPR"), root_1);

                if ( !(stream_createSelectionListElement.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_createSelectionListElement.hasNext() ) {
                    adaptor.addChild(root_1, stream_createSelectionListElement.nextTree());

                }
                stream_createSelectionListElement.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "createSelectionList"

    public static class createSelectionListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "createSelectionListElement"
    // EsperEPL2Grammar.g:630:1: createSelectionListElement : (s= STAR -> WILDCARD_SELECT[$s] | eventProperty ( AS i= IDENT )? -> ^( SELECTION_ELEMENT_EXPR eventProperty ( $i)? ) | constant AS i= IDENT -> ^( SELECTION_ELEMENT_EXPR constant ( $i)? ) );
    public final EsperEPL2GrammarParser.createSelectionListElement_return createSelectionListElement() throws RecognitionException {
        EsperEPL2GrammarParser.createSelectionListElement_return retval = new EsperEPL2GrammarParser.createSelectionListElement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token s=null;
        Token i=null;
        Token AS117=null;
        Token AS119=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty116 = null;

        EsperEPL2GrammarParser.constant_return constant118 = null;


        CommonTree s_tree=null;
        CommonTree i_tree=null;
        CommonTree AS117_tree=null;
        CommonTree AS119_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleSubtreeStream stream_constant=new RewriteRuleSubtreeStream(adaptor,"rule constant");
        RewriteRuleSubtreeStream stream_eventProperty=new RewriteRuleSubtreeStream(adaptor,"rule eventProperty");
        try {
            // EsperEPL2Grammar.g:631:2: (s= STAR -> WILDCARD_SELECT[$s] | eventProperty ( AS i= IDENT )? -> ^( SELECTION_ELEMENT_EXPR eventProperty ( $i)? ) | constant AS i= IDENT -> ^( SELECTION_ELEMENT_EXPR constant ( $i)? ) )
            int alt42=3;
            switch ( input.LA(1) ) {
            case STAR:
                {
                alt42=1;
                }
                break;
            case WINDOW:
            case ESCAPE:
            case EVERY_EXPR:
            case SUM:
            case AVG:
            case MAX:
            case MIN:
            case COALESCE:
            case MEDIAN:
            case STDDEV:
            case AVEDEV:
            case COUNT:
            case OUTER:
            case JOIN:
            case LEFT:
            case RIGHT:
            case FULL:
            case EVENTS:
            case FIRST:
            case LAST:
            case UNIDIRECTIONAL:
            case RETAINUNION:
            case RETAININTERSECTION:
            case PATTERN:
            case SQL:
            case METADATASQL:
            case PREVIOUS:
            case PRIOR:
            case WEEKDAY:
            case LW:
            case INSTANCEOF:
            case CAST:
            case SNAPSHOT:
            case VARIABLE:
            case UNTIL:
            case AT:
            case IDENT:
            case TICKED_STRING_LITERAL:
                {
                alt42=2;
                }
                break;
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case NUM_DOUBLE:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case PLUS:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt42=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 42, 0, input);

                throw nvae;
            }

            switch (alt42) {
                case 1 :
                    // EsperEPL2Grammar.g:631:7: s= STAR
                    {
                    s=(Token)match(input,STAR,FOLLOW_STAR_in_createSelectionListElement2535); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STAR.add(s);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 632:3: -> WILDCARD_SELECT[$s]
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(WILDCARD_SELECT, s));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:633:4: eventProperty ( AS i= IDENT )?
                    {
                    pushFollow(FOLLOW_eventProperty_in_createSelectionListElement2547);
                    eventProperty116=eventProperty();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_eventProperty.add(eventProperty116.getTree());
                    // EsperEPL2Grammar.g:633:18: ( AS i= IDENT )?
                    int alt41=2;
                    int LA41_0 = input.LA(1);

                    if ( (LA41_0==AS) ) {
                        alt41=1;
                    }
                    switch (alt41) {
                        case 1 :
                            // EsperEPL2Grammar.g:633:19: AS i= IDENT
                            {
                            AS117=(Token)match(input,AS,FOLLOW_AS_in_createSelectionListElement2550); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_AS.add(AS117);

                            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_createSelectionListElement2554); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IDENT.add(i);


                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: i, eventProperty
                    // token labels: i
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 634:3: -> ^( SELECTION_ELEMENT_EXPR eventProperty ( $i)? )
                    {
                        // EsperEPL2Grammar.g:634:6: ^( SELECTION_ELEMENT_EXPR eventProperty ( $i)? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);

                        adaptor.addChild(root_1, stream_eventProperty.nextTree());
                        // EsperEPL2Grammar.g:634:45: ( $i)?
                        if ( stream_i.hasNext() ) {
                            adaptor.addChild(root_1, stream_i.nextNode());

                        }
                        stream_i.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:635:4: constant AS i= IDENT
                    {
                    pushFollow(FOLLOW_constant_in_createSelectionListElement2575);
                    constant118=constant();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_constant.add(constant118.getTree());
                    AS119=(Token)match(input,AS,FOLLOW_AS_in_createSelectionListElement2577); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS119);

                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_createSelectionListElement2581); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);



                    // AST REWRITE
                    // elements: constant, i
                    // token labels: i
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 636:3: -> ^( SELECTION_ELEMENT_EXPR constant ( $i)? )
                    {
                        // EsperEPL2Grammar.g:636:6: ^( SELECTION_ELEMENT_EXPR constant ( $i)? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);

                        adaptor.addChild(root_1, stream_constant.nextTree());
                        // EsperEPL2Grammar.g:636:40: ( $i)?
                        if ( stream_i.hasNext() ) {
                            adaptor.addChild(root_1, stream_i.nextNode());

                        }
                        stream_i.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "createSelectionListElement"

    public static class insertIntoExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "insertIntoExpr"
    // EsperEPL2Grammar.g:639:1: insertIntoExpr : (s= ISTREAM | s= RSTREAM )? INTO i= IDENT ( insertIntoColumnList )? -> ^( INSERTINTO_EXPR ( $s)? $i ( insertIntoColumnList )? ) ;
    public final EsperEPL2GrammarParser.insertIntoExpr_return insertIntoExpr() throws RecognitionException {
        EsperEPL2GrammarParser.insertIntoExpr_return retval = new EsperEPL2GrammarParser.insertIntoExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token s=null;
        Token i=null;
        Token INTO120=null;
        EsperEPL2GrammarParser.insertIntoColumnList_return insertIntoColumnList121 = null;


        CommonTree s_tree=null;
        CommonTree i_tree=null;
        CommonTree INTO120_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_ISTREAM=new RewriteRuleTokenStream(adaptor,"token ISTREAM");
        RewriteRuleTokenStream stream_INTO=new RewriteRuleTokenStream(adaptor,"token INTO");
        RewriteRuleTokenStream stream_RSTREAM=new RewriteRuleTokenStream(adaptor,"token RSTREAM");
        RewriteRuleSubtreeStream stream_insertIntoColumnList=new RewriteRuleSubtreeStream(adaptor,"rule insertIntoColumnList");
         paraphrases.push("insert-into clause"); 
        try {
            // EsperEPL2Grammar.g:642:2: ( (s= ISTREAM | s= RSTREAM )? INTO i= IDENT ( insertIntoColumnList )? -> ^( INSERTINTO_EXPR ( $s)? $i ( insertIntoColumnList )? ) )
            // EsperEPL2Grammar.g:642:4: (s= ISTREAM | s= RSTREAM )? INTO i= IDENT ( insertIntoColumnList )?
            {
            // EsperEPL2Grammar.g:642:4: (s= ISTREAM | s= RSTREAM )?
            int alt43=3;
            int LA43_0 = input.LA(1);

            if ( (LA43_0==ISTREAM) ) {
                alt43=1;
            }
            else if ( (LA43_0==RSTREAM) ) {
                alt43=2;
            }
            switch (alt43) {
                case 1 :
                    // EsperEPL2Grammar.g:642:5: s= ISTREAM
                    {
                    s=(Token)match(input,ISTREAM,FOLLOW_ISTREAM_in_insertIntoExpr2620); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ISTREAM.add(s);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:642:17: s= RSTREAM
                    {
                    s=(Token)match(input,RSTREAM,FOLLOW_RSTREAM_in_insertIntoExpr2626); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RSTREAM.add(s);


                    }
                    break;

            }

            INTO120=(Token)match(input,INTO,FOLLOW_INTO_in_insertIntoExpr2630); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_INTO.add(INTO120);

            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_insertIntoExpr2634); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);

            // EsperEPL2Grammar.g:642:42: ( insertIntoColumnList )?
            int alt44=2;
            int LA44_0 = input.LA(1);

            if ( (LA44_0==LPAREN) ) {
                alt44=1;
            }
            switch (alt44) {
                case 1 :
                    // EsperEPL2Grammar.g:642:43: insertIntoColumnList
                    {
                    pushFollow(FOLLOW_insertIntoColumnList_in_insertIntoExpr2637);
                    insertIntoColumnList121=insertIntoColumnList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_insertIntoColumnList.add(insertIntoColumnList121.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: i, s, insertIntoColumnList
            // token labels: s, i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 643:3: -> ^( INSERTINTO_EXPR ( $s)? $i ( insertIntoColumnList )? )
            {
                // EsperEPL2Grammar.g:643:6: ^( INSERTINTO_EXPR ( $s)? $i ( insertIntoColumnList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(INSERTINTO_EXPR, "INSERTINTO_EXPR"), root_1);

                // EsperEPL2Grammar.g:643:24: ( $s)?
                if ( stream_s.hasNext() ) {
                    adaptor.addChild(root_1, stream_s.nextNode());

                }
                stream_s.reset();
                adaptor.addChild(root_1, stream_i.nextNode());
                // EsperEPL2Grammar.g:643:31: ( insertIntoColumnList )?
                if ( stream_insertIntoColumnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_insertIntoColumnList.nextTree());

                }
                stream_insertIntoColumnList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "insertIntoExpr"

    public static class insertIntoColumnList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "insertIntoColumnList"
    // EsperEPL2Grammar.g:646:1: insertIntoColumnList : LPAREN IDENT ( COMMA IDENT )* RPAREN -> ^( INSERTINTO_EXPRCOL ( IDENT )* ) ;
    public final EsperEPL2GrammarParser.insertIntoColumnList_return insertIntoColumnList() throws RecognitionException {
        EsperEPL2GrammarParser.insertIntoColumnList_return retval = new EsperEPL2GrammarParser.insertIntoColumnList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LPAREN122=null;
        Token IDENT123=null;
        Token COMMA124=null;
        Token IDENT125=null;
        Token RPAREN126=null;

        CommonTree LPAREN122_tree=null;
        CommonTree IDENT123_tree=null;
        CommonTree COMMA124_tree=null;
        CommonTree IDENT125_tree=null;
        CommonTree RPAREN126_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");

        try {
            // EsperEPL2Grammar.g:647:2: ( LPAREN IDENT ( COMMA IDENT )* RPAREN -> ^( INSERTINTO_EXPRCOL ( IDENT )* ) )
            // EsperEPL2Grammar.g:647:5: LPAREN IDENT ( COMMA IDENT )* RPAREN
            {
            LPAREN122=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_insertIntoColumnList2671); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN122);

            IDENT123=(Token)match(input,IDENT,FOLLOW_IDENT_in_insertIntoColumnList2673); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(IDENT123);

            // EsperEPL2Grammar.g:647:18: ( COMMA IDENT )*
            loop45:
            do {
                int alt45=2;
                int LA45_0 = input.LA(1);

                if ( (LA45_0==COMMA) ) {
                    alt45=1;
                }


                switch (alt45) {
            	case 1 :
            	    // EsperEPL2Grammar.g:647:19: COMMA IDENT
            	    {
            	    COMMA124=(Token)match(input,COMMA,FOLLOW_COMMA_in_insertIntoColumnList2676); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA124);

            	    IDENT125=(Token)match(input,IDENT,FOLLOW_IDENT_in_insertIntoColumnList2678); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_IDENT.add(IDENT125);


            	    }
            	    break;

            	default :
            	    break loop45;
                }
            } while (true);

            RPAREN126=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_insertIntoColumnList2682); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN126);



            // AST REWRITE
            // elements: IDENT
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 648:3: -> ^( INSERTINTO_EXPRCOL ( IDENT )* )
            {
                // EsperEPL2Grammar.g:648:6: ^( INSERTINTO_EXPRCOL ( IDENT )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(INSERTINTO_EXPRCOL, "INSERTINTO_EXPRCOL"), root_1);

                // EsperEPL2Grammar.g:648:27: ( IDENT )*
                while ( stream_IDENT.hasNext() ) {
                    adaptor.addChild(root_1, stream_IDENT.nextNode());

                }
                stream_IDENT.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "insertIntoColumnList"

    public static class fromClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "fromClause"
    // EsperEPL2Grammar.g:651:1: fromClause : streamExpression ( regularJoin | outerJoinList ) ;
    public final EsperEPL2GrammarParser.fromClause_return fromClause() throws RecognitionException {
        EsperEPL2GrammarParser.fromClause_return retval = new EsperEPL2GrammarParser.fromClause_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.streamExpression_return streamExpression127 = null;

        EsperEPL2GrammarParser.regularJoin_return regularJoin128 = null;

        EsperEPL2GrammarParser.outerJoinList_return outerJoinList129 = null;



         paraphrases.push("from clause"); 
        try {
            // EsperEPL2Grammar.g:654:2: ( streamExpression ( regularJoin | outerJoinList ) )
            // EsperEPL2Grammar.g:654:4: streamExpression ( regularJoin | outerJoinList )
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_streamExpression_in_fromClause2717);
            streamExpression127=streamExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, streamExpression127.getTree());
            // EsperEPL2Grammar.g:654:21: ( regularJoin | outerJoinList )
            int alt46=2;
            int LA46_0 = input.LA(1);

            if ( (LA46_0==EOF||LA46_0==WHERE||(LA46_0>=GROUP && LA46_0<=HAVING)||LA46_0==OUTPUT||LA46_0==ORDER||LA46_0==ROW_LIMIT_EXPR||LA46_0==COMMA) ) {
                alt46=1;
            }
            else if ( ((LA46_0>=INNER && LA46_0<=FULL)) ) {
                alt46=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 46, 0, input);

                throw nvae;
            }
            switch (alt46) {
                case 1 :
                    // EsperEPL2Grammar.g:654:22: regularJoin
                    {
                    pushFollow(FOLLOW_regularJoin_in_fromClause2720);
                    regularJoin128=regularJoin();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, regularJoin128.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:654:36: outerJoinList
                    {
                    pushFollow(FOLLOW_outerJoinList_in_fromClause2724);
                    outerJoinList129=outerJoinList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoinList129.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "fromClause"

    public static class regularJoin_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "regularJoin"
    // EsperEPL2Grammar.g:657:1: regularJoin : ( COMMA streamExpression )* ;
    public final EsperEPL2GrammarParser.regularJoin_return regularJoin() throws RecognitionException {
        EsperEPL2GrammarParser.regularJoin_return retval = new EsperEPL2GrammarParser.regularJoin_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA130=null;
        EsperEPL2GrammarParser.streamExpression_return streamExpression131 = null;


        CommonTree COMMA130_tree=null;

        try {
            // EsperEPL2Grammar.g:658:2: ( ( COMMA streamExpression )* )
            // EsperEPL2Grammar.g:658:4: ( COMMA streamExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            // EsperEPL2Grammar.g:658:4: ( COMMA streamExpression )*
            loop47:
            do {
                int alt47=2;
                int LA47_0 = input.LA(1);

                if ( (LA47_0==COMMA) ) {
                    alt47=1;
                }


                switch (alt47) {
            	case 1 :
            	    // EsperEPL2Grammar.g:658:5: COMMA streamExpression
            	    {
            	    COMMA130=(Token)match(input,COMMA,FOLLOW_COMMA_in_regularJoin2738); if (state.failed) return retval;
            	    pushFollow(FOLLOW_streamExpression_in_regularJoin2741);
            	    streamExpression131=streamExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, streamExpression131.getTree());

            	    }
            	    break;

            	default :
            	    break loop47;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "regularJoin"

    public static class outerJoinList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "outerJoinList"
    // EsperEPL2Grammar.g:661:1: outerJoinList : outerJoin ( outerJoin )* ;
    public final EsperEPL2GrammarParser.outerJoinList_return outerJoinList() throws RecognitionException {
        EsperEPL2GrammarParser.outerJoinList_return retval = new EsperEPL2GrammarParser.outerJoinList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.outerJoin_return outerJoin132 = null;

        EsperEPL2GrammarParser.outerJoin_return outerJoin133 = null;



        try {
            // EsperEPL2Grammar.g:662:2: ( outerJoin ( outerJoin )* )
            // EsperEPL2Grammar.g:662:4: outerJoin ( outerJoin )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_outerJoin_in_outerJoinList2755);
            outerJoin132=outerJoin();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoin132.getTree());
            // EsperEPL2Grammar.g:662:14: ( outerJoin )*
            loop48:
            do {
                int alt48=2;
                int LA48_0 = input.LA(1);

                if ( ((LA48_0>=INNER && LA48_0<=FULL)) ) {
                    alt48=1;
                }


                switch (alt48) {
            	case 1 :
            	    // EsperEPL2Grammar.g:662:15: outerJoin
            	    {
            	    pushFollow(FOLLOW_outerJoin_in_outerJoinList2758);
            	    outerJoin133=outerJoin();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoin133.getTree());

            	    }
            	    break;

            	default :
            	    break loop48;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "outerJoinList"

    public static class outerJoin_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "outerJoin"
    // EsperEPL2Grammar.g:665:1: outerJoin : ( ( (tl= LEFT | tr= RIGHT | tf= FULL ) OUTER )? | (i= INNER ) ) JOIN streamExpression outerJoinIdent -> {$i != null}? streamExpression ^( INNERJOIN_EXPR outerJoinIdent ) -> {$tl != null}? streamExpression ^( LEFT_OUTERJOIN_EXPR outerJoinIdent ) -> {$tr != null}? streamExpression ^( RIGHT_OUTERJOIN_EXPR outerJoinIdent ) -> streamExpression ^( FULL_OUTERJOIN_EXPR outerJoinIdent ) ;
    public final EsperEPL2GrammarParser.outerJoin_return outerJoin() throws RecognitionException {
        EsperEPL2GrammarParser.outerJoin_return retval = new EsperEPL2GrammarParser.outerJoin_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token tl=null;
        Token tr=null;
        Token tf=null;
        Token i=null;
        Token OUTER134=null;
        Token JOIN135=null;
        EsperEPL2GrammarParser.streamExpression_return streamExpression136 = null;

        EsperEPL2GrammarParser.outerJoinIdent_return outerJoinIdent137 = null;


        CommonTree tl_tree=null;
        CommonTree tr_tree=null;
        CommonTree tf_tree=null;
        CommonTree i_tree=null;
        CommonTree OUTER134_tree=null;
        CommonTree JOIN135_tree=null;
        RewriteRuleTokenStream stream_OUTER=new RewriteRuleTokenStream(adaptor,"token OUTER");
        RewriteRuleTokenStream stream_RIGHT=new RewriteRuleTokenStream(adaptor,"token RIGHT");
        RewriteRuleTokenStream stream_FULL=new RewriteRuleTokenStream(adaptor,"token FULL");
        RewriteRuleTokenStream stream_INNER=new RewriteRuleTokenStream(adaptor,"token INNER");
        RewriteRuleTokenStream stream_LEFT=new RewriteRuleTokenStream(adaptor,"token LEFT");
        RewriteRuleTokenStream stream_JOIN=new RewriteRuleTokenStream(adaptor,"token JOIN");
        RewriteRuleSubtreeStream stream_streamExpression=new RewriteRuleSubtreeStream(adaptor,"rule streamExpression");
        RewriteRuleSubtreeStream stream_outerJoinIdent=new RewriteRuleSubtreeStream(adaptor,"rule outerJoinIdent");
         paraphrases.push("outer join"); 
        try {
            // EsperEPL2Grammar.g:668:2: ( ( ( (tl= LEFT | tr= RIGHT | tf= FULL ) OUTER )? | (i= INNER ) ) JOIN streamExpression outerJoinIdent -> {$i != null}? streamExpression ^( INNERJOIN_EXPR outerJoinIdent ) -> {$tl != null}? streamExpression ^( LEFT_OUTERJOIN_EXPR outerJoinIdent ) -> {$tr != null}? streamExpression ^( RIGHT_OUTERJOIN_EXPR outerJoinIdent ) -> streamExpression ^( FULL_OUTERJOIN_EXPR outerJoinIdent ) )
            // EsperEPL2Grammar.g:668:4: ( ( (tl= LEFT | tr= RIGHT | tf= FULL ) OUTER )? | (i= INNER ) ) JOIN streamExpression outerJoinIdent
            {
            // EsperEPL2Grammar.g:668:4: ( ( (tl= LEFT | tr= RIGHT | tf= FULL ) OUTER )? | (i= INNER ) )
            int alt51=2;
            int LA51_0 = input.LA(1);

            if ( ((LA51_0>=JOIN && LA51_0<=FULL)) ) {
                alt51=1;
            }
            else if ( (LA51_0==INNER) ) {
                alt51=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 51, 0, input);

                throw nvae;
            }
            switch (alt51) {
                case 1 :
                    // EsperEPL2Grammar.g:669:14: ( (tl= LEFT | tr= RIGHT | tf= FULL ) OUTER )?
                    {
                    // EsperEPL2Grammar.g:669:14: ( (tl= LEFT | tr= RIGHT | tf= FULL ) OUTER )?
                    int alt50=2;
                    int LA50_0 = input.LA(1);

                    if ( ((LA50_0>=LEFT && LA50_0<=FULL)) ) {
                        alt50=1;
                    }
                    switch (alt50) {
                        case 1 :
                            // EsperEPL2Grammar.g:669:15: (tl= LEFT | tr= RIGHT | tf= FULL ) OUTER
                            {
                            // EsperEPL2Grammar.g:669:15: (tl= LEFT | tr= RIGHT | tf= FULL )
                            int alt49=3;
                            switch ( input.LA(1) ) {
                            case LEFT:
                                {
                                alt49=1;
                                }
                                break;
                            case RIGHT:
                                {
                                alt49=2;
                                }
                                break;
                            case FULL:
                                {
                                alt49=3;
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 49, 0, input);

                                throw nvae;
                            }

                            switch (alt49) {
                                case 1 :
                                    // EsperEPL2Grammar.g:669:16: tl= LEFT
                                    {
                                    tl=(Token)match(input,LEFT,FOLLOW_LEFT_in_outerJoin2801); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_LEFT.add(tl);


                                    }
                                    break;
                                case 2 :
                                    // EsperEPL2Grammar.g:669:24: tr= RIGHT
                                    {
                                    tr=(Token)match(input,RIGHT,FOLLOW_RIGHT_in_outerJoin2805); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_RIGHT.add(tr);


                                    }
                                    break;
                                case 3 :
                                    // EsperEPL2Grammar.g:669:33: tf= FULL
                                    {
                                    tf=(Token)match(input,FULL,FOLLOW_FULL_in_outerJoin2809); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_FULL.add(tf);


                                    }
                                    break;

                            }

                            OUTER134=(Token)match(input,OUTER,FOLLOW_OUTER_in_outerJoin2812); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_OUTER.add(OUTER134);


                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:670:14: (i= INNER )
                    {
                    // EsperEPL2Grammar.g:670:14: (i= INNER )
                    // EsperEPL2Grammar.g:670:15: i= INNER
                    {
                    i=(Token)match(input,INNER,FOLLOW_INNER_in_outerJoin2833); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INNER.add(i);


                    }


                    }
                    break;

            }

            JOIN135=(Token)match(input,JOIN,FOLLOW_JOIN_in_outerJoin2847); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_JOIN.add(JOIN135);

            pushFollow(FOLLOW_streamExpression_in_outerJoin2849);
            streamExpression136=streamExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_streamExpression.add(streamExpression136.getTree());
            pushFollow(FOLLOW_outerJoinIdent_in_outerJoin2851);
            outerJoinIdent137=outerJoinIdent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_outerJoinIdent.add(outerJoinIdent137.getTree());


            // AST REWRITE
            // elements: outerJoinIdent, streamExpression, streamExpression, streamExpression, outerJoinIdent, outerJoinIdent, streamExpression, outerJoinIdent
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 672:3: -> {$i != null}? streamExpression ^( INNERJOIN_EXPR outerJoinIdent )
            if (i != null) {
                adaptor.addChild(root_0, stream_streamExpression.nextTree());
                // EsperEPL2Grammar.g:672:37: ^( INNERJOIN_EXPR outerJoinIdent )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(INNERJOIN_EXPR, "INNERJOIN_EXPR"), root_1);

                adaptor.addChild(root_1, stream_outerJoinIdent.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 673:3: -> {$tl != null}? streamExpression ^( LEFT_OUTERJOIN_EXPR outerJoinIdent )
            if (tl != null) {
                adaptor.addChild(root_0, stream_streamExpression.nextTree());
                // EsperEPL2Grammar.g:673:38: ^( LEFT_OUTERJOIN_EXPR outerJoinIdent )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LEFT_OUTERJOIN_EXPR, "LEFT_OUTERJOIN_EXPR"), root_1);

                adaptor.addChild(root_1, stream_outerJoinIdent.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 674:3: -> {$tr != null}? streamExpression ^( RIGHT_OUTERJOIN_EXPR outerJoinIdent )
            if (tr != null) {
                adaptor.addChild(root_0, stream_streamExpression.nextTree());
                // EsperEPL2Grammar.g:674:38: ^( RIGHT_OUTERJOIN_EXPR outerJoinIdent )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(RIGHT_OUTERJOIN_EXPR, "RIGHT_OUTERJOIN_EXPR"), root_1);

                adaptor.addChild(root_1, stream_outerJoinIdent.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 675:3: -> streamExpression ^( FULL_OUTERJOIN_EXPR outerJoinIdent )
            {
                adaptor.addChild(root_0, stream_streamExpression.nextTree());
                // EsperEPL2Grammar.g:675:23: ^( FULL_OUTERJOIN_EXPR outerJoinIdent )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FULL_OUTERJOIN_EXPR, "FULL_OUTERJOIN_EXPR"), root_1);

                adaptor.addChild(root_1, stream_outerJoinIdent.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "outerJoin"

    public static class outerJoinIdent_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "outerJoinIdent"
    // EsperEPL2Grammar.g:678:1: outerJoinIdent : ON outerJoinIdentPair ( AND_EXPR outerJoinIdentPair )* ;
    public final EsperEPL2GrammarParser.outerJoinIdent_return outerJoinIdent() throws RecognitionException {
        EsperEPL2GrammarParser.outerJoinIdent_return retval = new EsperEPL2GrammarParser.outerJoinIdent_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token ON138=null;
        Token AND_EXPR140=null;
        EsperEPL2GrammarParser.outerJoinIdentPair_return outerJoinIdentPair139 = null;

        EsperEPL2GrammarParser.outerJoinIdentPair_return outerJoinIdentPair141 = null;


        CommonTree ON138_tree=null;
        CommonTree AND_EXPR140_tree=null;

        try {
            // EsperEPL2Grammar.g:679:2: ( ON outerJoinIdentPair ( AND_EXPR outerJoinIdentPair )* )
            // EsperEPL2Grammar.g:679:4: ON outerJoinIdentPair ( AND_EXPR outerJoinIdentPair )*
            {
            root_0 = (CommonTree)adaptor.nil();

            ON138=(Token)match(input,ON,FOLLOW_ON_in_outerJoinIdent2916); if (state.failed) return retval;
            pushFollow(FOLLOW_outerJoinIdentPair_in_outerJoinIdent2919);
            outerJoinIdentPair139=outerJoinIdentPair();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoinIdentPair139.getTree());
            // EsperEPL2Grammar.g:679:27: ( AND_EXPR outerJoinIdentPair )*
            loop52:
            do {
                int alt52=2;
                int LA52_0 = input.LA(1);

                if ( (LA52_0==AND_EXPR) ) {
                    alt52=1;
                }


                switch (alt52) {
            	case 1 :
            	    // EsperEPL2Grammar.g:679:28: AND_EXPR outerJoinIdentPair
            	    {
            	    AND_EXPR140=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_outerJoinIdent2922); if (state.failed) return retval;
            	    pushFollow(FOLLOW_outerJoinIdentPair_in_outerJoinIdent2925);
            	    outerJoinIdentPair141=outerJoinIdentPair();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoinIdentPair141.getTree());

            	    }
            	    break;

            	default :
            	    break loop52;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "outerJoinIdent"

    public static class outerJoinIdentPair_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "outerJoinIdentPair"
    // EsperEPL2Grammar.g:682:1: outerJoinIdentPair : eventProperty EQUALS eventProperty ;
    public final EsperEPL2GrammarParser.outerJoinIdentPair_return outerJoinIdentPair() throws RecognitionException {
        EsperEPL2GrammarParser.outerJoinIdentPair_return retval = new EsperEPL2GrammarParser.outerJoinIdentPair_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token EQUALS143=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty142 = null;

        EsperEPL2GrammarParser.eventProperty_return eventProperty144 = null;


        CommonTree EQUALS143_tree=null;

        try {
            // EsperEPL2Grammar.g:683:2: ( eventProperty EQUALS eventProperty )
            // EsperEPL2Grammar.g:683:4: eventProperty EQUALS eventProperty
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_eventProperty_in_outerJoinIdentPair2940);
            eventProperty142=eventProperty();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty142.getTree());
            EQUALS143=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_outerJoinIdentPair2942); if (state.failed) return retval;
            pushFollow(FOLLOW_eventProperty_in_outerJoinIdentPair2945);
            eventProperty144=eventProperty();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty144.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "outerJoinIdentPair"

    public static class whereClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "whereClause"
    // EsperEPL2Grammar.g:686:1: whereClause : evalOrExpression -> ^( WHERE_EXPR evalOrExpression ) ;
    public final EsperEPL2GrammarParser.whereClause_return whereClause() throws RecognitionException {
        EsperEPL2GrammarParser.whereClause_return retval = new EsperEPL2GrammarParser.whereClause_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.evalOrExpression_return evalOrExpression145 = null;


        RewriteRuleSubtreeStream stream_evalOrExpression=new RewriteRuleSubtreeStream(adaptor,"rule evalOrExpression");
         paraphrases.push("where clause"); 
        try {
            // EsperEPL2Grammar.g:689:2: ( evalOrExpression -> ^( WHERE_EXPR evalOrExpression ) )
            // EsperEPL2Grammar.g:689:4: evalOrExpression
            {
            pushFollow(FOLLOW_evalOrExpression_in_whereClause2967);
            evalOrExpression145=evalOrExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_evalOrExpression.add(evalOrExpression145.getTree());


            // AST REWRITE
            // elements: evalOrExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 690:3: -> ^( WHERE_EXPR evalOrExpression )
            {
                // EsperEPL2Grammar.g:690:6: ^( WHERE_EXPR evalOrExpression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WHERE_EXPR, "WHERE_EXPR"), root_1);

                adaptor.addChild(root_1, stream_evalOrExpression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "whereClause"

    public static class selectClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "selectClause"
    // EsperEPL2Grammar.g:693:1: selectClause : (s= RSTREAM | s= ISTREAM | s= IRSTREAM )? selectionList -> ^( SELECTION_EXPR ( $s)? selectionList ) ;
    public final EsperEPL2GrammarParser.selectClause_return selectClause() throws RecognitionException {
        EsperEPL2GrammarParser.selectClause_return retval = new EsperEPL2GrammarParser.selectClause_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token s=null;
        EsperEPL2GrammarParser.selectionList_return selectionList146 = null;


        CommonTree s_tree=null;
        RewriteRuleTokenStream stream_IRSTREAM=new RewriteRuleTokenStream(adaptor,"token IRSTREAM");
        RewriteRuleTokenStream stream_ISTREAM=new RewriteRuleTokenStream(adaptor,"token ISTREAM");
        RewriteRuleTokenStream stream_RSTREAM=new RewriteRuleTokenStream(adaptor,"token RSTREAM");
        RewriteRuleSubtreeStream stream_selectionList=new RewriteRuleSubtreeStream(adaptor,"rule selectionList");
         paraphrases.push("select clause"); 
        try {
            // EsperEPL2Grammar.g:696:2: ( (s= RSTREAM | s= ISTREAM | s= IRSTREAM )? selectionList -> ^( SELECTION_EXPR ( $s)? selectionList ) )
            // EsperEPL2Grammar.g:696:4: (s= RSTREAM | s= ISTREAM | s= IRSTREAM )? selectionList
            {
            // EsperEPL2Grammar.g:696:4: (s= RSTREAM | s= ISTREAM | s= IRSTREAM )?
            int alt53=4;
            switch ( input.LA(1) ) {
                case RSTREAM:
                    {
                    alt53=1;
                    }
                    break;
                case ISTREAM:
                    {
                    alt53=2;
                    }
                    break;
                case IRSTREAM:
                    {
                    alt53=3;
                    }
                    break;
            }

            switch (alt53) {
                case 1 :
                    // EsperEPL2Grammar.g:696:5: s= RSTREAM
                    {
                    s=(Token)match(input,RSTREAM,FOLLOW_RSTREAM_in_selectClause3003); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RSTREAM.add(s);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:696:17: s= ISTREAM
                    {
                    s=(Token)match(input,ISTREAM,FOLLOW_ISTREAM_in_selectClause3009); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ISTREAM.add(s);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:696:29: s= IRSTREAM
                    {
                    s=(Token)match(input,IRSTREAM,FOLLOW_IRSTREAM_in_selectClause3015); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IRSTREAM.add(s);


                    }
                    break;

            }

            pushFollow(FOLLOW_selectionList_in_selectClause3019);
            selectionList146=selectionList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_selectionList.add(selectionList146.getTree());


            // AST REWRITE
            // elements: selectionList, s
            // token labels: s
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 697:3: -> ^( SELECTION_EXPR ( $s)? selectionList )
            {
                // EsperEPL2Grammar.g:697:6: ^( SELECTION_EXPR ( $s)? selectionList )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_EXPR, "SELECTION_EXPR"), root_1);

                // EsperEPL2Grammar.g:697:23: ( $s)?
                if ( stream_s.hasNext() ) {
                    adaptor.addChild(root_1, stream_s.nextNode());

                }
                stream_s.reset();
                adaptor.addChild(root_1, stream_selectionList.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "selectClause"

    public static class selectionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "selectionList"
    // EsperEPL2Grammar.g:700:1: selectionList : selectionListElement ( COMMA selectionListElement )* ;
    public final EsperEPL2GrammarParser.selectionList_return selectionList() throws RecognitionException {
        EsperEPL2GrammarParser.selectionList_return retval = new EsperEPL2GrammarParser.selectionList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA148=null;
        EsperEPL2GrammarParser.selectionListElement_return selectionListElement147 = null;

        EsperEPL2GrammarParser.selectionListElement_return selectionListElement149 = null;


        CommonTree COMMA148_tree=null;

        try {
            // EsperEPL2Grammar.g:701:2: ( selectionListElement ( COMMA selectionListElement )* )
            // EsperEPL2Grammar.g:701:4: selectionListElement ( COMMA selectionListElement )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_selectionListElement_in_selectionList3046);
            selectionListElement147=selectionListElement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, selectionListElement147.getTree());
            // EsperEPL2Grammar.g:701:25: ( COMMA selectionListElement )*
            loop54:
            do {
                int alt54=2;
                int LA54_0 = input.LA(1);

                if ( (LA54_0==COMMA) ) {
                    alt54=1;
                }


                switch (alt54) {
            	case 1 :
            	    // EsperEPL2Grammar.g:701:26: COMMA selectionListElement
            	    {
            	    COMMA148=(Token)match(input,COMMA,FOLLOW_COMMA_in_selectionList3049); if (state.failed) return retval;
            	    pushFollow(FOLLOW_selectionListElement_in_selectionList3052);
            	    selectionListElement149=selectionListElement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, selectionListElement149.getTree());

            	    }
            	    break;

            	default :
            	    break loop54;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "selectionList"

    public static class selectionListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "selectionListElement"
    // EsperEPL2Grammar.g:704:1: selectionListElement : (s= STAR -> WILDCARD_SELECT[$s] | ( streamSelector )=> streamSelector | expression ( AS i= keywordAllowedIdent )? -> {identifier != null}? ^( SELECTION_ELEMENT_EXPR expression IDENT[identifier] ) -> {identifier == null}? ^( SELECTION_ELEMENT_EXPR expression ) -> ^( SELECTION_ELEMENT_EXPR expression ) );
    public final EsperEPL2GrammarParser.selectionListElement_return selectionListElement() throws RecognitionException {
        EsperEPL2GrammarParser.selectionListElement_return retval = new EsperEPL2GrammarParser.selectionListElement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token s=null;
        Token AS152=null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i = null;

        EsperEPL2GrammarParser.streamSelector_return streamSelector150 = null;

        EsperEPL2GrammarParser.expression_return expression151 = null;


        CommonTree s_tree=null;
        CommonTree AS152_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_keywordAllowedIdent=new RewriteRuleSubtreeStream(adaptor,"rule keywordAllowedIdent");
         String identifier = null; 
        try {
            // EsperEPL2Grammar.g:706:2: (s= STAR -> WILDCARD_SELECT[$s] | ( streamSelector )=> streamSelector | expression ( AS i= keywordAllowedIdent )? -> {identifier != null}? ^( SELECTION_ELEMENT_EXPR expression IDENT[identifier] ) -> {identifier == null}? ^( SELECTION_ELEMENT_EXPR expression ) -> ^( SELECTION_ELEMENT_EXPR expression ) )
            int alt56=3;
            alt56 = dfa56.predict(input);
            switch (alt56) {
                case 1 :
                    // EsperEPL2Grammar.g:706:7: s= STAR
                    {
                    s=(Token)match(input,STAR,FOLLOW_STAR_in_selectionListElement3078); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STAR.add(s);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 706:14: -> WILDCARD_SELECT[$s]
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(WILDCARD_SELECT, s));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:707:4: ( streamSelector )=> streamSelector
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_streamSelector_in_selectionListElement3094);
                    streamSelector150=streamSelector();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, streamSelector150.getTree());

                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:708:4: expression ( AS i= keywordAllowedIdent )?
                    {
                    pushFollow(FOLLOW_expression_in_selectionListElement3099);
                    expression151=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression151.getTree());
                    // EsperEPL2Grammar.g:708:15: ( AS i= keywordAllowedIdent )?
                    int alt55=2;
                    int LA55_0 = input.LA(1);

                    if ( (LA55_0==AS) ) {
                        alt55=1;
                    }
                    switch (alt55) {
                        case 1 :
                            // EsperEPL2Grammar.g:708:16: AS i= keywordAllowedIdent
                            {
                            AS152=(Token)match(input,AS,FOLLOW_AS_in_selectionListElement3102); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_AS.add(AS152);

                            pushFollow(FOLLOW_keywordAllowedIdent_in_selectionListElement3106);
                            i=keywordAllowedIdent();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i.getTree());
                            if ( state.backtracking==0 ) {
                               identifier = i.getTree().toString(); 
                            }

                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: expression, expression, expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 709:3: -> {identifier != null}? ^( SELECTION_ELEMENT_EXPR expression IDENT[identifier] )
                    if (identifier != null) {
                        // EsperEPL2Grammar.g:709:28: ^( SELECTION_ELEMENT_EXPR expression IDENT[identifier] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);

                        adaptor.addChild(root_1, stream_expression.nextTree());
                        adaptor.addChild(root_1, (CommonTree)adaptor.create(IDENT, identifier));

                        adaptor.addChild(root_0, root_1);
                        }

                    }
                    else // 710:3: -> {identifier == null}? ^( SELECTION_ELEMENT_EXPR expression )
                    if (identifier == null) {
                        // EsperEPL2Grammar.g:710:28: ^( SELECTION_ELEMENT_EXPR expression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);

                        adaptor.addChild(root_1, stream_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }
                    else // 711:3: -> ^( SELECTION_ELEMENT_EXPR expression )
                    {
                        // EsperEPL2Grammar.g:711:6: ^( SELECTION_ELEMENT_EXPR expression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);

                        adaptor.addChild(root_1, stream_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "selectionListElement"

    public static class streamSelector_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "streamSelector"
    // EsperEPL2Grammar.g:714:1: streamSelector : s= IDENT DOT STAR ( AS i= IDENT )? -> ^( SELECTION_STREAM $s ( $i)? ) ;
    public final EsperEPL2GrammarParser.streamSelector_return streamSelector() throws RecognitionException {
        EsperEPL2GrammarParser.streamSelector_return retval = new EsperEPL2GrammarParser.streamSelector_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token s=null;
        Token i=null;
        Token DOT153=null;
        Token STAR154=null;
        Token AS155=null;

        CommonTree s_tree=null;
        CommonTree i_tree=null;
        CommonTree DOT153_tree=null;
        CommonTree STAR154_tree=null;
        CommonTree AS155_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");

        try {
            // EsperEPL2Grammar.g:715:2: (s= IDENT DOT STAR ( AS i= IDENT )? -> ^( SELECTION_STREAM $s ( $i)? ) )
            // EsperEPL2Grammar.g:715:4: s= IDENT DOT STAR ( AS i= IDENT )?
            {
            s=(Token)match(input,IDENT,FOLLOW_IDENT_in_streamSelector3162); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(s);

            DOT153=(Token)match(input,DOT,FOLLOW_DOT_in_streamSelector3164); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DOT.add(DOT153);

            STAR154=(Token)match(input,STAR,FOLLOW_STAR_in_streamSelector3166); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_STAR.add(STAR154);

            // EsperEPL2Grammar.g:715:21: ( AS i= IDENT )?
            int alt57=2;
            int LA57_0 = input.LA(1);

            if ( (LA57_0==AS) ) {
                alt57=1;
            }
            switch (alt57) {
                case 1 :
                    // EsperEPL2Grammar.g:715:22: AS i= IDENT
                    {
                    AS155=(Token)match(input,AS,FOLLOW_AS_in_streamSelector3169); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS155);

                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_streamSelector3173); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;

            }



            // AST REWRITE
            // elements: i, s
            // token labels: s, i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 716:3: -> ^( SELECTION_STREAM $s ( $i)? )
            {
                // EsperEPL2Grammar.g:716:6: ^( SELECTION_STREAM $s ( $i)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_STREAM, "SELECTION_STREAM"), root_1);

                adaptor.addChild(root_1, stream_s.nextNode());
                // EsperEPL2Grammar.g:716:28: ( $i)?
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());

                }
                stream_i.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "streamSelector"

    public static class streamExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "streamExpression"
    // EsperEPL2Grammar.g:719:1: streamExpression : ( eventFilterExpression | patternInclusionExpression | databaseJoinExpression | methodJoinExpression ) ( DOT viewExpression ( DOT viewExpression )* )? ( AS i= IDENT | i= IDENT )? (u= UNIDIRECTIONAL )? (ru= RETAINUNION | ri= RETAININTERSECTION )? -> ^( STREAM_EXPR ( eventFilterExpression )? ( patternInclusionExpression )? ( databaseJoinExpression )? ( methodJoinExpression )? ( viewExpression )* ( $i)? ( $u)? ( $ru)? ( $ri)? ) ;
    public final EsperEPL2GrammarParser.streamExpression_return streamExpression() throws RecognitionException {
        EsperEPL2GrammarParser.streamExpression_return retval = new EsperEPL2GrammarParser.streamExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token u=null;
        Token ru=null;
        Token ri=null;
        Token DOT160=null;
        Token DOT162=null;
        Token AS164=null;
        EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression156 = null;

        EsperEPL2GrammarParser.patternInclusionExpression_return patternInclusionExpression157 = null;

        EsperEPL2GrammarParser.databaseJoinExpression_return databaseJoinExpression158 = null;

        EsperEPL2GrammarParser.methodJoinExpression_return methodJoinExpression159 = null;

        EsperEPL2GrammarParser.viewExpression_return viewExpression161 = null;

        EsperEPL2GrammarParser.viewExpression_return viewExpression163 = null;


        CommonTree i_tree=null;
        CommonTree u_tree=null;
        CommonTree ru_tree=null;
        CommonTree ri_tree=null;
        CommonTree DOT160_tree=null;
        CommonTree DOT162_tree=null;
        CommonTree AS164_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RETAINUNION=new RewriteRuleTokenStream(adaptor,"token RETAINUNION");
        RewriteRuleTokenStream stream_RETAININTERSECTION=new RewriteRuleTokenStream(adaptor,"token RETAININTERSECTION");
        RewriteRuleTokenStream stream_UNIDIRECTIONAL=new RewriteRuleTokenStream(adaptor,"token UNIDIRECTIONAL");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_databaseJoinExpression=new RewriteRuleSubtreeStream(adaptor,"rule databaseJoinExpression");
        RewriteRuleSubtreeStream stream_methodJoinExpression=new RewriteRuleSubtreeStream(adaptor,"rule methodJoinExpression");
        RewriteRuleSubtreeStream stream_viewExpression=new RewriteRuleSubtreeStream(adaptor,"rule viewExpression");
        RewriteRuleSubtreeStream stream_eventFilterExpression=new RewriteRuleSubtreeStream(adaptor,"rule eventFilterExpression");
        RewriteRuleSubtreeStream stream_patternInclusionExpression=new RewriteRuleSubtreeStream(adaptor,"rule patternInclusionExpression");
        try {
            // EsperEPL2Grammar.g:720:2: ( ( eventFilterExpression | patternInclusionExpression | databaseJoinExpression | methodJoinExpression ) ( DOT viewExpression ( DOT viewExpression )* )? ( AS i= IDENT | i= IDENT )? (u= UNIDIRECTIONAL )? (ru= RETAINUNION | ri= RETAININTERSECTION )? -> ^( STREAM_EXPR ( eventFilterExpression )? ( patternInclusionExpression )? ( databaseJoinExpression )? ( methodJoinExpression )? ( viewExpression )* ( $i)? ( $u)? ( $ru)? ( $ri)? ) )
            // EsperEPL2Grammar.g:720:4: ( eventFilterExpression | patternInclusionExpression | databaseJoinExpression | methodJoinExpression ) ( DOT viewExpression ( DOT viewExpression )* )? ( AS i= IDENT | i= IDENT )? (u= UNIDIRECTIONAL )? (ru= RETAINUNION | ri= RETAININTERSECTION )?
            {
            // EsperEPL2Grammar.g:720:4: ( eventFilterExpression | patternInclusionExpression | databaseJoinExpression | methodJoinExpression )
            int alt58=4;
            switch ( input.LA(1) ) {
            case IDENT:
                {
                int LA58_1 = input.LA(2);

                if ( (LA58_1==EOF||(LA58_1>=WHERE && LA58_1<=AS)||(LA58_1>=INNER && LA58_1<=ON)||(LA58_1>=GROUP && LA58_1<=HAVING)||LA58_1==OUTPUT||LA58_1==ORDER||(LA58_1>=UNIDIRECTIONAL && LA58_1<=RETAININTERSECTION)||LA58_1==ROW_LIMIT_EXPR||(LA58_1>=COMMA && LA58_1<=LPAREN)||LA58_1==LBRACK) ) {
                    alt58=1;
                }
                else if ( (LA58_1==COLON) ) {
                    alt58=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 58, 1, input);

                    throw nvae;
                }
                }
                break;
            case TICKED_STRING_LITERAL:
                {
                alt58=1;
                }
                break;
            case PATTERN:
                {
                alt58=2;
                }
                break;
            case SQL:
                {
                alt58=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 58, 0, input);

                throw nvae;
            }

            switch (alt58) {
                case 1 :
                    // EsperEPL2Grammar.g:720:5: eventFilterExpression
                    {
                    pushFollow(FOLLOW_eventFilterExpression_in_streamExpression3203);
                    eventFilterExpression156=eventFilterExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_eventFilterExpression.add(eventFilterExpression156.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:720:29: patternInclusionExpression
                    {
                    pushFollow(FOLLOW_patternInclusionExpression_in_streamExpression3207);
                    patternInclusionExpression157=patternInclusionExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_patternInclusionExpression.add(patternInclusionExpression157.getTree());

                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:720:58: databaseJoinExpression
                    {
                    pushFollow(FOLLOW_databaseJoinExpression_in_streamExpression3211);
                    databaseJoinExpression158=databaseJoinExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_databaseJoinExpression.add(databaseJoinExpression158.getTree());

                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:720:83: methodJoinExpression
                    {
                    pushFollow(FOLLOW_methodJoinExpression_in_streamExpression3215);
                    methodJoinExpression159=methodJoinExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_methodJoinExpression.add(methodJoinExpression159.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:721:3: ( DOT viewExpression ( DOT viewExpression )* )?
            int alt60=2;
            int LA60_0 = input.LA(1);

            if ( (LA60_0==DOT) ) {
                alt60=1;
            }
            switch (alt60) {
                case 1 :
                    // EsperEPL2Grammar.g:721:4: DOT viewExpression ( DOT viewExpression )*
                    {
                    DOT160=(Token)match(input,DOT,FOLLOW_DOT_in_streamExpression3221); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT160);

                    pushFollow(FOLLOW_viewExpression_in_streamExpression3223);
                    viewExpression161=viewExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression161.getTree());
                    // EsperEPL2Grammar.g:721:23: ( DOT viewExpression )*
                    loop59:
                    do {
                        int alt59=2;
                        int LA59_0 = input.LA(1);

                        if ( (LA59_0==DOT) ) {
                            alt59=1;
                        }


                        switch (alt59) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:721:24: DOT viewExpression
                    	    {
                    	    DOT162=(Token)match(input,DOT,FOLLOW_DOT_in_streamExpression3226); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_DOT.add(DOT162);

                    	    pushFollow(FOLLOW_viewExpression_in_streamExpression3228);
                    	    viewExpression163=viewExpression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression163.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop59;
                        }
                    } while (true);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:721:47: ( AS i= IDENT | i= IDENT )?
            int alt61=3;
            int LA61_0 = input.LA(1);

            if ( (LA61_0==AS) ) {
                alt61=1;
            }
            else if ( (LA61_0==IDENT) ) {
                alt61=2;
            }
            switch (alt61) {
                case 1 :
                    // EsperEPL2Grammar.g:721:48: AS i= IDENT
                    {
                    AS164=(Token)match(input,AS,FOLLOW_AS_in_streamExpression3235); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS164);

                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_streamExpression3239); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:721:61: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_streamExpression3245); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:721:71: (u= UNIDIRECTIONAL )?
            int alt62=2;
            int LA62_0 = input.LA(1);

            if ( (LA62_0==UNIDIRECTIONAL) ) {
                alt62=1;
            }
            switch (alt62) {
                case 1 :
                    // EsperEPL2Grammar.g:721:72: u= UNIDIRECTIONAL
                    {
                    u=(Token)match(input,UNIDIRECTIONAL,FOLLOW_UNIDIRECTIONAL_in_streamExpression3252); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_UNIDIRECTIONAL.add(u);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:721:91: (ru= RETAINUNION | ri= RETAININTERSECTION )?
            int alt63=3;
            int LA63_0 = input.LA(1);

            if ( (LA63_0==RETAINUNION) ) {
                alt63=1;
            }
            else if ( (LA63_0==RETAININTERSECTION) ) {
                alt63=2;
            }
            switch (alt63) {
                case 1 :
                    // EsperEPL2Grammar.g:721:92: ru= RETAINUNION
                    {
                    ru=(Token)match(input,RETAINUNION,FOLLOW_RETAINUNION_in_streamExpression3259); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAINUNION.add(ru);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:721:107: ri= RETAININTERSECTION
                    {
                    ri=(Token)match(input,RETAININTERSECTION,FOLLOW_RETAININTERSECTION_in_streamExpression3263); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAININTERSECTION.add(ri);


                    }
                    break;

            }



            // AST REWRITE
            // elements: viewExpression, databaseJoinExpression, u, patternInclusionExpression, ru, ri, i, methodJoinExpression, eventFilterExpression
            // token labels: u, ri, ru, i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_u=new RewriteRuleTokenStream(adaptor,"token u",u);
            RewriteRuleTokenStream stream_ri=new RewriteRuleTokenStream(adaptor,"token ri",ri);
            RewriteRuleTokenStream stream_ru=new RewriteRuleTokenStream(adaptor,"token ru",ru);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 722:3: -> ^( STREAM_EXPR ( eventFilterExpression )? ( patternInclusionExpression )? ( databaseJoinExpression )? ( methodJoinExpression )? ( viewExpression )* ( $i)? ( $u)? ( $ru)? ( $ri)? )
            {
                // EsperEPL2Grammar.g:722:6: ^( STREAM_EXPR ( eventFilterExpression )? ( patternInclusionExpression )? ( databaseJoinExpression )? ( methodJoinExpression )? ( viewExpression )* ( $i)? ( $u)? ( $ru)? ( $ri)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STREAM_EXPR, "STREAM_EXPR"), root_1);

                // EsperEPL2Grammar.g:722:20: ( eventFilterExpression )?
                if ( stream_eventFilterExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_eventFilterExpression.nextTree());

                }
                stream_eventFilterExpression.reset();
                // EsperEPL2Grammar.g:722:43: ( patternInclusionExpression )?
                if ( stream_patternInclusionExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_patternInclusionExpression.nextTree());

                }
                stream_patternInclusionExpression.reset();
                // EsperEPL2Grammar.g:722:71: ( databaseJoinExpression )?
                if ( stream_databaseJoinExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_databaseJoinExpression.nextTree());

                }
                stream_databaseJoinExpression.reset();
                // EsperEPL2Grammar.g:722:95: ( methodJoinExpression )?
                if ( stream_methodJoinExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_methodJoinExpression.nextTree());

                }
                stream_methodJoinExpression.reset();
                // EsperEPL2Grammar.g:723:3: ( viewExpression )*
                while ( stream_viewExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_viewExpression.nextTree());

                }
                stream_viewExpression.reset();
                // EsperEPL2Grammar.g:723:19: ( $i)?
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());

                }
                stream_i.reset();
                // EsperEPL2Grammar.g:723:23: ( $u)?
                if ( stream_u.hasNext() ) {
                    adaptor.addChild(root_1, stream_u.nextNode());

                }
                stream_u.reset();
                // EsperEPL2Grammar.g:723:27: ( $ru)?
                if ( stream_ru.hasNext() ) {
                    adaptor.addChild(root_1, stream_ru.nextNode());

                }
                stream_ru.reset();
                // EsperEPL2Grammar.g:723:32: ( $ri)?
                if ( stream_ri.hasNext() ) {
                    adaptor.addChild(root_1, stream_ri.nextNode());

                }
                stream_ri.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "streamExpression"

    public static class patternInclusionExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "patternInclusionExpression"
    // EsperEPL2Grammar.g:726:1: patternInclusionExpression : PATTERN LBRACK patternExpression RBRACK -> ^( PATTERN_INCL_EXPR patternExpression ) ;
    public final EsperEPL2GrammarParser.patternInclusionExpression_return patternInclusionExpression() throws RecognitionException {
        EsperEPL2GrammarParser.patternInclusionExpression_return retval = new EsperEPL2GrammarParser.patternInclusionExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token PATTERN165=null;
        Token LBRACK166=null;
        Token RBRACK168=null;
        EsperEPL2GrammarParser.patternExpression_return patternExpression167 = null;


        CommonTree PATTERN165_tree=null;
        CommonTree LBRACK166_tree=null;
        CommonTree RBRACK168_tree=null;
        RewriteRuleTokenStream stream_PATTERN=new RewriteRuleTokenStream(adaptor,"token PATTERN");
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleSubtreeStream stream_patternExpression=new RewriteRuleSubtreeStream(adaptor,"rule patternExpression");
        try {
            // EsperEPL2Grammar.g:727:2: ( PATTERN LBRACK patternExpression RBRACK -> ^( PATTERN_INCL_EXPR patternExpression ) )
            // EsperEPL2Grammar.g:727:4: PATTERN LBRACK patternExpression RBRACK
            {
            PATTERN165=(Token)match(input,PATTERN,FOLLOW_PATTERN_in_patternInclusionExpression3320); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_PATTERN.add(PATTERN165);

            LBRACK166=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_patternInclusionExpression3322); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK166);

            pushFollow(FOLLOW_patternExpression_in_patternInclusionExpression3324);
            patternExpression167=patternExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_patternExpression.add(patternExpression167.getTree());
            RBRACK168=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_patternInclusionExpression3326); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK168);



            // AST REWRITE
            // elements: patternExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 728:3: -> ^( PATTERN_INCL_EXPR patternExpression )
            {
                // EsperEPL2Grammar.g:728:6: ^( PATTERN_INCL_EXPR patternExpression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATTERN_INCL_EXPR, "PATTERN_INCL_EXPR"), root_1);

                adaptor.addChild(root_1, stream_patternExpression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "patternInclusionExpression"

    public static class databaseJoinExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "databaseJoinExpression"
    // EsperEPL2Grammar.g:731:1: databaseJoinExpression : SQL COLON i= IDENT LBRACK (s= STRING_LITERAL | s= QUOTED_STRING_LITERAL ) ( METADATASQL (s2= STRING_LITERAL | s2= QUOTED_STRING_LITERAL ) )? RBRACK -> ^( DATABASE_JOIN_EXPR $i $s ( $s2)? ) ;
    public final EsperEPL2GrammarParser.databaseJoinExpression_return databaseJoinExpression() throws RecognitionException {
        EsperEPL2GrammarParser.databaseJoinExpression_return retval = new EsperEPL2GrammarParser.databaseJoinExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token s=null;
        Token s2=null;
        Token SQL169=null;
        Token COLON170=null;
        Token LBRACK171=null;
        Token METADATASQL172=null;
        Token RBRACK173=null;

        CommonTree i_tree=null;
        CommonTree s_tree=null;
        CommonTree s2_tree=null;
        CommonTree SQL169_tree=null;
        CommonTree COLON170_tree=null;
        CommonTree LBRACK171_tree=null;
        CommonTree METADATASQL172_tree=null;
        CommonTree RBRACK173_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_SQL=new RewriteRuleTokenStream(adaptor,"token SQL");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token STRING_LITERAL");
        RewriteRuleTokenStream stream_METADATASQL=new RewriteRuleTokenStream(adaptor,"token METADATASQL");
        RewriteRuleTokenStream stream_QUOTED_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token QUOTED_STRING_LITERAL");

         paraphrases.push("relational data join"); 
        try {
            // EsperEPL2Grammar.g:734:2: ( SQL COLON i= IDENT LBRACK (s= STRING_LITERAL | s= QUOTED_STRING_LITERAL ) ( METADATASQL (s2= STRING_LITERAL | s2= QUOTED_STRING_LITERAL ) )? RBRACK -> ^( DATABASE_JOIN_EXPR $i $s ( $s2)? ) )
            // EsperEPL2Grammar.g:734:4: SQL COLON i= IDENT LBRACK (s= STRING_LITERAL | s= QUOTED_STRING_LITERAL ) ( METADATASQL (s2= STRING_LITERAL | s2= QUOTED_STRING_LITERAL ) )? RBRACK
            {
            SQL169=(Token)match(input,SQL,FOLLOW_SQL_in_databaseJoinExpression3359); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SQL.add(SQL169);

            COLON170=(Token)match(input,COLON,FOLLOW_COLON_in_databaseJoinExpression3361); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON170);

            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_databaseJoinExpression3365); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);

            LBRACK171=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_databaseJoinExpression3367); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK171);

            // EsperEPL2Grammar.g:734:29: (s= STRING_LITERAL | s= QUOTED_STRING_LITERAL )
            int alt64=2;
            int LA64_0 = input.LA(1);

            if ( (LA64_0==STRING_LITERAL) ) {
                alt64=1;
            }
            else if ( (LA64_0==QUOTED_STRING_LITERAL) ) {
                alt64=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 64, 0, input);

                throw nvae;
            }
            switch (alt64) {
                case 1 :
                    // EsperEPL2Grammar.g:734:30: s= STRING_LITERAL
                    {
                    s=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_databaseJoinExpression3372); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STRING_LITERAL.add(s);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:734:49: s= QUOTED_STRING_LITERAL
                    {
                    s=(Token)match(input,QUOTED_STRING_LITERAL,FOLLOW_QUOTED_STRING_LITERAL_in_databaseJoinExpression3378); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUOTED_STRING_LITERAL.add(s);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:734:74: ( METADATASQL (s2= STRING_LITERAL | s2= QUOTED_STRING_LITERAL ) )?
            int alt66=2;
            int LA66_0 = input.LA(1);

            if ( (LA66_0==METADATASQL) ) {
                alt66=1;
            }
            switch (alt66) {
                case 1 :
                    // EsperEPL2Grammar.g:734:75: METADATASQL (s2= STRING_LITERAL | s2= QUOTED_STRING_LITERAL )
                    {
                    METADATASQL172=(Token)match(input,METADATASQL,FOLLOW_METADATASQL_in_databaseJoinExpression3382); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_METADATASQL.add(METADATASQL172);

                    // EsperEPL2Grammar.g:734:87: (s2= STRING_LITERAL | s2= QUOTED_STRING_LITERAL )
                    int alt65=2;
                    int LA65_0 = input.LA(1);

                    if ( (LA65_0==STRING_LITERAL) ) {
                        alt65=1;
                    }
                    else if ( (LA65_0==QUOTED_STRING_LITERAL) ) {
                        alt65=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 65, 0, input);

                        throw nvae;
                    }
                    switch (alt65) {
                        case 1 :
                            // EsperEPL2Grammar.g:734:88: s2= STRING_LITERAL
                            {
                            s2=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_databaseJoinExpression3387); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_STRING_LITERAL.add(s2);


                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:734:108: s2= QUOTED_STRING_LITERAL
                            {
                            s2=(Token)match(input,QUOTED_STRING_LITERAL,FOLLOW_QUOTED_STRING_LITERAL_in_databaseJoinExpression3393); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUOTED_STRING_LITERAL.add(s2);


                            }
                            break;

                    }


                    }
                    break;

            }

            RBRACK173=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_databaseJoinExpression3398); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK173);



            // AST REWRITE
            // elements: i, s, s2
            // token labels: s2, s, i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s2=new RewriteRuleTokenStream(adaptor,"token s2",s2);
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 735:3: -> ^( DATABASE_JOIN_EXPR $i $s ( $s2)? )
            {
                // EsperEPL2Grammar.g:735:6: ^( DATABASE_JOIN_EXPR $i $s ( $s2)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DATABASE_JOIN_EXPR, "DATABASE_JOIN_EXPR"), root_1);

                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_s.nextNode());
                // EsperEPL2Grammar.g:735:33: ( $s2)?
                if ( stream_s2.hasNext() ) {
                    adaptor.addChild(root_1, stream_s2.nextNode());

                }
                stream_s2.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "databaseJoinExpression"

    public static class methodJoinExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "methodJoinExpression"
    // EsperEPL2Grammar.g:738:1: methodJoinExpression : i= IDENT COLON classIdentifier ( LPAREN ( expressionList )? RPAREN )? -> ^( METHOD_JOIN_EXPR $i classIdentifier ( expressionList )? ) ;
    public final EsperEPL2GrammarParser.methodJoinExpression_return methodJoinExpression() throws RecognitionException {
        EsperEPL2GrammarParser.methodJoinExpression_return retval = new EsperEPL2GrammarParser.methodJoinExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token COLON174=null;
        Token LPAREN176=null;
        Token RPAREN178=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier175 = null;

        EsperEPL2GrammarParser.expressionList_return expressionList177 = null;


        CommonTree i_tree=null;
        CommonTree COLON174_tree=null;
        CommonTree LPAREN176_tree=null;
        CommonTree RPAREN178_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
         paraphrases.push("method invocation join"); 
        try {
            // EsperEPL2Grammar.g:741:6: (i= IDENT COLON classIdentifier ( LPAREN ( expressionList )? RPAREN )? -> ^( METHOD_JOIN_EXPR $i classIdentifier ( expressionList )? ) )
            // EsperEPL2Grammar.g:741:11: i= IDENT COLON classIdentifier ( LPAREN ( expressionList )? RPAREN )?
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_methodJoinExpression3449); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);

            COLON174=(Token)match(input,COLON,FOLLOW_COLON_in_methodJoinExpression3451); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON174);

            pushFollow(FOLLOW_classIdentifier_in_methodJoinExpression3453);
            classIdentifier175=classIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier175.getTree());
            // EsperEPL2Grammar.g:741:41: ( LPAREN ( expressionList )? RPAREN )?
            int alt68=2;
            int LA68_0 = input.LA(1);

            if ( (LA68_0==LPAREN) ) {
                alt68=1;
            }
            switch (alt68) {
                case 1 :
                    // EsperEPL2Grammar.g:741:42: LPAREN ( expressionList )? RPAREN
                    {
                    LPAREN176=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_methodJoinExpression3456); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN176);

                    // EsperEPL2Grammar.g:741:49: ( expressionList )?
                    int alt67=2;
                    int LA67_0 = input.LA(1);

                    if ( (LA67_0==WINDOW||LA67_0==ESCAPE||(LA67_0>=NOT_EXPR && LA67_0<=EVERY_EXPR)||(LA67_0>=SUM && LA67_0<=COUNT)||LA67_0==CASE||LA67_0==OUTER||(LA67_0>=JOIN && LA67_0<=FULL)||(LA67_0>=EVENTS && LA67_0<=LAST)||(LA67_0>=UNIDIRECTIONAL && LA67_0<=CURRENT_TIMESTAMP)||LA67_0==SNAPSHOT||(LA67_0>=VARIABLE && LA67_0<=AT)||(LA67_0>=BOOLEAN_TRUE && LA67_0<=VALUE_NULL)||LA67_0==NUM_DOUBLE||LA67_0==IDENT||LA67_0==LPAREN||(LA67_0>=STRING_LITERAL && LA67_0<=QUOTED_STRING_LITERAL)||(LA67_0>=PLUS && LA67_0<=MINUS)||LA67_0==LCURLY||LA67_0==NUM_INT||LA67_0==QUESTION||(LA67_0>=TICKED_STRING_LITERAL && LA67_0<=NUM_FLOAT)) ) {
                        alt67=1;
                    }
                    switch (alt67) {
                        case 1 :
                            // EsperEPL2Grammar.g:741:49: expressionList
                            {
                            pushFollow(FOLLOW_expressionList_in_methodJoinExpression3458);
                            expressionList177=expressionList();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList177.getTree());

                            }
                            break;

                    }

                    RPAREN178=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_methodJoinExpression3461); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN178);


                    }
                    break;

            }



            // AST REWRITE
            // elements: classIdentifier, expressionList, i
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 742:10: -> ^( METHOD_JOIN_EXPR $i classIdentifier ( expressionList )? )
            {
                // EsperEPL2Grammar.g:742:13: ^( METHOD_JOIN_EXPR $i classIdentifier ( expressionList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(METHOD_JOIN_EXPR, "METHOD_JOIN_EXPR"), root_1);

                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                // EsperEPL2Grammar.g:742:51: ( expressionList )?
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());

                }
                stream_expressionList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "methodJoinExpression"

    public static class viewExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "viewExpression"
    // EsperEPL2Grammar.g:745:1: viewExpression : ns= IDENT COLON nm= IDENT LPAREN ( expressionWithTimeList )? RPAREN -> ^( VIEW_EXPR $ns $nm ( expressionWithTimeList )? ) ;
    public final EsperEPL2GrammarParser.viewExpression_return viewExpression() throws RecognitionException {
        EsperEPL2GrammarParser.viewExpression_return retval = new EsperEPL2GrammarParser.viewExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token ns=null;
        Token nm=null;
        Token COLON179=null;
        Token LPAREN180=null;
        Token RPAREN182=null;
        EsperEPL2GrammarParser.expressionWithTimeList_return expressionWithTimeList181 = null;


        CommonTree ns_tree=null;
        CommonTree nm_tree=null;
        CommonTree COLON179_tree=null;
        CommonTree LPAREN180_tree=null;
        CommonTree RPAREN182_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionWithTimeList=new RewriteRuleSubtreeStream(adaptor,"rule expressionWithTimeList");
         paraphrases.push("view specifications"); 
        try {
            // EsperEPL2Grammar.g:748:2: (ns= IDENT COLON nm= IDENT LPAREN ( expressionWithTimeList )? RPAREN -> ^( VIEW_EXPR $ns $nm ( expressionWithTimeList )? ) )
            // EsperEPL2Grammar.g:748:4: ns= IDENT COLON nm= IDENT LPAREN ( expressionWithTimeList )? RPAREN
            {
            ns=(Token)match(input,IDENT,FOLLOW_IDENT_in_viewExpression3514); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(ns);

            COLON179=(Token)match(input,COLON,FOLLOW_COLON_in_viewExpression3516); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON179);

            nm=(Token)match(input,IDENT,FOLLOW_IDENT_in_viewExpression3520); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(nm);

            LPAREN180=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_viewExpression3522); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN180);

            // EsperEPL2Grammar.g:748:35: ( expressionWithTimeList )?
            int alt69=2;
            int LA69_0 = input.LA(1);

            if ( (LA69_0==WINDOW||LA69_0==ESCAPE||(LA69_0>=NOT_EXPR && LA69_0<=EVERY_EXPR)||(LA69_0>=SUM && LA69_0<=COUNT)||LA69_0==CASE||LA69_0==OUTER||(LA69_0>=JOIN && LA69_0<=FULL)||(LA69_0>=EVENTS && LA69_0<=LAST)||(LA69_0>=UNIDIRECTIONAL && LA69_0<=CURRENT_TIMESTAMP)||LA69_0==SNAPSHOT||(LA69_0>=VARIABLE && LA69_0<=AT)||(LA69_0>=BOOLEAN_TRUE && LA69_0<=VALUE_NULL)||LA69_0==NUM_DOUBLE||LA69_0==IDENT||LA69_0==LPAREN||(LA69_0>=STAR && LA69_0<=LBRACK)||(LA69_0>=STRING_LITERAL && LA69_0<=QUOTED_STRING_LITERAL)||(LA69_0>=PLUS && LA69_0<=MINUS)||LA69_0==LCURLY||LA69_0==NUM_INT||LA69_0==QUESTION||(LA69_0>=TICKED_STRING_LITERAL && LA69_0<=NUM_FLOAT)) ) {
                alt69=1;
            }
            switch (alt69) {
                case 1 :
                    // EsperEPL2Grammar.g:748:35: expressionWithTimeList
                    {
                    pushFollow(FOLLOW_expressionWithTimeList_in_viewExpression3524);
                    expressionWithTimeList181=expressionWithTimeList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expressionWithTimeList.add(expressionWithTimeList181.getTree());

                    }
                    break;

            }

            RPAREN182=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_viewExpression3527); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN182);



            // AST REWRITE
            // elements: expressionWithTimeList, ns, nm
            // token labels: ns, nm
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_ns=new RewriteRuleTokenStream(adaptor,"token ns",ns);
            RewriteRuleTokenStream stream_nm=new RewriteRuleTokenStream(adaptor,"token nm",nm);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 749:3: -> ^( VIEW_EXPR $ns $nm ( expressionWithTimeList )? )
            {
                // EsperEPL2Grammar.g:749:6: ^( VIEW_EXPR $ns $nm ( expressionWithTimeList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VIEW_EXPR, "VIEW_EXPR"), root_1);

                adaptor.addChild(root_1, stream_ns.nextNode());
                adaptor.addChild(root_1, stream_nm.nextNode());
                // EsperEPL2Grammar.g:749:26: ( expressionWithTimeList )?
                if ( stream_expressionWithTimeList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionWithTimeList.nextTree());

                }
                stream_expressionWithTimeList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "viewExpression"

    public static class groupByListExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "groupByListExpr"
    // EsperEPL2Grammar.g:752:1: groupByListExpr : expression ( COMMA expression )* -> ^( GROUP_BY_EXPR ( expression )+ ) ;
    public final EsperEPL2GrammarParser.groupByListExpr_return groupByListExpr() throws RecognitionException {
        EsperEPL2GrammarParser.groupByListExpr_return retval = new EsperEPL2GrammarParser.groupByListExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA184=null;
        EsperEPL2GrammarParser.expression_return expression183 = null;

        EsperEPL2GrammarParser.expression_return expression185 = null;


        CommonTree COMMA184_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
         paraphrases.push("group-by clause"); 
        try {
            // EsperEPL2Grammar.g:755:2: ( expression ( COMMA expression )* -> ^( GROUP_BY_EXPR ( expression )+ ) )
            // EsperEPL2Grammar.g:755:4: expression ( COMMA expression )*
            {
            pushFollow(FOLLOW_expression_in_groupByListExpr3566);
            expression183=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression183.getTree());
            // EsperEPL2Grammar.g:755:15: ( COMMA expression )*
            loop70:
            do {
                int alt70=2;
                int LA70_0 = input.LA(1);

                if ( (LA70_0==COMMA) ) {
                    alt70=1;
                }


                switch (alt70) {
            	case 1 :
            	    // EsperEPL2Grammar.g:755:16: COMMA expression
            	    {
            	    COMMA184=(Token)match(input,COMMA,FOLLOW_COMMA_in_groupByListExpr3569); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA184);

            	    pushFollow(FOLLOW_expression_in_groupByListExpr3571);
            	    expression185=expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_expression.add(expression185.getTree());

            	    }
            	    break;

            	default :
            	    break loop70;
                }
            } while (true);



            // AST REWRITE
            // elements: expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 756:3: -> ^( GROUP_BY_EXPR ( expression )+ )
            {
                // EsperEPL2Grammar.g:756:6: ^( GROUP_BY_EXPR ( expression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GROUP_BY_EXPR, "GROUP_BY_EXPR"), root_1);

                if ( !(stream_expression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());

                }
                stream_expression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "groupByListExpr"

    public static class orderByListExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "orderByListExpr"
    // EsperEPL2Grammar.g:759:1: orderByListExpr : orderByListElement ( COMMA orderByListElement )* -> ^( ORDER_BY_EXPR ( orderByListElement )+ ) ;
    public final EsperEPL2GrammarParser.orderByListExpr_return orderByListExpr() throws RecognitionException {
        EsperEPL2GrammarParser.orderByListExpr_return retval = new EsperEPL2GrammarParser.orderByListExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA187=null;
        EsperEPL2GrammarParser.orderByListElement_return orderByListElement186 = null;

        EsperEPL2GrammarParser.orderByListElement_return orderByListElement188 = null;


        CommonTree COMMA187_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_orderByListElement=new RewriteRuleSubtreeStream(adaptor,"rule orderByListElement");
         paraphrases.push("order by clause"); 
        try {
            // EsperEPL2Grammar.g:762:2: ( orderByListElement ( COMMA orderByListElement )* -> ^( ORDER_BY_EXPR ( orderByListElement )+ ) )
            // EsperEPL2Grammar.g:762:4: orderByListElement ( COMMA orderByListElement )*
            {
            pushFollow(FOLLOW_orderByListElement_in_orderByListExpr3606);
            orderByListElement186=orderByListElement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_orderByListElement.add(orderByListElement186.getTree());
            // EsperEPL2Grammar.g:762:23: ( COMMA orderByListElement )*
            loop71:
            do {
                int alt71=2;
                int LA71_0 = input.LA(1);

                if ( (LA71_0==COMMA) ) {
                    alt71=1;
                }


                switch (alt71) {
            	case 1 :
            	    // EsperEPL2Grammar.g:762:24: COMMA orderByListElement
            	    {
            	    COMMA187=(Token)match(input,COMMA,FOLLOW_COMMA_in_orderByListExpr3609); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA187);

            	    pushFollow(FOLLOW_orderByListElement_in_orderByListExpr3611);
            	    orderByListElement188=orderByListElement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_orderByListElement.add(orderByListElement188.getTree());

            	    }
            	    break;

            	default :
            	    break loop71;
                }
            } while (true);



            // AST REWRITE
            // elements: orderByListElement
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 763:3: -> ^( ORDER_BY_EXPR ( orderByListElement )+ )
            {
                // EsperEPL2Grammar.g:763:6: ^( ORDER_BY_EXPR ( orderByListElement )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ORDER_BY_EXPR, "ORDER_BY_EXPR"), root_1);

                if ( !(stream_orderByListElement.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_orderByListElement.hasNext() ) {
                    adaptor.addChild(root_1, stream_orderByListElement.nextTree());

                }
                stream_orderByListElement.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "orderByListExpr"

    public static class orderByListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "orderByListElement"
    // EsperEPL2Grammar.g:766:1: orderByListElement : expression (d= ASC | d= DESC )? -> ^( ORDER_ELEMENT_EXPR expression ( $d)? ) ;
    public final EsperEPL2GrammarParser.orderByListElement_return orderByListElement() throws RecognitionException {
        EsperEPL2GrammarParser.orderByListElement_return retval = new EsperEPL2GrammarParser.orderByListElement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token d=null;
        EsperEPL2GrammarParser.expression_return expression189 = null;


        CommonTree d_tree=null;
        RewriteRuleTokenStream stream_ASC=new RewriteRuleTokenStream(adaptor,"token ASC");
        RewriteRuleTokenStream stream_DESC=new RewriteRuleTokenStream(adaptor,"token DESC");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            // EsperEPL2Grammar.g:767:2: ( expression (d= ASC | d= DESC )? -> ^( ORDER_ELEMENT_EXPR expression ( $d)? ) )
            // EsperEPL2Grammar.g:767:4: expression (d= ASC | d= DESC )?
            {
            pushFollow(FOLLOW_expression_in_orderByListElement3636);
            expression189=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression189.getTree());
            // EsperEPL2Grammar.g:767:15: (d= ASC | d= DESC )?
            int alt72=3;
            int LA72_0 = input.LA(1);

            if ( (LA72_0==ASC) ) {
                alt72=1;
            }
            else if ( (LA72_0==DESC) ) {
                alt72=2;
            }
            switch (alt72) {
                case 1 :
                    // EsperEPL2Grammar.g:767:16: d= ASC
                    {
                    d=(Token)match(input,ASC,FOLLOW_ASC_in_orderByListElement3641); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASC.add(d);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:767:22: d= DESC
                    {
                    d=(Token)match(input,DESC,FOLLOW_DESC_in_orderByListElement3645); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DESC.add(d);


                    }
                    break;

            }



            // AST REWRITE
            // elements: expression, d
            // token labels: d
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_d=new RewriteRuleTokenStream(adaptor,"token d",d);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 768:3: -> ^( ORDER_ELEMENT_EXPR expression ( $d)? )
            {
                // EsperEPL2Grammar.g:768:6: ^( ORDER_ELEMENT_EXPR expression ( $d)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ORDER_ELEMENT_EXPR, "ORDER_ELEMENT_EXPR"), root_1);

                adaptor.addChild(root_1, stream_expression.nextTree());
                // EsperEPL2Grammar.g:768:38: ( $d)?
                if ( stream_d.hasNext() ) {
                    adaptor.addChild(root_1, stream_d.nextNode());

                }
                stream_d.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "orderByListElement"

    public static class havingClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "havingClause"
    // EsperEPL2Grammar.g:771:1: havingClause : evalOrExpression -> ^( HAVING_EXPR evalOrExpression ) ;
    public final EsperEPL2GrammarParser.havingClause_return havingClause() throws RecognitionException {
        EsperEPL2GrammarParser.havingClause_return retval = new EsperEPL2GrammarParser.havingClause_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.evalOrExpression_return evalOrExpression190 = null;


        RewriteRuleSubtreeStream stream_evalOrExpression=new RewriteRuleSubtreeStream(adaptor,"rule evalOrExpression");
         paraphrases.push("having clause"); 
        try {
            // EsperEPL2Grammar.g:774:2: ( evalOrExpression -> ^( HAVING_EXPR evalOrExpression ) )
            // EsperEPL2Grammar.g:774:4: evalOrExpression
            {
            pushFollow(FOLLOW_evalOrExpression_in_havingClause3683);
            evalOrExpression190=evalOrExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_evalOrExpression.add(evalOrExpression190.getTree());


            // AST REWRITE
            // elements: evalOrExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 775:3: -> ^( HAVING_EXPR evalOrExpression )
            {
                // EsperEPL2Grammar.g:775:6: ^( HAVING_EXPR evalOrExpression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(HAVING_EXPR, "HAVING_EXPR"), root_1);

                adaptor.addChild(root_1, stream_evalOrExpression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "havingClause"

    public static class outputLimit_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "outputLimit"
    // EsperEPL2Grammar.g:778:1: outputLimit : (k= ALL | k= FIRST | k= LAST | k= SNAPSHOT )? ( (ev= EVERY_EXPR ( ( timePeriod )=> timePeriod | ( number | i= IDENT ) (e= EVENTS ) ) ) | (at= AT crontabLimitParameterSet ) | (wh= WHEN expression ( THEN onSetExpr )? ) ) -> {$ev != null && $e != null}? ^( EVENT_LIMIT_EXPR ( $k)? ( number )? ( $i)? ) -> {$ev != null}? ^( TIMEPERIOD_LIMIT_EXPR ( $k)? timePeriod ) -> {$at != null}? ^( CRONTAB_LIMIT_EXPR ( $k)? crontabLimitParameterSet ) -> ^( WHEN_LIMIT_EXPR ( $k)? expression ( onSetExpr )? ) ;
    public final EsperEPL2GrammarParser.outputLimit_return outputLimit() throws RecognitionException {
        EsperEPL2GrammarParser.outputLimit_return retval = new EsperEPL2GrammarParser.outputLimit_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token k=null;
        Token ev=null;
        Token i=null;
        Token e=null;
        Token at=null;
        Token wh=null;
        Token THEN195=null;
        EsperEPL2GrammarParser.timePeriod_return timePeriod191 = null;

        EsperEPL2GrammarParser.number_return number192 = null;

        EsperEPL2GrammarParser.crontabLimitParameterSet_return crontabLimitParameterSet193 = null;

        EsperEPL2GrammarParser.expression_return expression194 = null;

        EsperEPL2GrammarParser.onSetExpr_return onSetExpr196 = null;


        CommonTree k_tree=null;
        CommonTree ev_tree=null;
        CommonTree i_tree=null;
        CommonTree e_tree=null;
        CommonTree at_tree=null;
        CommonTree wh_tree=null;
        CommonTree THEN195_tree=null;
        RewriteRuleTokenStream stream_AT=new RewriteRuleTokenStream(adaptor,"token AT");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_THEN=new RewriteRuleTokenStream(adaptor,"token THEN");
        RewriteRuleTokenStream stream_LAST=new RewriteRuleTokenStream(adaptor,"token LAST");
        RewriteRuleTokenStream stream_SNAPSHOT=new RewriteRuleTokenStream(adaptor,"token SNAPSHOT");
        RewriteRuleTokenStream stream_EVENTS=new RewriteRuleTokenStream(adaptor,"token EVENTS");
        RewriteRuleTokenStream stream_WHEN=new RewriteRuleTokenStream(adaptor,"token WHEN");
        RewriteRuleTokenStream stream_EVERY_EXPR=new RewriteRuleTokenStream(adaptor,"token EVERY_EXPR");
        RewriteRuleTokenStream stream_ALL=new RewriteRuleTokenStream(adaptor,"token ALL");
        RewriteRuleTokenStream stream_FIRST=new RewriteRuleTokenStream(adaptor,"token FIRST");
        RewriteRuleSubtreeStream stream_crontabLimitParameterSet=new RewriteRuleSubtreeStream(adaptor,"rule crontabLimitParameterSet");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_timePeriod=new RewriteRuleSubtreeStream(adaptor,"rule timePeriod");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_onSetExpr=new RewriteRuleSubtreeStream(adaptor,"rule onSetExpr");
         paraphrases.push("output rate clause"); 
        try {
            // EsperEPL2Grammar.g:781:2: ( (k= ALL | k= FIRST | k= LAST | k= SNAPSHOT )? ( (ev= EVERY_EXPR ( ( timePeriod )=> timePeriod | ( number | i= IDENT ) (e= EVENTS ) ) ) | (at= AT crontabLimitParameterSet ) | (wh= WHEN expression ( THEN onSetExpr )? ) ) -> {$ev != null && $e != null}? ^( EVENT_LIMIT_EXPR ( $k)? ( number )? ( $i)? ) -> {$ev != null}? ^( TIMEPERIOD_LIMIT_EXPR ( $k)? timePeriod ) -> {$at != null}? ^( CRONTAB_LIMIT_EXPR ( $k)? crontabLimitParameterSet ) -> ^( WHEN_LIMIT_EXPR ( $k)? expression ( onSetExpr )? ) )
            // EsperEPL2Grammar.g:781:6: (k= ALL | k= FIRST | k= LAST | k= SNAPSHOT )? ( (ev= EVERY_EXPR ( ( timePeriod )=> timePeriod | ( number | i= IDENT ) (e= EVENTS ) ) ) | (at= AT crontabLimitParameterSet ) | (wh= WHEN expression ( THEN onSetExpr )? ) )
            {
            // EsperEPL2Grammar.g:781:6: (k= ALL | k= FIRST | k= LAST | k= SNAPSHOT )?
            int alt73=5;
            switch ( input.LA(1) ) {
                case ALL:
                    {
                    alt73=1;
                    }
                    break;
                case FIRST:
                    {
                    alt73=2;
                    }
                    break;
                case LAST:
                    {
                    alt73=3;
                    }
                    break;
                case SNAPSHOT:
                    {
                    alt73=4;
                    }
                    break;
            }

            switch (alt73) {
                case 1 :
                    // EsperEPL2Grammar.g:781:7: k= ALL
                    {
                    k=(Token)match(input,ALL,FOLLOW_ALL_in_outputLimit3721); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ALL.add(k);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:781:13: k= FIRST
                    {
                    k=(Token)match(input,FIRST,FOLLOW_FIRST_in_outputLimit3725); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FIRST.add(k);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:781:21: k= LAST
                    {
                    k=(Token)match(input,LAST,FOLLOW_LAST_in_outputLimit3729); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LAST.add(k);


                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:781:28: k= SNAPSHOT
                    {
                    k=(Token)match(input,SNAPSHOT,FOLLOW_SNAPSHOT_in_outputLimit3733); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SNAPSHOT.add(k);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:782:8: ( (ev= EVERY_EXPR ( ( timePeriod )=> timePeriod | ( number | i= IDENT ) (e= EVENTS ) ) ) | (at= AT crontabLimitParameterSet ) | (wh= WHEN expression ( THEN onSetExpr )? ) )
            int alt77=3;
            switch ( input.LA(1) ) {
            case EVERY_EXPR:
                {
                alt77=1;
                }
                break;
            case AT:
                {
                alt77=2;
                }
                break;
            case WHEN:
                {
                alt77=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 77, 0, input);

                throw nvae;
            }

            switch (alt77) {
                case 1 :
                    // EsperEPL2Grammar.g:783:10: (ev= EVERY_EXPR ( ( timePeriod )=> timePeriod | ( number | i= IDENT ) (e= EVENTS ) ) )
                    {
                    // EsperEPL2Grammar.g:783:10: (ev= EVERY_EXPR ( ( timePeriod )=> timePeriod | ( number | i= IDENT ) (e= EVENTS ) ) )
                    // EsperEPL2Grammar.g:783:12: ev= EVERY_EXPR ( ( timePeriod )=> timePeriod | ( number | i= IDENT ) (e= EVENTS ) )
                    {
                    ev=(Token)match(input,EVERY_EXPR,FOLLOW_EVERY_EXPR_in_outputLimit3760); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EVERY_EXPR.add(ev);

                    // EsperEPL2Grammar.g:784:5: ( ( timePeriod )=> timePeriod | ( number | i= IDENT ) (e= EVENTS ) )
                    int alt75=2;
                    int LA75_0 = input.LA(1);

                    if ( (LA75_0==NUM_INT) ) {
                        int LA75_1 = input.LA(2);

                        if ( (LA75_1==EVENTS) ) {
                            alt75=2;
                        }
                        else if ( (LA75_1==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt75=1;
                        }
                        else if ( (LA75_1==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt75=1;
                        }
                        else if ( (LA75_1==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt75=1;
                        }
                        else if ( (LA75_1==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt75=1;
                        }
                        else if ( (LA75_1==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt75=1;
                        }
                        else if ( (LA75_1==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt75=1;
                        }
                        else if ( (LA75_1==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt75=1;
                        }
                        else if ( (LA75_1==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt75=1;
                        }
                        else if ( (LA75_1==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt75=1;
                        }
                        else if ( (LA75_1==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt75=1;
                        }
                        else if ( (LA75_1==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt75=1;
                        }
                        else if ( (LA75_1==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt75=1;
                        }
                        else if ( (LA75_1==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt75=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 75, 1, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA75_0==NUM_LONG) ) {
                        int LA75_2 = input.LA(2);

                        if ( (LA75_2==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt75=1;
                        }
                        else if ( (LA75_2==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt75=1;
                        }
                        else if ( (LA75_2==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt75=1;
                        }
                        else if ( (LA75_2==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt75=1;
                        }
                        else if ( (LA75_2==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt75=1;
                        }
                        else if ( (LA75_2==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt75=1;
                        }
                        else if ( (LA75_2==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt75=1;
                        }
                        else if ( (LA75_2==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt75=1;
                        }
                        else if ( (LA75_2==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt75=1;
                        }
                        else if ( (LA75_2==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt75=1;
                        }
                        else if ( (LA75_2==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt75=1;
                        }
                        else if ( (LA75_2==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt75=1;
                        }
                        else if ( (LA75_2==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt75=1;
                        }
                        else if ( (LA75_2==EVENTS) ) {
                            alt75=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 75, 2, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA75_0==NUM_FLOAT) ) {
                        int LA75_3 = input.LA(2);

                        if ( (LA75_3==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt75=1;
                        }
                        else if ( (LA75_3==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt75=1;
                        }
                        else if ( (LA75_3==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt75=1;
                        }
                        else if ( (LA75_3==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt75=1;
                        }
                        else if ( (LA75_3==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt75=1;
                        }
                        else if ( (LA75_3==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt75=1;
                        }
                        else if ( (LA75_3==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt75=1;
                        }
                        else if ( (LA75_3==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt75=1;
                        }
                        else if ( (LA75_3==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt75=1;
                        }
                        else if ( (LA75_3==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt75=1;
                        }
                        else if ( (LA75_3==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt75=1;
                        }
                        else if ( (LA75_3==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt75=1;
                        }
                        else if ( (LA75_3==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt75=1;
                        }
                        else if ( (LA75_3==EVENTS) ) {
                            alt75=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 75, 3, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA75_0==NUM_DOUBLE) ) {
                        int LA75_4 = input.LA(2);

                        if ( (LA75_4==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt75=1;
                        }
                        else if ( (LA75_4==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt75=1;
                        }
                        else if ( (LA75_4==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt75=1;
                        }
                        else if ( (LA75_4==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt75=1;
                        }
                        else if ( (LA75_4==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt75=1;
                        }
                        else if ( (LA75_4==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt75=1;
                        }
                        else if ( (LA75_4==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt75=1;
                        }
                        else if ( (LA75_4==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt75=1;
                        }
                        else if ( (LA75_4==EVENTS) ) {
                            alt75=2;
                        }
                        else if ( (LA75_4==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt75=1;
                        }
                        else if ( (LA75_4==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt75=1;
                        }
                        else if ( (LA75_4==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt75=1;
                        }
                        else if ( (LA75_4==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt75=1;
                        }
                        else if ( (LA75_4==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt75=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 75, 4, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA75_0==IDENT) ) {
                        int LA75_5 = input.LA(2);

                        if ( (LA75_5==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt75=1;
                        }
                        else if ( (LA75_5==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt75=1;
                        }
                        else if ( (LA75_5==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt75=1;
                        }
                        else if ( (LA75_5==EVENTS) ) {
                            alt75=2;
                        }
                        else if ( (LA75_5==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt75=1;
                        }
                        else if ( (LA75_5==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt75=1;
                        }
                        else if ( (LA75_5==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt75=1;
                        }
                        else if ( (LA75_5==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt75=1;
                        }
                        else if ( (LA75_5==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt75=1;
                        }
                        else if ( (LA75_5==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt75=1;
                        }
                        else if ( (LA75_5==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt75=1;
                        }
                        else if ( (LA75_5==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt75=1;
                        }
                        else if ( (LA75_5==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt75=1;
                        }
                        else if ( (LA75_5==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt75=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 75, 5, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA75_0==QUESTION) && (synpred2_EsperEPL2Grammar())) {
                        alt75=1;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 75, 0, input);

                        throw nvae;
                    }
                    switch (alt75) {
                        case 1 :
                            // EsperEPL2Grammar.g:785:7: ( timePeriod )=> timePeriod
                            {
                            pushFollow(FOLLOW_timePeriod_in_outputLimit3782);
                            timePeriod191=timePeriod();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_timePeriod.add(timePeriod191.getTree());

                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:786:7: ( number | i= IDENT ) (e= EVENTS )
                            {
                            // EsperEPL2Grammar.g:786:7: ( number | i= IDENT )
                            int alt74=2;
                            int LA74_0 = input.LA(1);

                            if ( (LA74_0==NUM_DOUBLE||LA74_0==NUM_INT||(LA74_0>=NUM_LONG && LA74_0<=NUM_FLOAT)) ) {
                                alt74=1;
                            }
                            else if ( (LA74_0==IDENT) ) {
                                alt74=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 74, 0, input);

                                throw nvae;
                            }
                            switch (alt74) {
                                case 1 :
                                    // EsperEPL2Grammar.g:786:8: number
                                    {
                                    pushFollow(FOLLOW_number_in_outputLimit3791);
                                    number192=number();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_number.add(number192.getTree());

                                    }
                                    break;
                                case 2 :
                                    // EsperEPL2Grammar.g:786:17: i= IDENT
                                    {
                                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_outputLimit3797); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                                    }
                                    break;

                            }

                            // EsperEPL2Grammar.g:786:26: (e= EVENTS )
                            // EsperEPL2Grammar.g:786:27: e= EVENTS
                            {
                            e=(Token)match(input,EVENTS,FOLLOW_EVENTS_in_outputLimit3803); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_EVENTS.add(e);


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:790:3: (at= AT crontabLimitParameterSet )
                    {
                    // EsperEPL2Grammar.g:790:3: (at= AT crontabLimitParameterSet )
                    // EsperEPL2Grammar.g:790:5: at= AT crontabLimitParameterSet
                    {
                    at=(Token)match(input,AT,FOLLOW_AT_in_outputLimit3826); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AT.add(at);

                    pushFollow(FOLLOW_crontabLimitParameterSet_in_outputLimit3828);
                    crontabLimitParameterSet193=crontabLimitParameterSet();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_crontabLimitParameterSet.add(crontabLimitParameterSet193.getTree());

                    }


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:792:3: (wh= WHEN expression ( THEN onSetExpr )? )
                    {
                    // EsperEPL2Grammar.g:792:3: (wh= WHEN expression ( THEN onSetExpr )? )
                    // EsperEPL2Grammar.g:792:5: wh= WHEN expression ( THEN onSetExpr )?
                    {
                    wh=(Token)match(input,WHEN,FOLLOW_WHEN_in_outputLimit3842); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHEN.add(wh);

                    pushFollow(FOLLOW_expression_in_outputLimit3844);
                    expression194=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression194.getTree());
                    // EsperEPL2Grammar.g:792:24: ( THEN onSetExpr )?
                    int alt76=2;
                    int LA76_0 = input.LA(1);

                    if ( (LA76_0==THEN) ) {
                        alt76=1;
                    }
                    switch (alt76) {
                        case 1 :
                            // EsperEPL2Grammar.g:792:25: THEN onSetExpr
                            {
                            THEN195=(Token)match(input,THEN,FOLLOW_THEN_in_outputLimit3847); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_THEN.add(THEN195);

                            pushFollow(FOLLOW_onSetExpr_in_outputLimit3849);
                            onSetExpr196=onSetExpr();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_onSetExpr.add(onSetExpr196.getTree());

                            }
                            break;

                    }


                    }


                    }
                    break;

            }



            // AST REWRITE
            // elements: k, expression, number, k, crontabLimitParameterSet, k, onSetExpr, k, timePeriod, i
            // token labels: k, i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_k=new RewriteRuleTokenStream(adaptor,"token k",k);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 794:6: -> {$ev != null && $e != null}? ^( EVENT_LIMIT_EXPR ( $k)? ( number )? ( $i)? )
            if (ev != null && e != null) {
                // EsperEPL2Grammar.g:794:38: ^( EVENT_LIMIT_EXPR ( $k)? ( number )? ( $i)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_LIMIT_EXPR, "EVENT_LIMIT_EXPR"), root_1);

                // EsperEPL2Grammar.g:794:57: ( $k)?
                if ( stream_k.hasNext() ) {
                    adaptor.addChild(root_1, stream_k.nextNode());

                }
                stream_k.reset();
                // EsperEPL2Grammar.g:794:61: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:794:69: ( $i)?
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());

                }
                stream_i.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 795:6: -> {$ev != null}? ^( TIMEPERIOD_LIMIT_EXPR ( $k)? timePeriod )
            if (ev != null) {
                // EsperEPL2Grammar.g:795:24: ^( TIMEPERIOD_LIMIT_EXPR ( $k)? timePeriod )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TIMEPERIOD_LIMIT_EXPR, "TIMEPERIOD_LIMIT_EXPR"), root_1);

                // EsperEPL2Grammar.g:795:48: ( $k)?
                if ( stream_k.hasNext() ) {
                    adaptor.addChild(root_1, stream_k.nextNode());

                }
                stream_k.reset();
                adaptor.addChild(root_1, stream_timePeriod.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 796:6: -> {$at != null}? ^( CRONTAB_LIMIT_EXPR ( $k)? crontabLimitParameterSet )
            if (at != null) {
                // EsperEPL2Grammar.g:796:24: ^( CRONTAB_LIMIT_EXPR ( $k)? crontabLimitParameterSet )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CRONTAB_LIMIT_EXPR, "CRONTAB_LIMIT_EXPR"), root_1);

                // EsperEPL2Grammar.g:796:45: ( $k)?
                if ( stream_k.hasNext() ) {
                    adaptor.addChild(root_1, stream_k.nextNode());

                }
                stream_k.reset();
                adaptor.addChild(root_1, stream_crontabLimitParameterSet.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 797:6: -> ^( WHEN_LIMIT_EXPR ( $k)? expression ( onSetExpr )? )
            {
                // EsperEPL2Grammar.g:797:9: ^( WHEN_LIMIT_EXPR ( $k)? expression ( onSetExpr )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WHEN_LIMIT_EXPR, "WHEN_LIMIT_EXPR"), root_1);

                // EsperEPL2Grammar.g:797:27: ( $k)?
                if ( stream_k.hasNext() ) {
                    adaptor.addChild(root_1, stream_k.nextNode());

                }
                stream_k.reset();
                adaptor.addChild(root_1, stream_expression.nextTree());
                // EsperEPL2Grammar.g:797:42: ( onSetExpr )?
                if ( stream_onSetExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetExpr.nextTree());

                }
                stream_onSetExpr.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "outputLimit"

    public static class rowLimit_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rowLimit"
    // EsperEPL2Grammar.g:800:1: rowLimit : (n1= numberconstant | i1= IDENT ) ( (c= COMMA | o= OFFSET ) (n2= numberconstant | i2= IDENT ) )? -> ^( ROW_LIMIT_EXPR ( $n1)? ( $i1)? ( $n2)? ( $i2)? ( $o)? ( $c)? ) ;
    public final EsperEPL2GrammarParser.rowLimit_return rowLimit() throws RecognitionException {
        EsperEPL2GrammarParser.rowLimit_return retval = new EsperEPL2GrammarParser.rowLimit_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i1=null;
        Token c=null;
        Token o=null;
        Token i2=null;
        EsperEPL2GrammarParser.numberconstant_return n1 = null;

        EsperEPL2GrammarParser.numberconstant_return n2 = null;


        CommonTree i1_tree=null;
        CommonTree c_tree=null;
        CommonTree o_tree=null;
        CommonTree i2_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_OFFSET=new RewriteRuleTokenStream(adaptor,"token OFFSET");
        RewriteRuleSubtreeStream stream_numberconstant=new RewriteRuleSubtreeStream(adaptor,"rule numberconstant");
         paraphrases.push("row limit clause"); 
        try {
            // EsperEPL2Grammar.g:803:2: ( (n1= numberconstant | i1= IDENT ) ( (c= COMMA | o= OFFSET ) (n2= numberconstant | i2= IDENT ) )? -> ^( ROW_LIMIT_EXPR ( $n1)? ( $i1)? ( $n2)? ( $i2)? ( $o)? ( $c)? ) )
            // EsperEPL2Grammar.g:803:6: (n1= numberconstant | i1= IDENT ) ( (c= COMMA | o= OFFSET ) (n2= numberconstant | i2= IDENT ) )?
            {
            // EsperEPL2Grammar.g:803:6: (n1= numberconstant | i1= IDENT )
            int alt78=2;
            int LA78_0 = input.LA(1);

            if ( (LA78_0==NUM_DOUBLE||(LA78_0>=PLUS && LA78_0<=MINUS)||LA78_0==NUM_INT||(LA78_0>=NUM_LONG && LA78_0<=NUM_FLOAT)) ) {
                alt78=1;
            }
            else if ( (LA78_0==IDENT) ) {
                alt78=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 78, 0, input);

                throw nvae;
            }
            switch (alt78) {
                case 1 :
                    // EsperEPL2Grammar.g:803:7: n1= numberconstant
                    {
                    pushFollow(FOLLOW_numberconstant_in_rowLimit3978);
                    n1=numberconstant();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_numberconstant.add(n1.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:803:27: i1= IDENT
                    {
                    i1=(Token)match(input,IDENT,FOLLOW_IDENT_in_rowLimit3984); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i1);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:803:37: ( (c= COMMA | o= OFFSET ) (n2= numberconstant | i2= IDENT ) )?
            int alt81=2;
            int LA81_0 = input.LA(1);

            if ( (LA81_0==OFFSET||LA81_0==COMMA) ) {
                alt81=1;
            }
            switch (alt81) {
                case 1 :
                    // EsperEPL2Grammar.g:803:38: (c= COMMA | o= OFFSET ) (n2= numberconstant | i2= IDENT )
                    {
                    // EsperEPL2Grammar.g:803:38: (c= COMMA | o= OFFSET )
                    int alt79=2;
                    int LA79_0 = input.LA(1);

                    if ( (LA79_0==COMMA) ) {
                        alt79=1;
                    }
                    else if ( (LA79_0==OFFSET) ) {
                        alt79=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 79, 0, input);

                        throw nvae;
                    }
                    switch (alt79) {
                        case 1 :
                            // EsperEPL2Grammar.g:803:39: c= COMMA
                            {
                            c=(Token)match(input,COMMA,FOLLOW_COMMA_in_rowLimit3991); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COMMA.add(c);


                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:803:49: o= OFFSET
                            {
                            o=(Token)match(input,OFFSET,FOLLOW_OFFSET_in_rowLimit3997); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_OFFSET.add(o);


                            }
                            break;

                    }

                    // EsperEPL2Grammar.g:803:59: (n2= numberconstant | i2= IDENT )
                    int alt80=2;
                    int LA80_0 = input.LA(1);

                    if ( (LA80_0==NUM_DOUBLE||(LA80_0>=PLUS && LA80_0<=MINUS)||LA80_0==NUM_INT||(LA80_0>=NUM_LONG && LA80_0<=NUM_FLOAT)) ) {
                        alt80=1;
                    }
                    else if ( (LA80_0==IDENT) ) {
                        alt80=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 80, 0, input);

                        throw nvae;
                    }
                    switch (alt80) {
                        case 1 :
                            // EsperEPL2Grammar.g:803:60: n2= numberconstant
                            {
                            pushFollow(FOLLOW_numberconstant_in_rowLimit4003);
                            n2=numberconstant();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_numberconstant.add(n2.getTree());

                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:803:80: i2= IDENT
                            {
                            i2=(Token)match(input,IDENT,FOLLOW_IDENT_in_rowLimit4009); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IDENT.add(i2);


                            }
                            break;

                    }


                    }
                    break;

            }



            // AST REWRITE
            // elements: n2, o, c, i2, i1, n1
            // token labels: c, o, i2, i1
            // rule labels: n1, retval, n2
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_c=new RewriteRuleTokenStream(adaptor,"token c",c);
            RewriteRuleTokenStream stream_o=new RewriteRuleTokenStream(adaptor,"token o",o);
            RewriteRuleTokenStream stream_i2=new RewriteRuleTokenStream(adaptor,"token i2",i2);
            RewriteRuleTokenStream stream_i1=new RewriteRuleTokenStream(adaptor,"token i1",i1);
            RewriteRuleSubtreeStream stream_n1=new RewriteRuleSubtreeStream(adaptor,"token n1",n1!=null?n1.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_n2=new RewriteRuleSubtreeStream(adaptor,"token n2",n2!=null?n2.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 804:6: -> ^( ROW_LIMIT_EXPR ( $n1)? ( $i1)? ( $n2)? ( $i2)? ( $o)? ( $c)? )
            {
                // EsperEPL2Grammar.g:804:9: ^( ROW_LIMIT_EXPR ( $n1)? ( $i1)? ( $n2)? ( $i2)? ( $o)? ( $c)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ROW_LIMIT_EXPR, "ROW_LIMIT_EXPR"), root_1);

                // EsperEPL2Grammar.g:804:26: ( $n1)?
                if ( stream_n1.hasNext() ) {
                    adaptor.addChild(root_1, stream_n1.nextTree());

                }
                stream_n1.reset();
                // EsperEPL2Grammar.g:804:31: ( $i1)?
                if ( stream_i1.hasNext() ) {
                    adaptor.addChild(root_1, stream_i1.nextNode());

                }
                stream_i1.reset();
                // EsperEPL2Grammar.g:804:36: ( $n2)?
                if ( stream_n2.hasNext() ) {
                    adaptor.addChild(root_1, stream_n2.nextTree());

                }
                stream_n2.reset();
                // EsperEPL2Grammar.g:804:41: ( $i2)?
                if ( stream_i2.hasNext() ) {
                    adaptor.addChild(root_1, stream_i2.nextNode());

                }
                stream_i2.reset();
                // EsperEPL2Grammar.g:804:46: ( $o)?
                if ( stream_o.hasNext() ) {
                    adaptor.addChild(root_1, stream_o.nextNode());

                }
                stream_o.reset();
                // EsperEPL2Grammar.g:804:50: ( $c)?
                if ( stream_c.hasNext() ) {
                    adaptor.addChild(root_1, stream_c.nextNode());

                }
                stream_c.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "rowLimit"

    public static class crontabLimitParameterSet_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "crontabLimitParameterSet"
    // EsperEPL2Grammar.g:807:1: crontabLimitParameterSet : LPAREN expressionWithTime COMMA expressionWithTime COMMA expressionWithTime COMMA expressionWithTime COMMA expressionWithTime ( COMMA expressionWithTime )? RPAREN -> ^( CRONTAB_LIMIT_EXPR_PARAM ( expressionWithTime )* ) ;
    public final EsperEPL2GrammarParser.crontabLimitParameterSet_return crontabLimitParameterSet() throws RecognitionException {
        EsperEPL2GrammarParser.crontabLimitParameterSet_return retval = new EsperEPL2GrammarParser.crontabLimitParameterSet_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LPAREN197=null;
        Token COMMA199=null;
        Token COMMA201=null;
        Token COMMA203=null;
        Token COMMA205=null;
        Token COMMA207=null;
        Token RPAREN209=null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime198 = null;

        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime200 = null;

        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime202 = null;

        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime204 = null;

        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime206 = null;

        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime208 = null;


        CommonTree LPAREN197_tree=null;
        CommonTree COMMA199_tree=null;
        CommonTree COMMA201_tree=null;
        CommonTree COMMA203_tree=null;
        CommonTree COMMA205_tree=null;
        CommonTree COMMA207_tree=null;
        CommonTree RPAREN209_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionWithTime=new RewriteRuleSubtreeStream(adaptor,"rule expressionWithTime");
        try {
            // EsperEPL2Grammar.g:808:2: ( LPAREN expressionWithTime COMMA expressionWithTime COMMA expressionWithTime COMMA expressionWithTime COMMA expressionWithTime ( COMMA expressionWithTime )? RPAREN -> ^( CRONTAB_LIMIT_EXPR_PARAM ( expressionWithTime )* ) )
            // EsperEPL2Grammar.g:808:4: LPAREN expressionWithTime COMMA expressionWithTime COMMA expressionWithTime COMMA expressionWithTime COMMA expressionWithTime ( COMMA expressionWithTime )? RPAREN
            {
            LPAREN197=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_crontabLimitParameterSet4061); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN197);

            pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet4063);
            expressionWithTime198=expressionWithTime();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime198.getTree());
            COMMA199=(Token)match(input,COMMA,FOLLOW_COMMA_in_crontabLimitParameterSet4065); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COMMA.add(COMMA199);

            pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet4067);
            expressionWithTime200=expressionWithTime();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime200.getTree());
            COMMA201=(Token)match(input,COMMA,FOLLOW_COMMA_in_crontabLimitParameterSet4069); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COMMA.add(COMMA201);

            pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet4071);
            expressionWithTime202=expressionWithTime();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime202.getTree());
            COMMA203=(Token)match(input,COMMA,FOLLOW_COMMA_in_crontabLimitParameterSet4073); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COMMA.add(COMMA203);

            pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet4075);
            expressionWithTime204=expressionWithTime();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime204.getTree());
            COMMA205=(Token)match(input,COMMA,FOLLOW_COMMA_in_crontabLimitParameterSet4077); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COMMA.add(COMMA205);

            pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet4079);
            expressionWithTime206=expressionWithTime();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime206.getTree());
            // EsperEPL2Grammar.g:808:130: ( COMMA expressionWithTime )?
            int alt82=2;
            int LA82_0 = input.LA(1);

            if ( (LA82_0==COMMA) ) {
                alt82=1;
            }
            switch (alt82) {
                case 1 :
                    // EsperEPL2Grammar.g:808:131: COMMA expressionWithTime
                    {
                    COMMA207=(Token)match(input,COMMA,FOLLOW_COMMA_in_crontabLimitParameterSet4082); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA207);

                    pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet4084);
                    expressionWithTime208=expressionWithTime();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime208.getTree());

                    }
                    break;

            }

            RPAREN209=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_crontabLimitParameterSet4088); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN209);



            // AST REWRITE
            // elements: expressionWithTime
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 809:3: -> ^( CRONTAB_LIMIT_EXPR_PARAM ( expressionWithTime )* )
            {
                // EsperEPL2Grammar.g:809:6: ^( CRONTAB_LIMIT_EXPR_PARAM ( expressionWithTime )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CRONTAB_LIMIT_EXPR_PARAM, "CRONTAB_LIMIT_EXPR_PARAM"), root_1);

                // EsperEPL2Grammar.g:809:33: ( expressionWithTime )*
                while ( stream_expressionWithTime.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionWithTime.nextTree());

                }
                stream_expressionWithTime.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "crontabLimitParameterSet"

    public static class whenClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "whenClause"
    // EsperEPL2Grammar.g:812:1: whenClause : ( WHEN expression THEN expression ) ;
    public final EsperEPL2GrammarParser.whenClause_return whenClause() throws RecognitionException {
        EsperEPL2GrammarParser.whenClause_return retval = new EsperEPL2GrammarParser.whenClause_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token WHEN210=null;
        Token THEN212=null;
        EsperEPL2GrammarParser.expression_return expression211 = null;

        EsperEPL2GrammarParser.expression_return expression213 = null;


        CommonTree WHEN210_tree=null;
        CommonTree THEN212_tree=null;

        try {
            // EsperEPL2Grammar.g:813:2: ( ( WHEN expression THEN expression ) )
            // EsperEPL2Grammar.g:813:4: ( WHEN expression THEN expression )
            {
            root_0 = (CommonTree)adaptor.nil();

            // EsperEPL2Grammar.g:813:4: ( WHEN expression THEN expression )
            // EsperEPL2Grammar.g:813:5: WHEN expression THEN expression
            {
            WHEN210=(Token)match(input,WHEN,FOLLOW_WHEN_in_whenClause4118); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_whenClause4121);
            expression211=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression211.getTree());
            THEN212=(Token)match(input,THEN,FOLLOW_THEN_in_whenClause4123); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_whenClause4126);
            expression213=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression213.getTree());

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "whenClause"

    public static class elseClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elseClause"
    // EsperEPL2Grammar.g:816:1: elseClause : ( ELSE expression ) ;
    public final EsperEPL2GrammarParser.elseClause_return elseClause() throws RecognitionException {
        EsperEPL2GrammarParser.elseClause_return retval = new EsperEPL2GrammarParser.elseClause_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token ELSE214=null;
        EsperEPL2GrammarParser.expression_return expression215 = null;


        CommonTree ELSE214_tree=null;

        try {
            // EsperEPL2Grammar.g:817:2: ( ( ELSE expression ) )
            // EsperEPL2Grammar.g:817:4: ( ELSE expression )
            {
            root_0 = (CommonTree)adaptor.nil();

            // EsperEPL2Grammar.g:817:4: ( ELSE expression )
            // EsperEPL2Grammar.g:817:5: ELSE expression
            {
            ELSE214=(Token)match(input,ELSE,FOLLOW_ELSE_in_elseClause4139); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_elseClause4142);
            expression215=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression215.getTree());

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "elseClause"

    public static class expression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expression"
    // EsperEPL2Grammar.g:821:1: expression : caseExpression ;
    public final EsperEPL2GrammarParser.expression_return expression() throws RecognitionException {
        EsperEPL2GrammarParser.expression_return retval = new EsperEPL2GrammarParser.expression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.caseExpression_return caseExpression216 = null;



        try {
            // EsperEPL2Grammar.g:822:2: ( caseExpression )
            // EsperEPL2Grammar.g:822:4: caseExpression
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_caseExpression_in_expression4155);
            caseExpression216=caseExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, caseExpression216.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "expression"

    public static class caseExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "caseExpression"
    // EsperEPL2Grammar.g:825:1: caseExpression : ( CASE ( whenClause )+ ( elseClause )? END | CASE expression ( whenClause )+ ( elseClause )? END -> ^( CASE2 expression ( whenClause )+ ( elseClause )? ) | evalOrExpression );
    public final EsperEPL2GrammarParser.caseExpression_return caseExpression() throws RecognitionException {
        EsperEPL2GrammarParser.caseExpression_return retval = new EsperEPL2GrammarParser.caseExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token CASE217=null;
        Token END220=null;
        Token CASE221=null;
        Token END225=null;
        EsperEPL2GrammarParser.whenClause_return whenClause218 = null;

        EsperEPL2GrammarParser.elseClause_return elseClause219 = null;

        EsperEPL2GrammarParser.expression_return expression222 = null;

        EsperEPL2GrammarParser.whenClause_return whenClause223 = null;

        EsperEPL2GrammarParser.elseClause_return elseClause224 = null;

        EsperEPL2GrammarParser.evalOrExpression_return evalOrExpression226 = null;


        CommonTree CASE217_tree=null;
        CommonTree END220_tree=null;
        CommonTree CASE221_tree=null;
        CommonTree END225_tree=null;
        RewriteRuleTokenStream stream_END=new RewriteRuleTokenStream(adaptor,"token END");
        RewriteRuleTokenStream stream_CASE=new RewriteRuleTokenStream(adaptor,"token CASE");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_whenClause=new RewriteRuleSubtreeStream(adaptor,"rule whenClause");
        RewriteRuleSubtreeStream stream_elseClause=new RewriteRuleSubtreeStream(adaptor,"rule elseClause");
        try {
            // EsperEPL2Grammar.g:826:2: ( CASE ( whenClause )+ ( elseClause )? END | CASE expression ( whenClause )+ ( elseClause )? END -> ^( CASE2 expression ( whenClause )+ ( elseClause )? ) | evalOrExpression )
            int alt87=3;
            alt87 = dfa87.predict(input);
            switch (alt87) {
                case 1 :
                    // EsperEPL2Grammar.g:826:4: CASE ( whenClause )+ ( elseClause )? END
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    if ( state.backtracking==0 ) {
                       paraphrases.push("case expression"); 
                    }
                    CASE217=(Token)match(input,CASE,FOLLOW_CASE_in_caseExpression4169); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CASE217_tree = (CommonTree)adaptor.create(CASE217);
                    root_0 = (CommonTree)adaptor.becomeRoot(CASE217_tree, root_0);
                    }
                    // EsperEPL2Grammar.g:826:52: ( whenClause )+
                    int cnt83=0;
                    loop83:
                    do {
                        int alt83=2;
                        int LA83_0 = input.LA(1);

                        if ( (LA83_0==WHEN) ) {
                            alt83=1;
                        }


                        switch (alt83) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:826:52: whenClause
                    	    {
                    	    pushFollow(FOLLOW_whenClause_in_caseExpression4172);
                    	    whenClause218=whenClause();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, whenClause218.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt83 >= 1 ) break loop83;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(83, input);
                                throw eee;
                        }
                        cnt83++;
                    } while (true);

                    // EsperEPL2Grammar.g:826:64: ( elseClause )?
                    int alt84=2;
                    int LA84_0 = input.LA(1);

                    if ( (LA84_0==ELSE) ) {
                        alt84=1;
                    }
                    switch (alt84) {
                        case 1 :
                            // EsperEPL2Grammar.g:826:64: elseClause
                            {
                            pushFollow(FOLLOW_elseClause_in_caseExpression4175);
                            elseClause219=elseClause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, elseClause219.getTree());

                            }
                            break;

                    }

                    END220=(Token)match(input,END,FOLLOW_END_in_caseExpression4178); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       paraphrases.pop(); 
                    }

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:827:4: CASE expression ( whenClause )+ ( elseClause )? END
                    {
                    if ( state.backtracking==0 ) {
                       paraphrases.push("case expression"); 
                    }
                    CASE221=(Token)match(input,CASE,FOLLOW_CASE_in_caseExpression4189); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CASE.add(CASE221);

                    pushFollow(FOLLOW_expression_in_caseExpression4191);
                    expression222=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression222.getTree());
                    // EsperEPL2Grammar.g:827:62: ( whenClause )+
                    int cnt85=0;
                    loop85:
                    do {
                        int alt85=2;
                        int LA85_0 = input.LA(1);

                        if ( (LA85_0==WHEN) ) {
                            alt85=1;
                        }


                        switch (alt85) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:827:62: whenClause
                    	    {
                    	    pushFollow(FOLLOW_whenClause_in_caseExpression4193);
                    	    whenClause223=whenClause();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_whenClause.add(whenClause223.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt85 >= 1 ) break loop85;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(85, input);
                                throw eee;
                        }
                        cnt85++;
                    } while (true);

                    // EsperEPL2Grammar.g:827:74: ( elseClause )?
                    int alt86=2;
                    int LA86_0 = input.LA(1);

                    if ( (LA86_0==ELSE) ) {
                        alt86=1;
                    }
                    switch (alt86) {
                        case 1 :
                            // EsperEPL2Grammar.g:827:74: elseClause
                            {
                            pushFollow(FOLLOW_elseClause_in_caseExpression4196);
                            elseClause224=elseClause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elseClause.add(elseClause224.getTree());

                            }
                            break;

                    }

                    END225=(Token)match(input,END,FOLLOW_END_in_caseExpression4199); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_END.add(END225);

                    if ( state.backtracking==0 ) {
                       paraphrases.pop(); 
                    }


                    // AST REWRITE
                    // elements: elseClause, whenClause, expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 828:4: -> ^( CASE2 expression ( whenClause )+ ( elseClause )? )
                    {
                        // EsperEPL2Grammar.g:828:7: ^( CASE2 expression ( whenClause )+ ( elseClause )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CASE2, "CASE2"), root_1);

                        adaptor.addChild(root_1, stream_expression.nextTree());
                        if ( !(stream_whenClause.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_whenClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_whenClause.nextTree());

                        }
                        stream_whenClause.reset();
                        // EsperEPL2Grammar.g:828:38: ( elseClause )?
                        if ( stream_elseClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_elseClause.nextTree());

                        }
                        stream_elseClause.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:829:4: evalOrExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_evalOrExpression_in_caseExpression4223);
                    evalOrExpression226=evalOrExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, evalOrExpression226.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "caseExpression"

    public static class evalOrExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "evalOrExpression"
    // EsperEPL2Grammar.g:832:1: evalOrExpression : evalAndExpression (op= OR_EXPR evalAndExpression )* -> {$op != null}? ^( EVAL_OR_EXPR ( evalAndExpression )* ) -> evalAndExpression ;
    public final EsperEPL2GrammarParser.evalOrExpression_return evalOrExpression() throws RecognitionException {
        EsperEPL2GrammarParser.evalOrExpression_return retval = new EsperEPL2GrammarParser.evalOrExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token op=null;
        EsperEPL2GrammarParser.evalAndExpression_return evalAndExpression227 = null;

        EsperEPL2GrammarParser.evalAndExpression_return evalAndExpression228 = null;


        CommonTree op_tree=null;
        RewriteRuleTokenStream stream_OR_EXPR=new RewriteRuleTokenStream(adaptor,"token OR_EXPR");
        RewriteRuleSubtreeStream stream_evalAndExpression=new RewriteRuleSubtreeStream(adaptor,"rule evalAndExpression");
        try {
            // EsperEPL2Grammar.g:833:2: ( evalAndExpression (op= OR_EXPR evalAndExpression )* -> {$op != null}? ^( EVAL_OR_EXPR ( evalAndExpression )* ) -> evalAndExpression )
            // EsperEPL2Grammar.g:833:4: evalAndExpression (op= OR_EXPR evalAndExpression )*
            {
            pushFollow(FOLLOW_evalAndExpression_in_evalOrExpression4234);
            evalAndExpression227=evalAndExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_evalAndExpression.add(evalAndExpression227.getTree());
            // EsperEPL2Grammar.g:833:22: (op= OR_EXPR evalAndExpression )*
            loop88:
            do {
                int alt88=2;
                int LA88_0 = input.LA(1);

                if ( (LA88_0==OR_EXPR) ) {
                    alt88=1;
                }


                switch (alt88) {
            	case 1 :
            	    // EsperEPL2Grammar.g:833:23: op= OR_EXPR evalAndExpression
            	    {
            	    op=(Token)match(input,OR_EXPR,FOLLOW_OR_EXPR_in_evalOrExpression4239); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_OR_EXPR.add(op);

            	    pushFollow(FOLLOW_evalAndExpression_in_evalOrExpression4241);
            	    evalAndExpression228=evalAndExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_evalAndExpression.add(evalAndExpression228.getTree());

            	    }
            	    break;

            	default :
            	    break loop88;
                }
            } while (true);



            // AST REWRITE
            // elements: evalAndExpression, evalAndExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 834:3: -> {$op != null}? ^( EVAL_OR_EXPR ( evalAndExpression )* )
            if (op != null) {
                // EsperEPL2Grammar.g:834:21: ^( EVAL_OR_EXPR ( evalAndExpression )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_OR_EXPR, "EVAL_OR_EXPR"), root_1);

                // EsperEPL2Grammar.g:834:36: ( evalAndExpression )*
                while ( stream_evalAndExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_evalAndExpression.nextTree());

                }
                stream_evalAndExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 835:3: -> evalAndExpression
            {
                adaptor.addChild(root_0, stream_evalAndExpression.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "evalOrExpression"

    public static class evalAndExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "evalAndExpression"
    // EsperEPL2Grammar.g:838:1: evalAndExpression : bitWiseExpression (op= AND_EXPR bitWiseExpression )* -> {$op != null}? ^( EVAL_AND_EXPR ( bitWiseExpression )+ ) -> bitWiseExpression ;
    public final EsperEPL2GrammarParser.evalAndExpression_return evalAndExpression() throws RecognitionException {
        EsperEPL2GrammarParser.evalAndExpression_return retval = new EsperEPL2GrammarParser.evalAndExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token op=null;
        EsperEPL2GrammarParser.bitWiseExpression_return bitWiseExpression229 = null;

        EsperEPL2GrammarParser.bitWiseExpression_return bitWiseExpression230 = null;


        CommonTree op_tree=null;
        RewriteRuleTokenStream stream_AND_EXPR=new RewriteRuleTokenStream(adaptor,"token AND_EXPR");
        RewriteRuleSubtreeStream stream_bitWiseExpression=new RewriteRuleSubtreeStream(adaptor,"rule bitWiseExpression");
        try {
            // EsperEPL2Grammar.g:839:2: ( bitWiseExpression (op= AND_EXPR bitWiseExpression )* -> {$op != null}? ^( EVAL_AND_EXPR ( bitWiseExpression )+ ) -> bitWiseExpression )
            // EsperEPL2Grammar.g:839:4: bitWiseExpression (op= AND_EXPR bitWiseExpression )*
            {
            pushFollow(FOLLOW_bitWiseExpression_in_evalAndExpression4273);
            bitWiseExpression229=bitWiseExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_bitWiseExpression.add(bitWiseExpression229.getTree());
            // EsperEPL2Grammar.g:839:22: (op= AND_EXPR bitWiseExpression )*
            loop89:
            do {
                int alt89=2;
                int LA89_0 = input.LA(1);

                if ( (LA89_0==AND_EXPR) ) {
                    alt89=1;
                }


                switch (alt89) {
            	case 1 :
            	    // EsperEPL2Grammar.g:839:23: op= AND_EXPR bitWiseExpression
            	    {
            	    op=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_evalAndExpression4278); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_AND_EXPR.add(op);

            	    pushFollow(FOLLOW_bitWiseExpression_in_evalAndExpression4280);
            	    bitWiseExpression230=bitWiseExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_bitWiseExpression.add(bitWiseExpression230.getTree());

            	    }
            	    break;

            	default :
            	    break loop89;
                }
            } while (true);



            // AST REWRITE
            // elements: bitWiseExpression, bitWiseExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 840:3: -> {$op != null}? ^( EVAL_AND_EXPR ( bitWiseExpression )+ )
            if (op != null) {
                // EsperEPL2Grammar.g:840:21: ^( EVAL_AND_EXPR ( bitWiseExpression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_AND_EXPR, "EVAL_AND_EXPR"), root_1);

                if ( !(stream_bitWiseExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_bitWiseExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_bitWiseExpression.nextTree());

                }
                stream_bitWiseExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 841:3: -> bitWiseExpression
            {
                adaptor.addChild(root_0, stream_bitWiseExpression.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "evalAndExpression"

    public static class bitWiseExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bitWiseExpression"
    // EsperEPL2Grammar.g:844:1: bitWiseExpression : negatedExpression ( ( BAND | BOR | BXOR ) negatedExpression )* ;
    public final EsperEPL2GrammarParser.bitWiseExpression_return bitWiseExpression() throws RecognitionException {
        EsperEPL2GrammarParser.bitWiseExpression_return retval = new EsperEPL2GrammarParser.bitWiseExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token BAND232=null;
        Token BOR233=null;
        Token BXOR234=null;
        EsperEPL2GrammarParser.negatedExpression_return negatedExpression231 = null;

        EsperEPL2GrammarParser.negatedExpression_return negatedExpression235 = null;


        CommonTree BAND232_tree=null;
        CommonTree BOR233_tree=null;
        CommonTree BXOR234_tree=null;

        try {
            // EsperEPL2Grammar.g:845:2: ( negatedExpression ( ( BAND | BOR | BXOR ) negatedExpression )* )
            // EsperEPL2Grammar.g:845:4: negatedExpression ( ( BAND | BOR | BXOR ) negatedExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_negatedExpression_in_bitWiseExpression4312);
            negatedExpression231=negatedExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, negatedExpression231.getTree());
            // EsperEPL2Grammar.g:845:22: ( ( BAND | BOR | BXOR ) negatedExpression )*
            loop91:
            do {
                int alt91=2;
                int LA91_0 = input.LA(1);

                if ( ((LA91_0>=BAND && LA91_0<=BXOR)) ) {
                    alt91=1;
                }


                switch (alt91) {
            	case 1 :
            	    // EsperEPL2Grammar.g:845:24: ( BAND | BOR | BXOR ) negatedExpression
            	    {
            	    // EsperEPL2Grammar.g:845:24: ( BAND | BOR | BXOR )
            	    int alt90=3;
            	    switch ( input.LA(1) ) {
            	    case BAND:
            	        {
            	        alt90=1;
            	        }
            	        break;
            	    case BOR:
            	        {
            	        alt90=2;
            	        }
            	        break;
            	    case BXOR:
            	        {
            	        alt90=3;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 90, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt90) {
            	        case 1 :
            	            // EsperEPL2Grammar.g:845:25: BAND
            	            {
            	            BAND232=(Token)match(input,BAND,FOLLOW_BAND_in_bitWiseExpression4317); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            BAND232_tree = (CommonTree)adaptor.create(BAND232);
            	            root_0 = (CommonTree)adaptor.becomeRoot(BAND232_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // EsperEPL2Grammar.g:845:31: BOR
            	            {
            	            BOR233=(Token)match(input,BOR,FOLLOW_BOR_in_bitWiseExpression4320); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            BOR233_tree = (CommonTree)adaptor.create(BOR233);
            	            root_0 = (CommonTree)adaptor.becomeRoot(BOR233_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 3 :
            	            // EsperEPL2Grammar.g:845:36: BXOR
            	            {
            	            BXOR234=(Token)match(input,BXOR,FOLLOW_BXOR_in_bitWiseExpression4323); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            BXOR234_tree = (CommonTree)adaptor.create(BXOR234);
            	            root_0 = (CommonTree)adaptor.becomeRoot(BXOR234_tree, root_0);
            	            }

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_negatedExpression_in_bitWiseExpression4327);
            	    negatedExpression235=negatedExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, negatedExpression235.getTree());

            	    }
            	    break;

            	default :
            	    break loop91;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "bitWiseExpression"

    public static class negatedExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "negatedExpression"
    // EsperEPL2Grammar.g:848:1: negatedExpression : ( evalEqualsExpression | NOT_EXPR evalEqualsExpression );
    public final EsperEPL2GrammarParser.negatedExpression_return negatedExpression() throws RecognitionException {
        EsperEPL2GrammarParser.negatedExpression_return retval = new EsperEPL2GrammarParser.negatedExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NOT_EXPR237=null;
        EsperEPL2GrammarParser.evalEqualsExpression_return evalEqualsExpression236 = null;

        EsperEPL2GrammarParser.evalEqualsExpression_return evalEqualsExpression238 = null;


        CommonTree NOT_EXPR237_tree=null;

        try {
            // EsperEPL2Grammar.g:849:2: ( evalEqualsExpression | NOT_EXPR evalEqualsExpression )
            int alt92=2;
            int LA92_0 = input.LA(1);

            if ( (LA92_0==WINDOW||LA92_0==ESCAPE||LA92_0==EVERY_EXPR||(LA92_0>=SUM && LA92_0<=COUNT)||LA92_0==OUTER||(LA92_0>=JOIN && LA92_0<=FULL)||(LA92_0>=EVENTS && LA92_0<=LAST)||(LA92_0>=UNIDIRECTIONAL && LA92_0<=CURRENT_TIMESTAMP)||LA92_0==SNAPSHOT||(LA92_0>=VARIABLE && LA92_0<=AT)||(LA92_0>=BOOLEAN_TRUE && LA92_0<=VALUE_NULL)||LA92_0==NUM_DOUBLE||LA92_0==IDENT||LA92_0==LPAREN||(LA92_0>=STRING_LITERAL && LA92_0<=QUOTED_STRING_LITERAL)||(LA92_0>=PLUS && LA92_0<=MINUS)||LA92_0==LCURLY||LA92_0==NUM_INT||LA92_0==QUESTION||(LA92_0>=TICKED_STRING_LITERAL && LA92_0<=NUM_FLOAT)) ) {
                alt92=1;
            }
            else if ( (LA92_0==NOT_EXPR) ) {
                alt92=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 92, 0, input);

                throw nvae;
            }
            switch (alt92) {
                case 1 :
                    // EsperEPL2Grammar.g:849:4: evalEqualsExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_evalEqualsExpression_in_negatedExpression4342);
                    evalEqualsExpression236=evalEqualsExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, evalEqualsExpression236.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:850:4: NOT_EXPR evalEqualsExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    NOT_EXPR237=(Token)match(input,NOT_EXPR,FOLLOW_NOT_EXPR_in_negatedExpression4348); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NOT_EXPR237_tree = (CommonTree)adaptor.create(NOT_EXPR237);
                    root_0 = (CommonTree)adaptor.becomeRoot(NOT_EXPR237_tree, root_0);
                    }
                    pushFollow(FOLLOW_evalEqualsExpression_in_negatedExpression4351);
                    evalEqualsExpression238=evalEqualsExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, evalEqualsExpression238.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "negatedExpression"

    public static class evalEqualsExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "evalEqualsExpression"
    // EsperEPL2Grammar.g:853:1: evalEqualsExpression : evalRelationalExpression ( (eq= EQUALS | is= IS | isnot= IS NOT_EXPR | sqlne= SQL_NE | ne= NOT_EQUAL ) ( evalRelationalExpression | (a= ANY | a= SOME | a= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) ) )* -> {$a == null && ($eq != null || $is != null)}? ^( EVAL_EQUALS_EXPR ( evalRelationalExpression )+ ) -> {$a != null && ($eq != null || $is != null)}? ^( EVAL_EQUALS_GROUP_EXPR evalRelationalExpression $a ( expressionList )? ( subSelectGroupExpression )? ) -> {$a == null && ($isnot != null || $sqlne != null || $ne != null)}? ^( EVAL_NOTEQUALS_EXPR ( evalRelationalExpression )+ ) -> {$a != null && ($isnot != null || $sqlne != null || $ne != null)}? ^( EVAL_NOTEQUALS_GROUP_EXPR evalRelationalExpression $a ( expressionList )? ( subSelectGroupExpression )? ) -> ( evalRelationalExpression )+ ;
    public final EsperEPL2GrammarParser.evalEqualsExpression_return evalEqualsExpression() throws RecognitionException {
        EsperEPL2GrammarParser.evalEqualsExpression_return retval = new EsperEPL2GrammarParser.evalEqualsExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token eq=null;
        Token is=null;
        Token isnot=null;
        Token sqlne=null;
        Token ne=null;
        Token a=null;
        Token NOT_EXPR240=null;
        Token LPAREN242=null;
        Token RPAREN244=null;
        EsperEPL2GrammarParser.evalRelationalExpression_return evalRelationalExpression239 = null;

        EsperEPL2GrammarParser.evalRelationalExpression_return evalRelationalExpression241 = null;

        EsperEPL2GrammarParser.expressionList_return expressionList243 = null;

        EsperEPL2GrammarParser.subSelectGroupExpression_return subSelectGroupExpression245 = null;


        CommonTree eq_tree=null;
        CommonTree is_tree=null;
        CommonTree isnot_tree=null;
        CommonTree sqlne_tree=null;
        CommonTree ne_tree=null;
        CommonTree a_tree=null;
        CommonTree NOT_EXPR240_tree=null;
        CommonTree LPAREN242_tree=null;
        CommonTree RPAREN244_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleTokenStream stream_ANY=new RewriteRuleTokenStream(adaptor,"token ANY");
        RewriteRuleTokenStream stream_NOT_EXPR=new RewriteRuleTokenStream(adaptor,"token NOT_EXPR");
        RewriteRuleTokenStream stream_SQL_NE=new RewriteRuleTokenStream(adaptor,"token SQL_NE");
        RewriteRuleTokenStream stream_NOT_EQUAL=new RewriteRuleTokenStream(adaptor,"token NOT_EQUAL");
        RewriteRuleTokenStream stream_IS=new RewriteRuleTokenStream(adaptor,"token IS");
        RewriteRuleTokenStream stream_SOME=new RewriteRuleTokenStream(adaptor,"token SOME");
        RewriteRuleTokenStream stream_ALL=new RewriteRuleTokenStream(adaptor,"token ALL");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_subSelectGroupExpression=new RewriteRuleSubtreeStream(adaptor,"rule subSelectGroupExpression");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_evalRelationalExpression=new RewriteRuleSubtreeStream(adaptor,"rule evalRelationalExpression");
        try {
            // EsperEPL2Grammar.g:854:2: ( evalRelationalExpression ( (eq= EQUALS | is= IS | isnot= IS NOT_EXPR | sqlne= SQL_NE | ne= NOT_EQUAL ) ( evalRelationalExpression | (a= ANY | a= SOME | a= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) ) )* -> {$a == null && ($eq != null || $is != null)}? ^( EVAL_EQUALS_EXPR ( evalRelationalExpression )+ ) -> {$a != null && ($eq != null || $is != null)}? ^( EVAL_EQUALS_GROUP_EXPR evalRelationalExpression $a ( expressionList )? ( subSelectGroupExpression )? ) -> {$a == null && ($isnot != null || $sqlne != null || $ne != null)}? ^( EVAL_NOTEQUALS_EXPR ( evalRelationalExpression )+ ) -> {$a != null && ($isnot != null || $sqlne != null || $ne != null)}? ^( EVAL_NOTEQUALS_GROUP_EXPR evalRelationalExpression $a ( expressionList )? ( subSelectGroupExpression )? ) -> ( evalRelationalExpression )+ )
            // EsperEPL2Grammar.g:854:4: evalRelationalExpression ( (eq= EQUALS | is= IS | isnot= IS NOT_EXPR | sqlne= SQL_NE | ne= NOT_EQUAL ) ( evalRelationalExpression | (a= ANY | a= SOME | a= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) ) )*
            {
            pushFollow(FOLLOW_evalRelationalExpression_in_evalEqualsExpression4364);
            evalRelationalExpression239=evalRelationalExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_evalRelationalExpression.add(evalRelationalExpression239.getTree());
            // EsperEPL2Grammar.g:854:29: ( (eq= EQUALS | is= IS | isnot= IS NOT_EXPR | sqlne= SQL_NE | ne= NOT_EQUAL ) ( evalRelationalExpression | (a= ANY | a= SOME | a= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) ) )*
            loop98:
            do {
                int alt98=2;
                int LA98_0 = input.LA(1);

                if ( (LA98_0==IS||LA98_0==EQUALS||(LA98_0>=SQL_NE && LA98_0<=NOT_EQUAL)) ) {
                    alt98=1;
                }


                switch (alt98) {
            	case 1 :
            	    // EsperEPL2Grammar.g:855:6: (eq= EQUALS | is= IS | isnot= IS NOT_EXPR | sqlne= SQL_NE | ne= NOT_EQUAL ) ( evalRelationalExpression | (a= ANY | a= SOME | a= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) )
            	    {
            	    // EsperEPL2Grammar.g:855:6: (eq= EQUALS | is= IS | isnot= IS NOT_EXPR | sqlne= SQL_NE | ne= NOT_EQUAL )
            	    int alt93=5;
            	    switch ( input.LA(1) ) {
            	    case EQUALS:
            	        {
            	        alt93=1;
            	        }
            	        break;
            	    case IS:
            	        {
            	        int LA93_2 = input.LA(2);

            	        if ( (LA93_2==NOT_EXPR) ) {
            	            alt93=3;
            	        }
            	        else if ( (LA93_2==WINDOW||LA93_2==ESCAPE||LA93_2==EVERY_EXPR||(LA93_2>=SUM && LA93_2<=COUNT)||LA93_2==OUTER||(LA93_2>=JOIN && LA93_2<=FULL)||(LA93_2>=ALL && LA93_2<=SOME)||(LA93_2>=EVENTS && LA93_2<=LAST)||(LA93_2>=UNIDIRECTIONAL && LA93_2<=CURRENT_TIMESTAMP)||LA93_2==SNAPSHOT||(LA93_2>=VARIABLE && LA93_2<=AT)||(LA93_2>=BOOLEAN_TRUE && LA93_2<=VALUE_NULL)||LA93_2==NUM_DOUBLE||LA93_2==IDENT||LA93_2==LPAREN||(LA93_2>=STRING_LITERAL && LA93_2<=QUOTED_STRING_LITERAL)||(LA93_2>=PLUS && LA93_2<=MINUS)||LA93_2==LCURLY||LA93_2==NUM_INT||LA93_2==QUESTION||(LA93_2>=TICKED_STRING_LITERAL && LA93_2<=NUM_FLOAT)) ) {
            	            alt93=2;
            	        }
            	        else {
            	            if (state.backtracking>0) {state.failed=true; return retval;}
            	            NoViableAltException nvae =
            	                new NoViableAltException("", 93, 2, input);

            	            throw nvae;
            	        }
            	        }
            	        break;
            	    case SQL_NE:
            	        {
            	        alt93=4;
            	        }
            	        break;
            	    case NOT_EQUAL:
            	        {
            	        alt93=5;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 93, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt93) {
            	        case 1 :
            	            // EsperEPL2Grammar.g:855:7: eq= EQUALS
            	            {
            	            eq=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_evalEqualsExpression4377); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_EQUALS.add(eq);


            	            }
            	            break;
            	        case 2 :
            	            // EsperEPL2Grammar.g:856:15: is= IS
            	            {
            	            is=(Token)match(input,IS,FOLLOW_IS_in_evalEqualsExpression4395); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_IS.add(is);


            	            }
            	            break;
            	        case 3 :
            	            // EsperEPL2Grammar.g:857:11: isnot= IS NOT_EXPR
            	            {
            	            isnot=(Token)match(input,IS,FOLLOW_IS_in_evalEqualsExpression4409); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_IS.add(isnot);

            	            NOT_EXPR240=(Token)match(input,NOT_EXPR,FOLLOW_NOT_EXPR_in_evalEqualsExpression4411); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NOT_EXPR.add(NOT_EXPR240);


            	            }
            	            break;
            	        case 4 :
            	            // EsperEPL2Grammar.g:858:11: sqlne= SQL_NE
            	            {
            	            sqlne=(Token)match(input,SQL_NE,FOLLOW_SQL_NE_in_evalEqualsExpression4425); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_SQL_NE.add(sqlne);


            	            }
            	            break;
            	        case 5 :
            	            // EsperEPL2Grammar.g:859:11: ne= NOT_EQUAL
            	            {
            	            ne=(Token)match(input,NOT_EQUAL,FOLLOW_NOT_EQUAL_in_evalEqualsExpression4439); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NOT_EQUAL.add(ne);


            	            }
            	            break;

            	    }

            	    // EsperEPL2Grammar.g:861:9: ( evalRelationalExpression | (a= ANY | a= SOME | a= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) )
            	    int alt97=2;
            	    int LA97_0 = input.LA(1);

            	    if ( (LA97_0==WINDOW||LA97_0==ESCAPE||LA97_0==EVERY_EXPR||(LA97_0>=SUM && LA97_0<=COUNT)||LA97_0==OUTER||(LA97_0>=JOIN && LA97_0<=FULL)||(LA97_0>=EVENTS && LA97_0<=LAST)||(LA97_0>=UNIDIRECTIONAL && LA97_0<=CURRENT_TIMESTAMP)||LA97_0==SNAPSHOT||(LA97_0>=VARIABLE && LA97_0<=AT)||(LA97_0>=BOOLEAN_TRUE && LA97_0<=VALUE_NULL)||LA97_0==NUM_DOUBLE||LA97_0==IDENT||LA97_0==LPAREN||(LA97_0>=STRING_LITERAL && LA97_0<=QUOTED_STRING_LITERAL)||(LA97_0>=PLUS && LA97_0<=MINUS)||LA97_0==LCURLY||LA97_0==NUM_INT||LA97_0==QUESTION||(LA97_0>=TICKED_STRING_LITERAL && LA97_0<=NUM_FLOAT)) ) {
            	        alt97=1;
            	    }
            	    else if ( ((LA97_0>=ALL && LA97_0<=SOME)) ) {
            	        alt97=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 97, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt97) {
            	        case 1 :
            	            // EsperEPL2Grammar.g:862:10: evalRelationalExpression
            	            {
            	            pushFollow(FOLLOW_evalRelationalExpression_in_evalEqualsExpression4469);
            	            evalRelationalExpression241=evalRelationalExpression();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_evalRelationalExpression.add(evalRelationalExpression241.getTree());

            	            }
            	            break;
            	        case 2 :
            	            // EsperEPL2Grammar.g:863:13: (a= ANY | a= SOME | a= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression )
            	            {
            	            // EsperEPL2Grammar.g:863:13: (a= ANY | a= SOME | a= ALL )
            	            int alt94=3;
            	            switch ( input.LA(1) ) {
            	            case ANY:
            	                {
            	                alt94=1;
            	                }
            	                break;
            	            case SOME:
            	                {
            	                alt94=2;
            	                }
            	                break;
            	            case ALL:
            	                {
            	                alt94=3;
            	                }
            	                break;
            	            default:
            	                if (state.backtracking>0) {state.failed=true; return retval;}
            	                NoViableAltException nvae =
            	                    new NoViableAltException("", 94, 0, input);

            	                throw nvae;
            	            }

            	            switch (alt94) {
            	                case 1 :
            	                    // EsperEPL2Grammar.g:863:14: a= ANY
            	                    {
            	                    a=(Token)match(input,ANY,FOLLOW_ANY_in_evalEqualsExpression4486); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_ANY.add(a);


            	                    }
            	                    break;
            	                case 2 :
            	                    // EsperEPL2Grammar.g:863:22: a= SOME
            	                    {
            	                    a=(Token)match(input,SOME,FOLLOW_SOME_in_evalEqualsExpression4492); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_SOME.add(a);


            	                    }
            	                    break;
            	                case 3 :
            	                    // EsperEPL2Grammar.g:863:31: a= ALL
            	                    {
            	                    a=(Token)match(input,ALL,FOLLOW_ALL_in_evalEqualsExpression4498); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_ALL.add(a);


            	                    }
            	                    break;

            	            }

            	            // EsperEPL2Grammar.g:863:38: ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression )
            	            int alt96=2;
            	            int LA96_0 = input.LA(1);

            	            if ( (LA96_0==LPAREN) ) {
            	                int LA96_1 = input.LA(2);

            	                if ( (LA96_1==SELECT) ) {
            	                    alt96=2;
            	                }
            	                else if ( (LA96_1==WINDOW||LA96_1==ESCAPE||(LA96_1>=NOT_EXPR && LA96_1<=EVERY_EXPR)||(LA96_1>=SUM && LA96_1<=COUNT)||LA96_1==CASE||LA96_1==OUTER||(LA96_1>=JOIN && LA96_1<=FULL)||(LA96_1>=EVENTS && LA96_1<=LAST)||(LA96_1>=UNIDIRECTIONAL && LA96_1<=CURRENT_TIMESTAMP)||LA96_1==SNAPSHOT||(LA96_1>=VARIABLE && LA96_1<=AT)||(LA96_1>=BOOLEAN_TRUE && LA96_1<=VALUE_NULL)||LA96_1==NUM_DOUBLE||LA96_1==IDENT||(LA96_1>=LPAREN && LA96_1<=RPAREN)||(LA96_1>=STRING_LITERAL && LA96_1<=QUOTED_STRING_LITERAL)||(LA96_1>=PLUS && LA96_1<=MINUS)||LA96_1==LCURLY||LA96_1==NUM_INT||LA96_1==QUESTION||(LA96_1>=TICKED_STRING_LITERAL && LA96_1<=NUM_FLOAT)) ) {
            	                    alt96=1;
            	                }
            	                else {
            	                    if (state.backtracking>0) {state.failed=true; return retval;}
            	                    NoViableAltException nvae =
            	                        new NoViableAltException("", 96, 1, input);

            	                    throw nvae;
            	                }
            	            }
            	            else {
            	                if (state.backtracking>0) {state.failed=true; return retval;}
            	                NoViableAltException nvae =
            	                    new NoViableAltException("", 96, 0, input);

            	                throw nvae;
            	            }
            	            switch (alt96) {
            	                case 1 :
            	                    // EsperEPL2Grammar.g:863:40: ( LPAREN ( expressionList )? RPAREN )
            	                    {
            	                    // EsperEPL2Grammar.g:863:40: ( LPAREN ( expressionList )? RPAREN )
            	                    // EsperEPL2Grammar.g:863:41: LPAREN ( expressionList )? RPAREN
            	                    {
            	                    LPAREN242=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_evalEqualsExpression4504); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN242);

            	                    // EsperEPL2Grammar.g:863:48: ( expressionList )?
            	                    int alt95=2;
            	                    int LA95_0 = input.LA(1);

            	                    if ( (LA95_0==WINDOW||LA95_0==ESCAPE||(LA95_0>=NOT_EXPR && LA95_0<=EVERY_EXPR)||(LA95_0>=SUM && LA95_0<=COUNT)||LA95_0==CASE||LA95_0==OUTER||(LA95_0>=JOIN && LA95_0<=FULL)||(LA95_0>=EVENTS && LA95_0<=LAST)||(LA95_0>=UNIDIRECTIONAL && LA95_0<=CURRENT_TIMESTAMP)||LA95_0==SNAPSHOT||(LA95_0>=VARIABLE && LA95_0<=AT)||(LA95_0>=BOOLEAN_TRUE && LA95_0<=VALUE_NULL)||LA95_0==NUM_DOUBLE||LA95_0==IDENT||LA95_0==LPAREN||(LA95_0>=STRING_LITERAL && LA95_0<=QUOTED_STRING_LITERAL)||(LA95_0>=PLUS && LA95_0<=MINUS)||LA95_0==LCURLY||LA95_0==NUM_INT||LA95_0==QUESTION||(LA95_0>=TICKED_STRING_LITERAL && LA95_0<=NUM_FLOAT)) ) {
            	                        alt95=1;
            	                    }
            	                    switch (alt95) {
            	                        case 1 :
            	                            // EsperEPL2Grammar.g:863:48: expressionList
            	                            {
            	                            pushFollow(FOLLOW_expressionList_in_evalEqualsExpression4506);
            	                            expressionList243=expressionList();

            	                            state._fsp--;
            	                            if (state.failed) return retval;
            	                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList243.getTree());

            	                            }
            	                            break;

            	                    }

            	                    RPAREN244=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_evalEqualsExpression4509); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN244);


            	                    }


            	                    }
            	                    break;
            	                case 2 :
            	                    // EsperEPL2Grammar.g:863:74: subSelectGroupExpression
            	                    {
            	                    pushFollow(FOLLOW_subSelectGroupExpression_in_evalEqualsExpression4514);
            	                    subSelectGroupExpression245=subSelectGroupExpression();

            	                    state._fsp--;
            	                    if (state.failed) return retval;
            	                    if ( state.backtracking==0 ) stream_subSelectGroupExpression.add(subSelectGroupExpression245.getTree());

            	                    }
            	                    break;

            	            }


            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop98;
                }
            } while (true);



            // AST REWRITE
            // elements: evalRelationalExpression, expressionList, evalRelationalExpression, a, evalRelationalExpression, subSelectGroupExpression, evalRelationalExpression, subSelectGroupExpression, a, evalRelationalExpression, expressionList
            // token labels: a
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_a=new RewriteRuleTokenStream(adaptor,"token a",a);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 866:6: -> {$a == null && ($eq != null || $is != null)}? ^( EVAL_EQUALS_EXPR ( evalRelationalExpression )+ )
            if (a == null && (eq != null || is != null)) {
                // EsperEPL2Grammar.g:866:55: ^( EVAL_EQUALS_EXPR ( evalRelationalExpression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_EQUALS_EXPR, "EVAL_EQUALS_EXPR"), root_1);

                if ( !(stream_evalRelationalExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_evalRelationalExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_evalRelationalExpression.nextTree());

                }
                stream_evalRelationalExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 867:6: -> {$a != null && ($eq != null || $is != null)}? ^( EVAL_EQUALS_GROUP_EXPR evalRelationalExpression $a ( expressionList )? ( subSelectGroupExpression )? )
            if (a != null && (eq != null || is != null)) {
                // EsperEPL2Grammar.g:867:55: ^( EVAL_EQUALS_GROUP_EXPR evalRelationalExpression $a ( expressionList )? ( subSelectGroupExpression )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_EQUALS_GROUP_EXPR, "EVAL_EQUALS_GROUP_EXPR"), root_1);

                adaptor.addChild(root_1, stream_evalRelationalExpression.nextTree());
                adaptor.addChild(root_1, stream_a.nextNode());
                // EsperEPL2Grammar.g:867:108: ( expressionList )?
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());

                }
                stream_expressionList.reset();
                // EsperEPL2Grammar.g:867:124: ( subSelectGroupExpression )?
                if ( stream_subSelectGroupExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_subSelectGroupExpression.nextTree());

                }
                stream_subSelectGroupExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 868:6: -> {$a == null && ($isnot != null || $sqlne != null || $ne != null)}? ^( EVAL_NOTEQUALS_EXPR ( evalRelationalExpression )+ )
            if (a == null && (isnot != null || sqlne != null || ne != null)) {
                // EsperEPL2Grammar.g:868:76: ^( EVAL_NOTEQUALS_EXPR ( evalRelationalExpression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_NOTEQUALS_EXPR, "EVAL_NOTEQUALS_EXPR"), root_1);

                if ( !(stream_evalRelationalExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_evalRelationalExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_evalRelationalExpression.nextTree());

                }
                stream_evalRelationalExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 869:6: -> {$a != null && ($isnot != null || $sqlne != null || $ne != null)}? ^( EVAL_NOTEQUALS_GROUP_EXPR evalRelationalExpression $a ( expressionList )? ( subSelectGroupExpression )? )
            if (a != null && (isnot != null || sqlne != null || ne != null)) {
                // EsperEPL2Grammar.g:869:76: ^( EVAL_NOTEQUALS_GROUP_EXPR evalRelationalExpression $a ( expressionList )? ( subSelectGroupExpression )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_NOTEQUALS_GROUP_EXPR, "EVAL_NOTEQUALS_GROUP_EXPR"), root_1);

                adaptor.addChild(root_1, stream_evalRelationalExpression.nextTree());
                adaptor.addChild(root_1, stream_a.nextNode());
                // EsperEPL2Grammar.g:869:132: ( expressionList )?
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());

                }
                stream_expressionList.reset();
                // EsperEPL2Grammar.g:869:148: ( subSelectGroupExpression )?
                if ( stream_subSelectGroupExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_subSelectGroupExpression.nextTree());

                }
                stream_subSelectGroupExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 870:6: -> ( evalRelationalExpression )+
            {
                if ( !(stream_evalRelationalExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_evalRelationalExpression.hasNext() ) {
                    adaptor.addChild(root_0, stream_evalRelationalExpression.nextTree());

                }
                stream_evalRelationalExpression.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "evalEqualsExpression"

    public static class evalRelationalExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "evalRelationalExpression"
    // EsperEPL2Grammar.g:873:1: evalRelationalExpression : concatenationExpr ( ( ( (r= LT | r= GT | r= LE | r= GE ) ( concatenationExpr | (g= ANY | g= SOME | g= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) ) )* -> {$g == null && $r != null}? ^( ( concatenationExpr )+ ) -> {$g != null && $r != null}? ^( concatenationExpr $g ( expressionList )? ( subSelectGroupExpression )? ) -> ( concatenationExpr )+ ) | (n= NOT_EXPR )? ( (i= IN_SET (l= LPAREN | l= LBRACK ) expression ( (col= COLON ( expression ) ) | ( ( COMMA expression )* ) ) (r= RPAREN | r= RBRACK ) ) -> {$col == null && $n == null}? ^( IN_SET concatenationExpr $l ( expression )+ $r) -> {$col == null && $n != null}? ^( NOT_IN_SET concatenationExpr $l ( expression )+ $r) -> {$col != null && $n == null}? ^( IN_RANGE concatenationExpr $l ( expression )+ $r) -> ^( NOT_IN_RANGE concatenationExpr $l ( expression )+ $r) | IN_SET inSubSelectQuery -> {$n == null}? ^( IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) -> ^( NOT_IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) | BETWEEN betweenList -> {$n == null}? ^( BETWEEN concatenationExpr betweenList ) -> ^( NOT_BETWEEN concatenationExpr betweenList ) | LIKE concatenationExpr ( ESCAPE stringconstant )? -> {$n == null}? ^( LIKE ( concatenationExpr )* ( stringconstant )? ) -> ^( NOT_LIKE ( concatenationExpr )* ( stringconstant )? ) | REGEXP concatenationExpr -> {$n == null}? ^( REGEXP ( concatenationExpr )+ ) -> ^( NOT_REGEXP ( concatenationExpr )+ ) ) ) ;
    public final EsperEPL2GrammarParser.evalRelationalExpression_return evalRelationalExpression() throws RecognitionException {
        EsperEPL2GrammarParser.evalRelationalExpression_return retval = new EsperEPL2GrammarParser.evalRelationalExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token r=null;
        Token g=null;
        Token n=null;
        Token i=null;
        Token l=null;
        Token col=null;
        Token LPAREN248=null;
        Token RPAREN250=null;
        Token COMMA254=null;
        Token IN_SET256=null;
        Token BETWEEN258=null;
        Token LIKE260=null;
        Token ESCAPE262=null;
        Token REGEXP264=null;
        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr246 = null;

        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr247 = null;

        EsperEPL2GrammarParser.expressionList_return expressionList249 = null;

        EsperEPL2GrammarParser.subSelectGroupExpression_return subSelectGroupExpression251 = null;

        EsperEPL2GrammarParser.expression_return expression252 = null;

        EsperEPL2GrammarParser.expression_return expression253 = null;

        EsperEPL2GrammarParser.expression_return expression255 = null;

        EsperEPL2GrammarParser.inSubSelectQuery_return inSubSelectQuery257 = null;

        EsperEPL2GrammarParser.betweenList_return betweenList259 = null;

        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr261 = null;

        EsperEPL2GrammarParser.stringconstant_return stringconstant263 = null;

        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr265 = null;


        CommonTree r_tree=null;
        CommonTree g_tree=null;
        CommonTree n_tree=null;
        CommonTree i_tree=null;
        CommonTree l_tree=null;
        CommonTree col_tree=null;
        CommonTree LPAREN248_tree=null;
        CommonTree RPAREN250_tree=null;
        CommonTree COMMA254_tree=null;
        CommonTree IN_SET256_tree=null;
        CommonTree BETWEEN258_tree=null;
        CommonTree LIKE260_tree=null;
        CommonTree ESCAPE262_tree=null;
        CommonTree REGEXP264_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_GE=new RewriteRuleTokenStream(adaptor,"token GE");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LT=new RewriteRuleTokenStream(adaptor,"token LT");
        RewriteRuleTokenStream stream_ANY=new RewriteRuleTokenStream(adaptor,"token ANY");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_NOT_EXPR=new RewriteRuleTokenStream(adaptor,"token NOT_EXPR");
        RewriteRuleTokenStream stream_ESCAPE=new RewriteRuleTokenStream(adaptor,"token ESCAPE");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_IN_SET=new RewriteRuleTokenStream(adaptor,"token IN_SET");
        RewriteRuleTokenStream stream_SOME=new RewriteRuleTokenStream(adaptor,"token SOME");
        RewriteRuleTokenStream stream_ALL=new RewriteRuleTokenStream(adaptor,"token ALL");
        RewriteRuleTokenStream stream_REGEXP=new RewriteRuleTokenStream(adaptor,"token REGEXP");
        RewriteRuleTokenStream stream_GT=new RewriteRuleTokenStream(adaptor,"token GT");
        RewriteRuleTokenStream stream_BETWEEN=new RewriteRuleTokenStream(adaptor,"token BETWEEN");
        RewriteRuleTokenStream stream_LE=new RewriteRuleTokenStream(adaptor,"token LE");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_LIKE=new RewriteRuleTokenStream(adaptor,"token LIKE");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_inSubSelectQuery=new RewriteRuleSubtreeStream(adaptor,"rule inSubSelectQuery");
        RewriteRuleSubtreeStream stream_concatenationExpr=new RewriteRuleSubtreeStream(adaptor,"rule concatenationExpr");
        RewriteRuleSubtreeStream stream_subSelectGroupExpression=new RewriteRuleSubtreeStream(adaptor,"rule subSelectGroupExpression");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_stringconstant=new RewriteRuleSubtreeStream(adaptor,"rule stringconstant");
        RewriteRuleSubtreeStream stream_betweenList=new RewriteRuleSubtreeStream(adaptor,"rule betweenList");
        try {
            // EsperEPL2Grammar.g:874:2: ( concatenationExpr ( ( ( (r= LT | r= GT | r= LE | r= GE ) ( concatenationExpr | (g= ANY | g= SOME | g= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) ) )* -> {$g == null && $r != null}? ^( ( concatenationExpr )+ ) -> {$g != null && $r != null}? ^( concatenationExpr $g ( expressionList )? ( subSelectGroupExpression )? ) -> ( concatenationExpr )+ ) | (n= NOT_EXPR )? ( (i= IN_SET (l= LPAREN | l= LBRACK ) expression ( (col= COLON ( expression ) ) | ( ( COMMA expression )* ) ) (r= RPAREN | r= RBRACK ) ) -> {$col == null && $n == null}? ^( IN_SET concatenationExpr $l ( expression )+ $r) -> {$col == null && $n != null}? ^( NOT_IN_SET concatenationExpr $l ( expression )+ $r) -> {$col != null && $n == null}? ^( IN_RANGE concatenationExpr $l ( expression )+ $r) -> ^( NOT_IN_RANGE concatenationExpr $l ( expression )+ $r) | IN_SET inSubSelectQuery -> {$n == null}? ^( IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) -> ^( NOT_IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) | BETWEEN betweenList -> {$n == null}? ^( BETWEEN concatenationExpr betweenList ) -> ^( NOT_BETWEEN concatenationExpr betweenList ) | LIKE concatenationExpr ( ESCAPE stringconstant )? -> {$n == null}? ^( LIKE ( concatenationExpr )* ( stringconstant )? ) -> ^( NOT_LIKE ( concatenationExpr )* ( stringconstant )? ) | REGEXP concatenationExpr -> {$n == null}? ^( REGEXP ( concatenationExpr )+ ) -> ^( NOT_REGEXP ( concatenationExpr )+ ) ) ) )
            // EsperEPL2Grammar.g:874:4: concatenationExpr ( ( ( (r= LT | r= GT | r= LE | r= GE ) ( concatenationExpr | (g= ANY | g= SOME | g= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) ) )* -> {$g == null && $r != null}? ^( ( concatenationExpr )+ ) -> {$g != null && $r != null}? ^( concatenationExpr $g ( expressionList )? ( subSelectGroupExpression )? ) -> ( concatenationExpr )+ ) | (n= NOT_EXPR )? ( (i= IN_SET (l= LPAREN | l= LBRACK ) expression ( (col= COLON ( expression ) ) | ( ( COMMA expression )* ) ) (r= RPAREN | r= RBRACK ) ) -> {$col == null && $n == null}? ^( IN_SET concatenationExpr $l ( expression )+ $r) -> {$col == null && $n != null}? ^( NOT_IN_SET concatenationExpr $l ( expression )+ $r) -> {$col != null && $n == null}? ^( IN_RANGE concatenationExpr $l ( expression )+ $r) -> ^( NOT_IN_RANGE concatenationExpr $l ( expression )+ $r) | IN_SET inSubSelectQuery -> {$n == null}? ^( IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) -> ^( NOT_IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) | BETWEEN betweenList -> {$n == null}? ^( BETWEEN concatenationExpr betweenList ) -> ^( NOT_BETWEEN concatenationExpr betweenList ) | LIKE concatenationExpr ( ESCAPE stringconstant )? -> {$n == null}? ^( LIKE ( concatenationExpr )* ( stringconstant )? ) -> ^( NOT_LIKE ( concatenationExpr )* ( stringconstant )? ) | REGEXP concatenationExpr -> {$n == null}? ^( REGEXP ( concatenationExpr )+ ) -> ^( NOT_REGEXP ( concatenationExpr )+ ) ) )
            {
            pushFollow(FOLLOW_concatenationExpr_in_evalRelationalExpression4642);
            concatenationExpr246=concatenationExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_concatenationExpr.add(concatenationExpr246.getTree());
            // EsperEPL2Grammar.g:875:3: ( ( ( (r= LT | r= GT | r= LE | r= GE ) ( concatenationExpr | (g= ANY | g= SOME | g= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) ) )* -> {$g == null && $r != null}? ^( ( concatenationExpr )+ ) -> {$g != null && $r != null}? ^( concatenationExpr $g ( expressionList )? ( subSelectGroupExpression )? ) -> ( concatenationExpr )+ ) | (n= NOT_EXPR )? ( (i= IN_SET (l= LPAREN | l= LBRACK ) expression ( (col= COLON ( expression ) ) | ( ( COMMA expression )* ) ) (r= RPAREN | r= RBRACK ) ) -> {$col == null && $n == null}? ^( IN_SET concatenationExpr $l ( expression )+ $r) -> {$col == null && $n != null}? ^( NOT_IN_SET concatenationExpr $l ( expression )+ $r) -> {$col != null && $n == null}? ^( IN_RANGE concatenationExpr $l ( expression )+ $r) -> ^( NOT_IN_RANGE concatenationExpr $l ( expression )+ $r) | IN_SET inSubSelectQuery -> {$n == null}? ^( IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) -> ^( NOT_IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) | BETWEEN betweenList -> {$n == null}? ^( BETWEEN concatenationExpr betweenList ) -> ^( NOT_BETWEEN concatenationExpr betweenList ) | LIKE concatenationExpr ( ESCAPE stringconstant )? -> {$n == null}? ^( LIKE ( concatenationExpr )* ( stringconstant )? ) -> ^( NOT_LIKE ( concatenationExpr )* ( stringconstant )? ) | REGEXP concatenationExpr -> {$n == null}? ^( REGEXP ( concatenationExpr )+ ) -> ^( NOT_REGEXP ( concatenationExpr )+ ) ) )
            int alt112=2;
            int LA112_0 = input.LA(1);

            if ( (LA112_0==EOF||(LA112_0>=OR_EXPR && LA112_0<=AND_EXPR)||LA112_0==AS||(LA112_0>=ELSE && LA112_0<=FROM)||LA112_0==IS||(LA112_0>=GROUP && LA112_0<=HAVING)||LA112_0==OUTPUT||(LA112_0>=ORDER && LA112_0<=DESC)||(LA112_0>=TIMEPERIOD_SEC && LA112_0<=TIMEPERIOD_SECONDS)||LA112_0==ROW_LIMIT_EXPR||LA112_0==COMMA||LA112_0==EQUALS||LA112_0==RPAREN||(LA112_0>=RBRACK && LA112_0<=COLON)||(LA112_0>=BAND && LA112_0<=GE)||LA112_0==RCURLY) ) {
                alt112=1;
            }
            else if ( ((LA112_0>=IN_SET && LA112_0<=REGEXP)||LA112_0==NOT_EXPR) ) {
                alt112=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 112, 0, input);

                throw nvae;
            }
            switch (alt112) {
                case 1 :
                    // EsperEPL2Grammar.g:876:4: ( ( (r= LT | r= GT | r= LE | r= GE ) ( concatenationExpr | (g= ANY | g= SOME | g= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) ) )* -> {$g == null && $r != null}? ^( ( concatenationExpr )+ ) -> {$g != null && $r != null}? ^( concatenationExpr $g ( expressionList )? ( subSelectGroupExpression )? ) -> ( concatenationExpr )+ )
                    {
                    // EsperEPL2Grammar.g:876:4: ( ( (r= LT | r= GT | r= LE | r= GE ) ( concatenationExpr | (g= ANY | g= SOME | g= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) ) )* -> {$g == null && $r != null}? ^( ( concatenationExpr )+ ) -> {$g != null && $r != null}? ^( concatenationExpr $g ( expressionList )? ( subSelectGroupExpression )? ) -> ( concatenationExpr )+ )
                    // EsperEPL2Grammar.g:877:6: ( (r= LT | r= GT | r= LE | r= GE ) ( concatenationExpr | (g= ANY | g= SOME | g= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) ) )*
                    {
                    // EsperEPL2Grammar.g:877:6: ( (r= LT | r= GT | r= LE | r= GE ) ( concatenationExpr | (g= ANY | g= SOME | g= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) ) )*
                    loop104:
                    do {
                        int alt104=2;
                        int LA104_0 = input.LA(1);

                        if ( ((LA104_0>=LT && LA104_0<=GE)) ) {
                            alt104=1;
                        }


                        switch (alt104) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:878:8: (r= LT | r= GT | r= LE | r= GE ) ( concatenationExpr | (g= ANY | g= SOME | g= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) )
                    	    {
                    	    // EsperEPL2Grammar.g:878:8: (r= LT | r= GT | r= LE | r= GE )
                    	    int alt99=4;
                    	    switch ( input.LA(1) ) {
                    	    case LT:
                    	        {
                    	        alt99=1;
                    	        }
                    	        break;
                    	    case GT:
                    	        {
                    	        alt99=2;
                    	        }
                    	        break;
                    	    case LE:
                    	        {
                    	        alt99=3;
                    	        }
                    	        break;
                    	    case GE:
                    	        {
                    	        alt99=4;
                    	        }
                    	        break;
                    	    default:
                    	        if (state.backtracking>0) {state.failed=true; return retval;}
                    	        NoViableAltException nvae =
                    	            new NoViableAltException("", 99, 0, input);

                    	        throw nvae;
                    	    }

                    	    switch (alt99) {
                    	        case 1 :
                    	            // EsperEPL2Grammar.g:878:9: r= LT
                    	            {
                    	            r=(Token)match(input,LT,FOLLOW_LT_in_evalRelationalExpression4674); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_LT.add(r);


                    	            }
                    	            break;
                    	        case 2 :
                    	            // EsperEPL2Grammar.g:878:14: r= GT
                    	            {
                    	            r=(Token)match(input,GT,FOLLOW_GT_in_evalRelationalExpression4678); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_GT.add(r);


                    	            }
                    	            break;
                    	        case 3 :
                    	            // EsperEPL2Grammar.g:878:19: r= LE
                    	            {
                    	            r=(Token)match(input,LE,FOLLOW_LE_in_evalRelationalExpression4682); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_LE.add(r);


                    	            }
                    	            break;
                    	        case 4 :
                    	            // EsperEPL2Grammar.g:878:24: r= GE
                    	            {
                    	            r=(Token)match(input,GE,FOLLOW_GE_in_evalRelationalExpression4686); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_GE.add(r);


                    	            }
                    	            break;

                    	    }

                    	    // EsperEPL2Grammar.g:879:9: ( concatenationExpr | (g= ANY | g= SOME | g= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) )
                    	    int alt103=2;
                    	    int LA103_0 = input.LA(1);

                    	    if ( (LA103_0==WINDOW||LA103_0==ESCAPE||LA103_0==EVERY_EXPR||(LA103_0>=SUM && LA103_0<=COUNT)||LA103_0==OUTER||(LA103_0>=JOIN && LA103_0<=FULL)||(LA103_0>=EVENTS && LA103_0<=LAST)||(LA103_0>=UNIDIRECTIONAL && LA103_0<=CURRENT_TIMESTAMP)||LA103_0==SNAPSHOT||(LA103_0>=VARIABLE && LA103_0<=AT)||(LA103_0>=BOOLEAN_TRUE && LA103_0<=VALUE_NULL)||LA103_0==NUM_DOUBLE||LA103_0==IDENT||LA103_0==LPAREN||(LA103_0>=STRING_LITERAL && LA103_0<=QUOTED_STRING_LITERAL)||(LA103_0>=PLUS && LA103_0<=MINUS)||LA103_0==LCURLY||LA103_0==NUM_INT||LA103_0==QUESTION||(LA103_0>=TICKED_STRING_LITERAL && LA103_0<=NUM_FLOAT)) ) {
                    	        alt103=1;
                    	    }
                    	    else if ( ((LA103_0>=ALL && LA103_0<=SOME)) ) {
                    	        alt103=2;
                    	    }
                    	    else {
                    	        if (state.backtracking>0) {state.failed=true; return retval;}
                    	        NoViableAltException nvae =
                    	            new NoViableAltException("", 103, 0, input);

                    	        throw nvae;
                    	    }
                    	    switch (alt103) {
                    	        case 1 :
                    	            // EsperEPL2Grammar.g:880:11: concatenationExpr
                    	            {
                    	            pushFollow(FOLLOW_concatenationExpr_in_evalRelationalExpression4710);
                    	            concatenationExpr247=concatenationExpr();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) stream_concatenationExpr.add(concatenationExpr247.getTree());

                    	            }
                    	            break;
                    	        case 2 :
                    	            // EsperEPL2Grammar.g:881:13: (g= ANY | g= SOME | g= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression )
                    	            {
                    	            // EsperEPL2Grammar.g:881:13: (g= ANY | g= SOME | g= ALL )
                    	            int alt100=3;
                    	            switch ( input.LA(1) ) {
                    	            case ANY:
                    	                {
                    	                alt100=1;
                    	                }
                    	                break;
                    	            case SOME:
                    	                {
                    	                alt100=2;
                    	                }
                    	                break;
                    	            case ALL:
                    	                {
                    	                alt100=3;
                    	                }
                    	                break;
                    	            default:
                    	                if (state.backtracking>0) {state.failed=true; return retval;}
                    	                NoViableAltException nvae =
                    	                    new NoViableAltException("", 100, 0, input);

                    	                throw nvae;
                    	            }

                    	            switch (alt100) {
                    	                case 1 :
                    	                    // EsperEPL2Grammar.g:881:14: g= ANY
                    	                    {
                    	                    g=(Token)match(input,ANY,FOLLOW_ANY_in_evalRelationalExpression4727); if (state.failed) return retval; 
                    	                    if ( state.backtracking==0 ) stream_ANY.add(g);


                    	                    }
                    	                    break;
                    	                case 2 :
                    	                    // EsperEPL2Grammar.g:881:22: g= SOME
                    	                    {
                    	                    g=(Token)match(input,SOME,FOLLOW_SOME_in_evalRelationalExpression4733); if (state.failed) return retval; 
                    	                    if ( state.backtracking==0 ) stream_SOME.add(g);


                    	                    }
                    	                    break;
                    	                case 3 :
                    	                    // EsperEPL2Grammar.g:881:31: g= ALL
                    	                    {
                    	                    g=(Token)match(input,ALL,FOLLOW_ALL_in_evalRelationalExpression4739); if (state.failed) return retval; 
                    	                    if ( state.backtracking==0 ) stream_ALL.add(g);


                    	                    }
                    	                    break;

                    	            }

                    	            // EsperEPL2Grammar.g:881:38: ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression )
                    	            int alt102=2;
                    	            int LA102_0 = input.LA(1);

                    	            if ( (LA102_0==LPAREN) ) {
                    	                int LA102_1 = input.LA(2);

                    	                if ( (LA102_1==SELECT) ) {
                    	                    alt102=2;
                    	                }
                    	                else if ( (LA102_1==WINDOW||LA102_1==ESCAPE||(LA102_1>=NOT_EXPR && LA102_1<=EVERY_EXPR)||(LA102_1>=SUM && LA102_1<=COUNT)||LA102_1==CASE||LA102_1==OUTER||(LA102_1>=JOIN && LA102_1<=FULL)||(LA102_1>=EVENTS && LA102_1<=LAST)||(LA102_1>=UNIDIRECTIONAL && LA102_1<=CURRENT_TIMESTAMP)||LA102_1==SNAPSHOT||(LA102_1>=VARIABLE && LA102_1<=AT)||(LA102_1>=BOOLEAN_TRUE && LA102_1<=VALUE_NULL)||LA102_1==NUM_DOUBLE||LA102_1==IDENT||(LA102_1>=LPAREN && LA102_1<=RPAREN)||(LA102_1>=STRING_LITERAL && LA102_1<=QUOTED_STRING_LITERAL)||(LA102_1>=PLUS && LA102_1<=MINUS)||LA102_1==LCURLY||LA102_1==NUM_INT||LA102_1==QUESTION||(LA102_1>=TICKED_STRING_LITERAL && LA102_1<=NUM_FLOAT)) ) {
                    	                    alt102=1;
                    	                }
                    	                else {
                    	                    if (state.backtracking>0) {state.failed=true; return retval;}
                    	                    NoViableAltException nvae =
                    	                        new NoViableAltException("", 102, 1, input);

                    	                    throw nvae;
                    	                }
                    	            }
                    	            else {
                    	                if (state.backtracking>0) {state.failed=true; return retval;}
                    	                NoViableAltException nvae =
                    	                    new NoViableAltException("", 102, 0, input);

                    	                throw nvae;
                    	            }
                    	            switch (alt102) {
                    	                case 1 :
                    	                    // EsperEPL2Grammar.g:881:40: ( LPAREN ( expressionList )? RPAREN )
                    	                    {
                    	                    // EsperEPL2Grammar.g:881:40: ( LPAREN ( expressionList )? RPAREN )
                    	                    // EsperEPL2Grammar.g:881:41: LPAREN ( expressionList )? RPAREN
                    	                    {
                    	                    LPAREN248=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_evalRelationalExpression4745); if (state.failed) return retval; 
                    	                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN248);

                    	                    // EsperEPL2Grammar.g:881:48: ( expressionList )?
                    	                    int alt101=2;
                    	                    int LA101_0 = input.LA(1);

                    	                    if ( (LA101_0==WINDOW||LA101_0==ESCAPE||(LA101_0>=NOT_EXPR && LA101_0<=EVERY_EXPR)||(LA101_0>=SUM && LA101_0<=COUNT)||LA101_0==CASE||LA101_0==OUTER||(LA101_0>=JOIN && LA101_0<=FULL)||(LA101_0>=EVENTS && LA101_0<=LAST)||(LA101_0>=UNIDIRECTIONAL && LA101_0<=CURRENT_TIMESTAMP)||LA101_0==SNAPSHOT||(LA101_0>=VARIABLE && LA101_0<=AT)||(LA101_0>=BOOLEAN_TRUE && LA101_0<=VALUE_NULL)||LA101_0==NUM_DOUBLE||LA101_0==IDENT||LA101_0==LPAREN||(LA101_0>=STRING_LITERAL && LA101_0<=QUOTED_STRING_LITERAL)||(LA101_0>=PLUS && LA101_0<=MINUS)||LA101_0==LCURLY||LA101_0==NUM_INT||LA101_0==QUESTION||(LA101_0>=TICKED_STRING_LITERAL && LA101_0<=NUM_FLOAT)) ) {
                    	                        alt101=1;
                    	                    }
                    	                    switch (alt101) {
                    	                        case 1 :
                    	                            // EsperEPL2Grammar.g:881:48: expressionList
                    	                            {
                    	                            pushFollow(FOLLOW_expressionList_in_evalRelationalExpression4747);
                    	                            expressionList249=expressionList();

                    	                            state._fsp--;
                    	                            if (state.failed) return retval;
                    	                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList249.getTree());

                    	                            }
                    	                            break;

                    	                    }

                    	                    RPAREN250=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_evalRelationalExpression4750); if (state.failed) return retval; 
                    	                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN250);


                    	                    }


                    	                    }
                    	                    break;
                    	                case 2 :
                    	                    // EsperEPL2Grammar.g:881:74: subSelectGroupExpression
                    	                    {
                    	                    pushFollow(FOLLOW_subSelectGroupExpression_in_evalRelationalExpression4755);
                    	                    subSelectGroupExpression251=subSelectGroupExpression();

                    	                    state._fsp--;
                    	                    if (state.failed) return retval;
                    	                    if ( state.backtracking==0 ) stream_subSelectGroupExpression.add(subSelectGroupExpression251.getTree());

                    	                    }
                    	                    break;

                    	            }


                    	            }
                    	            break;

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop104;
                        }
                    } while (true);



                    // AST REWRITE
                    // elements: concatenationExpr, subSelectGroupExpression, concatenationExpr, g, expressionList, concatenationExpr
                    // token labels: g
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_g=new RewriteRuleTokenStream(adaptor,"token g",g);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 885:6: -> {$g == null && $r != null}? ^( ( concatenationExpr )+ )
                    if (g == null && r != null) {
                        // EsperEPL2Grammar.g:885:37: ^( ( concatenationExpr )+ )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(r), root_1);

                        if ( !(stream_concatenationExpr.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_concatenationExpr.hasNext() ) {
                            adaptor.addChild(root_1, stream_concatenationExpr.nextTree());

                        }
                        stream_concatenationExpr.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }
                    else // 886:6: -> {$g != null && $r != null}? ^( concatenationExpr $g ( expressionList )? ( subSelectGroupExpression )? )
                    if (g != null && r != null) {
                        // EsperEPL2Grammar.g:886:37: ^( concatenationExpr $g ( expressionList )? ( subSelectGroupExpression )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(r), root_1);

                        adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                        adaptor.addChild(root_1, stream_g.nextNode());
                        // EsperEPL2Grammar.g:886:81: ( expressionList )?
                        if ( stream_expressionList.hasNext() ) {
                            adaptor.addChild(root_1, stream_expressionList.nextTree());

                        }
                        stream_expressionList.reset();
                        // EsperEPL2Grammar.g:886:97: ( subSelectGroupExpression )?
                        if ( stream_subSelectGroupExpression.hasNext() ) {
                            adaptor.addChild(root_1, stream_subSelectGroupExpression.nextTree());

                        }
                        stream_subSelectGroupExpression.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }
                    else // 887:6: -> ( concatenationExpr )+
                    {
                        if ( !(stream_concatenationExpr.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_concatenationExpr.hasNext() ) {
                            adaptor.addChild(root_0, stream_concatenationExpr.nextTree());

                        }
                        stream_concatenationExpr.reset();

                    }

                    retval.tree = root_0;}
                    }


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:889:6: (n= NOT_EXPR )? ( (i= IN_SET (l= LPAREN | l= LBRACK ) expression ( (col= COLON ( expression ) ) | ( ( COMMA expression )* ) ) (r= RPAREN | r= RBRACK ) ) -> {$col == null && $n == null}? ^( IN_SET concatenationExpr $l ( expression )+ $r) -> {$col == null && $n != null}? ^( NOT_IN_SET concatenationExpr $l ( expression )+ $r) -> {$col != null && $n == null}? ^( IN_RANGE concatenationExpr $l ( expression )+ $r) -> ^( NOT_IN_RANGE concatenationExpr $l ( expression )+ $r) | IN_SET inSubSelectQuery -> {$n == null}? ^( IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) -> ^( NOT_IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) | BETWEEN betweenList -> {$n == null}? ^( BETWEEN concatenationExpr betweenList ) -> ^( NOT_BETWEEN concatenationExpr betweenList ) | LIKE concatenationExpr ( ESCAPE stringconstant )? -> {$n == null}? ^( LIKE ( concatenationExpr )* ( stringconstant )? ) -> ^( NOT_LIKE ( concatenationExpr )* ( stringconstant )? ) | REGEXP concatenationExpr -> {$n == null}? ^( REGEXP ( concatenationExpr )+ ) -> ^( NOT_REGEXP ( concatenationExpr )+ ) )
                    {
                    // EsperEPL2Grammar.g:889:6: (n= NOT_EXPR )?
                    int alt105=2;
                    int LA105_0 = input.LA(1);

                    if ( (LA105_0==NOT_EXPR) ) {
                        alt105=1;
                    }
                    switch (alt105) {
                        case 1 :
                            // EsperEPL2Grammar.g:889:7: n= NOT_EXPR
                            {
                            n=(Token)match(input,NOT_EXPR,FOLLOW_NOT_EXPR_in_evalRelationalExpression4851); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NOT_EXPR.add(n);


                            }
                            break;

                    }

                    // EsperEPL2Grammar.g:890:4: ( (i= IN_SET (l= LPAREN | l= LBRACK ) expression ( (col= COLON ( expression ) ) | ( ( COMMA expression )* ) ) (r= RPAREN | r= RBRACK ) ) -> {$col == null && $n == null}? ^( IN_SET concatenationExpr $l ( expression )+ $r) -> {$col == null && $n != null}? ^( NOT_IN_SET concatenationExpr $l ( expression )+ $r) -> {$col != null && $n == null}? ^( IN_RANGE concatenationExpr $l ( expression )+ $r) -> ^( NOT_IN_RANGE concatenationExpr $l ( expression )+ $r) | IN_SET inSubSelectQuery -> {$n == null}? ^( IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) -> ^( NOT_IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) | BETWEEN betweenList -> {$n == null}? ^( BETWEEN concatenationExpr betweenList ) -> ^( NOT_BETWEEN concatenationExpr betweenList ) | LIKE concatenationExpr ( ESCAPE stringconstant )? -> {$n == null}? ^( LIKE ( concatenationExpr )* ( stringconstant )? ) -> ^( NOT_LIKE ( concatenationExpr )* ( stringconstant )? ) | REGEXP concatenationExpr -> {$n == null}? ^( REGEXP ( concatenationExpr )+ ) -> ^( NOT_REGEXP ( concatenationExpr )+ ) )
                    int alt111=5;
                    switch ( input.LA(1) ) {
                    case IN_SET:
                        {
                        int LA111_1 = input.LA(2);

                        if ( (LA111_1==LPAREN) ) {
                            int LA111_5 = input.LA(3);

                            if ( (LA111_5==SELECT) ) {
                                alt111=2;
                            }
                            else if ( (LA111_5==WINDOW||LA111_5==ESCAPE||(LA111_5>=NOT_EXPR && LA111_5<=EVERY_EXPR)||(LA111_5>=SUM && LA111_5<=COUNT)||LA111_5==CASE||LA111_5==OUTER||(LA111_5>=JOIN && LA111_5<=FULL)||(LA111_5>=EVENTS && LA111_5<=LAST)||(LA111_5>=UNIDIRECTIONAL && LA111_5<=CURRENT_TIMESTAMP)||LA111_5==SNAPSHOT||(LA111_5>=VARIABLE && LA111_5<=AT)||(LA111_5>=BOOLEAN_TRUE && LA111_5<=VALUE_NULL)||LA111_5==NUM_DOUBLE||LA111_5==IDENT||LA111_5==LPAREN||(LA111_5>=STRING_LITERAL && LA111_5<=QUOTED_STRING_LITERAL)||(LA111_5>=PLUS && LA111_5<=MINUS)||LA111_5==LCURLY||LA111_5==NUM_INT||LA111_5==QUESTION||(LA111_5>=TICKED_STRING_LITERAL && LA111_5<=NUM_FLOAT)) ) {
                                alt111=1;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 111, 5, input);

                                throw nvae;
                            }
                        }
                        else if ( (LA111_1==LBRACK) ) {
                            alt111=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 111, 1, input);

                            throw nvae;
                        }
                        }
                        break;
                    case BETWEEN:
                        {
                        alt111=3;
                        }
                        break;
                    case LIKE:
                        {
                        alt111=4;
                        }
                        break;
                    case REGEXP:
                        {
                        alt111=5;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 111, 0, input);

                        throw nvae;
                    }

                    switch (alt111) {
                        case 1 :
                            // EsperEPL2Grammar.g:893:5: (i= IN_SET (l= LPAREN | l= LBRACK ) expression ( (col= COLON ( expression ) ) | ( ( COMMA expression )* ) ) (r= RPAREN | r= RBRACK ) )
                            {
                            // EsperEPL2Grammar.g:893:5: (i= IN_SET (l= LPAREN | l= LBRACK ) expression ( (col= COLON ( expression ) ) | ( ( COMMA expression )* ) ) (r= RPAREN | r= RBRACK ) )
                            // EsperEPL2Grammar.g:893:6: i= IN_SET (l= LPAREN | l= LBRACK ) expression ( (col= COLON ( expression ) ) | ( ( COMMA expression )* ) ) (r= RPAREN | r= RBRACK )
                            {
                            i=(Token)match(input,IN_SET,FOLLOW_IN_SET_in_evalRelationalExpression4878); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IN_SET.add(i);

                            // EsperEPL2Grammar.g:894:8: (l= LPAREN | l= LBRACK )
                            int alt106=2;
                            int LA106_0 = input.LA(1);

                            if ( (LA106_0==LPAREN) ) {
                                alt106=1;
                            }
                            else if ( (LA106_0==LBRACK) ) {
                                alt106=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 106, 0, input);

                                throw nvae;
                            }
                            switch (alt106) {
                                case 1 :
                                    // EsperEPL2Grammar.g:894:9: l= LPAREN
                                    {
                                    l=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_evalRelationalExpression4890); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_LPAREN.add(l);


                                    }
                                    break;
                                case 2 :
                                    // EsperEPL2Grammar.g:894:20: l= LBRACK
                                    {
                                    l=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_evalRelationalExpression4896); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_LBRACK.add(l);


                                    }
                                    break;

                            }

                            pushFollow(FOLLOW_expression_in_evalRelationalExpression4899);
                            expression252=expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(expression252.getTree());
                            // EsperEPL2Grammar.g:895:7: ( (col= COLON ( expression ) ) | ( ( COMMA expression )* ) )
                            int alt108=2;
                            int LA108_0 = input.LA(1);

                            if ( (LA108_0==COLON) ) {
                                alt108=1;
                            }
                            else if ( (LA108_0==COMMA||LA108_0==RPAREN||LA108_0==RBRACK) ) {
                                alt108=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 108, 0, input);

                                throw nvae;
                            }
                            switch (alt108) {
                                case 1 :
                                    // EsperEPL2Grammar.g:896:8: (col= COLON ( expression ) )
                                    {
                                    // EsperEPL2Grammar.g:896:8: (col= COLON ( expression ) )
                                    // EsperEPL2Grammar.g:896:10: col= COLON ( expression )
                                    {
                                    col=(Token)match(input,COLON,FOLLOW_COLON_in_evalRelationalExpression4921); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_COLON.add(col);

                                    // EsperEPL2Grammar.g:896:20: ( expression )
                                    // EsperEPL2Grammar.g:896:21: expression
                                    {
                                    pushFollow(FOLLOW_expression_in_evalRelationalExpression4924);
                                    expression253=expression();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_expression.add(expression253.getTree());

                                    }


                                    }


                                    }
                                    break;
                                case 2 :
                                    // EsperEPL2Grammar.g:898:8: ( ( COMMA expression )* )
                                    {
                                    // EsperEPL2Grammar.g:898:8: ( ( COMMA expression )* )
                                    // EsperEPL2Grammar.g:898:10: ( COMMA expression )*
                                    {
                                    // EsperEPL2Grammar.g:898:10: ( COMMA expression )*
                                    loop107:
                                    do {
                                        int alt107=2;
                                        int LA107_0 = input.LA(1);

                                        if ( (LA107_0==COMMA) ) {
                                            alt107=1;
                                        }


                                        switch (alt107) {
                                    	case 1 :
                                    	    // EsperEPL2Grammar.g:898:11: COMMA expression
                                    	    {
                                    	    COMMA254=(Token)match(input,COMMA,FOLLOW_COMMA_in_evalRelationalExpression4950); if (state.failed) return retval; 
                                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA254);

                                    	    pushFollow(FOLLOW_expression_in_evalRelationalExpression4952);
                                    	    expression255=expression();

                                    	    state._fsp--;
                                    	    if (state.failed) return retval;
                                    	    if ( state.backtracking==0 ) stream_expression.add(expression255.getTree());

                                    	    }
                                    	    break;

                                    	default :
                                    	    break loop107;
                                        }
                                    } while (true);


                                    }


                                    }
                                    break;

                            }

                            // EsperEPL2Grammar.g:900:8: (r= RPAREN | r= RBRACK )
                            int alt109=2;
                            int LA109_0 = input.LA(1);

                            if ( (LA109_0==RPAREN) ) {
                                alt109=1;
                            }
                            else if ( (LA109_0==RBRACK) ) {
                                alt109=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 109, 0, input);

                                throw nvae;
                            }
                            switch (alt109) {
                                case 1 :
                                    // EsperEPL2Grammar.g:900:9: r= RPAREN
                                    {
                                    r=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_evalRelationalExpression4978); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_RPAREN.add(r);


                                    }
                                    break;
                                case 2 :
                                    // EsperEPL2Grammar.g:900:20: r= RBRACK
                                    {
                                    r=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_evalRelationalExpression4984); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_RBRACK.add(r);


                                    }
                                    break;

                            }


                            }



                            // AST REWRITE
                            // elements: IN_SET, l, concatenationExpr, concatenationExpr, concatenationExpr, expression, l, l, l, r, r, expression, concatenationExpr, r, expression, expression, r
                            // token labels: r, l
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleTokenStream stream_r=new RewriteRuleTokenStream(adaptor,"token r",r);
                            RewriteRuleTokenStream stream_l=new RewriteRuleTokenStream(adaptor,"token l",l);
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 902:9: -> {$col == null && $n == null}? ^( IN_SET concatenationExpr $l ( expression )+ $r)
                            if (col == null && n == null) {
                                // EsperEPL2Grammar.g:902:42: ^( IN_SET concatenationExpr $l ( expression )+ $r)
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_IN_SET.nextNode(), root_1);

                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_l.nextNode());
                                if ( !(stream_expression.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_expression.hasNext() ) {
                                    adaptor.addChild(root_1, stream_expression.nextTree());

                                }
                                stream_expression.reset();
                                adaptor.addChild(root_1, stream_r.nextNode());

                                adaptor.addChild(root_0, root_1);
                                }

                            }
                            else // 903:9: -> {$col == null && $n != null}? ^( NOT_IN_SET concatenationExpr $l ( expression )+ $r)
                            if (col == null && n != null) {
                                // EsperEPL2Grammar.g:903:42: ^( NOT_IN_SET concatenationExpr $l ( expression )+ $r)
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_IN_SET, "NOT_IN_SET"), root_1);

                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_l.nextNode());
                                if ( !(stream_expression.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_expression.hasNext() ) {
                                    adaptor.addChild(root_1, stream_expression.nextTree());

                                }
                                stream_expression.reset();
                                adaptor.addChild(root_1, stream_r.nextNode());

                                adaptor.addChild(root_0, root_1);
                                }

                            }
                            else // 904:9: -> {$col != null && $n == null}? ^( IN_RANGE concatenationExpr $l ( expression )+ $r)
                            if (col != null && n == null) {
                                // EsperEPL2Grammar.g:904:42: ^( IN_RANGE concatenationExpr $l ( expression )+ $r)
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IN_RANGE, "IN_RANGE"), root_1);

                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_l.nextNode());
                                if ( !(stream_expression.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_expression.hasNext() ) {
                                    adaptor.addChild(root_1, stream_expression.nextTree());

                                }
                                stream_expression.reset();
                                adaptor.addChild(root_1, stream_r.nextNode());

                                adaptor.addChild(root_0, root_1);
                                }

                            }
                            else // 905:9: -> ^( NOT_IN_RANGE concatenationExpr $l ( expression )+ $r)
                            {
                                // EsperEPL2Grammar.g:905:12: ^( NOT_IN_RANGE concatenationExpr $l ( expression )+ $r)
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_IN_RANGE, "NOT_IN_RANGE"), root_1);

                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_l.nextNode());
                                if ( !(stream_expression.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_expression.hasNext() ) {
                                    adaptor.addChild(root_1, stream_expression.nextTree());

                                }
                                stream_expression.reset();
                                adaptor.addChild(root_1, stream_r.nextNode());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:906:7: IN_SET inSubSelectQuery
                            {
                            IN_SET256=(Token)match(input,IN_SET,FOLLOW_IN_SET_in_evalRelationalExpression5107); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IN_SET.add(IN_SET256);

                            pushFollow(FOLLOW_inSubSelectQuery_in_evalRelationalExpression5109);
                            inSubSelectQuery257=inSubSelectQuery();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_inSubSelectQuery.add(inSubSelectQuery257.getTree());


                            // AST REWRITE
                            // elements: inSubSelectQuery, concatenationExpr, inSubSelectQuery, concatenationExpr
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 907:9: -> {$n == null}? ^( IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery )
                            if (n == null) {
                                // EsperEPL2Grammar.g:907:26: ^( IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IN_SUBSELECT_EXPR, "IN_SUBSELECT_EXPR"), root_1);

                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_inSubSelectQuery.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }
                            else // 908:9: -> ^( NOT_IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery )
                            {
                                // EsperEPL2Grammar.g:908:12: ^( NOT_IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_IN_SUBSELECT_EXPR, "NOT_IN_SUBSELECT_EXPR"), root_1);

                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_inSubSelectQuery.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 3 :
                            // EsperEPL2Grammar.g:909:7: BETWEEN betweenList
                            {
                            BETWEEN258=(Token)match(input,BETWEEN,FOLLOW_BETWEEN_in_evalRelationalExpression5155); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_BETWEEN.add(BETWEEN258);

                            pushFollow(FOLLOW_betweenList_in_evalRelationalExpression5157);
                            betweenList259=betweenList();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_betweenList.add(betweenList259.getTree());


                            // AST REWRITE
                            // elements: concatenationExpr, concatenationExpr, betweenList, betweenList, BETWEEN
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 910:9: -> {$n == null}? ^( BETWEEN concatenationExpr betweenList )
                            if (n == null) {
                                // EsperEPL2Grammar.g:910:26: ^( BETWEEN concatenationExpr betweenList )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_BETWEEN.nextNode(), root_1);

                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_betweenList.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }
                            else // 911:9: -> ^( NOT_BETWEEN concatenationExpr betweenList )
                            {
                                // EsperEPL2Grammar.g:911:12: ^( NOT_BETWEEN concatenationExpr betweenList )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_BETWEEN, "NOT_BETWEEN"), root_1);

                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_betweenList.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 4 :
                            // EsperEPL2Grammar.g:912:7: LIKE concatenationExpr ( ESCAPE stringconstant )?
                            {
                            LIKE260=(Token)match(input,LIKE,FOLLOW_LIKE_in_evalRelationalExpression5207); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_LIKE.add(LIKE260);

                            pushFollow(FOLLOW_concatenationExpr_in_evalRelationalExpression5209);
                            concatenationExpr261=concatenationExpr();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_concatenationExpr.add(concatenationExpr261.getTree());
                            // EsperEPL2Grammar.g:912:30: ( ESCAPE stringconstant )?
                            int alt110=2;
                            int LA110_0 = input.LA(1);

                            if ( (LA110_0==ESCAPE) ) {
                                alt110=1;
                            }
                            switch (alt110) {
                                case 1 :
                                    // EsperEPL2Grammar.g:912:31: ESCAPE stringconstant
                                    {
                                    ESCAPE262=(Token)match(input,ESCAPE,FOLLOW_ESCAPE_in_evalRelationalExpression5212); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_ESCAPE.add(ESCAPE262);

                                    pushFollow(FOLLOW_stringconstant_in_evalRelationalExpression5214);
                                    stringconstant263=stringconstant();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_stringconstant.add(stringconstant263.getTree());

                                    }
                                    break;

                            }



                            // AST REWRITE
                            // elements: concatenationExpr, stringconstant, LIKE, stringconstant, concatenationExpr
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 913:9: -> {$n == null}? ^( LIKE ( concatenationExpr )* ( stringconstant )? )
                            if (n == null) {
                                // EsperEPL2Grammar.g:913:26: ^( LIKE ( concatenationExpr )* ( stringconstant )? )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_LIKE.nextNode(), root_1);

                                // EsperEPL2Grammar.g:913:33: ( concatenationExpr )*
                                while ( stream_concatenationExpr.hasNext() ) {
                                    adaptor.addChild(root_1, stream_concatenationExpr.nextTree());

                                }
                                stream_concatenationExpr.reset();
                                // EsperEPL2Grammar.g:913:52: ( stringconstant )?
                                if ( stream_stringconstant.hasNext() ) {
                                    adaptor.addChild(root_1, stream_stringconstant.nextTree());

                                }
                                stream_stringconstant.reset();

                                adaptor.addChild(root_0, root_1);
                                }

                            }
                            else // 914:9: -> ^( NOT_LIKE ( concatenationExpr )* ( stringconstant )? )
                            {
                                // EsperEPL2Grammar.g:914:12: ^( NOT_LIKE ( concatenationExpr )* ( stringconstant )? )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_LIKE, "NOT_LIKE"), root_1);

                                // EsperEPL2Grammar.g:914:23: ( concatenationExpr )*
                                while ( stream_concatenationExpr.hasNext() ) {
                                    adaptor.addChild(root_1, stream_concatenationExpr.nextTree());

                                }
                                stream_concatenationExpr.reset();
                                // EsperEPL2Grammar.g:914:42: ( stringconstant )?
                                if ( stream_stringconstant.hasNext() ) {
                                    adaptor.addChild(root_1, stream_stringconstant.nextTree());

                                }
                                stream_stringconstant.reset();

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 5 :
                            // EsperEPL2Grammar.g:915:7: REGEXP concatenationExpr
                            {
                            REGEXP264=(Token)match(input,REGEXP,FOLLOW_REGEXP_in_evalRelationalExpression5266); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_REGEXP.add(REGEXP264);

                            pushFollow(FOLLOW_concatenationExpr_in_evalRelationalExpression5268);
                            concatenationExpr265=concatenationExpr();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_concatenationExpr.add(concatenationExpr265.getTree());


                            // AST REWRITE
                            // elements: REGEXP, concatenationExpr, concatenationExpr
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 916:9: -> {$n == null}? ^( REGEXP ( concatenationExpr )+ )
                            if (n == null) {
                                // EsperEPL2Grammar.g:916:26: ^( REGEXP ( concatenationExpr )+ )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_REGEXP.nextNode(), root_1);

                                if ( !(stream_concatenationExpr.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_concatenationExpr.hasNext() ) {
                                    adaptor.addChild(root_1, stream_concatenationExpr.nextTree());

                                }
                                stream_concatenationExpr.reset();

                                adaptor.addChild(root_0, root_1);
                                }

                            }
                            else // 917:9: -> ^( NOT_REGEXP ( concatenationExpr )+ )
                            {
                                // EsperEPL2Grammar.g:917:12: ^( NOT_REGEXP ( concatenationExpr )+ )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_REGEXP, "NOT_REGEXP"), root_1);

                                if ( !(stream_concatenationExpr.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_concatenationExpr.hasNext() ) {
                                    adaptor.addChild(root_1, stream_concatenationExpr.nextTree());

                                }
                                stream_concatenationExpr.reset();

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "evalRelationalExpression"

    public static class inSubSelectQuery_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inSubSelectQuery"
    // EsperEPL2Grammar.g:922:1: inSubSelectQuery : subQueryExpr -> ^( IN_SUBSELECT_QUERY_EXPR subQueryExpr ) ;
    public final EsperEPL2GrammarParser.inSubSelectQuery_return inSubSelectQuery() throws RecognitionException {
        EsperEPL2GrammarParser.inSubSelectQuery_return retval = new EsperEPL2GrammarParser.inSubSelectQuery_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr266 = null;


        RewriteRuleSubtreeStream stream_subQueryExpr=new RewriteRuleSubtreeStream(adaptor,"rule subQueryExpr");
        try {
            // EsperEPL2Grammar.g:923:2: ( subQueryExpr -> ^( IN_SUBSELECT_QUERY_EXPR subQueryExpr ) )
            // EsperEPL2Grammar.g:923:4: subQueryExpr
            {
            pushFollow(FOLLOW_subQueryExpr_in_inSubSelectQuery5330);
            subQueryExpr266=subQueryExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_subQueryExpr.add(subQueryExpr266.getTree());


            // AST REWRITE
            // elements: subQueryExpr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 924:4: -> ^( IN_SUBSELECT_QUERY_EXPR subQueryExpr )
            {
                // EsperEPL2Grammar.g:924:7: ^( IN_SUBSELECT_QUERY_EXPR subQueryExpr )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IN_SUBSELECT_QUERY_EXPR, "IN_SUBSELECT_QUERY_EXPR"), root_1);

                adaptor.addChild(root_1, stream_subQueryExpr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "inSubSelectQuery"

    public static class concatenationExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "concatenationExpr"
    // EsperEPL2Grammar.g:927:1: concatenationExpr : additiveExpression (c= LOR additiveExpression ( LOR additiveExpression )* )? -> {$c != null}? ^( CONCAT ( additiveExpression )+ ) -> additiveExpression ;
    public final EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr() throws RecognitionException {
        EsperEPL2GrammarParser.concatenationExpr_return retval = new EsperEPL2GrammarParser.concatenationExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token c=null;
        Token LOR269=null;
        EsperEPL2GrammarParser.additiveExpression_return additiveExpression267 = null;

        EsperEPL2GrammarParser.additiveExpression_return additiveExpression268 = null;

        EsperEPL2GrammarParser.additiveExpression_return additiveExpression270 = null;


        CommonTree c_tree=null;
        CommonTree LOR269_tree=null;
        RewriteRuleTokenStream stream_LOR=new RewriteRuleTokenStream(adaptor,"token LOR");
        RewriteRuleSubtreeStream stream_additiveExpression=new RewriteRuleSubtreeStream(adaptor,"rule additiveExpression");
        try {
            // EsperEPL2Grammar.g:928:2: ( additiveExpression (c= LOR additiveExpression ( LOR additiveExpression )* )? -> {$c != null}? ^( CONCAT ( additiveExpression )+ ) -> additiveExpression )
            // EsperEPL2Grammar.g:928:4: additiveExpression (c= LOR additiveExpression ( LOR additiveExpression )* )?
            {
            pushFollow(FOLLOW_additiveExpression_in_concatenationExpr5355);
            additiveExpression267=additiveExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_additiveExpression.add(additiveExpression267.getTree());
            // EsperEPL2Grammar.g:928:23: (c= LOR additiveExpression ( LOR additiveExpression )* )?
            int alt114=2;
            int LA114_0 = input.LA(1);

            if ( (LA114_0==LOR) ) {
                alt114=1;
            }
            switch (alt114) {
                case 1 :
                    // EsperEPL2Grammar.g:928:25: c= LOR additiveExpression ( LOR additiveExpression )*
                    {
                    c=(Token)match(input,LOR,FOLLOW_LOR_in_concatenationExpr5361); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LOR.add(c);

                    pushFollow(FOLLOW_additiveExpression_in_concatenationExpr5363);
                    additiveExpression268=additiveExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_additiveExpression.add(additiveExpression268.getTree());
                    // EsperEPL2Grammar.g:928:50: ( LOR additiveExpression )*
                    loop113:
                    do {
                        int alt113=2;
                        int LA113_0 = input.LA(1);

                        if ( (LA113_0==LOR) ) {
                            alt113=1;
                        }


                        switch (alt113) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:928:52: LOR additiveExpression
                    	    {
                    	    LOR269=(Token)match(input,LOR,FOLLOW_LOR_in_concatenationExpr5367); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_LOR.add(LOR269);

                    	    pushFollow(FOLLOW_additiveExpression_in_concatenationExpr5369);
                    	    additiveExpression270=additiveExpression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_additiveExpression.add(additiveExpression270.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop113;
                        }
                    } while (true);


                    }
                    break;

            }



            // AST REWRITE
            // elements: additiveExpression, additiveExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 929:6: -> {$c != null}? ^( CONCAT ( additiveExpression )+ )
            if (c != null) {
                // EsperEPL2Grammar.g:929:23: ^( CONCAT ( additiveExpression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CONCAT, "CONCAT"), root_1);

                if ( !(stream_additiveExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_additiveExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_additiveExpression.nextTree());

                }
                stream_additiveExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 930:6: -> additiveExpression
            {
                adaptor.addChild(root_0, stream_additiveExpression.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "concatenationExpr"

    public static class additiveExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "additiveExpression"
    // EsperEPL2Grammar.g:933:1: additiveExpression : multiplyExpression ( ( PLUS | MINUS ) multiplyExpression )* ;
    public final EsperEPL2GrammarParser.additiveExpression_return additiveExpression() throws RecognitionException {
        EsperEPL2GrammarParser.additiveExpression_return retval = new EsperEPL2GrammarParser.additiveExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token PLUS272=null;
        Token MINUS273=null;
        EsperEPL2GrammarParser.multiplyExpression_return multiplyExpression271 = null;

        EsperEPL2GrammarParser.multiplyExpression_return multiplyExpression274 = null;


        CommonTree PLUS272_tree=null;
        CommonTree MINUS273_tree=null;

        try {
            // EsperEPL2Grammar.g:934:2: ( multiplyExpression ( ( PLUS | MINUS ) multiplyExpression )* )
            // EsperEPL2Grammar.g:934:4: multiplyExpression ( ( PLUS | MINUS ) multiplyExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_multiplyExpression_in_additiveExpression5410);
            multiplyExpression271=multiplyExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, multiplyExpression271.getTree());
            // EsperEPL2Grammar.g:934:23: ( ( PLUS | MINUS ) multiplyExpression )*
            loop116:
            do {
                int alt116=2;
                int LA116_0 = input.LA(1);

                if ( ((LA116_0>=PLUS && LA116_0<=MINUS)) ) {
                    alt116=1;
                }


                switch (alt116) {
            	case 1 :
            	    // EsperEPL2Grammar.g:934:25: ( PLUS | MINUS ) multiplyExpression
            	    {
            	    // EsperEPL2Grammar.g:934:25: ( PLUS | MINUS )
            	    int alt115=2;
            	    int LA115_0 = input.LA(1);

            	    if ( (LA115_0==PLUS) ) {
            	        alt115=1;
            	    }
            	    else if ( (LA115_0==MINUS) ) {
            	        alt115=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 115, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt115) {
            	        case 1 :
            	            // EsperEPL2Grammar.g:934:26: PLUS
            	            {
            	            PLUS272=(Token)match(input,PLUS,FOLLOW_PLUS_in_additiveExpression5415); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            PLUS272_tree = (CommonTree)adaptor.create(PLUS272);
            	            root_0 = (CommonTree)adaptor.becomeRoot(PLUS272_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // EsperEPL2Grammar.g:934:32: MINUS
            	            {
            	            MINUS273=(Token)match(input,MINUS,FOLLOW_MINUS_in_additiveExpression5418); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            MINUS273_tree = (CommonTree)adaptor.create(MINUS273);
            	            root_0 = (CommonTree)adaptor.becomeRoot(MINUS273_tree, root_0);
            	            }

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_multiplyExpression_in_additiveExpression5422);
            	    multiplyExpression274=multiplyExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, multiplyExpression274.getTree());

            	    }
            	    break;

            	default :
            	    break loop116;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "additiveExpression"

    public static class multiplyExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "multiplyExpression"
    // EsperEPL2Grammar.g:937:1: multiplyExpression : unaryExpression ( ( STAR | DIV | MOD ) unaryExpression )* ;
    public final EsperEPL2GrammarParser.multiplyExpression_return multiplyExpression() throws RecognitionException {
        EsperEPL2GrammarParser.multiplyExpression_return retval = new EsperEPL2GrammarParser.multiplyExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token STAR276=null;
        Token DIV277=null;
        Token MOD278=null;
        EsperEPL2GrammarParser.unaryExpression_return unaryExpression275 = null;

        EsperEPL2GrammarParser.unaryExpression_return unaryExpression279 = null;


        CommonTree STAR276_tree=null;
        CommonTree DIV277_tree=null;
        CommonTree MOD278_tree=null;

        try {
            // EsperEPL2Grammar.g:938:2: ( unaryExpression ( ( STAR | DIV | MOD ) unaryExpression )* )
            // EsperEPL2Grammar.g:938:4: unaryExpression ( ( STAR | DIV | MOD ) unaryExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_unaryExpression_in_multiplyExpression5436);
            unaryExpression275=unaryExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpression275.getTree());
            // EsperEPL2Grammar.g:938:20: ( ( STAR | DIV | MOD ) unaryExpression )*
            loop118:
            do {
                int alt118=2;
                int LA118_0 = input.LA(1);

                if ( (LA118_0==STAR||(LA118_0>=DIV && LA118_0<=MOD)) ) {
                    alt118=1;
                }


                switch (alt118) {
            	case 1 :
            	    // EsperEPL2Grammar.g:938:22: ( STAR | DIV | MOD ) unaryExpression
            	    {
            	    // EsperEPL2Grammar.g:938:22: ( STAR | DIV | MOD )
            	    int alt117=3;
            	    switch ( input.LA(1) ) {
            	    case STAR:
            	        {
            	        alt117=1;
            	        }
            	        break;
            	    case DIV:
            	        {
            	        alt117=2;
            	        }
            	        break;
            	    case MOD:
            	        {
            	        alt117=3;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 117, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt117) {
            	        case 1 :
            	            // EsperEPL2Grammar.g:938:23: STAR
            	            {
            	            STAR276=(Token)match(input,STAR,FOLLOW_STAR_in_multiplyExpression5441); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            STAR276_tree = (CommonTree)adaptor.create(STAR276);
            	            root_0 = (CommonTree)adaptor.becomeRoot(STAR276_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // EsperEPL2Grammar.g:938:29: DIV
            	            {
            	            DIV277=(Token)match(input,DIV,FOLLOW_DIV_in_multiplyExpression5444); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            DIV277_tree = (CommonTree)adaptor.create(DIV277);
            	            root_0 = (CommonTree)adaptor.becomeRoot(DIV277_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 3 :
            	            // EsperEPL2Grammar.g:938:34: MOD
            	            {
            	            MOD278=(Token)match(input,MOD,FOLLOW_MOD_in_multiplyExpression5447); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            MOD278_tree = (CommonTree)adaptor.create(MOD278);
            	            root_0 = (CommonTree)adaptor.becomeRoot(MOD278_tree, root_0);
            	            }

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_unaryExpression_in_multiplyExpression5451);
            	    unaryExpression279=unaryExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpression279.getTree());

            	    }
            	    break;

            	default :
            	    break loop118;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "multiplyExpression"

    public static class unaryExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unaryExpression"
    // EsperEPL2Grammar.g:941:1: unaryExpression : ( MINUS eventProperty -> ^( UNARY_MINUS eventProperty ) | constant | substitution | LPAREN expression RPAREN | eventPropertyOrLibFunction | ( builtinFunc )=> ( builtinFunc ) | arrayExpression | subSelectExpression | existsSubSelectExpression );
    public final EsperEPL2GrammarParser.unaryExpression_return unaryExpression() throws RecognitionException {
        EsperEPL2GrammarParser.unaryExpression_return retval = new EsperEPL2GrammarParser.unaryExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token MINUS280=null;
        Token LPAREN284=null;
        Token RPAREN286=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty281 = null;

        EsperEPL2GrammarParser.constant_return constant282 = null;

        EsperEPL2GrammarParser.substitution_return substitution283 = null;

        EsperEPL2GrammarParser.expression_return expression285 = null;

        EsperEPL2GrammarParser.eventPropertyOrLibFunction_return eventPropertyOrLibFunction287 = null;

        EsperEPL2GrammarParser.builtinFunc_return builtinFunc288 = null;

        EsperEPL2GrammarParser.arrayExpression_return arrayExpression289 = null;

        EsperEPL2GrammarParser.subSelectExpression_return subSelectExpression290 = null;

        EsperEPL2GrammarParser.existsSubSelectExpression_return existsSubSelectExpression291 = null;


        CommonTree MINUS280_tree=null;
        CommonTree LPAREN284_tree=null;
        CommonTree RPAREN286_tree=null;
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleSubtreeStream stream_eventProperty=new RewriteRuleSubtreeStream(adaptor,"rule eventProperty");
        try {
            // EsperEPL2Grammar.g:942:2: ( MINUS eventProperty -> ^( UNARY_MINUS eventProperty ) | constant | substitution | LPAREN expression RPAREN | eventPropertyOrLibFunction | ( builtinFunc )=> ( builtinFunc ) | arrayExpression | subSelectExpression | existsSubSelectExpression )
            int alt119=9;
            alt119 = dfa119.predict(input);
            switch (alt119) {
                case 1 :
                    // EsperEPL2Grammar.g:942:4: MINUS eventProperty
                    {
                    MINUS280=(Token)match(input,MINUS,FOLLOW_MINUS_in_unaryExpression5466); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MINUS.add(MINUS280);

                    pushFollow(FOLLOW_eventProperty_in_unaryExpression5468);
                    eventProperty281=eventProperty();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_eventProperty.add(eventProperty281.getTree());


                    // AST REWRITE
                    // elements: eventProperty
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 942:24: -> ^( UNARY_MINUS eventProperty )
                    {
                        // EsperEPL2Grammar.g:942:27: ^( UNARY_MINUS eventProperty )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(UNARY_MINUS, "UNARY_MINUS"), root_1);

                        adaptor.addChild(root_1, stream_eventProperty.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:943:4: constant
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_constant_in_unaryExpression5481);
                    constant282=constant();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constant282.getTree());

                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:944:4: substitution
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_substitution_in_unaryExpression5486);
                    substitution283=substitution();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, substitution283.getTree());

                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:945:4: LPAREN expression RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    LPAREN284=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_unaryExpression5491); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_unaryExpression5494);
                    expression285=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression285.getTree());
                    RPAREN286=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_unaryExpression5496); if (state.failed) return retval;

                    }
                    break;
                case 5 :
                    // EsperEPL2Grammar.g:946:4: eventPropertyOrLibFunction
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_eventPropertyOrLibFunction_in_unaryExpression5502);
                    eventPropertyOrLibFunction287=eventPropertyOrLibFunction();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, eventPropertyOrLibFunction287.getTree());

                    }
                    break;
                case 6 :
                    // EsperEPL2Grammar.g:947:4: ( builtinFunc )=> ( builtinFunc )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // EsperEPL2Grammar.g:947:21: ( builtinFunc )
                    // EsperEPL2Grammar.g:947:22: builtinFunc
                    {
                    pushFollow(FOLLOW_builtinFunc_in_unaryExpression5514);
                    builtinFunc288=builtinFunc();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, builtinFunc288.getTree());

                    }


                    }
                    break;
                case 7 :
                    // EsperEPL2Grammar.g:948:4: arrayExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_arrayExpression_in_unaryExpression5520);
                    arrayExpression289=arrayExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arrayExpression289.getTree());

                    }
                    break;
                case 8 :
                    // EsperEPL2Grammar.g:949:4: subSelectExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_subSelectExpression_in_unaryExpression5525);
                    subSelectExpression290=subSelectExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, subSelectExpression290.getTree());

                    }
                    break;
                case 9 :
                    // EsperEPL2Grammar.g:950:4: existsSubSelectExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_existsSubSelectExpression_in_unaryExpression5530);
                    existsSubSelectExpression291=existsSubSelectExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, existsSubSelectExpression291.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "unaryExpression"

    public static class subSelectExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "subSelectExpression"
    // EsperEPL2Grammar.g:953:1: subSelectExpression : subQueryExpr -> ^( SUBSELECT_EXPR subQueryExpr ) ;
    public final EsperEPL2GrammarParser.subSelectExpression_return subSelectExpression() throws RecognitionException {
        EsperEPL2GrammarParser.subSelectExpression_return retval = new EsperEPL2GrammarParser.subSelectExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr292 = null;


        RewriteRuleSubtreeStream stream_subQueryExpr=new RewriteRuleSubtreeStream(adaptor,"rule subQueryExpr");
        try {
            // EsperEPL2Grammar.g:954:2: ( subQueryExpr -> ^( SUBSELECT_EXPR subQueryExpr ) )
            // EsperEPL2Grammar.g:954:4: subQueryExpr
            {
            pushFollow(FOLLOW_subQueryExpr_in_subSelectExpression5547);
            subQueryExpr292=subQueryExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_subQueryExpr.add(subQueryExpr292.getTree());


            // AST REWRITE
            // elements: subQueryExpr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 955:3: -> ^( SUBSELECT_EXPR subQueryExpr )
            {
                // EsperEPL2Grammar.g:955:6: ^( SUBSELECT_EXPR subQueryExpr )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SUBSELECT_EXPR, "SUBSELECT_EXPR"), root_1);

                adaptor.addChild(root_1, stream_subQueryExpr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "subSelectExpression"

    public static class subSelectGroupExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "subSelectGroupExpression"
    // EsperEPL2Grammar.g:958:1: subSelectGroupExpression : subQueryExpr -> ^( SUBSELECT_GROUP_EXPR subQueryExpr ) ;
    public final EsperEPL2GrammarParser.subSelectGroupExpression_return subSelectGroupExpression() throws RecognitionException {
        EsperEPL2GrammarParser.subSelectGroupExpression_return retval = new EsperEPL2GrammarParser.subSelectGroupExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr293 = null;


        RewriteRuleSubtreeStream stream_subQueryExpr=new RewriteRuleSubtreeStream(adaptor,"rule subQueryExpr");
        try {
            // EsperEPL2Grammar.g:959:2: ( subQueryExpr -> ^( SUBSELECT_GROUP_EXPR subQueryExpr ) )
            // EsperEPL2Grammar.g:959:4: subQueryExpr
            {
            pushFollow(FOLLOW_subQueryExpr_in_subSelectGroupExpression5569);
            subQueryExpr293=subQueryExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_subQueryExpr.add(subQueryExpr293.getTree());


            // AST REWRITE
            // elements: subQueryExpr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 960:3: -> ^( SUBSELECT_GROUP_EXPR subQueryExpr )
            {
                // EsperEPL2Grammar.g:960:6: ^( SUBSELECT_GROUP_EXPR subQueryExpr )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SUBSELECT_GROUP_EXPR, "SUBSELECT_GROUP_EXPR"), root_1);

                adaptor.addChild(root_1, stream_subQueryExpr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "subSelectGroupExpression"

    public static class existsSubSelectExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "existsSubSelectExpression"
    // EsperEPL2Grammar.g:963:1: existsSubSelectExpression : EXISTS subQueryExpr -> ^( EXISTS_SUBSELECT_EXPR subQueryExpr ) ;
    public final EsperEPL2GrammarParser.existsSubSelectExpression_return existsSubSelectExpression() throws RecognitionException {
        EsperEPL2GrammarParser.existsSubSelectExpression_return retval = new EsperEPL2GrammarParser.existsSubSelectExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token EXISTS294=null;
        EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr295 = null;


        CommonTree EXISTS294_tree=null;
        RewriteRuleTokenStream stream_EXISTS=new RewriteRuleTokenStream(adaptor,"token EXISTS");
        RewriteRuleSubtreeStream stream_subQueryExpr=new RewriteRuleSubtreeStream(adaptor,"rule subQueryExpr");
        try {
            // EsperEPL2Grammar.g:964:2: ( EXISTS subQueryExpr -> ^( EXISTS_SUBSELECT_EXPR subQueryExpr ) )
            // EsperEPL2Grammar.g:964:4: EXISTS subQueryExpr
            {
            EXISTS294=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_existsSubSelectExpression5591); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EXISTS.add(EXISTS294);

            pushFollow(FOLLOW_subQueryExpr_in_existsSubSelectExpression5593);
            subQueryExpr295=subQueryExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_subQueryExpr.add(subQueryExpr295.getTree());


            // AST REWRITE
            // elements: subQueryExpr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 965:3: -> ^( EXISTS_SUBSELECT_EXPR subQueryExpr )
            {
                // EsperEPL2Grammar.g:965:6: ^( EXISTS_SUBSELECT_EXPR subQueryExpr )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EXISTS_SUBSELECT_EXPR, "EXISTS_SUBSELECT_EXPR"), root_1);

                adaptor.addChild(root_1, stream_subQueryExpr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "existsSubSelectExpression"

    public static class subQueryExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "subQueryExpr"
    // EsperEPL2Grammar.g:968:1: subQueryExpr : LPAREN SELECT selectionListElement FROM subSelectFilterExpr ( WHERE whereClause )? RPAREN ;
    public final EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr() throws RecognitionException {
        EsperEPL2GrammarParser.subQueryExpr_return retval = new EsperEPL2GrammarParser.subQueryExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LPAREN296=null;
        Token SELECT297=null;
        Token FROM299=null;
        Token WHERE301=null;
        Token RPAREN303=null;
        EsperEPL2GrammarParser.selectionListElement_return selectionListElement298 = null;

        EsperEPL2GrammarParser.subSelectFilterExpr_return subSelectFilterExpr300 = null;

        EsperEPL2GrammarParser.whereClause_return whereClause302 = null;


        CommonTree LPAREN296_tree=null;
        CommonTree SELECT297_tree=null;
        CommonTree FROM299_tree=null;
        CommonTree WHERE301_tree=null;
        CommonTree RPAREN303_tree=null;

         paraphrases.push("subquery"); 
        try {
            // EsperEPL2Grammar.g:971:2: ( LPAREN SELECT selectionListElement FROM subSelectFilterExpr ( WHERE whereClause )? RPAREN )
            // EsperEPL2Grammar.g:971:4: LPAREN SELECT selectionListElement FROM subSelectFilterExpr ( WHERE whereClause )? RPAREN
            {
            root_0 = (CommonTree)adaptor.nil();

            LPAREN296=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_subQueryExpr5626); if (state.failed) return retval;
            SELECT297=(Token)match(input,SELECT,FOLLOW_SELECT_in_subQueryExpr5632); if (state.failed) return retval;
            pushFollow(FOLLOW_selectionListElement_in_subQueryExpr5635);
            selectionListElement298=selectionListElement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, selectionListElement298.getTree());
            FROM299=(Token)match(input,FROM,FOLLOW_FROM_in_subQueryExpr5642); if (state.failed) return retval;
            pushFollow(FOLLOW_subSelectFilterExpr_in_subQueryExpr5645);
            subSelectFilterExpr300=subSelectFilterExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, subSelectFilterExpr300.getTree());
            // EsperEPL2Grammar.g:974:6: ( WHERE whereClause )?
            int alt120=2;
            int LA120_0 = input.LA(1);

            if ( (LA120_0==WHERE) ) {
                alt120=1;
            }
            switch (alt120) {
                case 1 :
                    // EsperEPL2Grammar.g:974:7: WHERE whereClause
                    {
                    WHERE301=(Token)match(input,WHERE,FOLLOW_WHERE_in_subQueryExpr5653); if (state.failed) return retval;
                    pushFollow(FOLLOW_whereClause_in_subQueryExpr5656);
                    whereClause302=whereClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, whereClause302.getTree());

                    }
                    break;

            }

            RPAREN303=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_subQueryExpr5665); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "subQueryExpr"

    public static class subSelectFilterExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "subSelectFilterExpr"
    // EsperEPL2Grammar.g:978:1: subSelectFilterExpr : eventFilterExpression ( DOT viewExpression ( DOT viewExpression )* )? ( AS i= IDENT | i= IDENT )? (ru= RETAINUNION | ri= RETAININTERSECTION )? -> ^( STREAM_EXPR eventFilterExpression ( viewExpression )* ( $i)? ( $ru)? ( $ri)? ) ;
    public final EsperEPL2GrammarParser.subSelectFilterExpr_return subSelectFilterExpr() throws RecognitionException {
        EsperEPL2GrammarParser.subSelectFilterExpr_return retval = new EsperEPL2GrammarParser.subSelectFilterExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token ru=null;
        Token ri=null;
        Token DOT305=null;
        Token DOT307=null;
        Token AS309=null;
        EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression304 = null;

        EsperEPL2GrammarParser.viewExpression_return viewExpression306 = null;

        EsperEPL2GrammarParser.viewExpression_return viewExpression308 = null;


        CommonTree i_tree=null;
        CommonTree ru_tree=null;
        CommonTree ri_tree=null;
        CommonTree DOT305_tree=null;
        CommonTree DOT307_tree=null;
        CommonTree AS309_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RETAINUNION=new RewriteRuleTokenStream(adaptor,"token RETAINUNION");
        RewriteRuleTokenStream stream_RETAININTERSECTION=new RewriteRuleTokenStream(adaptor,"token RETAININTERSECTION");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_viewExpression=new RewriteRuleSubtreeStream(adaptor,"rule viewExpression");
        RewriteRuleSubtreeStream stream_eventFilterExpression=new RewriteRuleSubtreeStream(adaptor,"rule eventFilterExpression");
         paraphrases.push("subquery filter specification"); 
        try {
            // EsperEPL2Grammar.g:981:2: ( eventFilterExpression ( DOT viewExpression ( DOT viewExpression )* )? ( AS i= IDENT | i= IDENT )? (ru= RETAINUNION | ri= RETAININTERSECTION )? -> ^( STREAM_EXPR eventFilterExpression ( viewExpression )* ( $i)? ( $ru)? ( $ri)? ) )
            // EsperEPL2Grammar.g:981:4: eventFilterExpression ( DOT viewExpression ( DOT viewExpression )* )? ( AS i= IDENT | i= IDENT )? (ru= RETAINUNION | ri= RETAININTERSECTION )?
            {
            pushFollow(FOLLOW_eventFilterExpression_in_subSelectFilterExpr5689);
            eventFilterExpression304=eventFilterExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventFilterExpression.add(eventFilterExpression304.getTree());
            // EsperEPL2Grammar.g:982:3: ( DOT viewExpression ( DOT viewExpression )* )?
            int alt122=2;
            int LA122_0 = input.LA(1);

            if ( (LA122_0==DOT) ) {
                alt122=1;
            }
            switch (alt122) {
                case 1 :
                    // EsperEPL2Grammar.g:982:4: DOT viewExpression ( DOT viewExpression )*
                    {
                    DOT305=(Token)match(input,DOT,FOLLOW_DOT_in_subSelectFilterExpr5694); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT305);

                    pushFollow(FOLLOW_viewExpression_in_subSelectFilterExpr5696);
                    viewExpression306=viewExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression306.getTree());
                    // EsperEPL2Grammar.g:982:23: ( DOT viewExpression )*
                    loop121:
                    do {
                        int alt121=2;
                        int LA121_0 = input.LA(1);

                        if ( (LA121_0==DOT) ) {
                            alt121=1;
                        }


                        switch (alt121) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:982:24: DOT viewExpression
                    	    {
                    	    DOT307=(Token)match(input,DOT,FOLLOW_DOT_in_subSelectFilterExpr5699); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_DOT.add(DOT307);

                    	    pushFollow(FOLLOW_viewExpression_in_subSelectFilterExpr5701);
                    	    viewExpression308=viewExpression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression308.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop121;
                        }
                    } while (true);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:982:47: ( AS i= IDENT | i= IDENT )?
            int alt123=3;
            int LA123_0 = input.LA(1);

            if ( (LA123_0==AS) ) {
                alt123=1;
            }
            else if ( (LA123_0==IDENT) ) {
                alt123=2;
            }
            switch (alt123) {
                case 1 :
                    // EsperEPL2Grammar.g:982:48: AS i= IDENT
                    {
                    AS309=(Token)match(input,AS,FOLLOW_AS_in_subSelectFilterExpr5708); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS309);

                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_subSelectFilterExpr5712); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:982:61: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_subSelectFilterExpr5718); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:982:71: (ru= RETAINUNION | ri= RETAININTERSECTION )?
            int alt124=3;
            int LA124_0 = input.LA(1);

            if ( (LA124_0==RETAINUNION) ) {
                alt124=1;
            }
            else if ( (LA124_0==RETAININTERSECTION) ) {
                alt124=2;
            }
            switch (alt124) {
                case 1 :
                    // EsperEPL2Grammar.g:982:72: ru= RETAINUNION
                    {
                    ru=(Token)match(input,RETAINUNION,FOLLOW_RETAINUNION_in_subSelectFilterExpr5725); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAINUNION.add(ru);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:982:87: ri= RETAININTERSECTION
                    {
                    ri=(Token)match(input,RETAININTERSECTION,FOLLOW_RETAININTERSECTION_in_subSelectFilterExpr5729); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAININTERSECTION.add(ri);


                    }
                    break;

            }



            // AST REWRITE
            // elements: eventFilterExpression, ru, i, viewExpression, ri
            // token labels: ri, ru, i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_ri=new RewriteRuleTokenStream(adaptor,"token ri",ri);
            RewriteRuleTokenStream stream_ru=new RewriteRuleTokenStream(adaptor,"token ru",ru);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 983:3: -> ^( STREAM_EXPR eventFilterExpression ( viewExpression )* ( $i)? ( $ru)? ( $ri)? )
            {
                // EsperEPL2Grammar.g:983:6: ^( STREAM_EXPR eventFilterExpression ( viewExpression )* ( $i)? ( $ru)? ( $ri)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STREAM_EXPR, "STREAM_EXPR"), root_1);

                adaptor.addChild(root_1, stream_eventFilterExpression.nextTree());
                // EsperEPL2Grammar.g:983:42: ( viewExpression )*
                while ( stream_viewExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_viewExpression.nextTree());

                }
                stream_viewExpression.reset();
                // EsperEPL2Grammar.g:983:58: ( $i)?
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());

                }
                stream_i.reset();
                // EsperEPL2Grammar.g:983:62: ( $ru)?
                if ( stream_ru.hasNext() ) {
                    adaptor.addChild(root_1, stream_ru.nextNode());

                }
                stream_ru.reset();
                // EsperEPL2Grammar.g:983:67: ( $ri)?
                if ( stream_ri.hasNext() ) {
                    adaptor.addChild(root_1, stream_ri.nextNode());

                }
                stream_ri.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "subSelectFilterExpr"

    public static class arrayExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "arrayExpression"
    // EsperEPL2Grammar.g:986:1: arrayExpression : LCURLY ( expression ( COMMA expression )* )? RCURLY -> ^( ARRAY_EXPR ( expression )* ) ;
    public final EsperEPL2GrammarParser.arrayExpression_return arrayExpression() throws RecognitionException {
        EsperEPL2GrammarParser.arrayExpression_return retval = new EsperEPL2GrammarParser.arrayExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LCURLY310=null;
        Token COMMA312=null;
        Token RCURLY314=null;
        EsperEPL2GrammarParser.expression_return expression311 = null;

        EsperEPL2GrammarParser.expression_return expression313 = null;


        CommonTree LCURLY310_tree=null;
        CommonTree COMMA312_tree=null;
        CommonTree RCURLY314_tree=null;
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            // EsperEPL2Grammar.g:987:2: ( LCURLY ( expression ( COMMA expression )* )? RCURLY -> ^( ARRAY_EXPR ( expression )* ) )
            // EsperEPL2Grammar.g:987:4: LCURLY ( expression ( COMMA expression )* )? RCURLY
            {
            LCURLY310=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_arrayExpression5769); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCURLY.add(LCURLY310);

            // EsperEPL2Grammar.g:987:11: ( expression ( COMMA expression )* )?
            int alt126=2;
            int LA126_0 = input.LA(1);

            if ( (LA126_0==WINDOW||LA126_0==ESCAPE||(LA126_0>=NOT_EXPR && LA126_0<=EVERY_EXPR)||(LA126_0>=SUM && LA126_0<=COUNT)||LA126_0==CASE||LA126_0==OUTER||(LA126_0>=JOIN && LA126_0<=FULL)||(LA126_0>=EVENTS && LA126_0<=LAST)||(LA126_0>=UNIDIRECTIONAL && LA126_0<=CURRENT_TIMESTAMP)||LA126_0==SNAPSHOT||(LA126_0>=VARIABLE && LA126_0<=AT)||(LA126_0>=BOOLEAN_TRUE && LA126_0<=VALUE_NULL)||LA126_0==NUM_DOUBLE||LA126_0==IDENT||LA126_0==LPAREN||(LA126_0>=STRING_LITERAL && LA126_0<=QUOTED_STRING_LITERAL)||(LA126_0>=PLUS && LA126_0<=MINUS)||LA126_0==LCURLY||LA126_0==NUM_INT||LA126_0==QUESTION||(LA126_0>=TICKED_STRING_LITERAL && LA126_0<=NUM_FLOAT)) ) {
                alt126=1;
            }
            switch (alt126) {
                case 1 :
                    // EsperEPL2Grammar.g:987:12: expression ( COMMA expression )*
                    {
                    pushFollow(FOLLOW_expression_in_arrayExpression5772);
                    expression311=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression311.getTree());
                    // EsperEPL2Grammar.g:987:23: ( COMMA expression )*
                    loop125:
                    do {
                        int alt125=2;
                        int LA125_0 = input.LA(1);

                        if ( (LA125_0==COMMA) ) {
                            alt125=1;
                        }


                        switch (alt125) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:987:24: COMMA expression
                    	    {
                    	    COMMA312=(Token)match(input,COMMA,FOLLOW_COMMA_in_arrayExpression5775); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA312);

                    	    pushFollow(FOLLOW_expression_in_arrayExpression5777);
                    	    expression313=expression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_expression.add(expression313.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop125;
                        }
                    } while (true);


                    }
                    break;

            }

            RCURLY314=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_arrayExpression5784); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCURLY.add(RCURLY314);



            // AST REWRITE
            // elements: expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 988:4: -> ^( ARRAY_EXPR ( expression )* )
            {
                // EsperEPL2Grammar.g:988:7: ^( ARRAY_EXPR ( expression )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ARRAY_EXPR, "ARRAY_EXPR"), root_1);

                // EsperEPL2Grammar.g:988:20: ( expression )*
                while ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());

                }
                stream_expression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "arrayExpression"

    public static class builtinFunc_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "builtinFunc"
    // EsperEPL2Grammar.g:991:1: builtinFunc : ( SUM LPAREN ( ALL | DISTINCT )? expression RPAREN | AVG LPAREN ( ALL | DISTINCT )? expression RPAREN | COUNT LPAREN ( ( ( ALL | DISTINCT )? expression ) | ( STAR ) ) RPAREN | MEDIAN LPAREN ( ALL | DISTINCT )? expression RPAREN | STDDEV LPAREN ( ALL | DISTINCT )? expression RPAREN | AVEDEV LPAREN ( ALL | DISTINCT )? expression RPAREN | COALESCE LPAREN expression COMMA expression ( COMMA expression )* RPAREN | PREVIOUS LPAREN expression COMMA eventProperty RPAREN | PRIOR LPAREN NUM_INT COMMA eventProperty RPAREN | INSTANCEOF LPAREN expression COMMA classIdentifier ( COMMA classIdentifier )* RPAREN | CAST LPAREN expression ( COMMA | AS ) classIdentifier RPAREN | EXISTS LPAREN eventProperty RPAREN | CURRENT_TIMESTAMP ( LPAREN RPAREN )? );
    public final EsperEPL2GrammarParser.builtinFunc_return builtinFunc() throws RecognitionException {
        EsperEPL2GrammarParser.builtinFunc_return retval = new EsperEPL2GrammarParser.builtinFunc_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token SUM315=null;
        Token LPAREN316=null;
        Token ALL317=null;
        Token DISTINCT318=null;
        Token RPAREN320=null;
        Token AVG321=null;
        Token LPAREN322=null;
        Token ALL323=null;
        Token DISTINCT324=null;
        Token RPAREN326=null;
        Token COUNT327=null;
        Token LPAREN328=null;
        Token ALL329=null;
        Token DISTINCT330=null;
        Token STAR332=null;
        Token RPAREN333=null;
        Token MEDIAN334=null;
        Token LPAREN335=null;
        Token ALL336=null;
        Token DISTINCT337=null;
        Token RPAREN339=null;
        Token STDDEV340=null;
        Token LPAREN341=null;
        Token ALL342=null;
        Token DISTINCT343=null;
        Token RPAREN345=null;
        Token AVEDEV346=null;
        Token LPAREN347=null;
        Token ALL348=null;
        Token DISTINCT349=null;
        Token RPAREN351=null;
        Token COALESCE352=null;
        Token LPAREN353=null;
        Token COMMA355=null;
        Token COMMA357=null;
        Token RPAREN359=null;
        Token PREVIOUS360=null;
        Token LPAREN361=null;
        Token COMMA363=null;
        Token RPAREN365=null;
        Token PRIOR366=null;
        Token LPAREN367=null;
        Token NUM_INT368=null;
        Token COMMA369=null;
        Token RPAREN371=null;
        Token INSTANCEOF372=null;
        Token LPAREN373=null;
        Token COMMA375=null;
        Token COMMA377=null;
        Token RPAREN379=null;
        Token CAST380=null;
        Token LPAREN381=null;
        Token COMMA383=null;
        Token AS384=null;
        Token RPAREN386=null;
        Token EXISTS387=null;
        Token LPAREN388=null;
        Token RPAREN390=null;
        Token CURRENT_TIMESTAMP391=null;
        Token LPAREN392=null;
        Token RPAREN393=null;
        EsperEPL2GrammarParser.expression_return expression319 = null;

        EsperEPL2GrammarParser.expression_return expression325 = null;

        EsperEPL2GrammarParser.expression_return expression331 = null;

        EsperEPL2GrammarParser.expression_return expression338 = null;

        EsperEPL2GrammarParser.expression_return expression344 = null;

        EsperEPL2GrammarParser.expression_return expression350 = null;

        EsperEPL2GrammarParser.expression_return expression354 = null;

        EsperEPL2GrammarParser.expression_return expression356 = null;

        EsperEPL2GrammarParser.expression_return expression358 = null;

        EsperEPL2GrammarParser.expression_return expression362 = null;

        EsperEPL2GrammarParser.eventProperty_return eventProperty364 = null;

        EsperEPL2GrammarParser.eventProperty_return eventProperty370 = null;

        EsperEPL2GrammarParser.expression_return expression374 = null;

        EsperEPL2GrammarParser.classIdentifier_return classIdentifier376 = null;

        EsperEPL2GrammarParser.classIdentifier_return classIdentifier378 = null;

        EsperEPL2GrammarParser.expression_return expression382 = null;

        EsperEPL2GrammarParser.classIdentifier_return classIdentifier385 = null;

        EsperEPL2GrammarParser.eventProperty_return eventProperty389 = null;


        CommonTree SUM315_tree=null;
        CommonTree LPAREN316_tree=null;
        CommonTree ALL317_tree=null;
        CommonTree DISTINCT318_tree=null;
        CommonTree RPAREN320_tree=null;
        CommonTree AVG321_tree=null;
        CommonTree LPAREN322_tree=null;
        CommonTree ALL323_tree=null;
        CommonTree DISTINCT324_tree=null;
        CommonTree RPAREN326_tree=null;
        CommonTree COUNT327_tree=null;
        CommonTree LPAREN328_tree=null;
        CommonTree ALL329_tree=null;
        CommonTree DISTINCT330_tree=null;
        CommonTree STAR332_tree=null;
        CommonTree RPAREN333_tree=null;
        CommonTree MEDIAN334_tree=null;
        CommonTree LPAREN335_tree=null;
        CommonTree ALL336_tree=null;
        CommonTree DISTINCT337_tree=null;
        CommonTree RPAREN339_tree=null;
        CommonTree STDDEV340_tree=null;
        CommonTree LPAREN341_tree=null;
        CommonTree ALL342_tree=null;
        CommonTree DISTINCT343_tree=null;
        CommonTree RPAREN345_tree=null;
        CommonTree AVEDEV346_tree=null;
        CommonTree LPAREN347_tree=null;
        CommonTree ALL348_tree=null;
        CommonTree DISTINCT349_tree=null;
        CommonTree RPAREN351_tree=null;
        CommonTree COALESCE352_tree=null;
        CommonTree LPAREN353_tree=null;
        CommonTree COMMA355_tree=null;
        CommonTree COMMA357_tree=null;
        CommonTree RPAREN359_tree=null;
        CommonTree PREVIOUS360_tree=null;
        CommonTree LPAREN361_tree=null;
        CommonTree COMMA363_tree=null;
        CommonTree RPAREN365_tree=null;
        CommonTree PRIOR366_tree=null;
        CommonTree LPAREN367_tree=null;
        CommonTree NUM_INT368_tree=null;
        CommonTree COMMA369_tree=null;
        CommonTree RPAREN371_tree=null;
        CommonTree INSTANCEOF372_tree=null;
        CommonTree LPAREN373_tree=null;
        CommonTree COMMA375_tree=null;
        CommonTree COMMA377_tree=null;
        CommonTree RPAREN379_tree=null;
        CommonTree CAST380_tree=null;
        CommonTree LPAREN381_tree=null;
        CommonTree COMMA383_tree=null;
        CommonTree AS384_tree=null;
        CommonTree RPAREN386_tree=null;
        CommonTree EXISTS387_tree=null;
        CommonTree LPAREN388_tree=null;
        CommonTree RPAREN390_tree=null;
        CommonTree CURRENT_TIMESTAMP391_tree=null;
        CommonTree LPAREN392_tree=null;
        CommonTree RPAREN393_tree=null;

        try {
            // EsperEPL2Grammar.g:992:2: ( SUM LPAREN ( ALL | DISTINCT )? expression RPAREN | AVG LPAREN ( ALL | DISTINCT )? expression RPAREN | COUNT LPAREN ( ( ( ALL | DISTINCT )? expression ) | ( STAR ) ) RPAREN | MEDIAN LPAREN ( ALL | DISTINCT )? expression RPAREN | STDDEV LPAREN ( ALL | DISTINCT )? expression RPAREN | AVEDEV LPAREN ( ALL | DISTINCT )? expression RPAREN | COALESCE LPAREN expression COMMA expression ( COMMA expression )* RPAREN | PREVIOUS LPAREN expression COMMA eventProperty RPAREN | PRIOR LPAREN NUM_INT COMMA eventProperty RPAREN | INSTANCEOF LPAREN expression COMMA classIdentifier ( COMMA classIdentifier )* RPAREN | CAST LPAREN expression ( COMMA | AS ) classIdentifier RPAREN | EXISTS LPAREN eventProperty RPAREN | CURRENT_TIMESTAMP ( LPAREN RPAREN )? )
            int alt138=13;
            switch ( input.LA(1) ) {
            case SUM:
                {
                alt138=1;
                }
                break;
            case AVG:
                {
                alt138=2;
                }
                break;
            case COUNT:
                {
                alt138=3;
                }
                break;
            case MEDIAN:
                {
                alt138=4;
                }
                break;
            case STDDEV:
                {
                alt138=5;
                }
                break;
            case AVEDEV:
                {
                alt138=6;
                }
                break;
            case COALESCE:
                {
                alt138=7;
                }
                break;
            case PREVIOUS:
                {
                alt138=8;
                }
                break;
            case PRIOR:
                {
                alt138=9;
                }
                break;
            case INSTANCEOF:
                {
                alt138=10;
                }
                break;
            case CAST:
                {
                alt138=11;
                }
                break;
            case EXISTS:
                {
                alt138=12;
                }
                break;
            case CURRENT_TIMESTAMP:
                {
                alt138=13;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 138, 0, input);

                throw nvae;
            }

            switch (alt138) {
                case 1 :
                    // EsperEPL2Grammar.g:992:4: SUM LPAREN ( ALL | DISTINCT )? expression RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    SUM315=(Token)match(input,SUM,FOLLOW_SUM_in_builtinFunc5807); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SUM315_tree = (CommonTree)adaptor.create(SUM315);
                    root_0 = (CommonTree)adaptor.becomeRoot(SUM315_tree, root_0);
                    }
                    LPAREN316=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc5810); if (state.failed) return retval;
                    // EsperEPL2Grammar.g:992:17: ( ALL | DISTINCT )?
                    int alt127=3;
                    int LA127_0 = input.LA(1);

                    if ( (LA127_0==ALL) ) {
                        alt127=1;
                    }
                    else if ( (LA127_0==DISTINCT) ) {
                        alt127=2;
                    }
                    switch (alt127) {
                        case 1 :
                            // EsperEPL2Grammar.g:992:18: ALL
                            {
                            ALL317=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc5814); if (state.failed) return retval;

                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:992:25: DISTINCT
                            {
                            DISTINCT318=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc5819); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT318_tree = (CommonTree)adaptor.create(DISTINCT318);
                            adaptor.addChild(root_0, DISTINCT318_tree);
                            }

                            }
                            break;

                    }

                    pushFollow(FOLLOW_expression_in_builtinFunc5823);
                    expression319=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression319.getTree());
                    RPAREN320=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc5825); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:993:4: AVG LPAREN ( ALL | DISTINCT )? expression RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    AVG321=(Token)match(input,AVG,FOLLOW_AVG_in_builtinFunc5831); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AVG321_tree = (CommonTree)adaptor.create(AVG321);
                    root_0 = (CommonTree)adaptor.becomeRoot(AVG321_tree, root_0);
                    }
                    LPAREN322=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc5834); if (state.failed) return retval;
                    // EsperEPL2Grammar.g:993:17: ( ALL | DISTINCT )?
                    int alt128=3;
                    int LA128_0 = input.LA(1);

                    if ( (LA128_0==ALL) ) {
                        alt128=1;
                    }
                    else if ( (LA128_0==DISTINCT) ) {
                        alt128=2;
                    }
                    switch (alt128) {
                        case 1 :
                            // EsperEPL2Grammar.g:993:18: ALL
                            {
                            ALL323=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc5838); if (state.failed) return retval;

                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:993:25: DISTINCT
                            {
                            DISTINCT324=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc5843); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT324_tree = (CommonTree)adaptor.create(DISTINCT324);
                            adaptor.addChild(root_0, DISTINCT324_tree);
                            }

                            }
                            break;

                    }

                    pushFollow(FOLLOW_expression_in_builtinFunc5847);
                    expression325=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression325.getTree());
                    RPAREN326=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc5849); if (state.failed) return retval;

                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:994:4: COUNT LPAREN ( ( ( ALL | DISTINCT )? expression ) | ( STAR ) ) RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    COUNT327=(Token)match(input,COUNT,FOLLOW_COUNT_in_builtinFunc5855); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COUNT327_tree = (CommonTree)adaptor.create(COUNT327);
                    root_0 = (CommonTree)adaptor.becomeRoot(COUNT327_tree, root_0);
                    }
                    LPAREN328=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc5858); if (state.failed) return retval;
                    // EsperEPL2Grammar.g:995:3: ( ( ( ALL | DISTINCT )? expression ) | ( STAR ) )
                    int alt130=2;
                    int LA130_0 = input.LA(1);

                    if ( (LA130_0==WINDOW||LA130_0==ESCAPE||(LA130_0>=NOT_EXPR && LA130_0<=EVERY_EXPR)||(LA130_0>=SUM && LA130_0<=COUNT)||LA130_0==CASE||LA130_0==OUTER||(LA130_0>=JOIN && LA130_0<=FULL)||(LA130_0>=DISTINCT && LA130_0<=ALL)||(LA130_0>=EVENTS && LA130_0<=LAST)||(LA130_0>=UNIDIRECTIONAL && LA130_0<=CURRENT_TIMESTAMP)||LA130_0==SNAPSHOT||(LA130_0>=VARIABLE && LA130_0<=AT)||(LA130_0>=BOOLEAN_TRUE && LA130_0<=VALUE_NULL)||LA130_0==NUM_DOUBLE||LA130_0==IDENT||LA130_0==LPAREN||(LA130_0>=STRING_LITERAL && LA130_0<=QUOTED_STRING_LITERAL)||(LA130_0>=PLUS && LA130_0<=MINUS)||LA130_0==LCURLY||LA130_0==NUM_INT||LA130_0==QUESTION||(LA130_0>=TICKED_STRING_LITERAL && LA130_0<=NUM_FLOAT)) ) {
                        alt130=1;
                    }
                    else if ( (LA130_0==STAR) ) {
                        alt130=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 130, 0, input);

                        throw nvae;
                    }
                    switch (alt130) {
                        case 1 :
                            // EsperEPL2Grammar.g:996:4: ( ( ALL | DISTINCT )? expression )
                            {
                            // EsperEPL2Grammar.g:996:4: ( ( ALL | DISTINCT )? expression )
                            // EsperEPL2Grammar.g:996:5: ( ALL | DISTINCT )? expression
                            {
                            // EsperEPL2Grammar.g:996:5: ( ALL | DISTINCT )?
                            int alt129=3;
                            int LA129_0 = input.LA(1);

                            if ( (LA129_0==ALL) ) {
                                alt129=1;
                            }
                            else if ( (LA129_0==DISTINCT) ) {
                                alt129=2;
                            }
                            switch (alt129) {
                                case 1 :
                                    // EsperEPL2Grammar.g:996:6: ALL
                                    {
                                    ALL329=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc5870); if (state.failed) return retval;

                                    }
                                    break;
                                case 2 :
                                    // EsperEPL2Grammar.g:996:13: DISTINCT
                                    {
                                    DISTINCT330=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc5875); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                    DISTINCT330_tree = (CommonTree)adaptor.create(DISTINCT330);
                                    adaptor.addChild(root_0, DISTINCT330_tree);
                                    }

                                    }
                                    break;

                            }

                            pushFollow(FOLLOW_expression_in_builtinFunc5879);
                            expression331=expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression331.getTree());

                            }


                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:998:4: ( STAR )
                            {
                            // EsperEPL2Grammar.g:998:4: ( STAR )
                            // EsperEPL2Grammar.g:998:5: STAR
                            {
                            STAR332=(Token)match(input,STAR,FOLLOW_STAR_in_builtinFunc5890); if (state.failed) return retval;

                            }


                            }
                            break;

                    }

                    RPAREN333=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc5901); if (state.failed) return retval;

                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:1001:4: MEDIAN LPAREN ( ALL | DISTINCT )? expression RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    MEDIAN334=(Token)match(input,MEDIAN,FOLLOW_MEDIAN_in_builtinFunc5907); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MEDIAN334_tree = (CommonTree)adaptor.create(MEDIAN334);
                    root_0 = (CommonTree)adaptor.becomeRoot(MEDIAN334_tree, root_0);
                    }
                    LPAREN335=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc5910); if (state.failed) return retval;
                    // EsperEPL2Grammar.g:1001:20: ( ALL | DISTINCT )?
                    int alt131=3;
                    int LA131_0 = input.LA(1);

                    if ( (LA131_0==ALL) ) {
                        alt131=1;
                    }
                    else if ( (LA131_0==DISTINCT) ) {
                        alt131=2;
                    }
                    switch (alt131) {
                        case 1 :
                            // EsperEPL2Grammar.g:1001:21: ALL
                            {
                            ALL336=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc5914); if (state.failed) return retval;

                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1001:28: DISTINCT
                            {
                            DISTINCT337=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc5919); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT337_tree = (CommonTree)adaptor.create(DISTINCT337);
                            adaptor.addChild(root_0, DISTINCT337_tree);
                            }

                            }
                            break;

                    }

                    pushFollow(FOLLOW_expression_in_builtinFunc5923);
                    expression338=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression338.getTree());
                    RPAREN339=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc5925); if (state.failed) return retval;

                    }
                    break;
                case 5 :
                    // EsperEPL2Grammar.g:1002:4: STDDEV LPAREN ( ALL | DISTINCT )? expression RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    STDDEV340=(Token)match(input,STDDEV,FOLLOW_STDDEV_in_builtinFunc5931); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STDDEV340_tree = (CommonTree)adaptor.create(STDDEV340);
                    root_0 = (CommonTree)adaptor.becomeRoot(STDDEV340_tree, root_0);
                    }
                    LPAREN341=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc5934); if (state.failed) return retval;
                    // EsperEPL2Grammar.g:1002:20: ( ALL | DISTINCT )?
                    int alt132=3;
                    int LA132_0 = input.LA(1);

                    if ( (LA132_0==ALL) ) {
                        alt132=1;
                    }
                    else if ( (LA132_0==DISTINCT) ) {
                        alt132=2;
                    }
                    switch (alt132) {
                        case 1 :
                            // EsperEPL2Grammar.g:1002:21: ALL
                            {
                            ALL342=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc5938); if (state.failed) return retval;

                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1002:28: DISTINCT
                            {
                            DISTINCT343=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc5943); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT343_tree = (CommonTree)adaptor.create(DISTINCT343);
                            adaptor.addChild(root_0, DISTINCT343_tree);
                            }

                            }
                            break;

                    }

                    pushFollow(FOLLOW_expression_in_builtinFunc5947);
                    expression344=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression344.getTree());
                    RPAREN345=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc5949); if (state.failed) return retval;

                    }
                    break;
                case 6 :
                    // EsperEPL2Grammar.g:1003:4: AVEDEV LPAREN ( ALL | DISTINCT )? expression RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    AVEDEV346=(Token)match(input,AVEDEV,FOLLOW_AVEDEV_in_builtinFunc5955); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AVEDEV346_tree = (CommonTree)adaptor.create(AVEDEV346);
                    root_0 = (CommonTree)adaptor.becomeRoot(AVEDEV346_tree, root_0);
                    }
                    LPAREN347=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc5958); if (state.failed) return retval;
                    // EsperEPL2Grammar.g:1003:20: ( ALL | DISTINCT )?
                    int alt133=3;
                    int LA133_0 = input.LA(1);

                    if ( (LA133_0==ALL) ) {
                        alt133=1;
                    }
                    else if ( (LA133_0==DISTINCT) ) {
                        alt133=2;
                    }
                    switch (alt133) {
                        case 1 :
                            // EsperEPL2Grammar.g:1003:21: ALL
                            {
                            ALL348=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc5962); if (state.failed) return retval;

                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1003:28: DISTINCT
                            {
                            DISTINCT349=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc5967); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT349_tree = (CommonTree)adaptor.create(DISTINCT349);
                            adaptor.addChild(root_0, DISTINCT349_tree);
                            }

                            }
                            break;

                    }

                    pushFollow(FOLLOW_expression_in_builtinFunc5971);
                    expression350=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression350.getTree());
                    RPAREN351=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc5973); if (state.failed) return retval;

                    }
                    break;
                case 7 :
                    // EsperEPL2Grammar.g:1004:4: COALESCE LPAREN expression COMMA expression ( COMMA expression )* RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    COALESCE352=(Token)match(input,COALESCE,FOLLOW_COALESCE_in_builtinFunc5979); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COALESCE352_tree = (CommonTree)adaptor.create(COALESCE352);
                    root_0 = (CommonTree)adaptor.becomeRoot(COALESCE352_tree, root_0);
                    }
                    LPAREN353=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc5982); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc5985);
                    expression354=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression354.getTree());
                    COMMA355=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc5987); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc5990);
                    expression356=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression356.getTree());
                    // EsperEPL2Grammar.g:1004:51: ( COMMA expression )*
                    loop134:
                    do {
                        int alt134=2;
                        int LA134_0 = input.LA(1);

                        if ( (LA134_0==COMMA) ) {
                            alt134=1;
                        }


                        switch (alt134) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:1004:52: COMMA expression
                    	    {
                    	    COMMA357=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc5993); if (state.failed) return retval;
                    	    pushFollow(FOLLOW_expression_in_builtinFunc5996);
                    	    expression358=expression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression358.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop134;
                        }
                    } while (true);

                    RPAREN359=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc6000); if (state.failed) return retval;

                    }
                    break;
                case 8 :
                    // EsperEPL2Grammar.g:1005:4: PREVIOUS LPAREN expression COMMA eventProperty RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    PREVIOUS360=(Token)match(input,PREVIOUS,FOLLOW_PREVIOUS_in_builtinFunc6006); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PREVIOUS360_tree = (CommonTree)adaptor.create(PREVIOUS360);
                    root_0 = (CommonTree)adaptor.becomeRoot(PREVIOUS360_tree, root_0);
                    }
                    LPAREN361=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc6009); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc6012);
                    expression362=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression362.getTree());
                    COMMA363=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc6014); if (state.failed) return retval;
                    pushFollow(FOLLOW_eventProperty_in_builtinFunc6017);
                    eventProperty364=eventProperty();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty364.getTree());
                    RPAREN365=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc6019); if (state.failed) return retval;

                    }
                    break;
                case 9 :
                    // EsperEPL2Grammar.g:1006:4: PRIOR LPAREN NUM_INT COMMA eventProperty RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    PRIOR366=(Token)match(input,PRIOR,FOLLOW_PRIOR_in_builtinFunc6025); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PRIOR366_tree = (CommonTree)adaptor.create(PRIOR366);
                    root_0 = (CommonTree)adaptor.becomeRoot(PRIOR366_tree, root_0);
                    }
                    LPAREN367=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc6028); if (state.failed) return retval;
                    NUM_INT368=(Token)match(input,NUM_INT,FOLLOW_NUM_INT_in_builtinFunc6031); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NUM_INT368_tree = (CommonTree)adaptor.create(NUM_INT368);
                    adaptor.addChild(root_0, NUM_INT368_tree);
                    }
                    COMMA369=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc6033); if (state.failed) return retval;
                    pushFollow(FOLLOW_eventProperty_in_builtinFunc6036);
                    eventProperty370=eventProperty();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty370.getTree());
                    RPAREN371=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc6038); if (state.failed) return retval;

                    }
                    break;
                case 10 :
                    // EsperEPL2Grammar.g:1009:4: INSTANCEOF LPAREN expression COMMA classIdentifier ( COMMA classIdentifier )* RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    INSTANCEOF372=(Token)match(input,INSTANCEOF,FOLLOW_INSTANCEOF_in_builtinFunc6048); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INSTANCEOF372_tree = (CommonTree)adaptor.create(INSTANCEOF372);
                    root_0 = (CommonTree)adaptor.becomeRoot(INSTANCEOF372_tree, root_0);
                    }
                    LPAREN373=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc6051); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc6054);
                    expression374=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression374.getTree());
                    COMMA375=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc6056); if (state.failed) return retval;
                    pushFollow(FOLLOW_classIdentifier_in_builtinFunc6059);
                    classIdentifier376=classIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier376.getTree());
                    // EsperEPL2Grammar.g:1009:58: ( COMMA classIdentifier )*
                    loop135:
                    do {
                        int alt135=2;
                        int LA135_0 = input.LA(1);

                        if ( (LA135_0==COMMA) ) {
                            alt135=1;
                        }


                        switch (alt135) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:1009:59: COMMA classIdentifier
                    	    {
                    	    COMMA377=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc6062); if (state.failed) return retval;
                    	    pushFollow(FOLLOW_classIdentifier_in_builtinFunc6065);
                    	    classIdentifier378=classIdentifier();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier378.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop135;
                        }
                    } while (true);

                    RPAREN379=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc6069); if (state.failed) return retval;

                    }
                    break;
                case 11 :
                    // EsperEPL2Grammar.g:1010:4: CAST LPAREN expression ( COMMA | AS ) classIdentifier RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    CAST380=(Token)match(input,CAST,FOLLOW_CAST_in_builtinFunc6075); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CAST380_tree = (CommonTree)adaptor.create(CAST380);
                    root_0 = (CommonTree)adaptor.becomeRoot(CAST380_tree, root_0);
                    }
                    LPAREN381=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc6078); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc6081);
                    expression382=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression382.getTree());
                    // EsperEPL2Grammar.g:1010:29: ( COMMA | AS )
                    int alt136=2;
                    int LA136_0 = input.LA(1);

                    if ( (LA136_0==COMMA) ) {
                        alt136=1;
                    }
                    else if ( (LA136_0==AS) ) {
                        alt136=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 136, 0, input);

                        throw nvae;
                    }
                    switch (alt136) {
                        case 1 :
                            // EsperEPL2Grammar.g:1010:30: COMMA
                            {
                            COMMA383=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc6084); if (state.failed) return retval;

                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1010:39: AS
                            {
                            AS384=(Token)match(input,AS,FOLLOW_AS_in_builtinFunc6089); if (state.failed) return retval;

                            }
                            break;

                    }

                    pushFollow(FOLLOW_classIdentifier_in_builtinFunc6093);
                    classIdentifier385=classIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier385.getTree());
                    RPAREN386=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc6095); if (state.failed) return retval;

                    }
                    break;
                case 12 :
                    // EsperEPL2Grammar.g:1011:4: EXISTS LPAREN eventProperty RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    EXISTS387=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_builtinFunc6101); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EXISTS387_tree = (CommonTree)adaptor.create(EXISTS387);
                    root_0 = (CommonTree)adaptor.becomeRoot(EXISTS387_tree, root_0);
                    }
                    LPAREN388=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc6104); if (state.failed) return retval;
                    pushFollow(FOLLOW_eventProperty_in_builtinFunc6107);
                    eventProperty389=eventProperty();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty389.getTree());
                    RPAREN390=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc6109); if (state.failed) return retval;

                    }
                    break;
                case 13 :
                    // EsperEPL2Grammar.g:1012:4: CURRENT_TIMESTAMP ( LPAREN RPAREN )?
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    CURRENT_TIMESTAMP391=(Token)match(input,CURRENT_TIMESTAMP,FOLLOW_CURRENT_TIMESTAMP_in_builtinFunc6115); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CURRENT_TIMESTAMP391_tree = (CommonTree)adaptor.create(CURRENT_TIMESTAMP391);
                    root_0 = (CommonTree)adaptor.becomeRoot(CURRENT_TIMESTAMP391_tree, root_0);
                    }
                    // EsperEPL2Grammar.g:1012:23: ( LPAREN RPAREN )?
                    int alt137=2;
                    int LA137_0 = input.LA(1);

                    if ( (LA137_0==LPAREN) ) {
                        alt137=1;
                    }
                    switch (alt137) {
                        case 1 :
                            // EsperEPL2Grammar.g:1012:24: LPAREN RPAREN
                            {
                            LPAREN392=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc6119); if (state.failed) return retval;
                            RPAREN393=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc6122); if (state.failed) return retval;

                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "builtinFunc"

    public static class maxFunc_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "maxFunc"
    // EsperEPL2Grammar.g:1015:1: maxFunc : ( MAX | MIN ) LPAREN expression ( COMMA expression ( COMMA expression )* )? RPAREN ;
    public final EsperEPL2GrammarParser.maxFunc_return maxFunc() throws RecognitionException {
        EsperEPL2GrammarParser.maxFunc_return retval = new EsperEPL2GrammarParser.maxFunc_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token MAX394=null;
        Token MIN395=null;
        Token LPAREN396=null;
        Token COMMA398=null;
        Token COMMA400=null;
        Token RPAREN402=null;
        EsperEPL2GrammarParser.expression_return expression397 = null;

        EsperEPL2GrammarParser.expression_return expression399 = null;

        EsperEPL2GrammarParser.expression_return expression401 = null;


        CommonTree MAX394_tree=null;
        CommonTree MIN395_tree=null;
        CommonTree LPAREN396_tree=null;
        CommonTree COMMA398_tree=null;
        CommonTree COMMA400_tree=null;
        CommonTree RPAREN402_tree=null;

        try {
            // EsperEPL2Grammar.g:1016:2: ( ( MAX | MIN ) LPAREN expression ( COMMA expression ( COMMA expression )* )? RPAREN )
            // EsperEPL2Grammar.g:1016:4: ( MAX | MIN ) LPAREN expression ( COMMA expression ( COMMA expression )* )? RPAREN
            {
            root_0 = (CommonTree)adaptor.nil();

            // EsperEPL2Grammar.g:1016:4: ( MAX | MIN )
            int alt139=2;
            int LA139_0 = input.LA(1);

            if ( (LA139_0==MAX) ) {
                alt139=1;
            }
            else if ( (LA139_0==MIN) ) {
                alt139=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 139, 0, input);

                throw nvae;
            }
            switch (alt139) {
                case 1 :
                    // EsperEPL2Grammar.g:1016:5: MAX
                    {
                    MAX394=(Token)match(input,MAX,FOLLOW_MAX_in_maxFunc6138); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MAX394_tree = (CommonTree)adaptor.create(MAX394);
                    root_0 = (CommonTree)adaptor.becomeRoot(MAX394_tree, root_0);
                    }

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1016:12: MIN
                    {
                    MIN395=(Token)match(input,MIN,FOLLOW_MIN_in_maxFunc6143); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MIN395_tree = (CommonTree)adaptor.create(MIN395);
                    root_0 = (CommonTree)adaptor.becomeRoot(MIN395_tree, root_0);
                    }

                    }
                    break;

            }

            LPAREN396=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_maxFunc6147); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_maxFunc6150);
            expression397=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression397.getTree());
            // EsperEPL2Grammar.g:1016:37: ( COMMA expression ( COMMA expression )* )?
            int alt141=2;
            int LA141_0 = input.LA(1);

            if ( (LA141_0==COMMA) ) {
                alt141=1;
            }
            switch (alt141) {
                case 1 :
                    // EsperEPL2Grammar.g:1016:38: COMMA expression ( COMMA expression )*
                    {
                    COMMA398=(Token)match(input,COMMA,FOLLOW_COMMA_in_maxFunc6153); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_maxFunc6156);
                    expression399=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression399.getTree());
                    // EsperEPL2Grammar.g:1016:56: ( COMMA expression )*
                    loop140:
                    do {
                        int alt140=2;
                        int LA140_0 = input.LA(1);

                        if ( (LA140_0==COMMA) ) {
                            alt140=1;
                        }


                        switch (alt140) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:1016:57: COMMA expression
                    	    {
                    	    COMMA400=(Token)match(input,COMMA,FOLLOW_COMMA_in_maxFunc6159); if (state.failed) return retval;
                    	    pushFollow(FOLLOW_expression_in_maxFunc6162);
                    	    expression401=expression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression401.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop140;
                        }
                    } while (true);


                    }
                    break;

            }

            RPAREN402=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_maxFunc6169); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "maxFunc"

    public static class eventPropertyOrLibFunction_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "eventPropertyOrLibFunction"
    // EsperEPL2Grammar.g:1019:1: eventPropertyOrLibFunction : ( ( eventProperty )=> eventProperty | libFunction );
    public final EsperEPL2GrammarParser.eventPropertyOrLibFunction_return eventPropertyOrLibFunction() throws RecognitionException {
        EsperEPL2GrammarParser.eventPropertyOrLibFunction_return retval = new EsperEPL2GrammarParser.eventPropertyOrLibFunction_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.eventProperty_return eventProperty403 = null;

        EsperEPL2GrammarParser.libFunction_return libFunction404 = null;



        try {
            // EsperEPL2Grammar.g:1020:2: ( ( eventProperty )=> eventProperty | libFunction )
            int alt142=2;
            alt142 = dfa142.predict(input);
            switch (alt142) {
                case 1 :
                    // EsperEPL2Grammar.g:1020:4: ( eventProperty )=> eventProperty
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_eventProperty_in_eventPropertyOrLibFunction6188);
                    eventProperty403=eventProperty();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty403.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1021:4: libFunction
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_libFunction_in_eventPropertyOrLibFunction6193);
                    libFunction404=libFunction();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, libFunction404.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "eventPropertyOrLibFunction"

    public static class libFunction_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "libFunction"
    // EsperEPL2Grammar.g:1024:1: libFunction : ( classIdentifierNonGreedy DOT )? funcIdent LPAREN ( libFunctionArgs )? RPAREN -> ^( LIB_FUNCTION ( classIdentifierNonGreedy )? funcIdent ( libFunctionArgs )? ) ;
    public final EsperEPL2GrammarParser.libFunction_return libFunction() throws RecognitionException {
        EsperEPL2GrammarParser.libFunction_return retval = new EsperEPL2GrammarParser.libFunction_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token DOT406=null;
        Token LPAREN408=null;
        Token RPAREN410=null;
        EsperEPL2GrammarParser.classIdentifierNonGreedy_return classIdentifierNonGreedy405 = null;

        EsperEPL2GrammarParser.funcIdent_return funcIdent407 = null;

        EsperEPL2GrammarParser.libFunctionArgs_return libFunctionArgs409 = null;


        CommonTree DOT406_tree=null;
        CommonTree LPAREN408_tree=null;
        CommonTree RPAREN410_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_libFunctionArgs=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionArgs");
        RewriteRuleSubtreeStream stream_classIdentifierNonGreedy=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifierNonGreedy");
        RewriteRuleSubtreeStream stream_funcIdent=new RewriteRuleSubtreeStream(adaptor,"rule funcIdent");
        try {
            // EsperEPL2Grammar.g:1025:2: ( ( classIdentifierNonGreedy DOT )? funcIdent LPAREN ( libFunctionArgs )? RPAREN -> ^( LIB_FUNCTION ( classIdentifierNonGreedy )? funcIdent ( libFunctionArgs )? ) )
            // EsperEPL2Grammar.g:1025:4: ( classIdentifierNonGreedy DOT )? funcIdent LPAREN ( libFunctionArgs )? RPAREN
            {
            // EsperEPL2Grammar.g:1025:4: ( classIdentifierNonGreedy DOT )?
            int alt143=2;
            int LA143_0 = input.LA(1);

            if ( (LA143_0==IDENT) ) {
                int LA143_1 = input.LA(2);

                if ( (LA143_1==DOT) ) {
                    alt143=1;
                }
            }
            else if ( (LA143_0==TICKED_STRING_LITERAL) ) {
                alt143=1;
            }
            switch (alt143) {
                case 1 :
                    // EsperEPL2Grammar.g:1025:5: classIdentifierNonGreedy DOT
                    {
                    pushFollow(FOLLOW_classIdentifierNonGreedy_in_libFunction6206);
                    classIdentifierNonGreedy405=classIdentifierNonGreedy();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_classIdentifierNonGreedy.add(classIdentifierNonGreedy405.getTree());
                    DOT406=(Token)match(input,DOT,FOLLOW_DOT_in_libFunction6208); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT406);


                    }
                    break;

            }

            pushFollow(FOLLOW_funcIdent_in_libFunction6212);
            funcIdent407=funcIdent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_funcIdent.add(funcIdent407.getTree());
            LPAREN408=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_libFunction6214); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN408);

            // EsperEPL2Grammar.g:1025:53: ( libFunctionArgs )?
            int alt144=2;
            int LA144_0 = input.LA(1);

            if ( (LA144_0==WINDOW||LA144_0==ESCAPE||(LA144_0>=NOT_EXPR && LA144_0<=EVERY_EXPR)||(LA144_0>=SUM && LA144_0<=COUNT)||LA144_0==CASE||LA144_0==OUTER||(LA144_0>=JOIN && LA144_0<=FULL)||(LA144_0>=DISTINCT && LA144_0<=ALL)||(LA144_0>=EVENTS && LA144_0<=LAST)||(LA144_0>=UNIDIRECTIONAL && LA144_0<=CURRENT_TIMESTAMP)||LA144_0==SNAPSHOT||(LA144_0>=VARIABLE && LA144_0<=AT)||(LA144_0>=BOOLEAN_TRUE && LA144_0<=VALUE_NULL)||LA144_0==NUM_DOUBLE||LA144_0==IDENT||LA144_0==LPAREN||(LA144_0>=STRING_LITERAL && LA144_0<=QUOTED_STRING_LITERAL)||(LA144_0>=PLUS && LA144_0<=MINUS)||LA144_0==LCURLY||LA144_0==NUM_INT||LA144_0==QUESTION||(LA144_0>=TICKED_STRING_LITERAL && LA144_0<=NUM_FLOAT)) ) {
                alt144=1;
            }
            switch (alt144) {
                case 1 :
                    // EsperEPL2Grammar.g:1025:54: libFunctionArgs
                    {
                    pushFollow(FOLLOW_libFunctionArgs_in_libFunction6217);
                    libFunctionArgs409=libFunctionArgs();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_libFunctionArgs.add(libFunctionArgs409.getTree());

                    }
                    break;

            }

            RPAREN410=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_libFunction6221); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN410);



            // AST REWRITE
            // elements: funcIdent, classIdentifierNonGreedy, libFunctionArgs
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1026:4: -> ^( LIB_FUNCTION ( classIdentifierNonGreedy )? funcIdent ( libFunctionArgs )? )
            {
                // EsperEPL2Grammar.g:1026:7: ^( LIB_FUNCTION ( classIdentifierNonGreedy )? funcIdent ( libFunctionArgs )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LIB_FUNCTION, "LIB_FUNCTION"), root_1);

                // EsperEPL2Grammar.g:1026:22: ( classIdentifierNonGreedy )?
                if ( stream_classIdentifierNonGreedy.hasNext() ) {
                    adaptor.addChild(root_1, stream_classIdentifierNonGreedy.nextTree());

                }
                stream_classIdentifierNonGreedy.reset();
                adaptor.addChild(root_1, stream_funcIdent.nextTree());
                // EsperEPL2Grammar.g:1026:58: ( libFunctionArgs )?
                if ( stream_libFunctionArgs.hasNext() ) {
                    adaptor.addChild(root_1, stream_libFunctionArgs.nextTree());

                }
                stream_libFunctionArgs.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "libFunction"

    public static class funcIdent_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "funcIdent"
    // EsperEPL2Grammar.g:1029:1: funcIdent : ( IDENT | max= MAX -> IDENT[$max] | min= MIN -> IDENT[$min] );
    public final EsperEPL2GrammarParser.funcIdent_return funcIdent() throws RecognitionException {
        EsperEPL2GrammarParser.funcIdent_return retval = new EsperEPL2GrammarParser.funcIdent_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token max=null;
        Token min=null;
        Token IDENT411=null;

        CommonTree max_tree=null;
        CommonTree min_tree=null;
        CommonTree IDENT411_tree=null;
        RewriteRuleTokenStream stream_MAX=new RewriteRuleTokenStream(adaptor,"token MAX");
        RewriteRuleTokenStream stream_MIN=new RewriteRuleTokenStream(adaptor,"token MIN");

        try {
            // EsperEPL2Grammar.g:1030:2: ( IDENT | max= MAX -> IDENT[$max] | min= MIN -> IDENT[$min] )
            int alt145=3;
            switch ( input.LA(1) ) {
            case IDENT:
                {
                alt145=1;
                }
                break;
            case MAX:
                {
                alt145=2;
                }
                break;
            case MIN:
                {
                alt145=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 145, 0, input);

                throw nvae;
            }

            switch (alt145) {
                case 1 :
                    // EsperEPL2Grammar.g:1030:4: IDENT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    IDENT411=(Token)match(input,IDENT,FOLLOW_IDENT_in_funcIdent6251); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IDENT411_tree = (CommonTree)adaptor.create(IDENT411);
                    adaptor.addChild(root_0, IDENT411_tree);
                    }

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1031:4: max= MAX
                    {
                    max=(Token)match(input,MAX,FOLLOW_MAX_in_funcIdent6258); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MAX.add(max);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1031:12: -> IDENT[$max]
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(IDENT, max));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1032:4: min= MIN
                    {
                    min=(Token)match(input,MIN,FOLLOW_MIN_in_funcIdent6270); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MIN.add(min);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1032:12: -> IDENT[$min]
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(IDENT, min));

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "funcIdent"

    public static class libFunctionArgs_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "libFunctionArgs"
    // EsperEPL2Grammar.g:1035:1: libFunctionArgs : ( ALL | DISTINCT )? expression ( COMMA expression )* ;
    public final EsperEPL2GrammarParser.libFunctionArgs_return libFunctionArgs() throws RecognitionException {
        EsperEPL2GrammarParser.libFunctionArgs_return retval = new EsperEPL2GrammarParser.libFunctionArgs_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token ALL412=null;
        Token DISTINCT413=null;
        Token COMMA415=null;
        EsperEPL2GrammarParser.expression_return expression414 = null;

        EsperEPL2GrammarParser.expression_return expression416 = null;


        CommonTree ALL412_tree=null;
        CommonTree DISTINCT413_tree=null;
        CommonTree COMMA415_tree=null;

        try {
            // EsperEPL2Grammar.g:1036:2: ( ( ALL | DISTINCT )? expression ( COMMA expression )* )
            // EsperEPL2Grammar.g:1036:4: ( ALL | DISTINCT )? expression ( COMMA expression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            // EsperEPL2Grammar.g:1036:4: ( ALL | DISTINCT )?
            int alt146=3;
            int LA146_0 = input.LA(1);

            if ( (LA146_0==ALL) ) {
                alt146=1;
            }
            else if ( (LA146_0==DISTINCT) ) {
                alt146=2;
            }
            switch (alt146) {
                case 1 :
                    // EsperEPL2Grammar.g:1036:5: ALL
                    {
                    ALL412=(Token)match(input,ALL,FOLLOW_ALL_in_libFunctionArgs6288); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1036:12: DISTINCT
                    {
                    DISTINCT413=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_libFunctionArgs6293); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DISTINCT413_tree = (CommonTree)adaptor.create(DISTINCT413);
                    adaptor.addChild(root_0, DISTINCT413_tree);
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_expression_in_libFunctionArgs6297);
            expression414=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression414.getTree());
            // EsperEPL2Grammar.g:1036:34: ( COMMA expression )*
            loop147:
            do {
                int alt147=2;
                int LA147_0 = input.LA(1);

                if ( (LA147_0==COMMA) ) {
                    alt147=1;
                }


                switch (alt147) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1036:35: COMMA expression
            	    {
            	    COMMA415=(Token)match(input,COMMA,FOLLOW_COMMA_in_libFunctionArgs6300); if (state.failed) return retval;
            	    pushFollow(FOLLOW_expression_in_libFunctionArgs6303);
            	    expression416=expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression416.getTree());

            	    }
            	    break;

            	default :
            	    break loop147;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "libFunctionArgs"

    public static class betweenList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "betweenList"
    // EsperEPL2Grammar.g:1039:1: betweenList : concatenationExpr AND_EXPR concatenationExpr ;
    public final EsperEPL2GrammarParser.betweenList_return betweenList() throws RecognitionException {
        EsperEPL2GrammarParser.betweenList_return retval = new EsperEPL2GrammarParser.betweenList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token AND_EXPR418=null;
        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr417 = null;

        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr419 = null;


        CommonTree AND_EXPR418_tree=null;

        try {
            // EsperEPL2Grammar.g:1040:2: ( concatenationExpr AND_EXPR concatenationExpr )
            // EsperEPL2Grammar.g:1040:4: concatenationExpr AND_EXPR concatenationExpr
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_concatenationExpr_in_betweenList6317);
            concatenationExpr417=concatenationExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, concatenationExpr417.getTree());
            AND_EXPR418=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_betweenList6319); if (state.failed) return retval;
            pushFollow(FOLLOW_concatenationExpr_in_betweenList6322);
            concatenationExpr419=concatenationExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, concatenationExpr419.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "betweenList"

    public static class patternExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "patternExpression"
    // EsperEPL2Grammar.g:1049:1: patternExpression : followedByExpression ;
    public final EsperEPL2GrammarParser.patternExpression_return patternExpression() throws RecognitionException {
        EsperEPL2GrammarParser.patternExpression_return retval = new EsperEPL2GrammarParser.patternExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.followedByExpression_return followedByExpression420 = null;



         paraphrases.push("pattern expression"); 
        try {
            // EsperEPL2Grammar.g:1052:2: ( followedByExpression )
            // EsperEPL2Grammar.g:1052:4: followedByExpression
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_followedByExpression_in_patternExpression6350);
            followedByExpression420=followedByExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, followedByExpression420.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "patternExpression"

    public static class followedByExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "followedByExpression"
    // EsperEPL2Grammar.g:1055:1: followedByExpression : orExpression (f= FOLLOWED_BY orExpression )* -> {$f != null}? ^( FOLLOWED_BY_EXPR ( orExpression )+ ) -> orExpression ;
    public final EsperEPL2GrammarParser.followedByExpression_return followedByExpression() throws RecognitionException {
        EsperEPL2GrammarParser.followedByExpression_return retval = new EsperEPL2GrammarParser.followedByExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token f=null;
        EsperEPL2GrammarParser.orExpression_return orExpression421 = null;

        EsperEPL2GrammarParser.orExpression_return orExpression422 = null;


        CommonTree f_tree=null;
        RewriteRuleTokenStream stream_FOLLOWED_BY=new RewriteRuleTokenStream(adaptor,"token FOLLOWED_BY");
        RewriteRuleSubtreeStream stream_orExpression=new RewriteRuleSubtreeStream(adaptor,"rule orExpression");
        try {
            // EsperEPL2Grammar.g:1056:2: ( orExpression (f= FOLLOWED_BY orExpression )* -> {$f != null}? ^( FOLLOWED_BY_EXPR ( orExpression )+ ) -> orExpression )
            // EsperEPL2Grammar.g:1056:4: orExpression (f= FOLLOWED_BY orExpression )*
            {
            pushFollow(FOLLOW_orExpression_in_followedByExpression6362);
            orExpression421=orExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_orExpression.add(orExpression421.getTree());
            // EsperEPL2Grammar.g:1056:17: (f= FOLLOWED_BY orExpression )*
            loop148:
            do {
                int alt148=2;
                int LA148_0 = input.LA(1);

                if ( (LA148_0==FOLLOWED_BY) ) {
                    alt148=1;
                }


                switch (alt148) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1056:18: f= FOLLOWED_BY orExpression
            	    {
            	    f=(Token)match(input,FOLLOWED_BY,FOLLOW_FOLLOWED_BY_in_followedByExpression6367); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_FOLLOWED_BY.add(f);

            	    pushFollow(FOLLOW_orExpression_in_followedByExpression6369);
            	    orExpression422=orExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_orExpression.add(orExpression422.getTree());

            	    }
            	    break;

            	default :
            	    break loop148;
                }
            } while (true);



            // AST REWRITE
            // elements: orExpression, orExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1057:6: -> {$f != null}? ^( FOLLOWED_BY_EXPR ( orExpression )+ )
            if (f != null) {
                // EsperEPL2Grammar.g:1057:23: ^( FOLLOWED_BY_EXPR ( orExpression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FOLLOWED_BY_EXPR, "FOLLOWED_BY_EXPR"), root_1);

                if ( !(stream_orExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_orExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_orExpression.nextTree());

                }
                stream_orExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1058:6: -> orExpression
            {
                adaptor.addChild(root_0, stream_orExpression.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "followedByExpression"

    public static class orExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "orExpression"
    // EsperEPL2Grammar.g:1061:1: orExpression : andExpression (o= OR_EXPR andExpression )* -> {$o != null}? ^( OR_EXPR ( andExpression )+ ) -> andExpression ;
    public final EsperEPL2GrammarParser.orExpression_return orExpression() throws RecognitionException {
        EsperEPL2GrammarParser.orExpression_return retval = new EsperEPL2GrammarParser.orExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token o=null;
        EsperEPL2GrammarParser.andExpression_return andExpression423 = null;

        EsperEPL2GrammarParser.andExpression_return andExpression424 = null;


        CommonTree o_tree=null;
        RewriteRuleTokenStream stream_OR_EXPR=new RewriteRuleTokenStream(adaptor,"token OR_EXPR");
        RewriteRuleSubtreeStream stream_andExpression=new RewriteRuleSubtreeStream(adaptor,"rule andExpression");
        try {
            // EsperEPL2Grammar.g:1062:2: ( andExpression (o= OR_EXPR andExpression )* -> {$o != null}? ^( OR_EXPR ( andExpression )+ ) -> andExpression )
            // EsperEPL2Grammar.g:1062:4: andExpression (o= OR_EXPR andExpression )*
            {
            pushFollow(FOLLOW_andExpression_in_orExpression6408);
            andExpression423=andExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_andExpression.add(andExpression423.getTree());
            // EsperEPL2Grammar.g:1062:18: (o= OR_EXPR andExpression )*
            loop149:
            do {
                int alt149=2;
                int LA149_0 = input.LA(1);

                if ( (LA149_0==OR_EXPR) ) {
                    alt149=1;
                }


                switch (alt149) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1062:19: o= OR_EXPR andExpression
            	    {
            	    o=(Token)match(input,OR_EXPR,FOLLOW_OR_EXPR_in_orExpression6413); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_OR_EXPR.add(o);

            	    pushFollow(FOLLOW_andExpression_in_orExpression6415);
            	    andExpression424=andExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_andExpression.add(andExpression424.getTree());

            	    }
            	    break;

            	default :
            	    break loop149;
                }
            } while (true);



            // AST REWRITE
            // elements: andExpression, andExpression, OR_EXPR
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1063:3: -> {$o != null}? ^( OR_EXPR ( andExpression )+ )
            if (o != null) {
                // EsperEPL2Grammar.g:1063:20: ^( OR_EXPR ( andExpression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_OR_EXPR.nextNode(), root_1);

                if ( !(stream_andExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_andExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_andExpression.nextTree());

                }
                stream_andExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1064:3: -> andExpression
            {
                adaptor.addChild(root_0, stream_andExpression.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "orExpression"

    public static class andExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "andExpression"
    // EsperEPL2Grammar.g:1067:1: andExpression : matchUntilExpression (a= AND_EXPR matchUntilExpression )* -> {$a != null}? ^( AND_EXPR ( matchUntilExpression )+ ) -> matchUntilExpression ;
    public final EsperEPL2GrammarParser.andExpression_return andExpression() throws RecognitionException {
        EsperEPL2GrammarParser.andExpression_return retval = new EsperEPL2GrammarParser.andExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token a=null;
        EsperEPL2GrammarParser.matchUntilExpression_return matchUntilExpression425 = null;

        EsperEPL2GrammarParser.matchUntilExpression_return matchUntilExpression426 = null;


        CommonTree a_tree=null;
        RewriteRuleTokenStream stream_AND_EXPR=new RewriteRuleTokenStream(adaptor,"token AND_EXPR");
        RewriteRuleSubtreeStream stream_matchUntilExpression=new RewriteRuleSubtreeStream(adaptor,"rule matchUntilExpression");
        try {
            // EsperEPL2Grammar.g:1068:2: ( matchUntilExpression (a= AND_EXPR matchUntilExpression )* -> {$a != null}? ^( AND_EXPR ( matchUntilExpression )+ ) -> matchUntilExpression )
            // EsperEPL2Grammar.g:1068:4: matchUntilExpression (a= AND_EXPR matchUntilExpression )*
            {
            pushFollow(FOLLOW_matchUntilExpression_in_andExpression6447);
            matchUntilExpression425=matchUntilExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchUntilExpression.add(matchUntilExpression425.getTree());
            // EsperEPL2Grammar.g:1068:25: (a= AND_EXPR matchUntilExpression )*
            loop150:
            do {
                int alt150=2;
                int LA150_0 = input.LA(1);

                if ( (LA150_0==AND_EXPR) ) {
                    alt150=1;
                }


                switch (alt150) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1068:26: a= AND_EXPR matchUntilExpression
            	    {
            	    a=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_andExpression6452); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_AND_EXPR.add(a);

            	    pushFollow(FOLLOW_matchUntilExpression_in_andExpression6454);
            	    matchUntilExpression426=matchUntilExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_matchUntilExpression.add(matchUntilExpression426.getTree());

            	    }
            	    break;

            	default :
            	    break loop150;
                }
            } while (true);



            // AST REWRITE
            // elements: matchUntilExpression, AND_EXPR, matchUntilExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1069:3: -> {$a != null}? ^( AND_EXPR ( matchUntilExpression )+ )
            if (a != null) {
                // EsperEPL2Grammar.g:1069:20: ^( AND_EXPR ( matchUntilExpression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_AND_EXPR.nextNode(), root_1);

                if ( !(stream_matchUntilExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_matchUntilExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchUntilExpression.nextTree());

                }
                stream_matchUntilExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1070:3: -> matchUntilExpression
            {
                adaptor.addChild(root_0, stream_matchUntilExpression.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "andExpression"

    public static class matchUntilExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchUntilExpression"
    // EsperEPL2Grammar.g:1073:1: matchUntilExpression : (r= matchUntilRange )? qualifyExpression (a= UNTIL qualifyExpression )? -> {r != null && a != null}? ^( MATCH_UNTIL_EXPR matchUntilRange ( qualifyExpression )+ ) -> {r != null && a == null}? ^( MATCH_UNTIL_EXPR matchUntilRange qualifyExpression ) -> {$a != null}? ^( MATCH_UNTIL_EXPR ( qualifyExpression )+ ) -> qualifyExpression ;
    public final EsperEPL2GrammarParser.matchUntilExpression_return matchUntilExpression() throws RecognitionException {
        EsperEPL2GrammarParser.matchUntilExpression_return retval = new EsperEPL2GrammarParser.matchUntilExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token a=null;
        EsperEPL2GrammarParser.matchUntilRange_return r = null;

        EsperEPL2GrammarParser.qualifyExpression_return qualifyExpression427 = null;

        EsperEPL2GrammarParser.qualifyExpression_return qualifyExpression428 = null;


        CommonTree a_tree=null;
        RewriteRuleTokenStream stream_UNTIL=new RewriteRuleTokenStream(adaptor,"token UNTIL");
        RewriteRuleSubtreeStream stream_qualifyExpression=new RewriteRuleSubtreeStream(adaptor,"rule qualifyExpression");
        RewriteRuleSubtreeStream stream_matchUntilRange=new RewriteRuleSubtreeStream(adaptor,"rule matchUntilRange");
        try {
            // EsperEPL2Grammar.g:1074:2: ( (r= matchUntilRange )? qualifyExpression (a= UNTIL qualifyExpression )? -> {r != null && a != null}? ^( MATCH_UNTIL_EXPR matchUntilRange ( qualifyExpression )+ ) -> {r != null && a == null}? ^( MATCH_UNTIL_EXPR matchUntilRange qualifyExpression ) -> {$a != null}? ^( MATCH_UNTIL_EXPR ( qualifyExpression )+ ) -> qualifyExpression )
            // EsperEPL2Grammar.g:1074:4: (r= matchUntilRange )? qualifyExpression (a= UNTIL qualifyExpression )?
            {
            // EsperEPL2Grammar.g:1074:4: (r= matchUntilRange )?
            int alt151=2;
            int LA151_0 = input.LA(1);

            if ( (LA151_0==LBRACK) ) {
                alt151=1;
            }
            switch (alt151) {
                case 1 :
                    // EsperEPL2Grammar.g:1074:5: r= matchUntilRange
                    {
                    pushFollow(FOLLOW_matchUntilRange_in_matchUntilExpression6489);
                    r=matchUntilRange();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_matchUntilRange.add(r.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_qualifyExpression_in_matchUntilExpression6493);
            qualifyExpression427=qualifyExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_qualifyExpression.add(qualifyExpression427.getTree());
            // EsperEPL2Grammar.g:1074:43: (a= UNTIL qualifyExpression )?
            int alt152=2;
            int LA152_0 = input.LA(1);

            if ( (LA152_0==UNTIL) ) {
                alt152=1;
            }
            switch (alt152) {
                case 1 :
                    // EsperEPL2Grammar.g:1074:44: a= UNTIL qualifyExpression
                    {
                    a=(Token)match(input,UNTIL,FOLLOW_UNTIL_in_matchUntilExpression6498); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_UNTIL.add(a);

                    pushFollow(FOLLOW_qualifyExpression_in_matchUntilExpression6500);
                    qualifyExpression428=qualifyExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_qualifyExpression.add(qualifyExpression428.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: qualifyExpression, qualifyExpression, matchUntilRange, qualifyExpression, matchUntilRange, qualifyExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1075:3: -> {r != null && a != null}? ^( MATCH_UNTIL_EXPR matchUntilRange ( qualifyExpression )+ )
            if (r != null && a != null) {
                // EsperEPL2Grammar.g:1075:32: ^( MATCH_UNTIL_EXPR matchUntilRange ( qualifyExpression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_1);

                adaptor.addChild(root_1, stream_matchUntilRange.nextTree());
                if ( !(stream_qualifyExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_qualifyExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_qualifyExpression.nextTree());

                }
                stream_qualifyExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1076:3: -> {r != null && a == null}? ^( MATCH_UNTIL_EXPR matchUntilRange qualifyExpression )
            if (r != null && a == null) {
                // EsperEPL2Grammar.g:1076:32: ^( MATCH_UNTIL_EXPR matchUntilRange qualifyExpression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_1);

                adaptor.addChild(root_1, stream_matchUntilRange.nextTree());
                adaptor.addChild(root_1, stream_qualifyExpression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1077:3: -> {$a != null}? ^( MATCH_UNTIL_EXPR ( qualifyExpression )+ )
            if (a != null) {
                // EsperEPL2Grammar.g:1077:20: ^( MATCH_UNTIL_EXPR ( qualifyExpression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_1);

                if ( !(stream_qualifyExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_qualifyExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_qualifyExpression.nextTree());

                }
                stream_qualifyExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1078:3: -> qualifyExpression
            {
                adaptor.addChild(root_0, stream_qualifyExpression.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchUntilExpression"

    public static class qualifyExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "qualifyExpression"
    // EsperEPL2Grammar.g:1081:1: qualifyExpression : ( (e= EVERY_EXPR | n= NOT_EXPR ) (r= matchUntilRange )? )? guardPostFix -> {e != null && r == null}? ^( EVERY_EXPR guardPostFix ) -> {n != null && r == null}? ^( PATTERN_NOT_EXPR guardPostFix ) -> {e != null && r != null}? ^( EVERY_EXPR ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix ) ) -> {n != null && r != null}? ^( PATTERN_NOT_EXPR ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix ) ) -> guardPostFix ;
    public final EsperEPL2GrammarParser.qualifyExpression_return qualifyExpression() throws RecognitionException {
        EsperEPL2GrammarParser.qualifyExpression_return retval = new EsperEPL2GrammarParser.qualifyExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token e=null;
        Token n=null;
        EsperEPL2GrammarParser.matchUntilRange_return r = null;

        EsperEPL2GrammarParser.guardPostFix_return guardPostFix429 = null;


        CommonTree e_tree=null;
        CommonTree n_tree=null;
        RewriteRuleTokenStream stream_NOT_EXPR=new RewriteRuleTokenStream(adaptor,"token NOT_EXPR");
        RewriteRuleTokenStream stream_EVERY_EXPR=new RewriteRuleTokenStream(adaptor,"token EVERY_EXPR");
        RewriteRuleSubtreeStream stream_guardPostFix=new RewriteRuleSubtreeStream(adaptor,"rule guardPostFix");
        RewriteRuleSubtreeStream stream_matchUntilRange=new RewriteRuleSubtreeStream(adaptor,"rule matchUntilRange");
        try {
            // EsperEPL2Grammar.g:1082:2: ( ( (e= EVERY_EXPR | n= NOT_EXPR ) (r= matchUntilRange )? )? guardPostFix -> {e != null && r == null}? ^( EVERY_EXPR guardPostFix ) -> {n != null && r == null}? ^( PATTERN_NOT_EXPR guardPostFix ) -> {e != null && r != null}? ^( EVERY_EXPR ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix ) ) -> {n != null && r != null}? ^( PATTERN_NOT_EXPR ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix ) ) -> guardPostFix )
            // EsperEPL2Grammar.g:1082:4: ( (e= EVERY_EXPR | n= NOT_EXPR ) (r= matchUntilRange )? )? guardPostFix
            {
            // EsperEPL2Grammar.g:1082:4: ( (e= EVERY_EXPR | n= NOT_EXPR ) (r= matchUntilRange )? )?
            int alt155=2;
            int LA155_0 = input.LA(1);

            if ( ((LA155_0>=NOT_EXPR && LA155_0<=EVERY_EXPR)) ) {
                alt155=1;
            }
            switch (alt155) {
                case 1 :
                    // EsperEPL2Grammar.g:1082:5: (e= EVERY_EXPR | n= NOT_EXPR ) (r= matchUntilRange )?
                    {
                    // EsperEPL2Grammar.g:1082:5: (e= EVERY_EXPR | n= NOT_EXPR )
                    int alt153=2;
                    int LA153_0 = input.LA(1);

                    if ( (LA153_0==EVERY_EXPR) ) {
                        alt153=1;
                    }
                    else if ( (LA153_0==NOT_EXPR) ) {
                        alt153=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 153, 0, input);

                        throw nvae;
                    }
                    switch (alt153) {
                        case 1 :
                            // EsperEPL2Grammar.g:1082:6: e= EVERY_EXPR
                            {
                            e=(Token)match(input,EVERY_EXPR,FOLLOW_EVERY_EXPR_in_qualifyExpression6565); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_EVERY_EXPR.add(e);


                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1082:21: n= NOT_EXPR
                            {
                            n=(Token)match(input,NOT_EXPR,FOLLOW_NOT_EXPR_in_qualifyExpression6571); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NOT_EXPR.add(n);


                            }
                            break;

                    }

                    // EsperEPL2Grammar.g:1082:33: (r= matchUntilRange )?
                    int alt154=2;
                    int LA154_0 = input.LA(1);

                    if ( (LA154_0==LBRACK) ) {
                        alt154=1;
                    }
                    switch (alt154) {
                        case 1 :
                            // EsperEPL2Grammar.g:1082:34: r= matchUntilRange
                            {
                            pushFollow(FOLLOW_matchUntilRange_in_qualifyExpression6577);
                            r=matchUntilRange();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_matchUntilRange.add(r.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }

            pushFollow(FOLLOW_guardPostFix_in_qualifyExpression6586);
            guardPostFix429=guardPostFix();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_guardPostFix.add(guardPostFix429.getTree());


            // AST REWRITE
            // elements: EVERY_EXPR, guardPostFix, EVERY_EXPR, guardPostFix, guardPostFix, guardPostFix, matchUntilRange, guardPostFix, matchUntilRange
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1084:3: -> {e != null && r == null}? ^( EVERY_EXPR guardPostFix )
            if (e != null && r == null) {
                // EsperEPL2Grammar.g:1084:32: ^( EVERY_EXPR guardPostFix )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_EVERY_EXPR.nextNode(), root_1);

                adaptor.addChild(root_1, stream_guardPostFix.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1085:3: -> {n != null && r == null}? ^( PATTERN_NOT_EXPR guardPostFix )
            if (n != null && r == null) {
                // EsperEPL2Grammar.g:1085:32: ^( PATTERN_NOT_EXPR guardPostFix )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATTERN_NOT_EXPR, "PATTERN_NOT_EXPR"), root_1);

                adaptor.addChild(root_1, stream_guardPostFix.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1086:3: -> {e != null && r != null}? ^( EVERY_EXPR ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix ) )
            if (e != null && r != null) {
                // EsperEPL2Grammar.g:1086:32: ^( EVERY_EXPR ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_EVERY_EXPR.nextNode(), root_1);

                // EsperEPL2Grammar.g:1086:45: ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_2);

                adaptor.addChild(root_2, stream_matchUntilRange.nextTree());
                adaptor.addChild(root_2, stream_guardPostFix.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1087:3: -> {n != null && r != null}? ^( PATTERN_NOT_EXPR ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix ) )
            if (n != null && r != null) {
                // EsperEPL2Grammar.g:1087:32: ^( PATTERN_NOT_EXPR ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATTERN_NOT_EXPR, "PATTERN_NOT_EXPR"), root_1);

                // EsperEPL2Grammar.g:1087:51: ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_2);

                adaptor.addChild(root_2, stream_matchUntilRange.nextTree());
                adaptor.addChild(root_2, stream_guardPostFix.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1088:3: -> guardPostFix
            {
                adaptor.addChild(root_0, stream_guardPostFix.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "qualifyExpression"

    public static class guardPostFix_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "guardPostFix"
    // EsperEPL2Grammar.g:1091:1: guardPostFix : ( atomicExpression | l= LPAREN patternExpression RPAREN ) (w= WHERE guardExpression )? -> {$w != null}? ^( GUARD_EXPR ( atomicExpression )? ( patternExpression )? guardExpression ) -> ( atomicExpression )? ( patternExpression )? ;
    public final EsperEPL2GrammarParser.guardPostFix_return guardPostFix() throws RecognitionException {
        EsperEPL2GrammarParser.guardPostFix_return retval = new EsperEPL2GrammarParser.guardPostFix_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token l=null;
        Token w=null;
        Token RPAREN432=null;
        EsperEPL2GrammarParser.atomicExpression_return atomicExpression430 = null;

        EsperEPL2GrammarParser.patternExpression_return patternExpression431 = null;

        EsperEPL2GrammarParser.guardExpression_return guardExpression433 = null;


        CommonTree l_tree=null;
        CommonTree w_tree=null;
        CommonTree RPAREN432_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_guardExpression=new RewriteRuleSubtreeStream(adaptor,"rule guardExpression");
        RewriteRuleSubtreeStream stream_atomicExpression=new RewriteRuleSubtreeStream(adaptor,"rule atomicExpression");
        RewriteRuleSubtreeStream stream_patternExpression=new RewriteRuleSubtreeStream(adaptor,"rule patternExpression");
        try {
            // EsperEPL2Grammar.g:1092:2: ( ( atomicExpression | l= LPAREN patternExpression RPAREN ) (w= WHERE guardExpression )? -> {$w != null}? ^( GUARD_EXPR ( atomicExpression )? ( patternExpression )? guardExpression ) -> ( atomicExpression )? ( patternExpression )? )
            // EsperEPL2Grammar.g:1092:4: ( atomicExpression | l= LPAREN patternExpression RPAREN ) (w= WHERE guardExpression )?
            {
            // EsperEPL2Grammar.g:1092:4: ( atomicExpression | l= LPAREN patternExpression RPAREN )
            int alt156=2;
            int LA156_0 = input.LA(1);

            if ( (LA156_0==IDENT||LA156_0==TICKED_STRING_LITERAL) ) {
                alt156=1;
            }
            else if ( (LA156_0==LPAREN) ) {
                alt156=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 156, 0, input);

                throw nvae;
            }
            switch (alt156) {
                case 1 :
                    // EsperEPL2Grammar.g:1092:5: atomicExpression
                    {
                    pushFollow(FOLLOW_atomicExpression_in_guardPostFix6667);
                    atomicExpression430=atomicExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_atomicExpression.add(atomicExpression430.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1092:24: l= LPAREN patternExpression RPAREN
                    {
                    l=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_guardPostFix6673); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(l);

                    pushFollow(FOLLOW_patternExpression_in_guardPostFix6675);
                    patternExpression431=patternExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_patternExpression.add(patternExpression431.getTree());
                    RPAREN432=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_guardPostFix6677); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN432);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:1092:59: (w= WHERE guardExpression )?
            int alt157=2;
            int LA157_0 = input.LA(1);

            if ( (LA157_0==WHERE) ) {
                alt157=1;
            }
            switch (alt157) {
                case 1 :
                    // EsperEPL2Grammar.g:1092:60: w= WHERE guardExpression
                    {
                    w=(Token)match(input,WHERE,FOLLOW_WHERE_in_guardPostFix6683); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(w);

                    pushFollow(FOLLOW_guardExpression_in_guardPostFix6685);
                    guardExpression433=guardExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_guardExpression.add(guardExpression433.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: atomicExpression, patternExpression, patternExpression, atomicExpression, guardExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1093:3: -> {$w != null}? ^( GUARD_EXPR ( atomicExpression )? ( patternExpression )? guardExpression )
            if (w != null) {
                // EsperEPL2Grammar.g:1093:20: ^( GUARD_EXPR ( atomicExpression )? ( patternExpression )? guardExpression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GUARD_EXPR, "GUARD_EXPR"), root_1);

                // EsperEPL2Grammar.g:1093:33: ( atomicExpression )?
                if ( stream_atomicExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_atomicExpression.nextTree());

                }
                stream_atomicExpression.reset();
                // EsperEPL2Grammar.g:1093:51: ( patternExpression )?
                if ( stream_patternExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_patternExpression.nextTree());

                }
                stream_patternExpression.reset();
                adaptor.addChild(root_1, stream_guardExpression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1094:3: -> ( atomicExpression )? ( patternExpression )?
            {
                // EsperEPL2Grammar.g:1094:6: ( atomicExpression )?
                if ( stream_atomicExpression.hasNext() ) {
                    adaptor.addChild(root_0, stream_atomicExpression.nextTree());

                }
                stream_atomicExpression.reset();
                // EsperEPL2Grammar.g:1094:24: ( patternExpression )?
                if ( stream_patternExpression.hasNext() ) {
                    adaptor.addChild(root_0, stream_patternExpression.nextTree());

                }
                stream_patternExpression.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "guardPostFix"

    public static class atomicExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "atomicExpression"
    // EsperEPL2Grammar.g:1097:1: atomicExpression : ( observerExpression | patternFilterExpression );
    public final EsperEPL2GrammarParser.atomicExpression_return atomicExpression() throws RecognitionException {
        EsperEPL2GrammarParser.atomicExpression_return retval = new EsperEPL2GrammarParser.atomicExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.observerExpression_return observerExpression434 = null;

        EsperEPL2GrammarParser.patternFilterExpression_return patternFilterExpression435 = null;



        try {
            // EsperEPL2Grammar.g:1098:2: ( observerExpression | patternFilterExpression )
            int alt158=2;
            int LA158_0 = input.LA(1);

            if ( (LA158_0==IDENT) ) {
                int LA158_1 = input.LA(2);

                if ( (LA158_1==COLON) ) {
                    alt158=1;
                }
                else if ( (LA158_1==EOF||(LA158_1>=OR_EXPR && LA158_1<=AND_EXPR)||LA158_1==WHERE||LA158_1==UNTIL||(LA158_1>=EQUALS && LA158_1<=RPAREN)||(LA158_1>=LBRACK && LA158_1<=RBRACK)||LA158_1==FOLLOWED_BY) ) {
                    alt158=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 158, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA158_0==TICKED_STRING_LITERAL) ) {
                alt158=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 158, 0, input);

                throw nvae;
            }
            switch (alt158) {
                case 1 :
                    // EsperEPL2Grammar.g:1098:4: observerExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_observerExpression_in_atomicExpression6727);
                    observerExpression434=observerExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, observerExpression434.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1098:25: patternFilterExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_patternFilterExpression_in_atomicExpression6731);
                    patternFilterExpression435=patternFilterExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, patternFilterExpression435.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "atomicExpression"

    public static class observerExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "observerExpression"
    // EsperEPL2Grammar.g:1101:1: observerExpression : ns= IDENT COLON (nm= IDENT | a= AT ) LPAREN ( expressionWithTimeList )? RPAREN -> {$a != null}? ^( OBSERVER_EXPR $ns ^( IDENT[$a.text] ) ( expressionWithTimeList )? ) -> ^( OBSERVER_EXPR $ns $nm ( expressionWithTimeList )? ) ;
    public final EsperEPL2GrammarParser.observerExpression_return observerExpression() throws RecognitionException {
        EsperEPL2GrammarParser.observerExpression_return retval = new EsperEPL2GrammarParser.observerExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token ns=null;
        Token nm=null;
        Token a=null;
        Token COLON436=null;
        Token LPAREN437=null;
        Token RPAREN439=null;
        EsperEPL2GrammarParser.expressionWithTimeList_return expressionWithTimeList438 = null;


        CommonTree ns_tree=null;
        CommonTree nm_tree=null;
        CommonTree a_tree=null;
        CommonTree COLON436_tree=null;
        CommonTree LPAREN437_tree=null;
        CommonTree RPAREN439_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_AT=new RewriteRuleTokenStream(adaptor,"token AT");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionWithTimeList=new RewriteRuleSubtreeStream(adaptor,"rule expressionWithTimeList");
        try {
            // EsperEPL2Grammar.g:1102:2: (ns= IDENT COLON (nm= IDENT | a= AT ) LPAREN ( expressionWithTimeList )? RPAREN -> {$a != null}? ^( OBSERVER_EXPR $ns ^( IDENT[$a.text] ) ( expressionWithTimeList )? ) -> ^( OBSERVER_EXPR $ns $nm ( expressionWithTimeList )? ) )
            // EsperEPL2Grammar.g:1102:4: ns= IDENT COLON (nm= IDENT | a= AT ) LPAREN ( expressionWithTimeList )? RPAREN
            {
            ns=(Token)match(input,IDENT,FOLLOW_IDENT_in_observerExpression6746); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(ns);

            COLON436=(Token)match(input,COLON,FOLLOW_COLON_in_observerExpression6748); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON436);

            // EsperEPL2Grammar.g:1102:19: (nm= IDENT | a= AT )
            int alt159=2;
            int LA159_0 = input.LA(1);

            if ( (LA159_0==IDENT) ) {
                alt159=1;
            }
            else if ( (LA159_0==AT) ) {
                alt159=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 159, 0, input);

                throw nvae;
            }
            switch (alt159) {
                case 1 :
                    // EsperEPL2Grammar.g:1102:20: nm= IDENT
                    {
                    nm=(Token)match(input,IDENT,FOLLOW_IDENT_in_observerExpression6753); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(nm);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1102:31: a= AT
                    {
                    a=(Token)match(input,AT,FOLLOW_AT_in_observerExpression6759); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AT.add(a);


                    }
                    break;

            }

            LPAREN437=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_observerExpression6762); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN437);

            // EsperEPL2Grammar.g:1102:44: ( expressionWithTimeList )?
            int alt160=2;
            int LA160_0 = input.LA(1);

            if ( (LA160_0==WINDOW||LA160_0==ESCAPE||(LA160_0>=NOT_EXPR && LA160_0<=EVERY_EXPR)||(LA160_0>=SUM && LA160_0<=COUNT)||LA160_0==CASE||LA160_0==OUTER||(LA160_0>=JOIN && LA160_0<=FULL)||(LA160_0>=EVENTS && LA160_0<=LAST)||(LA160_0>=UNIDIRECTIONAL && LA160_0<=CURRENT_TIMESTAMP)||LA160_0==SNAPSHOT||(LA160_0>=VARIABLE && LA160_0<=AT)||(LA160_0>=BOOLEAN_TRUE && LA160_0<=VALUE_NULL)||LA160_0==NUM_DOUBLE||LA160_0==IDENT||LA160_0==LPAREN||(LA160_0>=STAR && LA160_0<=LBRACK)||(LA160_0>=STRING_LITERAL && LA160_0<=QUOTED_STRING_LITERAL)||(LA160_0>=PLUS && LA160_0<=MINUS)||LA160_0==LCURLY||LA160_0==NUM_INT||LA160_0==QUESTION||(LA160_0>=TICKED_STRING_LITERAL && LA160_0<=NUM_FLOAT)) ) {
                alt160=1;
            }
            switch (alt160) {
                case 1 :
                    // EsperEPL2Grammar.g:1102:44: expressionWithTimeList
                    {
                    pushFollow(FOLLOW_expressionWithTimeList_in_observerExpression6764);
                    expressionWithTimeList438=expressionWithTimeList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expressionWithTimeList.add(expressionWithTimeList438.getTree());

                    }
                    break;

            }

            RPAREN439=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_observerExpression6767); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN439);



            // AST REWRITE
            // elements: IDENT, ns, expressionWithTimeList, expressionWithTimeList, nm, ns
            // token labels: ns, nm
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_ns=new RewriteRuleTokenStream(adaptor,"token ns",ns);
            RewriteRuleTokenStream stream_nm=new RewriteRuleTokenStream(adaptor,"token nm",nm);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1103:3: -> {$a != null}? ^( OBSERVER_EXPR $ns ^( IDENT[$a.text] ) ( expressionWithTimeList )? )
            if (a != null) {
                // EsperEPL2Grammar.g:1103:20: ^( OBSERVER_EXPR $ns ^( IDENT[$a.text] ) ( expressionWithTimeList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(OBSERVER_EXPR, "OBSERVER_EXPR"), root_1);

                adaptor.addChild(root_1, stream_ns.nextNode());
                // EsperEPL2Grammar.g:1103:40: ^( IDENT[$a.text] )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IDENT, (a!=null?a.getText():null)), root_2);

                adaptor.addChild(root_1, root_2);
                }
                // EsperEPL2Grammar.g:1103:58: ( expressionWithTimeList )?
                if ( stream_expressionWithTimeList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionWithTimeList.nextTree());

                }
                stream_expressionWithTimeList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1104:3: -> ^( OBSERVER_EXPR $ns $nm ( expressionWithTimeList )? )
            {
                // EsperEPL2Grammar.g:1104:6: ^( OBSERVER_EXPR $ns $nm ( expressionWithTimeList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(OBSERVER_EXPR, "OBSERVER_EXPR"), root_1);

                adaptor.addChild(root_1, stream_ns.nextNode());
                adaptor.addChild(root_1, stream_nm.nextNode());
                // EsperEPL2Grammar.g:1104:30: ( expressionWithTimeList )?
                if ( stream_expressionWithTimeList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionWithTimeList.nextTree());

                }
                stream_expressionWithTimeList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "observerExpression"

    public static class guardExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "guardExpression"
    // EsperEPL2Grammar.g:1107:1: guardExpression : IDENT COLON IDENT LPAREN ( expressionWithTimeList )? RPAREN ;
    public final EsperEPL2GrammarParser.guardExpression_return guardExpression() throws RecognitionException {
        EsperEPL2GrammarParser.guardExpression_return retval = new EsperEPL2GrammarParser.guardExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token IDENT440=null;
        Token COLON441=null;
        Token IDENT442=null;
        Token LPAREN443=null;
        Token RPAREN445=null;
        EsperEPL2GrammarParser.expressionWithTimeList_return expressionWithTimeList444 = null;


        CommonTree IDENT440_tree=null;
        CommonTree COLON441_tree=null;
        CommonTree IDENT442_tree=null;
        CommonTree LPAREN443_tree=null;
        CommonTree RPAREN445_tree=null;

        try {
            // EsperEPL2Grammar.g:1108:2: ( IDENT COLON IDENT LPAREN ( expressionWithTimeList )? RPAREN )
            // EsperEPL2Grammar.g:1108:4: IDENT COLON IDENT LPAREN ( expressionWithTimeList )? RPAREN
            {
            root_0 = (CommonTree)adaptor.nil();

            IDENT440=(Token)match(input,IDENT,FOLLOW_IDENT_in_guardExpression6816); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IDENT440_tree = (CommonTree)adaptor.create(IDENT440);
            adaptor.addChild(root_0, IDENT440_tree);
            }
            COLON441=(Token)match(input,COLON,FOLLOW_COLON_in_guardExpression6818); if (state.failed) return retval;
            IDENT442=(Token)match(input,IDENT,FOLLOW_IDENT_in_guardExpression6821); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IDENT442_tree = (CommonTree)adaptor.create(IDENT442);
            adaptor.addChild(root_0, IDENT442_tree);
            }
            LPAREN443=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_guardExpression6823); if (state.failed) return retval;
            // EsperEPL2Grammar.g:1108:31: ( expressionWithTimeList )?
            int alt161=2;
            int LA161_0 = input.LA(1);

            if ( (LA161_0==WINDOW||LA161_0==ESCAPE||(LA161_0>=NOT_EXPR && LA161_0<=EVERY_EXPR)||(LA161_0>=SUM && LA161_0<=COUNT)||LA161_0==CASE||LA161_0==OUTER||(LA161_0>=JOIN && LA161_0<=FULL)||(LA161_0>=EVENTS && LA161_0<=LAST)||(LA161_0>=UNIDIRECTIONAL && LA161_0<=CURRENT_TIMESTAMP)||LA161_0==SNAPSHOT||(LA161_0>=VARIABLE && LA161_0<=AT)||(LA161_0>=BOOLEAN_TRUE && LA161_0<=VALUE_NULL)||LA161_0==NUM_DOUBLE||LA161_0==IDENT||LA161_0==LPAREN||(LA161_0>=STAR && LA161_0<=LBRACK)||(LA161_0>=STRING_LITERAL && LA161_0<=QUOTED_STRING_LITERAL)||(LA161_0>=PLUS && LA161_0<=MINUS)||LA161_0==LCURLY||LA161_0==NUM_INT||LA161_0==QUESTION||(LA161_0>=TICKED_STRING_LITERAL && LA161_0<=NUM_FLOAT)) ) {
                alt161=1;
            }
            switch (alt161) {
                case 1 :
                    // EsperEPL2Grammar.g:1108:32: expressionWithTimeList
                    {
                    pushFollow(FOLLOW_expressionWithTimeList_in_guardExpression6827);
                    expressionWithTimeList444=expressionWithTimeList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionWithTimeList444.getTree());

                    }
                    break;

            }

            RPAREN445=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_guardExpression6831); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "guardExpression"

    public static class matchUntilRange_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchUntilRange"
    // EsperEPL2Grammar.g:1112:1: matchUntilRange : LBRACK (l= NUM_INT ( (d1= DOT DOT (r= NUM_INT )? ) | (c1= COLON r= NUM_INT ) )? | db= NUM_DOUBLE (d1= DOT (r= NUM_INT )? | db2= NUM_DOUBLE )? | DOT DOT r= NUM_INT | DOT db3= NUM_DOUBLE ) RBRACK -> {$l != null && d1 != null && r != null}? ^( MATCH_UNTIL_RANGE_CLOSED $l $r) -> {$l != null && d1 != null}? ^( MATCH_UNTIL_RANGE_HALFOPEN $l) -> {$l != null && c1 != null}? ^( MATCH_UNTIL_RANGE_CLOSED $l $r) -> {$l != null}? ^( MATCH_UNTIL_RANGE_BOUNDED $l) -> {$db != null && d1 != null && r != null}? ^( MATCH_UNTIL_RANGE_CLOSED $db $r) -> {$db != null && d1 != null}? ^( MATCH_UNTIL_RANGE_HALFOPEN $db) -> {$db != null && db2 != null}? ^( MATCH_UNTIL_RANGE_CLOSED $db $db2) -> {$db3 != null}? ^( MATCH_UNTIL_RANGE_HALFCLOSED $db3) -> {$r != null}? ^( MATCH_UNTIL_RANGE_HALFCLOSED $r) -> ^( MATCH_UNTIL_RANGE_HALFCLOSED $db) ;
    public final EsperEPL2GrammarParser.matchUntilRange_return matchUntilRange() throws RecognitionException {
        EsperEPL2GrammarParser.matchUntilRange_return retval = new EsperEPL2GrammarParser.matchUntilRange_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token l=null;
        Token d1=null;
        Token r=null;
        Token c1=null;
        Token db=null;
        Token db2=null;
        Token db3=null;
        Token LBRACK446=null;
        Token DOT447=null;
        Token DOT448=null;
        Token DOT449=null;
        Token DOT450=null;
        Token RBRACK451=null;

        CommonTree l_tree=null;
        CommonTree d1_tree=null;
        CommonTree r_tree=null;
        CommonTree c1_tree=null;
        CommonTree db_tree=null;
        CommonTree db2_tree=null;
        CommonTree db3_tree=null;
        CommonTree LBRACK446_tree=null;
        CommonTree DOT447_tree=null;
        CommonTree DOT448_tree=null;
        CommonTree DOT449_tree=null;
        CommonTree DOT450_tree=null;
        CommonTree RBRACK451_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_NUM_DOUBLE=new RewriteRuleTokenStream(adaptor,"token NUM_DOUBLE");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_NUM_INT=new RewriteRuleTokenStream(adaptor,"token NUM_INT");

        try {
            // EsperEPL2Grammar.g:1113:2: ( LBRACK (l= NUM_INT ( (d1= DOT DOT (r= NUM_INT )? ) | (c1= COLON r= NUM_INT ) )? | db= NUM_DOUBLE (d1= DOT (r= NUM_INT )? | db2= NUM_DOUBLE )? | DOT DOT r= NUM_INT | DOT db3= NUM_DOUBLE ) RBRACK -> {$l != null && d1 != null && r != null}? ^( MATCH_UNTIL_RANGE_CLOSED $l $r) -> {$l != null && d1 != null}? ^( MATCH_UNTIL_RANGE_HALFOPEN $l) -> {$l != null && c1 != null}? ^( MATCH_UNTIL_RANGE_CLOSED $l $r) -> {$l != null}? ^( MATCH_UNTIL_RANGE_BOUNDED $l) -> {$db != null && d1 != null && r != null}? ^( MATCH_UNTIL_RANGE_CLOSED $db $r) -> {$db != null && d1 != null}? ^( MATCH_UNTIL_RANGE_HALFOPEN $db) -> {$db != null && db2 != null}? ^( MATCH_UNTIL_RANGE_CLOSED $db $db2) -> {$db3 != null}? ^( MATCH_UNTIL_RANGE_HALFCLOSED $db3) -> {$r != null}? ^( MATCH_UNTIL_RANGE_HALFCLOSED $r) -> ^( MATCH_UNTIL_RANGE_HALFCLOSED $db) )
            // EsperEPL2Grammar.g:1113:4: LBRACK (l= NUM_INT ( (d1= DOT DOT (r= NUM_INT )? ) | (c1= COLON r= NUM_INT ) )? | db= NUM_DOUBLE (d1= DOT (r= NUM_INT )? | db2= NUM_DOUBLE )? | DOT DOT r= NUM_INT | DOT db3= NUM_DOUBLE ) RBRACK
            {
            LBRACK446=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_matchUntilRange6845); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK446);

            // EsperEPL2Grammar.g:1113:11: (l= NUM_INT ( (d1= DOT DOT (r= NUM_INT )? ) | (c1= COLON r= NUM_INT ) )? | db= NUM_DOUBLE (d1= DOT (r= NUM_INT )? | db2= NUM_DOUBLE )? | DOT DOT r= NUM_INT | DOT db3= NUM_DOUBLE )
            int alt166=4;
            switch ( input.LA(1) ) {
            case NUM_INT:
                {
                alt166=1;
                }
                break;
            case NUM_DOUBLE:
                {
                alt166=2;
                }
                break;
            case DOT:
                {
                int LA166_3 = input.LA(2);

                if ( (LA166_3==DOT) ) {
                    alt166=3;
                }
                else if ( (LA166_3==NUM_DOUBLE) ) {
                    alt166=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 166, 3, input);

                    throw nvae;
                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 166, 0, input);

                throw nvae;
            }

            switch (alt166) {
                case 1 :
                    // EsperEPL2Grammar.g:1114:4: l= NUM_INT ( (d1= DOT DOT (r= NUM_INT )? ) | (c1= COLON r= NUM_INT ) )?
                    {
                    l=(Token)match(input,NUM_INT,FOLLOW_NUM_INT_in_matchUntilRange6854); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_INT.add(l);

                    // EsperEPL2Grammar.g:1114:14: ( (d1= DOT DOT (r= NUM_INT )? ) | (c1= COLON r= NUM_INT ) )?
                    int alt163=3;
                    int LA163_0 = input.LA(1);

                    if ( (LA163_0==DOT) ) {
                        alt163=1;
                    }
                    else if ( (LA163_0==COLON) ) {
                        alt163=2;
                    }
                    switch (alt163) {
                        case 1 :
                            // EsperEPL2Grammar.g:1114:17: (d1= DOT DOT (r= NUM_INT )? )
                            {
                            // EsperEPL2Grammar.g:1114:17: (d1= DOT DOT (r= NUM_INT )? )
                            // EsperEPL2Grammar.g:1114:18: d1= DOT DOT (r= NUM_INT )?
                            {
                            d1=(Token)match(input,DOT,FOLLOW_DOT_in_matchUntilRange6862); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DOT.add(d1);

                            DOT447=(Token)match(input,DOT,FOLLOW_DOT_in_matchUntilRange6864); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DOT.add(DOT447);

                            // EsperEPL2Grammar.g:1114:30: (r= NUM_INT )?
                            int alt162=2;
                            int LA162_0 = input.LA(1);

                            if ( (LA162_0==NUM_INT) ) {
                                alt162=1;
                            }
                            switch (alt162) {
                                case 1 :
                                    // EsperEPL2Grammar.g:1114:30: r= NUM_INT
                                    {
                                    r=(Token)match(input,NUM_INT,FOLLOW_NUM_INT_in_matchUntilRange6868); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_NUM_INT.add(r);


                                    }
                                    break;

                            }


                            }


                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1115:17: (c1= COLON r= NUM_INT )
                            {
                            // EsperEPL2Grammar.g:1115:17: (c1= COLON r= NUM_INT )
                            // EsperEPL2Grammar.g:1115:18: c1= COLON r= NUM_INT
                            {
                            c1=(Token)match(input,COLON,FOLLOW_COLON_in_matchUntilRange6892); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COLON.add(c1);

                            r=(Token)match(input,NUM_INT,FOLLOW_NUM_INT_in_matchUntilRange6896); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NUM_INT.add(r);


                            }


                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1117:8: db= NUM_DOUBLE (d1= DOT (r= NUM_INT )? | db2= NUM_DOUBLE )?
                    {
                    db=(Token)match(input,NUM_DOUBLE,FOLLOW_NUM_DOUBLE_in_matchUntilRange6918); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_DOUBLE.add(db);

                    // EsperEPL2Grammar.g:1117:22: (d1= DOT (r= NUM_INT )? | db2= NUM_DOUBLE )?
                    int alt165=3;
                    int LA165_0 = input.LA(1);

                    if ( (LA165_0==DOT) ) {
                        alt165=1;
                    }
                    else if ( (LA165_0==NUM_DOUBLE) ) {
                        alt165=2;
                    }
                    switch (alt165) {
                        case 1 :
                            // EsperEPL2Grammar.g:1118:27: d1= DOT (r= NUM_INT )?
                            {
                            d1=(Token)match(input,DOT,FOLLOW_DOT_in_matchUntilRange6950); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DOT.add(d1);

                            // EsperEPL2Grammar.g:1118:35: (r= NUM_INT )?
                            int alt164=2;
                            int LA164_0 = input.LA(1);

                            if ( (LA164_0==NUM_INT) ) {
                                alt164=1;
                            }
                            switch (alt164) {
                                case 1 :
                                    // EsperEPL2Grammar.g:1118:35: r= NUM_INT
                                    {
                                    r=(Token)match(input,NUM_INT,FOLLOW_NUM_INT_in_matchUntilRange6954); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_NUM_INT.add(r);


                                    }
                                    break;

                            }


                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1120:27: db2= NUM_DOUBLE
                            {
                            db2=(Token)match(input,NUM_DOUBLE,FOLLOW_NUM_DOUBLE_in_matchUntilRange7014); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NUM_DOUBLE.add(db2);


                            }
                            break;

                    }


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1122:8: DOT DOT r= NUM_INT
                    {
                    DOT448=(Token)match(input,DOT,FOLLOW_DOT_in_matchUntilRange7051); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT448);

                    DOT449=(Token)match(input,DOT,FOLLOW_DOT_in_matchUntilRange7053); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT449);

                    r=(Token)match(input,NUM_INT,FOLLOW_NUM_INT_in_matchUntilRange7057); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_INT.add(r);


                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:1123:8: DOT db3= NUM_DOUBLE
                    {
                    DOT450=(Token)match(input,DOT,FOLLOW_DOT_in_matchUntilRange7066); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT450);

                    db3=(Token)match(input,NUM_DOUBLE,FOLLOW_NUM_DOUBLE_in_matchUntilRange7070); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_DOUBLE.add(db3);


                    }
                    break;

            }

            RBRACK451=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_matchUntilRange7081); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK451);



            // AST REWRITE
            // elements: db, r, r, db, db3, l, l, db, db2, r, db, l, r, l
            // token labels: db, r, l, db2, db3
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_db=new RewriteRuleTokenStream(adaptor,"token db",db);
            RewriteRuleTokenStream stream_r=new RewriteRuleTokenStream(adaptor,"token r",r);
            RewriteRuleTokenStream stream_l=new RewriteRuleTokenStream(adaptor,"token l",l);
            RewriteRuleTokenStream stream_db2=new RewriteRuleTokenStream(adaptor,"token db2",db2);
            RewriteRuleTokenStream stream_db3=new RewriteRuleTokenStream(adaptor,"token db3",db3);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1126:3: -> {$l != null && d1 != null && r != null}? ^( MATCH_UNTIL_RANGE_CLOSED $l $r)
            if (l != null && d1 != null && r != null) {
                // EsperEPL2Grammar.g:1126:47: ^( MATCH_UNTIL_RANGE_CLOSED $l $r)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_CLOSED, "MATCH_UNTIL_RANGE_CLOSED"), root_1);

                adaptor.addChild(root_1, stream_l.nextNode());
                adaptor.addChild(root_1, stream_r.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1127:3: -> {$l != null && d1 != null}? ^( MATCH_UNTIL_RANGE_HALFOPEN $l)
            if (l != null && d1 != null) {
                // EsperEPL2Grammar.g:1127:34: ^( MATCH_UNTIL_RANGE_HALFOPEN $l)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_HALFOPEN, "MATCH_UNTIL_RANGE_HALFOPEN"), root_1);

                adaptor.addChild(root_1, stream_l.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1128:3: -> {$l != null && c1 != null}? ^( MATCH_UNTIL_RANGE_CLOSED $l $r)
            if (l != null && c1 != null) {
                // EsperEPL2Grammar.g:1128:34: ^( MATCH_UNTIL_RANGE_CLOSED $l $r)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_CLOSED, "MATCH_UNTIL_RANGE_CLOSED"), root_1);

                adaptor.addChild(root_1, stream_l.nextNode());
                adaptor.addChild(root_1, stream_r.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1129:3: -> {$l != null}? ^( MATCH_UNTIL_RANGE_BOUNDED $l)
            if (l != null) {
                // EsperEPL2Grammar.g:1129:20: ^( MATCH_UNTIL_RANGE_BOUNDED $l)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_BOUNDED, "MATCH_UNTIL_RANGE_BOUNDED"), root_1);

                adaptor.addChild(root_1, stream_l.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1130:3: -> {$db != null && d1 != null && r != null}? ^( MATCH_UNTIL_RANGE_CLOSED $db $r)
            if (db != null && d1 != null && r != null) {
                // EsperEPL2Grammar.g:1130:48: ^( MATCH_UNTIL_RANGE_CLOSED $db $r)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_CLOSED, "MATCH_UNTIL_RANGE_CLOSED"), root_1);

                adaptor.addChild(root_1, stream_db.nextNode());
                adaptor.addChild(root_1, stream_r.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1131:3: -> {$db != null && d1 != null}? ^( MATCH_UNTIL_RANGE_HALFOPEN $db)
            if (db != null && d1 != null) {
                // EsperEPL2Grammar.g:1131:35: ^( MATCH_UNTIL_RANGE_HALFOPEN $db)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_HALFOPEN, "MATCH_UNTIL_RANGE_HALFOPEN"), root_1);

                adaptor.addChild(root_1, stream_db.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1132:3: -> {$db != null && db2 != null}? ^( MATCH_UNTIL_RANGE_CLOSED $db $db2)
            if (db != null && db2 != null) {
                // EsperEPL2Grammar.g:1132:36: ^( MATCH_UNTIL_RANGE_CLOSED $db $db2)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_CLOSED, "MATCH_UNTIL_RANGE_CLOSED"), root_1);

                adaptor.addChild(root_1, stream_db.nextNode());
                adaptor.addChild(root_1, stream_db2.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1133:3: -> {$db3 != null}? ^( MATCH_UNTIL_RANGE_HALFCLOSED $db3)
            if (db3 != null) {
                // EsperEPL2Grammar.g:1133:22: ^( MATCH_UNTIL_RANGE_HALFCLOSED $db3)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_HALFCLOSED, "MATCH_UNTIL_RANGE_HALFCLOSED"), root_1);

                adaptor.addChild(root_1, stream_db3.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1134:3: -> {$r != null}? ^( MATCH_UNTIL_RANGE_HALFCLOSED $r)
            if (r != null) {
                // EsperEPL2Grammar.g:1134:20: ^( MATCH_UNTIL_RANGE_HALFCLOSED $r)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_HALFCLOSED, "MATCH_UNTIL_RANGE_HALFCLOSED"), root_1);

                adaptor.addChild(root_1, stream_r.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1135:3: -> ^( MATCH_UNTIL_RANGE_HALFCLOSED $db)
            {
                // EsperEPL2Grammar.g:1135:6: ^( MATCH_UNTIL_RANGE_HALFCLOSED $db)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_HALFCLOSED, "MATCH_UNTIL_RANGE_HALFCLOSED"), root_1);

                adaptor.addChild(root_1, stream_db.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchUntilRange"

    public static class eventFilterExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "eventFilterExpression"
    // EsperEPL2Grammar.g:1143:1: eventFilterExpression : (i= IDENT EQUALS )? classIdentifier ( LPAREN ( expressionList )? RPAREN )? ( propertyExpression )? -> ^( EVENT_FILTER_EXPR ( $i)? classIdentifier ( propertyExpression )? ( expressionList )? ) ;
    public final EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression() throws RecognitionException {
        EsperEPL2GrammarParser.eventFilterExpression_return retval = new EsperEPL2GrammarParser.eventFilterExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token EQUALS452=null;
        Token LPAREN454=null;
        Token RPAREN456=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier453 = null;

        EsperEPL2GrammarParser.expressionList_return expressionList455 = null;

        EsperEPL2GrammarParser.propertyExpression_return propertyExpression457 = null;


        CommonTree i_tree=null;
        CommonTree EQUALS452_tree=null;
        CommonTree LPAREN454_tree=null;
        CommonTree RPAREN456_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_propertyExpression=new RewriteRuleSubtreeStream(adaptor,"rule propertyExpression");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
         paraphrases.push("filter specification"); 
        try {
            // EsperEPL2Grammar.g:1146:5: ( (i= IDENT EQUALS )? classIdentifier ( LPAREN ( expressionList )? RPAREN )? ( propertyExpression )? -> ^( EVENT_FILTER_EXPR ( $i)? classIdentifier ( propertyExpression )? ( expressionList )? ) )
            // EsperEPL2Grammar.g:1146:9: (i= IDENT EQUALS )? classIdentifier ( LPAREN ( expressionList )? RPAREN )? ( propertyExpression )?
            {
            // EsperEPL2Grammar.g:1146:9: (i= IDENT EQUALS )?
            int alt167=2;
            int LA167_0 = input.LA(1);

            if ( (LA167_0==IDENT) ) {
                int LA167_1 = input.LA(2);

                if ( (LA167_1==EQUALS) ) {
                    alt167=1;
                }
            }
            switch (alt167) {
                case 1 :
                    // EsperEPL2Grammar.g:1146:10: i= IDENT EQUALS
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_eventFilterExpression7266); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);

                    EQUALS452=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_eventFilterExpression7268); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS452);


                    }
                    break;

            }

            pushFollow(FOLLOW_classIdentifier_in_eventFilterExpression7277);
            classIdentifier453=classIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier453.getTree());
            // EsperEPL2Grammar.g:1148:9: ( LPAREN ( expressionList )? RPAREN )?
            int alt169=2;
            int LA169_0 = input.LA(1);

            if ( (LA169_0==LPAREN) ) {
                alt169=1;
            }
            switch (alt169) {
                case 1 :
                    // EsperEPL2Grammar.g:1148:10: LPAREN ( expressionList )? RPAREN
                    {
                    LPAREN454=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_eventFilterExpression7288); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN454);

                    // EsperEPL2Grammar.g:1148:17: ( expressionList )?
                    int alt168=2;
                    int LA168_0 = input.LA(1);

                    if ( (LA168_0==WINDOW||LA168_0==ESCAPE||(LA168_0>=NOT_EXPR && LA168_0<=EVERY_EXPR)||(LA168_0>=SUM && LA168_0<=COUNT)||LA168_0==CASE||LA168_0==OUTER||(LA168_0>=JOIN && LA168_0<=FULL)||(LA168_0>=EVENTS && LA168_0<=LAST)||(LA168_0>=UNIDIRECTIONAL && LA168_0<=CURRENT_TIMESTAMP)||LA168_0==SNAPSHOT||(LA168_0>=VARIABLE && LA168_0<=AT)||(LA168_0>=BOOLEAN_TRUE && LA168_0<=VALUE_NULL)||LA168_0==NUM_DOUBLE||LA168_0==IDENT||LA168_0==LPAREN||(LA168_0>=STRING_LITERAL && LA168_0<=QUOTED_STRING_LITERAL)||(LA168_0>=PLUS && LA168_0<=MINUS)||LA168_0==LCURLY||LA168_0==NUM_INT||LA168_0==QUESTION||(LA168_0>=TICKED_STRING_LITERAL && LA168_0<=NUM_FLOAT)) ) {
                        alt168=1;
                    }
                    switch (alt168) {
                        case 1 :
                            // EsperEPL2Grammar.g:1148:17: expressionList
                            {
                            pushFollow(FOLLOW_expressionList_in_eventFilterExpression7290);
                            expressionList455=expressionList();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList455.getTree());

                            }
                            break;

                    }

                    RPAREN456=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_eventFilterExpression7293); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN456);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:1149:9: ( propertyExpression )?
            int alt170=2;
            int LA170_0 = input.LA(1);

            if ( (LA170_0==LBRACK) ) {
                alt170=1;
            }
            switch (alt170) {
                case 1 :
                    // EsperEPL2Grammar.g:1149:9: propertyExpression
                    {
                    pushFollow(FOLLOW_propertyExpression_in_eventFilterExpression7305);
                    propertyExpression457=propertyExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_propertyExpression.add(propertyExpression457.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: classIdentifier, expressionList, propertyExpression, i
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1150:9: -> ^( EVENT_FILTER_EXPR ( $i)? classIdentifier ( propertyExpression )? ( expressionList )? )
            {
                // EsperEPL2Grammar.g:1150:12: ^( EVENT_FILTER_EXPR ( $i)? classIdentifier ( propertyExpression )? ( expressionList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_FILTER_EXPR, "EVENT_FILTER_EXPR"), root_1);

                // EsperEPL2Grammar.g:1150:32: ( $i)?
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());

                }
                stream_i.reset();
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                // EsperEPL2Grammar.g:1150:52: ( propertyExpression )?
                if ( stream_propertyExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_propertyExpression.nextTree());

                }
                stream_propertyExpression.reset();
                // EsperEPL2Grammar.g:1150:72: ( expressionList )?
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());

                }
                stream_expressionList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "eventFilterExpression"

    public static class propertyExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "propertyExpression"
    // EsperEPL2Grammar.g:1153:1: propertyExpression : propertyExpressionAtomic ( propertyExpressionAtomic )* -> ^( EVENT_FILTER_PROPERTY_EXPR ( propertyExpressionAtomic )+ ) ;
    public final EsperEPL2GrammarParser.propertyExpression_return propertyExpression() throws RecognitionException {
        EsperEPL2GrammarParser.propertyExpression_return retval = new EsperEPL2GrammarParser.propertyExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.propertyExpressionAtomic_return propertyExpressionAtomic458 = null;

        EsperEPL2GrammarParser.propertyExpressionAtomic_return propertyExpressionAtomic459 = null;


        RewriteRuleSubtreeStream stream_propertyExpressionAtomic=new RewriteRuleSubtreeStream(adaptor,"rule propertyExpressionAtomic");
        try {
            // EsperEPL2Grammar.g:1154:2: ( propertyExpressionAtomic ( propertyExpressionAtomic )* -> ^( EVENT_FILTER_PROPERTY_EXPR ( propertyExpressionAtomic )+ ) )
            // EsperEPL2Grammar.g:1154:4: propertyExpressionAtomic ( propertyExpressionAtomic )*
            {
            pushFollow(FOLLOW_propertyExpressionAtomic_in_propertyExpression7350);
            propertyExpressionAtomic458=propertyExpressionAtomic();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_propertyExpressionAtomic.add(propertyExpressionAtomic458.getTree());
            // EsperEPL2Grammar.g:1154:29: ( propertyExpressionAtomic )*
            loop171:
            do {
                int alt171=2;
                int LA171_0 = input.LA(1);

                if ( (LA171_0==LBRACK) ) {
                    alt171=1;
                }


                switch (alt171) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1154:30: propertyExpressionAtomic
            	    {
            	    pushFollow(FOLLOW_propertyExpressionAtomic_in_propertyExpression7353);
            	    propertyExpressionAtomic459=propertyExpressionAtomic();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_propertyExpressionAtomic.add(propertyExpressionAtomic459.getTree());

            	    }
            	    break;

            	default :
            	    break loop171;
                }
            } while (true);



            // AST REWRITE
            // elements: propertyExpressionAtomic
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1155:9: -> ^( EVENT_FILTER_PROPERTY_EXPR ( propertyExpressionAtomic )+ )
            {
                // EsperEPL2Grammar.g:1155:12: ^( EVENT_FILTER_PROPERTY_EXPR ( propertyExpressionAtomic )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_FILTER_PROPERTY_EXPR, "EVENT_FILTER_PROPERTY_EXPR"), root_1);

                if ( !(stream_propertyExpressionAtomic.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_propertyExpressionAtomic.hasNext() ) {
                    adaptor.addChild(root_1, stream_propertyExpressionAtomic.nextTree());

                }
                stream_propertyExpressionAtomic.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "propertyExpression"

    public static class propertyExpressionAtomic_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "propertyExpressionAtomic"
    // EsperEPL2Grammar.g:1158:1: propertyExpressionAtomic : LBRACK ( SELECT propertySelectionList FROM )? eventProperty ( AS IDENT )? ( WHERE expression )? RBRACK -> ^( EVENT_FILTER_PROPERTY_EXPR_ATOM ( propertySelectionList )? eventProperty ( IDENT )? ^( WHERE_EXPR ( expression )? ) ) ;
    public final EsperEPL2GrammarParser.propertyExpressionAtomic_return propertyExpressionAtomic() throws RecognitionException {
        EsperEPL2GrammarParser.propertyExpressionAtomic_return retval = new EsperEPL2GrammarParser.propertyExpressionAtomic_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LBRACK460=null;
        Token SELECT461=null;
        Token FROM463=null;
        Token AS465=null;
        Token IDENT466=null;
        Token WHERE467=null;
        Token RBRACK469=null;
        EsperEPL2GrammarParser.propertySelectionList_return propertySelectionList462 = null;

        EsperEPL2GrammarParser.eventProperty_return eventProperty464 = null;

        EsperEPL2GrammarParser.expression_return expression468 = null;


        CommonTree LBRACK460_tree=null;
        CommonTree SELECT461_tree=null;
        CommonTree FROM463_tree=null;
        CommonTree AS465_tree=null;
        CommonTree IDENT466_tree=null;
        CommonTree WHERE467_tree=null;
        CommonTree RBRACK469_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_FROM=new RewriteRuleTokenStream(adaptor,"token FROM");
        RewriteRuleTokenStream stream_SELECT=new RewriteRuleTokenStream(adaptor,"token SELECT");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_propertySelectionList=new RewriteRuleSubtreeStream(adaptor,"rule propertySelectionList");
        RewriteRuleSubtreeStream stream_eventProperty=new RewriteRuleSubtreeStream(adaptor,"rule eventProperty");
        try {
            // EsperEPL2Grammar.g:1159:2: ( LBRACK ( SELECT propertySelectionList FROM )? eventProperty ( AS IDENT )? ( WHERE expression )? RBRACK -> ^( EVENT_FILTER_PROPERTY_EXPR_ATOM ( propertySelectionList )? eventProperty ( IDENT )? ^( WHERE_EXPR ( expression )? ) ) )
            // EsperEPL2Grammar.g:1159:4: LBRACK ( SELECT propertySelectionList FROM )? eventProperty ( AS IDENT )? ( WHERE expression )? RBRACK
            {
            LBRACK460=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_propertyExpressionAtomic7383); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK460);

            // EsperEPL2Grammar.g:1159:11: ( SELECT propertySelectionList FROM )?
            int alt172=2;
            int LA172_0 = input.LA(1);

            if ( (LA172_0==SELECT) ) {
                alt172=1;
            }
            switch (alt172) {
                case 1 :
                    // EsperEPL2Grammar.g:1159:12: SELECT propertySelectionList FROM
                    {
                    SELECT461=(Token)match(input,SELECT,FOLLOW_SELECT_in_propertyExpressionAtomic7386); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SELECT.add(SELECT461);

                    pushFollow(FOLLOW_propertySelectionList_in_propertyExpressionAtomic7388);
                    propertySelectionList462=propertySelectionList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_propertySelectionList.add(propertySelectionList462.getTree());
                    FROM463=(Token)match(input,FROM,FOLLOW_FROM_in_propertyExpressionAtomic7390); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FROM.add(FROM463);


                    }
                    break;

            }

            pushFollow(FOLLOW_eventProperty_in_propertyExpressionAtomic7394);
            eventProperty464=eventProperty();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventProperty.add(eventProperty464.getTree());
            // EsperEPL2Grammar.g:1159:62: ( AS IDENT )?
            int alt173=2;
            int LA173_0 = input.LA(1);

            if ( (LA173_0==AS) ) {
                alt173=1;
            }
            switch (alt173) {
                case 1 :
                    // EsperEPL2Grammar.g:1159:63: AS IDENT
                    {
                    AS465=(Token)match(input,AS,FOLLOW_AS_in_propertyExpressionAtomic7397); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS465);

                    IDENT466=(Token)match(input,IDENT,FOLLOW_IDENT_in_propertyExpressionAtomic7399); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT466);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:1159:74: ( WHERE expression )?
            int alt174=2;
            int LA174_0 = input.LA(1);

            if ( (LA174_0==WHERE) ) {
                alt174=1;
            }
            switch (alt174) {
                case 1 :
                    // EsperEPL2Grammar.g:1159:75: WHERE expression
                    {
                    WHERE467=(Token)match(input,WHERE,FOLLOW_WHERE_in_propertyExpressionAtomic7404); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE467);

                    pushFollow(FOLLOW_expression_in_propertyExpressionAtomic7406);
                    expression468=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression468.getTree());

                    }
                    break;

            }

            RBRACK469=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_propertyExpressionAtomic7410); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK469);



            // AST REWRITE
            // elements: expression, propertySelectionList, eventProperty, IDENT
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1160:9: -> ^( EVENT_FILTER_PROPERTY_EXPR_ATOM ( propertySelectionList )? eventProperty ( IDENT )? ^( WHERE_EXPR ( expression )? ) )
            {
                // EsperEPL2Grammar.g:1160:12: ^( EVENT_FILTER_PROPERTY_EXPR_ATOM ( propertySelectionList )? eventProperty ( IDENT )? ^( WHERE_EXPR ( expression )? ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_FILTER_PROPERTY_EXPR_ATOM, "EVENT_FILTER_PROPERTY_EXPR_ATOM"), root_1);

                // EsperEPL2Grammar.g:1160:46: ( propertySelectionList )?
                if ( stream_propertySelectionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_propertySelectionList.nextTree());

                }
                stream_propertySelectionList.reset();
                adaptor.addChild(root_1, stream_eventProperty.nextTree());
                // EsperEPL2Grammar.g:1160:83: ( IDENT )?
                if ( stream_IDENT.hasNext() ) {
                    adaptor.addChild(root_1, stream_IDENT.nextNode());

                }
                stream_IDENT.reset();
                // EsperEPL2Grammar.g:1160:90: ^( WHERE_EXPR ( expression )? )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WHERE_EXPR, "WHERE_EXPR"), root_2);

                // EsperEPL2Grammar.g:1160:103: ( expression )?
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_2, stream_expression.nextTree());

                }
                stream_expression.reset();

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "propertyExpressionAtomic"

    public static class propertySelectionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "propertySelectionList"
    // EsperEPL2Grammar.g:1163:1: propertySelectionList : propertySelectionListElement ( COMMA propertySelectionListElement )* ;
    public final EsperEPL2GrammarParser.propertySelectionList_return propertySelectionList() throws RecognitionException {
        EsperEPL2GrammarParser.propertySelectionList_return retval = new EsperEPL2GrammarParser.propertySelectionList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA471=null;
        EsperEPL2GrammarParser.propertySelectionListElement_return propertySelectionListElement470 = null;

        EsperEPL2GrammarParser.propertySelectionListElement_return propertySelectionListElement472 = null;


        CommonTree COMMA471_tree=null;

        try {
            // EsperEPL2Grammar.g:1164:2: ( propertySelectionListElement ( COMMA propertySelectionListElement )* )
            // EsperEPL2Grammar.g:1164:4: propertySelectionListElement ( COMMA propertySelectionListElement )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_propertySelectionListElement_in_propertySelectionList7460);
            propertySelectionListElement470=propertySelectionListElement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, propertySelectionListElement470.getTree());
            // EsperEPL2Grammar.g:1164:33: ( COMMA propertySelectionListElement )*
            loop175:
            do {
                int alt175=2;
                int LA175_0 = input.LA(1);

                if ( (LA175_0==COMMA) ) {
                    alt175=1;
                }


                switch (alt175) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1164:34: COMMA propertySelectionListElement
            	    {
            	    COMMA471=(Token)match(input,COMMA,FOLLOW_COMMA_in_propertySelectionList7463); if (state.failed) return retval;
            	    pushFollow(FOLLOW_propertySelectionListElement_in_propertySelectionList7466);
            	    propertySelectionListElement472=propertySelectionListElement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, propertySelectionListElement472.getTree());

            	    }
            	    break;

            	default :
            	    break loop175;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "propertySelectionList"

    public static class propertySelectionListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "propertySelectionListElement"
    // EsperEPL2Grammar.g:1167:1: propertySelectionListElement : (s= STAR -> PROPERTY_WILDCARD_SELECT[$s] | ( propertyStreamSelector )=> propertyStreamSelector | expression ( AS i= keywordAllowedIdent )? -> {identifier != null}? ^( PROPERTY_SELECTION_ELEMENT_EXPR expression IDENT[identifier] ) -> ^( PROPERTY_SELECTION_ELEMENT_EXPR expression ) );
    public final EsperEPL2GrammarParser.propertySelectionListElement_return propertySelectionListElement() throws RecognitionException {
        EsperEPL2GrammarParser.propertySelectionListElement_return retval = new EsperEPL2GrammarParser.propertySelectionListElement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token s=null;
        Token AS475=null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i = null;

        EsperEPL2GrammarParser.propertyStreamSelector_return propertyStreamSelector473 = null;

        EsperEPL2GrammarParser.expression_return expression474 = null;


        CommonTree s_tree=null;
        CommonTree AS475_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_keywordAllowedIdent=new RewriteRuleSubtreeStream(adaptor,"rule keywordAllowedIdent");
         String identifier = null; 
        try {
            // EsperEPL2Grammar.g:1169:2: (s= STAR -> PROPERTY_WILDCARD_SELECT[$s] | ( propertyStreamSelector )=> propertyStreamSelector | expression ( AS i= keywordAllowedIdent )? -> {identifier != null}? ^( PROPERTY_SELECTION_ELEMENT_EXPR expression IDENT[identifier] ) -> ^( PROPERTY_SELECTION_ELEMENT_EXPR expression ) )
            int alt177=3;
            alt177 = dfa177.predict(input);
            switch (alt177) {
                case 1 :
                    // EsperEPL2Grammar.g:1169:7: s= STAR
                    {
                    s=(Token)match(input,STAR,FOLLOW_STAR_in_propertySelectionListElement7492); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STAR.add(s);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1169:14: -> PROPERTY_WILDCARD_SELECT[$s]
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(PROPERTY_WILDCARD_SELECT, s));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1170:4: ( propertyStreamSelector )=> propertyStreamSelector
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_propertyStreamSelector_in_propertySelectionListElement7508);
                    propertyStreamSelector473=propertyStreamSelector();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, propertyStreamSelector473.getTree());

                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1171:4: expression ( AS i= keywordAllowedIdent )?
                    {
                    pushFollow(FOLLOW_expression_in_propertySelectionListElement7513);
                    expression474=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression474.getTree());
                    // EsperEPL2Grammar.g:1171:15: ( AS i= keywordAllowedIdent )?
                    int alt176=2;
                    int LA176_0 = input.LA(1);

                    if ( (LA176_0==AS) ) {
                        alt176=1;
                    }
                    switch (alt176) {
                        case 1 :
                            // EsperEPL2Grammar.g:1171:16: AS i= keywordAllowedIdent
                            {
                            AS475=(Token)match(input,AS,FOLLOW_AS_in_propertySelectionListElement7516); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_AS.add(AS475);

                            pushFollow(FOLLOW_keywordAllowedIdent_in_propertySelectionListElement7520);
                            i=keywordAllowedIdent();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i.getTree());
                            if ( state.backtracking==0 ) {
                               identifier = i.getTree().toString(); 
                            }

                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: expression, expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1172:3: -> {identifier != null}? ^( PROPERTY_SELECTION_ELEMENT_EXPR expression IDENT[identifier] )
                    if (identifier != null) {
                        // EsperEPL2Grammar.g:1172:28: ^( PROPERTY_SELECTION_ELEMENT_EXPR expression IDENT[identifier] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PROPERTY_SELECTION_ELEMENT_EXPR, "PROPERTY_SELECTION_ELEMENT_EXPR"), root_1);

                        adaptor.addChild(root_1, stream_expression.nextTree());
                        adaptor.addChild(root_1, (CommonTree)adaptor.create(IDENT, identifier));

                        adaptor.addChild(root_0, root_1);
                        }

                    }
                    else // 1173:3: -> ^( PROPERTY_SELECTION_ELEMENT_EXPR expression )
                    {
                        // EsperEPL2Grammar.g:1173:6: ^( PROPERTY_SELECTION_ELEMENT_EXPR expression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PROPERTY_SELECTION_ELEMENT_EXPR, "PROPERTY_SELECTION_ELEMENT_EXPR"), root_1);

                        adaptor.addChild(root_1, stream_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "propertySelectionListElement"

    public static class propertyStreamSelector_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "propertyStreamSelector"
    // EsperEPL2Grammar.g:1176:1: propertyStreamSelector : s= IDENT DOT STAR ( AS i= IDENT )? -> ^( PROPERTY_SELECTION_STREAM $s ( $i)? ) ;
    public final EsperEPL2GrammarParser.propertyStreamSelector_return propertyStreamSelector() throws RecognitionException {
        EsperEPL2GrammarParser.propertyStreamSelector_return retval = new EsperEPL2GrammarParser.propertyStreamSelector_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token s=null;
        Token i=null;
        Token DOT476=null;
        Token STAR477=null;
        Token AS478=null;

        CommonTree s_tree=null;
        CommonTree i_tree=null;
        CommonTree DOT476_tree=null;
        CommonTree STAR477_tree=null;
        CommonTree AS478_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");

        try {
            // EsperEPL2Grammar.g:1177:2: (s= IDENT DOT STAR ( AS i= IDENT )? -> ^( PROPERTY_SELECTION_STREAM $s ( $i)? ) )
            // EsperEPL2Grammar.g:1177:4: s= IDENT DOT STAR ( AS i= IDENT )?
            {
            s=(Token)match(input,IDENT,FOLLOW_IDENT_in_propertyStreamSelector7564); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(s);

            DOT476=(Token)match(input,DOT,FOLLOW_DOT_in_propertyStreamSelector7566); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DOT.add(DOT476);

            STAR477=(Token)match(input,STAR,FOLLOW_STAR_in_propertyStreamSelector7568); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_STAR.add(STAR477);

            // EsperEPL2Grammar.g:1177:21: ( AS i= IDENT )?
            int alt178=2;
            int LA178_0 = input.LA(1);

            if ( (LA178_0==AS) ) {
                alt178=1;
            }
            switch (alt178) {
                case 1 :
                    // EsperEPL2Grammar.g:1177:22: AS i= IDENT
                    {
                    AS478=(Token)match(input,AS,FOLLOW_AS_in_propertyStreamSelector7571); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS478);

                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_propertyStreamSelector7575); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;

            }



            // AST REWRITE
            // elements: i, s
            // token labels: s, i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1178:3: -> ^( PROPERTY_SELECTION_STREAM $s ( $i)? )
            {
                // EsperEPL2Grammar.g:1178:6: ^( PROPERTY_SELECTION_STREAM $s ( $i)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PROPERTY_SELECTION_STREAM, "PROPERTY_SELECTION_STREAM"), root_1);

                adaptor.addChild(root_1, stream_s.nextNode());
                // EsperEPL2Grammar.g:1178:37: ( $i)?
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());

                }
                stream_i.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "propertyStreamSelector"

    public static class patternFilterExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "patternFilterExpression"
    // EsperEPL2Grammar.g:1181:1: patternFilterExpression : (i= IDENT EQUALS )? classIdentifier ( LPAREN ( expressionList )? RPAREN )? ( propertyExpression )? -> ^( PATTERN_FILTER_EXPR ( $i)? classIdentifier ( propertyExpression )? ( expressionList )? ) ;
    public final EsperEPL2GrammarParser.patternFilterExpression_return patternFilterExpression() throws RecognitionException {
        EsperEPL2GrammarParser.patternFilterExpression_return retval = new EsperEPL2GrammarParser.patternFilterExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token EQUALS479=null;
        Token LPAREN481=null;
        Token RPAREN483=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier480 = null;

        EsperEPL2GrammarParser.expressionList_return expressionList482 = null;

        EsperEPL2GrammarParser.propertyExpression_return propertyExpression484 = null;


        CommonTree i_tree=null;
        CommonTree EQUALS479_tree=null;
        CommonTree LPAREN481_tree=null;
        CommonTree RPAREN483_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_propertyExpression=new RewriteRuleSubtreeStream(adaptor,"rule propertyExpression");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
         paraphrases.push("filter specification"); 
        try {
            // EsperEPL2Grammar.g:1184:5: ( (i= IDENT EQUALS )? classIdentifier ( LPAREN ( expressionList )? RPAREN )? ( propertyExpression )? -> ^( PATTERN_FILTER_EXPR ( $i)? classIdentifier ( propertyExpression )? ( expressionList )? ) )
            // EsperEPL2Grammar.g:1184:9: (i= IDENT EQUALS )? classIdentifier ( LPAREN ( expressionList )? RPAREN )? ( propertyExpression )?
            {
            // EsperEPL2Grammar.g:1184:9: (i= IDENT EQUALS )?
            int alt179=2;
            int LA179_0 = input.LA(1);

            if ( (LA179_0==IDENT) ) {
                int LA179_1 = input.LA(2);

                if ( (LA179_1==EQUALS) ) {
                    alt179=1;
                }
            }
            switch (alt179) {
                case 1 :
                    // EsperEPL2Grammar.g:1184:10: i= IDENT EQUALS
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_patternFilterExpression7622); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);

                    EQUALS479=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_patternFilterExpression7624); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS479);


                    }
                    break;

            }

            pushFollow(FOLLOW_classIdentifier_in_patternFilterExpression7633);
            classIdentifier480=classIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier480.getTree());
            // EsperEPL2Grammar.g:1186:9: ( LPAREN ( expressionList )? RPAREN )?
            int alt181=2;
            int LA181_0 = input.LA(1);

            if ( (LA181_0==LPAREN) ) {
                alt181=1;
            }
            switch (alt181) {
                case 1 :
                    // EsperEPL2Grammar.g:1186:10: LPAREN ( expressionList )? RPAREN
                    {
                    LPAREN481=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_patternFilterExpression7644); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN481);

                    // EsperEPL2Grammar.g:1186:17: ( expressionList )?
                    int alt180=2;
                    int LA180_0 = input.LA(1);

                    if ( (LA180_0==WINDOW||LA180_0==ESCAPE||(LA180_0>=NOT_EXPR && LA180_0<=EVERY_EXPR)||(LA180_0>=SUM && LA180_0<=COUNT)||LA180_0==CASE||LA180_0==OUTER||(LA180_0>=JOIN && LA180_0<=FULL)||(LA180_0>=EVENTS && LA180_0<=LAST)||(LA180_0>=UNIDIRECTIONAL && LA180_0<=CURRENT_TIMESTAMP)||LA180_0==SNAPSHOT||(LA180_0>=VARIABLE && LA180_0<=AT)||(LA180_0>=BOOLEAN_TRUE && LA180_0<=VALUE_NULL)||LA180_0==NUM_DOUBLE||LA180_0==IDENT||LA180_0==LPAREN||(LA180_0>=STRING_LITERAL && LA180_0<=QUOTED_STRING_LITERAL)||(LA180_0>=PLUS && LA180_0<=MINUS)||LA180_0==LCURLY||LA180_0==NUM_INT||LA180_0==QUESTION||(LA180_0>=TICKED_STRING_LITERAL && LA180_0<=NUM_FLOAT)) ) {
                        alt180=1;
                    }
                    switch (alt180) {
                        case 1 :
                            // EsperEPL2Grammar.g:1186:17: expressionList
                            {
                            pushFollow(FOLLOW_expressionList_in_patternFilterExpression7646);
                            expressionList482=expressionList();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList482.getTree());

                            }
                            break;

                    }

                    RPAREN483=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_patternFilterExpression7649); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN483);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:1187:9: ( propertyExpression )?
            int alt182=2;
            int LA182_0 = input.LA(1);

            if ( (LA182_0==LBRACK) ) {
                alt182=1;
            }
            switch (alt182) {
                case 1 :
                    // EsperEPL2Grammar.g:1187:9: propertyExpression
                    {
                    pushFollow(FOLLOW_propertyExpression_in_patternFilterExpression7661);
                    propertyExpression484=propertyExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_propertyExpression.add(propertyExpression484.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: expressionList, i, propertyExpression, classIdentifier
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1188:9: -> ^( PATTERN_FILTER_EXPR ( $i)? classIdentifier ( propertyExpression )? ( expressionList )? )
            {
                // EsperEPL2Grammar.g:1188:12: ^( PATTERN_FILTER_EXPR ( $i)? classIdentifier ( propertyExpression )? ( expressionList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATTERN_FILTER_EXPR, "PATTERN_FILTER_EXPR"), root_1);

                // EsperEPL2Grammar.g:1188:34: ( $i)?
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());

                }
                stream_i.reset();
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                // EsperEPL2Grammar.g:1188:54: ( propertyExpression )?
                if ( stream_propertyExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_propertyExpression.nextTree());

                }
                stream_propertyExpression.reset();
                // EsperEPL2Grammar.g:1188:74: ( expressionList )?
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());

                }
                stream_expressionList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "patternFilterExpression"

    public static class classIdentifier_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "classIdentifier"
    // EsperEPL2Grammar.g:1191:1: classIdentifier : i1= escapableIdent ( DOT i2= escapableIdent )* -> ^( CLASS_IDENT[identifier] ) ;
    public final EsperEPL2GrammarParser.classIdentifier_return classIdentifier() throws RecognitionException {
        EsperEPL2GrammarParser.classIdentifier_return retval = new EsperEPL2GrammarParser.classIdentifier_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token DOT485=null;
        EsperEPL2GrammarParser.escapableIdent_return i1 = null;

        EsperEPL2GrammarParser.escapableIdent_return i2 = null;


        CommonTree DOT485_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_escapableIdent=new RewriteRuleSubtreeStream(adaptor,"rule escapableIdent");
         String identifier = ""; 
        try {
            // EsperEPL2Grammar.g:1193:2: (i1= escapableIdent ( DOT i2= escapableIdent )* -> ^( CLASS_IDENT[identifier] ) )
            // EsperEPL2Grammar.g:1193:4: i1= escapableIdent ( DOT i2= escapableIdent )*
            {
            pushFollow(FOLLOW_escapableIdent_in_classIdentifier7711);
            i1=escapableIdent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_escapableIdent.add(i1.getTree());
            if ( state.backtracking==0 ) {
               identifier = (i1!=null?i1.result:null); 
            }
            // EsperEPL2Grammar.g:1194:6: ( DOT i2= escapableIdent )*
            loop183:
            do {
                int alt183=2;
                int LA183_0 = input.LA(1);

                if ( (LA183_0==DOT) ) {
                    int LA183_16 = input.LA(2);

                    if ( (LA183_16==IDENT) ) {
                        int LA183_39 = input.LA(3);

                        if ( (LA183_39==EOF||LA183_39==CREATE||(LA183_39>=OR_EXPR && LA183_39<=AS)||LA183_39==SELECT||(LA183_39>=INNER && LA183_39<=ON)||(LA183_39>=GROUP && LA183_39<=HAVING)||LA183_39==OUTPUT||LA183_39==INSERT||LA183_39==ORDER||(LA183_39>=UNIDIRECTIONAL && LA183_39<=RETAININTERSECTION)||LA183_39==DELETE||LA183_39==SET||LA183_39==UNTIL||LA183_39==ROW_LIMIT_EXPR||(LA183_39>=COMMA && LA183_39<=IDENT)||(LA183_39>=DOT && LA183_39<=RPAREN)||(LA183_39>=LBRACK && LA183_39<=RBRACK)||LA183_39==RCURLY||LA183_39==FOLLOWED_BY||LA183_39==TICKED_STRING_LITERAL||LA183_39==EMAILAT) ) {
                            alt183=1;
                        }


                    }
                    else if ( (LA183_16==TICKED_STRING_LITERAL) ) {
                        alt183=1;
                    }


                }


                switch (alt183) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1195:8: DOT i2= escapableIdent
            	    {
            	    DOT485=(Token)match(input,DOT,FOLLOW_DOT_in_classIdentifier7730); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT485);

            	    pushFollow(FOLLOW_escapableIdent_in_classIdentifier7734);
            	    i2=escapableIdent();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_escapableIdent.add(i2.getTree());
            	    if ( state.backtracking==0 ) {
            	       identifier += "." + (i2!=null?i2.result:null); 
            	    }

            	    }
            	    break;

            	default :
            	    break loop183;
                }
            } while (true);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1197:6: -> ^( CLASS_IDENT[identifier] )
            {
                // EsperEPL2Grammar.g:1197:9: ^( CLASS_IDENT[identifier] )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CLASS_IDENT, identifier), root_1);

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "classIdentifier"

    public static class classIdentifierNonGreedy_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "classIdentifierNonGreedy"
    // EsperEPL2Grammar.g:1200:1: classIdentifierNonGreedy : i1= escapableIdent ( options {greedy=false; } : DOT i2= escapableIdent )* -> ^( CLASS_IDENT[identifier] ) ;
    public final EsperEPL2GrammarParser.classIdentifierNonGreedy_return classIdentifierNonGreedy() throws RecognitionException {
        EsperEPL2GrammarParser.classIdentifierNonGreedy_return retval = new EsperEPL2GrammarParser.classIdentifierNonGreedy_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token DOT486=null;
        EsperEPL2GrammarParser.escapableIdent_return i1 = null;

        EsperEPL2GrammarParser.escapableIdent_return i2 = null;


        CommonTree DOT486_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_escapableIdent=new RewriteRuleSubtreeStream(adaptor,"rule escapableIdent");
         String identifier = ""; 
        try {
            // EsperEPL2Grammar.g:1202:2: (i1= escapableIdent ( options {greedy=false; } : DOT i2= escapableIdent )* -> ^( CLASS_IDENT[identifier] ) )
            // EsperEPL2Grammar.g:1202:4: i1= escapableIdent ( options {greedy=false; } : DOT i2= escapableIdent )*
            {
            pushFollow(FOLLOW_escapableIdent_in_classIdentifierNonGreedy7779);
            i1=escapableIdent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_escapableIdent.add(i1.getTree());
            if ( state.backtracking==0 ) {
               identifier = (i1!=null?i1.result:null); 
            }
            // EsperEPL2Grammar.g:1203:6: ( options {greedy=false; } : DOT i2= escapableIdent )*
            loop184:
            do {
                int alt184=2;
                int LA184_0 = input.LA(1);

                if ( (LA184_0==DOT) ) {
                    switch ( input.LA(2) ) {
                    case IDENT:
                        {
                        int LA184_2 = input.LA(3);

                        if ( (LA184_2==LPAREN) ) {
                            alt184=2;
                        }
                        else if ( (LA184_2==DOT) ) {
                            alt184=1;
                        }


                        }
                        break;
                    case TICKED_STRING_LITERAL:
                        {
                        alt184=1;
                        }
                        break;
                    case MAX:
                    case MIN:
                        {
                        alt184=2;
                        }
                        break;

                    }

                }


                switch (alt184) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1205:8: DOT i2= escapableIdent
            	    {
            	    DOT486=(Token)match(input,DOT,FOLLOW_DOT_in_classIdentifierNonGreedy7814); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT486);

            	    pushFollow(FOLLOW_escapableIdent_in_classIdentifierNonGreedy7818);
            	    i2=escapableIdent();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_escapableIdent.add(i2.getTree());
            	    if ( state.backtracking==0 ) {
            	       identifier += "." + (i2!=null?i2.result:null); 
            	    }

            	    }
            	    break;

            	default :
            	    break loop184;
                }
            } while (true);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1207:6: -> ^( CLASS_IDENT[identifier] )
            {
                // EsperEPL2Grammar.g:1207:9: ^( CLASS_IDENT[identifier] )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CLASS_IDENT, identifier), root_1);

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "classIdentifierNonGreedy"

    public static class expressionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expressionList"
    // EsperEPL2Grammar.g:1210:1: expressionList : expression ( COMMA expression )* ;
    public final EsperEPL2GrammarParser.expressionList_return expressionList() throws RecognitionException {
        EsperEPL2GrammarParser.expressionList_return retval = new EsperEPL2GrammarParser.expressionList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA488=null;
        EsperEPL2GrammarParser.expression_return expression487 = null;

        EsperEPL2GrammarParser.expression_return expression489 = null;


        CommonTree COMMA488_tree=null;

        try {
            // EsperEPL2Grammar.g:1211:6: ( expression ( COMMA expression )* )
            // EsperEPL2Grammar.g:1211:11: expression ( COMMA expression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_expression_in_expressionList7860);
            expression487=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression487.getTree());
            // EsperEPL2Grammar.g:1211:22: ( COMMA expression )*
            loop185:
            do {
                int alt185=2;
                int LA185_0 = input.LA(1);

                if ( (LA185_0==COMMA) ) {
                    alt185=1;
                }


                switch (alt185) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1211:23: COMMA expression
            	    {
            	    COMMA488=(Token)match(input,COMMA,FOLLOW_COMMA_in_expressionList7863); if (state.failed) return retval;
            	    pushFollow(FOLLOW_expression_in_expressionList7866);
            	    expression489=expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression489.getTree());

            	    }
            	    break;

            	default :
            	    break loop185;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "expressionList"

    public static class expressionWithTimeList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expressionWithTimeList"
    // EsperEPL2Grammar.g:1214:1: expressionWithTimeList : expressionWithTime ( COMMA expressionWithTime )* ;
    public final EsperEPL2GrammarParser.expressionWithTimeList_return expressionWithTimeList() throws RecognitionException {
        EsperEPL2GrammarParser.expressionWithTimeList_return retval = new EsperEPL2GrammarParser.expressionWithTimeList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA491=null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime490 = null;

        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime492 = null;


        CommonTree COMMA491_tree=null;

        try {
            // EsperEPL2Grammar.g:1215:6: ( expressionWithTime ( COMMA expressionWithTime )* )
            // EsperEPL2Grammar.g:1215:11: expressionWithTime ( COMMA expressionWithTime )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_expressionWithTime_in_expressionWithTimeList7894);
            expressionWithTime490=expressionWithTime();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionWithTime490.getTree());
            // EsperEPL2Grammar.g:1215:30: ( COMMA expressionWithTime )*
            loop186:
            do {
                int alt186=2;
                int LA186_0 = input.LA(1);

                if ( (LA186_0==COMMA) ) {
                    alt186=1;
                }


                switch (alt186) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1215:31: COMMA expressionWithTime
            	    {
            	    COMMA491=(Token)match(input,COMMA,FOLLOW_COMMA_in_expressionWithTimeList7897); if (state.failed) return retval;
            	    pushFollow(FOLLOW_expressionWithTime_in_expressionWithTimeList7900);
            	    expressionWithTime492=expressionWithTime();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionWithTime492.getTree());

            	    }
            	    break;

            	default :
            	    break loop186;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "expressionWithTimeList"

    public static class expressionWithTime_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expressionWithTime"
    // EsperEPL2Grammar.g:1218:1: expressionWithTime : ( ( lastOperand )=> lastOperand | ( lastWeekdayOperand )=> lastWeekdayOperand | ( timePeriod )=> timePeriod | ( expressionQualifyable )=> expressionQualifyable | ( rangeOperand )=> rangeOperand | ( frequencyOperand )=> frequencyOperand | ( lastOperator )=> lastOperator | ( weekDayOperator )=> weekDayOperator | ( numericParameterList )=> numericParameterList | numberSetStar );
    public final EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime() throws RecognitionException {
        EsperEPL2GrammarParser.expressionWithTime_return retval = new EsperEPL2GrammarParser.expressionWithTime_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.lastOperand_return lastOperand493 = null;

        EsperEPL2GrammarParser.lastWeekdayOperand_return lastWeekdayOperand494 = null;

        EsperEPL2GrammarParser.timePeriod_return timePeriod495 = null;

        EsperEPL2GrammarParser.expressionQualifyable_return expressionQualifyable496 = null;

        EsperEPL2GrammarParser.rangeOperand_return rangeOperand497 = null;

        EsperEPL2GrammarParser.frequencyOperand_return frequencyOperand498 = null;

        EsperEPL2GrammarParser.lastOperator_return lastOperator499 = null;

        EsperEPL2GrammarParser.weekDayOperator_return weekDayOperator500 = null;

        EsperEPL2GrammarParser.numericParameterList_return numericParameterList501 = null;

        EsperEPL2GrammarParser.numberSetStar_return numberSetStar502 = null;



        try {
            // EsperEPL2Grammar.g:1219:2: ( ( lastOperand )=> lastOperand | ( lastWeekdayOperand )=> lastWeekdayOperand | ( timePeriod )=> timePeriod | ( expressionQualifyable )=> expressionQualifyable | ( rangeOperand )=> rangeOperand | ( frequencyOperand )=> frequencyOperand | ( lastOperator )=> lastOperator | ( weekDayOperator )=> weekDayOperator | ( numericParameterList )=> numericParameterList | numberSetStar )
            int alt187=10;
            alt187 = dfa187.predict(input);
            switch (alt187) {
                case 1 :
                    // EsperEPL2Grammar.g:1219:7: ( lastOperand )=> lastOperand
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_lastOperand_in_expressionWithTime7926);
                    lastOperand493=lastOperand();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lastOperand493.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1220:4: ( lastWeekdayOperand )=> lastWeekdayOperand
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_lastWeekdayOperand_in_expressionWithTime7937);
                    lastWeekdayOperand494=lastWeekdayOperand();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lastWeekdayOperand494.getTree());

                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1221:4: ( timePeriod )=> timePeriod
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_timePeriod_in_expressionWithTime7948);
                    timePeriod495=timePeriod();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, timePeriod495.getTree());

                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:1222:4: ( expressionQualifyable )=> expressionQualifyable
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_expressionQualifyable_in_expressionWithTime7959);
                    expressionQualifyable496=expressionQualifyable();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionQualifyable496.getTree());

                    }
                    break;
                case 5 :
                    // EsperEPL2Grammar.g:1223:4: ( rangeOperand )=> rangeOperand
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_rangeOperand_in_expressionWithTime7970);
                    rangeOperand497=rangeOperand();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rangeOperand497.getTree());

                    }
                    break;
                case 6 :
                    // EsperEPL2Grammar.g:1224:5: ( frequencyOperand )=> frequencyOperand
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_frequencyOperand_in_expressionWithTime7982);
                    frequencyOperand498=frequencyOperand();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, frequencyOperand498.getTree());

                    }
                    break;
                case 7 :
                    // EsperEPL2Grammar.g:1225:4: ( lastOperator )=> lastOperator
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_lastOperator_in_expressionWithTime7993);
                    lastOperator499=lastOperator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lastOperator499.getTree());

                    }
                    break;
                case 8 :
                    // EsperEPL2Grammar.g:1226:4: ( weekDayOperator )=> weekDayOperator
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_weekDayOperator_in_expressionWithTime8005);
                    weekDayOperator500=weekDayOperator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, weekDayOperator500.getTree());

                    }
                    break;
                case 9 :
                    // EsperEPL2Grammar.g:1227:5: ( numericParameterList )=> numericParameterList
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_numericParameterList_in_expressionWithTime8017);
                    numericParameterList501=numericParameterList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numericParameterList501.getTree());

                    }
                    break;
                case 10 :
                    // EsperEPL2Grammar.g:1228:4: numberSetStar
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_numberSetStar_in_expressionWithTime8022);
                    numberSetStar502=numberSetStar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numberSetStar502.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "expressionWithTime"

    public static class expressionQualifyable_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expressionQualifyable"
    // EsperEPL2Grammar.g:1231:1: expressionQualifyable : expression (a= ASC | d= DESC | s= TIMEPERIOD_SECONDS | s= TIMEPERIOD_SECOND | s= TIMEPERIOD_SEC )? -> {d != null || a != null}? ^( OBJECT_PARAM_ORDERED_EXPR expression ( $a)? ( $d)? ) -> {s != null}? ^( TIME_PERIOD ^( SECOND_PART expression ) ) -> expression ;
    public final EsperEPL2GrammarParser.expressionQualifyable_return expressionQualifyable() throws RecognitionException {
        EsperEPL2GrammarParser.expressionQualifyable_return retval = new EsperEPL2GrammarParser.expressionQualifyable_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token a=null;
        Token d=null;
        Token s=null;
        EsperEPL2GrammarParser.expression_return expression503 = null;


        CommonTree a_tree=null;
        CommonTree d_tree=null;
        CommonTree s_tree=null;
        RewriteRuleTokenStream stream_TIMEPERIOD_SEC=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SEC");
        RewriteRuleTokenStream stream_TIMEPERIOD_SECOND=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SECOND");
        RewriteRuleTokenStream stream_ASC=new RewriteRuleTokenStream(adaptor,"token ASC");
        RewriteRuleTokenStream stream_DESC=new RewriteRuleTokenStream(adaptor,"token DESC");
        RewriteRuleTokenStream stream_TIMEPERIOD_SECONDS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SECONDS");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            // EsperEPL2Grammar.g:1232:2: ( expression (a= ASC | d= DESC | s= TIMEPERIOD_SECONDS | s= TIMEPERIOD_SECOND | s= TIMEPERIOD_SEC )? -> {d != null || a != null}? ^( OBJECT_PARAM_ORDERED_EXPR expression ( $a)? ( $d)? ) -> {s != null}? ^( TIME_PERIOD ^( SECOND_PART expression ) ) -> expression )
            // EsperEPL2Grammar.g:1232:4: expression (a= ASC | d= DESC | s= TIMEPERIOD_SECONDS | s= TIMEPERIOD_SECOND | s= TIMEPERIOD_SEC )?
            {
            pushFollow(FOLLOW_expression_in_expressionQualifyable8033);
            expression503=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression503.getTree());
            // EsperEPL2Grammar.g:1232:15: (a= ASC | d= DESC | s= TIMEPERIOD_SECONDS | s= TIMEPERIOD_SECOND | s= TIMEPERIOD_SEC )?
            int alt188=6;
            switch ( input.LA(1) ) {
                case ASC:
                    {
                    alt188=1;
                    }
                    break;
                case DESC:
                    {
                    alt188=2;
                    }
                    break;
                case TIMEPERIOD_SECONDS:
                    {
                    alt188=3;
                    }
                    break;
                case TIMEPERIOD_SECOND:
                    {
                    alt188=4;
                    }
                    break;
                case TIMEPERIOD_SEC:
                    {
                    alt188=5;
                    }
                    break;
            }

            switch (alt188) {
                case 1 :
                    // EsperEPL2Grammar.g:1232:16: a= ASC
                    {
                    a=(Token)match(input,ASC,FOLLOW_ASC_in_expressionQualifyable8038); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASC.add(a);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1232:22: d= DESC
                    {
                    d=(Token)match(input,DESC,FOLLOW_DESC_in_expressionQualifyable8042); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DESC.add(d);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1232:29: s= TIMEPERIOD_SECONDS
                    {
                    s=(Token)match(input,TIMEPERIOD_SECONDS,FOLLOW_TIMEPERIOD_SECONDS_in_expressionQualifyable8046); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SECONDS.add(s);


                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:1232:50: s= TIMEPERIOD_SECOND
                    {
                    s=(Token)match(input,TIMEPERIOD_SECOND,FOLLOW_TIMEPERIOD_SECOND_in_expressionQualifyable8050); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SECOND.add(s);


                    }
                    break;
                case 5 :
                    // EsperEPL2Grammar.g:1232:70: s= TIMEPERIOD_SEC
                    {
                    s=(Token)match(input,TIMEPERIOD_SEC,FOLLOW_TIMEPERIOD_SEC_in_expressionQualifyable8054); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SEC.add(s);


                    }
                    break;

            }



            // AST REWRITE
            // elements: expression, d, a, expression, expression
            // token labels: d, a
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_d=new RewriteRuleTokenStream(adaptor,"token d",d);
            RewriteRuleTokenStream stream_a=new RewriteRuleTokenStream(adaptor,"token a",a);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1233:3: -> {d != null || a != null}? ^( OBJECT_PARAM_ORDERED_EXPR expression ( $a)? ( $d)? )
            if (d != null || a != null) {
                // EsperEPL2Grammar.g:1233:32: ^( OBJECT_PARAM_ORDERED_EXPR expression ( $a)? ( $d)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(OBJECT_PARAM_ORDERED_EXPR, "OBJECT_PARAM_ORDERED_EXPR"), root_1);

                adaptor.addChild(root_1, stream_expression.nextTree());
                // EsperEPL2Grammar.g:1233:71: ( $a)?
                if ( stream_a.hasNext() ) {
                    adaptor.addChild(root_1, stream_a.nextNode());

                }
                stream_a.reset();
                // EsperEPL2Grammar.g:1233:75: ( $d)?
                if ( stream_d.hasNext() ) {
                    adaptor.addChild(root_1, stream_d.nextNode());

                }
                stream_d.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1234:3: -> {s != null}? ^( TIME_PERIOD ^( SECOND_PART expression ) )
            if (s != null) {
                // EsperEPL2Grammar.g:1234:19: ^( TIME_PERIOD ^( SECOND_PART expression ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TIME_PERIOD, "TIME_PERIOD"), root_1);

                // EsperEPL2Grammar.g:1234:33: ^( SECOND_PART expression )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SECOND_PART, "SECOND_PART"), root_2);

                adaptor.addChild(root_2, stream_expression.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1235:3: -> expression
            {
                adaptor.addChild(root_0, stream_expression.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "expressionQualifyable"

    public static class numberSetStar_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "numberSetStar"
    // EsperEPL2Grammar.g:1239:1: numberSetStar : STAR -> ^( NUMBERSETSTAR ) ;
    public final EsperEPL2GrammarParser.numberSetStar_return numberSetStar() throws RecognitionException {
        EsperEPL2GrammarParser.numberSetStar_return retval = new EsperEPL2GrammarParser.numberSetStar_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token STAR504=null;

        CommonTree STAR504_tree=null;
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");

        try {
            // EsperEPL2Grammar.g:1240:2: ( STAR -> ^( NUMBERSETSTAR ) )
            // EsperEPL2Grammar.g:1240:4: STAR
            {
            STAR504=(Token)match(input,STAR,FOLLOW_STAR_in_numberSetStar8111); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_STAR.add(STAR504);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1241:3: -> ^( NUMBERSETSTAR )
            {
                // EsperEPL2Grammar.g:1241:6: ^( NUMBERSETSTAR )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMBERSETSTAR, "NUMBERSETSTAR"), root_1);

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "numberSetStar"

    public static class lastWeekdayOperand_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lastWeekdayOperand"
    // EsperEPL2Grammar.g:1244:1: lastWeekdayOperand : LW ;
    public final EsperEPL2GrammarParser.lastWeekdayOperand_return lastWeekdayOperand() throws RecognitionException {
        EsperEPL2GrammarParser.lastWeekdayOperand_return retval = new EsperEPL2GrammarParser.lastWeekdayOperand_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LW505=null;

        CommonTree LW505_tree=null;

        try {
            // EsperEPL2Grammar.g:1245:2: ( LW )
            // EsperEPL2Grammar.g:1245:4: LW
            {
            root_0 = (CommonTree)adaptor.nil();

            LW505=(Token)match(input,LW,FOLLOW_LW_in_lastWeekdayOperand8131); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LW505_tree = (CommonTree)adaptor.create(LW505);
            root_0 = (CommonTree)adaptor.becomeRoot(LW505_tree, root_0);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lastWeekdayOperand"

    public static class lastOperand_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lastOperand"
    // EsperEPL2Grammar.g:1248:1: lastOperand : LAST ;
    public final EsperEPL2GrammarParser.lastOperand_return lastOperand() throws RecognitionException {
        EsperEPL2GrammarParser.lastOperand_return retval = new EsperEPL2GrammarParser.lastOperand_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LAST506=null;

        CommonTree LAST506_tree=null;

        try {
            // EsperEPL2Grammar.g:1249:2: ( LAST )
            // EsperEPL2Grammar.g:1249:4: LAST
            {
            root_0 = (CommonTree)adaptor.nil();

            LAST506=(Token)match(input,LAST,FOLLOW_LAST_in_lastOperand8144); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LAST506_tree = (CommonTree)adaptor.create(LAST506);
            root_0 = (CommonTree)adaptor.becomeRoot(LAST506_tree, root_0);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lastOperand"

    public static class frequencyOperand_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "frequencyOperand"
    // EsperEPL2Grammar.g:1252:1: frequencyOperand : STAR DIV ( number | i= IDENT | substitution ) -> {i!= null}? ^( NUMERIC_PARAM_FREQUENCY ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( NUMERIC_PARAM_FREQUENCY ( number )? ( substitution )? ) ;
    public final EsperEPL2GrammarParser.frequencyOperand_return frequencyOperand() throws RecognitionException {
        EsperEPL2GrammarParser.frequencyOperand_return retval = new EsperEPL2GrammarParser.frequencyOperand_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token STAR507=null;
        Token DIV508=null;
        EsperEPL2GrammarParser.number_return number509 = null;

        EsperEPL2GrammarParser.substitution_return substitution510 = null;


        CommonTree i_tree=null;
        CommonTree STAR507_tree=null;
        CommonTree DIV508_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_DIV=new RewriteRuleTokenStream(adaptor,"token DIV");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            // EsperEPL2Grammar.g:1253:2: ( STAR DIV ( number | i= IDENT | substitution ) -> {i!= null}? ^( NUMERIC_PARAM_FREQUENCY ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( NUMERIC_PARAM_FREQUENCY ( number )? ( substitution )? ) )
            // EsperEPL2Grammar.g:1253:4: STAR DIV ( number | i= IDENT | substitution )
            {
            STAR507=(Token)match(input,STAR,FOLLOW_STAR_in_frequencyOperand8156); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_STAR.add(STAR507);

            DIV508=(Token)match(input,DIV,FOLLOW_DIV_in_frequencyOperand8158); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DIV.add(DIV508);

            // EsperEPL2Grammar.g:1253:13: ( number | i= IDENT | substitution )
            int alt189=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt189=1;
                }
                break;
            case IDENT:
                {
                alt189=2;
                }
                break;
            case QUESTION:
                {
                alt189=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 189, 0, input);

                throw nvae;
            }

            switch (alt189) {
                case 1 :
                    // EsperEPL2Grammar.g:1253:14: number
                    {
                    pushFollow(FOLLOW_number_in_frequencyOperand8161);
                    number509=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number509.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1253:21: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_frequencyOperand8165); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1253:29: substitution
                    {
                    pushFollow(FOLLOW_substitution_in_frequencyOperand8167);
                    substitution510=substitution();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution510.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: substitution, number, i
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1254:3: -> {i!= null}? ^( NUMERIC_PARAM_FREQUENCY ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
            if (i!= null) {
                // EsperEPL2Grammar.g:1254:18: ^( NUMERIC_PARAM_FREQUENCY ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_FREQUENCY, "NUMERIC_PARAM_FREQUENCY"), root_1);

                // EsperEPL2Grammar.g:1254:44: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1254:62: ^( EVENT_PROP_SIMPLE $i)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1255:3: -> ^( NUMERIC_PARAM_FREQUENCY ( number )? ( substitution )? )
            {
                // EsperEPL2Grammar.g:1255:6: ^( NUMERIC_PARAM_FREQUENCY ( number )? ( substitution )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_FREQUENCY, "NUMERIC_PARAM_FREQUENCY"), root_1);

                // EsperEPL2Grammar.g:1255:32: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:1255:40: ( substitution )?
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());

                }
                stream_substitution.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "frequencyOperand"

    public static class rangeOperand_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rangeOperand"
    // EsperEPL2Grammar.g:1258:1: rangeOperand : ( number | i1= IDENT | substitution ) COLON ( number | i2= IDENT | substitution ) -> {i1 != null && i2 != null}? ^( NUMERIC_PARAM_RANGE ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i1) ) ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i2) ) ) -> {i1 != null && i2 == null}? ^( NUMERIC_PARAM_RANGE ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i1) ) ( number )? ( substitution )? ) -> {i1 == null && i2 != null}? ^( NUMERIC_PARAM_RANGE ( number )? ( substitution )? ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i2) ) ) -> ^( NUMERIC_PARAM_RANGE ( number )* ( substitution )* ) ;
    public final EsperEPL2GrammarParser.rangeOperand_return rangeOperand() throws RecognitionException {
        EsperEPL2GrammarParser.rangeOperand_return retval = new EsperEPL2GrammarParser.rangeOperand_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i1=null;
        Token i2=null;
        Token COLON513=null;
        EsperEPL2GrammarParser.number_return number511 = null;

        EsperEPL2GrammarParser.substitution_return substitution512 = null;

        EsperEPL2GrammarParser.number_return number514 = null;

        EsperEPL2GrammarParser.substitution_return substitution515 = null;


        CommonTree i1_tree=null;
        CommonTree i2_tree=null;
        CommonTree COLON513_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            // EsperEPL2Grammar.g:1259:2: ( ( number | i1= IDENT | substitution ) COLON ( number | i2= IDENT | substitution ) -> {i1 != null && i2 != null}? ^( NUMERIC_PARAM_RANGE ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i1) ) ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i2) ) ) -> {i1 != null && i2 == null}? ^( NUMERIC_PARAM_RANGE ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i1) ) ( number )? ( substitution )? ) -> {i1 == null && i2 != null}? ^( NUMERIC_PARAM_RANGE ( number )? ( substitution )? ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i2) ) ) -> ^( NUMERIC_PARAM_RANGE ( number )* ( substitution )* ) )
            // EsperEPL2Grammar.g:1259:4: ( number | i1= IDENT | substitution ) COLON ( number | i2= IDENT | substitution )
            {
            // EsperEPL2Grammar.g:1259:4: ( number | i1= IDENT | substitution )
            int alt190=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt190=1;
                }
                break;
            case IDENT:
                {
                alt190=2;
                }
                break;
            case QUESTION:
                {
                alt190=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 190, 0, input);

                throw nvae;
            }

            switch (alt190) {
                case 1 :
                    // EsperEPL2Grammar.g:1259:5: number
                    {
                    pushFollow(FOLLOW_number_in_rangeOperand8216);
                    number511=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number511.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1259:12: i1= IDENT
                    {
                    i1=(Token)match(input,IDENT,FOLLOW_IDENT_in_rangeOperand8220); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i1);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1259:21: substitution
                    {
                    pushFollow(FOLLOW_substitution_in_rangeOperand8222);
                    substitution512=substitution();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution512.getTree());

                    }
                    break;

            }

            COLON513=(Token)match(input,COLON,FOLLOW_COLON_in_rangeOperand8225); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON513);

            // EsperEPL2Grammar.g:1259:41: ( number | i2= IDENT | substitution )
            int alt191=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt191=1;
                }
                break;
            case IDENT:
                {
                alt191=2;
                }
                break;
            case QUESTION:
                {
                alt191=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 191, 0, input);

                throw nvae;
            }

            switch (alt191) {
                case 1 :
                    // EsperEPL2Grammar.g:1259:42: number
                    {
                    pushFollow(FOLLOW_number_in_rangeOperand8228);
                    number514=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number514.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1259:49: i2= IDENT
                    {
                    i2=(Token)match(input,IDENT,FOLLOW_IDENT_in_rangeOperand8232); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i2);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1259:58: substitution
                    {
                    pushFollow(FOLLOW_substitution_in_rangeOperand8234);
                    substitution515=substitution();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution515.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: substitution, number, i2, i1, substitution, i2, number, number, i1, substitution
            // token labels: i2, i1
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i2=new RewriteRuleTokenStream(adaptor,"token i2",i2);
            RewriteRuleTokenStream stream_i1=new RewriteRuleTokenStream(adaptor,"token i1",i1);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1260:3: -> {i1 != null && i2 != null}? ^( NUMERIC_PARAM_RANGE ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i1) ) ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i2) ) )
            if (i1 != null && i2 != null) {
                // EsperEPL2Grammar.g:1260:34: ^( NUMERIC_PARAM_RANGE ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i1) ) ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i2) ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_RANGE, "NUMERIC_PARAM_RANGE"), root_1);

                // EsperEPL2Grammar.g:1260:56: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i1) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1260:74: ^( EVENT_PROP_SIMPLE $i1)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i1.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }
                // EsperEPL2Grammar.g:1260:100: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i2) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1260:118: ^( EVENT_PROP_SIMPLE $i2)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i2.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1261:3: -> {i1 != null && i2 == null}? ^( NUMERIC_PARAM_RANGE ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i1) ) ( number )? ( substitution )? )
            if (i1 != null && i2 == null) {
                // EsperEPL2Grammar.g:1261:34: ^( NUMERIC_PARAM_RANGE ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i1) ) ( number )? ( substitution )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_RANGE, "NUMERIC_PARAM_RANGE"), root_1);

                // EsperEPL2Grammar.g:1261:56: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i1) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1261:74: ^( EVENT_PROP_SIMPLE $i1)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i1.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }
                // EsperEPL2Grammar.g:1261:100: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:1261:108: ( substitution )?
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());

                }
                stream_substitution.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1262:3: -> {i1 == null && i2 != null}? ^( NUMERIC_PARAM_RANGE ( number )? ( substitution )? ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i2) ) )
            if (i1 == null && i2 != null) {
                // EsperEPL2Grammar.g:1262:34: ^( NUMERIC_PARAM_RANGE ( number )? ( substitution )? ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i2) ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_RANGE, "NUMERIC_PARAM_RANGE"), root_1);

                // EsperEPL2Grammar.g:1262:56: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:1262:64: ( substitution )?
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());

                }
                stream_substitution.reset();
                // EsperEPL2Grammar.g:1262:78: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i2) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1262:96: ^( EVENT_PROP_SIMPLE $i2)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i2.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1263:3: -> ^( NUMERIC_PARAM_RANGE ( number )* ( substitution )* )
            {
                // EsperEPL2Grammar.g:1263:6: ^( NUMERIC_PARAM_RANGE ( number )* ( substitution )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_RANGE, "NUMERIC_PARAM_RANGE"), root_1);

                // EsperEPL2Grammar.g:1263:28: ( number )*
                while ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:1263:36: ( substitution )*
                while ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());

                }
                stream_substitution.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "rangeOperand"

    public static class lastOperator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lastOperator"
    // EsperEPL2Grammar.g:1266:1: lastOperator : ( number | i= IDENT | substitution ) LAST -> {i!= null}? ^( LAST_OPERATOR ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( LAST_OPERATOR ( number )? ( substitution )? ) ;
    public final EsperEPL2GrammarParser.lastOperator_return lastOperator() throws RecognitionException {
        EsperEPL2GrammarParser.lastOperator_return retval = new EsperEPL2GrammarParser.lastOperator_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token LAST518=null;
        EsperEPL2GrammarParser.number_return number516 = null;

        EsperEPL2GrammarParser.substitution_return substitution517 = null;


        CommonTree i_tree=null;
        CommonTree LAST518_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_LAST=new RewriteRuleTokenStream(adaptor,"token LAST");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            // EsperEPL2Grammar.g:1267:2: ( ( number | i= IDENT | substitution ) LAST -> {i!= null}? ^( LAST_OPERATOR ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( LAST_OPERATOR ( number )? ( substitution )? ) )
            // EsperEPL2Grammar.g:1267:4: ( number | i= IDENT | substitution ) LAST
            {
            // EsperEPL2Grammar.g:1267:4: ( number | i= IDENT | substitution )
            int alt192=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt192=1;
                }
                break;
            case IDENT:
                {
                alt192=2;
                }
                break;
            case QUESTION:
                {
                alt192=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 192, 0, input);

                throw nvae;
            }

            switch (alt192) {
                case 1 :
                    // EsperEPL2Grammar.g:1267:5: number
                    {
                    pushFollow(FOLLOW_number_in_lastOperator8348);
                    number516=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number516.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1267:12: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_lastOperator8352); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1267:20: substitution
                    {
                    pushFollow(FOLLOW_substitution_in_lastOperator8354);
                    substitution517=substitution();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution517.getTree());

                    }
                    break;

            }

            LAST518=(Token)match(input,LAST,FOLLOW_LAST_in_lastOperator8357); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LAST.add(LAST518);



            // AST REWRITE
            // elements: number, substitution, i
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1268:3: -> {i!= null}? ^( LAST_OPERATOR ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
            if (i!= null) {
                // EsperEPL2Grammar.g:1268:18: ^( LAST_OPERATOR ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LAST_OPERATOR, "LAST_OPERATOR"), root_1);

                // EsperEPL2Grammar.g:1268:34: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1268:52: ^( EVENT_PROP_SIMPLE $i)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1269:3: -> ^( LAST_OPERATOR ( number )? ( substitution )? )
            {
                // EsperEPL2Grammar.g:1269:6: ^( LAST_OPERATOR ( number )? ( substitution )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LAST_OPERATOR, "LAST_OPERATOR"), root_1);

                // EsperEPL2Grammar.g:1269:22: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:1269:30: ( substitution )?
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());

                }
                stream_substitution.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lastOperator"

    public static class weekDayOperator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "weekDayOperator"
    // EsperEPL2Grammar.g:1272:1: weekDayOperator : ( number | i= IDENT | substitution ) WEEKDAY -> {i!= null}? ^( WEEKDAY_OPERATOR ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( WEEKDAY_OPERATOR ( number )? ( substitution )? ) ;
    public final EsperEPL2GrammarParser.weekDayOperator_return weekDayOperator() throws RecognitionException {
        EsperEPL2GrammarParser.weekDayOperator_return retval = new EsperEPL2GrammarParser.weekDayOperator_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token WEEKDAY521=null;
        EsperEPL2GrammarParser.number_return number519 = null;

        EsperEPL2GrammarParser.substitution_return substitution520 = null;


        CommonTree i_tree=null;
        CommonTree WEEKDAY521_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_WEEKDAY=new RewriteRuleTokenStream(adaptor,"token WEEKDAY");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            // EsperEPL2Grammar.g:1273:2: ( ( number | i= IDENT | substitution ) WEEKDAY -> {i!= null}? ^( WEEKDAY_OPERATOR ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( WEEKDAY_OPERATOR ( number )? ( substitution )? ) )
            // EsperEPL2Grammar.g:1273:4: ( number | i= IDENT | substitution ) WEEKDAY
            {
            // EsperEPL2Grammar.g:1273:4: ( number | i= IDENT | substitution )
            int alt193=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt193=1;
                }
                break;
            case IDENT:
                {
                alt193=2;
                }
                break;
            case QUESTION:
                {
                alt193=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 193, 0, input);

                throw nvae;
            }

            switch (alt193) {
                case 1 :
                    // EsperEPL2Grammar.g:1273:5: number
                    {
                    pushFollow(FOLLOW_number_in_weekDayOperator8405);
                    number519=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number519.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1273:12: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_weekDayOperator8409); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1273:20: substitution
                    {
                    pushFollow(FOLLOW_substitution_in_weekDayOperator8411);
                    substitution520=substitution();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution520.getTree());

                    }
                    break;

            }

            WEEKDAY521=(Token)match(input,WEEKDAY,FOLLOW_WEEKDAY_in_weekDayOperator8414); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_WEEKDAY.add(WEEKDAY521);



            // AST REWRITE
            // elements: substitution, number, i
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1274:3: -> {i!= null}? ^( WEEKDAY_OPERATOR ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
            if (i!= null) {
                // EsperEPL2Grammar.g:1274:18: ^( WEEKDAY_OPERATOR ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WEEKDAY_OPERATOR, "WEEKDAY_OPERATOR"), root_1);

                // EsperEPL2Grammar.g:1274:37: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1274:55: ^( EVENT_PROP_SIMPLE $i)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1275:3: -> ^( WEEKDAY_OPERATOR ( number )? ( substitution )? )
            {
                // EsperEPL2Grammar.g:1275:6: ^( WEEKDAY_OPERATOR ( number )? ( substitution )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WEEKDAY_OPERATOR, "WEEKDAY_OPERATOR"), root_1);

                // EsperEPL2Grammar.g:1275:25: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:1275:33: ( substitution )?
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());

                }
                stream_substitution.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "weekDayOperator"

    public static class numericParameterList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "numericParameterList"
    // EsperEPL2Grammar.g:1278:1: numericParameterList : LBRACK numericListParameter ( COMMA numericListParameter )* RBRACK -> ^( NUMERIC_PARAM_LIST ( numericListParameter )+ ) ;
    public final EsperEPL2GrammarParser.numericParameterList_return numericParameterList() throws RecognitionException {
        EsperEPL2GrammarParser.numericParameterList_return retval = new EsperEPL2GrammarParser.numericParameterList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LBRACK522=null;
        Token COMMA524=null;
        Token RBRACK526=null;
        EsperEPL2GrammarParser.numericListParameter_return numericListParameter523 = null;

        EsperEPL2GrammarParser.numericListParameter_return numericListParameter525 = null;


        CommonTree LBRACK522_tree=null;
        CommonTree COMMA524_tree=null;
        CommonTree RBRACK526_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_numericListParameter=new RewriteRuleSubtreeStream(adaptor,"rule numericListParameter");
        try {
            // EsperEPL2Grammar.g:1279:2: ( LBRACK numericListParameter ( COMMA numericListParameter )* RBRACK -> ^( NUMERIC_PARAM_LIST ( numericListParameter )+ ) )
            // EsperEPL2Grammar.g:1279:4: LBRACK numericListParameter ( COMMA numericListParameter )* RBRACK
            {
            LBRACK522=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_numericParameterList8461); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK522);

            pushFollow(FOLLOW_numericListParameter_in_numericParameterList8463);
            numericListParameter523=numericListParameter();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_numericListParameter.add(numericListParameter523.getTree());
            // EsperEPL2Grammar.g:1279:32: ( COMMA numericListParameter )*
            loop194:
            do {
                int alt194=2;
                int LA194_0 = input.LA(1);

                if ( (LA194_0==COMMA) ) {
                    alt194=1;
                }


                switch (alt194) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1279:33: COMMA numericListParameter
            	    {
            	    COMMA524=(Token)match(input,COMMA,FOLLOW_COMMA_in_numericParameterList8466); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA524);

            	    pushFollow(FOLLOW_numericListParameter_in_numericParameterList8468);
            	    numericListParameter525=numericListParameter();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_numericListParameter.add(numericListParameter525.getTree());

            	    }
            	    break;

            	default :
            	    break loop194;
                }
            } while (true);

            RBRACK526=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_numericParameterList8472); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK526);



            // AST REWRITE
            // elements: numericListParameter
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1280:3: -> ^( NUMERIC_PARAM_LIST ( numericListParameter )+ )
            {
                // EsperEPL2Grammar.g:1280:6: ^( NUMERIC_PARAM_LIST ( numericListParameter )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_LIST, "NUMERIC_PARAM_LIST"), root_1);

                if ( !(stream_numericListParameter.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_numericListParameter.hasNext() ) {
                    adaptor.addChild(root_1, stream_numericListParameter.nextTree());

                }
                stream_numericListParameter.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "numericParameterList"

    public static class numericListParameter_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "numericListParameter"
    // EsperEPL2Grammar.g:1283:1: numericListParameter : ( rangeOperand | frequencyOperand | numberconstant );
    public final EsperEPL2GrammarParser.numericListParameter_return numericListParameter() throws RecognitionException {
        EsperEPL2GrammarParser.numericListParameter_return retval = new EsperEPL2GrammarParser.numericListParameter_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.rangeOperand_return rangeOperand527 = null;

        EsperEPL2GrammarParser.frequencyOperand_return frequencyOperand528 = null;

        EsperEPL2GrammarParser.numberconstant_return numberconstant529 = null;



        try {
            // EsperEPL2Grammar.g:1284:2: ( rangeOperand | frequencyOperand | numberconstant )
            int alt195=3;
            switch ( input.LA(1) ) {
            case NUM_INT:
                {
                int LA195_1 = input.LA(2);

                if ( (LA195_1==COMMA||LA195_1==RBRACK) ) {
                    alt195=3;
                }
                else if ( (LA195_1==COLON) ) {
                    alt195=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 195, 1, input);

                    throw nvae;
                }
                }
                break;
            case NUM_LONG:
                {
                int LA195_2 = input.LA(2);

                if ( (LA195_2==COMMA||LA195_2==RBRACK) ) {
                    alt195=3;
                }
                else if ( (LA195_2==COLON) ) {
                    alt195=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 195, 2, input);

                    throw nvae;
                }
                }
                break;
            case NUM_FLOAT:
                {
                int LA195_3 = input.LA(2);

                if ( (LA195_3==COLON) ) {
                    alt195=1;
                }
                else if ( (LA195_3==COMMA||LA195_3==RBRACK) ) {
                    alt195=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 195, 3, input);

                    throw nvae;
                }
                }
                break;
            case NUM_DOUBLE:
                {
                int LA195_4 = input.LA(2);

                if ( (LA195_4==COLON) ) {
                    alt195=1;
                }
                else if ( (LA195_4==COMMA||LA195_4==RBRACK) ) {
                    alt195=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 195, 4, input);

                    throw nvae;
                }
                }
                break;
            case IDENT:
            case QUESTION:
                {
                alt195=1;
                }
                break;
            case STAR:
                {
                alt195=2;
                }
                break;
            case PLUS:
            case MINUS:
                {
                alt195=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 195, 0, input);

                throw nvae;
            }

            switch (alt195) {
                case 1 :
                    // EsperEPL2Grammar.g:1284:4: rangeOperand
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_rangeOperand_in_numericListParameter8494);
                    rangeOperand527=rangeOperand();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rangeOperand527.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1285:5: frequencyOperand
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_frequencyOperand_in_numericListParameter8500);
                    frequencyOperand528=frequencyOperand();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, frequencyOperand528.getTree());

                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1286:4: numberconstant
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_numberconstant_in_numericListParameter8505);
                    numberconstant529=numberconstant();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numberconstant529.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "numericListParameter"

    public static class eventProperty_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "eventProperty"
    // EsperEPL2Grammar.g:1289:1: eventProperty : eventPropertyAtomic ( DOT eventPropertyAtomic )* -> ^( EVENT_PROP_EXPR ( eventPropertyAtomic )+ ) ;
    public final EsperEPL2GrammarParser.eventProperty_return eventProperty() throws RecognitionException {
        EsperEPL2GrammarParser.eventProperty_return retval = new EsperEPL2GrammarParser.eventProperty_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token DOT531=null;
        EsperEPL2GrammarParser.eventPropertyAtomic_return eventPropertyAtomic530 = null;

        EsperEPL2GrammarParser.eventPropertyAtomic_return eventPropertyAtomic532 = null;


        CommonTree DOT531_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_eventPropertyAtomic=new RewriteRuleSubtreeStream(adaptor,"rule eventPropertyAtomic");
        try {
            // EsperEPL2Grammar.g:1290:2: ( eventPropertyAtomic ( DOT eventPropertyAtomic )* -> ^( EVENT_PROP_EXPR ( eventPropertyAtomic )+ ) )
            // EsperEPL2Grammar.g:1290:4: eventPropertyAtomic ( DOT eventPropertyAtomic )*
            {
            pushFollow(FOLLOW_eventPropertyAtomic_in_eventProperty8521);
            eventPropertyAtomic530=eventPropertyAtomic();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventPropertyAtomic.add(eventPropertyAtomic530.getTree());
            // EsperEPL2Grammar.g:1290:24: ( DOT eventPropertyAtomic )*
            loop196:
            do {
                int alt196=2;
                int LA196_0 = input.LA(1);

                if ( (LA196_0==DOT) ) {
                    alt196=1;
                }


                switch (alt196) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1290:25: DOT eventPropertyAtomic
            	    {
            	    DOT531=(Token)match(input,DOT,FOLLOW_DOT_in_eventProperty8524); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT531);

            	    pushFollow(FOLLOW_eventPropertyAtomic_in_eventProperty8526);
            	    eventPropertyAtomic532=eventPropertyAtomic();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_eventPropertyAtomic.add(eventPropertyAtomic532.getTree());

            	    }
            	    break;

            	default :
            	    break loop196;
                }
            } while (true);



            // AST REWRITE
            // elements: eventPropertyAtomic
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1291:3: -> ^( EVENT_PROP_EXPR ( eventPropertyAtomic )+ )
            {
                // EsperEPL2Grammar.g:1291:6: ^( EVENT_PROP_EXPR ( eventPropertyAtomic )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_1);

                if ( !(stream_eventPropertyAtomic.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_eventPropertyAtomic.hasNext() ) {
                    adaptor.addChild(root_1, stream_eventPropertyAtomic.nextTree());

                }
                stream_eventPropertyAtomic.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "eventProperty"

    public static class eventPropertyAtomic_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "eventPropertyAtomic"
    // EsperEPL2Grammar.g:1294:1: eventPropertyAtomic : eventPropertyIdent (lb= LBRACK ni= NUM_INT RBRACK (q= QUESTION )? | lp= LPAREN (s= STRING_LITERAL | s= QUOTED_STRING_LITERAL ) RPAREN (q= QUESTION )? | q1= QUESTION )? -> {lb!= null && $q == null}? ^( EVENT_PROP_INDEXED eventPropertyIdent $ni) -> {lb!= null && $q != null}? ^( EVENT_PROP_DYNAMIC_INDEXED eventPropertyIdent $ni) -> {lp!= null && $q == null}? ^( EVENT_PROP_MAPPED eventPropertyIdent $s) -> {lp!= null && $q != null}? ^( EVENT_PROP_DYNAMIC_MAPPED eventPropertyIdent $s) -> {q1 != null}? ^( EVENT_PROP_DYNAMIC_SIMPLE eventPropertyIdent ) -> ^( EVENT_PROP_SIMPLE eventPropertyIdent ) ;
    public final EsperEPL2GrammarParser.eventPropertyAtomic_return eventPropertyAtomic() throws RecognitionException {
        EsperEPL2GrammarParser.eventPropertyAtomic_return retval = new EsperEPL2GrammarParser.eventPropertyAtomic_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token lb=null;
        Token ni=null;
        Token q=null;
        Token lp=null;
        Token s=null;
        Token q1=null;
        Token RBRACK534=null;
        Token RPAREN535=null;
        EsperEPL2GrammarParser.eventPropertyIdent_return eventPropertyIdent533 = null;


        CommonTree lb_tree=null;
        CommonTree ni_tree=null;
        CommonTree q_tree=null;
        CommonTree lp_tree=null;
        CommonTree s_tree=null;
        CommonTree q1_tree=null;
        CommonTree RBRACK534_tree=null;
        CommonTree RPAREN535_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token STRING_LITERAL");
        RewriteRuleTokenStream stream_QUESTION=new RewriteRuleTokenStream(adaptor,"token QUESTION");
        RewriteRuleTokenStream stream_QUOTED_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token QUOTED_STRING_LITERAL");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_NUM_INT=new RewriteRuleTokenStream(adaptor,"token NUM_INT");
        RewriteRuleSubtreeStream stream_eventPropertyIdent=new RewriteRuleSubtreeStream(adaptor,"rule eventPropertyIdent");
        try {
            // EsperEPL2Grammar.g:1295:2: ( eventPropertyIdent (lb= LBRACK ni= NUM_INT RBRACK (q= QUESTION )? | lp= LPAREN (s= STRING_LITERAL | s= QUOTED_STRING_LITERAL ) RPAREN (q= QUESTION )? | q1= QUESTION )? -> {lb!= null && $q == null}? ^( EVENT_PROP_INDEXED eventPropertyIdent $ni) -> {lb!= null && $q != null}? ^( EVENT_PROP_DYNAMIC_INDEXED eventPropertyIdent $ni) -> {lp!= null && $q == null}? ^( EVENT_PROP_MAPPED eventPropertyIdent $s) -> {lp!= null && $q != null}? ^( EVENT_PROP_DYNAMIC_MAPPED eventPropertyIdent $s) -> {q1 != null}? ^( EVENT_PROP_DYNAMIC_SIMPLE eventPropertyIdent ) -> ^( EVENT_PROP_SIMPLE eventPropertyIdent ) )
            // EsperEPL2Grammar.g:1295:4: eventPropertyIdent (lb= LBRACK ni= NUM_INT RBRACK (q= QUESTION )? | lp= LPAREN (s= STRING_LITERAL | s= QUOTED_STRING_LITERAL ) RPAREN (q= QUESTION )? | q1= QUESTION )?
            {
            pushFollow(FOLLOW_eventPropertyIdent_in_eventPropertyAtomic8552);
            eventPropertyIdent533=eventPropertyIdent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventPropertyIdent.add(eventPropertyIdent533.getTree());
            // EsperEPL2Grammar.g:1295:23: (lb= LBRACK ni= NUM_INT RBRACK (q= QUESTION )? | lp= LPAREN (s= STRING_LITERAL | s= QUOTED_STRING_LITERAL ) RPAREN (q= QUESTION )? | q1= QUESTION )?
            int alt200=4;
            switch ( input.LA(1) ) {
                case LBRACK:
                    {
                    alt200=1;
                    }
                    break;
                case LPAREN:
                    {
                    alt200=2;
                    }
                    break;
                case QUESTION:
                    {
                    alt200=3;
                    }
                    break;
            }

            switch (alt200) {
                case 1 :
                    // EsperEPL2Grammar.g:1296:4: lb= LBRACK ni= NUM_INT RBRACK (q= QUESTION )?
                    {
                    lb=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_eventPropertyAtomic8561); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LBRACK.add(lb);

                    ni=(Token)match(input,NUM_INT,FOLLOW_NUM_INT_in_eventPropertyAtomic8565); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_INT.add(ni);

                    RBRACK534=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_eventPropertyAtomic8567); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK534);

                    // EsperEPL2Grammar.g:1296:32: (q= QUESTION )?
                    int alt197=2;
                    int LA197_0 = input.LA(1);

                    if ( (LA197_0==QUESTION) ) {
                        alt197=1;
                    }
                    switch (alt197) {
                        case 1 :
                            // EsperEPL2Grammar.g:1296:33: q= QUESTION
                            {
                            q=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_eventPropertyAtomic8572); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUESTION.add(q);


                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1298:4: lp= LPAREN (s= STRING_LITERAL | s= QUOTED_STRING_LITERAL ) RPAREN (q= QUESTION )?
                    {
                    lp=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_eventPropertyAtomic8586); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(lp);

                    // EsperEPL2Grammar.g:1298:14: (s= STRING_LITERAL | s= QUOTED_STRING_LITERAL )
                    int alt198=2;
                    int LA198_0 = input.LA(1);

                    if ( (LA198_0==STRING_LITERAL) ) {
                        alt198=1;
                    }
                    else if ( (LA198_0==QUOTED_STRING_LITERAL) ) {
                        alt198=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 198, 0, input);

                        throw nvae;
                    }
                    switch (alt198) {
                        case 1 :
                            // EsperEPL2Grammar.g:1298:15: s= STRING_LITERAL
                            {
                            s=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_eventPropertyAtomic8591); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_STRING_LITERAL.add(s);


                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1298:34: s= QUOTED_STRING_LITERAL
                            {
                            s=(Token)match(input,QUOTED_STRING_LITERAL,FOLLOW_QUOTED_STRING_LITERAL_in_eventPropertyAtomic8597); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUOTED_STRING_LITERAL.add(s);


                            }
                            break;

                    }

                    RPAREN535=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_eventPropertyAtomic8600); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN535);

                    // EsperEPL2Grammar.g:1298:66: (q= QUESTION )?
                    int alt199=2;
                    int LA199_0 = input.LA(1);

                    if ( (LA199_0==QUESTION) ) {
                        alt199=1;
                    }
                    switch (alt199) {
                        case 1 :
                            // EsperEPL2Grammar.g:1298:67: q= QUESTION
                            {
                            q=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_eventPropertyAtomic8605); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUESTION.add(q);


                            }
                            break;

                    }


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1300:4: q1= QUESTION
                    {
                    q1=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_eventPropertyAtomic8619); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUESTION.add(q1);


                    }
                    break;

            }



            // AST REWRITE
            // elements: ni, s, eventPropertyIdent, s, eventPropertyIdent, eventPropertyIdent, ni, eventPropertyIdent, eventPropertyIdent, eventPropertyIdent
            // token labels: s, ni
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_ni=new RewriteRuleTokenStream(adaptor,"token ni",ni);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1303:3: -> {lb!= null && $q == null}? ^( EVENT_PROP_INDEXED eventPropertyIdent $ni)
            if (lb!= null && q == null) {
                // EsperEPL2Grammar.g:1303:33: ^( EVENT_PROP_INDEXED eventPropertyIdent $ni)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_INDEXED, "EVENT_PROP_INDEXED"), root_1);

                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_1, stream_ni.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1304:3: -> {lb!= null && $q != null}? ^( EVENT_PROP_DYNAMIC_INDEXED eventPropertyIdent $ni)
            if (lb!= null && q != null) {
                // EsperEPL2Grammar.g:1304:33: ^( EVENT_PROP_DYNAMIC_INDEXED eventPropertyIdent $ni)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_DYNAMIC_INDEXED, "EVENT_PROP_DYNAMIC_INDEXED"), root_1);

                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_1, stream_ni.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1305:3: -> {lp!= null && $q == null}? ^( EVENT_PROP_MAPPED eventPropertyIdent $s)
            if (lp!= null && q == null) {
                // EsperEPL2Grammar.g:1305:33: ^( EVENT_PROP_MAPPED eventPropertyIdent $s)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_MAPPED, "EVENT_PROP_MAPPED"), root_1);

                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_1, stream_s.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1306:3: -> {lp!= null && $q != null}? ^( EVENT_PROP_DYNAMIC_MAPPED eventPropertyIdent $s)
            if (lp!= null && q != null) {
                // EsperEPL2Grammar.g:1306:33: ^( EVENT_PROP_DYNAMIC_MAPPED eventPropertyIdent $s)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_DYNAMIC_MAPPED, "EVENT_PROP_DYNAMIC_MAPPED"), root_1);

                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_1, stream_s.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1307:3: -> {q1 != null}? ^( EVENT_PROP_DYNAMIC_SIMPLE eventPropertyIdent )
            if (q1 != null) {
                // EsperEPL2Grammar.g:1307:27: ^( EVENT_PROP_DYNAMIC_SIMPLE eventPropertyIdent )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_DYNAMIC_SIMPLE, "EVENT_PROP_DYNAMIC_SIMPLE"), root_1);

                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1308:3: -> ^( EVENT_PROP_SIMPLE eventPropertyIdent )
            {
                // EsperEPL2Grammar.g:1308:6: ^( EVENT_PROP_SIMPLE eventPropertyIdent )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_1);

                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "eventPropertyAtomic"

    public static class eventPropertyIdent_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "eventPropertyIdent"
    // EsperEPL2Grammar.g:1311:1: eventPropertyIdent : ipi= keywordAllowedIdent ( ESCAPECHAR DOT (ipi2= keywordAllowedIdent )? )* -> ^( IDENT[identifier] ) ;
    public final EsperEPL2GrammarParser.eventPropertyIdent_return eventPropertyIdent() throws RecognitionException {
        EsperEPL2GrammarParser.eventPropertyIdent_return retval = new EsperEPL2GrammarParser.eventPropertyIdent_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token ESCAPECHAR536=null;
        Token DOT537=null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return ipi = null;

        EsperEPL2GrammarParser.keywordAllowedIdent_return ipi2 = null;


        CommonTree ESCAPECHAR536_tree=null;
        CommonTree DOT537_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_ESCAPECHAR=new RewriteRuleTokenStream(adaptor,"token ESCAPECHAR");
        RewriteRuleSubtreeStream stream_keywordAllowedIdent=new RewriteRuleSubtreeStream(adaptor,"rule keywordAllowedIdent");
         String identifier = ""; 
        try {
            // EsperEPL2Grammar.g:1313:2: (ipi= keywordAllowedIdent ( ESCAPECHAR DOT (ipi2= keywordAllowedIdent )? )* -> ^( IDENT[identifier] ) )
            // EsperEPL2Grammar.g:1313:4: ipi= keywordAllowedIdent ( ESCAPECHAR DOT (ipi2= keywordAllowedIdent )? )*
            {
            pushFollow(FOLLOW_keywordAllowedIdent_in_eventPropertyIdent8742);
            ipi=keywordAllowedIdent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(ipi.getTree());
            if ( state.backtracking==0 ) {
               identifier = ipi.result; 
            }
            // EsperEPL2Grammar.g:1314:3: ( ESCAPECHAR DOT (ipi2= keywordAllowedIdent )? )*
            loop202:
            do {
                int alt202=2;
                int LA202_0 = input.LA(1);

                if ( (LA202_0==ESCAPECHAR) ) {
                    alt202=1;
                }


                switch (alt202) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1315:5: ESCAPECHAR DOT (ipi2= keywordAllowedIdent )?
            	    {
            	    ESCAPECHAR536=(Token)match(input,ESCAPECHAR,FOLLOW_ESCAPECHAR_in_eventPropertyIdent8754); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_ESCAPECHAR.add(ESCAPECHAR536);

            	    DOT537=(Token)match(input,DOT,FOLLOW_DOT_in_eventPropertyIdent8756); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT537);

            	    // EsperEPL2Grammar.g:1315:24: (ipi2= keywordAllowedIdent )?
            	    int alt201=2;
            	    alt201 = dfa201.predict(input);
            	    switch (alt201) {
            	        case 1 :
            	            // EsperEPL2Grammar.g:1315:24: ipi2= keywordAllowedIdent
            	            {
            	            pushFollow(FOLLOW_keywordAllowedIdent_in_eventPropertyIdent8760);
            	            ipi2=keywordAllowedIdent();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(ipi2.getTree());

            	            }
            	            break;

            	    }

            	    if ( state.backtracking==0 ) {
            	       identifier += "."; if (ipi2 != null) identifier += ipi2.result; 
            	    }

            	    }
            	    break;

            	default :
            	    break loop202;
                }
            } while (true);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1317:7: -> ^( IDENT[identifier] )
            {
                // EsperEPL2Grammar.g:1317:10: ^( IDENT[identifier] )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IDENT, identifier), root_1);

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "eventPropertyIdent"

    public static class keywordAllowedIdent_return extends ParserRuleReturnScope {
        public String result;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keywordAllowedIdent"
    // EsperEPL2Grammar.g:1320:1: keywordAllowedIdent returns [String result] : (i1= IDENT | i2= TICKED_STRING_LITERAL | AT | COUNT | ESCAPE | EVERY_EXPR | SUM | AVG | MAX | MIN | COALESCE | MEDIAN | STDDEV | AVEDEV | EVENTS | FIRST | LAST | UNIDIRECTIONAL | RETAINUNION | RETAININTERSECTION | UNTIL | PATTERN | SQL | METADATASQL | PREVIOUS | PRIOR | WEEKDAY | LW | INSTANCEOF | CAST | SNAPSHOT | VARIABLE | WINDOW | LEFT | RIGHT | OUTER | FULL | JOIN );
    public final EsperEPL2GrammarParser.keywordAllowedIdent_return keywordAllowedIdent() throws RecognitionException {
        EsperEPL2GrammarParser.keywordAllowedIdent_return retval = new EsperEPL2GrammarParser.keywordAllowedIdent_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i1=null;
        Token i2=null;
        Token AT538=null;
        Token COUNT539=null;
        Token ESCAPE540=null;
        Token EVERY_EXPR541=null;
        Token SUM542=null;
        Token AVG543=null;
        Token MAX544=null;
        Token MIN545=null;
        Token COALESCE546=null;
        Token MEDIAN547=null;
        Token STDDEV548=null;
        Token AVEDEV549=null;
        Token EVENTS550=null;
        Token FIRST551=null;
        Token LAST552=null;
        Token UNIDIRECTIONAL553=null;
        Token RETAINUNION554=null;
        Token RETAININTERSECTION555=null;
        Token UNTIL556=null;
        Token PATTERN557=null;
        Token SQL558=null;
        Token METADATASQL559=null;
        Token PREVIOUS560=null;
        Token PRIOR561=null;
        Token WEEKDAY562=null;
        Token LW563=null;
        Token INSTANCEOF564=null;
        Token CAST565=null;
        Token SNAPSHOT566=null;
        Token VARIABLE567=null;
        Token WINDOW568=null;
        Token LEFT569=null;
        Token RIGHT570=null;
        Token OUTER571=null;
        Token FULL572=null;
        Token JOIN573=null;

        CommonTree i1_tree=null;
        CommonTree i2_tree=null;
        CommonTree AT538_tree=null;
        CommonTree COUNT539_tree=null;
        CommonTree ESCAPE540_tree=null;
        CommonTree EVERY_EXPR541_tree=null;
        CommonTree SUM542_tree=null;
        CommonTree AVG543_tree=null;
        CommonTree MAX544_tree=null;
        CommonTree MIN545_tree=null;
        CommonTree COALESCE546_tree=null;
        CommonTree MEDIAN547_tree=null;
        CommonTree STDDEV548_tree=null;
        CommonTree AVEDEV549_tree=null;
        CommonTree EVENTS550_tree=null;
        CommonTree FIRST551_tree=null;
        CommonTree LAST552_tree=null;
        CommonTree UNIDIRECTIONAL553_tree=null;
        CommonTree RETAINUNION554_tree=null;
        CommonTree RETAININTERSECTION555_tree=null;
        CommonTree UNTIL556_tree=null;
        CommonTree PATTERN557_tree=null;
        CommonTree SQL558_tree=null;
        CommonTree METADATASQL559_tree=null;
        CommonTree PREVIOUS560_tree=null;
        CommonTree PRIOR561_tree=null;
        CommonTree WEEKDAY562_tree=null;
        CommonTree LW563_tree=null;
        CommonTree INSTANCEOF564_tree=null;
        CommonTree CAST565_tree=null;
        CommonTree SNAPSHOT566_tree=null;
        CommonTree VARIABLE567_tree=null;
        CommonTree WINDOW568_tree=null;
        CommonTree LEFT569_tree=null;
        CommonTree RIGHT570_tree=null;
        CommonTree OUTER571_tree=null;
        CommonTree FULL572_tree=null;
        CommonTree JOIN573_tree=null;

        try {
            // EsperEPL2Grammar.g:1321:2: (i1= IDENT | i2= TICKED_STRING_LITERAL | AT | COUNT | ESCAPE | EVERY_EXPR | SUM | AVG | MAX | MIN | COALESCE | MEDIAN | STDDEV | AVEDEV | EVENTS | FIRST | LAST | UNIDIRECTIONAL | RETAINUNION | RETAININTERSECTION | UNTIL | PATTERN | SQL | METADATASQL | PREVIOUS | PRIOR | WEEKDAY | LW | INSTANCEOF | CAST | SNAPSHOT | VARIABLE | WINDOW | LEFT | RIGHT | OUTER | FULL | JOIN )
            int alt203=38;
            switch ( input.LA(1) ) {
            case IDENT:
                {
                alt203=1;
                }
                break;
            case TICKED_STRING_LITERAL:
                {
                alt203=2;
                }
                break;
            case AT:
                {
                alt203=3;
                }
                break;
            case COUNT:
                {
                alt203=4;
                }
                break;
            case ESCAPE:
                {
                alt203=5;
                }
                break;
            case EVERY_EXPR:
                {
                alt203=6;
                }
                break;
            case SUM:
                {
                alt203=7;
                }
                break;
            case AVG:
                {
                alt203=8;
                }
                break;
            case MAX:
                {
                alt203=9;
                }
                break;
            case MIN:
                {
                alt203=10;
                }
                break;
            case COALESCE:
                {
                alt203=11;
                }
                break;
            case MEDIAN:
                {
                alt203=12;
                }
                break;
            case STDDEV:
                {
                alt203=13;
                }
                break;
            case AVEDEV:
                {
                alt203=14;
                }
                break;
            case EVENTS:
                {
                alt203=15;
                }
                break;
            case FIRST:
                {
                alt203=16;
                }
                break;
            case LAST:
                {
                alt203=17;
                }
                break;
            case UNIDIRECTIONAL:
                {
                alt203=18;
                }
                break;
            case RETAINUNION:
                {
                alt203=19;
                }
                break;
            case RETAININTERSECTION:
                {
                alt203=20;
                }
                break;
            case UNTIL:
                {
                alt203=21;
                }
                break;
            case PATTERN:
                {
                alt203=22;
                }
                break;
            case SQL:
                {
                alt203=23;
                }
                break;
            case METADATASQL:
                {
                alt203=24;
                }
                break;
            case PREVIOUS:
                {
                alt203=25;
                }
                break;
            case PRIOR:
                {
                alt203=26;
                }
                break;
            case WEEKDAY:
                {
                alt203=27;
                }
                break;
            case LW:
                {
                alt203=28;
                }
                break;
            case INSTANCEOF:
                {
                alt203=29;
                }
                break;
            case CAST:
                {
                alt203=30;
                }
                break;
            case SNAPSHOT:
                {
                alt203=31;
                }
                break;
            case VARIABLE:
                {
                alt203=32;
                }
                break;
            case WINDOW:
                {
                alt203=33;
                }
                break;
            case LEFT:
                {
                alt203=34;
                }
                break;
            case RIGHT:
                {
                alt203=35;
                }
                break;
            case OUTER:
                {
                alt203=36;
                }
                break;
            case FULL:
                {
                alt203=37;
                }
                break;
            case JOIN:
                {
                alt203=38;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 203, 0, input);

                throw nvae;
            }

            switch (alt203) {
                case 1 :
                    // EsperEPL2Grammar.g:1321:4: i1= IDENT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    i1=(Token)match(input,IDENT,FOLLOW_IDENT_in_keywordAllowedIdent8799); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    i1_tree = (CommonTree)adaptor.create(i1);
                    adaptor.addChild(root_0, i1_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = i1.getText(); 
                    }

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1322:4: i2= TICKED_STRING_LITERAL
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    i2=(Token)match(input,TICKED_STRING_LITERAL,FOLLOW_TICKED_STRING_LITERAL_in_keywordAllowedIdent8808); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    i2_tree = (CommonTree)adaptor.create(i2);
                    adaptor.addChild(root_0, i2_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = removeTicks(i2.getText()); 
                    }

                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1323:4: AT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    AT538=(Token)match(input,AT,FOLLOW_AT_in_keywordAllowedIdent8815); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AT538_tree = (CommonTree)adaptor.create(AT538);
                    adaptor.addChild(root_0, AT538_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "at"; 
                    }

                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:1324:4: COUNT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    COUNT539=(Token)match(input,COUNT,FOLLOW_COUNT_in_keywordAllowedIdent8822); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COUNT539_tree = (CommonTree)adaptor.create(COUNT539);
                    adaptor.addChild(root_0, COUNT539_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "count"; 
                    }

                    }
                    break;
                case 5 :
                    // EsperEPL2Grammar.g:1325:4: ESCAPE
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    ESCAPE540=(Token)match(input,ESCAPE,FOLLOW_ESCAPE_in_keywordAllowedIdent8829); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ESCAPE540_tree = (CommonTree)adaptor.create(ESCAPE540);
                    adaptor.addChild(root_0, ESCAPE540_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "escape"; 
                    }

                    }
                    break;
                case 6 :
                    // EsperEPL2Grammar.g:1326:8: EVERY_EXPR
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    EVERY_EXPR541=(Token)match(input,EVERY_EXPR,FOLLOW_EVERY_EXPR_in_keywordAllowedIdent8840); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EVERY_EXPR541_tree = (CommonTree)adaptor.create(EVERY_EXPR541);
                    adaptor.addChild(root_0, EVERY_EXPR541_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "every"; 
                    }

                    }
                    break;
                case 7 :
                    // EsperEPL2Grammar.g:1327:4: SUM
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    SUM542=(Token)match(input,SUM,FOLLOW_SUM_in_keywordAllowedIdent8847); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SUM542_tree = (CommonTree)adaptor.create(SUM542);
                    adaptor.addChild(root_0, SUM542_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "sum"; 
                    }

                    }
                    break;
                case 8 :
                    // EsperEPL2Grammar.g:1328:4: AVG
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    AVG543=(Token)match(input,AVG,FOLLOW_AVG_in_keywordAllowedIdent8854); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AVG543_tree = (CommonTree)adaptor.create(AVG543);
                    adaptor.addChild(root_0, AVG543_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "avg"; 
                    }

                    }
                    break;
                case 9 :
                    // EsperEPL2Grammar.g:1329:4: MAX
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    MAX544=(Token)match(input,MAX,FOLLOW_MAX_in_keywordAllowedIdent8861); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MAX544_tree = (CommonTree)adaptor.create(MAX544);
                    adaptor.addChild(root_0, MAX544_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "max"; 
                    }

                    }
                    break;
                case 10 :
                    // EsperEPL2Grammar.g:1330:4: MIN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    MIN545=(Token)match(input,MIN,FOLLOW_MIN_in_keywordAllowedIdent8868); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MIN545_tree = (CommonTree)adaptor.create(MIN545);
                    adaptor.addChild(root_0, MIN545_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "min"; 
                    }

                    }
                    break;
                case 11 :
                    // EsperEPL2Grammar.g:1331:4: COALESCE
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    COALESCE546=(Token)match(input,COALESCE,FOLLOW_COALESCE_in_keywordAllowedIdent8875); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COALESCE546_tree = (CommonTree)adaptor.create(COALESCE546);
                    adaptor.addChild(root_0, COALESCE546_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "coalesce"; 
                    }

                    }
                    break;
                case 12 :
                    // EsperEPL2Grammar.g:1332:4: MEDIAN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    MEDIAN547=(Token)match(input,MEDIAN,FOLLOW_MEDIAN_in_keywordAllowedIdent8882); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MEDIAN547_tree = (CommonTree)adaptor.create(MEDIAN547);
                    adaptor.addChild(root_0, MEDIAN547_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "median"; 
                    }

                    }
                    break;
                case 13 :
                    // EsperEPL2Grammar.g:1333:4: STDDEV
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    STDDEV548=(Token)match(input,STDDEV,FOLLOW_STDDEV_in_keywordAllowedIdent8889); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STDDEV548_tree = (CommonTree)adaptor.create(STDDEV548);
                    adaptor.addChild(root_0, STDDEV548_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "stddev"; 
                    }

                    }
                    break;
                case 14 :
                    // EsperEPL2Grammar.g:1334:4: AVEDEV
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    AVEDEV549=(Token)match(input,AVEDEV,FOLLOW_AVEDEV_in_keywordAllowedIdent8896); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AVEDEV549_tree = (CommonTree)adaptor.create(AVEDEV549);
                    adaptor.addChild(root_0, AVEDEV549_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "avedev"; 
                    }

                    }
                    break;
                case 15 :
                    // EsperEPL2Grammar.g:1335:4: EVENTS
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    EVENTS550=(Token)match(input,EVENTS,FOLLOW_EVENTS_in_keywordAllowedIdent8903); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EVENTS550_tree = (CommonTree)adaptor.create(EVENTS550);
                    adaptor.addChild(root_0, EVENTS550_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "events"; 
                    }

                    }
                    break;
                case 16 :
                    // EsperEPL2Grammar.g:1336:4: FIRST
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    FIRST551=(Token)match(input,FIRST,FOLLOW_FIRST_in_keywordAllowedIdent8910); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FIRST551_tree = (CommonTree)adaptor.create(FIRST551);
                    adaptor.addChild(root_0, FIRST551_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "first"; 
                    }

                    }
                    break;
                case 17 :
                    // EsperEPL2Grammar.g:1337:4: LAST
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    LAST552=(Token)match(input,LAST,FOLLOW_LAST_in_keywordAllowedIdent8917); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LAST552_tree = (CommonTree)adaptor.create(LAST552);
                    adaptor.addChild(root_0, LAST552_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "last"; 
                    }

                    }
                    break;
                case 18 :
                    // EsperEPL2Grammar.g:1338:4: UNIDIRECTIONAL
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    UNIDIRECTIONAL553=(Token)match(input,UNIDIRECTIONAL,FOLLOW_UNIDIRECTIONAL_in_keywordAllowedIdent8924); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    UNIDIRECTIONAL553_tree = (CommonTree)adaptor.create(UNIDIRECTIONAL553);
                    adaptor.addChild(root_0, UNIDIRECTIONAL553_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "unidirectional"; 
                    }

                    }
                    break;
                case 19 :
                    // EsperEPL2Grammar.g:1339:4: RETAINUNION
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    RETAINUNION554=(Token)match(input,RETAINUNION,FOLLOW_RETAINUNION_in_keywordAllowedIdent8931); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RETAINUNION554_tree = (CommonTree)adaptor.create(RETAINUNION554);
                    adaptor.addChild(root_0, RETAINUNION554_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "retain-union"; 
                    }

                    }
                    break;
                case 20 :
                    // EsperEPL2Grammar.g:1340:4: RETAININTERSECTION
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    RETAININTERSECTION555=(Token)match(input,RETAININTERSECTION,FOLLOW_RETAININTERSECTION_in_keywordAllowedIdent8938); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RETAININTERSECTION555_tree = (CommonTree)adaptor.create(RETAININTERSECTION555);
                    adaptor.addChild(root_0, RETAININTERSECTION555_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "retain-intersection"; 
                    }

                    }
                    break;
                case 21 :
                    // EsperEPL2Grammar.g:1341:4: UNTIL
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    UNTIL556=(Token)match(input,UNTIL,FOLLOW_UNTIL_in_keywordAllowedIdent8945); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    UNTIL556_tree = (CommonTree)adaptor.create(UNTIL556);
                    adaptor.addChild(root_0, UNTIL556_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "until"; 
                    }

                    }
                    break;
                case 22 :
                    // EsperEPL2Grammar.g:1342:4: PATTERN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    PATTERN557=(Token)match(input,PATTERN,FOLLOW_PATTERN_in_keywordAllowedIdent8952); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PATTERN557_tree = (CommonTree)adaptor.create(PATTERN557);
                    adaptor.addChild(root_0, PATTERN557_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "pattern"; 
                    }

                    }
                    break;
                case 23 :
                    // EsperEPL2Grammar.g:1343:4: SQL
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    SQL558=(Token)match(input,SQL,FOLLOW_SQL_in_keywordAllowedIdent8959); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SQL558_tree = (CommonTree)adaptor.create(SQL558);
                    adaptor.addChild(root_0, SQL558_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "sql"; 
                    }

                    }
                    break;
                case 24 :
                    // EsperEPL2Grammar.g:1344:4: METADATASQL
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    METADATASQL559=(Token)match(input,METADATASQL,FOLLOW_METADATASQL_in_keywordAllowedIdent8966); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    METADATASQL559_tree = (CommonTree)adaptor.create(METADATASQL559);
                    adaptor.addChild(root_0, METADATASQL559_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "metadatasql"; 
                    }

                    }
                    break;
                case 25 :
                    // EsperEPL2Grammar.g:1345:4: PREVIOUS
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    PREVIOUS560=(Token)match(input,PREVIOUS,FOLLOW_PREVIOUS_in_keywordAllowedIdent8973); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PREVIOUS560_tree = (CommonTree)adaptor.create(PREVIOUS560);
                    adaptor.addChild(root_0, PREVIOUS560_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "prev"; 
                    }

                    }
                    break;
                case 26 :
                    // EsperEPL2Grammar.g:1346:4: PRIOR
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    PRIOR561=(Token)match(input,PRIOR,FOLLOW_PRIOR_in_keywordAllowedIdent8980); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PRIOR561_tree = (CommonTree)adaptor.create(PRIOR561);
                    adaptor.addChild(root_0, PRIOR561_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "prior"; 
                    }

                    }
                    break;
                case 27 :
                    // EsperEPL2Grammar.g:1347:4: WEEKDAY
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    WEEKDAY562=(Token)match(input,WEEKDAY,FOLLOW_WEEKDAY_in_keywordAllowedIdent8987); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    WEEKDAY562_tree = (CommonTree)adaptor.create(WEEKDAY562);
                    adaptor.addChild(root_0, WEEKDAY562_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "weekday"; 
                    }

                    }
                    break;
                case 28 :
                    // EsperEPL2Grammar.g:1348:4: LW
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    LW563=(Token)match(input,LW,FOLLOW_LW_in_keywordAllowedIdent8994); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LW563_tree = (CommonTree)adaptor.create(LW563);
                    adaptor.addChild(root_0, LW563_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "lastweekday"; 
                    }

                    }
                    break;
                case 29 :
                    // EsperEPL2Grammar.g:1349:4: INSTANCEOF
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    INSTANCEOF564=(Token)match(input,INSTANCEOF,FOLLOW_INSTANCEOF_in_keywordAllowedIdent9001); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INSTANCEOF564_tree = (CommonTree)adaptor.create(INSTANCEOF564);
                    adaptor.addChild(root_0, INSTANCEOF564_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "instanceof"; 
                    }

                    }
                    break;
                case 30 :
                    // EsperEPL2Grammar.g:1350:4: CAST
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    CAST565=(Token)match(input,CAST,FOLLOW_CAST_in_keywordAllowedIdent9008); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CAST565_tree = (CommonTree)adaptor.create(CAST565);
                    adaptor.addChild(root_0, CAST565_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "cast"; 
                    }

                    }
                    break;
                case 31 :
                    // EsperEPL2Grammar.g:1351:4: SNAPSHOT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    SNAPSHOT566=(Token)match(input,SNAPSHOT,FOLLOW_SNAPSHOT_in_keywordAllowedIdent9015); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SNAPSHOT566_tree = (CommonTree)adaptor.create(SNAPSHOT566);
                    adaptor.addChild(root_0, SNAPSHOT566_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "snapshot"; 
                    }

                    }
                    break;
                case 32 :
                    // EsperEPL2Grammar.g:1352:4: VARIABLE
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    VARIABLE567=(Token)match(input,VARIABLE,FOLLOW_VARIABLE_in_keywordAllowedIdent9022); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    VARIABLE567_tree = (CommonTree)adaptor.create(VARIABLE567);
                    adaptor.addChild(root_0, VARIABLE567_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "variable"; 
                    }

                    }
                    break;
                case 33 :
                    // EsperEPL2Grammar.g:1353:4: WINDOW
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    WINDOW568=(Token)match(input,WINDOW,FOLLOW_WINDOW_in_keywordAllowedIdent9031); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    WINDOW568_tree = (CommonTree)adaptor.create(WINDOW568);
                    adaptor.addChild(root_0, WINDOW568_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "window"; 
                    }

                    }
                    break;
                case 34 :
                    // EsperEPL2Grammar.g:1354:4: LEFT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    LEFT569=(Token)match(input,LEFT,FOLLOW_LEFT_in_keywordAllowedIdent9038); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LEFT569_tree = (CommonTree)adaptor.create(LEFT569);
                    adaptor.addChild(root_0, LEFT569_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "left"; 
                    }

                    }
                    break;
                case 35 :
                    // EsperEPL2Grammar.g:1355:4: RIGHT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    RIGHT570=(Token)match(input,RIGHT,FOLLOW_RIGHT_in_keywordAllowedIdent9045); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RIGHT570_tree = (CommonTree)adaptor.create(RIGHT570);
                    adaptor.addChild(root_0, RIGHT570_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "right"; 
                    }

                    }
                    break;
                case 36 :
                    // EsperEPL2Grammar.g:1356:4: OUTER
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    OUTER571=(Token)match(input,OUTER,FOLLOW_OUTER_in_keywordAllowedIdent9052); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    OUTER571_tree = (CommonTree)adaptor.create(OUTER571);
                    adaptor.addChild(root_0, OUTER571_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "outer"; 
                    }

                    }
                    break;
                case 37 :
                    // EsperEPL2Grammar.g:1357:4: FULL
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    FULL572=(Token)match(input,FULL,FOLLOW_FULL_in_keywordAllowedIdent9059); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FULL572_tree = (CommonTree)adaptor.create(FULL572);
                    adaptor.addChild(root_0, FULL572_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "full"; 
                    }

                    }
                    break;
                case 38 :
                    // EsperEPL2Grammar.g:1358:4: JOIN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    JOIN573=(Token)match(input,JOIN,FOLLOW_JOIN_in_keywordAllowedIdent9066); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    JOIN573_tree = (CommonTree)adaptor.create(JOIN573);
                    adaptor.addChild(root_0, JOIN573_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "join"; 
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "keywordAllowedIdent"

    public static class escapableIdent_return extends ParserRuleReturnScope {
        public String result;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "escapableIdent"
    // EsperEPL2Grammar.g:1361:1: escapableIdent returns [String result] : (i1= IDENT | i2= TICKED_STRING_LITERAL );
    public final EsperEPL2GrammarParser.escapableIdent_return escapableIdent() throws RecognitionException {
        EsperEPL2GrammarParser.escapableIdent_return retval = new EsperEPL2GrammarParser.escapableIdent_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i1=null;
        Token i2=null;

        CommonTree i1_tree=null;
        CommonTree i2_tree=null;

        try {
            // EsperEPL2Grammar.g:1362:2: (i1= IDENT | i2= TICKED_STRING_LITERAL )
            int alt204=2;
            int LA204_0 = input.LA(1);

            if ( (LA204_0==IDENT) ) {
                alt204=1;
            }
            else if ( (LA204_0==TICKED_STRING_LITERAL) ) {
                alt204=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 204, 0, input);

                throw nvae;
            }
            switch (alt204) {
                case 1 :
                    // EsperEPL2Grammar.g:1362:4: i1= IDENT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    i1=(Token)match(input,IDENT,FOLLOW_IDENT_in_escapableIdent9087); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    i1_tree = (CommonTree)adaptor.create(i1);
                    adaptor.addChild(root_0, i1_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = i1.getText(); 
                    }

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1363:4: i2= TICKED_STRING_LITERAL
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    i2=(Token)match(input,TICKED_STRING_LITERAL,FOLLOW_TICKED_STRING_LITERAL_in_escapableIdent9096); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    i2_tree = (CommonTree)adaptor.create(i2);
                    adaptor.addChild(root_0, i2_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = removeTicks(i2.getText()); 
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "escapableIdent"

    public static class timePeriod_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "timePeriod"
    // EsperEPL2Grammar.g:1366:1: timePeriod : ( dayPart ( hourPart )? ( minutePart )? ( secondPart )? ( millisecondPart )? | hourPart ( minutePart )? ( secondPart )? ( millisecondPart )? | minutePart ( secondPart )? ( millisecondPart )? | secondPart ( millisecondPart )? | millisecondPart ) -> ^( TIME_PERIOD ( dayPart )? ( hourPart )? ( minutePart )? ( secondPart )? ( millisecondPart )? ) ;
    public final EsperEPL2GrammarParser.timePeriod_return timePeriod() throws RecognitionException {
        EsperEPL2GrammarParser.timePeriod_return retval = new EsperEPL2GrammarParser.timePeriod_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.dayPart_return dayPart574 = null;

        EsperEPL2GrammarParser.hourPart_return hourPart575 = null;

        EsperEPL2GrammarParser.minutePart_return minutePart576 = null;

        EsperEPL2GrammarParser.secondPart_return secondPart577 = null;

        EsperEPL2GrammarParser.millisecondPart_return millisecondPart578 = null;

        EsperEPL2GrammarParser.hourPart_return hourPart579 = null;

        EsperEPL2GrammarParser.minutePart_return minutePart580 = null;

        EsperEPL2GrammarParser.secondPart_return secondPart581 = null;

        EsperEPL2GrammarParser.millisecondPart_return millisecondPart582 = null;

        EsperEPL2GrammarParser.minutePart_return minutePart583 = null;

        EsperEPL2GrammarParser.secondPart_return secondPart584 = null;

        EsperEPL2GrammarParser.millisecondPart_return millisecondPart585 = null;

        EsperEPL2GrammarParser.secondPart_return secondPart586 = null;

        EsperEPL2GrammarParser.millisecondPart_return millisecondPart587 = null;

        EsperEPL2GrammarParser.millisecondPart_return millisecondPart588 = null;


        RewriteRuleSubtreeStream stream_secondPart=new RewriteRuleSubtreeStream(adaptor,"rule secondPart");
        RewriteRuleSubtreeStream stream_minutePart=new RewriteRuleSubtreeStream(adaptor,"rule minutePart");
        RewriteRuleSubtreeStream stream_millisecondPart=new RewriteRuleSubtreeStream(adaptor,"rule millisecondPart");
        RewriteRuleSubtreeStream stream_dayPart=new RewriteRuleSubtreeStream(adaptor,"rule dayPart");
        RewriteRuleSubtreeStream stream_hourPart=new RewriteRuleSubtreeStream(adaptor,"rule hourPart");
        try {
            // EsperEPL2Grammar.g:1367:2: ( ( dayPart ( hourPart )? ( minutePart )? ( secondPart )? ( millisecondPart )? | hourPart ( minutePart )? ( secondPart )? ( millisecondPart )? | minutePart ( secondPart )? ( millisecondPart )? | secondPart ( millisecondPart )? | millisecondPart ) -> ^( TIME_PERIOD ( dayPart )? ( hourPart )? ( minutePart )? ( secondPart )? ( millisecondPart )? ) )
            // EsperEPL2Grammar.g:1368:2: ( dayPart ( hourPart )? ( minutePart )? ( secondPart )? ( millisecondPart )? | hourPart ( minutePart )? ( secondPart )? ( millisecondPart )? | minutePart ( secondPart )? ( millisecondPart )? | secondPart ( millisecondPart )? | millisecondPart )
            {
            // EsperEPL2Grammar.g:1368:2: ( dayPart ( hourPart )? ( minutePart )? ( secondPart )? ( millisecondPart )? | hourPart ( minutePart )? ( secondPart )? ( millisecondPart )? | minutePart ( secondPart )? ( millisecondPart )? | secondPart ( millisecondPart )? | millisecondPart )
            int alt215=5;
            switch ( input.LA(1) ) {
            case NUM_INT:
                {
                switch ( input.LA(2) ) {
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt215=4;
                    }
                    break;
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt215=5;
                    }
                    break;
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt215=3;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt215=1;
                    }
                    break;
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt215=2;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 215, 1, input);

                    throw nvae;
                }

                }
                break;
            case NUM_LONG:
                {
                switch ( input.LA(2) ) {
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt215=4;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt215=1;
                    }
                    break;
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt215=5;
                    }
                    break;
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt215=3;
                    }
                    break;
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt215=2;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 215, 2, input);

                    throw nvae;
                }

                }
                break;
            case NUM_FLOAT:
                {
                switch ( input.LA(2) ) {
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt215=4;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt215=1;
                    }
                    break;
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt215=3;
                    }
                    break;
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt215=5;
                    }
                    break;
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt215=2;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 215, 3, input);

                    throw nvae;
                }

                }
                break;
            case NUM_DOUBLE:
                {
                switch ( input.LA(2) ) {
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt215=2;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt215=1;
                    }
                    break;
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt215=3;
                    }
                    break;
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt215=5;
                    }
                    break;
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt215=4;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 215, 4, input);

                    throw nvae;
                }

                }
                break;
            case IDENT:
                {
                switch ( input.LA(2) ) {
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt215=3;
                    }
                    break;
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt215=4;
                    }
                    break;
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt215=5;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt215=1;
                    }
                    break;
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt215=2;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 215, 5, input);

                    throw nvae;
                }

                }
                break;
            case QUESTION:
                {
                switch ( input.LA(2) ) {
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt215=1;
                    }
                    break;
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt215=4;
                    }
                    break;
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt215=5;
                    }
                    break;
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt215=3;
                    }
                    break;
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt215=2;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 215, 6, input);

                    throw nvae;
                }

                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 215, 0, input);

                throw nvae;
            }

            switch (alt215) {
                case 1 :
                    // EsperEPL2Grammar.g:1369:3: dayPart ( hourPart )? ( minutePart )? ( secondPart )? ( millisecondPart )?
                    {
                    pushFollow(FOLLOW_dayPart_in_timePeriod9119);
                    dayPart574=dayPart();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_dayPart.add(dayPart574.getTree());
                    // EsperEPL2Grammar.g:1369:11: ( hourPart )?
                    int alt205=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA205_1 = input.LA(2);

                            if ( ((LA205_1>=TIMEPERIOD_HOUR && LA205_1<=TIMEPERIOD_HOURS)) ) {
                                alt205=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA205_2 = input.LA(2);

                            if ( ((LA205_2>=TIMEPERIOD_HOUR && LA205_2<=TIMEPERIOD_HOURS)) ) {
                                alt205=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA205_3 = input.LA(2);

                            if ( ((LA205_3>=TIMEPERIOD_HOUR && LA205_3<=TIMEPERIOD_HOURS)) ) {
                                alt205=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA205_4 = input.LA(2);

                            if ( ((LA205_4>=TIMEPERIOD_HOUR && LA205_4<=TIMEPERIOD_HOURS)) ) {
                                alt205=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA205_5 = input.LA(2);

                            if ( ((LA205_5>=TIMEPERIOD_HOUR && LA205_5<=TIMEPERIOD_HOURS)) ) {
                                alt205=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA205_6 = input.LA(2);

                            if ( ((LA205_6>=TIMEPERIOD_HOUR && LA205_6<=TIMEPERIOD_HOURS)) ) {
                                alt205=1;
                            }
                            }
                            break;
                    }

                    switch (alt205) {
                        case 1 :
                            // EsperEPL2Grammar.g:1369:11: hourPart
                            {
                            pushFollow(FOLLOW_hourPart_in_timePeriod9121);
                            hourPart575=hourPart();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_hourPart.add(hourPart575.getTree());

                            }
                            break;

                    }

                    // EsperEPL2Grammar.g:1369:21: ( minutePart )?
                    int alt206=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA206_1 = input.LA(2);

                            if ( (LA206_1==MIN||(LA206_1>=TIMEPERIOD_MINUTE && LA206_1<=TIMEPERIOD_MINUTES)) ) {
                                alt206=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA206_2 = input.LA(2);

                            if ( (LA206_2==MIN||(LA206_2>=TIMEPERIOD_MINUTE && LA206_2<=TIMEPERIOD_MINUTES)) ) {
                                alt206=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA206_3 = input.LA(2);

                            if ( (LA206_3==MIN||(LA206_3>=TIMEPERIOD_MINUTE && LA206_3<=TIMEPERIOD_MINUTES)) ) {
                                alt206=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA206_4 = input.LA(2);

                            if ( (LA206_4==MIN||(LA206_4>=TIMEPERIOD_MINUTE && LA206_4<=TIMEPERIOD_MINUTES)) ) {
                                alt206=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA206_5 = input.LA(2);

                            if ( (LA206_5==MIN||(LA206_5>=TIMEPERIOD_MINUTE && LA206_5<=TIMEPERIOD_MINUTES)) ) {
                                alt206=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA206_6 = input.LA(2);

                            if ( (LA206_6==MIN||(LA206_6>=TIMEPERIOD_MINUTE && LA206_6<=TIMEPERIOD_MINUTES)) ) {
                                alt206=1;
                            }
                            }
                            break;
                    }

                    switch (alt206) {
                        case 1 :
                            // EsperEPL2Grammar.g:1369:21: minutePart
                            {
                            pushFollow(FOLLOW_minutePart_in_timePeriod9124);
                            minutePart576=minutePart();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_minutePart.add(minutePart576.getTree());

                            }
                            break;

                    }

                    // EsperEPL2Grammar.g:1369:33: ( secondPart )?
                    int alt207=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA207_1 = input.LA(2);

                            if ( ((LA207_1>=TIMEPERIOD_SEC && LA207_1<=TIMEPERIOD_SECONDS)) ) {
                                alt207=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA207_2 = input.LA(2);

                            if ( ((LA207_2>=TIMEPERIOD_SEC && LA207_2<=TIMEPERIOD_SECONDS)) ) {
                                alt207=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA207_3 = input.LA(2);

                            if ( ((LA207_3>=TIMEPERIOD_SEC && LA207_3<=TIMEPERIOD_SECONDS)) ) {
                                alt207=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA207_4 = input.LA(2);

                            if ( ((LA207_4>=TIMEPERIOD_SEC && LA207_4<=TIMEPERIOD_SECONDS)) ) {
                                alt207=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA207_5 = input.LA(2);

                            if ( ((LA207_5>=TIMEPERIOD_SEC && LA207_5<=TIMEPERIOD_SECONDS)) ) {
                                alt207=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA207_6 = input.LA(2);

                            if ( ((LA207_6>=TIMEPERIOD_SEC && LA207_6<=TIMEPERIOD_SECONDS)) ) {
                                alt207=1;
                            }
                            }
                            break;
                    }

                    switch (alt207) {
                        case 1 :
                            // EsperEPL2Grammar.g:1369:33: secondPart
                            {
                            pushFollow(FOLLOW_secondPart_in_timePeriod9127);
                            secondPart577=secondPart();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_secondPart.add(secondPart577.getTree());

                            }
                            break;

                    }

                    // EsperEPL2Grammar.g:1369:45: ( millisecondPart )?
                    int alt208=2;
                    int LA208_0 = input.LA(1);

                    if ( (LA208_0==NUM_DOUBLE||LA208_0==IDENT||LA208_0==NUM_INT||LA208_0==QUESTION||(LA208_0>=NUM_LONG && LA208_0<=NUM_FLOAT)) ) {
                        alt208=1;
                    }
                    switch (alt208) {
                        case 1 :
                            // EsperEPL2Grammar.g:1369:45: millisecondPart
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod9130);
                            millisecondPart578=millisecondPart();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart578.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1370:4: hourPart ( minutePart )? ( secondPart )? ( millisecondPart )?
                    {
                    pushFollow(FOLLOW_hourPart_in_timePeriod9136);
                    hourPart579=hourPart();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_hourPart.add(hourPart579.getTree());
                    // EsperEPL2Grammar.g:1370:13: ( minutePart )?
                    int alt209=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA209_1 = input.LA(2);

                            if ( (LA209_1==MIN||(LA209_1>=TIMEPERIOD_MINUTE && LA209_1<=TIMEPERIOD_MINUTES)) ) {
                                alt209=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA209_2 = input.LA(2);

                            if ( (LA209_2==MIN||(LA209_2>=TIMEPERIOD_MINUTE && LA209_2<=TIMEPERIOD_MINUTES)) ) {
                                alt209=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA209_3 = input.LA(2);

                            if ( (LA209_3==MIN||(LA209_3>=TIMEPERIOD_MINUTE && LA209_3<=TIMEPERIOD_MINUTES)) ) {
                                alt209=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA209_4 = input.LA(2);

                            if ( (LA209_4==MIN||(LA209_4>=TIMEPERIOD_MINUTE && LA209_4<=TIMEPERIOD_MINUTES)) ) {
                                alt209=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA209_5 = input.LA(2);

                            if ( (LA209_5==MIN||(LA209_5>=TIMEPERIOD_MINUTE && LA209_5<=TIMEPERIOD_MINUTES)) ) {
                                alt209=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA209_6 = input.LA(2);

                            if ( (LA209_6==MIN||(LA209_6>=TIMEPERIOD_MINUTE && LA209_6<=TIMEPERIOD_MINUTES)) ) {
                                alt209=1;
                            }
                            }
                            break;
                    }

                    switch (alt209) {
                        case 1 :
                            // EsperEPL2Grammar.g:1370:13: minutePart
                            {
                            pushFollow(FOLLOW_minutePart_in_timePeriod9138);
                            minutePart580=minutePart();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_minutePart.add(minutePart580.getTree());

                            }
                            break;

                    }

                    // EsperEPL2Grammar.g:1370:25: ( secondPart )?
                    int alt210=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA210_1 = input.LA(2);

                            if ( ((LA210_1>=TIMEPERIOD_SEC && LA210_1<=TIMEPERIOD_SECONDS)) ) {
                                alt210=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA210_2 = input.LA(2);

                            if ( ((LA210_2>=TIMEPERIOD_SEC && LA210_2<=TIMEPERIOD_SECONDS)) ) {
                                alt210=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA210_3 = input.LA(2);

                            if ( ((LA210_3>=TIMEPERIOD_SEC && LA210_3<=TIMEPERIOD_SECONDS)) ) {
                                alt210=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA210_4 = input.LA(2);

                            if ( ((LA210_4>=TIMEPERIOD_SEC && LA210_4<=TIMEPERIOD_SECONDS)) ) {
                                alt210=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA210_5 = input.LA(2);

                            if ( ((LA210_5>=TIMEPERIOD_SEC && LA210_5<=TIMEPERIOD_SECONDS)) ) {
                                alt210=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA210_6 = input.LA(2);

                            if ( ((LA210_6>=TIMEPERIOD_SEC && LA210_6<=TIMEPERIOD_SECONDS)) ) {
                                alt210=1;
                            }
                            }
                            break;
                    }

                    switch (alt210) {
                        case 1 :
                            // EsperEPL2Grammar.g:1370:25: secondPart
                            {
                            pushFollow(FOLLOW_secondPart_in_timePeriod9141);
                            secondPart581=secondPart();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_secondPart.add(secondPart581.getTree());

                            }
                            break;

                    }

                    // EsperEPL2Grammar.g:1370:37: ( millisecondPart )?
                    int alt211=2;
                    int LA211_0 = input.LA(1);

                    if ( (LA211_0==NUM_DOUBLE||LA211_0==IDENT||LA211_0==NUM_INT||LA211_0==QUESTION||(LA211_0>=NUM_LONG && LA211_0<=NUM_FLOAT)) ) {
                        alt211=1;
                    }
                    switch (alt211) {
                        case 1 :
                            // EsperEPL2Grammar.g:1370:37: millisecondPart
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod9144);
                            millisecondPart582=millisecondPart();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart582.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1371:4: minutePart ( secondPart )? ( millisecondPart )?
                    {
                    pushFollow(FOLLOW_minutePart_in_timePeriod9150);
                    minutePart583=minutePart();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_minutePart.add(minutePart583.getTree());
                    // EsperEPL2Grammar.g:1371:15: ( secondPart )?
                    int alt212=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA212_1 = input.LA(2);

                            if ( ((LA212_1>=TIMEPERIOD_SEC && LA212_1<=TIMEPERIOD_SECONDS)) ) {
                                alt212=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA212_2 = input.LA(2);

                            if ( ((LA212_2>=TIMEPERIOD_SEC && LA212_2<=TIMEPERIOD_SECONDS)) ) {
                                alt212=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA212_3 = input.LA(2);

                            if ( ((LA212_3>=TIMEPERIOD_SEC && LA212_3<=TIMEPERIOD_SECONDS)) ) {
                                alt212=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA212_4 = input.LA(2);

                            if ( ((LA212_4>=TIMEPERIOD_SEC && LA212_4<=TIMEPERIOD_SECONDS)) ) {
                                alt212=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA212_5 = input.LA(2);

                            if ( ((LA212_5>=TIMEPERIOD_SEC && LA212_5<=TIMEPERIOD_SECONDS)) ) {
                                alt212=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA212_6 = input.LA(2);

                            if ( ((LA212_6>=TIMEPERIOD_SEC && LA212_6<=TIMEPERIOD_SECONDS)) ) {
                                alt212=1;
                            }
                            }
                            break;
                    }

                    switch (alt212) {
                        case 1 :
                            // EsperEPL2Grammar.g:1371:15: secondPart
                            {
                            pushFollow(FOLLOW_secondPart_in_timePeriod9152);
                            secondPart584=secondPart();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_secondPart.add(secondPart584.getTree());

                            }
                            break;

                    }

                    // EsperEPL2Grammar.g:1371:27: ( millisecondPart )?
                    int alt213=2;
                    int LA213_0 = input.LA(1);

                    if ( (LA213_0==NUM_DOUBLE||LA213_0==IDENT||LA213_0==NUM_INT||LA213_0==QUESTION||(LA213_0>=NUM_LONG && LA213_0<=NUM_FLOAT)) ) {
                        alt213=1;
                    }
                    switch (alt213) {
                        case 1 :
                            // EsperEPL2Grammar.g:1371:27: millisecondPart
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod9155);
                            millisecondPart585=millisecondPart();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart585.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:1372:4: secondPart ( millisecondPart )?
                    {
                    pushFollow(FOLLOW_secondPart_in_timePeriod9161);
                    secondPart586=secondPart();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_secondPart.add(secondPart586.getTree());
                    // EsperEPL2Grammar.g:1372:15: ( millisecondPart )?
                    int alt214=2;
                    int LA214_0 = input.LA(1);

                    if ( (LA214_0==NUM_DOUBLE||LA214_0==IDENT||LA214_0==NUM_INT||LA214_0==QUESTION||(LA214_0>=NUM_LONG && LA214_0<=NUM_FLOAT)) ) {
                        alt214=1;
                    }
                    switch (alt214) {
                        case 1 :
                            // EsperEPL2Grammar.g:1372:15: millisecondPart
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod9163);
                            millisecondPart587=millisecondPart();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart587.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 5 :
                    // EsperEPL2Grammar.g:1373:4: millisecondPart
                    {
                    pushFollow(FOLLOW_millisecondPart_in_timePeriod9169);
                    millisecondPart588=millisecondPart();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart588.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: dayPart, minutePart, secondPart, hourPart, millisecondPart
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1375:3: -> ^( TIME_PERIOD ( dayPart )? ( hourPart )? ( minutePart )? ( secondPart )? ( millisecondPart )? )
            {
                // EsperEPL2Grammar.g:1375:6: ^( TIME_PERIOD ( dayPart )? ( hourPart )? ( minutePart )? ( secondPart )? ( millisecondPart )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TIME_PERIOD, "TIME_PERIOD"), root_1);

                // EsperEPL2Grammar.g:1375:20: ( dayPart )?
                if ( stream_dayPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_dayPart.nextTree());

                }
                stream_dayPart.reset();
                // EsperEPL2Grammar.g:1375:29: ( hourPart )?
                if ( stream_hourPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_hourPart.nextTree());

                }
                stream_hourPart.reset();
                // EsperEPL2Grammar.g:1375:39: ( minutePart )?
                if ( stream_minutePart.hasNext() ) {
                    adaptor.addChild(root_1, stream_minutePart.nextTree());

                }
                stream_minutePart.reset();
                // EsperEPL2Grammar.g:1375:51: ( secondPart )?
                if ( stream_secondPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_secondPart.nextTree());

                }
                stream_secondPart.reset();
                // EsperEPL2Grammar.g:1375:63: ( millisecondPart )?
                if ( stream_millisecondPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_millisecondPart.nextTree());

                }
                stream_millisecondPart.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "timePeriod"

    public static class dayPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dayPart"
    // EsperEPL2Grammar.g:1378:1: dayPart : ( number | i= IDENT | substitution ) ( TIMEPERIOD_DAYS | TIMEPERIOD_DAY ) -> {i!= null}? ^( DAY_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( DAY_PART ( number )? ( substitution )? ) ;
    public final EsperEPL2GrammarParser.dayPart_return dayPart() throws RecognitionException {
        EsperEPL2GrammarParser.dayPart_return retval = new EsperEPL2GrammarParser.dayPart_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token TIMEPERIOD_DAYS591=null;
        Token TIMEPERIOD_DAY592=null;
        EsperEPL2GrammarParser.number_return number589 = null;

        EsperEPL2GrammarParser.substitution_return substitution590 = null;


        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_DAYS591_tree=null;
        CommonTree TIMEPERIOD_DAY592_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_DAY=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_DAY");
        RewriteRuleTokenStream stream_TIMEPERIOD_DAYS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_DAYS");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            // EsperEPL2Grammar.g:1379:2: ( ( number | i= IDENT | substitution ) ( TIMEPERIOD_DAYS | TIMEPERIOD_DAY ) -> {i!= null}? ^( DAY_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( DAY_PART ( number )? ( substitution )? ) )
            // EsperEPL2Grammar.g:1379:4: ( number | i= IDENT | substitution ) ( TIMEPERIOD_DAYS | TIMEPERIOD_DAY )
            {
            // EsperEPL2Grammar.g:1379:4: ( number | i= IDENT | substitution )
            int alt216=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt216=1;
                }
                break;
            case IDENT:
                {
                alt216=2;
                }
                break;
            case QUESTION:
                {
                alt216=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 216, 0, input);

                throw nvae;
            }

            switch (alt216) {
                case 1 :
                    // EsperEPL2Grammar.g:1379:5: number
                    {
                    pushFollow(FOLLOW_number_in_dayPart9207);
                    number589=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number589.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1379:12: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_dayPart9211); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1379:20: substitution
                    {
                    pushFollow(FOLLOW_substitution_in_dayPart9213);
                    substitution590=substitution();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution590.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:1379:34: ( TIMEPERIOD_DAYS | TIMEPERIOD_DAY )
            int alt217=2;
            int LA217_0 = input.LA(1);

            if ( (LA217_0==TIMEPERIOD_DAYS) ) {
                alt217=1;
            }
            else if ( (LA217_0==TIMEPERIOD_DAY) ) {
                alt217=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 217, 0, input);

                throw nvae;
            }
            switch (alt217) {
                case 1 :
                    // EsperEPL2Grammar.g:1379:35: TIMEPERIOD_DAYS
                    {
                    TIMEPERIOD_DAYS591=(Token)match(input,TIMEPERIOD_DAYS,FOLLOW_TIMEPERIOD_DAYS_in_dayPart9217); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_DAYS.add(TIMEPERIOD_DAYS591);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1379:53: TIMEPERIOD_DAY
                    {
                    TIMEPERIOD_DAY592=(Token)match(input,TIMEPERIOD_DAY,FOLLOW_TIMEPERIOD_DAY_in_dayPart9221); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_DAY.add(TIMEPERIOD_DAY592);


                    }
                    break;

            }



            // AST REWRITE
            // elements: substitution, number, i
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1380:3: -> {i!= null}? ^( DAY_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
            if (i!= null) {
                // EsperEPL2Grammar.g:1380:18: ^( DAY_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DAY_PART, "DAY_PART"), root_1);

                // EsperEPL2Grammar.g:1380:29: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1380:47: ^( EVENT_PROP_SIMPLE $i)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1381:3: -> ^( DAY_PART ( number )? ( substitution )? )
            {
                // EsperEPL2Grammar.g:1381:6: ^( DAY_PART ( number )? ( substitution )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DAY_PART, "DAY_PART"), root_1);

                // EsperEPL2Grammar.g:1381:17: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:1381:25: ( substitution )?
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());

                }
                stream_substitution.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "dayPart"

    public static class hourPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "hourPart"
    // EsperEPL2Grammar.g:1384:1: hourPart : ( number | i= IDENT | substitution ) ( TIMEPERIOD_HOURS | TIMEPERIOD_HOUR ) -> {i!= null}? ^( HOUR_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( HOUR_PART ( number )? ( substitution )? ) ;
    public final EsperEPL2GrammarParser.hourPart_return hourPart() throws RecognitionException {
        EsperEPL2GrammarParser.hourPart_return retval = new EsperEPL2GrammarParser.hourPart_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token TIMEPERIOD_HOURS595=null;
        Token TIMEPERIOD_HOUR596=null;
        EsperEPL2GrammarParser.number_return number593 = null;

        EsperEPL2GrammarParser.substitution_return substitution594 = null;


        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_HOURS595_tree=null;
        CommonTree TIMEPERIOD_HOUR596_tree=null;
        RewriteRuleTokenStream stream_TIMEPERIOD_HOURS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_HOURS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_HOUR=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_HOUR");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            // EsperEPL2Grammar.g:1385:2: ( ( number | i= IDENT | substitution ) ( TIMEPERIOD_HOURS | TIMEPERIOD_HOUR ) -> {i!= null}? ^( HOUR_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( HOUR_PART ( number )? ( substitution )? ) )
            // EsperEPL2Grammar.g:1385:4: ( number | i= IDENT | substitution ) ( TIMEPERIOD_HOURS | TIMEPERIOD_HOUR )
            {
            // EsperEPL2Grammar.g:1385:4: ( number | i= IDENT | substitution )
            int alt218=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt218=1;
                }
                break;
            case IDENT:
                {
                alt218=2;
                }
                break;
            case QUESTION:
                {
                alt218=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 218, 0, input);

                throw nvae;
            }

            switch (alt218) {
                case 1 :
                    // EsperEPL2Grammar.g:1385:5: number
                    {
                    pushFollow(FOLLOW_number_in_hourPart9270);
                    number593=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number593.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1385:12: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_hourPart9274); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1385:20: substitution
                    {
                    pushFollow(FOLLOW_substitution_in_hourPart9276);
                    substitution594=substitution();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution594.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:1385:34: ( TIMEPERIOD_HOURS | TIMEPERIOD_HOUR )
            int alt219=2;
            int LA219_0 = input.LA(1);

            if ( (LA219_0==TIMEPERIOD_HOURS) ) {
                alt219=1;
            }
            else if ( (LA219_0==TIMEPERIOD_HOUR) ) {
                alt219=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 219, 0, input);

                throw nvae;
            }
            switch (alt219) {
                case 1 :
                    // EsperEPL2Grammar.g:1385:35: TIMEPERIOD_HOURS
                    {
                    TIMEPERIOD_HOURS595=(Token)match(input,TIMEPERIOD_HOURS,FOLLOW_TIMEPERIOD_HOURS_in_hourPart9280); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_HOURS.add(TIMEPERIOD_HOURS595);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1385:54: TIMEPERIOD_HOUR
                    {
                    TIMEPERIOD_HOUR596=(Token)match(input,TIMEPERIOD_HOUR,FOLLOW_TIMEPERIOD_HOUR_in_hourPart9284); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_HOUR.add(TIMEPERIOD_HOUR596);


                    }
                    break;

            }



            // AST REWRITE
            // elements: number, i, substitution
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1386:3: -> {i!= null}? ^( HOUR_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
            if (i!= null) {
                // EsperEPL2Grammar.g:1386:18: ^( HOUR_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(HOUR_PART, "HOUR_PART"), root_1);

                // EsperEPL2Grammar.g:1386:30: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1386:48: ^( EVENT_PROP_SIMPLE $i)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1387:3: -> ^( HOUR_PART ( number )? ( substitution )? )
            {
                // EsperEPL2Grammar.g:1387:6: ^( HOUR_PART ( number )? ( substitution )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(HOUR_PART, "HOUR_PART"), root_1);

                // EsperEPL2Grammar.g:1387:18: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:1387:26: ( substitution )?
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());

                }
                stream_substitution.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "hourPart"

    public static class minutePart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "minutePart"
    // EsperEPL2Grammar.g:1390:1: minutePart : ( number | i= IDENT | substitution ) ( TIMEPERIOD_MINUTES | TIMEPERIOD_MINUTE | MIN ) -> {i!= null}? ^( MINUTE_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( MINUTE_PART ( number )? ( substitution )? ) ;
    public final EsperEPL2GrammarParser.minutePart_return minutePart() throws RecognitionException {
        EsperEPL2GrammarParser.minutePart_return retval = new EsperEPL2GrammarParser.minutePart_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token TIMEPERIOD_MINUTES599=null;
        Token TIMEPERIOD_MINUTE600=null;
        Token MIN601=null;
        EsperEPL2GrammarParser.number_return number597 = null;

        EsperEPL2GrammarParser.substitution_return substitution598 = null;


        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_MINUTES599_tree=null;
        CommonTree TIMEPERIOD_MINUTE600_tree=null;
        CommonTree MIN601_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_MINUTE=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MINUTE");
        RewriteRuleTokenStream stream_MIN=new RewriteRuleTokenStream(adaptor,"token MIN");
        RewriteRuleTokenStream stream_TIMEPERIOD_MINUTES=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MINUTES");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            // EsperEPL2Grammar.g:1391:2: ( ( number | i= IDENT | substitution ) ( TIMEPERIOD_MINUTES | TIMEPERIOD_MINUTE | MIN ) -> {i!= null}? ^( MINUTE_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( MINUTE_PART ( number )? ( substitution )? ) )
            // EsperEPL2Grammar.g:1391:4: ( number | i= IDENT | substitution ) ( TIMEPERIOD_MINUTES | TIMEPERIOD_MINUTE | MIN )
            {
            // EsperEPL2Grammar.g:1391:4: ( number | i= IDENT | substitution )
            int alt220=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt220=1;
                }
                break;
            case IDENT:
                {
                alt220=2;
                }
                break;
            case QUESTION:
                {
                alt220=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 220, 0, input);

                throw nvae;
            }

            switch (alt220) {
                case 1 :
                    // EsperEPL2Grammar.g:1391:5: number
                    {
                    pushFollow(FOLLOW_number_in_minutePart9333);
                    number597=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number597.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1391:12: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_minutePart9337); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1391:20: substitution
                    {
                    pushFollow(FOLLOW_substitution_in_minutePart9339);
                    substitution598=substitution();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution598.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:1391:34: ( TIMEPERIOD_MINUTES | TIMEPERIOD_MINUTE | MIN )
            int alt221=3;
            switch ( input.LA(1) ) {
            case TIMEPERIOD_MINUTES:
                {
                alt221=1;
                }
                break;
            case TIMEPERIOD_MINUTE:
                {
                alt221=2;
                }
                break;
            case MIN:
                {
                alt221=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 221, 0, input);

                throw nvae;
            }

            switch (alt221) {
                case 1 :
                    // EsperEPL2Grammar.g:1391:35: TIMEPERIOD_MINUTES
                    {
                    TIMEPERIOD_MINUTES599=(Token)match(input,TIMEPERIOD_MINUTES,FOLLOW_TIMEPERIOD_MINUTES_in_minutePart9343); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MINUTES.add(TIMEPERIOD_MINUTES599);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1391:56: TIMEPERIOD_MINUTE
                    {
                    TIMEPERIOD_MINUTE600=(Token)match(input,TIMEPERIOD_MINUTE,FOLLOW_TIMEPERIOD_MINUTE_in_minutePart9347); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MINUTE.add(TIMEPERIOD_MINUTE600);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1391:76: MIN
                    {
                    MIN601=(Token)match(input,MIN,FOLLOW_MIN_in_minutePart9351); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MIN.add(MIN601);


                    }
                    break;

            }



            // AST REWRITE
            // elements: i, number, substitution
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1392:3: -> {i!= null}? ^( MINUTE_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
            if (i!= null) {
                // EsperEPL2Grammar.g:1392:18: ^( MINUTE_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MINUTE_PART, "MINUTE_PART"), root_1);

                // EsperEPL2Grammar.g:1392:32: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1392:50: ^( EVENT_PROP_SIMPLE $i)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1393:3: -> ^( MINUTE_PART ( number )? ( substitution )? )
            {
                // EsperEPL2Grammar.g:1393:6: ^( MINUTE_PART ( number )? ( substitution )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MINUTE_PART, "MINUTE_PART"), root_1);

                // EsperEPL2Grammar.g:1393:20: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:1393:28: ( substitution )?
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());

                }
                stream_substitution.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "minutePart"

    public static class secondPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "secondPart"
    // EsperEPL2Grammar.g:1396:1: secondPart : ( number | i= IDENT | substitution ) ( TIMEPERIOD_SECONDS | TIMEPERIOD_SECOND | TIMEPERIOD_SEC ) -> {i!= null}? ^( SECOND_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( SECOND_PART ( number )? ( substitution )? ) ;
    public final EsperEPL2GrammarParser.secondPart_return secondPart() throws RecognitionException {
        EsperEPL2GrammarParser.secondPart_return retval = new EsperEPL2GrammarParser.secondPart_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token TIMEPERIOD_SECONDS604=null;
        Token TIMEPERIOD_SECOND605=null;
        Token TIMEPERIOD_SEC606=null;
        EsperEPL2GrammarParser.number_return number602 = null;

        EsperEPL2GrammarParser.substitution_return substitution603 = null;


        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_SECONDS604_tree=null;
        CommonTree TIMEPERIOD_SECOND605_tree=null;
        CommonTree TIMEPERIOD_SEC606_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_SEC=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SEC");
        RewriteRuleTokenStream stream_TIMEPERIOD_SECOND=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SECOND");
        RewriteRuleTokenStream stream_TIMEPERIOD_SECONDS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SECONDS");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            // EsperEPL2Grammar.g:1397:2: ( ( number | i= IDENT | substitution ) ( TIMEPERIOD_SECONDS | TIMEPERIOD_SECOND | TIMEPERIOD_SEC ) -> {i!= null}? ^( SECOND_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( SECOND_PART ( number )? ( substitution )? ) )
            // EsperEPL2Grammar.g:1397:4: ( number | i= IDENT | substitution ) ( TIMEPERIOD_SECONDS | TIMEPERIOD_SECOND | TIMEPERIOD_SEC )
            {
            // EsperEPL2Grammar.g:1397:4: ( number | i= IDENT | substitution )
            int alt222=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt222=1;
                }
                break;
            case IDENT:
                {
                alt222=2;
                }
                break;
            case QUESTION:
                {
                alt222=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 222, 0, input);

                throw nvae;
            }

            switch (alt222) {
                case 1 :
                    // EsperEPL2Grammar.g:1397:5: number
                    {
                    pushFollow(FOLLOW_number_in_secondPart9401);
                    number602=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number602.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1397:12: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_secondPart9405); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1397:20: substitution
                    {
                    pushFollow(FOLLOW_substitution_in_secondPart9407);
                    substitution603=substitution();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution603.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:1397:34: ( TIMEPERIOD_SECONDS | TIMEPERIOD_SECOND | TIMEPERIOD_SEC )
            int alt223=3;
            switch ( input.LA(1) ) {
            case TIMEPERIOD_SECONDS:
                {
                alt223=1;
                }
                break;
            case TIMEPERIOD_SECOND:
                {
                alt223=2;
                }
                break;
            case TIMEPERIOD_SEC:
                {
                alt223=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 223, 0, input);

                throw nvae;
            }

            switch (alt223) {
                case 1 :
                    // EsperEPL2Grammar.g:1397:35: TIMEPERIOD_SECONDS
                    {
                    TIMEPERIOD_SECONDS604=(Token)match(input,TIMEPERIOD_SECONDS,FOLLOW_TIMEPERIOD_SECONDS_in_secondPart9411); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SECONDS.add(TIMEPERIOD_SECONDS604);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1397:56: TIMEPERIOD_SECOND
                    {
                    TIMEPERIOD_SECOND605=(Token)match(input,TIMEPERIOD_SECOND,FOLLOW_TIMEPERIOD_SECOND_in_secondPart9415); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SECOND.add(TIMEPERIOD_SECOND605);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1397:76: TIMEPERIOD_SEC
                    {
                    TIMEPERIOD_SEC606=(Token)match(input,TIMEPERIOD_SEC,FOLLOW_TIMEPERIOD_SEC_in_secondPart9419); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SEC.add(TIMEPERIOD_SEC606);


                    }
                    break;

            }



            // AST REWRITE
            // elements: number, i, substitution
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1398:3: -> {i!= null}? ^( SECOND_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
            if (i!= null) {
                // EsperEPL2Grammar.g:1398:18: ^( SECOND_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SECOND_PART, "SECOND_PART"), root_1);

                // EsperEPL2Grammar.g:1398:32: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1398:50: ^( EVENT_PROP_SIMPLE $i)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1399:3: -> ^( SECOND_PART ( number )? ( substitution )? )
            {
                // EsperEPL2Grammar.g:1399:6: ^( SECOND_PART ( number )? ( substitution )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SECOND_PART, "SECOND_PART"), root_1);

                // EsperEPL2Grammar.g:1399:20: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:1399:28: ( substitution )?
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());

                }
                stream_substitution.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "secondPart"

    public static class millisecondPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "millisecondPart"
    // EsperEPL2Grammar.g:1402:1: millisecondPart : ( number | i= IDENT | substitution ) ( TIMEPERIOD_MILLISECONDS | TIMEPERIOD_MILLISECOND | TIMEPERIOD_MILLISEC ) -> {i!= null}? ^( MILLISECOND_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( MILLISECOND_PART ( number )? ( substitution )? ) ;
    public final EsperEPL2GrammarParser.millisecondPart_return millisecondPart() throws RecognitionException {
        EsperEPL2GrammarParser.millisecondPart_return retval = new EsperEPL2GrammarParser.millisecondPart_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token TIMEPERIOD_MILLISECONDS609=null;
        Token TIMEPERIOD_MILLISECOND610=null;
        Token TIMEPERIOD_MILLISEC611=null;
        EsperEPL2GrammarParser.number_return number607 = null;

        EsperEPL2GrammarParser.substitution_return substitution608 = null;


        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_MILLISECONDS609_tree=null;
        CommonTree TIMEPERIOD_MILLISECOND610_tree=null;
        CommonTree TIMEPERIOD_MILLISEC611_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_MILLISEC=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MILLISEC");
        RewriteRuleTokenStream stream_TIMEPERIOD_MILLISECOND=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MILLISECOND");
        RewriteRuleTokenStream stream_TIMEPERIOD_MILLISECONDS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MILLISECONDS");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            // EsperEPL2Grammar.g:1403:2: ( ( number | i= IDENT | substitution ) ( TIMEPERIOD_MILLISECONDS | TIMEPERIOD_MILLISECOND | TIMEPERIOD_MILLISEC ) -> {i!= null}? ^( MILLISECOND_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( MILLISECOND_PART ( number )? ( substitution )? ) )
            // EsperEPL2Grammar.g:1403:4: ( number | i= IDENT | substitution ) ( TIMEPERIOD_MILLISECONDS | TIMEPERIOD_MILLISECOND | TIMEPERIOD_MILLISEC )
            {
            // EsperEPL2Grammar.g:1403:4: ( number | i= IDENT | substitution )
            int alt224=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt224=1;
                }
                break;
            case IDENT:
                {
                alt224=2;
                }
                break;
            case QUESTION:
                {
                alt224=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 224, 0, input);

                throw nvae;
            }

            switch (alt224) {
                case 1 :
                    // EsperEPL2Grammar.g:1403:5: number
                    {
                    pushFollow(FOLLOW_number_in_millisecondPart9469);
                    number607=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number607.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1403:12: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_millisecondPart9473); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1403:20: substitution
                    {
                    pushFollow(FOLLOW_substitution_in_millisecondPart9475);
                    substitution608=substitution();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution608.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:1403:34: ( TIMEPERIOD_MILLISECONDS | TIMEPERIOD_MILLISECOND | TIMEPERIOD_MILLISEC )
            int alt225=3;
            switch ( input.LA(1) ) {
            case TIMEPERIOD_MILLISECONDS:
                {
                alt225=1;
                }
                break;
            case TIMEPERIOD_MILLISECOND:
                {
                alt225=2;
                }
                break;
            case TIMEPERIOD_MILLISEC:
                {
                alt225=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 225, 0, input);

                throw nvae;
            }

            switch (alt225) {
                case 1 :
                    // EsperEPL2Grammar.g:1403:35: TIMEPERIOD_MILLISECONDS
                    {
                    TIMEPERIOD_MILLISECONDS609=(Token)match(input,TIMEPERIOD_MILLISECONDS,FOLLOW_TIMEPERIOD_MILLISECONDS_in_millisecondPart9479); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MILLISECONDS.add(TIMEPERIOD_MILLISECONDS609);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1403:61: TIMEPERIOD_MILLISECOND
                    {
                    TIMEPERIOD_MILLISECOND610=(Token)match(input,TIMEPERIOD_MILLISECOND,FOLLOW_TIMEPERIOD_MILLISECOND_in_millisecondPart9483); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MILLISECOND.add(TIMEPERIOD_MILLISECOND610);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1403:86: TIMEPERIOD_MILLISEC
                    {
                    TIMEPERIOD_MILLISEC611=(Token)match(input,TIMEPERIOD_MILLISEC,FOLLOW_TIMEPERIOD_MILLISEC_in_millisecondPart9487); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MILLISEC.add(TIMEPERIOD_MILLISEC611);


                    }
                    break;

            }



            // AST REWRITE
            // elements: substitution, i, number
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1404:3: -> {i!= null}? ^( MILLISECOND_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
            if (i!= null) {
                // EsperEPL2Grammar.g:1404:18: ^( MILLISECOND_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MILLISECOND_PART, "MILLISECOND_PART"), root_1);

                // EsperEPL2Grammar.g:1404:37: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1404:55: ^( EVENT_PROP_SIMPLE $i)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1405:3: -> ^( MILLISECOND_PART ( number )? ( substitution )? )
            {
                // EsperEPL2Grammar.g:1405:6: ^( MILLISECOND_PART ( number )? ( substitution )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MILLISECOND_PART, "MILLISECOND_PART"), root_1);

                // EsperEPL2Grammar.g:1405:25: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:1405:33: ( substitution )?
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());

                }
                stream_substitution.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "millisecondPart"

    public static class number_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "number"
    // EsperEPL2Grammar.g:1408:1: number : (ni= NUM_INT -> INT_TYPE[$ni] | nl= NUM_LONG -> LONG_TYPE[$nl] | nf= NUM_FLOAT -> FLOAT_TYPE[$nf] | nd= NUM_DOUBLE -> DOUBLE_TYPE[$nd] );
    public final EsperEPL2GrammarParser.number_return number() throws RecognitionException {
        EsperEPL2GrammarParser.number_return retval = new EsperEPL2GrammarParser.number_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token ni=null;
        Token nl=null;
        Token nf=null;
        Token nd=null;

        CommonTree ni_tree=null;
        CommonTree nl_tree=null;
        CommonTree nf_tree=null;
        CommonTree nd_tree=null;
        RewriteRuleTokenStream stream_NUM_LONG=new RewriteRuleTokenStream(adaptor,"token NUM_LONG");
        RewriteRuleTokenStream stream_NUM_DOUBLE=new RewriteRuleTokenStream(adaptor,"token NUM_DOUBLE");
        RewriteRuleTokenStream stream_NUM_FLOAT=new RewriteRuleTokenStream(adaptor,"token NUM_FLOAT");
        RewriteRuleTokenStream stream_NUM_INT=new RewriteRuleTokenStream(adaptor,"token NUM_INT");

        try {
            // EsperEPL2Grammar.g:1409:5: (ni= NUM_INT -> INT_TYPE[$ni] | nl= NUM_LONG -> LONG_TYPE[$nl] | nf= NUM_FLOAT -> FLOAT_TYPE[$nf] | nd= NUM_DOUBLE -> DOUBLE_TYPE[$nd] )
            int alt226=4;
            switch ( input.LA(1) ) {
            case NUM_INT:
                {
                alt226=1;
                }
                break;
            case NUM_LONG:
                {
                alt226=2;
                }
                break;
            case NUM_FLOAT:
                {
                alt226=3;
                }
                break;
            case NUM_DOUBLE:
                {
                alt226=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 226, 0, input);

                throw nvae;
            }

            switch (alt226) {
                case 1 :
                    // EsperEPL2Grammar.g:1409:9: ni= NUM_INT
                    {
                    ni=(Token)match(input,NUM_INT,FOLLOW_NUM_INT_in_number9542); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_INT.add(ni);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1409:20: -> INT_TYPE[$ni]
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(INT_TYPE, ni));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1410:9: nl= NUM_LONG
                    {
                    nl=(Token)match(input,NUM_LONG,FOLLOW_NUM_LONG_in_number9559); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_LONG.add(nl);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1410:21: -> LONG_TYPE[$nl]
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(LONG_TYPE, nl));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1411:9: nf= NUM_FLOAT
                    {
                    nf=(Token)match(input,NUM_FLOAT,FOLLOW_NUM_FLOAT_in_number9576); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_FLOAT.add(nf);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1411:22: -> FLOAT_TYPE[$nf]
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(FLOAT_TYPE, nf));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:1412:9: nd= NUM_DOUBLE
                    {
                    nd=(Token)match(input,NUM_DOUBLE,FOLLOW_NUM_DOUBLE_in_number9593); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_DOUBLE.add(nd);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1412:23: -> DOUBLE_TYPE[$nd]
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(DOUBLE_TYPE, nd));

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "number"

    public static class substitution_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "substitution"
    // EsperEPL2Grammar.g:1415:1: substitution : q= QUESTION -> SUBSTITUTION[$q] ;
    public final EsperEPL2GrammarParser.substitution_return substitution() throws RecognitionException {
        EsperEPL2GrammarParser.substitution_return retval = new EsperEPL2GrammarParser.substitution_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token q=null;

        CommonTree q_tree=null;
        RewriteRuleTokenStream stream_QUESTION=new RewriteRuleTokenStream(adaptor,"token QUESTION");

        try {
            // EsperEPL2Grammar.g:1416:2: (q= QUESTION -> SUBSTITUTION[$q] )
            // EsperEPL2Grammar.g:1416:4: q= QUESTION
            {
            q=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_substitution9614); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_QUESTION.add(q);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1416:15: -> SUBSTITUTION[$q]
            {
                adaptor.addChild(root_0, (CommonTree)adaptor.create(SUBSTITUTION, q));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "substitution"

    public static class constant_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "constant"
    // EsperEPL2Grammar.g:1419:1: constant : ( numberconstant | stringconstant | t= BOOLEAN_TRUE -> ^( BOOL_TYPE[$t] ) | f= BOOLEAN_FALSE -> ^( BOOL_TYPE[$f] ) | nu= VALUE_NULL -> ^( NULL_TYPE[$nu] ) );
    public final EsperEPL2GrammarParser.constant_return constant() throws RecognitionException {
        EsperEPL2GrammarParser.constant_return retval = new EsperEPL2GrammarParser.constant_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token t=null;
        Token f=null;
        Token nu=null;
        EsperEPL2GrammarParser.numberconstant_return numberconstant612 = null;

        EsperEPL2GrammarParser.stringconstant_return stringconstant613 = null;


        CommonTree t_tree=null;
        CommonTree f_tree=null;
        CommonTree nu_tree=null;
        RewriteRuleTokenStream stream_BOOLEAN_TRUE=new RewriteRuleTokenStream(adaptor,"token BOOLEAN_TRUE");
        RewriteRuleTokenStream stream_VALUE_NULL=new RewriteRuleTokenStream(adaptor,"token VALUE_NULL");
        RewriteRuleTokenStream stream_BOOLEAN_FALSE=new RewriteRuleTokenStream(adaptor,"token BOOLEAN_FALSE");

        try {
            // EsperEPL2Grammar.g:1420:2: ( numberconstant | stringconstant | t= BOOLEAN_TRUE -> ^( BOOL_TYPE[$t] ) | f= BOOLEAN_FALSE -> ^( BOOL_TYPE[$f] ) | nu= VALUE_NULL -> ^( NULL_TYPE[$nu] ) )
            int alt227=5;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case PLUS:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt227=1;
                }
                break;
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
                {
                alt227=2;
                }
                break;
            case BOOLEAN_TRUE:
                {
                alt227=3;
                }
                break;
            case BOOLEAN_FALSE:
                {
                alt227=4;
                }
                break;
            case VALUE_NULL:
                {
                alt227=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 227, 0, input);

                throw nvae;
            }

            switch (alt227) {
                case 1 :
                    // EsperEPL2Grammar.g:1420:6: numberconstant
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_numberconstant_in_constant9633);
                    numberconstant612=numberconstant();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numberconstant612.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1421:6: stringconstant
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_stringconstant_in_constant9640);
                    stringconstant613=stringconstant();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stringconstant613.getTree());

                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1422:10: t= BOOLEAN_TRUE
                    {
                    t=(Token)match(input,BOOLEAN_TRUE,FOLLOW_BOOLEAN_TRUE_in_constant9653); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BOOLEAN_TRUE.add(t);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1422:25: -> ^( BOOL_TYPE[$t] )
                    {
                        // EsperEPL2Grammar.g:1422:28: ^( BOOL_TYPE[$t] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BOOL_TYPE, t), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:1423:10: f= BOOLEAN_FALSE
                    {
                    f=(Token)match(input,BOOLEAN_FALSE,FOLLOW_BOOLEAN_FALSE_in_constant9673); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BOOLEAN_FALSE.add(f);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1423:26: -> ^( BOOL_TYPE[$f] )
                    {
                        // EsperEPL2Grammar.g:1423:29: ^( BOOL_TYPE[$f] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BOOL_TYPE, f), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    // EsperEPL2Grammar.g:1424:10: nu= VALUE_NULL
                    {
                    nu=(Token)match(input,VALUE_NULL,FOLLOW_VALUE_NULL_in_constant9693); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_VALUE_NULL.add(nu);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1424:24: -> ^( NULL_TYPE[$nu] )
                    {
                        // EsperEPL2Grammar.g:1424:27: ^( NULL_TYPE[$nu] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NULL_TYPE, nu), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "constant"

    public static class numberconstant_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "numberconstant"
    // EsperEPL2Grammar.g:1427:1: numberconstant : (m= MINUS | p= PLUS )? number -> {$m != null}? -> number ;
    public final EsperEPL2GrammarParser.numberconstant_return numberconstant() throws RecognitionException {
        EsperEPL2GrammarParser.numberconstant_return retval = new EsperEPL2GrammarParser.numberconstant_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token m=null;
        Token p=null;
        EsperEPL2GrammarParser.number_return number614 = null;


        CommonTree m_tree=null;
        CommonTree p_tree=null;
        RewriteRuleTokenStream stream_PLUS=new RewriteRuleTokenStream(adaptor,"token PLUS");
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        try {
            // EsperEPL2Grammar.g:1428:2: ( (m= MINUS | p= PLUS )? number -> {$m != null}? -> number )
            // EsperEPL2Grammar.g:1428:5: (m= MINUS | p= PLUS )? number
            {
            // EsperEPL2Grammar.g:1428:5: (m= MINUS | p= PLUS )?
            int alt228=3;
            int LA228_0 = input.LA(1);

            if ( (LA228_0==MINUS) ) {
                alt228=1;
            }
            else if ( (LA228_0==PLUS) ) {
                alt228=2;
            }
            switch (alt228) {
                case 1 :
                    // EsperEPL2Grammar.g:1428:6: m= MINUS
                    {
                    m=(Token)match(input,MINUS,FOLLOW_MINUS_in_numberconstant9715); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MINUS.add(m);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1428:16: p= PLUS
                    {
                    p=(Token)match(input,PLUS,FOLLOW_PLUS_in_numberconstant9721); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PLUS.add(p);


                    }
                    break;

            }

            pushFollow(FOLLOW_number_in_numberconstant9725);
            number614=number();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_number.add(number614.getTree());


            // AST REWRITE
            // elements: number
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1429:3: -> {$m != null}?
            if (m != null) {
                adaptor.addChild(root_0, adaptor.create((number614!=null?((CommonTree)number614.tree):null).getType(), "-" + (number614!=null?input.toString(number614.start,number614.stop):null)));

            }
            else // 1430:3: -> number
            {
                adaptor.addChild(root_0, stream_number.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "numberconstant"

    public static class stringconstant_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "stringconstant"
    // EsperEPL2Grammar.g:1433:1: stringconstant : (sl= STRING_LITERAL -> ^( STRING_TYPE[$sl] ) | qsl= QUOTED_STRING_LITERAL -> ^( STRING_TYPE[$qsl] ) );
    public final EsperEPL2GrammarParser.stringconstant_return stringconstant() throws RecognitionException {
        EsperEPL2GrammarParser.stringconstant_return retval = new EsperEPL2GrammarParser.stringconstant_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token sl=null;
        Token qsl=null;

        CommonTree sl_tree=null;
        CommonTree qsl_tree=null;
        RewriteRuleTokenStream stream_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token STRING_LITERAL");
        RewriteRuleTokenStream stream_QUOTED_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token QUOTED_STRING_LITERAL");

        try {
            // EsperEPL2Grammar.g:1434:2: (sl= STRING_LITERAL -> ^( STRING_TYPE[$sl] ) | qsl= QUOTED_STRING_LITERAL -> ^( STRING_TYPE[$qsl] ) )
            int alt229=2;
            int LA229_0 = input.LA(1);

            if ( (LA229_0==STRING_LITERAL) ) {
                alt229=1;
            }
            else if ( (LA229_0==QUOTED_STRING_LITERAL) ) {
                alt229=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 229, 0, input);

                throw nvae;
            }
            switch (alt229) {
                case 1 :
                    // EsperEPL2Grammar.g:1434:6: sl= STRING_LITERAL
                    {
                    sl=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_stringconstant9754); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STRING_LITERAL.add(sl);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1434:24: -> ^( STRING_TYPE[$sl] )
                    {
                        // EsperEPL2Grammar.g:1434:27: ^( STRING_TYPE[$sl] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STRING_TYPE, sl), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1435:6: qsl= QUOTED_STRING_LITERAL
                    {
                    qsl=(Token)match(input,QUOTED_STRING_LITERAL,FOLLOW_QUOTED_STRING_LITERAL_in_stringconstant9770); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUOTED_STRING_LITERAL.add(qsl);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1435:32: -> ^( STRING_TYPE[$qsl] )
                    {
                        // EsperEPL2Grammar.g:1435:35: ^( STRING_TYPE[$qsl] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STRING_TYPE, qsl), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "stringconstant"

    // $ANTLR start synpred1_EsperEPL2Grammar
    public final void synpred1_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:707:4: ( streamSelector )
        // EsperEPL2Grammar.g:707:5: streamSelector
        {
        pushFollow(FOLLOW_streamSelector_in_synpred1_EsperEPL2Grammar3089);
        streamSelector();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred1_EsperEPL2Grammar

    // $ANTLR start synpred2_EsperEPL2Grammar
    public final void synpred2_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:785:7: ( timePeriod )
        // EsperEPL2Grammar.g:785:8: timePeriod
        {
        pushFollow(FOLLOW_timePeriod_in_synpred2_EsperEPL2Grammar3777);
        timePeriod();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred2_EsperEPL2Grammar

    // $ANTLR start synpred3_EsperEPL2Grammar
    public final void synpred3_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:947:4: ( builtinFunc )
        // EsperEPL2Grammar.g:947:5: builtinFunc
        {
        pushFollow(FOLLOW_builtinFunc_in_synpred3_EsperEPL2Grammar5508);
        builtinFunc();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred3_EsperEPL2Grammar

    // $ANTLR start synpred4_EsperEPL2Grammar
    public final void synpred4_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1020:4: ( eventProperty )
        // EsperEPL2Grammar.g:1020:5: eventProperty
        {
        pushFollow(FOLLOW_eventProperty_in_synpred4_EsperEPL2Grammar6183);
        eventProperty();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred4_EsperEPL2Grammar

    // $ANTLR start synpred5_EsperEPL2Grammar
    public final void synpred5_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1170:4: ( propertyStreamSelector )
        // EsperEPL2Grammar.g:1170:5: propertyStreamSelector
        {
        pushFollow(FOLLOW_propertyStreamSelector_in_synpred5_EsperEPL2Grammar7503);
        propertyStreamSelector();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred5_EsperEPL2Grammar

    // $ANTLR start synpred6_EsperEPL2Grammar
    public final void synpred6_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1219:7: ( lastOperand )
        // EsperEPL2Grammar.g:1219:8: lastOperand
        {
        pushFollow(FOLLOW_lastOperand_in_synpred6_EsperEPL2Grammar7921);
        lastOperand();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred6_EsperEPL2Grammar

    // $ANTLR start synpred7_EsperEPL2Grammar
    public final void synpred7_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1220:4: ( lastWeekdayOperand )
        // EsperEPL2Grammar.g:1220:5: lastWeekdayOperand
        {
        pushFollow(FOLLOW_lastWeekdayOperand_in_synpred7_EsperEPL2Grammar7932);
        lastWeekdayOperand();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred7_EsperEPL2Grammar

    // $ANTLR start synpred8_EsperEPL2Grammar
    public final void synpred8_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1221:4: ( timePeriod )
        // EsperEPL2Grammar.g:1221:5: timePeriod
        {
        pushFollow(FOLLOW_timePeriod_in_synpred8_EsperEPL2Grammar7943);
        timePeriod();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred8_EsperEPL2Grammar

    // $ANTLR start synpred9_EsperEPL2Grammar
    public final void synpred9_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1222:4: ( expressionQualifyable )
        // EsperEPL2Grammar.g:1222:5: expressionQualifyable
        {
        pushFollow(FOLLOW_expressionQualifyable_in_synpred9_EsperEPL2Grammar7954);
        expressionQualifyable();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred9_EsperEPL2Grammar

    // $ANTLR start synpred10_EsperEPL2Grammar
    public final void synpred10_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1223:4: ( rangeOperand )
        // EsperEPL2Grammar.g:1223:5: rangeOperand
        {
        pushFollow(FOLLOW_rangeOperand_in_synpred10_EsperEPL2Grammar7965);
        rangeOperand();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred10_EsperEPL2Grammar

    // $ANTLR start synpred11_EsperEPL2Grammar
    public final void synpred11_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1224:5: ( frequencyOperand )
        // EsperEPL2Grammar.g:1224:6: frequencyOperand
        {
        pushFollow(FOLLOW_frequencyOperand_in_synpred11_EsperEPL2Grammar7977);
        frequencyOperand();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred11_EsperEPL2Grammar

    // $ANTLR start synpred12_EsperEPL2Grammar
    public final void synpred12_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1225:4: ( lastOperator )
        // EsperEPL2Grammar.g:1225:5: lastOperator
        {
        pushFollow(FOLLOW_lastOperator_in_synpred12_EsperEPL2Grammar7988);
        lastOperator();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred12_EsperEPL2Grammar

    // $ANTLR start synpred13_EsperEPL2Grammar
    public final void synpred13_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1226:4: ( weekDayOperator )
        // EsperEPL2Grammar.g:1226:5: weekDayOperator
        {
        pushFollow(FOLLOW_weekDayOperator_in_synpred13_EsperEPL2Grammar7999);
        weekDayOperator();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred13_EsperEPL2Grammar

    // $ANTLR start synpred14_EsperEPL2Grammar
    public final void synpred14_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1227:5: ( numericParameterList )
        // EsperEPL2Grammar.g:1227:6: numericParameterList
        {
        pushFollow(FOLLOW_numericParameterList_in_synpred14_EsperEPL2Grammar8012);
        numericParameterList();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred14_EsperEPL2Grammar

    // Delegated rules

    public final boolean synpred3_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred3_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred5_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred5_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred4_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred4_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred7_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred7_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred11_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred11_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred14_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred14_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred2_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred2_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred12_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred12_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred13_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred13_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred6_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred6_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred10_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred10_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred1_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred1_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred8_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred8_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred9_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred9_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA56 dfa56 = new DFA56(this);
    protected DFA87 dfa87 = new DFA87(this);
    protected DFA119 dfa119 = new DFA119(this);
    protected DFA142 dfa142 = new DFA142(this);
    protected DFA177 dfa177 = new DFA177(this);
    protected DFA187 dfa187 = new DFA187(this);
    protected DFA201 dfa201 = new DFA201(this);
    static final String DFA56_eotS =
        "\u0081\uffff";
    static final String DFA56_eofS =
        "\u0081\uffff";
    static final String DFA56_minS =
        "\1\5\1\uffff\1\6\67\uffff\1\5\106\uffff";
    static final String DFA56_maxS =
        "\1\u0100\1\uffff\1\u00fd\67\uffff\1\u00fe\106\uffff";
    static final String DFA56_acceptS =
        "\1\uffff\1\1\1\uffff\1\3\126\uffff\1\2\46\uffff";
    static final String DFA56_specialS =
        "\72\uffff\1\0\106\uffff}>";
    static final String[] DFA56_transitionS = {
            "\1\3\4\uffff\1\3\2\uffff\2\3\2\uffff\11\3\1\uffff\1\3\6\uffff"+
            "\1\3\1\uffff\4\3\12\uffff\3\3\10\uffff\16\3\1\uffff\1\3\1\uffff"+
            "\3\3\14\uffff\3\3\174\uffff\1\3\2\uffff\1\2\2\uffff\1\3\1\uffff"+
            "\1\1\3\uffff\2\3\12\uffff\2\3\2\uffff\1\3\1\uffff\1\3\1\uffff"+
            "\1\3\1\uffff\3\3",
            "",
            "\4\3\1\uffff\3\3\2\uffff\1\3\20\uffff\1\3\7\uffff\1\3\u00b4"+
            "\uffff\1\3\1\uffff\1\3\1\72\1\3\1\uffff\2\3\4\uffff\16\3\4\uffff"+
            "\2\3",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\3\4\uffff\1\3\3\uffff\1\3\2\uffff\11\3\10\uffff\1\3\1\uffff"+
            "\4\3\12\uffff\3\3\10\uffff\10\3\1\uffff\4\3\2\uffff\1\3\1\uffff"+
            "\3\3\u008e\uffff\1\3\4\uffff\1\132\31\uffff\1\3",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA56_eot = DFA.unpackEncodedString(DFA56_eotS);
    static final short[] DFA56_eof = DFA.unpackEncodedString(DFA56_eofS);
    static final char[] DFA56_min = DFA.unpackEncodedStringToUnsignedChars(DFA56_minS);
    static final char[] DFA56_max = DFA.unpackEncodedStringToUnsignedChars(DFA56_maxS);
    static final short[] DFA56_accept = DFA.unpackEncodedString(DFA56_acceptS);
    static final short[] DFA56_special = DFA.unpackEncodedString(DFA56_specialS);
    static final short[][] DFA56_transition;

    static {
        int numStates = DFA56_transitionS.length;
        DFA56_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA56_transition[i] = DFA.unpackEncodedString(DFA56_transitionS[i]);
        }
    }

    class DFA56 extends DFA {

        public DFA56(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 56;
            this.eot = DFA56_eot;
            this.eof = DFA56_eof;
            this.min = DFA56_min;
            this.max = DFA56_max;
            this.accept = DFA56_accept;
            this.special = DFA56_special;
            this.transition = DFA56_transition;
        }
        public String getDescription() {
            return "704:1: selectionListElement : (s= STAR -> WILDCARD_SELECT[$s] | ( streamSelector )=> streamSelector | expression ( AS i= keywordAllowedIdent )? -> {identifier != null}? ^( SELECTION_ELEMENT_EXPR expression IDENT[identifier] ) -> {identifier == null}? ^( SELECTION_ELEMENT_EXPR expression ) -> ^( SELECTION_ELEMENT_EXPR expression ) );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA56_58 = input.LA(1);

                         
                        int index56_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA56_58==STAR) && (synpred1_EsperEPL2Grammar())) {s = 90;}

                        else if ( (LA56_58==WINDOW||LA56_58==ESCAPE||LA56_58==EVERY_EXPR||(LA56_58>=SUM && LA56_58<=COUNT)||LA56_58==OUTER||(LA56_58>=JOIN && LA56_58<=FULL)||(LA56_58>=EVENTS && LA56_58<=LAST)||(LA56_58>=UNIDIRECTIONAL && LA56_58<=PRIOR)||(LA56_58>=WEEKDAY && LA56_58<=CAST)||LA56_58==SNAPSHOT||(LA56_58>=VARIABLE && LA56_58<=AT)||LA56_58==IDENT||LA56_58==TICKED_STRING_LITERAL) ) {s = 3;}

                         
                        input.seek(index56_58);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 56, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA87_eotS =
        "\162\uffff";
    static final String DFA87_eofS =
        "\162\uffff";
    static final String DFA87_minS =
        "\2\5\160\uffff";
    static final String DFA87_maxS =
        "\2\u0100\160\uffff";
    static final String DFA87_acceptS =
        "\2\uffff\1\3\66\uffff\1\2\67\uffff\1\1";
    static final String DFA87_specialS =
        "\162\uffff}>";
    static final String[] DFA87_transitionS = {
            "\1\2\4\uffff\1\2\2\uffff\2\2\2\uffff\11\2\1\uffff\1\1\6\uffff"+
            "\1\2\1\uffff\4\2\12\uffff\3\2\10\uffff\16\2\1\uffff\1\2\1\uffff"+
            "\3\2\14\uffff\3\2\174\uffff\1\2\2\uffff\1\2\2\uffff\1\2\5\uffff"+
            "\2\2\12\uffff\2\2\2\uffff\1\2\1\uffff\1\2\1\uffff\1\2\1\uffff"+
            "\3\2",
            "\1\71\4\uffff\1\71\2\uffff\2\71\2\uffff\11\71\1\uffff\1\71"+
            "\2\uffff\1\161\3\uffff\1\71\1\uffff\4\71\12\uffff\3\71\10\uffff"+
            "\16\71\1\uffff\1\71\1\uffff\3\71\14\uffff\3\71\174\uffff\1\71"+
            "\2\uffff\1\71\2\uffff\1\71\5\uffff\2\71\12\uffff\2\71\2\uffff"+
            "\1\71\1\uffff\1\71\1\uffff\1\71\1\uffff\3\71",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA87_eot = DFA.unpackEncodedString(DFA87_eotS);
    static final short[] DFA87_eof = DFA.unpackEncodedString(DFA87_eofS);
    static final char[] DFA87_min = DFA.unpackEncodedStringToUnsignedChars(DFA87_minS);
    static final char[] DFA87_max = DFA.unpackEncodedStringToUnsignedChars(DFA87_maxS);
    static final short[] DFA87_accept = DFA.unpackEncodedString(DFA87_acceptS);
    static final short[] DFA87_special = DFA.unpackEncodedString(DFA87_specialS);
    static final short[][] DFA87_transition;

    static {
        int numStates = DFA87_transitionS.length;
        DFA87_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA87_transition[i] = DFA.unpackEncodedString(DFA87_transitionS[i]);
        }
    }

    class DFA87 extends DFA {

        public DFA87(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 87;
            this.eot = DFA87_eot;
            this.eof = DFA87_eof;
            this.min = DFA87_min;
            this.max = DFA87_max;
            this.accept = DFA87_accept;
            this.special = DFA87_special;
            this.transition = DFA87_transition;
        }
        public String getDescription() {
            return "825:1: caseExpression : ( CASE ( whenClause )+ ( elseClause )? END | CASE expression ( whenClause )+ ( elseClause )? END -> ^( CASE2 expression ( whenClause )+ ( elseClause )? ) | evalOrExpression );";
        }
    }
    static final String DFA119_eotS =
        "\u073c\uffff";
    static final String DFA119_eofS =
        "\21\uffff\1\16\2\uffff\2\16\2\uffff\4\16\12\uffff\2\16\2\uffff"+
        "\2\16\u0710\uffff";
    static final String DFA119_minS =
        "\2\5\13\uffff\1\5\3\uffff\1\6\2\uffff\2\6\2\uffff\4\6\12\uffff"+
        "\2\6\2\uffff\2\6\10\uffff\1\u00e2\145\uffff\1\5\63\uffff\1\5\63"+
        "\uffff\1\5\63\uffff\1\5\63\uffff\1\5\63\uffff\1\5\63\uffff\1\5\63"+
        "\uffff\1\5\63\uffff\1\u00e8\63\uffff\1\5\63\uffff\1\5\63\uffff\1"+
        "\5\2\6\71\uffff\2\6\70\uffff\2\6\70\uffff\2\6\77\uffff\2\6\57\uffff"+
        "\2\6\70\uffff\2\6\70\uffff\2\6\100\uffff\2\6\57\uffff\2\6\160\uffff"+
        "\1\0\30\uffff\1\0\30\uffff\1\0\30\uffff\1\0\30\uffff\1\0\30\uffff"+
        "\1\0\114\uffff\1\0\30\uffff\1\0\30\uffff\1\0\30\uffff\1\0\30\uffff"+
        "\1\0\30\uffff\1\0\u00a3\uffff";
    static final String DFA119_maxS =
        "\2\u0100\13\uffff\1\u0100\3\uffff\1\u00fd\2\uffff\2\u00fd\2\uffff"+
        "\4\u00fd\12\uffff\2\u00fd\2\uffff\2\u00fd\10\uffff\1\u00e2\145\uffff"+
        "\1\u0100\63\uffff\1\u0100\63\uffff\1\u0100\63\uffff\1\u0100\63\uffff"+
        "\1\u0100\63\uffff\1\u0100\63\uffff\1\u0100\63\uffff\1\u0100\63\uffff"+
        "\1\u00fa\63\uffff\1\u0100\63\uffff\1\u0100\63\uffff\1\u00fe\2\u00f7"+
        "\71\uffff\2\u00f7\70\uffff\2\u00f7\70\uffff\2\u00f7\77\uffff\2\u00f7"+
        "\57\uffff\2\u00f7\70\uffff\2\u00f7\70\uffff\2\u00f7\100\uffff\2"+
        "\u00f7\57\uffff\2\u00f7\160\uffff\1\0\30\uffff\1\0\30\uffff\1\0"+
        "\30\uffff\1\0\30\uffff\1\0\30\uffff\1\0\114\uffff\1\0\30\uffff\1"+
        "\0\30\uffff\1\0\30\uffff\1\0\30\uffff\1\0\30\uffff\1\0\u00a3\uffff";
    static final String DFA119_acceptS =
        "\2\uffff\1\2\11\uffff\1\3\1\uffff\1\5\46\uffff\1\6\1\7\4\uffff"+
        "\1\1\45\uffff\1\10\1\4\u0276\uffff\71\6\2\uffff\70\6\2\uffff\70"+
        "\6\2\uffff\77\6\2\uffff\57\6\2\uffff\70\6\2\uffff\70\6\2\uffff\67"+
        "\6\2\uffff\7\6\2\uffff\57\6\2\uffff\66\6\1\11\71\6\1\uffff\30\6"+
        "\1\uffff\30\6\1\uffff\30\6\1\uffff\30\6\1\uffff\30\6\1\uffff\36"+
        "\6\1\uffff\31\6\1\uffff\23\6\1\uffff\30\6\1\uffff\30\6\1\uffff\30"+
        "\6\1\uffff\30\6\1\uffff\30\6\1\uffff\36\6\1\uffff\31\6\1\uffff\31"+
        "\6\1\uffff\31\6\2\uffff\64\6\1\uffff";
    static final String DFA119_specialS =
        "\1\0\u0099\uffff\1\1\63\uffff\1\2\63\uffff\1\3\63\uffff\1\4\63"+
        "\uffff\1\5\63\uffff\1\6\63\uffff\1\7\63\uffff\1\10\63\uffff\1\11"+
        "\63\uffff\1\12\63\uffff\1\13\63\uffff\1\14\1\15\1\16\71\uffff\1"+
        "\17\1\20\70\uffff\1\21\1\22\70\uffff\1\23\1\24\77\uffff\1\25\1\26"+
        "\57\uffff\1\27\1\30\70\uffff\1\31\1\32\70\uffff\1\33\1\34\100\uffff"+
        "\1\35\1\36\57\uffff\1\37\1\40\160\uffff\1\41\30\uffff\1\42\30\uffff"+
        "\1\43\30\uffff\1\44\30\uffff\1\45\30\uffff\1\46\114\uffff\1\47\30"+
        "\uffff\1\50\30\uffff\1\51\30\uffff\1\52\30\uffff\1\53\30\uffff\1"+
        "\54\u00a3\uffff}>";
    static final String[] DFA119_transitionS = {
            "\1\16\4\uffff\1\16\3\uffff\1\16\2\uffff\1\24\1\25\2\16\1\30"+
            "\1\31\1\32\1\33\1\21\10\uffff\1\16\1\uffff\4\16\12\uffff\3\16"+
            "\10\uffff\6\16\1\46\1\47\1\64\2\16\1\52\1\53\1\65\1\uffff\1"+
            "\16\1\uffff\3\16\14\uffff\3\2\174\uffff\1\2\2\uffff\1\16\2\uffff"+
            "\1\15\5\uffff\2\2\12\uffff\1\2\1\1\2\uffff\1\66\1\uffff\1\2"+
            "\1\uffff\1\14\1\uffff\1\16\2\2",
            "\1\73\4\uffff\1\73\3\uffff\1\73\2\uffff\11\73\10\uffff\1\73"+
            "\1\uffff\4\73\12\uffff\3\73\10\uffff\10\73\1\uffff\4\73\2\uffff"+
            "\1\73\1\uffff\3\73\u008b\uffff\1\2\2\uffff\1\73\32\uffff\1\2"+
            "\3\uffff\1\73\2\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\142\4\uffff\1\142\2\uffff\2\142\2\uffff\11\142\1\141\1"+
            "\142\6\uffff\1\142\1\uffff\4\142\12\uffff\3\142\10\uffff\16"+
            "\142\1\uffff\1\142\1\uffff\3\142\14\uffff\3\142\174\uffff\1"+
            "\142\2\uffff\1\142\2\uffff\1\142\5\uffff\2\142\12\uffff\2\142"+
            "\2\uffff\1\142\1\uffff\1\142\1\uffff\1\142\1\uffff\3\142",
            "",
            "",
            "",
            "\10\16\2\uffff\1\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\4\uffff\1\16\5\uffff\3\16\35\uffff\3\16\6\uffff\1\16\175\uffff"+
            "\1\16\1\uffff\2\16\1\u009a\5\16\2\uffff\16\16\1\uffff\1\16\2"+
            "\uffff\2\16",
            "",
            "",
            "\10\16\2\uffff\1\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\4\uffff\1\16\5\uffff\3\16\35\uffff\3\16\6\uffff\1\16\175\uffff"+
            "\1\16\1\uffff\2\16\1\u00ce\5\16\2\uffff\16\16\1\uffff\1\16\2"+
            "\uffff\2\16",
            "\10\16\2\uffff\1\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\4\uffff\1\16\5\uffff\3\16\35\uffff\3\16\6\uffff\1\16\175\uffff"+
            "\1\16\1\uffff\2\16\1\u0102\5\16\2\uffff\16\16\1\uffff\1\16\2"+
            "\uffff\2\16",
            "",
            "",
            "\10\16\2\uffff\1\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\4\uffff\1\16\5\uffff\3\16\35\uffff\3\16\6\uffff\1\16\175\uffff"+
            "\1\16\1\uffff\2\16\1\u0136\5\16\2\uffff\16\16\1\uffff\1\16\2"+
            "\uffff\2\16",
            "\10\16\2\uffff\1\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\4\uffff\1\16\5\uffff\3\16\35\uffff\3\16\6\uffff\1\16\175\uffff"+
            "\1\16\1\uffff\2\16\1\u016a\5\16\2\uffff\16\16\1\uffff\1\16\2"+
            "\uffff\2\16",
            "\10\16\2\uffff\1\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\4\uffff\1\16\5\uffff\3\16\35\uffff\3\16\6\uffff\1\16\175\uffff"+
            "\1\16\1\uffff\2\16\1\u019e\5\16\2\uffff\16\16\1\uffff\1\16\2"+
            "\uffff\2\16",
            "\10\16\2\uffff\1\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\4\uffff\1\16\5\uffff\3\16\35\uffff\3\16\6\uffff\1\16\175\uffff"+
            "\1\16\1\uffff\2\16\1\u01d2\5\16\2\uffff\16\16\1\uffff\1\16\2"+
            "\uffff\2\16",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\10\16\2\uffff\1\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\4\uffff\1\16\5\uffff\3\16\35\uffff\3\16\6\uffff\1\16\175\uffff"+
            "\1\16\1\uffff\2\16\1\u0206\5\16\2\uffff\16\16\1\uffff\1\16\2"+
            "\uffff\2\16",
            "\10\16\2\uffff\1\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\4\uffff\1\16\5\uffff\3\16\35\uffff\3\16\6\uffff\1\16\175\uffff"+
            "\1\16\1\uffff\2\16\1\u023a\5\16\2\uffff\16\16\1\uffff\1\16\2"+
            "\uffff\2\16",
            "",
            "",
            "\10\16\2\uffff\1\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\4\uffff\1\16\5\uffff\3\16\35\uffff\3\16\6\uffff\1\16\175\uffff"+
            "\1\16\1\uffff\2\16\1\u026e\5\16\2\uffff\16\16\1\uffff\1\16\2"+
            "\uffff\2\16",
            "\10\16\2\uffff\1\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\4\uffff\1\16\5\uffff\3\16\35\uffff\3\16\6\uffff\1\16\175\uffff"+
            "\1\16\1\uffff\2\16\1\u02a2\5\16\2\uffff\16\16\1\uffff\1\16\2"+
            "\uffff\2\16",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u02d6",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0307\4\uffff\1\u02eb\2\uffff\1\u0310\1\u02ec\2\uffff\1"+
            "\u02ed\1\u02ee\1\u02ef\1\u02f0\1\u02f1\1\u02f2\1\u02f3\1\u02f4"+
            "\1\u02ea\1\uffff\1\u02db\6\uffff\1\u030a\1\uffff\1\u030c\1\u0308"+
            "\1\u0309\1\u030b\5\uffff\1\u02da\1\u02d9\3\uffff\1\u02f5\1\u02f6"+
            "\1\u02f7\10\uffff\1\u02f8\1\u02f9\1\u02fa\1\u02fc\1\u02fd\1"+
            "\u02fe\1\u02ff\1\u0300\1\u030d\1\u0301\1\u0302\1\u0303\1\u0304"+
            "\1\u030e\1\uffff\1\u0305\1\uffff\1\u0306\1\u02fb\1\u02e9\14"+
            "\uffff\1\u02e2\1\u02e3\1\u02e4\174\uffff\1\u02e1\2\uffff\1\u02e7"+
            "\2\uffff\1\u02e6\1\uffff\1\u0311\3\uffff\1\u02d7\1\u02d8\12"+
            "\uffff\1\u02dd\1\u02dc\2\uffff\1\u030f\1\uffff\1\u02de\1\uffff"+
            "\1\u02e5\1\uffff\1\u02e8\1\u02df\1\u02e0",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0342\4\uffff\1\u0326\2\uffff\1\u034b\1\u0327\2\uffff\1"+
            "\u0328\1\u0329\1\u032a\1\u032b\1\u032c\1\u032d\1\u032e\1\u032f"+
            "\1\u0325\1\uffff\1\u0316\6\uffff\1\u0345\1\uffff\1\u0347\1\u0343"+
            "\1\u0344\1\u0346\5\uffff\1\u0315\1\u0314\3\uffff\1\u0330\1\u0331"+
            "\1\u0332\10\uffff\1\u0333\1\u0334\1\u0335\1\u0337\1\u0338\1"+
            "\u0339\1\u033a\1\u033b\1\u0348\1\u033c\1\u033d\1\u033e\1\u033f"+
            "\1\u0349\1\uffff\1\u0340\1\uffff\1\u0341\1\u0336\1\u0324\14"+
            "\uffff\1\u031d\1\u031e\1\u031f\174\uffff\1\u031c\2\uffff\1\u0322"+
            "\2\uffff\1\u0321\5\uffff\1\u0312\1\u0313\12\uffff\1\u0318\1"+
            "\u0317\2\uffff\1\u034a\1\uffff\1\u0319\1\uffff\1\u0320\1\uffff"+
            "\1\u0323\1\u031a\1\u031b",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u037c\4\uffff\1\u0360\2\uffff\1\u0385\1\u0361\2\uffff\1"+
            "\u0362\1\u0363\1\u0364\1\u0365\1\u0366\1\u0367\1\u0368\1\u0369"+
            "\1\u035f\1\uffff\1\u0350\6\uffff\1\u037f\1\uffff\1\u0381\1\u037d"+
            "\1\u037e\1\u0380\5\uffff\1\u034f\1\u034e\3\uffff\1\u036a\1\u036b"+
            "\1\u036c\10\uffff\1\u036d\1\u036e\1\u036f\1\u0371\1\u0372\1"+
            "\u0373\1\u0374\1\u0375\1\u0382\1\u0376\1\u0377\1\u0378\1\u0379"+
            "\1\u0383\1\uffff\1\u037a\1\uffff\1\u037b\1\u0370\1\u035e\14"+
            "\uffff\1\u0357\1\u0358\1\u0359\174\uffff\1\u0356\2\uffff\1\u035c"+
            "\2\uffff\1\u035b\5\uffff\1\u034c\1\u034d\12\uffff\1\u0352\1"+
            "\u0351\2\uffff\1\u0384\1\uffff\1\u0353\1\uffff\1\u035a\1\uffff"+
            "\1\u035d\1\u0354\1\u0355",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u03b4\4\uffff\1\u0398\2\uffff\1\u03bd\1\u0399\2\uffff\1"+
            "\u039a\1\u039b\1\u039c\1\u039d\1\u039e\1\u039f\1\u03a0\1\u03a1"+
            "\1\u0397\1\uffff\1\u0388\6\uffff\1\u03b7\1\uffff\1\u03b9\1\u03b5"+
            "\1\u03b6\1\u03b8\12\uffff\1\u03a2\1\u03a3\1\u03a4\10\uffff\1"+
            "\u03a5\1\u03a6\1\u03a7\1\u03a9\1\u03aa\1\u03ab\1\u03ac\1\u03ad"+
            "\1\u03ba\1\u03ae\1\u03af\1\u03b0\1\u03b1\1\u03bb\1\uffff\1\u03b2"+
            "\1\uffff\1\u03b3\1\u03a8\1\u0396\14\uffff\1\u038f\1\u0390\1"+
            "\u0391\174\uffff\1\u038e\2\uffff\1\u0394\2\uffff\1\u0393\5\uffff"+
            "\1\u0386\1\u0387\12\uffff\1\u038a\1\u0389\2\uffff\1\u03bc\1"+
            "\uffff\1\u038b\1\uffff\1\u0392\1\uffff\1\u0395\1\u038c\1\u038d",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u03ee\4\uffff\1\u03d2\2\uffff\1\u03f7\1\u03d3\2\uffff\1"+
            "\u03d4\1\u03d5\1\u03d6\1\u03d7\1\u03d8\1\u03d9\1\u03da\1\u03db"+
            "\1\u03d1\1\uffff\1\u03c0\6\uffff\1\u03f1\1\uffff\1\u03f3\1\u03ef"+
            "\1\u03f0\1\u03f2\5\uffff\1\u03bf\1\u03be\3\uffff\1\u03dc\1\u03dd"+
            "\1\u03de\10\uffff\1\u03df\1\u03e0\1\u03e1\1\u03e3\1\u03e4\1"+
            "\u03e5\1\u03e6\1\u03e7\1\u03f4\1\u03e8\1\u03e9\1\u03ea\1\u03eb"+
            "\1\u03f5\1\uffff\1\u03ec\1\uffff\1\u03ed\1\u03e2\1\u03d0\14"+
            "\uffff\1\u03c9\1\u03ca\1\u03cb\174\uffff\1\u03c6\2\uffff\1\u03ce"+
            "\2\uffff\1\u03cd\5\uffff\1\u03c7\1\u03c8\12\uffff\1\u03c2\1"+
            "\u03c1\2\uffff\1\u03f6\1\uffff\1\u03c3\1\uffff\1\u03cc\1\uffff"+
            "\1\u03cf\1\u03c4\1\u03c5",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0428\4\uffff\1\u040c\2\uffff\1\u0431\1\u040d\2\uffff\1"+
            "\u040e\1\u040f\1\u0410\1\u0411\1\u0412\1\u0413\1\u0414\1\u0415"+
            "\1\u040b\1\uffff\1\u03fc\6\uffff\1\u042b\1\uffff\1\u042d\1\u0429"+
            "\1\u042a\1\u042c\5\uffff\1\u03fb\1\u03fa\3\uffff\1\u0416\1\u0417"+
            "\1\u0418\10\uffff\1\u0419\1\u041a\1\u041b\1\u041d\1\u041e\1"+
            "\u041f\1\u0420\1\u0421\1\u042e\1\u0422\1\u0423\1\u0424\1\u0425"+
            "\1\u042f\1\uffff\1\u0426\1\uffff\1\u0427\1\u041c\1\u040a\14"+
            "\uffff\1\u0403\1\u0404\1\u0405\174\uffff\1\u0402\2\uffff\1\u0408"+
            "\2\uffff\1\u0407\5\uffff\1\u03f8\1\u03f9\12\uffff\1\u03fe\1"+
            "\u03fd\2\uffff\1\u0430\1\uffff\1\u03ff\1\uffff\1\u0406\1\uffff"+
            "\1\u0409\1\u0400\1\u0401",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0462\4\uffff\1\u0446\2\uffff\1\u046b\1\u0447\2\uffff\1"+
            "\u0448\1\u0449\1\u044a\1\u044b\1\u044c\1\u044d\1\u044e\1\u044f"+
            "\1\u0445\1\uffff\1\u0436\6\uffff\1\u0465\1\uffff\1\u0467\1\u0463"+
            "\1\u0464\1\u0466\5\uffff\1\u0435\1\u0434\3\uffff\1\u0450\1\u0451"+
            "\1\u0452\10\uffff\1\u0453\1\u0454\1\u0455\1\u0457\1\u0458\1"+
            "\u0459\1\u045a\1\u045b\1\u0468\1\u045c\1\u045d\1\u045e\1\u045f"+
            "\1\u0469\1\uffff\1\u0460\1\uffff\1\u0461\1\u0456\1\u0444\14"+
            "\uffff\1\u043d\1\u043e\1\u043f\174\uffff\1\u043c\2\uffff\1\u0442"+
            "\2\uffff\1\u0441\5\uffff\1\u0432\1\u0433\12\uffff\1\u0438\1"+
            "\u0437\2\uffff\1\u046a\1\uffff\1\u0439\1\uffff\1\u0440\1\uffff"+
            "\1\u0443\1\u043a\1\u043b",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u049a\4\uffff\1\u047e\2\uffff\1\u04a3\1\u047f\2\uffff\1"+
            "\u0480\1\u0481\1\u0482\1\u0483\1\u0484\1\u0485\1\u0486\1\u0487"+
            "\1\u047d\1\uffff\1\u046e\6\uffff\1\u049d\1\uffff\1\u049f\1\u049b"+
            "\1\u049c\1\u049e\12\uffff\1\u0488\1\u0489\1\u048a\10\uffff\1"+
            "\u048b\1\u048c\1\u048d\1\u048f\1\u0490\1\u0491\1\u0492\1\u0493"+
            "\1\u04a0\1\u0494\1\u0495\1\u0496\1\u0497\1\u04a1\1\uffff\1\u0498"+
            "\1\uffff\1\u0499\1\u048e\1\u047c\14\uffff\1\u0475\1\u0476\1"+
            "\u0477\174\uffff\1\u0474\2\uffff\1\u047a\2\uffff\1\u0479\5\uffff"+
            "\1\u046c\1\u046d\12\uffff\1\u0470\1\u046f\2\uffff\1\u04a2\1"+
            "\uffff\1\u0471\1\uffff\1\u0478\1\uffff\1\u047b\1\u0472\1\u0473",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\2\16\20\uffff\1\u04a4",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u04d5\4\uffff\1\u04b9\2\uffff\1\u04de\1\u04ba\2\uffff\1"+
            "\u04bb\1\u04bc\1\u04bd\1\u04be\1\u04bf\1\u04c0\1\u04c1\1\u04c2"+
            "\1\u04b8\1\uffff\1\u04a7\6\uffff\1\u04d8\1\uffff\1\u04da\1\u04d6"+
            "\1\u04d7\1\u04d9\12\uffff\1\u04c3\1\u04c4\1\u04c5\10\uffff\1"+
            "\u04c6\1\u04c7\1\u04c8\1\u04ca\1\u04cb\1\u04cc\1\u04cd\1\u04ce"+
            "\1\u04db\1\u04cf\1\u04d0\1\u04d1\1\u04d2\1\u04dc\1\uffff\1\u04d3"+
            "\1\uffff\1\u04d4\1\u04c9\1\u04b7\14\uffff\1\u04b0\1\u04b1\1"+
            "\u04b2\174\uffff\1\u04ad\2\uffff\1\u04b5\2\uffff\1\u04b4\5\uffff"+
            "\1\u04ae\1\u04af\12\uffff\1\u04a9\1\u04a8\2\uffff\1\u04dd\1"+
            "\uffff\1\u04aa\1\uffff\1\u04b3\1\uffff\1\u04b6\1\u04ab\1\u04ac",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u050d\4\uffff\1\u04f1\2\uffff\1\u0516\1\u04f2\2\uffff\1"+
            "\u04f3\1\u04f4\1\u04f5\1\u04f6\1\u04f7\1\u04f8\1\u04f9\1\u04fa"+
            "\1\u04f0\1\uffff\1\u04e1\6\uffff\1\u0510\1\uffff\1\u0512\1\u050e"+
            "\1\u050f\1\u0511\12\uffff\1\u04fb\1\u04fc\1\u04fd\10\uffff\1"+
            "\u04fe\1\u04ff\1\u0500\1\u0502\1\u0503\1\u0504\1\u0505\1\u0506"+
            "\1\u0513\1\u0507\1\u0508\1\u0509\1\u050a\1\u0514\1\uffff\1\u050b"+
            "\1\uffff\1\u050c\1\u0501\1\u04ef\14\uffff\1\u04e8\1\u04e9\1"+
            "\u04ea\174\uffff\1\u04e7\2\uffff\1\u04ed\2\uffff\1\u04ec\5\uffff"+
            "\1\u04df\1\u04e0\12\uffff\1\u04e3\1\u04e2\2\uffff\1\u0515\1"+
            "\uffff\1\u04e4\1\uffff\1\u04eb\1\uffff\1\u04ee\1\u04e5\1\u04e6",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0538\4\uffff\1\u051c\3\uffff\1\u051d\2\uffff\1\u051e\1"+
            "\u051f\1\u0520\1\u0521\1\u0522\1\u0523\1\u0524\1\u0525\1\u051b"+
            "\1\u0517\7\uffff\1\u053b\1\uffff\1\u053d\1\u0539\1\u053a\1\u053c"+
            "\12\uffff\1\u0526\1\u0527\1\u0528\10\uffff\1\u0529\1\u052a\1"+
            "\u052b\1\u052d\1\u052e\1\u052f\1\u0530\1\u0531\1\uffff\1\u0532"+
            "\1\u0533\1\u0534\1\u0535\2\uffff\1\u0536\1\uffff\1\u0537\1\u052c"+
            "\1\u051a\u008e\uffff\1\u0518\36\uffff\1\u0519",
            "\1\u0553\1\u0554\1\u0555\1\u0556\1\uffff\1\u0550\1\u054f\1"+
            "\u0552\33\uffff\1\u0549\u00b6\uffff\1\u0548\2\uffff\1\u0551"+
            "\1\u053e\5\uffff\1\u054c\1\u054d\1\u054e\1\u054a\1\u054b\1\u0544"+
            "\1\u0545\1\u0546\1\u0547\1\u0543\1\u0541\1\u0542\1\u053f\1\u0540",
            "\1\u056c\1\u056d\1\u056e\1\u056f\1\uffff\1\u0569\1\u0568\1"+
            "\u056b\33\uffff\1\u0562\u00b6\uffff\1\u0561\2\uffff\1\u056a"+
            "\1\u0557\5\uffff\1\u0565\1\u0566\1\u0567\1\u0563\1\u0564\1\u055d"+
            "\1\u055e\1\u055f\1\u0560\1\u055c\1\u055a\1\u055b\1\u0558\1\u0559",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0585\1\u0586\1\u0587\1\u0588\1\uffff\1\u0582\1\u0581\1"+
            "\u0584\33\uffff\1\u057b\u00b6\uffff\1\u057a\2\uffff\1\u0583"+
            "\1\u0570\5\uffff\1\u057e\1\u057f\1\u0580\1\u057c\1\u057d\1\u0576"+
            "\1\u0577\1\u0578\1\u0579\1\u0575\1\u0573\1\u0574\1\u0571\1\u0572",
            "\1\u059e\1\u059f\1\u05a0\1\u05a1\1\uffff\1\u059b\1\u059a\1"+
            "\u059d\33\uffff\1\u0594\u00b6\uffff\1\u0593\2\uffff\1\u059c"+
            "\1\u0589\5\uffff\1\u0597\1\u0598\1\u0599\1\u0595\1\u0596\1\u058f"+
            "\1\u0590\1\u0591\1\u0592\1\u058e\1\u058c\1\u058d\1\u058a\1\u058b",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u05b7\1\u05b8\1\u05b9\1\u05ba\1\uffff\1\u05b4\1\u05b3\1"+
            "\u05b6\33\uffff\1\u05ad\u00b6\uffff\1\u05ac\2\uffff\1\u05b5"+
            "\1\u05a2\5\uffff\1\u05b0\1\u05b1\1\u05b2\1\u05ae\1\u05af\1\u05a8"+
            "\1\u05a9\1\u05aa\1\u05ab\1\u05a7\1\u05a5\1\u05a6\1\u05a3\1\u05a4",
            "\1\u05d0\1\u05d1\1\u05d2\1\u05d3\1\uffff\1\u05cd\1\u05cc\1"+
            "\u05cf\33\uffff\1\u05c6\u00b6\uffff\1\u05c5\2\uffff\1\u05ce"+
            "\1\u05bb\5\uffff\1\u05c9\1\u05ca\1\u05cb\1\u05c7\1\u05c8\1\u05c1"+
            "\1\u05c2\1\u05c3\1\u05c4\1\u05c0\1\u05be\1\u05bf\1\u05bc\1\u05bd",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u05e9\1\u05ea\1\u05eb\1\u05ec\1\uffff\1\u05e6\1\u05e5\1"+
            "\u05e8\33\uffff\1\u05df\u00b4\uffff\1\u05e7\1\uffff\1\u05de"+
            "\2\uffff\1\16\1\u05d4\5\uffff\1\u05e2\1\u05e3\1\u05e4\1\u05e0"+
            "\1\u05e1\1\u05da\1\u05db\1\u05dc\1\u05dd\1\u05d9\1\u05d7\1\u05d8"+
            "\1\u05d5\1\u05d6",
            "\1\u0603\1\u0604\1\u0605\1\u0606\1\uffff\1\u0600\1\u05ff\1"+
            "\u0602\33\uffff\1\u05f9\u00b4\uffff\1\u0601\1\uffff\1\u05f8"+
            "\2\uffff\1\16\1\u05ee\5\uffff\1\u05fc\1\u05fd\1\u05fe\1\u05fa"+
            "\1\u05fb\1\u05f4\1\u05f5\1\u05f6\1\u05f7\1\u05f3\1\u05f1\1\u05f2"+
            "\1\u05ef\1\u05f0",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u061d\1\u061e\1\u061f\1\u0620\1\uffff\1\u061a\1\u0619\1"+
            "\u061c\33\uffff\1\u0613\u00b6\uffff\1\u0612\2\uffff\1\u061b"+
            "\1\u0608\5\uffff\1\u0616\1\u0617\1\u0618\1\u0614\1\u0615\1\u060e"+
            "\1\u060f\1\u0610\1\u0611\1\u060d\1\u060b\1\u060c\1\u0609\1\u060a",
            "\1\u0636\1\u0637\1\u0638\1\u0639\1\uffff\1\u0633\1\u0632\1"+
            "\u0635\33\uffff\1\u062c\u00b6\uffff\1\u062b\2\uffff\1\u0634"+
            "\1\u0621\5\uffff\1\u062f\1\u0630\1\u0631\1\u062d\1\u062e\1\u0627"+
            "\1\u0628\1\u0629\1\u062a\1\u0626\1\u0624\1\u0625\1\u0622\1\u0623",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u064f\1\u0650\1\u0651\1\u0652\1\uffff\1\u064c\1\u064b\1"+
            "\u064e\33\uffff\1\u0645\u00b6\uffff\1\u0644\2\uffff\1\u064d"+
            "\1\u063a\5\uffff\1\u0648\1\u0649\1\u064a\1\u0646\1\u0647\1\u0640"+
            "\1\u0641\1\u0642\1\u0643\1\u063f\1\u063d\1\u063e\1\u063b\1\u063c",
            "\1\u0668\1\u0669\1\u066a\1\u066b\1\uffff\1\u0665\1\u0664\1"+
            "\u0667\33\uffff\1\u065e\u00b6\uffff\1\u065d\2\uffff\1\u0666"+
            "\1\u0653\5\uffff\1\u0661\1\u0662\1\u0663\1\u065f\1\u0660\1\u0659"+
            "\1\u065a\1\u065b\1\u065c\1\u0658\1\u0656\1\u0657\1\u0654\1\u0655",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0681\1\u0682\1\u0683\1\u0684\1\uffff\1\u067e\1\u067d\1"+
            "\u0680\33\uffff\1\u0677\u00b6\uffff\1\u0676\2\uffff\1\u067f"+
            "\1\u066c\5\uffff\1\u067a\1\u067b\1\u067c\1\u0678\1\u0679\1\u0672"+
            "\1\u0673\1\u0674\1\u0675\1\u0671\1\u066f\1\u0670\1\u066d\1\u066e",
            "\1\u069a\1\u069b\1\u069c\1\u069d\1\uffff\1\u0697\1\u0696\1"+
            "\u0699\33\uffff\1\u0690\u00b6\uffff\1\u068f\2\uffff\1\u0698"+
            "\1\u0685\5\uffff\1\u0693\1\u0694\1\u0695\1\u0691\1\u0692\1\u068b"+
            "\1\u068c\1\u068d\1\u068e\1\u068a\1\u0688\1\u0689\1\u0686\1\u0687",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u06b3\1\u06b4\1\u06b5\1\u06b6\1\uffff\1\u06b0\1\u06af\1"+
            "\u06b2\33\uffff\1\u06a9\u00b4\uffff\1\u06b1\1\uffff\1\u06a8"+
            "\2\uffff\1\16\1\u069e\5\uffff\1\u06ac\1\u06ad\1\u06ae\1\u06aa"+
            "\1\u06ab\1\u06a4\1\u06a5\1\u06a6\1\u06a7\1\u06a3\1\u06a1\1\u06a2"+
            "\1\u069f\1\u06a0",
            "\1\u06cd\1\u06ce\1\u06cf\1\u06d0\1\uffff\1\u06ca\1\u06c9\1"+
            "\u06cc\33\uffff\1\u06c3\u00b4\uffff\1\u06cb\1\uffff\1\u06c2"+
            "\2\uffff\1\16\1\u06b8\5\uffff\1\u06c6\1\u06c7\1\u06c8\1\u06c4"+
            "\1\u06c5\1\u06be\1\u06bf\1\u06c0\1\u06c1\1\u06bd\1\u06bb\1\u06bc"+
            "\1\u06b9\1\u06ba",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u06e7\1\u06e8\1\u06e9\1\u06ea\1\uffff\1\u06e4\1\u06e3\1"+
            "\u06e6\33\uffff\1\u06dd\u00b4\uffff\1\u06e5\1\uffff\1\u06dc"+
            "\2\uffff\1\16\1\u06d2\5\uffff\1\u06e0\1\u06e1\1\u06e2\1\u06de"+
            "\1\u06df\1\u06d8\1\u06d9\1\u06da\1\u06db\1\u06d7\1\u06d5\1\u06d6"+
            "\1\u06d3\1\u06d4",
            "\1\u0701\1\u0702\1\u0703\1\u0704\1\uffff\1\u06fe\1\u06fd\1"+
            "\u0700\33\uffff\1\u06f7\u00b4\uffff\1\u06ff\1\uffff\1\u06f6"+
            "\2\uffff\1\16\1\u06ec\5\uffff\1\u06fa\1\u06fb\1\u06fc\1\u06f8"+
            "\1\u06f9\1\u06f2\1\u06f3\1\u06f4\1\u06f5\1\u06f1\1\u06ef\1\u06f0"+
            "\1\u06ed\1\u06ee",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u071d\1\u071e\1\u071f\1\u0720\1\uffff\1\u0719\1\u0718\1"+
            "\u071c\2\uffff\1\u071b\30\uffff\1\u0712\u00b4\uffff\1\u071a"+
            "\1\uffff\1\u0711\2\uffff\1\16\1\u0707\5\uffff\1\u0715\1\u0716"+
            "\1\u0717\1\u0713\1\u0714\1\u070d\1\u070e\1\u070f\1\u0710\1\u070c"+
            "\1\u070a\1\u070b\1\u0708\1\u0709",
            "\1\u0737\1\u0738\1\u0739\1\u073a\1\uffff\1\u0733\1\u0732\1"+
            "\u0736\2\uffff\1\u0735\30\uffff\1\u072c\u00b4\uffff\1\u0734"+
            "\1\uffff\1\u072b\2\uffff\1\16\1\u0721\5\uffff\1\u072f\1\u0730"+
            "\1\u0731\1\u072d\1\u072e\1\u0727\1\u0728\1\u0729\1\u072a\1\u0726"+
            "\1\u0724\1\u0725\1\u0722\1\u0723",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA119_eot = DFA.unpackEncodedString(DFA119_eotS);
    static final short[] DFA119_eof = DFA.unpackEncodedString(DFA119_eofS);
    static final char[] DFA119_min = DFA.unpackEncodedStringToUnsignedChars(DFA119_minS);
    static final char[] DFA119_max = DFA.unpackEncodedStringToUnsignedChars(DFA119_maxS);
    static final short[] DFA119_accept = DFA.unpackEncodedString(DFA119_acceptS);
    static final short[] DFA119_special = DFA.unpackEncodedString(DFA119_specialS);
    static final short[][] DFA119_transition;

    static {
        int numStates = DFA119_transitionS.length;
        DFA119_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA119_transition[i] = DFA.unpackEncodedString(DFA119_transitionS[i]);
        }
    }

    class DFA119 extends DFA {

        public DFA119(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 119;
            this.eot = DFA119_eot;
            this.eof = DFA119_eof;
            this.min = DFA119_min;
            this.max = DFA119_max;
            this.accept = DFA119_accept;
            this.special = DFA119_special;
            this.transition = DFA119_transition;
        }
        public String getDescription() {
            return "941:1: unaryExpression : ( MINUS eventProperty -> ^( UNARY_MINUS eventProperty ) | constant | substitution | LPAREN expression RPAREN | eventPropertyOrLibFunction | ( builtinFunc )=> ( builtinFunc ) | arrayExpression | subSelectExpression | existsSubSelectExpression );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA119_0 = input.LA(1);

                         
                        int index119_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA119_0==MINUS) ) {s = 1;}

                        else if ( ((LA119_0>=BOOLEAN_TRUE && LA119_0<=VALUE_NULL)||LA119_0==NUM_DOUBLE||(LA119_0>=STRING_LITERAL && LA119_0<=QUOTED_STRING_LITERAL)||LA119_0==PLUS||LA119_0==NUM_INT||(LA119_0>=NUM_LONG && LA119_0<=NUM_FLOAT)) ) {s = 2;}

                        else if ( (LA119_0==QUESTION) ) {s = 12;}

                        else if ( (LA119_0==LPAREN) ) {s = 13;}

                        else if ( (LA119_0==WINDOW||LA119_0==ESCAPE||LA119_0==EVERY_EXPR||(LA119_0>=MAX && LA119_0<=MIN)||LA119_0==OUTER||(LA119_0>=JOIN && LA119_0<=FULL)||(LA119_0>=EVENTS && LA119_0<=LAST)||(LA119_0>=UNIDIRECTIONAL && LA119_0<=METADATASQL)||(LA119_0>=WEEKDAY && LA119_0<=LW)||LA119_0==SNAPSHOT||(LA119_0>=VARIABLE && LA119_0<=AT)||LA119_0==IDENT||LA119_0==TICKED_STRING_LITERAL) ) {s = 14;}

                        else if ( (LA119_0==COUNT) ) {s = 17;}

                        else if ( (LA119_0==SUM) ) {s = 20;}

                        else if ( (LA119_0==AVG) ) {s = 21;}

                        else if ( (LA119_0==COALESCE) ) {s = 24;}

                        else if ( (LA119_0==MEDIAN) ) {s = 25;}

                        else if ( (LA119_0==STDDEV) ) {s = 26;}

                        else if ( (LA119_0==AVEDEV) ) {s = 27;}

                        else if ( (LA119_0==PREVIOUS) ) {s = 38;}

                        else if ( (LA119_0==PRIOR) ) {s = 39;}

                        else if ( (LA119_0==INSTANCEOF) ) {s = 42;}

                        else if ( (LA119_0==CAST) ) {s = 43;}

                        else if ( (LA119_0==EXISTS) ) {s = 52;}

                        else if ( (LA119_0==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 53;}

                        else if ( (LA119_0==LCURLY) ) {s = 54;}

                         
                        input.seek(index119_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA119_154 = input.LA(1);

                         
                        int index119_154 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA119_154==STRING_LITERAL) ) {s = 727;}

                        else if ( (LA119_154==QUOTED_STRING_LITERAL) ) {s = 728;}

                        else if ( (LA119_154==ALL) && (synpred3_EsperEPL2Grammar())) {s = 729;}

                        else if ( (LA119_154==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 730;}

                        else if ( (LA119_154==CASE) && (synpred3_EsperEPL2Grammar())) {s = 731;}

                        else if ( (LA119_154==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 732;}

                        else if ( (LA119_154==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 733;}

                        else if ( (LA119_154==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 734;}

                        else if ( (LA119_154==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 735;}

                        else if ( (LA119_154==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 736;}

                        else if ( (LA119_154==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 737;}

                        else if ( (LA119_154==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 738;}

                        else if ( (LA119_154==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 739;}

                        else if ( (LA119_154==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 740;}

                        else if ( (LA119_154==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 741;}

                        else if ( (LA119_154==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 742;}

                        else if ( (LA119_154==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 743;}

                        else if ( (LA119_154==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 744;}

                        else if ( (LA119_154==AT) && (synpred3_EsperEPL2Grammar())) {s = 745;}

                        else if ( (LA119_154==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 746;}

                        else if ( (LA119_154==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 747;}

                        else if ( (LA119_154==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 748;}

                        else if ( (LA119_154==SUM) && (synpred3_EsperEPL2Grammar())) {s = 749;}

                        else if ( (LA119_154==AVG) && (synpred3_EsperEPL2Grammar())) {s = 750;}

                        else if ( (LA119_154==MAX) && (synpred3_EsperEPL2Grammar())) {s = 751;}

                        else if ( (LA119_154==MIN) && (synpred3_EsperEPL2Grammar())) {s = 752;}

                        else if ( (LA119_154==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 753;}

                        else if ( (LA119_154==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 754;}

                        else if ( (LA119_154==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 755;}

                        else if ( (LA119_154==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 756;}

                        else if ( (LA119_154==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 757;}

                        else if ( (LA119_154==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 758;}

                        else if ( (LA119_154==LAST) && (synpred3_EsperEPL2Grammar())) {s = 759;}

                        else if ( (LA119_154==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 760;}

                        else if ( (LA119_154==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 761;}

                        else if ( (LA119_154==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 762;}

                        else if ( (LA119_154==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 763;}

                        else if ( (LA119_154==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 764;}

                        else if ( (LA119_154==SQL) && (synpred3_EsperEPL2Grammar())) {s = 765;}

                        else if ( (LA119_154==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 766;}

                        else if ( (LA119_154==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 767;}

                        else if ( (LA119_154==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 768;}

                        else if ( (LA119_154==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 769;}

                        else if ( (LA119_154==LW) && (synpred3_EsperEPL2Grammar())) {s = 770;}

                        else if ( (LA119_154==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 771;}

                        else if ( (LA119_154==CAST) && (synpred3_EsperEPL2Grammar())) {s = 772;}

                        else if ( (LA119_154==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 773;}

                        else if ( (LA119_154==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 774;}

                        else if ( (LA119_154==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 775;}

                        else if ( (LA119_154==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 776;}

                        else if ( (LA119_154==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 777;}

                        else if ( (LA119_154==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 778;}

                        else if ( (LA119_154==FULL) && (synpred3_EsperEPL2Grammar())) {s = 779;}

                        else if ( (LA119_154==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 780;}

                        else if ( (LA119_154==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 781;}

                        else if ( (LA119_154==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 782;}

                        else if ( (LA119_154==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 783;}

                        else if ( (LA119_154==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 784;}

                        else if ( (LA119_154==STAR) && (synpred3_EsperEPL2Grammar())) {s = 785;}

                         
                        input.seek(index119_154);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA119_206 = input.LA(1);

                         
                        int index119_206 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA119_206==STRING_LITERAL) ) {s = 786;}

                        else if ( (LA119_206==QUOTED_STRING_LITERAL) ) {s = 787;}

                        else if ( (LA119_206==ALL) && (synpred3_EsperEPL2Grammar())) {s = 788;}

                        else if ( (LA119_206==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 789;}

                        else if ( (LA119_206==CASE) && (synpred3_EsperEPL2Grammar())) {s = 790;}

                        else if ( (LA119_206==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 791;}

                        else if ( (LA119_206==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 792;}

                        else if ( (LA119_206==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 793;}

                        else if ( (LA119_206==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 794;}

                        else if ( (LA119_206==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 795;}

                        else if ( (LA119_206==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 796;}

                        else if ( (LA119_206==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 797;}

                        else if ( (LA119_206==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 798;}

                        else if ( (LA119_206==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 799;}

                        else if ( (LA119_206==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 800;}

                        else if ( (LA119_206==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 801;}

                        else if ( (LA119_206==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 802;}

                        else if ( (LA119_206==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 803;}

                        else if ( (LA119_206==AT) && (synpred3_EsperEPL2Grammar())) {s = 804;}

                        else if ( (LA119_206==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 805;}

                        else if ( (LA119_206==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 806;}

                        else if ( (LA119_206==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 807;}

                        else if ( (LA119_206==SUM) && (synpred3_EsperEPL2Grammar())) {s = 808;}

                        else if ( (LA119_206==AVG) && (synpred3_EsperEPL2Grammar())) {s = 809;}

                        else if ( (LA119_206==MAX) && (synpred3_EsperEPL2Grammar())) {s = 810;}

                        else if ( (LA119_206==MIN) && (synpred3_EsperEPL2Grammar())) {s = 811;}

                        else if ( (LA119_206==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 812;}

                        else if ( (LA119_206==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 813;}

                        else if ( (LA119_206==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 814;}

                        else if ( (LA119_206==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 815;}

                        else if ( (LA119_206==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 816;}

                        else if ( (LA119_206==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 817;}

                        else if ( (LA119_206==LAST) && (synpred3_EsperEPL2Grammar())) {s = 818;}

                        else if ( (LA119_206==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 819;}

                        else if ( (LA119_206==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 820;}

                        else if ( (LA119_206==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 821;}

                        else if ( (LA119_206==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 822;}

                        else if ( (LA119_206==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 823;}

                        else if ( (LA119_206==SQL) && (synpred3_EsperEPL2Grammar())) {s = 824;}

                        else if ( (LA119_206==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 825;}

                        else if ( (LA119_206==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 826;}

                        else if ( (LA119_206==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 827;}

                        else if ( (LA119_206==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 828;}

                        else if ( (LA119_206==LW) && (synpred3_EsperEPL2Grammar())) {s = 829;}

                        else if ( (LA119_206==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 830;}

                        else if ( (LA119_206==CAST) && (synpred3_EsperEPL2Grammar())) {s = 831;}

                        else if ( (LA119_206==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 832;}

                        else if ( (LA119_206==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 833;}

                        else if ( (LA119_206==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 834;}

                        else if ( (LA119_206==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 835;}

                        else if ( (LA119_206==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 836;}

                        else if ( (LA119_206==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 837;}

                        else if ( (LA119_206==FULL) && (synpred3_EsperEPL2Grammar())) {s = 838;}

                        else if ( (LA119_206==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 839;}

                        else if ( (LA119_206==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 840;}

                        else if ( (LA119_206==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 841;}

                        else if ( (LA119_206==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 842;}

                        else if ( (LA119_206==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 843;}

                         
                        input.seek(index119_206);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA119_258 = input.LA(1);

                         
                        int index119_258 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA119_258==STRING_LITERAL) ) {s = 844;}

                        else if ( (LA119_258==QUOTED_STRING_LITERAL) ) {s = 845;}

                        else if ( (LA119_258==ALL) && (synpred3_EsperEPL2Grammar())) {s = 846;}

                        else if ( (LA119_258==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 847;}

                        else if ( (LA119_258==CASE) && (synpred3_EsperEPL2Grammar())) {s = 848;}

                        else if ( (LA119_258==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 849;}

                        else if ( (LA119_258==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 850;}

                        else if ( (LA119_258==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 851;}

                        else if ( (LA119_258==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 852;}

                        else if ( (LA119_258==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 853;}

                        else if ( (LA119_258==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 854;}

                        else if ( (LA119_258==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 855;}

                        else if ( (LA119_258==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 856;}

                        else if ( (LA119_258==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 857;}

                        else if ( (LA119_258==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 858;}

                        else if ( (LA119_258==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 859;}

                        else if ( (LA119_258==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 860;}

                        else if ( (LA119_258==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 861;}

                        else if ( (LA119_258==AT) && (synpred3_EsperEPL2Grammar())) {s = 862;}

                        else if ( (LA119_258==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 863;}

                        else if ( (LA119_258==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 864;}

                        else if ( (LA119_258==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 865;}

                        else if ( (LA119_258==SUM) && (synpred3_EsperEPL2Grammar())) {s = 866;}

                        else if ( (LA119_258==AVG) && (synpred3_EsperEPL2Grammar())) {s = 867;}

                        else if ( (LA119_258==MAX) && (synpred3_EsperEPL2Grammar())) {s = 868;}

                        else if ( (LA119_258==MIN) && (synpred3_EsperEPL2Grammar())) {s = 869;}

                        else if ( (LA119_258==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 870;}

                        else if ( (LA119_258==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 871;}

                        else if ( (LA119_258==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 872;}

                        else if ( (LA119_258==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 873;}

                        else if ( (LA119_258==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 874;}

                        else if ( (LA119_258==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 875;}

                        else if ( (LA119_258==LAST) && (synpred3_EsperEPL2Grammar())) {s = 876;}

                        else if ( (LA119_258==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 877;}

                        else if ( (LA119_258==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 878;}

                        else if ( (LA119_258==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 879;}

                        else if ( (LA119_258==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 880;}

                        else if ( (LA119_258==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 881;}

                        else if ( (LA119_258==SQL) && (synpred3_EsperEPL2Grammar())) {s = 882;}

                        else if ( (LA119_258==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 883;}

                        else if ( (LA119_258==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 884;}

                        else if ( (LA119_258==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 885;}

                        else if ( (LA119_258==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 886;}

                        else if ( (LA119_258==LW) && (synpred3_EsperEPL2Grammar())) {s = 887;}

                        else if ( (LA119_258==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 888;}

                        else if ( (LA119_258==CAST) && (synpred3_EsperEPL2Grammar())) {s = 889;}

                        else if ( (LA119_258==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 890;}

                        else if ( (LA119_258==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 891;}

                        else if ( (LA119_258==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 892;}

                        else if ( (LA119_258==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 893;}

                        else if ( (LA119_258==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 894;}

                        else if ( (LA119_258==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 895;}

                        else if ( (LA119_258==FULL) && (synpred3_EsperEPL2Grammar())) {s = 896;}

                        else if ( (LA119_258==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 897;}

                        else if ( (LA119_258==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 898;}

                        else if ( (LA119_258==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 899;}

                        else if ( (LA119_258==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 900;}

                        else if ( (LA119_258==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 901;}

                         
                        input.seek(index119_258);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA119_310 = input.LA(1);

                         
                        int index119_310 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA119_310==STRING_LITERAL) ) {s = 902;}

                        else if ( (LA119_310==QUOTED_STRING_LITERAL) ) {s = 903;}

                        else if ( (LA119_310==CASE) && (synpred3_EsperEPL2Grammar())) {s = 904;}

                        else if ( (LA119_310==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 905;}

                        else if ( (LA119_310==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 906;}

                        else if ( (LA119_310==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 907;}

                        else if ( (LA119_310==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 908;}

                        else if ( (LA119_310==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 909;}

                        else if ( (LA119_310==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 910;}

                        else if ( (LA119_310==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 911;}

                        else if ( (LA119_310==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 912;}

                        else if ( (LA119_310==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 913;}

                        else if ( (LA119_310==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 914;}

                        else if ( (LA119_310==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 915;}

                        else if ( (LA119_310==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 916;}

                        else if ( (LA119_310==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 917;}

                        else if ( (LA119_310==AT) && (synpred3_EsperEPL2Grammar())) {s = 918;}

                        else if ( (LA119_310==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 919;}

                        else if ( (LA119_310==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 920;}

                        else if ( (LA119_310==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 921;}

                        else if ( (LA119_310==SUM) && (synpred3_EsperEPL2Grammar())) {s = 922;}

                        else if ( (LA119_310==AVG) && (synpred3_EsperEPL2Grammar())) {s = 923;}

                        else if ( (LA119_310==MAX) && (synpred3_EsperEPL2Grammar())) {s = 924;}

                        else if ( (LA119_310==MIN) && (synpred3_EsperEPL2Grammar())) {s = 925;}

                        else if ( (LA119_310==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 926;}

                        else if ( (LA119_310==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 927;}

                        else if ( (LA119_310==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 928;}

                        else if ( (LA119_310==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 929;}

                        else if ( (LA119_310==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 930;}

                        else if ( (LA119_310==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 931;}

                        else if ( (LA119_310==LAST) && (synpred3_EsperEPL2Grammar())) {s = 932;}

                        else if ( (LA119_310==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 933;}

                        else if ( (LA119_310==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 934;}

                        else if ( (LA119_310==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 935;}

                        else if ( (LA119_310==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 936;}

                        else if ( (LA119_310==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 937;}

                        else if ( (LA119_310==SQL) && (synpred3_EsperEPL2Grammar())) {s = 938;}

                        else if ( (LA119_310==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 939;}

                        else if ( (LA119_310==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 940;}

                        else if ( (LA119_310==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 941;}

                        else if ( (LA119_310==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 942;}

                        else if ( (LA119_310==LW) && (synpred3_EsperEPL2Grammar())) {s = 943;}

                        else if ( (LA119_310==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 944;}

                        else if ( (LA119_310==CAST) && (synpred3_EsperEPL2Grammar())) {s = 945;}

                        else if ( (LA119_310==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 946;}

                        else if ( (LA119_310==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 947;}

                        else if ( (LA119_310==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 948;}

                        else if ( (LA119_310==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 949;}

                        else if ( (LA119_310==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 950;}

                        else if ( (LA119_310==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 951;}

                        else if ( (LA119_310==FULL) && (synpred3_EsperEPL2Grammar())) {s = 952;}

                        else if ( (LA119_310==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 953;}

                        else if ( (LA119_310==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 954;}

                        else if ( (LA119_310==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 955;}

                        else if ( (LA119_310==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 956;}

                        else if ( (LA119_310==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 957;}

                         
                        input.seek(index119_310);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA119_362 = input.LA(1);

                         
                        int index119_362 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA119_362==ALL) && (synpred3_EsperEPL2Grammar())) {s = 958;}

                        else if ( (LA119_362==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 959;}

                        else if ( (LA119_362==CASE) && (synpred3_EsperEPL2Grammar())) {s = 960;}

                        else if ( (LA119_362==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 961;}

                        else if ( (LA119_362==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 962;}

                        else if ( (LA119_362==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 963;}

                        else if ( (LA119_362==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 964;}

                        else if ( (LA119_362==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 965;}

                        else if ( (LA119_362==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 966;}

                        else if ( (LA119_362==STRING_LITERAL) ) {s = 967;}

                        else if ( (LA119_362==QUOTED_STRING_LITERAL) ) {s = 968;}

                        else if ( (LA119_362==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 969;}

                        else if ( (LA119_362==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 970;}

                        else if ( (LA119_362==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 971;}

                        else if ( (LA119_362==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 972;}

                        else if ( (LA119_362==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 973;}

                        else if ( (LA119_362==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 974;}

                        else if ( (LA119_362==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 975;}

                        else if ( (LA119_362==AT) && (synpred3_EsperEPL2Grammar())) {s = 976;}

                        else if ( (LA119_362==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 977;}

                        else if ( (LA119_362==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 978;}

                        else if ( (LA119_362==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 979;}

                        else if ( (LA119_362==SUM) && (synpred3_EsperEPL2Grammar())) {s = 980;}

                        else if ( (LA119_362==AVG) && (synpred3_EsperEPL2Grammar())) {s = 981;}

                        else if ( (LA119_362==MAX) && (synpred3_EsperEPL2Grammar())) {s = 982;}

                        else if ( (LA119_362==MIN) && (synpred3_EsperEPL2Grammar())) {s = 983;}

                        else if ( (LA119_362==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 984;}

                        else if ( (LA119_362==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 985;}

                        else if ( (LA119_362==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 986;}

                        else if ( (LA119_362==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 987;}

                        else if ( (LA119_362==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 988;}

                        else if ( (LA119_362==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 989;}

                        else if ( (LA119_362==LAST) && (synpred3_EsperEPL2Grammar())) {s = 990;}

                        else if ( (LA119_362==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 991;}

                        else if ( (LA119_362==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 992;}

                        else if ( (LA119_362==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 993;}

                        else if ( (LA119_362==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 994;}

                        else if ( (LA119_362==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 995;}

                        else if ( (LA119_362==SQL) && (synpred3_EsperEPL2Grammar())) {s = 996;}

                        else if ( (LA119_362==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 997;}

                        else if ( (LA119_362==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 998;}

                        else if ( (LA119_362==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 999;}

                        else if ( (LA119_362==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1000;}

                        else if ( (LA119_362==LW) && (synpred3_EsperEPL2Grammar())) {s = 1001;}

                        else if ( (LA119_362==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1002;}

                        else if ( (LA119_362==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1003;}

                        else if ( (LA119_362==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1004;}

                        else if ( (LA119_362==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1005;}

                        else if ( (LA119_362==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1006;}

                        else if ( (LA119_362==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1007;}

                        else if ( (LA119_362==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1008;}

                        else if ( (LA119_362==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1009;}

                        else if ( (LA119_362==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1010;}

                        else if ( (LA119_362==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1011;}

                        else if ( (LA119_362==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1012;}

                        else if ( (LA119_362==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1013;}

                        else if ( (LA119_362==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1014;}

                        else if ( (LA119_362==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1015;}

                         
                        input.seek(index119_362);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA119_414 = input.LA(1);

                         
                        int index119_414 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA119_414==STRING_LITERAL) ) {s = 1016;}

                        else if ( (LA119_414==QUOTED_STRING_LITERAL) ) {s = 1017;}

                        else if ( (LA119_414==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1018;}

                        else if ( (LA119_414==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1019;}

                        else if ( (LA119_414==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1020;}

                        else if ( (LA119_414==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1021;}

                        else if ( (LA119_414==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1022;}

                        else if ( (LA119_414==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1023;}

                        else if ( (LA119_414==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1024;}

                        else if ( (LA119_414==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1025;}

                        else if ( (LA119_414==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1026;}

                        else if ( (LA119_414==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1027;}

                        else if ( (LA119_414==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1028;}

                        else if ( (LA119_414==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1029;}

                        else if ( (LA119_414==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1030;}

                        else if ( (LA119_414==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1031;}

                        else if ( (LA119_414==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1032;}

                        else if ( (LA119_414==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1033;}

                        else if ( (LA119_414==AT) && (synpred3_EsperEPL2Grammar())) {s = 1034;}

                        else if ( (LA119_414==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1035;}

                        else if ( (LA119_414==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1036;}

                        else if ( (LA119_414==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1037;}

                        else if ( (LA119_414==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1038;}

                        else if ( (LA119_414==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1039;}

                        else if ( (LA119_414==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1040;}

                        else if ( (LA119_414==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1041;}

                        else if ( (LA119_414==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1042;}

                        else if ( (LA119_414==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1043;}

                        else if ( (LA119_414==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1044;}

                        else if ( (LA119_414==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1045;}

                        else if ( (LA119_414==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1046;}

                        else if ( (LA119_414==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1047;}

                        else if ( (LA119_414==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1048;}

                        else if ( (LA119_414==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1049;}

                        else if ( (LA119_414==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1050;}

                        else if ( (LA119_414==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1051;}

                        else if ( (LA119_414==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1052;}

                        else if ( (LA119_414==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1053;}

                        else if ( (LA119_414==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1054;}

                        else if ( (LA119_414==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1055;}

                        else if ( (LA119_414==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1056;}

                        else if ( (LA119_414==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1057;}

                        else if ( (LA119_414==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1058;}

                        else if ( (LA119_414==LW) && (synpred3_EsperEPL2Grammar())) {s = 1059;}

                        else if ( (LA119_414==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1060;}

                        else if ( (LA119_414==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1061;}

                        else if ( (LA119_414==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1062;}

                        else if ( (LA119_414==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1063;}

                        else if ( (LA119_414==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1064;}

                        else if ( (LA119_414==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1065;}

                        else if ( (LA119_414==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1066;}

                        else if ( (LA119_414==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1067;}

                        else if ( (LA119_414==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1068;}

                        else if ( (LA119_414==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1069;}

                        else if ( (LA119_414==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1070;}

                        else if ( (LA119_414==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1071;}

                        else if ( (LA119_414==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1072;}

                        else if ( (LA119_414==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1073;}

                         
                        input.seek(index119_414);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA119_466 = input.LA(1);

                         
                        int index119_466 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA119_466==STRING_LITERAL) ) {s = 1074;}

                        else if ( (LA119_466==QUOTED_STRING_LITERAL) ) {s = 1075;}

                        else if ( (LA119_466==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1076;}

                        else if ( (LA119_466==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1077;}

                        else if ( (LA119_466==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1078;}

                        else if ( (LA119_466==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1079;}

                        else if ( (LA119_466==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1080;}

                        else if ( (LA119_466==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1081;}

                        else if ( (LA119_466==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1082;}

                        else if ( (LA119_466==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1083;}

                        else if ( (LA119_466==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1084;}

                        else if ( (LA119_466==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1085;}

                        else if ( (LA119_466==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1086;}

                        else if ( (LA119_466==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1087;}

                        else if ( (LA119_466==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1088;}

                        else if ( (LA119_466==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1089;}

                        else if ( (LA119_466==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1090;}

                        else if ( (LA119_466==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1091;}

                        else if ( (LA119_466==AT) && (synpred3_EsperEPL2Grammar())) {s = 1092;}

                        else if ( (LA119_466==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1093;}

                        else if ( (LA119_466==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1094;}

                        else if ( (LA119_466==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1095;}

                        else if ( (LA119_466==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1096;}

                        else if ( (LA119_466==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1097;}

                        else if ( (LA119_466==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1098;}

                        else if ( (LA119_466==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1099;}

                        else if ( (LA119_466==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1100;}

                        else if ( (LA119_466==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1101;}

                        else if ( (LA119_466==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1102;}

                        else if ( (LA119_466==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1103;}

                        else if ( (LA119_466==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1104;}

                        else if ( (LA119_466==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1105;}

                        else if ( (LA119_466==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1106;}

                        else if ( (LA119_466==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1107;}

                        else if ( (LA119_466==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1108;}

                        else if ( (LA119_466==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1109;}

                        else if ( (LA119_466==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1110;}

                        else if ( (LA119_466==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1111;}

                        else if ( (LA119_466==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1112;}

                        else if ( (LA119_466==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1113;}

                        else if ( (LA119_466==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1114;}

                        else if ( (LA119_466==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1115;}

                        else if ( (LA119_466==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1116;}

                        else if ( (LA119_466==LW) && (synpred3_EsperEPL2Grammar())) {s = 1117;}

                        else if ( (LA119_466==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1118;}

                        else if ( (LA119_466==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1119;}

                        else if ( (LA119_466==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1120;}

                        else if ( (LA119_466==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1121;}

                        else if ( (LA119_466==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1122;}

                        else if ( (LA119_466==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1123;}

                        else if ( (LA119_466==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1124;}

                        else if ( (LA119_466==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1125;}

                        else if ( (LA119_466==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1126;}

                        else if ( (LA119_466==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1127;}

                        else if ( (LA119_466==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1128;}

                        else if ( (LA119_466==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1129;}

                        else if ( (LA119_466==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1130;}

                        else if ( (LA119_466==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1131;}

                         
                        input.seek(index119_466);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA119_518 = input.LA(1);

                         
                        int index119_518 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA119_518==STRING_LITERAL) ) {s = 1132;}

                        else if ( (LA119_518==QUOTED_STRING_LITERAL) ) {s = 1133;}

                        else if ( (LA119_518==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1134;}

                        else if ( (LA119_518==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1135;}

                        else if ( (LA119_518==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1136;}

                        else if ( (LA119_518==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1137;}

                        else if ( (LA119_518==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1138;}

                        else if ( (LA119_518==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1139;}

                        else if ( (LA119_518==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1140;}

                        else if ( (LA119_518==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1141;}

                        else if ( (LA119_518==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1142;}

                        else if ( (LA119_518==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1143;}

                        else if ( (LA119_518==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1144;}

                        else if ( (LA119_518==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1145;}

                        else if ( (LA119_518==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1146;}

                        else if ( (LA119_518==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1147;}

                        else if ( (LA119_518==AT) && (synpred3_EsperEPL2Grammar())) {s = 1148;}

                        else if ( (LA119_518==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1149;}

                        else if ( (LA119_518==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1150;}

                        else if ( (LA119_518==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1151;}

                        else if ( (LA119_518==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1152;}

                        else if ( (LA119_518==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1153;}

                        else if ( (LA119_518==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1154;}

                        else if ( (LA119_518==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1155;}

                        else if ( (LA119_518==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1156;}

                        else if ( (LA119_518==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1157;}

                        else if ( (LA119_518==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1158;}

                        else if ( (LA119_518==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1159;}

                        else if ( (LA119_518==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1160;}

                        else if ( (LA119_518==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1161;}

                        else if ( (LA119_518==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1162;}

                        else if ( (LA119_518==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1163;}

                        else if ( (LA119_518==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1164;}

                        else if ( (LA119_518==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1165;}

                        else if ( (LA119_518==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1166;}

                        else if ( (LA119_518==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1167;}

                        else if ( (LA119_518==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1168;}

                        else if ( (LA119_518==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1169;}

                        else if ( (LA119_518==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1170;}

                        else if ( (LA119_518==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1171;}

                        else if ( (LA119_518==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1172;}

                        else if ( (LA119_518==LW) && (synpred3_EsperEPL2Grammar())) {s = 1173;}

                        else if ( (LA119_518==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1174;}

                        else if ( (LA119_518==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1175;}

                        else if ( (LA119_518==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1176;}

                        else if ( (LA119_518==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1177;}

                        else if ( (LA119_518==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1178;}

                        else if ( (LA119_518==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1179;}

                        else if ( (LA119_518==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1180;}

                        else if ( (LA119_518==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1181;}

                        else if ( (LA119_518==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1182;}

                        else if ( (LA119_518==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1183;}

                        else if ( (LA119_518==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1184;}

                        else if ( (LA119_518==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1185;}

                        else if ( (LA119_518==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1186;}

                        else if ( (LA119_518==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1187;}

                         
                        input.seek(index119_518);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA119_570 = input.LA(1);

                         
                        int index119_570 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA119_570==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1188;}

                        else if ( ((LA119_570>=STRING_LITERAL && LA119_570<=QUOTED_STRING_LITERAL)) ) {s = 14;}

                         
                        input.seek(index119_570);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA119_622 = input.LA(1);

                         
                        int index119_622 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA119_622==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1191;}

                        else if ( (LA119_622==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1192;}

                        else if ( (LA119_622==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1193;}

                        else if ( (LA119_622==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1194;}

                        else if ( (LA119_622==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1195;}

                        else if ( (LA119_622==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1196;}

                        else if ( (LA119_622==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1197;}

                        else if ( (LA119_622==STRING_LITERAL) ) {s = 1198;}

                        else if ( (LA119_622==QUOTED_STRING_LITERAL) ) {s = 1199;}

                        else if ( (LA119_622==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1200;}

                        else if ( (LA119_622==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1201;}

                        else if ( (LA119_622==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1202;}

                        else if ( (LA119_622==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1203;}

                        else if ( (LA119_622==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1204;}

                        else if ( (LA119_622==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1205;}

                        else if ( (LA119_622==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1206;}

                        else if ( (LA119_622==AT) && (synpred3_EsperEPL2Grammar())) {s = 1207;}

                        else if ( (LA119_622==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1208;}

                        else if ( (LA119_622==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1209;}

                        else if ( (LA119_622==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1210;}

                        else if ( (LA119_622==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1211;}

                        else if ( (LA119_622==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1212;}

                        else if ( (LA119_622==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1213;}

                        else if ( (LA119_622==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1214;}

                        else if ( (LA119_622==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1215;}

                        else if ( (LA119_622==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1216;}

                        else if ( (LA119_622==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1217;}

                        else if ( (LA119_622==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1218;}

                        else if ( (LA119_622==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1219;}

                        else if ( (LA119_622==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1220;}

                        else if ( (LA119_622==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1221;}

                        else if ( (LA119_622==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1222;}

                        else if ( (LA119_622==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1223;}

                        else if ( (LA119_622==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1224;}

                        else if ( (LA119_622==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1225;}

                        else if ( (LA119_622==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1226;}

                        else if ( (LA119_622==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1227;}

                        else if ( (LA119_622==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1228;}

                        else if ( (LA119_622==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1229;}

                        else if ( (LA119_622==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1230;}

                        else if ( (LA119_622==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1231;}

                        else if ( (LA119_622==LW) && (synpred3_EsperEPL2Grammar())) {s = 1232;}

                        else if ( (LA119_622==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1233;}

                        else if ( (LA119_622==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1234;}

                        else if ( (LA119_622==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1235;}

                        else if ( (LA119_622==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1236;}

                        else if ( (LA119_622==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1237;}

                        else if ( (LA119_622==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1238;}

                        else if ( (LA119_622==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1239;}

                        else if ( (LA119_622==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1240;}

                        else if ( (LA119_622==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1241;}

                        else if ( (LA119_622==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1242;}

                        else if ( (LA119_622==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1243;}

                        else if ( (LA119_622==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1244;}

                        else if ( (LA119_622==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1245;}

                        else if ( (LA119_622==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1246;}

                         
                        input.seek(index119_622);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA119_674 = input.LA(1);

                         
                        int index119_674 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA119_674==STRING_LITERAL) ) {s = 1247;}

                        else if ( (LA119_674==QUOTED_STRING_LITERAL) ) {s = 1248;}

                        else if ( (LA119_674==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1249;}

                        else if ( (LA119_674==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1250;}

                        else if ( (LA119_674==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1251;}

                        else if ( (LA119_674==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1252;}

                        else if ( (LA119_674==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1253;}

                        else if ( (LA119_674==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1254;}

                        else if ( (LA119_674==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1255;}

                        else if ( (LA119_674==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1256;}

                        else if ( (LA119_674==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1257;}

                        else if ( (LA119_674==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1258;}

                        else if ( (LA119_674==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1259;}

                        else if ( (LA119_674==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1260;}

                        else if ( (LA119_674==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1261;}

                        else if ( (LA119_674==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1262;}

                        else if ( (LA119_674==AT) && (synpred3_EsperEPL2Grammar())) {s = 1263;}

                        else if ( (LA119_674==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1264;}

                        else if ( (LA119_674==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1265;}

                        else if ( (LA119_674==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1266;}

                        else if ( (LA119_674==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1267;}

                        else if ( (LA119_674==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1268;}

                        else if ( (LA119_674==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1269;}

                        else if ( (LA119_674==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1270;}

                        else if ( (LA119_674==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1271;}

                        else if ( (LA119_674==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1272;}

                        else if ( (LA119_674==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1273;}

                        else if ( (LA119_674==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1274;}

                        else if ( (LA119_674==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1275;}

                        else if ( (LA119_674==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1276;}

                        else if ( (LA119_674==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1277;}

                        else if ( (LA119_674==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1278;}

                        else if ( (LA119_674==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1279;}

                        else if ( (LA119_674==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1280;}

                        else if ( (LA119_674==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1281;}

                        else if ( (LA119_674==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1282;}

                        else if ( (LA119_674==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1283;}

                        else if ( (LA119_674==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1284;}

                        else if ( (LA119_674==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1285;}

                        else if ( (LA119_674==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1286;}

                        else if ( (LA119_674==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1287;}

                        else if ( (LA119_674==LW) && (synpred3_EsperEPL2Grammar())) {s = 1288;}

                        else if ( (LA119_674==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1289;}

                        else if ( (LA119_674==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1290;}

                        else if ( (LA119_674==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1291;}

                        else if ( (LA119_674==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1292;}

                        else if ( (LA119_674==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1293;}

                        else if ( (LA119_674==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1294;}

                        else if ( (LA119_674==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1295;}

                        else if ( (LA119_674==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1296;}

                        else if ( (LA119_674==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1297;}

                        else if ( (LA119_674==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1298;}

                        else if ( (LA119_674==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1299;}

                        else if ( (LA119_674==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1300;}

                        else if ( (LA119_674==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1301;}

                        else if ( (LA119_674==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1302;}

                         
                        input.seek(index119_674);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA119_726 = input.LA(1);

                         
                        int index119_726 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA119_726==SELECT) ) {s = 1303;}

                        else if ( (LA119_726==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1304;}

                        else if ( (LA119_726==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1305;}

                        else if ( (LA119_726==AT) && (synpred3_EsperEPL2Grammar())) {s = 1306;}

                        else if ( (LA119_726==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1307;}

                        else if ( (LA119_726==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1308;}

                        else if ( (LA119_726==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1309;}

                        else if ( (LA119_726==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1310;}

                        else if ( (LA119_726==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1311;}

                        else if ( (LA119_726==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1312;}

                        else if ( (LA119_726==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1313;}

                        else if ( (LA119_726==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1314;}

                        else if ( (LA119_726==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1315;}

                        else if ( (LA119_726==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1316;}

                        else if ( (LA119_726==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1317;}

                        else if ( (LA119_726==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1318;}

                        else if ( (LA119_726==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1319;}

                        else if ( (LA119_726==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1320;}

                        else if ( (LA119_726==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1321;}

                        else if ( (LA119_726==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1322;}

                        else if ( (LA119_726==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1323;}

                        else if ( (LA119_726==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1324;}

                        else if ( (LA119_726==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1325;}

                        else if ( (LA119_726==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1326;}

                        else if ( (LA119_726==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1327;}

                        else if ( (LA119_726==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1328;}

                        else if ( (LA119_726==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1329;}

                        else if ( (LA119_726==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1330;}

                        else if ( (LA119_726==LW) && (synpred3_EsperEPL2Grammar())) {s = 1331;}

                        else if ( (LA119_726==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1332;}

                        else if ( (LA119_726==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1333;}

                        else if ( (LA119_726==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1334;}

                        else if ( (LA119_726==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1335;}

                        else if ( (LA119_726==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1336;}

                        else if ( (LA119_726==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1337;}

                        else if ( (LA119_726==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1338;}

                        else if ( (LA119_726==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1339;}

                        else if ( (LA119_726==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1340;}

                        else if ( (LA119_726==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1341;}

                         
                        input.seek(index119_726);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA119_727 = input.LA(1);

                         
                        int index119_727 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA119_727==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1342;}

                        else if ( (LA119_727==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1343;}

                        else if ( (LA119_727==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1344;}

                        else if ( (LA119_727==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1345;}

                        else if ( (LA119_727==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1346;}

                        else if ( (LA119_727==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1347;}

                        else if ( (LA119_727==LT) && (synpred3_EsperEPL2Grammar())) {s = 1348;}

                        else if ( (LA119_727==GT) && (synpred3_EsperEPL2Grammar())) {s = 1349;}

                        else if ( (LA119_727==LE) && (synpred3_EsperEPL2Grammar())) {s = 1350;}

                        else if ( (LA119_727==GE) && (synpred3_EsperEPL2Grammar())) {s = 1351;}

                        else if ( (LA119_727==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1352;}

                        else if ( (LA119_727==IS) && (synpred3_EsperEPL2Grammar())) {s = 1353;}

                        else if ( (LA119_727==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1354;}

                        else if ( (LA119_727==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1355;}

                        else if ( (LA119_727==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1356;}

                        else if ( (LA119_727==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1357;}

                        else if ( (LA119_727==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1358;}

                        else if ( (LA119_727==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1359;}

                        else if ( (LA119_727==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1360;}

                        else if ( (LA119_727==RPAREN) ) {s = 1361;}

                        else if ( (LA119_727==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1362;}

                        else if ( (LA119_727==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1363;}

                        else if ( (LA119_727==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1364;}

                        else if ( (LA119_727==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1365;}

                        else if ( (LA119_727==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1366;}

                         
                        input.seek(index119_727);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA119_728 = input.LA(1);

                         
                        int index119_728 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA119_728==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1367;}

                        else if ( (LA119_728==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1368;}

                        else if ( (LA119_728==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1369;}

                        else if ( (LA119_728==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1370;}

                        else if ( (LA119_728==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1371;}

                        else if ( (LA119_728==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1372;}

                        else if ( (LA119_728==LT) && (synpred3_EsperEPL2Grammar())) {s = 1373;}

                        else if ( (LA119_728==GT) && (synpred3_EsperEPL2Grammar())) {s = 1374;}

                        else if ( (LA119_728==LE) && (synpred3_EsperEPL2Grammar())) {s = 1375;}

                        else if ( (LA119_728==GE) && (synpred3_EsperEPL2Grammar())) {s = 1376;}

                        else if ( (LA119_728==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1377;}

                        else if ( (LA119_728==IS) && (synpred3_EsperEPL2Grammar())) {s = 1378;}

                        else if ( (LA119_728==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1379;}

                        else if ( (LA119_728==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1380;}

                        else if ( (LA119_728==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1381;}

                        else if ( (LA119_728==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1382;}

                        else if ( (LA119_728==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1383;}

                        else if ( (LA119_728==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1384;}

                        else if ( (LA119_728==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1385;}

                        else if ( (LA119_728==RPAREN) ) {s = 1386;}

                        else if ( (LA119_728==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1387;}

                        else if ( (LA119_728==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1388;}

                        else if ( (LA119_728==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1389;}

                        else if ( (LA119_728==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1390;}

                        else if ( (LA119_728==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1391;}

                         
                        input.seek(index119_728);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA119_786 = input.LA(1);

                         
                        int index119_786 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA119_786==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1392;}

                        else if ( (LA119_786==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1393;}

                        else if ( (LA119_786==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1394;}

                        else if ( (LA119_786==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1395;}

                        else if ( (LA119_786==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1396;}

                        else if ( (LA119_786==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1397;}

                        else if ( (LA119_786==LT) && (synpred3_EsperEPL2Grammar())) {s = 1398;}

                        else if ( (LA119_786==GT) && (synpred3_EsperEPL2Grammar())) {s = 1399;}

                        else if ( (LA119_786==LE) && (synpred3_EsperEPL2Grammar())) {s = 1400;}

                        else if ( (LA119_786==GE) && (synpred3_EsperEPL2Grammar())) {s = 1401;}

                        else if ( (LA119_786==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1402;}

                        else if ( (LA119_786==IS) && (synpred3_EsperEPL2Grammar())) {s = 1403;}

                        else if ( (LA119_786==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1404;}

                        else if ( (LA119_786==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1405;}

                        else if ( (LA119_786==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1406;}

                        else if ( (LA119_786==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1407;}

                        else if ( (LA119_786==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1408;}

                        else if ( (LA119_786==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1409;}

                        else if ( (LA119_786==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1410;}

                        else if ( (LA119_786==RPAREN) ) {s = 1411;}

                        else if ( (LA119_786==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1412;}

                        else if ( (LA119_786==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1413;}

                        else if ( (LA119_786==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1414;}

                        else if ( (LA119_786==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1415;}

                        else if ( (LA119_786==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1416;}

                         
                        input.seek(index119_786);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA119_787 = input.LA(1);

                         
                        int index119_787 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA119_787==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1417;}

                        else if ( (LA119_787==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1418;}

                        else if ( (LA119_787==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1419;}

                        else if ( (LA119_787==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1420;}

                        else if ( (LA119_787==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1421;}

                        else if ( (LA119_787==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1422;}

                        else if ( (LA119_787==LT) && (synpred3_EsperEPL2Grammar())) {s = 1423;}

                        else if ( (LA119_787==GT) && (synpred3_EsperEPL2Grammar())) {s = 1424;}

                        else if ( (LA119_787==LE) && (synpred3_EsperEPL2Grammar())) {s = 1425;}

                        else if ( (LA119_787==GE) && (synpred3_EsperEPL2Grammar())) {s = 1426;}

                        else if ( (LA119_787==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1427;}

                        else if ( (LA119_787==IS) && (synpred3_EsperEPL2Grammar())) {s = 1428;}

                        else if ( (LA119_787==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1429;}

                        else if ( (LA119_787==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1430;}

                        else if ( (LA119_787==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1431;}

                        else if ( (LA119_787==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1432;}

                        else if ( (LA119_787==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1433;}

                        else if ( (LA119_787==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1434;}

                        else if ( (LA119_787==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1435;}

                        else if ( (LA119_787==RPAREN) ) {s = 1436;}

                        else if ( (LA119_787==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1437;}

                        else if ( (LA119_787==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1438;}

                        else if ( (LA119_787==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1439;}

                        else if ( (LA119_787==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1440;}

                        else if ( (LA119_787==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1441;}

                         
                        input.seek(index119_787);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA119_844 = input.LA(1);

                         
                        int index119_844 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA119_844==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1442;}

                        else if ( (LA119_844==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1443;}

                        else if ( (LA119_844==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1444;}

                        else if ( (LA119_844==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1445;}

                        else if ( (LA119_844==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1446;}

                        else if ( (LA119_844==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1447;}

                        else if ( (LA119_844==LT) && (synpred3_EsperEPL2Grammar())) {s = 1448;}

                        else if ( (LA119_844==GT) && (synpred3_EsperEPL2Grammar())) {s = 1449;}

                        else if ( (LA119_844==LE) && (synpred3_EsperEPL2Grammar())) {s = 1450;}

                        else if ( (LA119_844==GE) && (synpred3_EsperEPL2Grammar())) {s = 1451;}

                        else if ( (LA119_844==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1452;}

                        else if ( (LA119_844==IS) && (synpred3_EsperEPL2Grammar())) {s = 1453;}

                        else if ( (LA119_844==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1454;}

                        else if ( (LA119_844==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1455;}

                        else if ( (LA119_844==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1456;}

                        else if ( (LA119_844==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1457;}

                        else if ( (LA119_844==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1458;}

                        else if ( (LA119_844==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1459;}

                        else if ( (LA119_844==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1460;}

                        else if ( (LA119_844==RPAREN) ) {s = 1461;}

                        else if ( (LA119_844==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1462;}

                        else if ( (LA119_844==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1463;}

                        else if ( (LA119_844==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1464;}

                        else if ( (LA119_844==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1465;}

                        else if ( (LA119_844==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1466;}

                         
                        input.seek(index119_844);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA119_845 = input.LA(1);

                         
                        int index119_845 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA119_845==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1467;}

                        else if ( (LA119_845==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1468;}

                        else if ( (LA119_845==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1469;}

                        else if ( (LA119_845==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1470;}

                        else if ( (LA119_845==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1471;}

                        else if ( (LA119_845==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1472;}

                        else if ( (LA119_845==LT) && (synpred3_EsperEPL2Grammar())) {s = 1473;}

                        else if ( (LA119_845==GT) && (synpred3_EsperEPL2Grammar())) {s = 1474;}

                        else if ( (LA119_845==LE) && (synpred3_EsperEPL2Grammar())) {s = 1475;}

                        else if ( (LA119_845==GE) && (synpred3_EsperEPL2Grammar())) {s = 1476;}

                        else if ( (LA119_845==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1477;}

                        else if ( (LA119_845==IS) && (synpred3_EsperEPL2Grammar())) {s = 1478;}

                        else if ( (LA119_845==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1479;}

                        else if ( (LA119_845==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1480;}

                        else if ( (LA119_845==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1481;}

                        else if ( (LA119_845==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1482;}

                        else if ( (LA119_845==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1483;}

                        else if ( (LA119_845==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1484;}

                        else if ( (LA119_845==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1485;}

                        else if ( (LA119_845==RPAREN) ) {s = 1486;}

                        else if ( (LA119_845==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1487;}

                        else if ( (LA119_845==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1488;}

                        else if ( (LA119_845==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1489;}

                        else if ( (LA119_845==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1490;}

                        else if ( (LA119_845==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1491;}

                         
                        input.seek(index119_845);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA119_902 = input.LA(1);

                         
                        int index119_902 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA119_902==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1492;}

                        else if ( (LA119_902==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1493;}

                        else if ( (LA119_902==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1494;}

                        else if ( (LA119_902==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1495;}

                        else if ( (LA119_902==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1496;}

                        else if ( (LA119_902==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1497;}

                        else if ( (LA119_902==LT) && (synpred3_EsperEPL2Grammar())) {s = 1498;}

                        else if ( (LA119_902==GT) && (synpred3_EsperEPL2Grammar())) {s = 1499;}

                        else if ( (LA119_902==LE) && (synpred3_EsperEPL2Grammar())) {s = 1500;}

                        else if ( (LA119_902==GE) && (synpred3_EsperEPL2Grammar())) {s = 1501;}

                        else if ( (LA119_902==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1502;}

                        else if ( (LA119_902==IS) && (synpred3_EsperEPL2Grammar())) {s = 1503;}

                        else if ( (LA119_902==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1504;}

                        else if ( (LA119_902==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1505;}

                        else if ( (LA119_902==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1506;}

                        else if ( (LA119_902==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1507;}

                        else if ( (LA119_902==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1508;}

                        else if ( (LA119_902==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1509;}

                        else if ( (LA119_902==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1510;}

                        else if ( (LA119_902==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 1511;}

                        else if ( (LA119_902==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1512;}

                        else if ( (LA119_902==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1513;}

                        else if ( (LA119_902==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1514;}

                        else if ( (LA119_902==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1515;}

                        else if ( (LA119_902==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1516;}

                        else if ( (LA119_902==RPAREN) ) {s = 14;}

                         
                        input.seek(index119_902);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA119_903 = input.LA(1);

                         
                        int index119_903 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA119_903==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1518;}

                        else if ( (LA119_903==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1519;}

                        else if ( (LA119_903==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1520;}

                        else if ( (LA119_903==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1521;}

                        else if ( (LA119_903==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1522;}

                        else if ( (LA119_903==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1523;}

                        else if ( (LA119_903==LT) && (synpred3_EsperEPL2Grammar())) {s = 1524;}

                        else if ( (LA119_903==GT) && (synpred3_EsperEPL2Grammar())) {s = 1525;}

                        else if ( (LA119_903==LE) && (synpred3_EsperEPL2Grammar())) {s = 1526;}

                        else if ( (LA119_903==GE) && (synpred3_EsperEPL2Grammar())) {s = 1527;}

                        else if ( (LA119_903==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1528;}

                        else if ( (LA119_903==IS) && (synpred3_EsperEPL2Grammar())) {s = 1529;}

                        else if ( (LA119_903==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1530;}

                        else if ( (LA119_903==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1531;}

                        else if ( (LA119_903==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1532;}

                        else if ( (LA119_903==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1533;}

                        else if ( (LA119_903==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1534;}

                        else if ( (LA119_903==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1535;}

                        else if ( (LA119_903==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1536;}

                        else if ( (LA119_903==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 1537;}

                        else if ( (LA119_903==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1538;}

                        else if ( (LA119_903==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1539;}

                        else if ( (LA119_903==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1540;}

                        else if ( (LA119_903==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1541;}

                        else if ( (LA119_903==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1542;}

                        else if ( (LA119_903==RPAREN) ) {s = 14;}

                         
                        input.seek(index119_903);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA119_967 = input.LA(1);

                         
                        int index119_967 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA119_967==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1544;}

                        else if ( (LA119_967==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1545;}

                        else if ( (LA119_967==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1546;}

                        else if ( (LA119_967==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1547;}

                        else if ( (LA119_967==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1548;}

                        else if ( (LA119_967==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1549;}

                        else if ( (LA119_967==LT) && (synpred3_EsperEPL2Grammar())) {s = 1550;}

                        else if ( (LA119_967==GT) && (synpred3_EsperEPL2Grammar())) {s = 1551;}

                        else if ( (LA119_967==LE) && (synpred3_EsperEPL2Grammar())) {s = 1552;}

                        else if ( (LA119_967==GE) && (synpred3_EsperEPL2Grammar())) {s = 1553;}

                        else if ( (LA119_967==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1554;}

                        else if ( (LA119_967==IS) && (synpred3_EsperEPL2Grammar())) {s = 1555;}

                        else if ( (LA119_967==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1556;}

                        else if ( (LA119_967==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1557;}

                        else if ( (LA119_967==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1558;}

                        else if ( (LA119_967==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1559;}

                        else if ( (LA119_967==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1560;}

                        else if ( (LA119_967==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1561;}

                        else if ( (LA119_967==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1562;}

                        else if ( (LA119_967==RPAREN) ) {s = 1563;}

                        else if ( (LA119_967==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1564;}

                        else if ( (LA119_967==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1565;}

                        else if ( (LA119_967==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1566;}

                        else if ( (LA119_967==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1567;}

                        else if ( (LA119_967==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1568;}

                         
                        input.seek(index119_967);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA119_968 = input.LA(1);

                         
                        int index119_968 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA119_968==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1569;}

                        else if ( (LA119_968==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1570;}

                        else if ( (LA119_968==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1571;}

                        else if ( (LA119_968==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1572;}

                        else if ( (LA119_968==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1573;}

                        else if ( (LA119_968==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1574;}

                        else if ( (LA119_968==LT) && (synpred3_EsperEPL2Grammar())) {s = 1575;}

                        else if ( (LA119_968==GT) && (synpred3_EsperEPL2Grammar())) {s = 1576;}

                        else if ( (LA119_968==LE) && (synpred3_EsperEPL2Grammar())) {s = 1577;}

                        else if ( (LA119_968==GE) && (synpred3_EsperEPL2Grammar())) {s = 1578;}

                        else if ( (LA119_968==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1579;}

                        else if ( (LA119_968==IS) && (synpred3_EsperEPL2Grammar())) {s = 1580;}

                        else if ( (LA119_968==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1581;}

                        else if ( (LA119_968==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1582;}

                        else if ( (LA119_968==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1583;}

                        else if ( (LA119_968==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1584;}

                        else if ( (LA119_968==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1585;}

                        else if ( (LA119_968==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1586;}

                        else if ( (LA119_968==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1587;}

                        else if ( (LA119_968==RPAREN) ) {s = 1588;}

                        else if ( (LA119_968==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1589;}

                        else if ( (LA119_968==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1590;}

                        else if ( (LA119_968==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1591;}

                        else if ( (LA119_968==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1592;}

                        else if ( (LA119_968==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1593;}

                         
                        input.seek(index119_968);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA119_1016 = input.LA(1);

                         
                        int index119_1016 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA119_1016==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1594;}

                        else if ( (LA119_1016==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1595;}

                        else if ( (LA119_1016==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1596;}

                        else if ( (LA119_1016==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1597;}

                        else if ( (LA119_1016==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1598;}

                        else if ( (LA119_1016==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1599;}

                        else if ( (LA119_1016==LT) && (synpred3_EsperEPL2Grammar())) {s = 1600;}

                        else if ( (LA119_1016==GT) && (synpred3_EsperEPL2Grammar())) {s = 1601;}

                        else if ( (LA119_1016==LE) && (synpred3_EsperEPL2Grammar())) {s = 1602;}

                        else if ( (LA119_1016==GE) && (synpred3_EsperEPL2Grammar())) {s = 1603;}

                        else if ( (LA119_1016==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1604;}

                        else if ( (LA119_1016==IS) && (synpred3_EsperEPL2Grammar())) {s = 1605;}

                        else if ( (LA119_1016==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1606;}

                        else if ( (LA119_1016==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1607;}

                        else if ( (LA119_1016==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1608;}

                        else if ( (LA119_1016==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1609;}

                        else if ( (LA119_1016==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1610;}

                        else if ( (LA119_1016==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1611;}

                        else if ( (LA119_1016==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1612;}

                        else if ( (LA119_1016==RPAREN) ) {s = 1613;}

                        else if ( (LA119_1016==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1614;}

                        else if ( (LA119_1016==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1615;}

                        else if ( (LA119_1016==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1616;}

                        else if ( (LA119_1016==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1617;}

                        else if ( (LA119_1016==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1618;}

                         
                        input.seek(index119_1016);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA119_1017 = input.LA(1);

                         
                        int index119_1017 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA119_1017==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1619;}

                        else if ( (LA119_1017==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1620;}

                        else if ( (LA119_1017==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1621;}

                        else if ( (LA119_1017==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1622;}

                        else if ( (LA119_1017==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1623;}

                        else if ( (LA119_1017==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1624;}

                        else if ( (LA119_1017==LT) && (synpred3_EsperEPL2Grammar())) {s = 1625;}

                        else if ( (LA119_1017==GT) && (synpred3_EsperEPL2Grammar())) {s = 1626;}

                        else if ( (LA119_1017==LE) && (synpred3_EsperEPL2Grammar())) {s = 1627;}

                        else if ( (LA119_1017==GE) && (synpred3_EsperEPL2Grammar())) {s = 1628;}

                        else if ( (LA119_1017==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1629;}

                        else if ( (LA119_1017==IS) && (synpred3_EsperEPL2Grammar())) {s = 1630;}

                        else if ( (LA119_1017==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1631;}

                        else if ( (LA119_1017==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1632;}

                        else if ( (LA119_1017==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1633;}

                        else if ( (LA119_1017==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1634;}

                        else if ( (LA119_1017==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1635;}

                        else if ( (LA119_1017==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1636;}

                        else if ( (LA119_1017==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1637;}

                        else if ( (LA119_1017==RPAREN) ) {s = 1638;}

                        else if ( (LA119_1017==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1639;}

                        else if ( (LA119_1017==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1640;}

                        else if ( (LA119_1017==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1641;}

                        else if ( (LA119_1017==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1642;}

                        else if ( (LA119_1017==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1643;}

                         
                        input.seek(index119_1017);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA119_1074 = input.LA(1);

                         
                        int index119_1074 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA119_1074==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1644;}

                        else if ( (LA119_1074==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1645;}

                        else if ( (LA119_1074==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1646;}

                        else if ( (LA119_1074==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1647;}

                        else if ( (LA119_1074==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1648;}

                        else if ( (LA119_1074==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1649;}

                        else if ( (LA119_1074==LT) && (synpred3_EsperEPL2Grammar())) {s = 1650;}

                        else if ( (LA119_1074==GT) && (synpred3_EsperEPL2Grammar())) {s = 1651;}

                        else if ( (LA119_1074==LE) && (synpred3_EsperEPL2Grammar())) {s = 1652;}

                        else if ( (LA119_1074==GE) && (synpred3_EsperEPL2Grammar())) {s = 1653;}

                        else if ( (LA119_1074==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1654;}

                        else if ( (LA119_1074==IS) && (synpred3_EsperEPL2Grammar())) {s = 1655;}

                        else if ( (LA119_1074==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1656;}

                        else if ( (LA119_1074==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1657;}

                        else if ( (LA119_1074==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1658;}

                        else if ( (LA119_1074==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1659;}

                        else if ( (LA119_1074==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1660;}

                        else if ( (LA119_1074==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1661;}

                        else if ( (LA119_1074==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1662;}

                        else if ( (LA119_1074==RPAREN) ) {s = 1663;}

                        else if ( (LA119_1074==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1664;}

                        else if ( (LA119_1074==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1665;}

                        else if ( (LA119_1074==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1666;}

                        else if ( (LA119_1074==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1667;}

                        else if ( (LA119_1074==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1668;}

                         
                        input.seek(index119_1074);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA119_1075 = input.LA(1);

                         
                        int index119_1075 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA119_1075==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1669;}

                        else if ( (LA119_1075==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1670;}

                        else if ( (LA119_1075==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1671;}

                        else if ( (LA119_1075==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1672;}

                        else if ( (LA119_1075==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1673;}

                        else if ( (LA119_1075==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1674;}

                        else if ( (LA119_1075==LT) && (synpred3_EsperEPL2Grammar())) {s = 1675;}

                        else if ( (LA119_1075==GT) && (synpred3_EsperEPL2Grammar())) {s = 1676;}

                        else if ( (LA119_1075==LE) && (synpred3_EsperEPL2Grammar())) {s = 1677;}

                        else if ( (LA119_1075==GE) && (synpred3_EsperEPL2Grammar())) {s = 1678;}

                        else if ( (LA119_1075==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1679;}

                        else if ( (LA119_1075==IS) && (synpred3_EsperEPL2Grammar())) {s = 1680;}

                        else if ( (LA119_1075==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1681;}

                        else if ( (LA119_1075==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1682;}

                        else if ( (LA119_1075==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1683;}

                        else if ( (LA119_1075==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1684;}

                        else if ( (LA119_1075==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1685;}

                        else if ( (LA119_1075==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1686;}

                        else if ( (LA119_1075==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1687;}

                        else if ( (LA119_1075==RPAREN) ) {s = 1688;}

                        else if ( (LA119_1075==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1689;}

                        else if ( (LA119_1075==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1690;}

                        else if ( (LA119_1075==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1691;}

                        else if ( (LA119_1075==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1692;}

                        else if ( (LA119_1075==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1693;}

                         
                        input.seek(index119_1075);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA119_1132 = input.LA(1);

                         
                        int index119_1132 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA119_1132==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1694;}

                        else if ( (LA119_1132==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1695;}

                        else if ( (LA119_1132==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1696;}

                        else if ( (LA119_1132==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1697;}

                        else if ( (LA119_1132==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1698;}

                        else if ( (LA119_1132==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1699;}

                        else if ( (LA119_1132==LT) && (synpred3_EsperEPL2Grammar())) {s = 1700;}

                        else if ( (LA119_1132==GT) && (synpred3_EsperEPL2Grammar())) {s = 1701;}

                        else if ( (LA119_1132==LE) && (synpred3_EsperEPL2Grammar())) {s = 1702;}

                        else if ( (LA119_1132==GE) && (synpred3_EsperEPL2Grammar())) {s = 1703;}

                        else if ( (LA119_1132==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1704;}

                        else if ( (LA119_1132==IS) && (synpred3_EsperEPL2Grammar())) {s = 1705;}

                        else if ( (LA119_1132==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1706;}

                        else if ( (LA119_1132==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1707;}

                        else if ( (LA119_1132==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1708;}

                        else if ( (LA119_1132==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1709;}

                        else if ( (LA119_1132==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1710;}

                        else if ( (LA119_1132==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1711;}

                        else if ( (LA119_1132==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1712;}

                        else if ( (LA119_1132==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 1713;}

                        else if ( (LA119_1132==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1714;}

                        else if ( (LA119_1132==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1715;}

                        else if ( (LA119_1132==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1716;}

                        else if ( (LA119_1132==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1717;}

                        else if ( (LA119_1132==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1718;}

                        else if ( (LA119_1132==RPAREN) ) {s = 14;}

                         
                        input.seek(index119_1132);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA119_1133 = input.LA(1);

                         
                        int index119_1133 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA119_1133==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1720;}

                        else if ( (LA119_1133==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1721;}

                        else if ( (LA119_1133==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1722;}

                        else if ( (LA119_1133==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1723;}

                        else if ( (LA119_1133==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1724;}

                        else if ( (LA119_1133==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1725;}

                        else if ( (LA119_1133==LT) && (synpred3_EsperEPL2Grammar())) {s = 1726;}

                        else if ( (LA119_1133==GT) && (synpred3_EsperEPL2Grammar())) {s = 1727;}

                        else if ( (LA119_1133==LE) && (synpred3_EsperEPL2Grammar())) {s = 1728;}

                        else if ( (LA119_1133==GE) && (synpred3_EsperEPL2Grammar())) {s = 1729;}

                        else if ( (LA119_1133==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1730;}

                        else if ( (LA119_1133==IS) && (synpred3_EsperEPL2Grammar())) {s = 1731;}

                        else if ( (LA119_1133==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1732;}

                        else if ( (LA119_1133==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1733;}

                        else if ( (LA119_1133==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1734;}

                        else if ( (LA119_1133==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1735;}

                        else if ( (LA119_1133==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1736;}

                        else if ( (LA119_1133==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1737;}

                        else if ( (LA119_1133==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1738;}

                        else if ( (LA119_1133==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 1739;}

                        else if ( (LA119_1133==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1740;}

                        else if ( (LA119_1133==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1741;}

                        else if ( (LA119_1133==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1742;}

                        else if ( (LA119_1133==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1743;}

                        else if ( (LA119_1133==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1744;}

                        else if ( (LA119_1133==RPAREN) ) {s = 14;}

                         
                        input.seek(index119_1133);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA119_1198 = input.LA(1);

                         
                        int index119_1198 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA119_1198==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1746;}

                        else if ( (LA119_1198==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1747;}

                        else if ( (LA119_1198==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1748;}

                        else if ( (LA119_1198==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1749;}

                        else if ( (LA119_1198==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1750;}

                        else if ( (LA119_1198==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1751;}

                        else if ( (LA119_1198==LT) && (synpred3_EsperEPL2Grammar())) {s = 1752;}

                        else if ( (LA119_1198==GT) && (synpred3_EsperEPL2Grammar())) {s = 1753;}

                        else if ( (LA119_1198==LE) && (synpred3_EsperEPL2Grammar())) {s = 1754;}

                        else if ( (LA119_1198==GE) && (synpred3_EsperEPL2Grammar())) {s = 1755;}

                        else if ( (LA119_1198==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1756;}

                        else if ( (LA119_1198==IS) && (synpred3_EsperEPL2Grammar())) {s = 1757;}

                        else if ( (LA119_1198==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1758;}

                        else if ( (LA119_1198==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1759;}

                        else if ( (LA119_1198==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1760;}

                        else if ( (LA119_1198==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1761;}

                        else if ( (LA119_1198==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1762;}

                        else if ( (LA119_1198==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1763;}

                        else if ( (LA119_1198==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1764;}

                        else if ( (LA119_1198==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 1765;}

                        else if ( (LA119_1198==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1766;}

                        else if ( (LA119_1198==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1767;}

                        else if ( (LA119_1198==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1768;}

                        else if ( (LA119_1198==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1769;}

                        else if ( (LA119_1198==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1770;}

                        else if ( (LA119_1198==RPAREN) ) {s = 14;}

                         
                        input.seek(index119_1198);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA119_1199 = input.LA(1);

                         
                        int index119_1199 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA119_1199==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1772;}

                        else if ( (LA119_1199==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1773;}

                        else if ( (LA119_1199==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1774;}

                        else if ( (LA119_1199==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1775;}

                        else if ( (LA119_1199==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1776;}

                        else if ( (LA119_1199==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1777;}

                        else if ( (LA119_1199==LT) && (synpred3_EsperEPL2Grammar())) {s = 1778;}

                        else if ( (LA119_1199==GT) && (synpred3_EsperEPL2Grammar())) {s = 1779;}

                        else if ( (LA119_1199==LE) && (synpred3_EsperEPL2Grammar())) {s = 1780;}

                        else if ( (LA119_1199==GE) && (synpred3_EsperEPL2Grammar())) {s = 1781;}

                        else if ( (LA119_1199==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1782;}

                        else if ( (LA119_1199==IS) && (synpred3_EsperEPL2Grammar())) {s = 1783;}

                        else if ( (LA119_1199==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1784;}

                        else if ( (LA119_1199==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1785;}

                        else if ( (LA119_1199==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1786;}

                        else if ( (LA119_1199==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1787;}

                        else if ( (LA119_1199==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1788;}

                        else if ( (LA119_1199==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1789;}

                        else if ( (LA119_1199==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1790;}

                        else if ( (LA119_1199==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 1791;}

                        else if ( (LA119_1199==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1792;}

                        else if ( (LA119_1199==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1793;}

                        else if ( (LA119_1199==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1794;}

                        else if ( (LA119_1199==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1795;}

                        else if ( (LA119_1199==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1796;}

                        else if ( (LA119_1199==RPAREN) ) {s = 14;}

                         
                        input.seek(index119_1199);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA119_1247 = input.LA(1);

                         
                        int index119_1247 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA119_1247==RPAREN) ) {s = 14;}

                        else if ( (LA119_1247==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1799;}

                        else if ( (LA119_1247==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1800;}

                        else if ( (LA119_1247==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1801;}

                        else if ( (LA119_1247==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1802;}

                        else if ( (LA119_1247==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1803;}

                        else if ( (LA119_1247==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1804;}

                        else if ( (LA119_1247==LT) && (synpred3_EsperEPL2Grammar())) {s = 1805;}

                        else if ( (LA119_1247==GT) && (synpred3_EsperEPL2Grammar())) {s = 1806;}

                        else if ( (LA119_1247==LE) && (synpred3_EsperEPL2Grammar())) {s = 1807;}

                        else if ( (LA119_1247==GE) && (synpred3_EsperEPL2Grammar())) {s = 1808;}

                        else if ( (LA119_1247==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1809;}

                        else if ( (LA119_1247==IS) && (synpred3_EsperEPL2Grammar())) {s = 1810;}

                        else if ( (LA119_1247==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1811;}

                        else if ( (LA119_1247==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1812;}

                        else if ( (LA119_1247==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1813;}

                        else if ( (LA119_1247==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1814;}

                        else if ( (LA119_1247==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1815;}

                        else if ( (LA119_1247==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1816;}

                        else if ( (LA119_1247==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1817;}

                        else if ( (LA119_1247==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 1818;}

                        else if ( (LA119_1247==AS) && (synpred3_EsperEPL2Grammar())) {s = 1819;}

                        else if ( (LA119_1247==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1820;}

                        else if ( (LA119_1247==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1821;}

                        else if ( (LA119_1247==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1822;}

                        else if ( (LA119_1247==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1823;}

                        else if ( (LA119_1247==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1824;}

                         
                        input.seek(index119_1247);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA119_1248 = input.LA(1);

                         
                        int index119_1248 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA119_1248==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1825;}

                        else if ( (LA119_1248==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1826;}

                        else if ( (LA119_1248==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1827;}

                        else if ( (LA119_1248==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1828;}

                        else if ( (LA119_1248==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1829;}

                        else if ( (LA119_1248==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1830;}

                        else if ( (LA119_1248==LT) && (synpred3_EsperEPL2Grammar())) {s = 1831;}

                        else if ( (LA119_1248==GT) && (synpred3_EsperEPL2Grammar())) {s = 1832;}

                        else if ( (LA119_1248==LE) && (synpred3_EsperEPL2Grammar())) {s = 1833;}

                        else if ( (LA119_1248==GE) && (synpred3_EsperEPL2Grammar())) {s = 1834;}

                        else if ( (LA119_1248==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1835;}

                        else if ( (LA119_1248==IS) && (synpred3_EsperEPL2Grammar())) {s = 1836;}

                        else if ( (LA119_1248==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1837;}

                        else if ( (LA119_1248==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1838;}

                        else if ( (LA119_1248==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1839;}

                        else if ( (LA119_1248==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1840;}

                        else if ( (LA119_1248==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1841;}

                        else if ( (LA119_1248==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1842;}

                        else if ( (LA119_1248==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1843;}

                        else if ( (LA119_1248==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 1844;}

                        else if ( (LA119_1248==AS) && (synpred3_EsperEPL2Grammar())) {s = 1845;}

                        else if ( (LA119_1248==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1846;}

                        else if ( (LA119_1248==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1847;}

                        else if ( (LA119_1248==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1848;}

                        else if ( (LA119_1248==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1849;}

                        else if ( (LA119_1248==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1850;}

                        else if ( (LA119_1248==RPAREN) ) {s = 14;}

                         
                        input.seek(index119_1248);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA119_1361 = input.LA(1);

                         
                        int index119_1361 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 1850;}

                         
                        input.seek(index119_1361);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA119_1386 = input.LA(1);

                         
                        int index119_1386 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 1850;}

                         
                        input.seek(index119_1386);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA119_1411 = input.LA(1);

                         
                        int index119_1411 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 1850;}

                         
                        input.seek(index119_1411);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA119_1436 = input.LA(1);

                         
                        int index119_1436 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 1850;}

                         
                        input.seek(index119_1436);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA119_1461 = input.LA(1);

                         
                        int index119_1461 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 1850;}

                         
                        input.seek(index119_1461);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA119_1486 = input.LA(1);

                         
                        int index119_1486 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 1850;}

                         
                        input.seek(index119_1486);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA119_1563 = input.LA(1);

                         
                        int index119_1563 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 1850;}

                         
                        input.seek(index119_1563);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA119_1588 = input.LA(1);

                         
                        int index119_1588 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 1850;}

                         
                        input.seek(index119_1588);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA119_1613 = input.LA(1);

                         
                        int index119_1613 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 1850;}

                         
                        input.seek(index119_1613);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA119_1638 = input.LA(1);

                         
                        int index119_1638 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 1850;}

                         
                        input.seek(index119_1638);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA119_1663 = input.LA(1);

                         
                        int index119_1663 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 1850;}

                         
                        input.seek(index119_1663);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA119_1688 = input.LA(1);

                         
                        int index119_1688 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 1850;}

                         
                        input.seek(index119_1688);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 119, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA142_eotS =
        "\u0430\uffff";
    static final String DFA142_eofS =
        "\1\uffff\1\104\1\170\6\uffff\1\u00ac\1\u00e0\u0127\uffff\1\u0245"+
        "\1\u0278\1\u02ac\1\u02e0\42\uffff\1\u0315\1\u0348\6\uffff\1\u037c"+
        "\1\u03b0\u02ce\uffff";
    static final String DFA142_minS =
        "\1\5\2\6\6\uffff\2\6\36\uffff\1\5\1\uffff\1\5\57\uffff\1\5\65\uffff"+
        "\1\5\61\uffff\1\5\63\uffff\2\6\71\uffff\4\6\42\uffff\2\6\6\uffff"+
        "\2\6\34\uffff\2\6\71\uffff\2\6\71\uffff\1\0\31\uffff\1\0\31\uffff"+
        "\1\0\2\uffff\1\0\62\uffff\1\0\61\uffff\1\0\146\uffff\2\0\2\uffff"+
        "\1\0\143\uffff\1\0\2\uffff\1\0\61\uffff\1\0\63\uffff\1\0\31\uffff"+
        "\1\0\31\uffff\1\0\31\uffff\1\0\31\uffff";
    static final String DFA142_maxS =
        "\1\u00fe\2\u00fd\6\uffff\2\u00fd\36\uffff\1\u0100\1\uffff\1\u00fe"+
        "\57\uffff\1\u00fe\65\uffff\1\u0100\61\uffff\1\u0100\63\uffff\2\u00f7"+
        "\71\uffff\4\u00fd\42\uffff\2\u00fd\6\uffff\2\u00fd\34\uffff\2\u00f7"+
        "\71\uffff\2\u00f7\71\uffff\1\0\31\uffff\1\0\31\uffff\1\0\2\uffff"+
        "\1\0\62\uffff\1\0\61\uffff\1\0\146\uffff\2\0\2\uffff\1\0\143\uffff"+
        "\1\0\2\uffff\1\0\61\uffff\1\0\63\uffff\1\0\31\uffff\1\0\31\uffff"+
        "\1\0\31\uffff\1\0\31\uffff";
    static final String DFA142_acceptS =
        "\3\uffff\6\1\2\uffff\36\1\1\uffff\1\1\1\uffff\57\1\1\uffff\65\1"+
        "\1\uffff\61\1\1\uffff\63\1\2\uffff\1\2\74\uffff\42\1\2\uffff\6\1"+
        "\2\uffff\34\1\u00ab\uffff\2\1\1\uffff\62\1\1\uffff\61\1\1\uffff"+
        "\146\1\2\uffff\2\1\1\uffff\143\1\1\uffff\2\1\1\uffff\61\1\1\uffff"+
        "\63\1\150\uffff";
    static final String DFA142_specialS =
        "\1\0\1\1\1\2\6\uffff\1\3\1\4\40\uffff\1\5\57\uffff\1\6\u00d6\uffff"+
        "\1\7\1\10\1\11\1\12\42\uffff\1\13\1\14\6\uffff\1\15\1\16\u0092\uffff"+
        "\1\17\31\uffff\1\20\31\uffff\1\21\2\uffff\1\22\62\uffff\1\23\61"+
        "\uffff\1\24\146\uffff\1\25\1\26\2\uffff\1\27\143\uffff\1\30\2\uffff"+
        "\1\31\61\uffff\1\32\63\uffff\1\33\31\uffff\1\34\31\uffff\1\35\31"+
        "\uffff\1\36\31\uffff}>";
    static final String[] DFA142_transitionS = {
            "\1\41\4\uffff\1\5\3\uffff\1\6\2\uffff\1\7\1\10\1\11\1\12\1"+
            "\13\1\14\1\15\1\16\1\4\10\uffff\1\44\1\uffff\1\46\1\42\1\43"+
            "\1\45\12\uffff\1\17\1\20\1\21\10\uffff\1\22\1\23\1\24\1\26\1"+
            "\27\1\30\1\31\1\32\1\uffff\1\33\1\34\1\35\1\36\2\uffff\1\37"+
            "\1\uffff\1\40\1\25\1\3\u008e\uffff\1\1\36\uffff\1\2",
            "\1\126\1\127\1\130\1\131\1\132\1\76\1\75\1\125\2\uffff\1\107"+
            "\14\uffff\1\114\1\116\1\113\1\115\1\110\7\uffff\1\67\1\uffff"+
            "\1\77\1\100\4\uffff\1\101\5\uffff\1\102\1\111\1\112\35\uffff"+
            "\1\124\1\123\1\122\6\uffff\1\103\175\uffff\1\106\1\uffff\1\66"+
            "\1\53\1\51\1\105\1\54\1\50\1\120\1\117\2\uffff\1\72\1\73\1\74"+
            "\1\70\1\71\1\62\1\63\1\64\1\65\1\61\1\57\1\60\1\55\1\56\1\uffff"+
            "\1\121\2\uffff\1\52\1\47",
            "\1\u008a\1\u008b\1\u008c\1\u008d\1\u008e\1\162\1\161\1\u0089"+
            "\2\uffff\1\173\14\uffff\1\u0080\1\u0082\1\177\1\u0081\1\174"+
            "\7\uffff\1\153\1\uffff\1\163\1\164\4\uffff\1\165\5\uffff\1\166"+
            "\1\175\1\176\35\uffff\1\u0088\1\u0087\1\u0086\6\uffff\1\167"+
            "\175\uffff\1\172\1\uffff\1\152\1\133\1\136\1\171\1\140\1\135"+
            "\1\u0084\1\u0083\2\uffff\1\156\1\157\1\160\1\154\1\155\1\146"+
            "\1\147\1\150\1\151\1\145\1\143\1\144\1\141\1\142\1\uffff\1\u0085"+
            "\2\uffff\1\137\1\134",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u00be\1\u00bf\1\u00c0\1\u00c1\1\u00c2\1\u00a6\1\u00a5\1"+
            "\u00bd\2\uffff\1\u00af\14\uffff\1\u00b4\1\u00b6\1\u00b3\1\u00b5"+
            "\1\u00b0\7\uffff\1\u009f\1\uffff\1\u00a7\1\u00a8\4\uffff\1\u00a9"+
            "\5\uffff\1\u00aa\1\u00b1\1\u00b2\35\uffff\1\u00bc\1\u00bb\1"+
            "\u00ba\6\uffff\1\u00ab\175\uffff\1\u00ae\1\uffff\1\u009e\1\u0093"+
            "\1\u0091\1\u00ad\1\u0094\1\u0090\1\u00b8\1\u00b7\2\uffff\1\u00a2"+
            "\1\u00a3\1\u00a4\1\u00a0\1\u00a1\1\u009a\1\u009b\1\u009c\1\u009d"+
            "\1\u0099\1\u0097\1\u0098\1\u0095\1\u0096\1\uffff\1\u00b9\2\uffff"+
            "\1\u0092\1\u008f",
            "\1\u00f2\1\u00f3\1\u00f4\1\u00f5\1\u00f6\1\u00da\1\u00d9\1"+
            "\u00f1\2\uffff\1\u00e3\14\uffff\1\u00e8\1\u00ea\1\u00e7\1\u00e9"+
            "\1\u00e4\7\uffff\1\u00d3\1\uffff\1\u00db\1\u00dc\4\uffff\1\u00dd"+
            "\5\uffff\1\u00de\1\u00e5\1\u00e6\35\uffff\1\u00f0\1\u00ef\1"+
            "\u00ee\6\uffff\1\u00df\175\uffff\1\u00e2\1\uffff\1\u00d2\1\u00c7"+
            "\1\u00c3\1\u00e1\1\u00c8\1\u00c5\1\u00ec\1\u00eb\2\uffff\1\u00d6"+
            "\1\u00d7\1\u00d8\1\u00d4\1\u00d5\1\u00ce\1\u00cf\1\u00d0\1\u00d1"+
            "\1\u00cd\1\u00cb\1\u00cc\1\u00c9\1\u00ca\1\uffff\1\u00ed\2\uffff"+
            "\1\u00c6\1\u00c4",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u00f9\4\uffff\1\u00f9\2\uffff\2\u00f9\2\uffff\11\u00f9"+
            "\1\uffff\1\u00f9\6\uffff\1\u00f9\1\uffff\4\u00f9\5\uffff\2\u00f9"+
            "\3\uffff\3\u00f9\10\uffff\16\u00f9\1\uffff\1\u00f9\1\uffff\3"+
            "\u00f9\14\uffff\3\u00f9\174\uffff\1\u00f9\2\uffff\1\u00f9\2"+
            "\uffff\2\u00f9\4\uffff\1\u00f7\1\u00f8\12\uffff\2\u00f9\2\uffff"+
            "\1\u00f9\1\uffff\1\u00f9\1\uffff\1\u00f9\1\uffff\3\u00f9",
            "",
            "\1\u0152\4\uffff\1\u0138\3\uffff\1\u0139\2\uffff\1\u013a\1"+
            "\u013b\1\u0133\1\u0134\1\u013c\1\u013d\1\u013e\1\u013f\1\u0137"+
            "\10\uffff\1\u0155\1\uffff\1\u0157\1\u0153\1\u0154\1\u0156\12"+
            "\uffff\1\u0140\1\u0141\1\u0142\10\uffff\1\u0143\1\u0144\1\u0145"+
            "\1\u0147\1\u0148\1\u0149\1\u014a\1\u014b\1\uffff\1\u014c\1\u014d"+
            "\1\u014e\1\u014f\2\uffff\1\u0150\1\uffff\1\u0151\1\u0146\1\u0136"+
            "\u008e\uffff\1\u0132\36\uffff\1\u0135",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0178\4\uffff\1\u015c\3\uffff\1\u015d\2\uffff\1\u015e\1"+
            "\u015f\1\u0160\1\u0161\1\u0162\1\u0163\1\u0164\1\u0165\1\u015b"+
            "\10\uffff\1\u017b\1\uffff\1\u017d\1\u0179\1\u017a\1\u017c\12"+
            "\uffff\1\u0166\1\u0167\1\u0168\10\uffff\1\u0169\1\u016a\1\u016b"+
            "\1\u016d\1\u016e\1\u016f\1\u0170\1\u0171\1\uffff\1\u0172\1\u0173"+
            "\1\u0174\1\u0175\2\uffff\1\u0176\1\uffff\1\u0177\1\u016c\1\u015a"+
            "\u008e\uffff\1\u0158\36\uffff\1\u0159",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u00f9\4\uffff\1\u00f9\2\uffff\2\u00f9\2\uffff\11\u00f9"+
            "\1\uffff\1\u00f9\6\uffff\1\u00f9\1\uffff\4\u00f9\5\uffff\2\u00f9"+
            "\3\uffff\3\u00f9\10\uffff\16\u00f9\1\uffff\1\u00f9\1\uffff\3"+
            "\u00f9\14\uffff\3\u00f9\174\uffff\1\u00f9\2\uffff\1\u00f9\2"+
            "\uffff\2\u00f9\4\uffff\1\u017e\1\u017f\12\uffff\2\u00f9\2\uffff"+
            "\1\u00f9\1\uffff\1\u00f9\1\uffff\1\u00f9\1\uffff\3\u00f9",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u00f9\4\uffff\1\u00f9\2\uffff\2\u00f9\2\uffff\11\u00f9"+
            "\1\uffff\1\u00f9\6\uffff\1\u00f9\1\uffff\4\u00f9\5\uffff\2\u00f9"+
            "\3\uffff\3\u00f9\10\uffff\16\u00f9\1\uffff\1\u00f9\1\uffff\3"+
            "\u00f9\14\uffff\3\u00f9\174\uffff\1\u00f9\2\uffff\1\u00f9\2"+
            "\uffff\2\u00f9\4\uffff\1\u01b9\1\u01ba\12\uffff\2\u00f9\2\uffff"+
            "\1\u00f9\1\uffff\1\u00f9\1\uffff\1\u00f9\1\uffff\3\u00f9",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\4\u00f9\1\uffff\3\u00f9\33\uffff\1\u00f9\u00b4\uffff\1\u00f9"+
            "\1\uffff\1\u00f9\2\uffff\1\u01f4\1\u00f9\5\uffff\16\u00f9",
            "\4\u00f9\1\uffff\3\u00f9\33\uffff\1\u00f9\u00b4\uffff\1\u00f9"+
            "\1\uffff\1\u00f9\2\uffff\1\u020e\1\u00f9\5\uffff\16\u00f9",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0257\1\u0258\1\u0259\1\u025a\1\u025b\1\u023f\1\u023e\1"+
            "\u0256\2\uffff\1\u0248\14\uffff\1\u024d\1\u024f\1\u024c\1\u024e"+
            "\1\u0249\7\uffff\1\u0238\1\uffff\1\u0240\1\u0241\4\uffff\1\u0242"+
            "\5\uffff\1\u0243\1\u024a\1\u024b\35\uffff\1\u0255\1\u0254\1"+
            "\u0253\6\uffff\1\u0244\175\uffff\1\u0247\1\uffff\1\u0237\1\u0228"+
            "\1\u022b\1\u0246\1\u022d\1\u022a\1\u0251\1\u0250\2\uffff\1\u023b"+
            "\1\u023c\1\u023d\1\u0239\1\u023a\1\u0233\1\u0234\1\u0235\1\u0236"+
            "\1\u0232\1\u0230\1\u0231\1\u022e\1\u022f\1\uffff\1\u0252\2\uffff"+
            "\1\u022c\1\u0229",
            "\1\u028a\1\u028b\1\u028c\1\u028d\1\u028e\1\u0272\1\u0271\1"+
            "\u0289\2\uffff\1\u027b\14\uffff\1\u0280\1\u0282\1\u027f\1\u0281"+
            "\1\u027c\7\uffff\1\u026b\1\uffff\1\u0273\1\u0274\4\uffff\1\u0275"+
            "\5\uffff\1\u0276\1\u027d\1\u027e\35\uffff\1\u0288\1\u0287\1"+
            "\u0286\6\uffff\1\u0277\175\uffff\1\u027a\1\uffff\1\u026a\1\u028f"+
            "\1\u025e\1\u0279\1\u0260\1\u025d\1\u0284\1\u0283\2\uffff\1\u026e"+
            "\1\u026f\1\u0270\1\u026c\1\u026d\1\u0266\1\u0267\1\u0268\1\u0269"+
            "\1\u0265\1\u0263\1\u0264\1\u0261\1\u0262\1\uffff\1\u0285\2\uffff"+
            "\1\u025f\1\u025c",
            "\1\u02be\1\u02bf\1\u02c0\1\u02c1\1\u02c2\1\u02a6\1\u02a5\1"+
            "\u02bd\2\uffff\1\u02af\14\uffff\1\u02b4\1\u02b6\1\u02b3\1\u02b5"+
            "\1\u02b0\7\uffff\1\u029f\1\uffff\1\u02a7\1\u02a8\4\uffff\1\u02a9"+
            "\5\uffff\1\u02aa\1\u02b1\1\u02b2\35\uffff\1\u02bc\1\u02bb\1"+
            "\u02ba\6\uffff\1\u02ab\175\uffff\1\u02ae\1\uffff\1\u029e\1\u02c3"+
            "\1\u0290\1\u02ad\1\u0294\1\u0292\1\u02b8\1\u02b7\2\uffff\1\u02a2"+
            "\1\u02a3\1\u02a4\1\u02a0\1\u02a1\1\u029a\1\u029b\1\u029c\1\u029d"+
            "\1\u0299\1\u0297\1\u0298\1\u0295\1\u0296\1\uffff\1\u02b9\2\uffff"+
            "\1\u0293\1\u0291",
            "\1\u02f2\1\u02f3\1\u02f4\1\u02f5\1\u02f6\1\u02da\1\u02d9\1"+
            "\u02f1\2\uffff\1\u02e3\14\uffff\1\u02e8\1\u02ea\1\u02e7\1\u02e9"+
            "\1\u02e4\7\uffff\1\u02d3\1\uffff\1\u02db\1\u02dc\4\uffff\1\u02dd"+
            "\5\uffff\1\u02de\1\u02e5\1\u02e6\35\uffff\1\u02f0\1\u02ef\1"+
            "\u02ee\6\uffff\1\u02df\175\uffff\1\u02e2\1\uffff\1\u02d2\1\u02f7"+
            "\1\u02c6\1\u02e1\1\u02c8\1\u02c5\1\u02ec\1\u02eb\2\uffff\1\u02d6"+
            "\1\u02d7\1\u02d8\1\u02d4\1\u02d5\1\u02ce\1\u02cf\1\u02d0\1\u02d1"+
            "\1\u02cd\1\u02cb\1\u02cc\1\u02c9\1\u02ca\1\uffff\1\u02ed\2\uffff"+
            "\1\u02c7\1\u02c4",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0327\1\u0328\1\u0329\1\u032a\1\u032b\1\u030f\1\u030e\1"+
            "\u0326\2\uffff\1\u0318\14\uffff\1\u031d\1\u031f\1\u031c\1\u031e"+
            "\1\u0319\7\uffff\1\u0308\1\uffff\1\u0310\1\u0311\4\uffff\1\u0312"+
            "\5\uffff\1\u0313\1\u031a\1\u031b\35\uffff\1\u0325\1\u0324\1"+
            "\u0323\6\uffff\1\u0314\175\uffff\1\u0317\1\uffff\1\u0307\1\u02f8"+
            "\1\u02fb\1\u0316\1\u02fd\1\u02fa\1\u0321\1\u0320\2\uffff\1\u030b"+
            "\1\u030c\1\u030d\1\u0309\1\u030a\1\u0303\1\u0304\1\u0305\1\u0306"+
            "\1\u0302\1\u0300\1\u0301\1\u02fe\1\u02ff\1\uffff\1\u0322\2\uffff"+
            "\1\u02fc\1\u02f9",
            "\1\u035a\1\u035b\1\u035c\1\u035d\1\u035e\1\u0342\1\u0341\1"+
            "\u0359\2\uffff\1\u034b\14\uffff\1\u0350\1\u0352\1\u034f\1\u0351"+
            "\1\u034c\7\uffff\1\u033b\1\uffff\1\u0343\1\u0344\4\uffff\1\u0345"+
            "\5\uffff\1\u0346\1\u034d\1\u034e\35\uffff\1\u0358\1\u0357\1"+
            "\u0356\6\uffff\1\u0347\175\uffff\1\u034a\1\uffff\1\u033a\1\u035f"+
            "\1\u032e\1\u0349\1\u0330\1\u032d\1\u0354\1\u0353\2\uffff\1\u033e"+
            "\1\u033f\1\u0340\1\u033c\1\u033d\1\u0336\1\u0337\1\u0338\1\u0339"+
            "\1\u0335\1\u0333\1\u0334\1\u0331\1\u0332\1\uffff\1\u0355\2\uffff"+
            "\1\u032f\1\u032c",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u038e\1\u038f\1\u0390\1\u0391\1\u0392\1\u0376\1\u0375\1"+
            "\u038d\2\uffff\1\u037f\14\uffff\1\u0384\1\u0386\1\u0383\1\u0385"+
            "\1\u0380\7\uffff\1\u036f\1\uffff\1\u0377\1\u0378\4\uffff\1\u0379"+
            "\5\uffff\1\u037a\1\u0381\1\u0382\35\uffff\1\u038c\1\u038b\1"+
            "\u038a\6\uffff\1\u037b\175\uffff\1\u037e\1\uffff\1\u036e\1\u0393"+
            "\1\u0362\1\u037d\1\u0364\1\u0361\1\u0388\1\u0387\2\uffff\1\u0372"+
            "\1\u0373\1\u0374\1\u0370\1\u0371\1\u036a\1\u036b\1\u036c\1\u036d"+
            "\1\u0369\1\u0367\1\u0368\1\u0365\1\u0366\1\uffff\1\u0389\2\uffff"+
            "\1\u0363\1\u0360",
            "\1\u03c2\1\u03c3\1\u03c4\1\u03c5\1\u03c6\1\u03aa\1\u03a9\1"+
            "\u03c1\2\uffff\1\u03b3\14\uffff\1\u03b8\1\u03ba\1\u03b7\1\u03b9"+
            "\1\u03b4\7\uffff\1\u03a3\1\uffff\1\u03ab\1\u03ac\4\uffff\1\u03ad"+
            "\5\uffff\1\u03ae\1\u03b5\1\u03b6\35\uffff\1\u03c0\1\u03bf\1"+
            "\u03be\6\uffff\1\u03af\175\uffff\1\u03b2\1\uffff\1\u03a2\1\u03c7"+
            "\1\u0394\1\u03b1\1\u0398\1\u0396\1\u03bc\1\u03bb\2\uffff\1\u03a6"+
            "\1\u03a7\1\u03a8\1\u03a4\1\u03a5\1\u039e\1\u039f\1\u03a0\1\u03a1"+
            "\1\u039d\1\u039b\1\u039c\1\u0399\1\u039a\1\uffff\1\u03bd\2\uffff"+
            "\1\u0397\1\u0395",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\4\u00f9\1\uffff\3\u00f9\33\uffff\1\u00f9\u00b4\uffff\1\u00f9"+
            "\1\uffff\1\u00f9\2\uffff\1\u03c8\1\u00f9\5\uffff\16\u00f9",
            "\4\u00f9\1\uffff\3\u00f9\33\uffff\1\u00f9\u00b4\uffff\1\u00f9"+
            "\1\uffff\1\u00f9\2\uffff\1\u03e2\1\u00f9\5\uffff\16\u00f9",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\4\u00f9\1\uffff\3\u00f9\33\uffff\1\u00f9\u00b4\uffff\1\u00f9"+
            "\1\uffff\1\u00f9\2\uffff\1\u03fc\1\u00f9\5\uffff\16\u00f9",
            "\4\u00f9\1\uffff\3\u00f9\33\uffff\1\u00f9\u00b4\uffff\1\u00f9"+
            "\1\uffff\1\u00f9\2\uffff\1\u0416\1\u00f9\5\uffff\16\u00f9",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA142_eot = DFA.unpackEncodedString(DFA142_eotS);
    static final short[] DFA142_eof = DFA.unpackEncodedString(DFA142_eofS);
    static final char[] DFA142_min = DFA.unpackEncodedStringToUnsignedChars(DFA142_minS);
    static final char[] DFA142_max = DFA.unpackEncodedStringToUnsignedChars(DFA142_maxS);
    static final short[] DFA142_accept = DFA.unpackEncodedString(DFA142_acceptS);
    static final short[] DFA142_special = DFA.unpackEncodedString(DFA142_specialS);
    static final short[][] DFA142_transition;

    static {
        int numStates = DFA142_transitionS.length;
        DFA142_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA142_transition[i] = DFA.unpackEncodedString(DFA142_transitionS[i]);
        }
    }

    class DFA142 extends DFA {

        public DFA142(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 142;
            this.eot = DFA142_eot;
            this.eof = DFA142_eof;
            this.min = DFA142_min;
            this.max = DFA142_max;
            this.accept = DFA142_accept;
            this.special = DFA142_special;
            this.transition = DFA142_transition;
        }
        public String getDescription() {
            return "1019:1: eventPropertyOrLibFunction : ( ( eventProperty )=> eventProperty | libFunction );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA142_0 = input.LA(1);

                         
                        int index142_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA142_0==IDENT) ) {s = 1;}

                        else if ( (LA142_0==TICKED_STRING_LITERAL) ) {s = 2;}

                        else if ( (LA142_0==AT) && (synpred4_EsperEPL2Grammar())) {s = 3;}

                        else if ( (LA142_0==COUNT) && (synpred4_EsperEPL2Grammar())) {s = 4;}

                        else if ( (LA142_0==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 5;}

                        else if ( (LA142_0==EVERY_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 6;}

                        else if ( (LA142_0==SUM) && (synpred4_EsperEPL2Grammar())) {s = 7;}

                        else if ( (LA142_0==AVG) && (synpred4_EsperEPL2Grammar())) {s = 8;}

                        else if ( (LA142_0==MAX) ) {s = 9;}

                        else if ( (LA142_0==MIN) ) {s = 10;}

                        else if ( (LA142_0==COALESCE) && (synpred4_EsperEPL2Grammar())) {s = 11;}

                        else if ( (LA142_0==MEDIAN) && (synpred4_EsperEPL2Grammar())) {s = 12;}

                        else if ( (LA142_0==STDDEV) && (synpred4_EsperEPL2Grammar())) {s = 13;}

                        else if ( (LA142_0==AVEDEV) && (synpred4_EsperEPL2Grammar())) {s = 14;}

                        else if ( (LA142_0==EVENTS) && (synpred4_EsperEPL2Grammar())) {s = 15;}

                        else if ( (LA142_0==FIRST) && (synpred4_EsperEPL2Grammar())) {s = 16;}

                        else if ( (LA142_0==LAST) && (synpred4_EsperEPL2Grammar())) {s = 17;}

                        else if ( (LA142_0==UNIDIRECTIONAL) && (synpred4_EsperEPL2Grammar())) {s = 18;}

                        else if ( (LA142_0==RETAINUNION) && (synpred4_EsperEPL2Grammar())) {s = 19;}

                        else if ( (LA142_0==RETAININTERSECTION) && (synpred4_EsperEPL2Grammar())) {s = 20;}

                        else if ( (LA142_0==UNTIL) && (synpred4_EsperEPL2Grammar())) {s = 21;}

                        else if ( (LA142_0==PATTERN) && (synpred4_EsperEPL2Grammar())) {s = 22;}

                        else if ( (LA142_0==SQL) && (synpred4_EsperEPL2Grammar())) {s = 23;}

                        else if ( (LA142_0==METADATASQL) && (synpred4_EsperEPL2Grammar())) {s = 24;}

                        else if ( (LA142_0==PREVIOUS) && (synpred4_EsperEPL2Grammar())) {s = 25;}

                        else if ( (LA142_0==PRIOR) && (synpred4_EsperEPL2Grammar())) {s = 26;}

                        else if ( (LA142_0==WEEKDAY) && (synpred4_EsperEPL2Grammar())) {s = 27;}

                        else if ( (LA142_0==LW) && (synpred4_EsperEPL2Grammar())) {s = 28;}

                        else if ( (LA142_0==INSTANCEOF) && (synpred4_EsperEPL2Grammar())) {s = 29;}

                        else if ( (LA142_0==CAST) && (synpred4_EsperEPL2Grammar())) {s = 30;}

                        else if ( (LA142_0==SNAPSHOT) && (synpred4_EsperEPL2Grammar())) {s = 31;}

                        else if ( (LA142_0==VARIABLE) && (synpred4_EsperEPL2Grammar())) {s = 32;}

                        else if ( (LA142_0==WINDOW) && (synpred4_EsperEPL2Grammar())) {s = 33;}

                        else if ( (LA142_0==LEFT) && (synpred4_EsperEPL2Grammar())) {s = 34;}

                        else if ( (LA142_0==RIGHT) && (synpred4_EsperEPL2Grammar())) {s = 35;}

                        else if ( (LA142_0==OUTER) && (synpred4_EsperEPL2Grammar())) {s = 36;}

                        else if ( (LA142_0==FULL) && (synpred4_EsperEPL2Grammar())) {s = 37;}

                        else if ( (LA142_0==JOIN) && (synpred4_EsperEPL2Grammar())) {s = 38;}

                         
                        input.seek(index142_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA142_1 = input.LA(1);

                         
                        int index142_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA142_1==ESCAPECHAR) && (synpred4_EsperEPL2Grammar())) {s = 39;}

                        else if ( (LA142_1==LBRACK) && (synpred4_EsperEPL2Grammar())) {s = 40;}

                        else if ( (LA142_1==LPAREN) ) {s = 41;}

                        else if ( (LA142_1==QUESTION) && (synpred4_EsperEPL2Grammar())) {s = 42;}

                        else if ( (LA142_1==DOT) ) {s = 43;}

                        else if ( (LA142_1==STAR) && (synpred4_EsperEPL2Grammar())) {s = 44;}

                        else if ( (LA142_1==DIV) && (synpred4_EsperEPL2Grammar())) {s = 45;}

                        else if ( (LA142_1==MOD) && (synpred4_EsperEPL2Grammar())) {s = 46;}

                        else if ( (LA142_1==PLUS) && (synpred4_EsperEPL2Grammar())) {s = 47;}

                        else if ( (LA142_1==MINUS) && (synpred4_EsperEPL2Grammar())) {s = 48;}

                        else if ( (LA142_1==LOR) && (synpred4_EsperEPL2Grammar())) {s = 49;}

                        else if ( (LA142_1==LT) && (synpred4_EsperEPL2Grammar())) {s = 50;}

                        else if ( (LA142_1==GT) && (synpred4_EsperEPL2Grammar())) {s = 51;}

                        else if ( (LA142_1==LE) && (synpred4_EsperEPL2Grammar())) {s = 52;}

                        else if ( (LA142_1==GE) && (synpred4_EsperEPL2Grammar())) {s = 53;}

                        else if ( (LA142_1==EQUALS) && (synpred4_EsperEPL2Grammar())) {s = 54;}

                        else if ( (LA142_1==IS) && (synpred4_EsperEPL2Grammar())) {s = 55;}

                        else if ( (LA142_1==SQL_NE) && (synpred4_EsperEPL2Grammar())) {s = 56;}

                        else if ( (LA142_1==NOT_EQUAL) && (synpred4_EsperEPL2Grammar())) {s = 57;}

                        else if ( (LA142_1==BAND) && (synpred4_EsperEPL2Grammar())) {s = 58;}

                        else if ( (LA142_1==BOR) && (synpred4_EsperEPL2Grammar())) {s = 59;}

                        else if ( (LA142_1==BXOR) && (synpred4_EsperEPL2Grammar())) {s = 60;}

                        else if ( (LA142_1==AND_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 61;}

                        else if ( (LA142_1==OR_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 62;}

                        else if ( (LA142_1==GROUP) && (synpred4_EsperEPL2Grammar())) {s = 63;}

                        else if ( (LA142_1==HAVING) && (synpred4_EsperEPL2Grammar())) {s = 64;}

                        else if ( (LA142_1==OUTPUT) && (synpred4_EsperEPL2Grammar())) {s = 65;}

                        else if ( (LA142_1==ORDER) && (synpred4_EsperEPL2Grammar())) {s = 66;}

                        else if ( (LA142_1==ROW_LIMIT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 67;}

                        else if ( (LA142_1==EOF) && (synpred4_EsperEPL2Grammar())) {s = 68;}

                        else if ( (LA142_1==RPAREN) && (synpred4_EsperEPL2Grammar())) {s = 69;}

                        else if ( (LA142_1==COMMA) && (synpred4_EsperEPL2Grammar())) {s = 70;}

                        else if ( (LA142_1==AS) && (synpred4_EsperEPL2Grammar())) {s = 71;}

                        else if ( (LA142_1==FROM) && (synpred4_EsperEPL2Grammar())) {s = 72;}

                        else if ( (LA142_1==ASC) && (synpred4_EsperEPL2Grammar())) {s = 73;}

                        else if ( (LA142_1==DESC) && (synpred4_EsperEPL2Grammar())) {s = 74;}

                        else if ( (LA142_1==THEN) && (synpred4_EsperEPL2Grammar())) {s = 75;}

                        else if ( (LA142_1==ELSE) && (synpred4_EsperEPL2Grammar())) {s = 76;}

                        else if ( (LA142_1==END) && (synpred4_EsperEPL2Grammar())) {s = 77;}

                        else if ( (LA142_1==WHEN) && (synpred4_EsperEPL2Grammar())) {s = 78;}

                        else if ( (LA142_1==COLON) && (synpred4_EsperEPL2Grammar())) {s = 79;}

                        else if ( (LA142_1==RBRACK) && (synpred4_EsperEPL2Grammar())) {s = 80;}

                        else if ( (LA142_1==RCURLY) && (synpred4_EsperEPL2Grammar())) {s = 81;}

                        else if ( (LA142_1==TIMEPERIOD_SECONDS) && (synpred4_EsperEPL2Grammar())) {s = 82;}

                        else if ( (LA142_1==TIMEPERIOD_SECOND) && (synpred4_EsperEPL2Grammar())) {s = 83;}

                        else if ( (LA142_1==TIMEPERIOD_SEC) && (synpred4_EsperEPL2Grammar())) {s = 84;}

                        else if ( (LA142_1==NOT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 85;}

                        else if ( (LA142_1==IN_SET) && (synpred4_EsperEPL2Grammar())) {s = 86;}

                        else if ( (LA142_1==BETWEEN) && (synpred4_EsperEPL2Grammar())) {s = 87;}

                        else if ( (LA142_1==LIKE) && (synpred4_EsperEPL2Grammar())) {s = 88;}

                        else if ( (LA142_1==REGEXP) && (synpred4_EsperEPL2Grammar())) {s = 89;}

                        else if ( (LA142_1==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 90;}

                         
                        input.seek(index142_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA142_2 = input.LA(1);

                         
                        int index142_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA142_2==DOT) ) {s = 91;}

                        else if ( (LA142_2==ESCAPECHAR) && (synpred4_EsperEPL2Grammar())) {s = 92;}

                        else if ( (LA142_2==LBRACK) && (synpred4_EsperEPL2Grammar())) {s = 93;}

                        else if ( (LA142_2==LPAREN) && (synpred4_EsperEPL2Grammar())) {s = 94;}

                        else if ( (LA142_2==QUESTION) && (synpred4_EsperEPL2Grammar())) {s = 95;}

                        else if ( (LA142_2==STAR) && (synpred4_EsperEPL2Grammar())) {s = 96;}

                        else if ( (LA142_2==DIV) && (synpred4_EsperEPL2Grammar())) {s = 97;}

                        else if ( (LA142_2==MOD) && (synpred4_EsperEPL2Grammar())) {s = 98;}

                        else if ( (LA142_2==PLUS) && (synpred4_EsperEPL2Grammar())) {s = 99;}

                        else if ( (LA142_2==MINUS) && (synpred4_EsperEPL2Grammar())) {s = 100;}

                        else if ( (LA142_2==LOR) && (synpred4_EsperEPL2Grammar())) {s = 101;}

                        else if ( (LA142_2==LT) && (synpred4_EsperEPL2Grammar())) {s = 102;}

                        else if ( (LA142_2==GT) && (synpred4_EsperEPL2Grammar())) {s = 103;}

                        else if ( (LA142_2==LE) && (synpred4_EsperEPL2Grammar())) {s = 104;}

                        else if ( (LA142_2==GE) && (synpred4_EsperEPL2Grammar())) {s = 105;}

                        else if ( (LA142_2==EQUALS) && (synpred4_EsperEPL2Grammar())) {s = 106;}

                        else if ( (LA142_2==IS) && (synpred4_EsperEPL2Grammar())) {s = 107;}

                        else if ( (LA142_2==SQL_NE) && (synpred4_EsperEPL2Grammar())) {s = 108;}

                        else if ( (LA142_2==NOT_EQUAL) && (synpred4_EsperEPL2Grammar())) {s = 109;}

                        else if ( (LA142_2==BAND) && (synpred4_EsperEPL2Grammar())) {s = 110;}

                        else if ( (LA142_2==BOR) && (synpred4_EsperEPL2Grammar())) {s = 111;}

                        else if ( (LA142_2==BXOR) && (synpred4_EsperEPL2Grammar())) {s = 112;}

                        else if ( (LA142_2==AND_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 113;}

                        else if ( (LA142_2==OR_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 114;}

                        else if ( (LA142_2==GROUP) && (synpred4_EsperEPL2Grammar())) {s = 115;}

                        else if ( (LA142_2==HAVING) && (synpred4_EsperEPL2Grammar())) {s = 116;}

                        else if ( (LA142_2==OUTPUT) && (synpred4_EsperEPL2Grammar())) {s = 117;}

                        else if ( (LA142_2==ORDER) && (synpred4_EsperEPL2Grammar())) {s = 118;}

                        else if ( (LA142_2==ROW_LIMIT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 119;}

                        else if ( (LA142_2==EOF) && (synpred4_EsperEPL2Grammar())) {s = 120;}

                        else if ( (LA142_2==RPAREN) && (synpred4_EsperEPL2Grammar())) {s = 121;}

                        else if ( (LA142_2==COMMA) && (synpred4_EsperEPL2Grammar())) {s = 122;}

                        else if ( (LA142_2==AS) && (synpred4_EsperEPL2Grammar())) {s = 123;}

                        else if ( (LA142_2==FROM) && (synpred4_EsperEPL2Grammar())) {s = 124;}

                        else if ( (LA142_2==ASC) && (synpred4_EsperEPL2Grammar())) {s = 125;}

                        else if ( (LA142_2==DESC) && (synpred4_EsperEPL2Grammar())) {s = 126;}

                        else if ( (LA142_2==THEN) && (synpred4_EsperEPL2Grammar())) {s = 127;}

                        else if ( (LA142_2==ELSE) && (synpred4_EsperEPL2Grammar())) {s = 128;}

                        else if ( (LA142_2==END) && (synpred4_EsperEPL2Grammar())) {s = 129;}

                        else if ( (LA142_2==WHEN) && (synpred4_EsperEPL2Grammar())) {s = 130;}

                        else if ( (LA142_2==COLON) && (synpred4_EsperEPL2Grammar())) {s = 131;}

                        else if ( (LA142_2==RBRACK) && (synpred4_EsperEPL2Grammar())) {s = 132;}

                        else if ( (LA142_2==RCURLY) && (synpred4_EsperEPL2Grammar())) {s = 133;}

                        else if ( (LA142_2==TIMEPERIOD_SECONDS) && (synpred4_EsperEPL2Grammar())) {s = 134;}

                        else if ( (LA142_2==TIMEPERIOD_SECOND) && (synpred4_EsperEPL2Grammar())) {s = 135;}

                        else if ( (LA142_2==TIMEPERIOD_SEC) && (synpred4_EsperEPL2Grammar())) {s = 136;}

                        else if ( (LA142_2==NOT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 137;}

                        else if ( (LA142_2==IN_SET) && (synpred4_EsperEPL2Grammar())) {s = 138;}

                        else if ( (LA142_2==BETWEEN) && (synpred4_EsperEPL2Grammar())) {s = 139;}

                        else if ( (LA142_2==LIKE) && (synpred4_EsperEPL2Grammar())) {s = 140;}

                        else if ( (LA142_2==REGEXP) && (synpred4_EsperEPL2Grammar())) {s = 141;}

                        else if ( (LA142_2==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 142;}

                         
                        input.seek(index142_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA142_9 = input.LA(1);

                         
                        int index142_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA142_9==ESCAPECHAR) && (synpred4_EsperEPL2Grammar())) {s = 143;}

                        else if ( (LA142_9==LBRACK) && (synpred4_EsperEPL2Grammar())) {s = 144;}

                        else if ( (LA142_9==LPAREN) ) {s = 145;}

                        else if ( (LA142_9==QUESTION) && (synpred4_EsperEPL2Grammar())) {s = 146;}

                        else if ( (LA142_9==DOT) && (synpred4_EsperEPL2Grammar())) {s = 147;}

                        else if ( (LA142_9==STAR) && (synpred4_EsperEPL2Grammar())) {s = 148;}

                        else if ( (LA142_9==DIV) && (synpred4_EsperEPL2Grammar())) {s = 149;}

                        else if ( (LA142_9==MOD) && (synpred4_EsperEPL2Grammar())) {s = 150;}

                        else if ( (LA142_9==PLUS) && (synpred4_EsperEPL2Grammar())) {s = 151;}

                        else if ( (LA142_9==MINUS) && (synpred4_EsperEPL2Grammar())) {s = 152;}

                        else if ( (LA142_9==LOR) && (synpred4_EsperEPL2Grammar())) {s = 153;}

                        else if ( (LA142_9==LT) && (synpred4_EsperEPL2Grammar())) {s = 154;}

                        else if ( (LA142_9==GT) && (synpred4_EsperEPL2Grammar())) {s = 155;}

                        else if ( (LA142_9==LE) && (synpred4_EsperEPL2Grammar())) {s = 156;}

                        else if ( (LA142_9==GE) && (synpred4_EsperEPL2Grammar())) {s = 157;}

                        else if ( (LA142_9==EQUALS) && (synpred4_EsperEPL2Grammar())) {s = 158;}

                        else if ( (LA142_9==IS) && (synpred4_EsperEPL2Grammar())) {s = 159;}

                        else if ( (LA142_9==SQL_NE) && (synpred4_EsperEPL2Grammar())) {s = 160;}

                        else if ( (LA142_9==NOT_EQUAL) && (synpred4_EsperEPL2Grammar())) {s = 161;}

                        else if ( (LA142_9==BAND) && (synpred4_EsperEPL2Grammar())) {s = 162;}

                        else if ( (LA142_9==BOR) && (synpred4_EsperEPL2Grammar())) {s = 163;}

                        else if ( (LA142_9==BXOR) && (synpred4_EsperEPL2Grammar())) {s = 164;}

                        else if ( (LA142_9==AND_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 165;}

                        else if ( (LA142_9==OR_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 166;}

                        else if ( (LA142_9==GROUP) && (synpred4_EsperEPL2Grammar())) {s = 167;}

                        else if ( (LA142_9==HAVING) && (synpred4_EsperEPL2Grammar())) {s = 168;}

                        else if ( (LA142_9==OUTPUT) && (synpred4_EsperEPL2Grammar())) {s = 169;}

                        else if ( (LA142_9==ORDER) && (synpred4_EsperEPL2Grammar())) {s = 170;}

                        else if ( (LA142_9==ROW_LIMIT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 171;}

                        else if ( (LA142_9==EOF) && (synpred4_EsperEPL2Grammar())) {s = 172;}

                        else if ( (LA142_9==RPAREN) && (synpred4_EsperEPL2Grammar())) {s = 173;}

                        else if ( (LA142_9==COMMA) && (synpred4_EsperEPL2Grammar())) {s = 174;}

                        else if ( (LA142_9==AS) && (synpred4_EsperEPL2Grammar())) {s = 175;}

                        else if ( (LA142_9==FROM) && (synpred4_EsperEPL2Grammar())) {s = 176;}

                        else if ( (LA142_9==ASC) && (synpred4_EsperEPL2Grammar())) {s = 177;}

                        else if ( (LA142_9==DESC) && (synpred4_EsperEPL2Grammar())) {s = 178;}

                        else if ( (LA142_9==THEN) && (synpred4_EsperEPL2Grammar())) {s = 179;}

                        else if ( (LA142_9==ELSE) && (synpred4_EsperEPL2Grammar())) {s = 180;}

                        else if ( (LA142_9==END) && (synpred4_EsperEPL2Grammar())) {s = 181;}

                        else if ( (LA142_9==WHEN) && (synpred4_EsperEPL2Grammar())) {s = 182;}

                        else if ( (LA142_9==COLON) && (synpred4_EsperEPL2Grammar())) {s = 183;}

                        else if ( (LA142_9==RBRACK) && (synpred4_EsperEPL2Grammar())) {s = 184;}

                        else if ( (LA142_9==RCURLY) && (synpred4_EsperEPL2Grammar())) {s = 185;}

                        else if ( (LA142_9==TIMEPERIOD_SECONDS) && (synpred4_EsperEPL2Grammar())) {s = 186;}

                        else if ( (LA142_9==TIMEPERIOD_SECOND) && (synpred4_EsperEPL2Grammar())) {s = 187;}

                        else if ( (LA142_9==TIMEPERIOD_SEC) && (synpred4_EsperEPL2Grammar())) {s = 188;}

                        else if ( (LA142_9==NOT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 189;}

                        else if ( (LA142_9==IN_SET) && (synpred4_EsperEPL2Grammar())) {s = 190;}

                        else if ( (LA142_9==BETWEEN) && (synpred4_EsperEPL2Grammar())) {s = 191;}

                        else if ( (LA142_9==LIKE) && (synpred4_EsperEPL2Grammar())) {s = 192;}

                        else if ( (LA142_9==REGEXP) && (synpred4_EsperEPL2Grammar())) {s = 193;}

                        else if ( (LA142_9==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 194;}

                         
                        input.seek(index142_9);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA142_10 = input.LA(1);

                         
                        int index142_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA142_10==LPAREN) ) {s = 195;}

                        else if ( (LA142_10==ESCAPECHAR) && (synpred4_EsperEPL2Grammar())) {s = 196;}

                        else if ( (LA142_10==LBRACK) && (synpred4_EsperEPL2Grammar())) {s = 197;}

                        else if ( (LA142_10==QUESTION) && (synpred4_EsperEPL2Grammar())) {s = 198;}

                        else if ( (LA142_10==DOT) && (synpred4_EsperEPL2Grammar())) {s = 199;}

                        else if ( (LA142_10==STAR) && (synpred4_EsperEPL2Grammar())) {s = 200;}

                        else if ( (LA142_10==DIV) && (synpred4_EsperEPL2Grammar())) {s = 201;}

                        else if ( (LA142_10==MOD) && (synpred4_EsperEPL2Grammar())) {s = 202;}

                        else if ( (LA142_10==PLUS) && (synpred4_EsperEPL2Grammar())) {s = 203;}

                        else if ( (LA142_10==MINUS) && (synpred4_EsperEPL2Grammar())) {s = 204;}

                        else if ( (LA142_10==LOR) && (synpred4_EsperEPL2Grammar())) {s = 205;}

                        else if ( (LA142_10==LT) && (synpred4_EsperEPL2Grammar())) {s = 206;}

                        else if ( (LA142_10==GT) && (synpred4_EsperEPL2Grammar())) {s = 207;}

                        else if ( (LA142_10==LE) && (synpred4_EsperEPL2Grammar())) {s = 208;}

                        else if ( (LA142_10==GE) && (synpred4_EsperEPL2Grammar())) {s = 209;}

                        else if ( (LA142_10==EQUALS) && (synpred4_EsperEPL2Grammar())) {s = 210;}

                        else if ( (LA142_10==IS) && (synpred4_EsperEPL2Grammar())) {s = 211;}

                        else if ( (LA142_10==SQL_NE) && (synpred4_EsperEPL2Grammar())) {s = 212;}

                        else if ( (LA142_10==NOT_EQUAL) && (synpred4_EsperEPL2Grammar())) {s = 213;}

                        else if ( (LA142_10==BAND) && (synpred4_EsperEPL2Grammar())) {s = 214;}

                        else if ( (LA142_10==BOR) && (synpred4_EsperEPL2Grammar())) {s = 215;}

                        else if ( (LA142_10==BXOR) && (synpred4_EsperEPL2Grammar())) {s = 216;}

                        else if ( (LA142_10==AND_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 217;}

                        else if ( (LA142_10==OR_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 218;}

                        else if ( (LA142_10==GROUP) && (synpred4_EsperEPL2Grammar())) {s = 219;}

                        else if ( (LA142_10==HAVING) && (synpred4_EsperEPL2Grammar())) {s = 220;}

                        else if ( (LA142_10==OUTPUT) && (synpred4_EsperEPL2Grammar())) {s = 221;}

                        else if ( (LA142_10==ORDER) && (synpred4_EsperEPL2Grammar())) {s = 222;}

                        else if ( (LA142_10==ROW_LIMIT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 223;}

                        else if ( (LA142_10==EOF) && (synpred4_EsperEPL2Grammar())) {s = 224;}

                        else if ( (LA142_10==RPAREN) && (synpred4_EsperEPL2Grammar())) {s = 225;}

                        else if ( (LA142_10==COMMA) && (synpred4_EsperEPL2Grammar())) {s = 226;}

                        else if ( (LA142_10==AS) && (synpred4_EsperEPL2Grammar())) {s = 227;}

                        else if ( (LA142_10==FROM) && (synpred4_EsperEPL2Grammar())) {s = 228;}

                        else if ( (LA142_10==ASC) && (synpred4_EsperEPL2Grammar())) {s = 229;}

                        else if ( (LA142_10==DESC) && (synpred4_EsperEPL2Grammar())) {s = 230;}

                        else if ( (LA142_10==THEN) && (synpred4_EsperEPL2Grammar())) {s = 231;}

                        else if ( (LA142_10==ELSE) && (synpred4_EsperEPL2Grammar())) {s = 232;}

                        else if ( (LA142_10==END) && (synpred4_EsperEPL2Grammar())) {s = 233;}

                        else if ( (LA142_10==WHEN) && (synpred4_EsperEPL2Grammar())) {s = 234;}

                        else if ( (LA142_10==COLON) && (synpred4_EsperEPL2Grammar())) {s = 235;}

                        else if ( (LA142_10==RBRACK) && (synpred4_EsperEPL2Grammar())) {s = 236;}

                        else if ( (LA142_10==RCURLY) && (synpred4_EsperEPL2Grammar())) {s = 237;}

                        else if ( (LA142_10==TIMEPERIOD_SECONDS) && (synpred4_EsperEPL2Grammar())) {s = 238;}

                        else if ( (LA142_10==TIMEPERIOD_SECOND) && (synpred4_EsperEPL2Grammar())) {s = 239;}

                        else if ( (LA142_10==TIMEPERIOD_SEC) && (synpred4_EsperEPL2Grammar())) {s = 240;}

                        else if ( (LA142_10==NOT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 241;}

                        else if ( (LA142_10==IN_SET) && (synpred4_EsperEPL2Grammar())) {s = 242;}

                        else if ( (LA142_10==BETWEEN) && (synpred4_EsperEPL2Grammar())) {s = 243;}

                        else if ( (LA142_10==LIKE) && (synpred4_EsperEPL2Grammar())) {s = 244;}

                        else if ( (LA142_10==REGEXP) && (synpred4_EsperEPL2Grammar())) {s = 245;}

                        else if ( (LA142_10==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 246;}

                         
                        input.seek(index142_10);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA142_43 = input.LA(1);

                         
                        int index142_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA142_43==IDENT) ) {s = 306;}

                        else if ( (LA142_43==MAX) ) {s = 307;}

                        else if ( (LA142_43==MIN) ) {s = 308;}

                        else if ( (LA142_43==TICKED_STRING_LITERAL) ) {s = 309;}

                        else if ( (LA142_43==AT) && (synpred4_EsperEPL2Grammar())) {s = 310;}

                        else if ( (LA142_43==COUNT) && (synpred4_EsperEPL2Grammar())) {s = 311;}

                        else if ( (LA142_43==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 312;}

                        else if ( (LA142_43==EVERY_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 313;}

                        else if ( (LA142_43==SUM) && (synpred4_EsperEPL2Grammar())) {s = 314;}

                        else if ( (LA142_43==AVG) && (synpred4_EsperEPL2Grammar())) {s = 315;}

                        else if ( (LA142_43==COALESCE) && (synpred4_EsperEPL2Grammar())) {s = 316;}

                        else if ( (LA142_43==MEDIAN) && (synpred4_EsperEPL2Grammar())) {s = 317;}

                        else if ( (LA142_43==STDDEV) && (synpred4_EsperEPL2Grammar())) {s = 318;}

                        else if ( (LA142_43==AVEDEV) && (synpred4_EsperEPL2Grammar())) {s = 319;}

                        else if ( (LA142_43==EVENTS) && (synpred4_EsperEPL2Grammar())) {s = 320;}

                        else if ( (LA142_43==FIRST) && (synpred4_EsperEPL2Grammar())) {s = 321;}

                        else if ( (LA142_43==LAST) && (synpred4_EsperEPL2Grammar())) {s = 322;}

                        else if ( (LA142_43==UNIDIRECTIONAL) && (synpred4_EsperEPL2Grammar())) {s = 323;}

                        else if ( (LA142_43==RETAINUNION) && (synpred4_EsperEPL2Grammar())) {s = 324;}

                        else if ( (LA142_43==RETAININTERSECTION) && (synpred4_EsperEPL2Grammar())) {s = 325;}

                        else if ( (LA142_43==UNTIL) && (synpred4_EsperEPL2Grammar())) {s = 326;}

                        else if ( (LA142_43==PATTERN) && (synpred4_EsperEPL2Grammar())) {s = 327;}

                        else if ( (LA142_43==SQL) && (synpred4_EsperEPL2Grammar())) {s = 328;}

                        else if ( (LA142_43==METADATASQL) && (synpred4_EsperEPL2Grammar())) {s = 329;}

                        else if ( (LA142_43==PREVIOUS) && (synpred4_EsperEPL2Grammar())) {s = 330;}

                        else if ( (LA142_43==PRIOR) && (synpred4_EsperEPL2Grammar())) {s = 331;}

                        else if ( (LA142_43==WEEKDAY) && (synpred4_EsperEPL2Grammar())) {s = 332;}

                        else if ( (LA142_43==LW) && (synpred4_EsperEPL2Grammar())) {s = 333;}

                        else if ( (LA142_43==INSTANCEOF) && (synpred4_EsperEPL2Grammar())) {s = 334;}

                        else if ( (LA142_43==CAST) && (synpred4_EsperEPL2Grammar())) {s = 335;}

                        else if ( (LA142_43==SNAPSHOT) && (synpred4_EsperEPL2Grammar())) {s = 336;}

                        else if ( (LA142_43==VARIABLE) && (synpred4_EsperEPL2Grammar())) {s = 337;}

                        else if ( (LA142_43==WINDOW) && (synpred4_EsperEPL2Grammar())) {s = 338;}

                        else if ( (LA142_43==LEFT) && (synpred4_EsperEPL2Grammar())) {s = 339;}

                        else if ( (LA142_43==RIGHT) && (synpred4_EsperEPL2Grammar())) {s = 340;}

                        else if ( (LA142_43==OUTER) && (synpred4_EsperEPL2Grammar())) {s = 341;}

                        else if ( (LA142_43==FULL) && (synpred4_EsperEPL2Grammar())) {s = 342;}

                        else if ( (LA142_43==JOIN) && (synpred4_EsperEPL2Grammar())) {s = 343;}

                         
                        input.seek(index142_43);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA142_91 = input.LA(1);

                         
                        int index142_91 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA142_91==IDENT) ) {s = 344;}

                        else if ( (LA142_91==TICKED_STRING_LITERAL) ) {s = 345;}

                        else if ( (LA142_91==AT) && (synpred4_EsperEPL2Grammar())) {s = 346;}

                        else if ( (LA142_91==COUNT) && (synpred4_EsperEPL2Grammar())) {s = 347;}

                        else if ( (LA142_91==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 348;}

                        else if ( (LA142_91==EVERY_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 349;}

                        else if ( (LA142_91==SUM) && (synpred4_EsperEPL2Grammar())) {s = 350;}

                        else if ( (LA142_91==AVG) && (synpred4_EsperEPL2Grammar())) {s = 351;}

                        else if ( (LA142_91==MAX) ) {s = 352;}

                        else if ( (LA142_91==MIN) ) {s = 353;}

                        else if ( (LA142_91==COALESCE) && (synpred4_EsperEPL2Grammar())) {s = 354;}

                        else if ( (LA142_91==MEDIAN) && (synpred4_EsperEPL2Grammar())) {s = 355;}

                        else if ( (LA142_91==STDDEV) && (synpred4_EsperEPL2Grammar())) {s = 356;}

                        else if ( (LA142_91==AVEDEV) && (synpred4_EsperEPL2Grammar())) {s = 357;}

                        else if ( (LA142_91==EVENTS) && (synpred4_EsperEPL2Grammar())) {s = 358;}

                        else if ( (LA142_91==FIRST) && (synpred4_EsperEPL2Grammar())) {s = 359;}

                        else if ( (LA142_91==LAST) && (synpred4_EsperEPL2Grammar())) {s = 360;}

                        else if ( (LA142_91==UNIDIRECTIONAL) && (synpred4_EsperEPL2Grammar())) {s = 361;}

                        else if ( (LA142_91==RETAINUNION) && (synpred4_EsperEPL2Grammar())) {s = 362;}

                        else if ( (LA142_91==RETAININTERSECTION) && (synpred4_EsperEPL2Grammar())) {s = 363;}

                        else if ( (LA142_91==UNTIL) && (synpred4_EsperEPL2Grammar())) {s = 364;}

                        else if ( (LA142_91==PATTERN) && (synpred4_EsperEPL2Grammar())) {s = 365;}

                        else if ( (LA142_91==SQL) && (synpred4_EsperEPL2Grammar())) {s = 366;}

                        else if ( (LA142_91==METADATASQL) && (synpred4_EsperEPL2Grammar())) {s = 367;}

                        else if ( (LA142_91==PREVIOUS) && (synpred4_EsperEPL2Grammar())) {s = 368;}

                        else if ( (LA142_91==PRIOR) && (synpred4_EsperEPL2Grammar())) {s = 369;}

                        else if ( (LA142_91==WEEKDAY) && (synpred4_EsperEPL2Grammar())) {s = 370;}

                        else if ( (LA142_91==LW) && (synpred4_EsperEPL2Grammar())) {s = 371;}

                        else if ( (LA142_91==INSTANCEOF) && (synpred4_EsperEPL2Grammar())) {s = 372;}

                        else if ( (LA142_91==CAST) && (synpred4_EsperEPL2Grammar())) {s = 373;}

                        else if ( (LA142_91==SNAPSHOT) && (synpred4_EsperEPL2Grammar())) {s = 374;}

                        else if ( (LA142_91==VARIABLE) && (synpred4_EsperEPL2Grammar())) {s = 375;}

                        else if ( (LA142_91==WINDOW) && (synpred4_EsperEPL2Grammar())) {s = 376;}

                        else if ( (LA142_91==LEFT) && (synpred4_EsperEPL2Grammar())) {s = 377;}

                        else if ( (LA142_91==RIGHT) && (synpred4_EsperEPL2Grammar())) {s = 378;}

                        else if ( (LA142_91==OUTER) && (synpred4_EsperEPL2Grammar())) {s = 379;}

                        else if ( (LA142_91==FULL) && (synpred4_EsperEPL2Grammar())) {s = 380;}

                        else if ( (LA142_91==JOIN) && (synpred4_EsperEPL2Grammar())) {s = 381;}

                         
                        input.seek(index142_91);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA142_306 = input.LA(1);

                         
                        int index142_306 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA142_306==DOT) ) {s = 552;}

                        else if ( (LA142_306==ESCAPECHAR) && (synpred4_EsperEPL2Grammar())) {s = 553;}

                        else if ( (LA142_306==LBRACK) && (synpred4_EsperEPL2Grammar())) {s = 554;}

                        else if ( (LA142_306==LPAREN) ) {s = 555;}

                        else if ( (LA142_306==QUESTION) && (synpred4_EsperEPL2Grammar())) {s = 556;}

                        else if ( (LA142_306==STAR) && (synpred4_EsperEPL2Grammar())) {s = 557;}

                        else if ( (LA142_306==DIV) && (synpred4_EsperEPL2Grammar())) {s = 558;}

                        else if ( (LA142_306==MOD) && (synpred4_EsperEPL2Grammar())) {s = 559;}

                        else if ( (LA142_306==PLUS) && (synpred4_EsperEPL2Grammar())) {s = 560;}

                        else if ( (LA142_306==MINUS) && (synpred4_EsperEPL2Grammar())) {s = 561;}

                        else if ( (LA142_306==LOR) && (synpred4_EsperEPL2Grammar())) {s = 562;}

                        else if ( (LA142_306==LT) && (synpred4_EsperEPL2Grammar())) {s = 563;}

                        else if ( (LA142_306==GT) && (synpred4_EsperEPL2Grammar())) {s = 564;}

                        else if ( (LA142_306==LE) && (synpred4_EsperEPL2Grammar())) {s = 565;}

                        else if ( (LA142_306==GE) && (synpred4_EsperEPL2Grammar())) {s = 566;}

                        else if ( (LA142_306==EQUALS) && (synpred4_EsperEPL2Grammar())) {s = 567;}

                        else if ( (LA142_306==IS) && (synpred4_EsperEPL2Grammar())) {s = 568;}

                        else if ( (LA142_306==SQL_NE) && (synpred4_EsperEPL2Grammar())) {s = 569;}

                        else if ( (LA142_306==NOT_EQUAL) && (synpred4_EsperEPL2Grammar())) {s = 570;}

                        else if ( (LA142_306==BAND) && (synpred4_EsperEPL2Grammar())) {s = 571;}

                        else if ( (LA142_306==BOR) && (synpred4_EsperEPL2Grammar())) {s = 572;}

                        else if ( (LA142_306==BXOR) && (synpred4_EsperEPL2Grammar())) {s = 573;}

                        else if ( (LA142_306==AND_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 574;}

                        else if ( (LA142_306==OR_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 575;}

                        else if ( (LA142_306==GROUP) && (synpred4_EsperEPL2Grammar())) {s = 576;}

                        else if ( (LA142_306==HAVING) && (synpred4_EsperEPL2Grammar())) {s = 577;}

                        else if ( (LA142_306==OUTPUT) && (synpred4_EsperEPL2Grammar())) {s = 578;}

                        else if ( (LA142_306==ORDER) && (synpred4_EsperEPL2Grammar())) {s = 579;}

                        else if ( (LA142_306==ROW_LIMIT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 580;}

                        else if ( (LA142_306==EOF) && (synpred4_EsperEPL2Grammar())) {s = 581;}

                        else if ( (LA142_306==RPAREN) && (synpred4_EsperEPL2Grammar())) {s = 582;}

                        else if ( (LA142_306==COMMA) && (synpred4_EsperEPL2Grammar())) {s = 583;}

                        else if ( (LA142_306==AS) && (synpred4_EsperEPL2Grammar())) {s = 584;}

                        else if ( (LA142_306==FROM) && (synpred4_EsperEPL2Grammar())) {s = 585;}

                        else if ( (LA142_306==ASC) && (synpred4_EsperEPL2Grammar())) {s = 586;}

                        else if ( (LA142_306==DESC) && (synpred4_EsperEPL2Grammar())) {s = 587;}

                        else if ( (LA142_306==THEN) && (synpred4_EsperEPL2Grammar())) {s = 588;}

                        else if ( (LA142_306==ELSE) && (synpred4_EsperEPL2Grammar())) {s = 589;}

                        else if ( (LA142_306==END) && (synpred4_EsperEPL2Grammar())) {s = 590;}

                        else if ( (LA142_306==WHEN) && (synpred4_EsperEPL2Grammar())) {s = 591;}

                        else if ( (LA142_306==COLON) && (synpred4_EsperEPL2Grammar())) {s = 592;}

                        else if ( (LA142_306==RBRACK) && (synpred4_EsperEPL2Grammar())) {s = 593;}

                        else if ( (LA142_306==RCURLY) && (synpred4_EsperEPL2Grammar())) {s = 594;}

                        else if ( (LA142_306==TIMEPERIOD_SECONDS) && (synpred4_EsperEPL2Grammar())) {s = 595;}

                        else if ( (LA142_306==TIMEPERIOD_SECOND) && (synpred4_EsperEPL2Grammar())) {s = 596;}

                        else if ( (LA142_306==TIMEPERIOD_SEC) && (synpred4_EsperEPL2Grammar())) {s = 597;}

                        else if ( (LA142_306==NOT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 598;}

                        else if ( (LA142_306==IN_SET) && (synpred4_EsperEPL2Grammar())) {s = 599;}

                        else if ( (LA142_306==BETWEEN) && (synpred4_EsperEPL2Grammar())) {s = 600;}

                        else if ( (LA142_306==LIKE) && (synpred4_EsperEPL2Grammar())) {s = 601;}

                        else if ( (LA142_306==REGEXP) && (synpred4_EsperEPL2Grammar())) {s = 602;}

                        else if ( (LA142_306==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 603;}

                         
                        input.seek(index142_306);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA142_307 = input.LA(1);

                         
                        int index142_307 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA142_307==ESCAPECHAR) && (synpred4_EsperEPL2Grammar())) {s = 604;}

                        else if ( (LA142_307==LBRACK) && (synpred4_EsperEPL2Grammar())) {s = 605;}

                        else if ( (LA142_307==LPAREN) ) {s = 606;}

                        else if ( (LA142_307==QUESTION) && (synpred4_EsperEPL2Grammar())) {s = 607;}

                        else if ( (LA142_307==STAR) && (synpred4_EsperEPL2Grammar())) {s = 608;}

                        else if ( (LA142_307==DIV) && (synpred4_EsperEPL2Grammar())) {s = 609;}

                        else if ( (LA142_307==MOD) && (synpred4_EsperEPL2Grammar())) {s = 610;}

                        else if ( (LA142_307==PLUS) && (synpred4_EsperEPL2Grammar())) {s = 611;}

                        else if ( (LA142_307==MINUS) && (synpred4_EsperEPL2Grammar())) {s = 612;}

                        else if ( (LA142_307==LOR) && (synpred4_EsperEPL2Grammar())) {s = 613;}

                        else if ( (LA142_307==LT) && (synpred4_EsperEPL2Grammar())) {s = 614;}

                        else if ( (LA142_307==GT) && (synpred4_EsperEPL2Grammar())) {s = 615;}

                        else if ( (LA142_307==LE) && (synpred4_EsperEPL2Grammar())) {s = 616;}

                        else if ( (LA142_307==GE) && (synpred4_EsperEPL2Grammar())) {s = 617;}

                        else if ( (LA142_307==EQUALS) && (synpred4_EsperEPL2Grammar())) {s = 618;}

                        else if ( (LA142_307==IS) && (synpred4_EsperEPL2Grammar())) {s = 619;}

                        else if ( (LA142_307==SQL_NE) && (synpred4_EsperEPL2Grammar())) {s = 620;}

                        else if ( (LA142_307==NOT_EQUAL) && (synpred4_EsperEPL2Grammar())) {s = 621;}

                        else if ( (LA142_307==BAND) && (synpred4_EsperEPL2Grammar())) {s = 622;}

                        else if ( (LA142_307==BOR) && (synpred4_EsperEPL2Grammar())) {s = 623;}

                        else if ( (LA142_307==BXOR) && (synpred4_EsperEPL2Grammar())) {s = 624;}

                        else if ( (LA142_307==AND_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 625;}

                        else if ( (LA142_307==OR_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 626;}

                        else if ( (LA142_307==GROUP) && (synpred4_EsperEPL2Grammar())) {s = 627;}

                        else if ( (LA142_307==HAVING) && (synpred4_EsperEPL2Grammar())) {s = 628;}

                        else if ( (LA142_307==OUTPUT) && (synpred4_EsperEPL2Grammar())) {s = 629;}

                        else if ( (LA142_307==ORDER) && (synpred4_EsperEPL2Grammar())) {s = 630;}

                        else if ( (LA142_307==ROW_LIMIT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 631;}

                        else if ( (LA142_307==EOF) && (synpred4_EsperEPL2Grammar())) {s = 632;}

                        else if ( (LA142_307==RPAREN) && (synpred4_EsperEPL2Grammar())) {s = 633;}

                        else if ( (LA142_307==COMMA) && (synpred4_EsperEPL2Grammar())) {s = 634;}

                        else if ( (LA142_307==AS) && (synpred4_EsperEPL2Grammar())) {s = 635;}

                        else if ( (LA142_307==FROM) && (synpred4_EsperEPL2Grammar())) {s = 636;}

                        else if ( (LA142_307==ASC) && (synpred4_EsperEPL2Grammar())) {s = 637;}

                        else if ( (LA142_307==DESC) && (synpred4_EsperEPL2Grammar())) {s = 638;}

                        else if ( (LA142_307==THEN) && (synpred4_EsperEPL2Grammar())) {s = 639;}

                        else if ( (LA142_307==ELSE) && (synpred4_EsperEPL2Grammar())) {s = 640;}

                        else if ( (LA142_307==END) && (synpred4_EsperEPL2Grammar())) {s = 641;}

                        else if ( (LA142_307==WHEN) && (synpred4_EsperEPL2Grammar())) {s = 642;}

                        else if ( (LA142_307==COLON) && (synpred4_EsperEPL2Grammar())) {s = 643;}

                        else if ( (LA142_307==RBRACK) && (synpred4_EsperEPL2Grammar())) {s = 644;}

                        else if ( (LA142_307==RCURLY) && (synpred4_EsperEPL2Grammar())) {s = 645;}

                        else if ( (LA142_307==TIMEPERIOD_SECONDS) && (synpred4_EsperEPL2Grammar())) {s = 646;}

                        else if ( (LA142_307==TIMEPERIOD_SECOND) && (synpred4_EsperEPL2Grammar())) {s = 647;}

                        else if ( (LA142_307==TIMEPERIOD_SEC) && (synpred4_EsperEPL2Grammar())) {s = 648;}

                        else if ( (LA142_307==NOT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 649;}

                        else if ( (LA142_307==IN_SET) && (synpred4_EsperEPL2Grammar())) {s = 650;}

                        else if ( (LA142_307==BETWEEN) && (synpred4_EsperEPL2Grammar())) {s = 651;}

                        else if ( (LA142_307==LIKE) && (synpred4_EsperEPL2Grammar())) {s = 652;}

                        else if ( (LA142_307==REGEXP) && (synpred4_EsperEPL2Grammar())) {s = 653;}

                        else if ( (LA142_307==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 654;}

                        else if ( (LA142_307==DOT) && (synpred4_EsperEPL2Grammar())) {s = 655;}

                         
                        input.seek(index142_307);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA142_308 = input.LA(1);

                         
                        int index142_308 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA142_308==LPAREN) ) {s = 656;}

                        else if ( (LA142_308==ESCAPECHAR) && (synpred4_EsperEPL2Grammar())) {s = 657;}

                        else if ( (LA142_308==LBRACK) && (synpred4_EsperEPL2Grammar())) {s = 658;}

                        else if ( (LA142_308==QUESTION) && (synpred4_EsperEPL2Grammar())) {s = 659;}

                        else if ( (LA142_308==STAR) && (synpred4_EsperEPL2Grammar())) {s = 660;}

                        else if ( (LA142_308==DIV) && (synpred4_EsperEPL2Grammar())) {s = 661;}

                        else if ( (LA142_308==MOD) && (synpred4_EsperEPL2Grammar())) {s = 662;}

                        else if ( (LA142_308==PLUS) && (synpred4_EsperEPL2Grammar())) {s = 663;}

                        else if ( (LA142_308==MINUS) && (synpred4_EsperEPL2Grammar())) {s = 664;}

                        else if ( (LA142_308==LOR) && (synpred4_EsperEPL2Grammar())) {s = 665;}

                        else if ( (LA142_308==LT) && (synpred4_EsperEPL2Grammar())) {s = 666;}

                        else if ( (LA142_308==GT) && (synpred4_EsperEPL2Grammar())) {s = 667;}

                        else if ( (LA142_308==LE) && (synpred4_EsperEPL2Grammar())) {s = 668;}

                        else if ( (LA142_308==GE) && (synpred4_EsperEPL2Grammar())) {s = 669;}

                        else if ( (LA142_308==EQUALS) && (synpred4_EsperEPL2Grammar())) {s = 670;}

                        else if ( (LA142_308==IS) && (synpred4_EsperEPL2Grammar())) {s = 671;}

                        else if ( (LA142_308==SQL_NE) && (synpred4_EsperEPL2Grammar())) {s = 672;}

                        else if ( (LA142_308==NOT_EQUAL) && (synpred4_EsperEPL2Grammar())) {s = 673;}

                        else if ( (LA142_308==BAND) && (synpred4_EsperEPL2Grammar())) {s = 674;}

                        else if ( (LA142_308==BOR) && (synpred4_EsperEPL2Grammar())) {s = 675;}

                        else if ( (LA142_308==BXOR) && (synpred4_EsperEPL2Grammar())) {s = 676;}

                        else if ( (LA142_308==AND_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 677;}

                        else if ( (LA142_308==OR_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 678;}

                        else if ( (LA142_308==GROUP) && (synpred4_EsperEPL2Grammar())) {s = 679;}

                        else if ( (LA142_308==HAVING) && (synpred4_EsperEPL2Grammar())) {s = 680;}

                        else if ( (LA142_308==OUTPUT) && (synpred4_EsperEPL2Grammar())) {s = 681;}

                        else if ( (LA142_308==ORDER) && (synpred4_EsperEPL2Grammar())) {s = 682;}

                        else if ( (LA142_308==ROW_LIMIT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 683;}

                        else if ( (LA142_308==EOF) && (synpred4_EsperEPL2Grammar())) {s = 684;}

                        else if ( (LA142_308==RPAREN) && (synpred4_EsperEPL2Grammar())) {s = 685;}

                        else if ( (LA142_308==COMMA) && (synpred4_EsperEPL2Grammar())) {s = 686;}

                        else if ( (LA142_308==AS) && (synpred4_EsperEPL2Grammar())) {s = 687;}

                        else if ( (LA142_308==FROM) && (synpred4_EsperEPL2Grammar())) {s = 688;}

                        else if ( (LA142_308==ASC) && (synpred4_EsperEPL2Grammar())) {s = 689;}

                        else if ( (LA142_308==DESC) && (synpred4_EsperEPL2Grammar())) {s = 690;}

                        else if ( (LA142_308==THEN) && (synpred4_EsperEPL2Grammar())) {s = 691;}

                        else if ( (LA142_308==ELSE) && (synpred4_EsperEPL2Grammar())) {s = 692;}

                        else if ( (LA142_308==END) && (synpred4_EsperEPL2Grammar())) {s = 693;}

                        else if ( (LA142_308==WHEN) && (synpred4_EsperEPL2Grammar())) {s = 694;}

                        else if ( (LA142_308==COLON) && (synpred4_EsperEPL2Grammar())) {s = 695;}

                        else if ( (LA142_308==RBRACK) && (synpred4_EsperEPL2Grammar())) {s = 696;}

                        else if ( (LA142_308==RCURLY) && (synpred4_EsperEPL2Grammar())) {s = 697;}

                        else if ( (LA142_308==TIMEPERIOD_SECONDS) && (synpred4_EsperEPL2Grammar())) {s = 698;}

                        else if ( (LA142_308==TIMEPERIOD_SECOND) && (synpred4_EsperEPL2Grammar())) {s = 699;}

                        else if ( (LA142_308==TIMEPERIOD_SEC) && (synpred4_EsperEPL2Grammar())) {s = 700;}

                        else if ( (LA142_308==NOT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 701;}

                        else if ( (LA142_308==IN_SET) && (synpred4_EsperEPL2Grammar())) {s = 702;}

                        else if ( (LA142_308==BETWEEN) && (synpred4_EsperEPL2Grammar())) {s = 703;}

                        else if ( (LA142_308==LIKE) && (synpred4_EsperEPL2Grammar())) {s = 704;}

                        else if ( (LA142_308==REGEXP) && (synpred4_EsperEPL2Grammar())) {s = 705;}

                        else if ( (LA142_308==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 706;}

                        else if ( (LA142_308==DOT) && (synpred4_EsperEPL2Grammar())) {s = 707;}

                         
                        input.seek(index142_308);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA142_309 = input.LA(1);

                         
                        int index142_309 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA142_309==ESCAPECHAR) && (synpred4_EsperEPL2Grammar())) {s = 708;}

                        else if ( (LA142_309==LBRACK) && (synpred4_EsperEPL2Grammar())) {s = 709;}

                        else if ( (LA142_309==LPAREN) && (synpred4_EsperEPL2Grammar())) {s = 710;}

                        else if ( (LA142_309==QUESTION) && (synpred4_EsperEPL2Grammar())) {s = 711;}

                        else if ( (LA142_309==STAR) && (synpred4_EsperEPL2Grammar())) {s = 712;}

                        else if ( (LA142_309==DIV) && (synpred4_EsperEPL2Grammar())) {s = 713;}

                        else if ( (LA142_309==MOD) && (synpred4_EsperEPL2Grammar())) {s = 714;}

                        else if ( (LA142_309==PLUS) && (synpred4_EsperEPL2Grammar())) {s = 715;}

                        else if ( (LA142_309==MINUS) && (synpred4_EsperEPL2Grammar())) {s = 716;}

                        else if ( (LA142_309==LOR) && (synpred4_EsperEPL2Grammar())) {s = 717;}

                        else if ( (LA142_309==LT) && (synpred4_EsperEPL2Grammar())) {s = 718;}

                        else if ( (LA142_309==GT) && (synpred4_EsperEPL2Grammar())) {s = 719;}

                        else if ( (LA142_309==LE) && (synpred4_EsperEPL2Grammar())) {s = 720;}

                        else if ( (LA142_309==GE) && (synpred4_EsperEPL2Grammar())) {s = 721;}

                        else if ( (LA142_309==EQUALS) && (synpred4_EsperEPL2Grammar())) {s = 722;}

                        else if ( (LA142_309==IS) && (synpred4_EsperEPL2Grammar())) {s = 723;}

                        else if ( (LA142_309==SQL_NE) && (synpred4_EsperEPL2Grammar())) {s = 724;}

                        else if ( (LA142_309==NOT_EQUAL) && (synpred4_EsperEPL2Grammar())) {s = 725;}

                        else if ( (LA142_309==BAND) && (synpred4_EsperEPL2Grammar())) {s = 726;}

                        else if ( (LA142_309==BOR) && (synpred4_EsperEPL2Grammar())) {s = 727;}

                        else if ( (LA142_309==BXOR) && (synpred4_EsperEPL2Grammar())) {s = 728;}

                        else if ( (LA142_309==AND_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 729;}

                        else if ( (LA142_309==OR_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 730;}

                        else if ( (LA142_309==GROUP) && (synpred4_EsperEPL2Grammar())) {s = 731;}

                        else if ( (LA142_309==HAVING) && (synpred4_EsperEPL2Grammar())) {s = 732;}

                        else if ( (LA142_309==OUTPUT) && (synpred4_EsperEPL2Grammar())) {s = 733;}

                        else if ( (LA142_309==ORDER) && (synpred4_EsperEPL2Grammar())) {s = 734;}

                        else if ( (LA142_309==ROW_LIMIT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 735;}

                        else if ( (LA142_309==EOF) && (synpred4_EsperEPL2Grammar())) {s = 736;}

                        else if ( (LA142_309==RPAREN) && (synpred4_EsperEPL2Grammar())) {s = 737;}

                        else if ( (LA142_309==COMMA) && (synpred4_EsperEPL2Grammar())) {s = 738;}

                        else if ( (LA142_309==AS) && (synpred4_EsperEPL2Grammar())) {s = 739;}

                        else if ( (LA142_309==FROM) && (synpred4_EsperEPL2Grammar())) {s = 740;}

                        else if ( (LA142_309==ASC) && (synpred4_EsperEPL2Grammar())) {s = 741;}

                        else if ( (LA142_309==DESC) && (synpred4_EsperEPL2Grammar())) {s = 742;}

                        else if ( (LA142_309==THEN) && (synpred4_EsperEPL2Grammar())) {s = 743;}

                        else if ( (LA142_309==ELSE) && (synpred4_EsperEPL2Grammar())) {s = 744;}

                        else if ( (LA142_309==END) && (synpred4_EsperEPL2Grammar())) {s = 745;}

                        else if ( (LA142_309==WHEN) && (synpred4_EsperEPL2Grammar())) {s = 746;}

                        else if ( (LA142_309==COLON) && (synpred4_EsperEPL2Grammar())) {s = 747;}

                        else if ( (LA142_309==RBRACK) && (synpred4_EsperEPL2Grammar())) {s = 748;}

                        else if ( (LA142_309==RCURLY) && (synpred4_EsperEPL2Grammar())) {s = 749;}

                        else if ( (LA142_309==TIMEPERIOD_SECONDS) && (synpred4_EsperEPL2Grammar())) {s = 750;}

                        else if ( (LA142_309==TIMEPERIOD_SECOND) && (synpred4_EsperEPL2Grammar())) {s = 751;}

                        else if ( (LA142_309==TIMEPERIOD_SEC) && (synpred4_EsperEPL2Grammar())) {s = 752;}

                        else if ( (LA142_309==NOT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 753;}

                        else if ( (LA142_309==IN_SET) && (synpred4_EsperEPL2Grammar())) {s = 754;}

                        else if ( (LA142_309==BETWEEN) && (synpred4_EsperEPL2Grammar())) {s = 755;}

                        else if ( (LA142_309==LIKE) && (synpred4_EsperEPL2Grammar())) {s = 756;}

                        else if ( (LA142_309==REGEXP) && (synpred4_EsperEPL2Grammar())) {s = 757;}

                        else if ( (LA142_309==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 758;}

                        else if ( (LA142_309==DOT) ) {s = 759;}

                         
                        input.seek(index142_309);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA142_344 = input.LA(1);

                         
                        int index142_344 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA142_344==DOT) ) {s = 760;}

                        else if ( (LA142_344==ESCAPECHAR) && (synpred4_EsperEPL2Grammar())) {s = 761;}

                        else if ( (LA142_344==LBRACK) && (synpred4_EsperEPL2Grammar())) {s = 762;}

                        else if ( (LA142_344==LPAREN) ) {s = 763;}

                        else if ( (LA142_344==QUESTION) && (synpred4_EsperEPL2Grammar())) {s = 764;}

                        else if ( (LA142_344==STAR) && (synpred4_EsperEPL2Grammar())) {s = 765;}

                        else if ( (LA142_344==DIV) && (synpred4_EsperEPL2Grammar())) {s = 766;}

                        else if ( (LA142_344==MOD) && (synpred4_EsperEPL2Grammar())) {s = 767;}

                        else if ( (LA142_344==PLUS) && (synpred4_EsperEPL2Grammar())) {s = 768;}

                        else if ( (LA142_344==MINUS) && (synpred4_EsperEPL2Grammar())) {s = 769;}

                        else if ( (LA142_344==LOR) && (synpred4_EsperEPL2Grammar())) {s = 770;}

                        else if ( (LA142_344==LT) && (synpred4_EsperEPL2Grammar())) {s = 771;}

                        else if ( (LA142_344==GT) && (synpred4_EsperEPL2Grammar())) {s = 772;}

                        else if ( (LA142_344==LE) && (synpred4_EsperEPL2Grammar())) {s = 773;}

                        else if ( (LA142_344==GE) && (synpred4_EsperEPL2Grammar())) {s = 774;}

                        else if ( (LA142_344==EQUALS) && (synpred4_EsperEPL2Grammar())) {s = 775;}

                        else if ( (LA142_344==IS) && (synpred4_EsperEPL2Grammar())) {s = 776;}

                        else if ( (LA142_344==SQL_NE) && (synpred4_EsperEPL2Grammar())) {s = 777;}

                        else if ( (LA142_344==NOT_EQUAL) && (synpred4_EsperEPL2Grammar())) {s = 778;}

                        else if ( (LA142_344==BAND) && (synpred4_EsperEPL2Grammar())) {s = 779;}

                        else if ( (LA142_344==BOR) && (synpred4_EsperEPL2Grammar())) {s = 780;}

                        else if ( (LA142_344==BXOR) && (synpred4_EsperEPL2Grammar())) {s = 781;}

                        else if ( (LA142_344==AND_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 782;}

                        else if ( (LA142_344==OR_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 783;}

                        else if ( (LA142_344==GROUP) && (synpred4_EsperEPL2Grammar())) {s = 784;}

                        else if ( (LA142_344==HAVING) && (synpred4_EsperEPL2Grammar())) {s = 785;}

                        else if ( (LA142_344==OUTPUT) && (synpred4_EsperEPL2Grammar())) {s = 786;}

                        else if ( (LA142_344==ORDER) && (synpred4_EsperEPL2Grammar())) {s = 787;}

                        else if ( (LA142_344==ROW_LIMIT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 788;}

                        else if ( (LA142_344==EOF) && (synpred4_EsperEPL2Grammar())) {s = 789;}

                        else if ( (LA142_344==RPAREN) && (synpred4_EsperEPL2Grammar())) {s = 790;}

                        else if ( (LA142_344==COMMA) && (synpred4_EsperEPL2Grammar())) {s = 791;}

                        else if ( (LA142_344==AS) && (synpred4_EsperEPL2Grammar())) {s = 792;}

                        else if ( (LA142_344==FROM) && (synpred4_EsperEPL2Grammar())) {s = 793;}

                        else if ( (LA142_344==ASC) && (synpred4_EsperEPL2Grammar())) {s = 794;}

                        else if ( (LA142_344==DESC) && (synpred4_EsperEPL2Grammar())) {s = 795;}

                        else if ( (LA142_344==THEN) && (synpred4_EsperEPL2Grammar())) {s = 796;}

                        else if ( (LA142_344==ELSE) && (synpred4_EsperEPL2Grammar())) {s = 797;}

                        else if ( (LA142_344==END) && (synpred4_EsperEPL2Grammar())) {s = 798;}

                        else if ( (LA142_344==WHEN) && (synpred4_EsperEPL2Grammar())) {s = 799;}

                        else if ( (LA142_344==COLON) && (synpred4_EsperEPL2Grammar())) {s = 800;}

                        else if ( (LA142_344==RBRACK) && (synpred4_EsperEPL2Grammar())) {s = 801;}

                        else if ( (LA142_344==RCURLY) && (synpred4_EsperEPL2Grammar())) {s = 802;}

                        else if ( (LA142_344==TIMEPERIOD_SECONDS) && (synpred4_EsperEPL2Grammar())) {s = 803;}

                        else if ( (LA142_344==TIMEPERIOD_SECOND) && (synpred4_EsperEPL2Grammar())) {s = 804;}

                        else if ( (LA142_344==TIMEPERIOD_SEC) && (synpred4_EsperEPL2Grammar())) {s = 805;}

                        else if ( (LA142_344==NOT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 806;}

                        else if ( (LA142_344==IN_SET) && (synpred4_EsperEPL2Grammar())) {s = 807;}

                        else if ( (LA142_344==BETWEEN) && (synpred4_EsperEPL2Grammar())) {s = 808;}

                        else if ( (LA142_344==LIKE) && (synpred4_EsperEPL2Grammar())) {s = 809;}

                        else if ( (LA142_344==REGEXP) && (synpred4_EsperEPL2Grammar())) {s = 810;}

                        else if ( (LA142_344==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 811;}

                         
                        input.seek(index142_344);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA142_345 = input.LA(1);

                         
                        int index142_345 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA142_345==ESCAPECHAR) && (synpred4_EsperEPL2Grammar())) {s = 812;}

                        else if ( (LA142_345==LBRACK) && (synpred4_EsperEPL2Grammar())) {s = 813;}

                        else if ( (LA142_345==LPAREN) && (synpred4_EsperEPL2Grammar())) {s = 814;}

                        else if ( (LA142_345==QUESTION) && (synpred4_EsperEPL2Grammar())) {s = 815;}

                        else if ( (LA142_345==STAR) && (synpred4_EsperEPL2Grammar())) {s = 816;}

                        else if ( (LA142_345==DIV) && (synpred4_EsperEPL2Grammar())) {s = 817;}

                        else if ( (LA142_345==MOD) && (synpred4_EsperEPL2Grammar())) {s = 818;}

                        else if ( (LA142_345==PLUS) && (synpred4_EsperEPL2Grammar())) {s = 819;}

                        else if ( (LA142_345==MINUS) && (synpred4_EsperEPL2Grammar())) {s = 820;}

                        else if ( (LA142_345==LOR) && (synpred4_EsperEPL2Grammar())) {s = 821;}

                        else if ( (LA142_345==LT) && (synpred4_EsperEPL2Grammar())) {s = 822;}

                        else if ( (LA142_345==GT) && (synpred4_EsperEPL2Grammar())) {s = 823;}

                        else if ( (LA142_345==LE) && (synpred4_EsperEPL2Grammar())) {s = 824;}

                        else if ( (LA142_345==GE) && (synpred4_EsperEPL2Grammar())) {s = 825;}

                        else if ( (LA142_345==EQUALS) && (synpred4_EsperEPL2Grammar())) {s = 826;}

                        else if ( (LA142_345==IS) && (synpred4_EsperEPL2Grammar())) {s = 827;}

                        else if ( (LA142_345==SQL_NE) && (synpred4_EsperEPL2Grammar())) {s = 828;}

                        else if ( (LA142_345==NOT_EQUAL) && (synpred4_EsperEPL2Grammar())) {s = 829;}

                        else if ( (LA142_345==BAND) && (synpred4_EsperEPL2Grammar())) {s = 830;}

                        else if ( (LA142_345==BOR) && (synpred4_EsperEPL2Grammar())) {s = 831;}

                        else if ( (LA142_345==BXOR) && (synpred4_EsperEPL2Grammar())) {s = 832;}

                        else if ( (LA142_345==AND_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 833;}

                        else if ( (LA142_345==OR_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 834;}

                        else if ( (LA142_345==GROUP) && (synpred4_EsperEPL2Grammar())) {s = 835;}

                        else if ( (LA142_345==HAVING) && (synpred4_EsperEPL2Grammar())) {s = 836;}

                        else if ( (LA142_345==OUTPUT) && (synpred4_EsperEPL2Grammar())) {s = 837;}

                        else if ( (LA142_345==ORDER) && (synpred4_EsperEPL2Grammar())) {s = 838;}

                        else if ( (LA142_345==ROW_LIMIT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 839;}

                        else if ( (LA142_345==EOF) && (synpred4_EsperEPL2Grammar())) {s = 840;}

                        else if ( (LA142_345==RPAREN) && (synpred4_EsperEPL2Grammar())) {s = 841;}

                        else if ( (LA142_345==COMMA) && (synpred4_EsperEPL2Grammar())) {s = 842;}

                        else if ( (LA142_345==AS) && (synpred4_EsperEPL2Grammar())) {s = 843;}

                        else if ( (LA142_345==FROM) && (synpred4_EsperEPL2Grammar())) {s = 844;}

                        else if ( (LA142_345==ASC) && (synpred4_EsperEPL2Grammar())) {s = 845;}

                        else if ( (LA142_345==DESC) && (synpred4_EsperEPL2Grammar())) {s = 846;}

                        else if ( (LA142_345==THEN) && (synpred4_EsperEPL2Grammar())) {s = 847;}

                        else if ( (LA142_345==ELSE) && (synpred4_EsperEPL2Grammar())) {s = 848;}

                        else if ( (LA142_345==END) && (synpred4_EsperEPL2Grammar())) {s = 849;}

                        else if ( (LA142_345==WHEN) && (synpred4_EsperEPL2Grammar())) {s = 850;}

                        else if ( (LA142_345==COLON) && (synpred4_EsperEPL2Grammar())) {s = 851;}

                        else if ( (LA142_345==RBRACK) && (synpred4_EsperEPL2Grammar())) {s = 852;}

                        else if ( (LA142_345==RCURLY) && (synpred4_EsperEPL2Grammar())) {s = 853;}

                        else if ( (LA142_345==TIMEPERIOD_SECONDS) && (synpred4_EsperEPL2Grammar())) {s = 854;}

                        else if ( (LA142_345==TIMEPERIOD_SECOND) && (synpred4_EsperEPL2Grammar())) {s = 855;}

                        else if ( (LA142_345==TIMEPERIOD_SEC) && (synpred4_EsperEPL2Grammar())) {s = 856;}

                        else if ( (LA142_345==NOT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 857;}

                        else if ( (LA142_345==IN_SET) && (synpred4_EsperEPL2Grammar())) {s = 858;}

                        else if ( (LA142_345==BETWEEN) && (synpred4_EsperEPL2Grammar())) {s = 859;}

                        else if ( (LA142_345==LIKE) && (synpred4_EsperEPL2Grammar())) {s = 860;}

                        else if ( (LA142_345==REGEXP) && (synpred4_EsperEPL2Grammar())) {s = 861;}

                        else if ( (LA142_345==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 862;}

                        else if ( (LA142_345==DOT) ) {s = 863;}

                         
                        input.seek(index142_345);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA142_352 = input.LA(1);

                         
                        int index142_352 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA142_352==ESCAPECHAR) && (synpred4_EsperEPL2Grammar())) {s = 864;}

                        else if ( (LA142_352==LBRACK) && (synpred4_EsperEPL2Grammar())) {s = 865;}

                        else if ( (LA142_352==LPAREN) ) {s = 866;}

                        else if ( (LA142_352==QUESTION) && (synpred4_EsperEPL2Grammar())) {s = 867;}

                        else if ( (LA142_352==STAR) && (synpred4_EsperEPL2Grammar())) {s = 868;}

                        else if ( (LA142_352==DIV) && (synpred4_EsperEPL2Grammar())) {s = 869;}

                        else if ( (LA142_352==MOD) && (synpred4_EsperEPL2Grammar())) {s = 870;}

                        else if ( (LA142_352==PLUS) && (synpred4_EsperEPL2Grammar())) {s = 871;}

                        else if ( (LA142_352==MINUS) && (synpred4_EsperEPL2Grammar())) {s = 872;}

                        else if ( (LA142_352==LOR) && (synpred4_EsperEPL2Grammar())) {s = 873;}

                        else if ( (LA142_352==LT) && (synpred4_EsperEPL2Grammar())) {s = 874;}

                        else if ( (LA142_352==GT) && (synpred4_EsperEPL2Grammar())) {s = 875;}

                        else if ( (LA142_352==LE) && (synpred4_EsperEPL2Grammar())) {s = 876;}

                        else if ( (LA142_352==GE) && (synpred4_EsperEPL2Grammar())) {s = 877;}

                        else if ( (LA142_352==EQUALS) && (synpred4_EsperEPL2Grammar())) {s = 878;}

                        else if ( (LA142_352==IS) && (synpred4_EsperEPL2Grammar())) {s = 879;}

                        else if ( (LA142_352==SQL_NE) && (synpred4_EsperEPL2Grammar())) {s = 880;}

                        else if ( (LA142_352==NOT_EQUAL) && (synpred4_EsperEPL2Grammar())) {s = 881;}

                        else if ( (LA142_352==BAND) && (synpred4_EsperEPL2Grammar())) {s = 882;}

                        else if ( (LA142_352==BOR) && (synpred4_EsperEPL2Grammar())) {s = 883;}

                        else if ( (LA142_352==BXOR) && (synpred4_EsperEPL2Grammar())) {s = 884;}

                        else if ( (LA142_352==AND_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 885;}

                        else if ( (LA142_352==OR_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 886;}

                        else if ( (LA142_352==GROUP) && (synpred4_EsperEPL2Grammar())) {s = 887;}

                        else if ( (LA142_352==HAVING) && (synpred4_EsperEPL2Grammar())) {s = 888;}

                        else if ( (LA142_352==OUTPUT) && (synpred4_EsperEPL2Grammar())) {s = 889;}

                        else if ( (LA142_352==ORDER) && (synpred4_EsperEPL2Grammar())) {s = 890;}

                        else if ( (LA142_352==ROW_LIMIT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 891;}

                        else if ( (LA142_352==EOF) && (synpred4_EsperEPL2Grammar())) {s = 892;}

                        else if ( (LA142_352==RPAREN) && (synpred4_EsperEPL2Grammar())) {s = 893;}

                        else if ( (LA142_352==COMMA) && (synpred4_EsperEPL2Grammar())) {s = 894;}

                        else if ( (LA142_352==AS) && (synpred4_EsperEPL2Grammar())) {s = 895;}

                        else if ( (LA142_352==FROM) && (synpred4_EsperEPL2Grammar())) {s = 896;}

                        else if ( (LA142_352==ASC) && (synpred4_EsperEPL2Grammar())) {s = 897;}

                        else if ( (LA142_352==DESC) && (synpred4_EsperEPL2Grammar())) {s = 898;}

                        else if ( (LA142_352==THEN) && (synpred4_EsperEPL2Grammar())) {s = 899;}

                        else if ( (LA142_352==ELSE) && (synpred4_EsperEPL2Grammar())) {s = 900;}

                        else if ( (LA142_352==END) && (synpred4_EsperEPL2Grammar())) {s = 901;}

                        else if ( (LA142_352==WHEN) && (synpred4_EsperEPL2Grammar())) {s = 902;}

                        else if ( (LA142_352==COLON) && (synpred4_EsperEPL2Grammar())) {s = 903;}

                        else if ( (LA142_352==RBRACK) && (synpred4_EsperEPL2Grammar())) {s = 904;}

                        else if ( (LA142_352==RCURLY) && (synpred4_EsperEPL2Grammar())) {s = 905;}

                        else if ( (LA142_352==TIMEPERIOD_SECONDS) && (synpred4_EsperEPL2Grammar())) {s = 906;}

                        else if ( (LA142_352==TIMEPERIOD_SECOND) && (synpred4_EsperEPL2Grammar())) {s = 907;}

                        else if ( (LA142_352==TIMEPERIOD_SEC) && (synpred4_EsperEPL2Grammar())) {s = 908;}

                        else if ( (LA142_352==NOT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 909;}

                        else if ( (LA142_352==IN_SET) && (synpred4_EsperEPL2Grammar())) {s = 910;}

                        else if ( (LA142_352==BETWEEN) && (synpred4_EsperEPL2Grammar())) {s = 911;}

                        else if ( (LA142_352==LIKE) && (synpred4_EsperEPL2Grammar())) {s = 912;}

                        else if ( (LA142_352==REGEXP) && (synpred4_EsperEPL2Grammar())) {s = 913;}

                        else if ( (LA142_352==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 914;}

                        else if ( (LA142_352==DOT) && (synpred4_EsperEPL2Grammar())) {s = 915;}

                         
                        input.seek(index142_352);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA142_353 = input.LA(1);

                         
                        int index142_353 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA142_353==LPAREN) ) {s = 916;}

                        else if ( (LA142_353==ESCAPECHAR) && (synpred4_EsperEPL2Grammar())) {s = 917;}

                        else if ( (LA142_353==LBRACK) && (synpred4_EsperEPL2Grammar())) {s = 918;}

                        else if ( (LA142_353==QUESTION) && (synpred4_EsperEPL2Grammar())) {s = 919;}

                        else if ( (LA142_353==STAR) && (synpred4_EsperEPL2Grammar())) {s = 920;}

                        else if ( (LA142_353==DIV) && (synpred4_EsperEPL2Grammar())) {s = 921;}

                        else if ( (LA142_353==MOD) && (synpred4_EsperEPL2Grammar())) {s = 922;}

                        else if ( (LA142_353==PLUS) && (synpred4_EsperEPL2Grammar())) {s = 923;}

                        else if ( (LA142_353==MINUS) && (synpred4_EsperEPL2Grammar())) {s = 924;}

                        else if ( (LA142_353==LOR) && (synpred4_EsperEPL2Grammar())) {s = 925;}

                        else if ( (LA142_353==LT) && (synpred4_EsperEPL2Grammar())) {s = 926;}

                        else if ( (LA142_353==GT) && (synpred4_EsperEPL2Grammar())) {s = 927;}

                        else if ( (LA142_353==LE) && (synpred4_EsperEPL2Grammar())) {s = 928;}

                        else if ( (LA142_353==GE) && (synpred4_EsperEPL2Grammar())) {s = 929;}

                        else if ( (LA142_353==EQUALS) && (synpred4_EsperEPL2Grammar())) {s = 930;}

                        else if ( (LA142_353==IS) && (synpred4_EsperEPL2Grammar())) {s = 931;}

                        else if ( (LA142_353==SQL_NE) && (synpred4_EsperEPL2Grammar())) {s = 932;}

                        else if ( (LA142_353==NOT_EQUAL) && (synpred4_EsperEPL2Grammar())) {s = 933;}

                        else if ( (LA142_353==BAND) && (synpred4_EsperEPL2Grammar())) {s = 934;}

                        else if ( (LA142_353==BOR) && (synpred4_EsperEPL2Grammar())) {s = 935;}

                        else if ( (LA142_353==BXOR) && (synpred4_EsperEPL2Grammar())) {s = 936;}

                        else if ( (LA142_353==AND_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 937;}

                        else if ( (LA142_353==OR_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 938;}

                        else if ( (LA142_353==GROUP) && (synpred4_EsperEPL2Grammar())) {s = 939;}

                        else if ( (LA142_353==HAVING) && (synpred4_EsperEPL2Grammar())) {s = 940;}

                        else if ( (LA142_353==OUTPUT) && (synpred4_EsperEPL2Grammar())) {s = 941;}

                        else if ( (LA142_353==ORDER) && (synpred4_EsperEPL2Grammar())) {s = 942;}

                        else if ( (LA142_353==ROW_LIMIT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 943;}

                        else if ( (LA142_353==EOF) && (synpred4_EsperEPL2Grammar())) {s = 944;}

                        else if ( (LA142_353==RPAREN) && (synpred4_EsperEPL2Grammar())) {s = 945;}

                        else if ( (LA142_353==COMMA) && (synpred4_EsperEPL2Grammar())) {s = 946;}

                        else if ( (LA142_353==AS) && (synpred4_EsperEPL2Grammar())) {s = 947;}

                        else if ( (LA142_353==FROM) && (synpred4_EsperEPL2Grammar())) {s = 948;}

                        else if ( (LA142_353==ASC) && (synpred4_EsperEPL2Grammar())) {s = 949;}

                        else if ( (LA142_353==DESC) && (synpred4_EsperEPL2Grammar())) {s = 950;}

                        else if ( (LA142_353==THEN) && (synpred4_EsperEPL2Grammar())) {s = 951;}

                        else if ( (LA142_353==ELSE) && (synpred4_EsperEPL2Grammar())) {s = 952;}

                        else if ( (LA142_353==END) && (synpred4_EsperEPL2Grammar())) {s = 953;}

                        else if ( (LA142_353==WHEN) && (synpred4_EsperEPL2Grammar())) {s = 954;}

                        else if ( (LA142_353==COLON) && (synpred4_EsperEPL2Grammar())) {s = 955;}

                        else if ( (LA142_353==RBRACK) && (synpred4_EsperEPL2Grammar())) {s = 956;}

                        else if ( (LA142_353==RCURLY) && (synpred4_EsperEPL2Grammar())) {s = 957;}

                        else if ( (LA142_353==TIMEPERIOD_SECONDS) && (synpred4_EsperEPL2Grammar())) {s = 958;}

                        else if ( (LA142_353==TIMEPERIOD_SECOND) && (synpred4_EsperEPL2Grammar())) {s = 959;}

                        else if ( (LA142_353==TIMEPERIOD_SEC) && (synpred4_EsperEPL2Grammar())) {s = 960;}

                        else if ( (LA142_353==NOT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 961;}

                        else if ( (LA142_353==IN_SET) && (synpred4_EsperEPL2Grammar())) {s = 962;}

                        else if ( (LA142_353==BETWEEN) && (synpred4_EsperEPL2Grammar())) {s = 963;}

                        else if ( (LA142_353==LIKE) && (synpred4_EsperEPL2Grammar())) {s = 964;}

                        else if ( (LA142_353==REGEXP) && (synpred4_EsperEPL2Grammar())) {s = 965;}

                        else if ( (LA142_353==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 966;}

                        else if ( (LA142_353==DOT) && (synpred4_EsperEPL2Grammar())) {s = 967;}

                         
                        input.seek(index142_353);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA142_500 = input.LA(1);

                         
                        int index142_500 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 967;}

                        else if ( (true) ) {s = 249;}

                         
                        input.seek(index142_500);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA142_526 = input.LA(1);

                         
                        int index142_526 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 967;}

                        else if ( (true) ) {s = 249;}

                         
                        input.seek(index142_526);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA142_552 = input.LA(1);

                         
                        int index142_552 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 967;}

                        else if ( (true) ) {s = 249;}

                         
                        input.seek(index142_552);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA142_555 = input.LA(1);

                         
                        int index142_555 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 967;}

                        else if ( (true) ) {s = 249;}

                         
                        input.seek(index142_555);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA142_606 = input.LA(1);

                         
                        int index142_606 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 967;}

                        else if ( (true) ) {s = 249;}

                         
                        input.seek(index142_606);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA142_656 = input.LA(1);

                         
                        int index142_656 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 967;}

                        else if ( (true) ) {s = 249;}

                         
                        input.seek(index142_656);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA142_759 = input.LA(1);

                         
                        int index142_759 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 967;}

                        else if ( (true) ) {s = 249;}

                         
                        input.seek(index142_759);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA142_760 = input.LA(1);

                         
                        int index142_760 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 967;}

                        else if ( (true) ) {s = 249;}

                         
                        input.seek(index142_760);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA142_763 = input.LA(1);

                         
                        int index142_763 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 967;}

                        else if ( (true) ) {s = 249;}

                         
                        input.seek(index142_763);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA142_863 = input.LA(1);

                         
                        int index142_863 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 967;}

                        else if ( (true) ) {s = 249;}

                         
                        input.seek(index142_863);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA142_866 = input.LA(1);

                         
                        int index142_866 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 967;}

                        else if ( (true) ) {s = 249;}

                         
                        input.seek(index142_866);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA142_916 = input.LA(1);

                         
                        int index142_916 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 967;}

                        else if ( (true) ) {s = 249;}

                         
                        input.seek(index142_916);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA142_968 = input.LA(1);

                         
                        int index142_968 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 967;}

                        else if ( (true) ) {s = 249;}

                         
                        input.seek(index142_968);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA142_994 = input.LA(1);

                         
                        int index142_994 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 967;}

                        else if ( (true) ) {s = 249;}

                         
                        input.seek(index142_994);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA142_1020 = input.LA(1);

                         
                        int index142_1020 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 967;}

                        else if ( (true) ) {s = 249;}

                         
                        input.seek(index142_1020);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA142_1046 = input.LA(1);

                         
                        int index142_1046 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 967;}

                        else if ( (true) ) {s = 249;}

                         
                        input.seek(index142_1046);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 142, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA177_eotS =
        "\u0081\uffff";
    static final String DFA177_eofS =
        "\u0081\uffff";
    static final String DFA177_minS =
        "\1\5\1\uffff\1\6\67\uffff\1\5\106\uffff";
    static final String DFA177_maxS =
        "\1\u0100\1\uffff\1\u00fd\67\uffff\1\u00fe\106\uffff";
    static final String DFA177_acceptS =
        "\1\uffff\1\1\1\uffff\1\3\126\uffff\1\2\46\uffff";
    static final String DFA177_specialS =
        "\72\uffff\1\0\106\uffff}>";
    static final String[] DFA177_transitionS = {
            "\1\3\4\uffff\1\3\2\uffff\2\3\2\uffff\11\3\1\uffff\1\3\6\uffff"+
            "\1\3\1\uffff\4\3\12\uffff\3\3\10\uffff\16\3\1\uffff\1\3\1\uffff"+
            "\3\3\14\uffff\3\3\174\uffff\1\3\2\uffff\1\2\2\uffff\1\3\1\uffff"+
            "\1\1\3\uffff\2\3\12\uffff\2\3\2\uffff\1\3\1\uffff\1\3\1\uffff"+
            "\1\3\1\uffff\3\3",
            "",
            "\4\3\1\uffff\3\3\2\uffff\1\3\20\uffff\1\3\7\uffff\1\3\u00b4"+
            "\uffff\1\3\1\uffff\1\3\1\72\1\3\1\uffff\2\3\4\uffff\16\3\4\uffff"+
            "\2\3",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\3\4\uffff\1\3\3\uffff\1\3\2\uffff\11\3\10\uffff\1\3\1\uffff"+
            "\4\3\12\uffff\3\3\10\uffff\10\3\1\uffff\4\3\2\uffff\1\3\1\uffff"+
            "\3\3\u008e\uffff\1\3\4\uffff\1\132\31\uffff\1\3",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA177_eot = DFA.unpackEncodedString(DFA177_eotS);
    static final short[] DFA177_eof = DFA.unpackEncodedString(DFA177_eofS);
    static final char[] DFA177_min = DFA.unpackEncodedStringToUnsignedChars(DFA177_minS);
    static final char[] DFA177_max = DFA.unpackEncodedStringToUnsignedChars(DFA177_maxS);
    static final short[] DFA177_accept = DFA.unpackEncodedString(DFA177_acceptS);
    static final short[] DFA177_special = DFA.unpackEncodedString(DFA177_specialS);
    static final short[][] DFA177_transition;

    static {
        int numStates = DFA177_transitionS.length;
        DFA177_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA177_transition[i] = DFA.unpackEncodedString(DFA177_transitionS[i]);
        }
    }

    class DFA177 extends DFA {

        public DFA177(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 177;
            this.eot = DFA177_eot;
            this.eof = DFA177_eof;
            this.min = DFA177_min;
            this.max = DFA177_max;
            this.accept = DFA177_accept;
            this.special = DFA177_special;
            this.transition = DFA177_transition;
        }
        public String getDescription() {
            return "1167:1: propertySelectionListElement : (s= STAR -> PROPERTY_WILDCARD_SELECT[$s] | ( propertyStreamSelector )=> propertyStreamSelector | expression ( AS i= keywordAllowedIdent )? -> {identifier != null}? ^( PROPERTY_SELECTION_ELEMENT_EXPR expression IDENT[identifier] ) -> ^( PROPERTY_SELECTION_ELEMENT_EXPR expression ) );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA177_58 = input.LA(1);

                         
                        int index177_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA177_58==STAR) && (synpred5_EsperEPL2Grammar())) {s = 90;}

                        else if ( (LA177_58==WINDOW||LA177_58==ESCAPE||LA177_58==EVERY_EXPR||(LA177_58>=SUM && LA177_58<=COUNT)||LA177_58==OUTER||(LA177_58>=JOIN && LA177_58<=FULL)||(LA177_58>=EVENTS && LA177_58<=LAST)||(LA177_58>=UNIDIRECTIONAL && LA177_58<=PRIOR)||(LA177_58>=WEEKDAY && LA177_58<=CAST)||LA177_58==SNAPSHOT||(LA177_58>=VARIABLE && LA177_58<=AT)||LA177_58==IDENT||LA177_58==TICKED_STRING_LITERAL) ) {s = 3;}

                         
                        input.seek(index177_58);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 177, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA187_eotS =
        "\u0225\uffff";
    static final String DFA187_eofS =
        "\u0225\uffff";
    static final String DFA187_minS =
        "\1\5\2\0\6\6\60\uffff\1\u00de\114\uffff\3\0\56\uffff\3\0\70\uffff"+
        "\3\0\51\uffff\3\0\33\uffff\3\0\53\uffff\3\0\u00b8\uffff";
    static final String DFA187_maxS =
        "\1\u0100\2\0\4\u00f7\1\u00fd\1\u00f7\60\uffff\1\u00f6\114\uffff"+
        "\3\0\56\uffff\3\0\70\uffff\3\0\51\uffff\3\0\33\uffff\3\0\53\uffff"+
        "\3\0\u00b8\uffff";
    static final String DFA187_acceptS =
        "\11\uffff\60\4\1\uffff\1\11\44\uffff\1\1\44\uffff\1\2\1\10\3\uffff"+
        "\5\3\34\4\2\3\1\5\3\3\1\7\2\3\1\7\3\3\3\uffff\3\3\1\10\34\4\2\3"+
        "\1\5\25\4\3\uffff\7\4\3\3\1\7\1\10\7\3\1\5\25\4\3\uffff\7\4\1\7"+
        "\3\3\1\10\7\3\1\5\1\4\1\10\5\3\3\uffff\2\3\40\4\1\5\1\7\6\3\1\7"+
        "\3\uffff\5\3\1\10\1\5\2\3\34\4\1\6\1\12\u0091\uffff";
    static final String DFA187_specialS =
        "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\60\uffff\1\11\114\uffff\1"+
        "\12\1\13\1\14\56\uffff\1\15\1\16\1\17\70\uffff\1\20\1\21\1\22\51"+
        "\uffff\1\23\1\24\1\25\33\uffff\1\26\1\27\1\30\53\uffff\1\31\1\32"+
        "\1\33\u00b8\uffff}>";
    static final String[] DFA187_transitionS = {
            "\1\57\4\uffff\1\25\2\uffff\1\70\1\26\2\uffff\1\27\1\30\1\31"+
            "\1\32\1\33\1\34\1\35\1\36\1\24\1\uffff\1\11\6\uffff\1\62\1\uffff"+
            "\1\64\1\60\1\61\1\63\12\uffff\1\37\1\40\1\1\10\uffff\1\41\1"+
            "\42\1\43\1\45\1\46\1\47\1\50\1\51\1\65\1\52\1\2\1\53\1\54\1"+
            "\66\1\uffff\1\55\1\uffff\1\56\1\44\1\23\14\uffff\1\16\1\17\1"+
            "\20\174\uffff\1\6\2\uffff\1\7\2\uffff\1\21\1\uffff\1\71\1\72"+
            "\2\uffff\1\14\1\15\12\uffff\1\13\1\12\2\uffff\1\67\1\uffff\1"+
            "\3\1\uffff\1\10\1\uffff\1\22\1\4\1\5",
            "\1\uffff",
            "\1\uffff",
            "\1\u00a6\1\u00a7\1\u00a8\1\u00a9\1\uffff\1\u00a0\1\u009f\1"+
            "\u00a5\6\uffff\1\u00af\24\uffff\1\u0099\12\uffff\1\u00b0\3\uffff"+
            "\1\u00a1\1\u00a2\14\uffff\1\u0085\12\uffff\1\u008a\1\u0089\1"+
            "\u00ab\1\u00aa\1\u00ae\1\u00ad\1\u0088\1\u0087\1\u0086\1\u008d"+
            "\1\u008c\1\u008b\u0081\uffff\1\u00a3\1\uffff\1\u0098\2\uffff"+
            "\1\u00a4\1\u008e\2\uffff\1\u00ac\2\uffff\1\u009c\1\u009d\1\u009e"+
            "\1\u009a\1\u009b\1\u0094\1\u0095\1\u0096\1\u0097\1\u0093\1\u0091"+
            "\1\u0092\1\u008f\1\u0090",
            "\1\u00d6\1\u00d7\1\u00d8\1\u00d9\1\uffff\1\u00d0\1\u00cf\1"+
            "\u00d5\6\uffff\1\u00bc\24\uffff\1\u00c9\12\uffff\1\u00b3\3\uffff"+
            "\1\u00d1\1\u00d2\14\uffff\1\u00bd\12\uffff\1\u00b2\1\u00b1\1"+
            "\u00db\1\u00da\1\u00bb\1\u00ba\1\u00b9\1\u00b8\1\u00b7\1\u00b6"+
            "\1\u00b5\1\u00b4\u0081\uffff\1\u00d3\1\uffff\1\u00c8\2\uffff"+
            "\1\u00d4\1\u00be\2\uffff\1\u00dc\2\uffff\1\u00cc\1\u00cd\1\u00ce"+
            "\1\u00ca\1\u00cb\1\u00c4\1\u00c5\1\u00c6\1\u00c7\1\u00c3\1\u00c1"+
            "\1\u00c2\1\u00bf\1\u00c0",
            "\1\u00f8\1\u00f9\1\u00fa\1\u00fb\1\uffff\1\u00ef\1\u00ee\1"+
            "\u00f7\6\uffff\1\u00fe\24\uffff\1\u00e8\12\uffff\1\u00ff\3\uffff"+
            "\1\u00f0\1\u00f1\14\uffff\1\u0100\12\uffff\1\u0107\1\u0106\1"+
            "\u0102\1\u0101\1\u00fd\1\u00fc\1\u00f4\1\u00f3\1\u00f2\1\u0105"+
            "\1\u0104\1\u0103\u0081\uffff\1\u00f5\1\uffff\1\u00e7\2\uffff"+
            "\1\u00f6\1\u00dd\2\uffff\1\u0108\2\uffff\1\u00eb\1\u00ec\1\u00ed"+
            "\1\u00e9\1\u00ea\1\u00e3\1\u00e4\1\u00e5\1\u00e6\1\u00e2\1\u00e0"+
            "\1\u00e1\1\u00de\1\u00df",
            "\1\u0124\1\u0125\1\u0126\1\u0127\1\uffff\1\u011b\1\u011a\1"+
            "\u0123\6\uffff\1\u012b\24\uffff\1\u0114\12\uffff\1\u0128\3\uffff"+
            "\1\u011c\1\u011d\14\uffff\1\u012c\12\uffff\1\u0133\1\u0132\1"+
            "\u0131\1\u0130\1\u012a\1\u0129\1\u0120\1\u011f\1\u011e\1\u012f"+
            "\1\u012e\1\u012d\u0081\uffff\1\u0121\1\uffff\1\u0113\2\uffff"+
            "\1\u0122\1\u0109\2\uffff\1\u0134\2\uffff\1\u0117\1\u0118\1\u0119"+
            "\1\u0115\1\u0116\1\u010f\1\u0110\1\u0111\1\u0112\1\u010e\1\u010c"+
            "\1\u010d\1\u010a\1\u010b",
            "\1\u015d\1\u015e\1\u015f\1\u0160\1\uffff\1\u0157\1\u0156\1"+
            "\u015c\6\uffff\1\u0165\24\uffff\1\u0150\12\uffff\1\u0162\3\uffff"+
            "\1\u0158\1\u0159\14\uffff\1\u0136\12\uffff\1\u013b\1\u013a\1"+
            "\u0140\1\u013f\1\u0164\1\u0163\1\u013e\1\u013d\1\u013c\1\u0139"+
            "\1\u0138\1\u0137\u0081\uffff\1\u015a\1\uffff\1\u014f\1\u0135"+
            "\1\u0143\1\u015b\1\u0145\1\u0142\1\uffff\1\u0161\2\uffff\1\u0153"+
            "\1\u0154\1\u0155\1\u0151\1\u0152\1\u014b\1\u014c\1\u014d\1\u014e"+
            "\1\u014a\1\u0148\1\u0149\1\u0146\1\u0147\4\uffff\1\u0144\1\u0141",
            "\1\u018e\1\u018f\1\u0190\1\u0191\1\uffff\1\u0188\1\u0187\1"+
            "\u018d\6\uffff\1\u016f\24\uffff\1\u0181\12\uffff\1\u0169\3\uffff"+
            "\1\u0189\1\u018a\14\uffff\1\u0172\12\uffff\1\u0171\1\u0170\1"+
            "\u0175\1\u0174\1\u016e\1\u016d\1\u016c\1\u016b\1\u016a\1\u0168"+
            "\1\u0167\1\u0166\u0081\uffff\1\u018b\1\uffff\1\u0180\2\uffff"+
            "\1\u018c\1\u0176\2\uffff\1\u0173\2\uffff\1\u0184\1\u0185\1\u0186"+
            "\1\u0182\1\u0183\1\u017c\1\u017d\1\u017e\1\u017f\1\u017b\1\u0179"+
            "\1\u017a\1\u0177\1\u0178",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0193\4\uffff\1\u0193\22\uffff\1\u0192",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA187_eot = DFA.unpackEncodedString(DFA187_eotS);
    static final short[] DFA187_eof = DFA.unpackEncodedString(DFA187_eofS);
    static final char[] DFA187_min = DFA.unpackEncodedStringToUnsignedChars(DFA187_minS);
    static final char[] DFA187_max = DFA.unpackEncodedStringToUnsignedChars(DFA187_maxS);
    static final short[] DFA187_accept = DFA.unpackEncodedString(DFA187_acceptS);
    static final short[] DFA187_special = DFA.unpackEncodedString(DFA187_specialS);
    static final short[][] DFA187_transition;

    static {
        int numStates = DFA187_transitionS.length;
        DFA187_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA187_transition[i] = DFA.unpackEncodedString(DFA187_transitionS[i]);
        }
    }

    class DFA187 extends DFA {

        public DFA187(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 187;
            this.eot = DFA187_eot;
            this.eof = DFA187_eof;
            this.min = DFA187_min;
            this.max = DFA187_max;
            this.accept = DFA187_accept;
            this.special = DFA187_special;
            this.transition = DFA187_transition;
        }
        public String getDescription() {
            return "1218:1: expressionWithTime : ( ( lastOperand )=> lastOperand | ( lastWeekdayOperand )=> lastWeekdayOperand | ( timePeriod )=> timePeriod | ( expressionQualifyable )=> expressionQualifyable | ( rangeOperand )=> rangeOperand | ( frequencyOperand )=> frequencyOperand | ( lastOperator )=> lastOperator | ( weekDayOperator )=> weekDayOperator | ( numericParameterList )=> numericParameterList | numberSetStar );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA187_0 = input.LA(1);

                         
                        int index187_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA187_0==LAST) ) {s = 1;}

                        else if ( (LA187_0==LW) ) {s = 2;}

                        else if ( (LA187_0==NUM_INT) ) {s = 3;}

                        else if ( (LA187_0==NUM_LONG) ) {s = 4;}

                        else if ( (LA187_0==NUM_FLOAT) ) {s = 5;}

                        else if ( (LA187_0==NUM_DOUBLE) ) {s = 6;}

                        else if ( (LA187_0==IDENT) ) {s = 7;}

                        else if ( (LA187_0==QUESTION) ) {s = 8;}

                        else if ( (LA187_0==CASE) && (synpred9_EsperEPL2Grammar())) {s = 9;}

                        else if ( (LA187_0==MINUS) && (synpred9_EsperEPL2Grammar())) {s = 10;}

                        else if ( (LA187_0==PLUS) && (synpred9_EsperEPL2Grammar())) {s = 11;}

                        else if ( (LA187_0==STRING_LITERAL) && (synpred9_EsperEPL2Grammar())) {s = 12;}

                        else if ( (LA187_0==QUOTED_STRING_LITERAL) && (synpred9_EsperEPL2Grammar())) {s = 13;}

                        else if ( (LA187_0==BOOLEAN_TRUE) && (synpred9_EsperEPL2Grammar())) {s = 14;}

                        else if ( (LA187_0==BOOLEAN_FALSE) && (synpred9_EsperEPL2Grammar())) {s = 15;}

                        else if ( (LA187_0==VALUE_NULL) && (synpred9_EsperEPL2Grammar())) {s = 16;}

                        else if ( (LA187_0==LPAREN) && (synpred9_EsperEPL2Grammar())) {s = 17;}

                        else if ( (LA187_0==TICKED_STRING_LITERAL) && (synpred9_EsperEPL2Grammar())) {s = 18;}

                        else if ( (LA187_0==AT) && (synpred9_EsperEPL2Grammar())) {s = 19;}

                        else if ( (LA187_0==COUNT) && (synpred9_EsperEPL2Grammar())) {s = 20;}

                        else if ( (LA187_0==ESCAPE) && (synpred9_EsperEPL2Grammar())) {s = 21;}

                        else if ( (LA187_0==EVERY_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 22;}

                        else if ( (LA187_0==SUM) && (synpred9_EsperEPL2Grammar())) {s = 23;}

                        else if ( (LA187_0==AVG) && (synpred9_EsperEPL2Grammar())) {s = 24;}

                        else if ( (LA187_0==MAX) && (synpred9_EsperEPL2Grammar())) {s = 25;}

                        else if ( (LA187_0==MIN) && (synpred9_EsperEPL2Grammar())) {s = 26;}

                        else if ( (LA187_0==COALESCE) && (synpred9_EsperEPL2Grammar())) {s = 27;}

                        else if ( (LA187_0==MEDIAN) && (synpred9_EsperEPL2Grammar())) {s = 28;}

                        else if ( (LA187_0==STDDEV) && (synpred9_EsperEPL2Grammar())) {s = 29;}

                        else if ( (LA187_0==AVEDEV) && (synpred9_EsperEPL2Grammar())) {s = 30;}

                        else if ( (LA187_0==EVENTS) && (synpred9_EsperEPL2Grammar())) {s = 31;}

                        else if ( (LA187_0==FIRST) && (synpred9_EsperEPL2Grammar())) {s = 32;}

                        else if ( (LA187_0==UNIDIRECTIONAL) && (synpred9_EsperEPL2Grammar())) {s = 33;}

                        else if ( (LA187_0==RETAINUNION) && (synpred9_EsperEPL2Grammar())) {s = 34;}

                        else if ( (LA187_0==RETAININTERSECTION) && (synpred9_EsperEPL2Grammar())) {s = 35;}

                        else if ( (LA187_0==UNTIL) && (synpred9_EsperEPL2Grammar())) {s = 36;}

                        else if ( (LA187_0==PATTERN) && (synpred9_EsperEPL2Grammar())) {s = 37;}

                        else if ( (LA187_0==SQL) && (synpred9_EsperEPL2Grammar())) {s = 38;}

                        else if ( (LA187_0==METADATASQL) && (synpred9_EsperEPL2Grammar())) {s = 39;}

                        else if ( (LA187_0==PREVIOUS) && (synpred9_EsperEPL2Grammar())) {s = 40;}

                        else if ( (LA187_0==PRIOR) && (synpred9_EsperEPL2Grammar())) {s = 41;}

                        else if ( (LA187_0==WEEKDAY) && (synpred9_EsperEPL2Grammar())) {s = 42;}

                        else if ( (LA187_0==INSTANCEOF) && (synpred9_EsperEPL2Grammar())) {s = 43;}

                        else if ( (LA187_0==CAST) && (synpred9_EsperEPL2Grammar())) {s = 44;}

                        else if ( (LA187_0==SNAPSHOT) && (synpred9_EsperEPL2Grammar())) {s = 45;}

                        else if ( (LA187_0==VARIABLE) && (synpred9_EsperEPL2Grammar())) {s = 46;}

                        else if ( (LA187_0==WINDOW) && (synpred9_EsperEPL2Grammar())) {s = 47;}

                        else if ( (LA187_0==LEFT) && (synpred9_EsperEPL2Grammar())) {s = 48;}

                        else if ( (LA187_0==RIGHT) && (synpred9_EsperEPL2Grammar())) {s = 49;}

                        else if ( (LA187_0==OUTER) && (synpred9_EsperEPL2Grammar())) {s = 50;}

                        else if ( (LA187_0==FULL) && (synpred9_EsperEPL2Grammar())) {s = 51;}

                        else if ( (LA187_0==JOIN) && (synpred9_EsperEPL2Grammar())) {s = 52;}

                        else if ( (LA187_0==EXISTS) && (synpred9_EsperEPL2Grammar())) {s = 53;}

                        else if ( (LA187_0==CURRENT_TIMESTAMP) && (synpred9_EsperEPL2Grammar())) {s = 54;}

                        else if ( (LA187_0==LCURLY) && (synpred9_EsperEPL2Grammar())) {s = 55;}

                        else if ( (LA187_0==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 56;}

                        else if ( (LA187_0==STAR) ) {s = 57;}

                        else if ( (LA187_0==LBRACK) && (synpred14_EsperEPL2Grammar())) {s = 58;}

                         
                        input.seek(index187_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA187_1 = input.LA(1);

                         
                        int index187_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_EsperEPL2Grammar()) ) {s = 95;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 56;}

                         
                        input.seek(index187_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA187_2 = input.LA(1);

                         
                        int index187_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_EsperEPL2Grammar()) ) {s = 132;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 56;}

                         
                        input.seek(index187_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA187_3 = input.LA(1);

                         
                        int index187_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA187_3==WEEKDAY) && (synpred13_EsperEPL2Grammar())) {s = 133;}

                        else if ( (LA187_3==TIMEPERIOD_SECONDS) ) {s = 134;}

                        else if ( (LA187_3==TIMEPERIOD_SECOND) ) {s = 135;}

                        else if ( (LA187_3==TIMEPERIOD_SEC) ) {s = 136;}

                        else if ( (LA187_3==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {s = 137;}

                        else if ( (LA187_3==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {s = 138;}

                        else if ( (LA187_3==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {s = 139;}

                        else if ( (LA187_3==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {s = 140;}

                        else if ( (LA187_3==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {s = 141;}

                        else if ( (LA187_3==STAR) && (synpred9_EsperEPL2Grammar())) {s = 142;}

                        else if ( (LA187_3==DIV) && (synpred9_EsperEPL2Grammar())) {s = 143;}

                        else if ( (LA187_3==MOD) && (synpred9_EsperEPL2Grammar())) {s = 144;}

                        else if ( (LA187_3==PLUS) && (synpred9_EsperEPL2Grammar())) {s = 145;}

                        else if ( (LA187_3==MINUS) && (synpred9_EsperEPL2Grammar())) {s = 146;}

                        else if ( (LA187_3==LOR) && (synpred9_EsperEPL2Grammar())) {s = 147;}

                        else if ( (LA187_3==LT) && (synpred9_EsperEPL2Grammar())) {s = 148;}

                        else if ( (LA187_3==GT) && (synpred9_EsperEPL2Grammar())) {s = 149;}

                        else if ( (LA187_3==LE) && (synpred9_EsperEPL2Grammar())) {s = 150;}

                        else if ( (LA187_3==GE) && (synpred9_EsperEPL2Grammar())) {s = 151;}

                        else if ( (LA187_3==EQUALS) && (synpred9_EsperEPL2Grammar())) {s = 152;}

                        else if ( (LA187_3==IS) && (synpred9_EsperEPL2Grammar())) {s = 153;}

                        else if ( (LA187_3==SQL_NE) && (synpred9_EsperEPL2Grammar())) {s = 154;}

                        else if ( (LA187_3==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {s = 155;}

                        else if ( (LA187_3==BAND) && (synpred9_EsperEPL2Grammar())) {s = 156;}

                        else if ( (LA187_3==BOR) && (synpred9_EsperEPL2Grammar())) {s = 157;}

                        else if ( (LA187_3==BXOR) && (synpred9_EsperEPL2Grammar())) {s = 158;}

                        else if ( (LA187_3==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 159;}

                        else if ( (LA187_3==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 160;}

                        else if ( (LA187_3==ASC) && (synpred9_EsperEPL2Grammar())) {s = 161;}

                        else if ( (LA187_3==DESC) && (synpred9_EsperEPL2Grammar())) {s = 162;}

                        else if ( (LA187_3==COMMA) && (synpred9_EsperEPL2Grammar())) {s = 163;}

                        else if ( (LA187_3==RPAREN) && (synpred9_EsperEPL2Grammar())) {s = 164;}

                        else if ( (LA187_3==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 165;}

                        else if ( (LA187_3==IN_SET) && (synpred9_EsperEPL2Grammar())) {s = 166;}

                        else if ( (LA187_3==BETWEEN) && (synpred9_EsperEPL2Grammar())) {s = 167;}

                        else if ( (LA187_3==LIKE) && (synpred9_EsperEPL2Grammar())) {s = 168;}

                        else if ( (LA187_3==REGEXP) && (synpred9_EsperEPL2Grammar())) {s = 169;}

                        else if ( (LA187_3==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {s = 170;}

                        else if ( (LA187_3==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {s = 171;}

                        else if ( (LA187_3==COLON) && (synpred10_EsperEPL2Grammar())) {s = 172;}

                        else if ( (LA187_3==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {s = 173;}

                        else if ( (LA187_3==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {s = 174;}

                        else if ( (LA187_3==MIN) && (synpred8_EsperEPL2Grammar())) {s = 175;}

                        else if ( (LA187_3==LAST) && (synpred12_EsperEPL2Grammar())) {s = 176;}

                         
                        input.seek(index187_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA187_4 = input.LA(1);

                         
                        int index187_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA187_4==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {s = 177;}

                        else if ( (LA187_4==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {s = 178;}

                        else if ( (LA187_4==LAST) && (synpred12_EsperEPL2Grammar())) {s = 179;}

                        else if ( (LA187_4==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {s = 180;}

                        else if ( (LA187_4==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {s = 181;}

                        else if ( (LA187_4==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {s = 182;}

                        else if ( (LA187_4==TIMEPERIOD_SECONDS) ) {s = 183;}

                        else if ( (LA187_4==TIMEPERIOD_SECOND) ) {s = 184;}

                        else if ( (LA187_4==TIMEPERIOD_SEC) ) {s = 185;}

                        else if ( (LA187_4==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {s = 186;}

                        else if ( (LA187_4==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {s = 187;}

                        else if ( (LA187_4==MIN) && (synpred8_EsperEPL2Grammar())) {s = 188;}

                        else if ( (LA187_4==WEEKDAY) && (synpred13_EsperEPL2Grammar())) {s = 189;}

                        else if ( (LA187_4==STAR) && (synpred9_EsperEPL2Grammar())) {s = 190;}

                        else if ( (LA187_4==DIV) && (synpred9_EsperEPL2Grammar())) {s = 191;}

                        else if ( (LA187_4==MOD) && (synpred9_EsperEPL2Grammar())) {s = 192;}

                        else if ( (LA187_4==PLUS) && (synpred9_EsperEPL2Grammar())) {s = 193;}

                        else if ( (LA187_4==MINUS) && (synpred9_EsperEPL2Grammar())) {s = 194;}

                        else if ( (LA187_4==LOR) && (synpred9_EsperEPL2Grammar())) {s = 195;}

                        else if ( (LA187_4==LT) && (synpred9_EsperEPL2Grammar())) {s = 196;}

                        else if ( (LA187_4==GT) && (synpred9_EsperEPL2Grammar())) {s = 197;}

                        else if ( (LA187_4==LE) && (synpred9_EsperEPL2Grammar())) {s = 198;}

                        else if ( (LA187_4==GE) && (synpred9_EsperEPL2Grammar())) {s = 199;}

                        else if ( (LA187_4==EQUALS) && (synpred9_EsperEPL2Grammar())) {s = 200;}

                        else if ( (LA187_4==IS) && (synpred9_EsperEPL2Grammar())) {s = 201;}

                        else if ( (LA187_4==SQL_NE) && (synpred9_EsperEPL2Grammar())) {s = 202;}

                        else if ( (LA187_4==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {s = 203;}

                        else if ( (LA187_4==BAND) && (synpred9_EsperEPL2Grammar())) {s = 204;}

                        else if ( (LA187_4==BOR) && (synpred9_EsperEPL2Grammar())) {s = 205;}

                        else if ( (LA187_4==BXOR) && (synpred9_EsperEPL2Grammar())) {s = 206;}

                        else if ( (LA187_4==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 207;}

                        else if ( (LA187_4==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 208;}

                        else if ( (LA187_4==ASC) && (synpred9_EsperEPL2Grammar())) {s = 209;}

                        else if ( (LA187_4==DESC) && (synpred9_EsperEPL2Grammar())) {s = 210;}

                        else if ( (LA187_4==COMMA) && (synpred9_EsperEPL2Grammar())) {s = 211;}

                        else if ( (LA187_4==RPAREN) && (synpred9_EsperEPL2Grammar())) {s = 212;}

                        else if ( (LA187_4==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 213;}

                        else if ( (LA187_4==IN_SET) && (synpred9_EsperEPL2Grammar())) {s = 214;}

                        else if ( (LA187_4==BETWEEN) && (synpred9_EsperEPL2Grammar())) {s = 215;}

                        else if ( (LA187_4==LIKE) && (synpred9_EsperEPL2Grammar())) {s = 216;}

                        else if ( (LA187_4==REGEXP) && (synpred9_EsperEPL2Grammar())) {s = 217;}

                        else if ( (LA187_4==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {s = 218;}

                        else if ( (LA187_4==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {s = 219;}

                        else if ( (LA187_4==COLON) && (synpred10_EsperEPL2Grammar())) {s = 220;}

                         
                        input.seek(index187_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA187_5 = input.LA(1);

                         
                        int index187_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA187_5==STAR) && (synpred9_EsperEPL2Grammar())) {s = 221;}

                        else if ( (LA187_5==DIV) && (synpred9_EsperEPL2Grammar())) {s = 222;}

                        else if ( (LA187_5==MOD) && (synpred9_EsperEPL2Grammar())) {s = 223;}

                        else if ( (LA187_5==PLUS) && (synpred9_EsperEPL2Grammar())) {s = 224;}

                        else if ( (LA187_5==MINUS) && (synpred9_EsperEPL2Grammar())) {s = 225;}

                        else if ( (LA187_5==LOR) && (synpred9_EsperEPL2Grammar())) {s = 226;}

                        else if ( (LA187_5==LT) && (synpred9_EsperEPL2Grammar())) {s = 227;}

                        else if ( (LA187_5==GT) && (synpred9_EsperEPL2Grammar())) {s = 228;}

                        else if ( (LA187_5==LE) && (synpred9_EsperEPL2Grammar())) {s = 229;}

                        else if ( (LA187_5==GE) && (synpred9_EsperEPL2Grammar())) {s = 230;}

                        else if ( (LA187_5==EQUALS) && (synpred9_EsperEPL2Grammar())) {s = 231;}

                        else if ( (LA187_5==IS) && (synpred9_EsperEPL2Grammar())) {s = 232;}

                        else if ( (LA187_5==SQL_NE) && (synpred9_EsperEPL2Grammar())) {s = 233;}

                        else if ( (LA187_5==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {s = 234;}

                        else if ( (LA187_5==BAND) && (synpred9_EsperEPL2Grammar())) {s = 235;}

                        else if ( (LA187_5==BOR) && (synpred9_EsperEPL2Grammar())) {s = 236;}

                        else if ( (LA187_5==BXOR) && (synpred9_EsperEPL2Grammar())) {s = 237;}

                        else if ( (LA187_5==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 238;}

                        else if ( (LA187_5==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 239;}

                        else if ( (LA187_5==ASC) && (synpred9_EsperEPL2Grammar())) {s = 240;}

                        else if ( (LA187_5==DESC) && (synpred9_EsperEPL2Grammar())) {s = 241;}

                        else if ( (LA187_5==TIMEPERIOD_SECONDS) ) {s = 242;}

                        else if ( (LA187_5==TIMEPERIOD_SECOND) ) {s = 243;}

                        else if ( (LA187_5==TIMEPERIOD_SEC) ) {s = 244;}

                        else if ( (LA187_5==COMMA) && (synpred9_EsperEPL2Grammar())) {s = 245;}

                        else if ( (LA187_5==RPAREN) && (synpred9_EsperEPL2Grammar())) {s = 246;}

                        else if ( (LA187_5==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 247;}

                        else if ( (LA187_5==IN_SET) && (synpred9_EsperEPL2Grammar())) {s = 248;}

                        else if ( (LA187_5==BETWEEN) && (synpred9_EsperEPL2Grammar())) {s = 249;}

                        else if ( (LA187_5==LIKE) && (synpred9_EsperEPL2Grammar())) {s = 250;}

                        else if ( (LA187_5==REGEXP) && (synpred9_EsperEPL2Grammar())) {s = 251;}

                        else if ( (LA187_5==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {s = 252;}

                        else if ( (LA187_5==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {s = 253;}

                        else if ( (LA187_5==MIN) && (synpred8_EsperEPL2Grammar())) {s = 254;}

                        else if ( (LA187_5==LAST) && (synpred12_EsperEPL2Grammar())) {s = 255;}

                        else if ( (LA187_5==WEEKDAY) && (synpred13_EsperEPL2Grammar())) {s = 256;}

                        else if ( (LA187_5==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {s = 257;}

                        else if ( (LA187_5==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {s = 258;}

                        else if ( (LA187_5==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {s = 259;}

                        else if ( (LA187_5==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {s = 260;}

                        else if ( (LA187_5==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {s = 261;}

                        else if ( (LA187_5==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {s = 262;}

                        else if ( (LA187_5==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {s = 263;}

                        else if ( (LA187_5==COLON) && (synpred10_EsperEPL2Grammar())) {s = 264;}

                         
                        input.seek(index187_5);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA187_6 = input.LA(1);

                         
                        int index187_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA187_6==STAR) && (synpred9_EsperEPL2Grammar())) {s = 265;}

                        else if ( (LA187_6==DIV) && (synpred9_EsperEPL2Grammar())) {s = 266;}

                        else if ( (LA187_6==MOD) && (synpred9_EsperEPL2Grammar())) {s = 267;}

                        else if ( (LA187_6==PLUS) && (synpred9_EsperEPL2Grammar())) {s = 268;}

                        else if ( (LA187_6==MINUS) && (synpred9_EsperEPL2Grammar())) {s = 269;}

                        else if ( (LA187_6==LOR) && (synpred9_EsperEPL2Grammar())) {s = 270;}

                        else if ( (LA187_6==LT) && (synpred9_EsperEPL2Grammar())) {s = 271;}

                        else if ( (LA187_6==GT) && (synpred9_EsperEPL2Grammar())) {s = 272;}

                        else if ( (LA187_6==LE) && (synpred9_EsperEPL2Grammar())) {s = 273;}

                        else if ( (LA187_6==GE) && (synpred9_EsperEPL2Grammar())) {s = 274;}

                        else if ( (LA187_6==EQUALS) && (synpred9_EsperEPL2Grammar())) {s = 275;}

                        else if ( (LA187_6==IS) && (synpred9_EsperEPL2Grammar())) {s = 276;}

                        else if ( (LA187_6==SQL_NE) && (synpred9_EsperEPL2Grammar())) {s = 277;}

                        else if ( (LA187_6==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {s = 278;}

                        else if ( (LA187_6==BAND) && (synpred9_EsperEPL2Grammar())) {s = 279;}

                        else if ( (LA187_6==BOR) && (synpred9_EsperEPL2Grammar())) {s = 280;}

                        else if ( (LA187_6==BXOR) && (synpred9_EsperEPL2Grammar())) {s = 281;}

                        else if ( (LA187_6==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 282;}

                        else if ( (LA187_6==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 283;}

                        else if ( (LA187_6==ASC) && (synpred9_EsperEPL2Grammar())) {s = 284;}

                        else if ( (LA187_6==DESC) && (synpred9_EsperEPL2Grammar())) {s = 285;}

                        else if ( (LA187_6==TIMEPERIOD_SECONDS) ) {s = 286;}

                        else if ( (LA187_6==TIMEPERIOD_SECOND) ) {s = 287;}

                        else if ( (LA187_6==TIMEPERIOD_SEC) ) {s = 288;}

                        else if ( (LA187_6==COMMA) && (synpred9_EsperEPL2Grammar())) {s = 289;}

                        else if ( (LA187_6==RPAREN) && (synpred9_EsperEPL2Grammar())) {s = 290;}

                        else if ( (LA187_6==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 291;}

                        else if ( (LA187_6==IN_SET) && (synpred9_EsperEPL2Grammar())) {s = 292;}

                        else if ( (LA187_6==BETWEEN) && (synpred9_EsperEPL2Grammar())) {s = 293;}

                        else if ( (LA187_6==LIKE) && (synpred9_EsperEPL2Grammar())) {s = 294;}

                        else if ( (LA187_6==REGEXP) && (synpred9_EsperEPL2Grammar())) {s = 295;}

                        else if ( (LA187_6==LAST) && (synpred12_EsperEPL2Grammar())) {s = 296;}

                        else if ( (LA187_6==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {s = 297;}

                        else if ( (LA187_6==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {s = 298;}

                        else if ( (LA187_6==MIN) && (synpred8_EsperEPL2Grammar())) {s = 299;}

                        else if ( (LA187_6==WEEKDAY) && (synpred13_EsperEPL2Grammar())) {s = 300;}

                        else if ( (LA187_6==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {s = 301;}

                        else if ( (LA187_6==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {s = 302;}

                        else if ( (LA187_6==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {s = 303;}

                        else if ( (LA187_6==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {s = 304;}

                        else if ( (LA187_6==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {s = 305;}

                        else if ( (LA187_6==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {s = 306;}

                        else if ( (LA187_6==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {s = 307;}

                        else if ( (LA187_6==COLON) && (synpred10_EsperEPL2Grammar())) {s = 308;}

                         
                        input.seek(index187_6);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA187_7 = input.LA(1);

                         
                        int index187_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA187_7==DOT) && (synpred9_EsperEPL2Grammar())) {s = 309;}

                        else if ( (LA187_7==WEEKDAY) && (synpred13_EsperEPL2Grammar())) {s = 310;}

                        else if ( (LA187_7==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {s = 311;}

                        else if ( (LA187_7==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {s = 312;}

                        else if ( (LA187_7==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {s = 313;}

                        else if ( (LA187_7==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {s = 314;}

                        else if ( (LA187_7==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {s = 315;}

                        else if ( (LA187_7==TIMEPERIOD_SECONDS) ) {s = 316;}

                        else if ( (LA187_7==TIMEPERIOD_SECOND) ) {s = 317;}

                        else if ( (LA187_7==TIMEPERIOD_SEC) ) {s = 318;}

                        else if ( (LA187_7==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {s = 319;}

                        else if ( (LA187_7==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {s = 320;}

                        else if ( (LA187_7==ESCAPECHAR) && (synpred9_EsperEPL2Grammar())) {s = 321;}

                        else if ( (LA187_7==LBRACK) && (synpred9_EsperEPL2Grammar())) {s = 322;}

                        else if ( (LA187_7==LPAREN) && (synpred9_EsperEPL2Grammar())) {s = 323;}

                        else if ( (LA187_7==QUESTION) && (synpred9_EsperEPL2Grammar())) {s = 324;}

                        else if ( (LA187_7==STAR) && (synpred9_EsperEPL2Grammar())) {s = 325;}

                        else if ( (LA187_7==DIV) && (synpred9_EsperEPL2Grammar())) {s = 326;}

                        else if ( (LA187_7==MOD) && (synpred9_EsperEPL2Grammar())) {s = 327;}

                        else if ( (LA187_7==PLUS) && (synpred9_EsperEPL2Grammar())) {s = 328;}

                        else if ( (LA187_7==MINUS) && (synpred9_EsperEPL2Grammar())) {s = 329;}

                        else if ( (LA187_7==LOR) && (synpred9_EsperEPL2Grammar())) {s = 330;}

                        else if ( (LA187_7==LT) && (synpred9_EsperEPL2Grammar())) {s = 331;}

                        else if ( (LA187_7==GT) && (synpred9_EsperEPL2Grammar())) {s = 332;}

                        else if ( (LA187_7==LE) && (synpred9_EsperEPL2Grammar())) {s = 333;}

                        else if ( (LA187_7==GE) && (synpred9_EsperEPL2Grammar())) {s = 334;}

                        else if ( (LA187_7==EQUALS) && (synpred9_EsperEPL2Grammar())) {s = 335;}

                        else if ( (LA187_7==IS) && (synpred9_EsperEPL2Grammar())) {s = 336;}

                        else if ( (LA187_7==SQL_NE) && (synpred9_EsperEPL2Grammar())) {s = 337;}

                        else if ( (LA187_7==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {s = 338;}

                        else if ( (LA187_7==BAND) && (synpred9_EsperEPL2Grammar())) {s = 339;}

                        else if ( (LA187_7==BOR) && (synpred9_EsperEPL2Grammar())) {s = 340;}

                        else if ( (LA187_7==BXOR) && (synpred9_EsperEPL2Grammar())) {s = 341;}

                        else if ( (LA187_7==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 342;}

                        else if ( (LA187_7==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 343;}

                        else if ( (LA187_7==ASC) && (synpred9_EsperEPL2Grammar())) {s = 344;}

                        else if ( (LA187_7==DESC) && (synpred9_EsperEPL2Grammar())) {s = 345;}

                        else if ( (LA187_7==COMMA) && (synpred9_EsperEPL2Grammar())) {s = 346;}

                        else if ( (LA187_7==RPAREN) && (synpred9_EsperEPL2Grammar())) {s = 347;}

                        else if ( (LA187_7==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 348;}

                        else if ( (LA187_7==IN_SET) && (synpred9_EsperEPL2Grammar())) {s = 349;}

                        else if ( (LA187_7==BETWEEN) && (synpred9_EsperEPL2Grammar())) {s = 350;}

                        else if ( (LA187_7==LIKE) && (synpred9_EsperEPL2Grammar())) {s = 351;}

                        else if ( (LA187_7==REGEXP) && (synpred9_EsperEPL2Grammar())) {s = 352;}

                        else if ( (LA187_7==COLON) && (synpred10_EsperEPL2Grammar())) {s = 353;}

                        else if ( (LA187_7==LAST) && (synpred12_EsperEPL2Grammar())) {s = 354;}

                        else if ( (LA187_7==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {s = 355;}

                        else if ( (LA187_7==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {s = 356;}

                        else if ( (LA187_7==MIN) && (synpred8_EsperEPL2Grammar())) {s = 357;}

                         
                        input.seek(index187_7);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA187_8 = input.LA(1);

                         
                        int index187_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA187_8==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {s = 358;}

                        else if ( (LA187_8==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {s = 359;}

                        else if ( (LA187_8==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {s = 360;}

                        else if ( (LA187_8==LAST) && (synpred12_EsperEPL2Grammar())) {s = 361;}

                        else if ( (LA187_8==TIMEPERIOD_SECONDS) ) {s = 362;}

                        else if ( (LA187_8==TIMEPERIOD_SECOND) ) {s = 363;}

                        else if ( (LA187_8==TIMEPERIOD_SEC) ) {s = 364;}

                        else if ( (LA187_8==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {s = 365;}

                        else if ( (LA187_8==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {s = 366;}

                        else if ( (LA187_8==MIN) && (synpred8_EsperEPL2Grammar())) {s = 367;}

                        else if ( (LA187_8==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {s = 368;}

                        else if ( (LA187_8==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {s = 369;}

                        else if ( (LA187_8==WEEKDAY) && (synpred13_EsperEPL2Grammar())) {s = 370;}

                        else if ( (LA187_8==COLON) && (synpred10_EsperEPL2Grammar())) {s = 371;}

                        else if ( (LA187_8==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {s = 372;}

                        else if ( (LA187_8==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {s = 373;}

                        else if ( (LA187_8==STAR) && (synpred9_EsperEPL2Grammar())) {s = 374;}

                        else if ( (LA187_8==DIV) && (synpred9_EsperEPL2Grammar())) {s = 375;}

                        else if ( (LA187_8==MOD) && (synpred9_EsperEPL2Grammar())) {s = 376;}

                        else if ( (LA187_8==PLUS) && (synpred9_EsperEPL2Grammar())) {s = 377;}

                        else if ( (LA187_8==MINUS) && (synpred9_EsperEPL2Grammar())) {s = 378;}

                        else if ( (LA187_8==LOR) && (synpred9_EsperEPL2Grammar())) {s = 379;}

                        else if ( (LA187_8==LT) && (synpred9_EsperEPL2Grammar())) {s = 380;}

                        else if ( (LA187_8==GT) && (synpred9_EsperEPL2Grammar())) {s = 381;}

                        else if ( (LA187_8==LE) && (synpred9_EsperEPL2Grammar())) {s = 382;}

                        else if ( (LA187_8==GE) && (synpred9_EsperEPL2Grammar())) {s = 383;}

                        else if ( (LA187_8==EQUALS) && (synpred9_EsperEPL2Grammar())) {s = 384;}

                        else if ( (LA187_8==IS) && (synpred9_EsperEPL2Grammar())) {s = 385;}

                        else if ( (LA187_8==SQL_NE) && (synpred9_EsperEPL2Grammar())) {s = 386;}

                        else if ( (LA187_8==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {s = 387;}

                        else if ( (LA187_8==BAND) && (synpred9_EsperEPL2Grammar())) {s = 388;}

                        else if ( (LA187_8==BOR) && (synpred9_EsperEPL2Grammar())) {s = 389;}

                        else if ( (LA187_8==BXOR) && (synpred9_EsperEPL2Grammar())) {s = 390;}

                        else if ( (LA187_8==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 391;}

                        else if ( (LA187_8==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 392;}

                        else if ( (LA187_8==ASC) && (synpred9_EsperEPL2Grammar())) {s = 393;}

                        else if ( (LA187_8==DESC) && (synpred9_EsperEPL2Grammar())) {s = 394;}

                        else if ( (LA187_8==COMMA) && (synpred9_EsperEPL2Grammar())) {s = 395;}

                        else if ( (LA187_8==RPAREN) && (synpred9_EsperEPL2Grammar())) {s = 396;}

                        else if ( (LA187_8==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 397;}

                        else if ( (LA187_8==IN_SET) && (synpred9_EsperEPL2Grammar())) {s = 398;}

                        else if ( (LA187_8==BETWEEN) && (synpred9_EsperEPL2Grammar())) {s = 399;}

                        else if ( (LA187_8==LIKE) && (synpred9_EsperEPL2Grammar())) {s = 400;}

                        else if ( (LA187_8==REGEXP) && (synpred9_EsperEPL2Grammar())) {s = 401;}

                         
                        input.seek(index187_8);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA187_57 = input.LA(1);

                         
                        int index187_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA187_57==DIV) && (synpred11_EsperEPL2Grammar())) {s = 402;}

                        else if ( (LA187_57==COMMA||LA187_57==RPAREN) ) {s = 403;}

                         
                        input.seek(index187_57);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA187_134 = input.LA(1);

                         
                        int index187_134 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 373;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 401;}

                         
                        input.seek(index187_134);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA187_135 = input.LA(1);

                         
                        int index187_135 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 373;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 401;}

                         
                        input.seek(index187_135);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA187_136 = input.LA(1);

                         
                        int index187_136 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 373;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 401;}

                         
                        input.seek(index187_136);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA187_183 = input.LA(1);

                         
                        int index187_183 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 373;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 401;}

                         
                        input.seek(index187_183);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA187_184 = input.LA(1);

                         
                        int index187_184 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 373;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 401;}

                         
                        input.seek(index187_184);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA187_185 = input.LA(1);

                         
                        int index187_185 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 373;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 401;}

                         
                        input.seek(index187_185);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA187_242 = input.LA(1);

                         
                        int index187_242 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 373;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 401;}

                         
                        input.seek(index187_242);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA187_243 = input.LA(1);

                         
                        int index187_243 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 373;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 401;}

                         
                        input.seek(index187_243);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA187_244 = input.LA(1);

                         
                        int index187_244 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 373;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 401;}

                         
                        input.seek(index187_244);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA187_286 = input.LA(1);

                         
                        int index187_286 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 373;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 401;}

                         
                        input.seek(index187_286);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA187_287 = input.LA(1);

                         
                        int index187_287 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 373;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 401;}

                         
                        input.seek(index187_287);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA187_288 = input.LA(1);

                         
                        int index187_288 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 373;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 401;}

                         
                        input.seek(index187_288);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA187_316 = input.LA(1);

                         
                        int index187_316 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 373;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 401;}

                         
                        input.seek(index187_316);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA187_317 = input.LA(1);

                         
                        int index187_317 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 373;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 401;}

                         
                        input.seek(index187_317);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA187_318 = input.LA(1);

                         
                        int index187_318 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 373;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 401;}

                         
                        input.seek(index187_318);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA187_362 = input.LA(1);

                         
                        int index187_362 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 373;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 401;}

                         
                        input.seek(index187_362);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA187_363 = input.LA(1);

                         
                        int index187_363 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 373;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 401;}

                         
                        input.seek(index187_363);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA187_364 = input.LA(1);

                         
                        int index187_364 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 373;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 401;}

                         
                        input.seek(index187_364);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 187, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA201_eotS =
        "\u0187\uffff";
    static final String DFA201_eofS =
        "\1\47\4\uffff\1\1\34\uffff\2\1\1\uffff\2\1\u0160\uffff";
    static final String DFA201_minS =
        "\1\5\4\uffff\1\6\34\uffff\2\6\1\uffff\2\6\u0160\uffff";
    static final String DFA201_maxS =
        "\1\u00fe\4\uffff\1\u00fd\34\uffff\2\u00fd\1\uffff\1\u00fd\1\u00fe"+
        "\u0160\uffff";
    static final String DFA201_acceptS =
        "\1\uffff\1\1\45\uffff\1\2\u015f\uffff";
    static final String DFA201_specialS =
        "\u0187\uffff}>";
    static final String[] DFA201_transitionS = {
            "\1\1\4\47\1\5\3\47\1\1\2\47\11\1\3\uffff\5\47\1\1\1\47\1\46"+
            "\1\42\1\43\1\45\1\uffff\1\47\1\uffff\2\47\4\uffff\1\47\3\1\2"+
            "\uffff\3\47\3\uffff\10\1\1\uffff\4\1\2\uffff\1\1\1\uffff\3\1"+
            "\6\uffff\3\47\6\uffff\1\47\175\uffff\1\47\1\1\10\47\2\uffff"+
            "\16\47\1\uffff\1\47\2\uffff\2\47\1\1",
            "",
            "",
            "",
            "",
            "\10\1\1\uffff\2\1\14\uffff\5\1\1\uffff\5\1\1\uffff\1\1\1\uffff"+
            "\2\1\4\uffff\1\1\5\uffff\3\1\35\uffff\3\1\6\uffff\1\1\175\uffff"+
            "\1\1\1\uffff\10\1\2\47\16\1\1\uffff\1\1\2\uffff\2\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\10\1\1\uffff\2\1\14\uffff\5\1\1\47\5\1\1\uffff\1\1\1\uffff"+
            "\2\1\4\uffff\1\1\5\uffff\3\1\35\uffff\3\1\6\uffff\1\1\175\uffff"+
            "\1\1\1\uffff\10\1\2\uffff\16\1\1\uffff\1\1\2\uffff\2\1",
            "\10\1\1\uffff\2\1\14\uffff\5\1\1\47\5\1\1\uffff\1\1\1\uffff"+
            "\2\1\4\uffff\1\1\5\uffff\3\1\35\uffff\3\1\6\uffff\1\1\175\uffff"+
            "\1\1\1\uffff\10\1\2\uffff\16\1\1\uffff\1\1\2\uffff\2\1",
            "",
            "\10\1\1\uffff\2\1\14\uffff\5\1\1\47\5\1\1\uffff\1\1\1\uffff"+
            "\2\1\4\uffff\1\1\5\uffff\3\1\35\uffff\3\1\6\uffff\1\1\175\uffff"+
            "\1\1\1\uffff\10\1\2\uffff\16\1\1\uffff\1\1\2\uffff\2\1",
            "\10\1\1\uffff\2\1\14\uffff\5\1\1\uffff\5\1\1\uffff\1\1\1\uffff"+
            "\2\1\4\uffff\1\1\5\uffff\3\1\6\uffff\2\47\25\uffff\3\1\6\uffff"+
            "\1\1\175\uffff\1\1\1\47\10\1\2\uffff\16\1\1\uffff\1\1\2\uffff"+
            "\2\1\1\47",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA201_eot = DFA.unpackEncodedString(DFA201_eotS);
    static final short[] DFA201_eof = DFA.unpackEncodedString(DFA201_eofS);
    static final char[] DFA201_min = DFA.unpackEncodedStringToUnsignedChars(DFA201_minS);
    static final char[] DFA201_max = DFA.unpackEncodedStringToUnsignedChars(DFA201_maxS);
    static final short[] DFA201_accept = DFA.unpackEncodedString(DFA201_acceptS);
    static final short[] DFA201_special = DFA.unpackEncodedString(DFA201_specialS);
    static final short[][] DFA201_transition;

    static {
        int numStates = DFA201_transitionS.length;
        DFA201_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA201_transition[i] = DFA.unpackEncodedString(DFA201_transitionS[i]);
        }
    }

    class DFA201 extends DFA {

        public DFA201(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 201;
            this.eot = DFA201_eot;
            this.eof = DFA201_eof;
            this.min = DFA201_min;
            this.max = DFA201_max;
            this.accept = DFA201_accept;
            this.special = DFA201_special;
            this.transition = DFA201_transition;
        }
        public String getDescription() {
            return "1315:24: (ipi2= keywordAllowedIdent )?";
        }
    }
 

    public static final BitSet FOLLOW_annotations_in_startPatternExpressionRule1369 = new BitSet(new long[]{0x0000000000006000L,0x0000000000000000L,0x0000000000000000L,0x4000002480000000L});
    public static final BitSet FOLLOW_patternExpression_in_startPatternExpressionRule1375 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_startPatternExpressionRule1379 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotations_in_startEPLExpressionRule1393 = new BitSet(new long[]{0x0020010004000010L});
    public static final BitSet FOLLOW_eplExpression_in_startEPLExpressionRule1399 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_startEPLExpressionRule1403 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventProperty_in_startEventPropertyRule1428 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_startEventPropertyRule1432 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotation_in_annotations1452 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_EMAILAT_in_annotation1472 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000080000000L});
    public static final BitSet FOLLOW_classIdentifier_in_annotation1474 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_LPAREN_in_annotation1478 = new BitSet(new long[]{0x0000000000000000L,0x00000000E0000000L,0x0000000000000000L,0x8530030890000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_elementValuePairs_in_annotation1482 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_elementValue_in_annotation1486 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_RPAREN_in_annotation1491 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_elementValuePair_in_elementValuePairs1532 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_COMMA_in_elementValuePairs1535 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_elementValuePair_in_elementValuePairs1538 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_IDENT_in_elementValuePair1561 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_EQUALS_in_elementValuePair1563 = new BitSet(new long[]{0x0000000000000000L,0x00000000E0000000L,0x0000000000000000L,0x8530030010000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_elementValue_in_elementValuePair1565 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotation_in_elementValue1600 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_elementValueArrayInitializer_in_elementValue1611 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constant_in_elementValue1624 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCURLY_in_elementValueArrayInitializer1647 = new BitSet(new long[]{0x0000000000000000L,0x00000000E0000000L,0x0000000000000000L,0x8730030050000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_elementValue_in_elementValueArrayInitializer1650 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000040000000L});
    public static final BitSet FOLLOW_COMMA_in_elementValueArrayInitializer1653 = new BitSet(new long[]{0x0000000000000000L,0x00000000E0000000L,0x0000000000000000L,0x8530030010000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_elementValue_in_elementValueArrayInitializer1655 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000040000000L});
    public static final BitSet FOLLOW_COMMA_in_elementValueArrayInitializer1662 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_RCURLY_in_elementValueArrayInitializer1666 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_selectExpr_in_eplExpression1698 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_createWindowExpr_in_eplExpression1703 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_createVariableExpr_in_eplExpression1708 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_onExpr_in_eplExpression1713 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSERT_in_selectExpr1726 = new BitSet(new long[]{0x0C40000000000000L});
    public static final BitSet FOLLOW_insertIntoExpr_in_selectExpr1729 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_SELECT_in_selectExpr1735 = new BitSet(new long[]{0xFC1C00F40BFE6420L,0x00000000E001D7FFL,0x0000000000000000L,0xD530031490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_selectClause_in_selectExpr1738 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_FROM_in_selectExpr1742 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000003L,0x0000000000000000L,0x4000000080000000L});
    public static final BitSet FOLLOW_fromClause_in_selectExpr1745 = new BitSet(new long[]{0x0082180000008002L,0x0000000100000000L});
    public static final BitSet FOLLOW_WHERE_in_selectExpr1750 = new BitSet(new long[]{0xFC1C00F40BFE6420L,0x00000000E001D7FFL,0x0000000000000000L,0xD530031490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_whereClause_in_selectExpr1753 = new BitSet(new long[]{0x0082180000000002L,0x0000000100000000L});
    public static final BitSet FOLLOW_GROUP_in_selectExpr1760 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_BY_in_selectExpr1763 = new BitSet(new long[]{0xFC1C00F40BFE6420L,0x00000000E001D7FFL,0x0000000000000000L,0xD530031490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_groupByListExpr_in_selectExpr1766 = new BitSet(new long[]{0x0082100000000002L,0x0000000100000000L});
    public static final BitSet FOLLOW_HAVING_in_selectExpr1773 = new BitSet(new long[]{0xFC1C00F40BFE6420L,0x00000000E001D7FFL,0x0000000000000000L,0xD530031490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_havingClause_in_selectExpr1776 = new BitSet(new long[]{0x0082000000000002L,0x0000000100000000L});
    public static final BitSet FOLLOW_OUTPUT_in_selectExpr1783 = new BitSet(new long[]{0x0018400040004000L,0x0000000000011000L});
    public static final BitSet FOLLOW_outputLimit_in_selectExpr1786 = new BitSet(new long[]{0x0080000000000002L,0x0000000100000000L});
    public static final BitSet FOLLOW_ORDER_in_selectExpr1793 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_BY_in_selectExpr1796 = new BitSet(new long[]{0xFC1C00F40BFE6420L,0x00000000E001D7FFL,0x0000000000000000L,0xD530031490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_orderByListExpr_in_selectExpr1799 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L});
    public static final BitSet FOLLOW_ROW_LIMIT_EXPR_in_selectExpr1806 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8430000090000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_rowLimit_in_selectExpr1809 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ON_in_onExpr1824 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L,0x0000000000000000L,0x4000000080000000L});
    public static final BitSet FOLLOW_eventFilterExpression_in_onExpr1827 = new BitSet(new long[]{0x0020000004010000L,0x0000000000002800L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_patternInclusionExpression_in_onExpr1831 = new BitSet(new long[]{0x0020000004010000L,0x0000000000002800L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_AS_in_onExpr1835 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_IDENT_in_onExpr1839 = new BitSet(new long[]{0x0020000004010000L,0x0000000000002800L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_IDENT_in_onExpr1845 = new BitSet(new long[]{0x0020000004010000L,0x0000000000002800L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_onDeleteExpr_in_onExpr1853 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_onSelectExpr_in_onExpr1857 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_onSetExpr_in_onExpr1861 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSERT_in_onSelectExpr1914 = new BitSet(new long[]{0x0C40000000000000L});
    public static final BitSet FOLLOW_insertIntoExpr_in_onSelectExpr1916 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_SELECT_in_onSelectExpr1922 = new BitSet(new long[]{0xFC1C00F40BFE6420L,0x00000000E001D7FFL,0x0000000000000000L,0xD530031490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_selectionList_in_onSelectExpr1924 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_onExprFrom_in_onSelectExpr1928 = new BitSet(new long[]{0x0080180000008002L});
    public static final BitSet FOLLOW_WHERE_in_onSelectExpr1933 = new BitSet(new long[]{0xFC1C00F40BFE6420L,0x00000000E001D7FFL,0x0000000000000000L,0xD530031490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_whereClause_in_onSelectExpr1935 = new BitSet(new long[]{0x0080180000000002L});
    public static final BitSet FOLLOW_GROUP_in_onSelectExpr1944 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_BY_in_onSelectExpr1946 = new BitSet(new long[]{0xFC1C00F40BFE6420L,0x00000000E001D7FFL,0x0000000000000000L,0xD530031490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_groupByListExpr_in_onSelectExpr1948 = new BitSet(new long[]{0x0080100000000002L});
    public static final BitSet FOLLOW_HAVING_in_onSelectExpr1955 = new BitSet(new long[]{0xFC1C00F40BFE6420L,0x00000000E001D7FFL,0x0000000000000000L,0xD530031490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_havingClause_in_onSelectExpr1957 = new BitSet(new long[]{0x0080000000000002L});
    public static final BitSet FOLLOW_ORDER_in_onSelectExpr1964 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_BY_in_onSelectExpr1966 = new BitSet(new long[]{0xFC1C00F40BFE6420L,0x00000000E001D7FFL,0x0000000000000000L,0xD530031490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_orderByListExpr_in_onSelectExpr1968 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DELETE_in_onDeleteExpr2021 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_onExprFrom_in_onDeleteExpr2025 = new BitSet(new long[]{0x0000000000008002L});
    public static final BitSet FOLLOW_WHERE_in_onDeleteExpr2030 = new BitSet(new long[]{0xFC1C00F40BFE6420L,0x00000000E001D7FFL,0x0000000000000000L,0xD530031490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_whereClause_in_onDeleteExpr2032 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SET_in_onSetExpr2072 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_onSetAssignment_in_onSetExpr2074 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_COMMA_in_onSetExpr2077 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_onSetAssignment_in_onSetExpr2079 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_IDENT_in_onSetAssignment2104 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_EQUALS_in_onSetAssignment2106 = new BitSet(new long[]{0xFC1C00F40BFE6420L,0x00000000E001D7FFL,0x0000000000000000L,0xD530031490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expression_in_onSetAssignment2109 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FROM_in_onExprFrom2122 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_IDENT_in_onExprFrom2126 = new BitSet(new long[]{0x0000000000010002L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_AS_in_onExprFrom2129 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_IDENT_in_onExprFrom2133 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_onExprFrom2139 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CREATE_in_createWindowExpr2167 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_WINDOW_in_createWindowExpr2169 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_IDENT_in_createWindowExpr2173 = new BitSet(new long[]{0xC000000004010000L,0x0000000000000000L,0x0000000000000000L,0x4000000680000000L});
    public static final BitSet FOLLOW_DOT_in_createWindowExpr2176 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_viewExpression_in_createWindowExpr2178 = new BitSet(new long[]{0xC000000004010000L,0x0000000000000000L,0x0000000000000000L,0x4000000680000000L});
    public static final BitSet FOLLOW_DOT_in_createWindowExpr2181 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_viewExpression_in_createWindowExpr2183 = new BitSet(new long[]{0xC000000004010000L,0x0000000000000000L,0x0000000000000000L,0x4000000680000000L});
    public static final BitSet FOLLOW_RETAINUNION_in_createWindowExpr2192 = new BitSet(new long[]{0x0000000004010000L,0x0000000000000000L,0x0000000000000000L,0x4000000480000000L});
    public static final BitSet FOLLOW_RETAININTERSECTION_in_createWindowExpr2196 = new BitSet(new long[]{0x0000000004010000L,0x0000000000000000L,0x0000000000000000L,0x4000000480000000L});
    public static final BitSet FOLLOW_AS_in_createWindowExpr2200 = new BitSet(new long[]{0x0000000004000000L,0x0000000000000000L,0x0000000000000000L,0x4000000480000000L});
    public static final BitSet FOLLOW_createWindowExprModelAfter_in_createWindowExpr2215 = new BitSet(new long[]{0x0020000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_createWindowExpr2230 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_createWindowColumnList_in_createWindowExpr2232 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_RPAREN_in_createWindowExpr2234 = new BitSet(new long[]{0x0020000000000002L});
    public static final BitSet FOLLOW_INSERT_in_createWindowExpr2251 = new BitSet(new long[]{0x0000000000008002L});
    public static final BitSet FOLLOW_WHERE_in_createWindowExpr2254 = new BitSet(new long[]{0xFC1C00F40BFE6420L,0x00000000E001D7FFL,0x0000000000000000L,0xD530031490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expression_in_createWindowExpr2256 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SELECT_in_createWindowExprModelAfter2343 = new BitSet(new long[]{0xE01C00F403FE4420L,0x00000000E001D3DFL,0x0000000000000000L,0xC530031090000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_createSelectionList_in_createWindowExprModelAfter2346 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_FROM_in_createWindowExprModelAfter2348 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000080000000L});
    public static final BitSet FOLLOW_classIdentifier_in_createWindowExprModelAfter2353 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CREATE_in_createVariableExpr2366 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_VARIABLE_in_createVariableExpr2368 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_IDENT_in_createVariableExpr2372 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_IDENT_in_createVariableExpr2376 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_EQUALS_in_createVariableExpr2379 = new BitSet(new long[]{0xFC1C00F40BFE6420L,0x00000000E001D7FFL,0x0000000000000000L,0xD530031490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expression_in_createVariableExpr2381 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_createWindowColumnListElement_in_createWindowColumnList2424 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_COMMA_in_createWindowColumnList2427 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_createWindowColumnListElement_in_createWindowColumnList2429 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_IDENT_in_createWindowColumnListElement2459 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_IDENT_in_createWindowColumnListElement2463 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_createSelectionListElement_in_createSelectionList2501 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_COMMA_in_createSelectionList2504 = new BitSet(new long[]{0xE01C00F403FE4420L,0x00000000E001D3DFL,0x0000000000000000L,0xC530031090000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_createSelectionListElement_in_createSelectionList2506 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_STAR_in_createSelectionListElement2535 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventProperty_in_createSelectionListElement2547 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_AS_in_createSelectionListElement2550 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_IDENT_in_createSelectionListElement2554 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constant_in_createSelectionListElement2575 = new BitSet(new long[]{0x0000000000010000L});
    public static final BitSet FOLLOW_AS_in_createSelectionListElement2577 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_IDENT_in_createSelectionListElement2581 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ISTREAM_in_insertIntoExpr2620 = new BitSet(new long[]{0x0040000000000000L});
    public static final BitSet FOLLOW_RSTREAM_in_insertIntoExpr2626 = new BitSet(new long[]{0x0040000000000000L});
    public static final BitSet FOLLOW_INTO_in_insertIntoExpr2630 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_IDENT_in_insertIntoExpr2634 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_insertIntoColumnList_in_insertIntoExpr2637 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_insertIntoColumnList2671 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_IDENT_in_insertIntoColumnList2673 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000840000000L});
    public static final BitSet FOLLOW_COMMA_in_insertIntoColumnList2676 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_IDENT_in_insertIntoColumnList2678 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000840000000L});
    public static final BitSet FOLLOW_RPAREN_in_insertIntoColumnList2682 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_streamExpression_in_fromClause2717 = new BitSet(new long[]{0x000000F800000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_regularJoin_in_fromClause2720 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_outerJoinList_in_fromClause2724 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_regularJoin2738 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000003L,0x0000000000000000L,0x4000000080000000L});
    public static final BitSet FOLLOW_streamExpression_in_regularJoin2741 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_outerJoin_in_outerJoinList2755 = new BitSet(new long[]{0x000000F800000002L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_outerJoin_in_outerJoinList2758 = new BitSet(new long[]{0x000000F800000002L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_LEFT_in_outerJoin2801 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_RIGHT_in_outerJoin2805 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_FULL_in_outerJoin2809 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_OUTER_in_outerJoin2812 = new BitSet(new long[]{0x0000001000000000L});
    public static final BitSet FOLLOW_INNER_in_outerJoin2833 = new BitSet(new long[]{0x0000001000000000L});
    public static final BitSet FOLLOW_JOIN_in_outerJoin2847 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000003L,0x0000000000000000L,0x4000000080000000L});
    public static final BitSet FOLLOW_streamExpression_in_outerJoin2849 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_outerJoinIdent_in_outerJoin2851 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ON_in_outerJoinIdent2916 = new BitSet(new long[]{0xE01C00F403FE4420L,0x000000000001D3DFL,0x0000000000000000L,0x4000000080000000L});
    public static final BitSet FOLLOW_outerJoinIdentPair_in_outerJoinIdent2919 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_AND_EXPR_in_outerJoinIdent2922 = new BitSet(new long[]{0xE01C00F403FE4420L,0x000000000001D3DFL,0x0000000000000000L,0x4000000080000000L});
    public static final BitSet FOLLOW_outerJoinIdentPair_in_outerJoinIdent2925 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_eventProperty_in_outerJoinIdentPair2940 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_EQUALS_in_outerJoinIdentPair2942 = new BitSet(new long[]{0xE01C00F403FE4420L,0x000000000001D3DFL,0x0000000000000000L,0x4000000080000000L});
    public static final BitSet FOLLOW_eventProperty_in_outerJoinIdentPair2945 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_evalOrExpression_in_whereClause2967 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RSTREAM_in_selectClause3003 = new BitSet(new long[]{0xFC1C00F40BFE6420L,0x00000000E001D7FFL,0x0000000000000000L,0xD530031490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_ISTREAM_in_selectClause3009 = new BitSet(new long[]{0xFC1C00F40BFE6420L,0x00000000E001D7FFL,0x0000000000000000L,0xD530031490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_IRSTREAM_in_selectClause3015 = new BitSet(new long[]{0xFC1C00F40BFE6420L,0x00000000E001D7FFL,0x0000000000000000L,0xD530031490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_selectionList_in_selectClause3019 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_selectionListElement_in_selectionList3046 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_COMMA_in_selectionList3049 = new BitSet(new long[]{0xFC1C00F40BFE6420L,0x00000000E001D7FFL,0x0000000000000000L,0xD530031490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_selectionListElement_in_selectionList3052 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_STAR_in_selectionListElement3078 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_streamSelector_in_selectionListElement3094 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_selectionListElement3099 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_AS_in_selectionListElement3102 = new BitSet(new long[]{0xE01C00F403FE4420L,0x000000000001D3DFL,0x0000000000000000L,0x4000000080000000L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_selectionListElement3106 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_streamSelector3162 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_DOT_in_streamSelector3164 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_STAR_in_streamSelector3166 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_AS_in_streamSelector3169 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_IDENT_in_streamSelector3173 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventFilterExpression_in_streamExpression3203 = new BitSet(new long[]{0xE000000000010002L,0x0000000000000000L,0x0000000000000000L,0x0000000280000000L});
    public static final BitSet FOLLOW_patternInclusionExpression_in_streamExpression3207 = new BitSet(new long[]{0xE000000000010002L,0x0000000000000000L,0x0000000000000000L,0x0000000280000000L});
    public static final BitSet FOLLOW_databaseJoinExpression_in_streamExpression3211 = new BitSet(new long[]{0xE000000000010002L,0x0000000000000000L,0x0000000000000000L,0x0000000280000000L});
    public static final BitSet FOLLOW_methodJoinExpression_in_streamExpression3215 = new BitSet(new long[]{0xE000000000010002L,0x0000000000000000L,0x0000000000000000L,0x0000000280000000L});
    public static final BitSet FOLLOW_DOT_in_streamExpression3221 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_viewExpression_in_streamExpression3223 = new BitSet(new long[]{0xE000000000010002L,0x0000000000000000L,0x0000000000000000L,0x0000000280000000L});
    public static final BitSet FOLLOW_DOT_in_streamExpression3226 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_viewExpression_in_streamExpression3228 = new BitSet(new long[]{0xE000000000010002L,0x0000000000000000L,0x0000000000000000L,0x0000000280000000L});
    public static final BitSet FOLLOW_AS_in_streamExpression3235 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_IDENT_in_streamExpression3239 = new BitSet(new long[]{0xE000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_streamExpression3245 = new BitSet(new long[]{0xE000000000000002L});
    public static final BitSet FOLLOW_UNIDIRECTIONAL_in_streamExpression3252 = new BitSet(new long[]{0xC000000000000002L});
    public static final BitSet FOLLOW_RETAINUNION_in_streamExpression3259 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETAININTERSECTION_in_streamExpression3263 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PATTERN_in_patternInclusionExpression3320 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_LBRACK_in_patternInclusionExpression3322 = new BitSet(new long[]{0x0000000000006000L,0x0000000000000000L,0x0000000000000000L,0x4000002480000000L});
    public static final BitSet FOLLOW_patternExpression_in_patternInclusionExpression3324 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_RBRACK_in_patternInclusionExpression3326 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL_in_databaseJoinExpression3359 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_COLON_in_databaseJoinExpression3361 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_IDENT_in_databaseJoinExpression3365 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_LBRACK_in_databaseJoinExpression3367 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000030000000000L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_databaseJoinExpression3372 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_QUOTED_STRING_LITERAL_in_databaseJoinExpression3378 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_METADATASQL_in_databaseJoinExpression3382 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000030000000000L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_databaseJoinExpression3387 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_QUOTED_STRING_LITERAL_in_databaseJoinExpression3393 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_RBRACK_in_databaseJoinExpression3398 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_methodJoinExpression3449 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_COLON_in_methodJoinExpression3451 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000080000000L});
    public static final BitSet FOLLOW_classIdentifier_in_methodJoinExpression3453 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_LPAREN_in_methodJoinExpression3456 = new BitSet(new long[]{0xFC1C00F40BFE6420L,0x00000000E001D7FFL,0x0000000000000000L,0xD530031C90000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expressionList_in_methodJoinExpression3458 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_RPAREN_in_methodJoinExpression3461 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_viewExpression3514 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_COLON_in_viewExpression3516 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_IDENT_in_viewExpression3520 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_LPAREN_in_viewExpression3522 = new BitSet(new long[]{0xFC1C00F40BFE6420L,0x00000000E001D7FFL,0x0000000000000000L,0xD530033C90000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expressionWithTimeList_in_viewExpression3524 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_RPAREN_in_viewExpression3527 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_groupByListExpr3566 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_COMMA_in_groupByListExpr3569 = new BitSet(new long[]{0xFC1C00F40BFE6420L,0x00000000E001D7FFL,0x0000000000000000L,0xD530031490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expression_in_groupByListExpr3571 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_orderByListElement_in_orderByListExpr3606 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_COMMA_in_orderByListExpr3609 = new BitSet(new long[]{0xFC1C00F40BFE6420L,0x00000000E001D7FFL,0x0000000000000000L,0xD530031490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_orderByListElement_in_orderByListExpr3611 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_expression_in_orderByListElement3636 = new BitSet(new long[]{0x0300000000000002L});
    public static final BitSet FOLLOW_ASC_in_orderByListElement3641 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DESC_in_orderByListElement3645 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_evalOrExpression_in_havingClause3683 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALL_in_outputLimit3721 = new BitSet(new long[]{0x0000000040004000L,0x0000000000010000L});
    public static final BitSet FOLLOW_FIRST_in_outputLimit3725 = new BitSet(new long[]{0x0000000040004000L,0x0000000000010000L});
    public static final BitSet FOLLOW_LAST_in_outputLimit3729 = new BitSet(new long[]{0x0000000040004000L,0x0000000000010000L});
    public static final BitSet FOLLOW_SNAPSHOT_in_outputLimit3733 = new BitSet(new long[]{0x0000000040004000L,0x0000000000010000L});
    public static final BitSet FOLLOW_EVERY_EXPR_in_outputLimit3760 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x9430000090000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_timePeriod_in_outputLimit3782 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_outputLimit3791 = new BitSet(new long[]{0x0004000000000000L});
    public static final BitSet FOLLOW_IDENT_in_outputLimit3797 = new BitSet(new long[]{0x0004000000000000L});
    public static final BitSet FOLLOW_EVENTS_in_outputLimit3803 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AT_in_outputLimit3826 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_crontabLimitParameterSet_in_outputLimit3828 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHEN_in_outputLimit3842 = new BitSet(new long[]{0xFC1C00F40BFE6420L,0x00000000E001D7FFL,0x0000000000000000L,0xD530031490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expression_in_outputLimit3844 = new BitSet(new long[]{0x0000000080000002L});
    public static final BitSet FOLLOW_THEN_in_outputLimit3847 = new BitSet(new long[]{0x0020000004010000L,0x0000000000002800L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_onSetExpr_in_outputLimit3849 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberconstant_in_rowLimit3978 = new BitSet(new long[]{0x0000000000000002L,0x0000000200000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_IDENT_in_rowLimit3984 = new BitSet(new long[]{0x0000000000000002L,0x0000000200000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_COMMA_in_rowLimit3991 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8430000090000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_OFFSET_in_rowLimit3997 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8430000090000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_numberconstant_in_rowLimit4003 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_rowLimit4009 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_crontabLimitParameterSet4061 = new BitSet(new long[]{0xFC1C00F40BFE6420L,0x00000000E001D7FFL,0x0000000000000000L,0xD530033490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet4063 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_COMMA_in_crontabLimitParameterSet4065 = new BitSet(new long[]{0xFC1C00F40BFE6420L,0x00000000E001D7FFL,0x0000000000000000L,0xD530033490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet4067 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_COMMA_in_crontabLimitParameterSet4069 = new BitSet(new long[]{0xFC1C00F40BFE6420L,0x00000000E001D7FFL,0x0000000000000000L,0xD530033490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet4071 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_COMMA_in_crontabLimitParameterSet4073 = new BitSet(new long[]{0xFC1C00F40BFE6420L,0x00000000E001D7FFL,0x0000000000000000L,0xD530033490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet4075 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_COMMA_in_crontabLimitParameterSet4077 = new BitSet(new long[]{0xFC1C00F40BFE6420L,0x00000000E001D7FFL,0x0000000000000000L,0xD530033490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet4079 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000840000000L});
    public static final BitSet FOLLOW_COMMA_in_crontabLimitParameterSet4082 = new BitSet(new long[]{0xFC1C00F40BFE6420L,0x00000000E001D7FFL,0x0000000000000000L,0xD530033490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet4084 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_RPAREN_in_crontabLimitParameterSet4088 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHEN_in_whenClause4118 = new BitSet(new long[]{0xFC1C00F40BFE6420L,0x00000000E001D7FFL,0x0000000000000000L,0xD530031490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expression_in_whenClause4121 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_THEN_in_whenClause4123 = new BitSet(new long[]{0xFC1C00F40BFE6420L,0x00000000E001D7FFL,0x0000000000000000L,0xD530031490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expression_in_whenClause4126 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ELSE_in_elseClause4139 = new BitSet(new long[]{0xFC1C00F40BFE6420L,0x00000000E001D7FFL,0x0000000000000000L,0xD530031490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expression_in_elseClause4142 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_caseExpression_in_expression4155 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CASE_in_caseExpression4169 = new BitSet(new long[]{0x0000000040000000L});
    public static final BitSet FOLLOW_whenClause_in_caseExpression4172 = new BitSet(new long[]{0x0000000160000000L});
    public static final BitSet FOLLOW_elseClause_in_caseExpression4175 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_END_in_caseExpression4178 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CASE_in_caseExpression4189 = new BitSet(new long[]{0xFC1C00F40BFE6420L,0x00000000E001D7FFL,0x0000000000000000L,0xD530031490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expression_in_caseExpression4191 = new BitSet(new long[]{0x0000000040000000L});
    public static final BitSet FOLLOW_whenClause_in_caseExpression4193 = new BitSet(new long[]{0x0000000160000000L});
    public static final BitSet FOLLOW_elseClause_in_caseExpression4196 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_END_in_caseExpression4199 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_evalOrExpression_in_caseExpression4223 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_evalAndExpression_in_evalOrExpression4234 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_OR_EXPR_in_evalOrExpression4239 = new BitSet(new long[]{0xFC1C00F40BFE6420L,0x00000000E001D7FFL,0x0000000000000000L,0xD530031490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_evalAndExpression_in_evalOrExpression4241 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_bitWiseExpression_in_evalAndExpression4273 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_AND_EXPR_in_evalAndExpression4278 = new BitSet(new long[]{0xFC1C00F40BFE6420L,0x00000000E001D7FFL,0x0000000000000000L,0xD530031490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_bitWiseExpression_in_evalAndExpression4280 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_negatedExpression_in_bitWiseExpression4312 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x00001C0000000000L});
    public static final BitSet FOLLOW_BAND_in_bitWiseExpression4317 = new BitSet(new long[]{0xFC1C00F40BFE6420L,0x00000000E001D7FFL,0x0000000000000000L,0xD530031490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_BOR_in_bitWiseExpression4320 = new BitSet(new long[]{0xFC1C00F40BFE6420L,0x00000000E001D7FFL,0x0000000000000000L,0xD530031490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_BXOR_in_bitWiseExpression4323 = new BitSet(new long[]{0xFC1C00F40BFE6420L,0x00000000E001D7FFL,0x0000000000000000L,0xD530031490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_negatedExpression_in_bitWiseExpression4327 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x00001C0000000000L});
    public static final BitSet FOLLOW_evalEqualsExpression_in_negatedExpression4342 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_EXPR_in_negatedExpression4348 = new BitSet(new long[]{0xE01C00F403FE4420L,0x00000000E001D7FFL,0x0000000000000000L,0xD530030490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_evalEqualsExpression_in_negatedExpression4351 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_evalRelationalExpression_in_evalEqualsExpression4364 = new BitSet(new long[]{0x0000020000000002L,0x0000000000000000L,0x0000000000000000L,0x0000600100000000L});
    public static final BitSet FOLLOW_EQUALS_in_evalEqualsExpression4377 = new BitSet(new long[]{0xE01DC0F403FE4420L,0x00000000E001D7FFL,0x0000000000000000L,0xD530030490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_IS_in_evalEqualsExpression4395 = new BitSet(new long[]{0xE01DC0F403FE4420L,0x00000000E001D7FFL,0x0000000000000000L,0xD530030490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_IS_in_evalEqualsExpression4409 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_NOT_EXPR_in_evalEqualsExpression4411 = new BitSet(new long[]{0xE01DC0F403FE4420L,0x00000000E001D7FFL,0x0000000000000000L,0xD530030490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_SQL_NE_in_evalEqualsExpression4425 = new BitSet(new long[]{0xE01DC0F403FE4420L,0x00000000E001D7FFL,0x0000000000000000L,0xD530030490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_NOT_EQUAL_in_evalEqualsExpression4439 = new BitSet(new long[]{0xE01DC0F403FE4420L,0x00000000E001D7FFL,0x0000000000000000L,0xD530030490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_evalRelationalExpression_in_evalEqualsExpression4469 = new BitSet(new long[]{0x0000020000000002L,0x0000000000000000L,0x0000000000000000L,0x0000600100000000L});
    public static final BitSet FOLLOW_ANY_in_evalEqualsExpression4486 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_SOME_in_evalEqualsExpression4492 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_ALL_in_evalEqualsExpression4498 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_LPAREN_in_evalEqualsExpression4504 = new BitSet(new long[]{0xFC1C00F40BFE6420L,0x00000000E001D7FFL,0x0000000000000000L,0xD530031C90000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expressionList_in_evalEqualsExpression4506 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_RPAREN_in_evalEqualsExpression4509 = new BitSet(new long[]{0x0000020000000002L,0x0000000000000000L,0x0000000000000000L,0x0000600100000000L});
    public static final BitSet FOLLOW_subSelectGroupExpression_in_evalEqualsExpression4514 = new BitSet(new long[]{0x0000020000000002L,0x0000000000000000L,0x0000000000000000L,0x0000600100000000L});
    public static final BitSet FOLLOW_concatenationExpr_in_evalRelationalExpression4642 = new BitSet(new long[]{0x00000000000023C2L,0x0000000000000000L,0x0000000000000000L,0x0007800000000000L});
    public static final BitSet FOLLOW_LT_in_evalRelationalExpression4674 = new BitSet(new long[]{0xE01DC0F403FE4420L,0x00000000E001D7FFL,0x0000000000000000L,0xD530030490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_GT_in_evalRelationalExpression4678 = new BitSet(new long[]{0xE01DC0F403FE4420L,0x00000000E001D7FFL,0x0000000000000000L,0xD530030490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_LE_in_evalRelationalExpression4682 = new BitSet(new long[]{0xE01DC0F403FE4420L,0x00000000E001D7FFL,0x0000000000000000L,0xD530030490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_GE_in_evalRelationalExpression4686 = new BitSet(new long[]{0xE01DC0F403FE4420L,0x00000000E001D7FFL,0x0000000000000000L,0xD530030490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_concatenationExpr_in_evalRelationalExpression4710 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0007800000000000L});
    public static final BitSet FOLLOW_ANY_in_evalRelationalExpression4727 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_SOME_in_evalRelationalExpression4733 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_ALL_in_evalRelationalExpression4739 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_LPAREN_in_evalRelationalExpression4745 = new BitSet(new long[]{0xFC1C00F40BFE6420L,0x00000000E001D7FFL,0x0000000000000000L,0xD530031C90000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expressionList_in_evalRelationalExpression4747 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_RPAREN_in_evalRelationalExpression4750 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0007800000000000L});
    public static final BitSet FOLLOW_subSelectGroupExpression_in_evalRelationalExpression4755 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0007800000000000L});
    public static final BitSet FOLLOW_NOT_EXPR_in_evalRelationalExpression4851 = new BitSet(new long[]{0x00000000000003C0L});
    public static final BitSet FOLLOW_IN_SET_in_evalRelationalExpression4878 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002400000000L});
    public static final BitSet FOLLOW_LPAREN_in_evalRelationalExpression4890 = new BitSet(new long[]{0xFC1C00F40BFE6420L,0x00000000E001D7FFL,0x0000000000000000L,0xD530031490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_LBRACK_in_evalRelationalExpression4896 = new BitSet(new long[]{0xFC1C00F40BFE6420L,0x00000000E001D7FFL,0x0000000000000000L,0xD530031490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expression_in_evalRelationalExpression4899 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000000C840000000L});
    public static final BitSet FOLLOW_COLON_in_evalRelationalExpression4921 = new BitSet(new long[]{0xFC1C00F40BFE6420L,0x00000000E001D7FFL,0x0000000000000000L,0xD530031490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expression_in_evalRelationalExpression4924 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004800000000L});
    public static final BitSet FOLLOW_COMMA_in_evalRelationalExpression4950 = new BitSet(new long[]{0xFC1C00F40BFE6420L,0x00000000E001D7FFL,0x0000000000000000L,0xD530031490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expression_in_evalRelationalExpression4952 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004840000000L});
    public static final BitSet FOLLOW_RPAREN_in_evalRelationalExpression4978 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RBRACK_in_evalRelationalExpression4984 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IN_SET_in_evalRelationalExpression5107 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_inSubSelectQuery_in_evalRelationalExpression5109 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BETWEEN_in_evalRelationalExpression5155 = new BitSet(new long[]{0xE01C00F403FE4420L,0x00000000E001D7FFL,0x0000000000000000L,0xD530030490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_betweenList_in_evalRelationalExpression5157 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LIKE_in_evalRelationalExpression5207 = new BitSet(new long[]{0xE01C00F403FE4420L,0x00000000E001D7FFL,0x0000000000000000L,0xD530030490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_concatenationExpr_in_evalRelationalExpression5209 = new BitSet(new long[]{0x0000000000000402L});
    public static final BitSet FOLLOW_ESCAPE_in_evalRelationalExpression5212 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000030000000000L});
    public static final BitSet FOLLOW_stringconstant_in_evalRelationalExpression5214 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGEXP_in_evalRelationalExpression5266 = new BitSet(new long[]{0xE01C00F403FE4420L,0x00000000E001D7FFL,0x0000000000000000L,0xD530030490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_concatenationExpr_in_evalRelationalExpression5268 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subQueryExpr_in_inSubSelectQuery5330 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_additiveExpression_in_concatenationExpr5355 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_LOR_in_concatenationExpr5361 = new BitSet(new long[]{0xE01C00F403FE4420L,0x00000000E001D7FFL,0x0000000000000000L,0xD530030490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_additiveExpression_in_concatenationExpr5363 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_LOR_in_concatenationExpr5367 = new BitSet(new long[]{0xE01C00F403FE4420L,0x00000000E001D7FFL,0x0000000000000000L,0xD530030490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_additiveExpression_in_concatenationExpr5369 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_multiplyExpression_in_additiveExpression5410 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0030000000000000L});
    public static final BitSet FOLLOW_PLUS_in_additiveExpression5415 = new BitSet(new long[]{0xE01C00F403FE4420L,0x00000000E001D7FFL,0x0000000000000000L,0xD530030490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_MINUS_in_additiveExpression5418 = new BitSet(new long[]{0xE01C00F403FE4420L,0x00000000E001D7FFL,0x0000000000000000L,0xD530030490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_multiplyExpression_in_additiveExpression5422 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0030000000000000L});
    public static final BitSet FOLLOW_unaryExpression_in_multiplyExpression5436 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x00C0001000000000L});
    public static final BitSet FOLLOW_STAR_in_multiplyExpression5441 = new BitSet(new long[]{0xE01C00F403FE4420L,0x00000000E001D7FFL,0x0000000000000000L,0xD530030490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_DIV_in_multiplyExpression5444 = new BitSet(new long[]{0xE01C00F403FE4420L,0x00000000E001D7FFL,0x0000000000000000L,0xD530030490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_MOD_in_multiplyExpression5447 = new BitSet(new long[]{0xE01C00F403FE4420L,0x00000000E001D7FFL,0x0000000000000000L,0xD530030490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_unaryExpression_in_multiplyExpression5451 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x00C0001000000000L});
    public static final BitSet FOLLOW_MINUS_in_unaryExpression5466 = new BitSet(new long[]{0xE01C00F403FE4420L,0x000000000001D3DFL,0x0000000000000000L,0x4000000080000000L});
    public static final BitSet FOLLOW_eventProperty_in_unaryExpression5468 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constant_in_unaryExpression5481 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_substitution_in_unaryExpression5486 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_unaryExpression5491 = new BitSet(new long[]{0xFC1C00F40BFE6420L,0x00000000E001D7FFL,0x0000000000000000L,0xD530031490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expression_in_unaryExpression5494 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_RPAREN_in_unaryExpression5496 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventPropertyOrLibFunction_in_unaryExpression5502 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_builtinFunc_in_unaryExpression5514 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arrayExpression_in_unaryExpression5520 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subSelectExpression_in_unaryExpression5525 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_existsSubSelectExpression_in_unaryExpression5530 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subQueryExpr_in_subSelectExpression5547 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subQueryExpr_in_subSelectGroupExpression5569 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXISTS_in_existsSubSelectExpression5591 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_subQueryExpr_in_existsSubSelectExpression5593 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_subQueryExpr5626 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_SELECT_in_subQueryExpr5632 = new BitSet(new long[]{0xFC1C00F40BFE6420L,0x00000000E001D7FFL,0x0000000000000000L,0xD530031490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_selectionListElement_in_subQueryExpr5635 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_FROM_in_subQueryExpr5642 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000080000000L});
    public static final BitSet FOLLOW_subSelectFilterExpr_in_subQueryExpr5645 = new BitSet(new long[]{0x0000000000008000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_WHERE_in_subQueryExpr5653 = new BitSet(new long[]{0xFC1C00F40BFE6420L,0x00000000E001D7FFL,0x0000000000000000L,0xD530031490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_whereClause_in_subQueryExpr5656 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_RPAREN_in_subQueryExpr5665 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventFilterExpression_in_subSelectFilterExpr5689 = new BitSet(new long[]{0xC000000000010002L,0x0000000000000000L,0x0000000000000000L,0x0000000280000000L});
    public static final BitSet FOLLOW_DOT_in_subSelectFilterExpr5694 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_viewExpression_in_subSelectFilterExpr5696 = new BitSet(new long[]{0xC000000000010002L,0x0000000000000000L,0x0000000000000000L,0x0000000280000000L});
    public static final BitSet FOLLOW_DOT_in_subSelectFilterExpr5699 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_viewExpression_in_subSelectFilterExpr5701 = new BitSet(new long[]{0xC000000000010002L,0x0000000000000000L,0x0000000000000000L,0x0000000280000000L});
    public static final BitSet FOLLOW_AS_in_subSelectFilterExpr5708 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_IDENT_in_subSelectFilterExpr5712 = new BitSet(new long[]{0xC000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_subSelectFilterExpr5718 = new BitSet(new long[]{0xC000000000000002L});
    public static final BitSet FOLLOW_RETAINUNION_in_subSelectFilterExpr5725 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETAININTERSECTION_in_subSelectFilterExpr5729 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCURLY_in_arrayExpression5769 = new BitSet(new long[]{0xFC1C00F40BFE6420L,0x00000000E001D7FFL,0x0000000000000000L,0xD730031490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expression_in_arrayExpression5772 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000040000000L});
    public static final BitSet FOLLOW_COMMA_in_arrayExpression5775 = new BitSet(new long[]{0xFC1C00F40BFE6420L,0x00000000E001D7FFL,0x0000000000000000L,0xD530031490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expression_in_arrayExpression5777 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000040000000L});
    public static final BitSet FOLLOW_RCURLY_in_arrayExpression5784 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SUM_in_builtinFunc5807 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc5810 = new BitSet(new long[]{0xFC1C60F40BFE6420L,0x00000000E001D7FFL,0x0000000000000000L,0xD530031490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_ALL_in_builtinFunc5814 = new BitSet(new long[]{0xFC1C00F40BFE6420L,0x00000000E001D7FFL,0x0000000000000000L,0xD530031490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc5819 = new BitSet(new long[]{0xFC1C00F40BFE6420L,0x00000000E001D7FFL,0x0000000000000000L,0xD530031490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expression_in_builtinFunc5823 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc5825 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AVG_in_builtinFunc5831 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc5834 = new BitSet(new long[]{0xFC1C60F40BFE6420L,0x00000000E001D7FFL,0x0000000000000000L,0xD530031490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_ALL_in_builtinFunc5838 = new BitSet(new long[]{0xFC1C00F40BFE6420L,0x00000000E001D7FFL,0x0000000000000000L,0xD530031490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc5843 = new BitSet(new long[]{0xFC1C00F40BFE6420L,0x00000000E001D7FFL,0x0000000000000000L,0xD530031490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expression_in_builtinFunc5847 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc5849 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COUNT_in_builtinFunc5855 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc5858 = new BitSet(new long[]{0xFC1C60F40BFE6420L,0x00000000E001D7FFL,0x0000000000000000L,0xD530031490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_ALL_in_builtinFunc5870 = new BitSet(new long[]{0xFC1C00F40BFE6420L,0x00000000E001D7FFL,0x0000000000000000L,0xD530031490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc5875 = new BitSet(new long[]{0xFC1C00F40BFE6420L,0x00000000E001D7FFL,0x0000000000000000L,0xD530031490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expression_in_builtinFunc5879 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_STAR_in_builtinFunc5890 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc5901 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MEDIAN_in_builtinFunc5907 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc5910 = new BitSet(new long[]{0xFC1C60F40BFE6420L,0x00000000E001D7FFL,0x0000000000000000L,0xD530031490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_ALL_in_builtinFunc5914 = new BitSet(new long[]{0xFC1C00F40BFE6420L,0x00000000E001D7FFL,0x0000000000000000L,0xD530031490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc5919 = new BitSet(new long[]{0xFC1C00F40BFE6420L,0x00000000E001D7FFL,0x0000000000000000L,0xD530031490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expression_in_builtinFunc5923 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc5925 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STDDEV_in_builtinFunc5931 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc5934 = new BitSet(new long[]{0xFC1C60F40BFE6420L,0x00000000E001D7FFL,0x0000000000000000L,0xD530031490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_ALL_in_builtinFunc5938 = new BitSet(new long[]{0xFC1C00F40BFE6420L,0x00000000E001D7FFL,0x0000000000000000L,0xD530031490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc5943 = new BitSet(new long[]{0xFC1C00F40BFE6420L,0x00000000E001D7FFL,0x0000000000000000L,0xD530031490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expression_in_builtinFunc5947 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc5949 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AVEDEV_in_builtinFunc5955 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc5958 = new BitSet(new long[]{0xFC1C60F40BFE6420L,0x00000000E001D7FFL,0x0000000000000000L,0xD530031490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_ALL_in_builtinFunc5962 = new BitSet(new long[]{0xFC1C00F40BFE6420L,0x00000000E001D7FFL,0x0000000000000000L,0xD530031490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc5967 = new BitSet(new long[]{0xFC1C00F40BFE6420L,0x00000000E001D7FFL,0x0000000000000000L,0xD530031490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expression_in_builtinFunc5971 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc5973 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COALESCE_in_builtinFunc5979 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc5982 = new BitSet(new long[]{0xFC1C00F40BFE6420L,0x00000000E001D7FFL,0x0000000000000000L,0xD530031490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expression_in_builtinFunc5985 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc5987 = new BitSet(new long[]{0xFC1C00F40BFE6420L,0x00000000E001D7FFL,0x0000000000000000L,0xD530031490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expression_in_builtinFunc5990 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000840000000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc5993 = new BitSet(new long[]{0xFC1C00F40BFE6420L,0x00000000E001D7FFL,0x0000000000000000L,0xD530031490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expression_in_builtinFunc5996 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000840000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc6000 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PREVIOUS_in_builtinFunc6006 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc6009 = new BitSet(new long[]{0xFC1C00F40BFE6420L,0x00000000E001D7FFL,0x0000000000000000L,0xD530031490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expression_in_builtinFunc6012 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc6014 = new BitSet(new long[]{0xE01C00F403FE4420L,0x000000000001D3DFL,0x0000000000000000L,0x4000000080000000L});
    public static final BitSet FOLLOW_eventProperty_in_builtinFunc6017 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc6019 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRIOR_in_builtinFunc6025 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc6028 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_NUM_INT_in_builtinFunc6031 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc6033 = new BitSet(new long[]{0xE01C00F403FE4420L,0x000000000001D3DFL,0x0000000000000000L,0x4000000080000000L});
    public static final BitSet FOLLOW_eventProperty_in_builtinFunc6036 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc6038 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSTANCEOF_in_builtinFunc6048 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc6051 = new BitSet(new long[]{0xFC1C00F40BFE6420L,0x00000000E001D7FFL,0x0000000000000000L,0xD530031490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expression_in_builtinFunc6054 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc6056 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000080000000L});
    public static final BitSet FOLLOW_classIdentifier_in_builtinFunc6059 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000840000000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc6062 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000080000000L});
    public static final BitSet FOLLOW_classIdentifier_in_builtinFunc6065 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000840000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc6069 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CAST_in_builtinFunc6075 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc6078 = new BitSet(new long[]{0xFC1C00F40BFE6420L,0x00000000E001D7FFL,0x0000000000000000L,0xD530031490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expression_in_builtinFunc6081 = new BitSet(new long[]{0x0000000000010000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc6084 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000080000000L});
    public static final BitSet FOLLOW_AS_in_builtinFunc6089 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000080000000L});
    public static final BitSet FOLLOW_classIdentifier_in_builtinFunc6093 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc6095 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXISTS_in_builtinFunc6101 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc6104 = new BitSet(new long[]{0xE01C00F403FE4420L,0x000000000001D3DFL,0x0000000000000000L,0x4000000080000000L});
    public static final BitSet FOLLOW_eventProperty_in_builtinFunc6107 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc6109 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CURRENT_TIMESTAMP_in_builtinFunc6115 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc6119 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc6122 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MAX_in_maxFunc6138 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_MIN_in_maxFunc6143 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_LPAREN_in_maxFunc6147 = new BitSet(new long[]{0xFC1C00F40BFE6420L,0x00000000E001D7FFL,0x0000000000000000L,0xD530031490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expression_in_maxFunc6150 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000840000000L});
    public static final BitSet FOLLOW_COMMA_in_maxFunc6153 = new BitSet(new long[]{0xFC1C00F40BFE6420L,0x00000000E001D7FFL,0x0000000000000000L,0xD530031490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expression_in_maxFunc6156 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000840000000L});
    public static final BitSet FOLLOW_COMMA_in_maxFunc6159 = new BitSet(new long[]{0xFC1C00F40BFE6420L,0x00000000E001D7FFL,0x0000000000000000L,0xD530031490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expression_in_maxFunc6162 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000840000000L});
    public static final BitSet FOLLOW_RPAREN_in_maxFunc6169 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventProperty_in_eventPropertyOrLibFunction6188 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_libFunction_in_eventPropertyOrLibFunction6193 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classIdentifierNonGreedy_in_libFunction6206 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_DOT_in_libFunction6208 = new BitSet(new long[]{0xE01C00F403FE4420L,0x000000000001D3DFL,0x0000000000000000L,0x4000000080000000L});
    public static final BitSet FOLLOW_funcIdent_in_libFunction6212 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_LPAREN_in_libFunction6214 = new BitSet(new long[]{0xFC1C60F40BFE6420L,0x00000000E001D7FFL,0x0000000000000000L,0xD530031C90000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_libFunctionArgs_in_libFunction6217 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_RPAREN_in_libFunction6221 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_funcIdent6251 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MAX_in_funcIdent6258 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MIN_in_funcIdent6270 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALL_in_libFunctionArgs6288 = new BitSet(new long[]{0xFC1C00F40BFE6420L,0x00000000E001D7FFL,0x0000000000000000L,0xD530031490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_DISTINCT_in_libFunctionArgs6293 = new BitSet(new long[]{0xFC1C00F40BFE6420L,0x00000000E001D7FFL,0x0000000000000000L,0xD530031490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expression_in_libFunctionArgs6297 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_COMMA_in_libFunctionArgs6300 = new BitSet(new long[]{0xFC1C00F40BFE6420L,0x00000000E001D7FFL,0x0000000000000000L,0xD530031490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expression_in_libFunctionArgs6303 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_concatenationExpr_in_betweenList6317 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_AND_EXPR_in_betweenList6319 = new BitSet(new long[]{0xE01C00F403FE4420L,0x00000000E001D7FFL,0x0000000000000000L,0xD530030490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_concatenationExpr_in_betweenList6322 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_followedByExpression_in_patternExpression6350 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_orExpression_in_followedByExpression6362 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_FOLLOWED_BY_in_followedByExpression6367 = new BitSet(new long[]{0x0000000000006000L,0x0000000000000000L,0x0000000000000000L,0x4000002480000000L});
    public static final BitSet FOLLOW_orExpression_in_followedByExpression6369 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_andExpression_in_orExpression6408 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_OR_EXPR_in_orExpression6413 = new BitSet(new long[]{0x0000000000006000L,0x0000000000000000L,0x0000000000000000L,0x4000002480000000L});
    public static final BitSet FOLLOW_andExpression_in_orExpression6415 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_matchUntilExpression_in_andExpression6447 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_AND_EXPR_in_andExpression6452 = new BitSet(new long[]{0x0000000000006000L,0x0000000000000000L,0x0000000000000000L,0x4000002480000000L});
    public static final BitSet FOLLOW_matchUntilExpression_in_andExpression6454 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_matchUntilRange_in_matchUntilExpression6489 = new BitSet(new long[]{0x0000000000006000L,0x0000000000000000L,0x0000000000000000L,0x4000002480000000L});
    public static final BitSet FOLLOW_qualifyExpression_in_matchUntilExpression6493 = new BitSet(new long[]{0x0000000000000002L,0x0000000000008000L});
    public static final BitSet FOLLOW_UNTIL_in_matchUntilExpression6498 = new BitSet(new long[]{0x0000000000006000L,0x0000000000000000L,0x0000000000000000L,0x4000002480000000L});
    public static final BitSet FOLLOW_qualifyExpression_in_matchUntilExpression6500 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EVERY_EXPR_in_qualifyExpression6565 = new BitSet(new long[]{0x0000000000006000L,0x0000000000000000L,0x0000000000000000L,0x4000002480000000L});
    public static final BitSet FOLLOW_NOT_EXPR_in_qualifyExpression6571 = new BitSet(new long[]{0x0000000000006000L,0x0000000000000000L,0x0000000000000000L,0x4000002480000000L});
    public static final BitSet FOLLOW_matchUntilRange_in_qualifyExpression6577 = new BitSet(new long[]{0x0000000000006000L,0x0000000000000000L,0x0000000000000000L,0x4000002480000000L});
    public static final BitSet FOLLOW_guardPostFix_in_qualifyExpression6586 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_atomicExpression_in_guardPostFix6667 = new BitSet(new long[]{0x0000000000008002L});
    public static final BitSet FOLLOW_LPAREN_in_guardPostFix6673 = new BitSet(new long[]{0x0000000000006000L,0x0000000000000000L,0x0000000000000000L,0x4000002480000000L});
    public static final BitSet FOLLOW_patternExpression_in_guardPostFix6675 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_RPAREN_in_guardPostFix6677 = new BitSet(new long[]{0x0000000000008002L});
    public static final BitSet FOLLOW_WHERE_in_guardPostFix6683 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_guardExpression_in_guardPostFix6685 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_observerExpression_in_atomicExpression6727 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_patternFilterExpression_in_atomicExpression6731 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_observerExpression6746 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_COLON_in_observerExpression6748 = new BitSet(new long[]{0x0000000000000000L,0x0000000000010000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_IDENT_in_observerExpression6753 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_AT_in_observerExpression6759 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_LPAREN_in_observerExpression6762 = new BitSet(new long[]{0xFC1C00F40BFE6420L,0x00000000E001D7FFL,0x0000000000000000L,0xD530033C90000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expressionWithTimeList_in_observerExpression6764 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_RPAREN_in_observerExpression6767 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_guardExpression6816 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_COLON_in_guardExpression6818 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_IDENT_in_guardExpression6821 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_LPAREN_in_guardExpression6823 = new BitSet(new long[]{0xFC1C00F40BFE6420L,0x00000000E001D7FFL,0x0000000000000000L,0xD530033C90000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expressionWithTimeList_in_guardExpression6827 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_RPAREN_in_guardExpression6831 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACK_in_matchUntilRange6845 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000210000000L});
    public static final BitSet FOLLOW_NUM_INT_in_matchUntilRange6854 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000000C200000000L});
    public static final BitSet FOLLOW_DOT_in_matchUntilRange6862 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_DOT_in_matchUntilRange6864 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400004000000000L});
    public static final BitSet FOLLOW_NUM_INT_in_matchUntilRange6868 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_COLON_in_matchUntilRange6892 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_NUM_INT_in_matchUntilRange6896 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_NUM_DOUBLE_in_matchUntilRange6918 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004210000000L});
    public static final BitSet FOLLOW_DOT_in_matchUntilRange6950 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400004000000000L});
    public static final BitSet FOLLOW_NUM_INT_in_matchUntilRange6954 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_NUM_DOUBLE_in_matchUntilRange7014 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_DOT_in_matchUntilRange7051 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_DOT_in_matchUntilRange7053 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_NUM_INT_in_matchUntilRange7057 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_DOT_in_matchUntilRange7066 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_NUM_DOUBLE_in_matchUntilRange7070 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_RBRACK_in_matchUntilRange7081 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_eventFilterExpression7266 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_EQUALS_in_eventFilterExpression7268 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000080000000L});
    public static final BitSet FOLLOW_classIdentifier_in_eventFilterExpression7277 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000002400000000L});
    public static final BitSet FOLLOW_LPAREN_in_eventFilterExpression7288 = new BitSet(new long[]{0xFC1C00F40BFE6420L,0x00000000E001D7FFL,0x0000000000000000L,0xD530031C90000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expressionList_in_eventFilterExpression7290 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_RPAREN_in_eventFilterExpression7293 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_propertyExpression_in_eventFilterExpression7305 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyExpressionAtomic_in_propertyExpression7350 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_propertyExpressionAtomic_in_propertyExpression7353 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_LBRACK_in_propertyExpressionAtomic7383 = new BitSet(new long[]{0xE01C00F407FE4420L,0x000000000001D3DFL,0x0000000000000000L,0x4000000080000000L});
    public static final BitSet FOLLOW_SELECT_in_propertyExpressionAtomic7386 = new BitSet(new long[]{0xFC1C00F40BFE6420L,0x00000000E001D7FFL,0x0000000000000000L,0xD530031490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_propertySelectionList_in_propertyExpressionAtomic7388 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_FROM_in_propertyExpressionAtomic7390 = new BitSet(new long[]{0xE01C00F403FE4420L,0x000000000001D3DFL,0x0000000000000000L,0x4000000080000000L});
    public static final BitSet FOLLOW_eventProperty_in_propertyExpressionAtomic7394 = new BitSet(new long[]{0x0000000000018000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_AS_in_propertyExpressionAtomic7397 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_IDENT_in_propertyExpressionAtomic7399 = new BitSet(new long[]{0x0000000000008000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_WHERE_in_propertyExpressionAtomic7404 = new BitSet(new long[]{0xFC1C00F40BFE6420L,0x00000000E001D7FFL,0x0000000000000000L,0xD530031490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expression_in_propertyExpressionAtomic7406 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_RBRACK_in_propertyExpressionAtomic7410 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertySelectionListElement_in_propertySelectionList7460 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_COMMA_in_propertySelectionList7463 = new BitSet(new long[]{0xFC1C00F40BFE6420L,0x00000000E001D7FFL,0x0000000000000000L,0xD530031490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_propertySelectionListElement_in_propertySelectionList7466 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_STAR_in_propertySelectionListElement7492 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyStreamSelector_in_propertySelectionListElement7508 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_propertySelectionListElement7513 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_AS_in_propertySelectionListElement7516 = new BitSet(new long[]{0xE01C00F403FE4420L,0x000000000001D3DFL,0x0000000000000000L,0x4000000080000000L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_propertySelectionListElement7520 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_propertyStreamSelector7564 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_DOT_in_propertyStreamSelector7566 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_STAR_in_propertyStreamSelector7568 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_AS_in_propertyStreamSelector7571 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_IDENT_in_propertyStreamSelector7575 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_patternFilterExpression7622 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_EQUALS_in_patternFilterExpression7624 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000080000000L});
    public static final BitSet FOLLOW_classIdentifier_in_patternFilterExpression7633 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000002400000000L});
    public static final BitSet FOLLOW_LPAREN_in_patternFilterExpression7644 = new BitSet(new long[]{0xFC1C00F40BFE6420L,0x00000000E001D7FFL,0x0000000000000000L,0xD530031C90000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expressionList_in_patternFilterExpression7646 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_RPAREN_in_patternFilterExpression7649 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_propertyExpression_in_patternFilterExpression7661 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_escapableIdent_in_classIdentifier7711 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_DOT_in_classIdentifier7730 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000080000000L});
    public static final BitSet FOLLOW_escapableIdent_in_classIdentifier7734 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_escapableIdent_in_classIdentifierNonGreedy7779 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_DOT_in_classIdentifierNonGreedy7814 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000080000000L});
    public static final BitSet FOLLOW_escapableIdent_in_classIdentifierNonGreedy7818 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_expression_in_expressionList7860 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_COMMA_in_expressionList7863 = new BitSet(new long[]{0xFC1C00F40BFE6420L,0x00000000E001D7FFL,0x0000000000000000L,0xD530031490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expression_in_expressionList7866 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_expressionWithTime_in_expressionWithTimeList7894 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_COMMA_in_expressionWithTimeList7897 = new BitSet(new long[]{0xFC1C00F40BFE6420L,0x00000000E001D7FFL,0x0000000000000000L,0xD530033490000000L,0x0000000000400001L});
    public static final BitSet FOLLOW_expressionWithTime_in_expressionWithTimeList7900 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_lastOperand_in_expressionWithTime7926 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastWeekdayOperand_in_expressionWithTime7937 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_timePeriod_in_expressionWithTime7948 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expressionQualifyable_in_expressionWithTime7959 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rangeOperand_in_expressionWithTime7970 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_frequencyOperand_in_expressionWithTime7982 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastOperator_in_expressionWithTime7993 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_weekDayOperator_in_expressionWithTime8005 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numericParameterList_in_expressionWithTime8017 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberSetStar_in_expressionWithTime8022 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_expressionQualifyable8033 = new BitSet(new long[]{0x0300000000000002L,0x0000000003800000L});
    public static final BitSet FOLLOW_ASC_in_expressionQualifyable8038 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DESC_in_expressionQualifyable8042 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_SECONDS_in_expressionQualifyable8046 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_SECOND_in_expressionQualifyable8050 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_SEC_in_expressionQualifyable8054 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_numberSetStar8111 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LW_in_lastWeekdayOperand8131 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LAST_in_lastOperand8144 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_frequencyOperand8156 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_DIV_in_frequencyOperand8158 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x9430000090000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_number_in_frequencyOperand8161 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_frequencyOperand8165 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_substitution_in_frequencyOperand8167 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_rangeOperand8216 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_IDENT_in_rangeOperand8220 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_substitution_in_rangeOperand8222 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_COLON_in_rangeOperand8225 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x9430000090000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_number_in_rangeOperand8228 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_rangeOperand8232 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_substitution_in_rangeOperand8234 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_lastOperator8348 = new BitSet(new long[]{0x0010000000000000L});
    public static final BitSet FOLLOW_IDENT_in_lastOperator8352 = new BitSet(new long[]{0x0010000000000000L});
    public static final BitSet FOLLOW_substitution_in_lastOperator8354 = new BitSet(new long[]{0x0010000000000000L});
    public static final BitSet FOLLOW_LAST_in_lastOperator8357 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_weekDayOperator8405 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_IDENT_in_weekDayOperator8409 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_substitution_in_weekDayOperator8411 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_WEEKDAY_in_weekDayOperator8414 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACK_in_numericParameterList8461 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x9430001090000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_numericListParameter_in_numericParameterList8463 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004040000000L});
    public static final BitSet FOLLOW_COMMA_in_numericParameterList8466 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x9430001090000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_numericListParameter_in_numericParameterList8468 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004040000000L});
    public static final BitSet FOLLOW_RBRACK_in_numericParameterList8472 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rangeOperand_in_numericListParameter8494 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_frequencyOperand_in_numericListParameter8500 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberconstant_in_numericListParameter8505 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventPropertyAtomic_in_eventProperty8521 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_DOT_in_eventProperty8524 = new BitSet(new long[]{0xE01C00F403FE4420L,0x000000000001D3DFL,0x0000000000000000L,0x4000000080000000L});
    public static final BitSet FOLLOW_eventPropertyAtomic_in_eventProperty8526 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_eventPropertyIdent_in_eventPropertyAtomic8552 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x1000002400000000L});
    public static final BitSet FOLLOW_LBRACK_in_eventPropertyAtomic8561 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_NUM_INT_in_eventPropertyAtomic8565 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_RBRACK_in_eventPropertyAtomic8567 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_QUESTION_in_eventPropertyAtomic8572 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_eventPropertyAtomic8586 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000030000000000L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_eventPropertyAtomic8591 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_QUOTED_STRING_LITERAL_in_eventPropertyAtomic8597 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_RPAREN_in_eventPropertyAtomic8600 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_QUESTION_in_eventPropertyAtomic8605 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUESTION_in_eventPropertyAtomic8619 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_eventPropertyIdent8742 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_ESCAPECHAR_in_eventPropertyIdent8754 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_DOT_in_eventPropertyIdent8756 = new BitSet(new long[]{0xE01C00F403FE4422L,0x000000000001D3DFL,0x0000000000000000L,0x6000000080000000L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_eventPropertyIdent8760 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_IDENT_in_keywordAllowedIdent8799 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TICKED_STRING_LITERAL_in_keywordAllowedIdent8808 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AT_in_keywordAllowedIdent8815 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COUNT_in_keywordAllowedIdent8822 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ESCAPE_in_keywordAllowedIdent8829 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EVERY_EXPR_in_keywordAllowedIdent8840 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SUM_in_keywordAllowedIdent8847 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AVG_in_keywordAllowedIdent8854 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MAX_in_keywordAllowedIdent8861 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MIN_in_keywordAllowedIdent8868 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COALESCE_in_keywordAllowedIdent8875 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MEDIAN_in_keywordAllowedIdent8882 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STDDEV_in_keywordAllowedIdent8889 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AVEDEV_in_keywordAllowedIdent8896 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EVENTS_in_keywordAllowedIdent8903 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FIRST_in_keywordAllowedIdent8910 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LAST_in_keywordAllowedIdent8917 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNIDIRECTIONAL_in_keywordAllowedIdent8924 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETAINUNION_in_keywordAllowedIdent8931 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETAININTERSECTION_in_keywordAllowedIdent8938 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNTIL_in_keywordAllowedIdent8945 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PATTERN_in_keywordAllowedIdent8952 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL_in_keywordAllowedIdent8959 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_METADATASQL_in_keywordAllowedIdent8966 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PREVIOUS_in_keywordAllowedIdent8973 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRIOR_in_keywordAllowedIdent8980 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WEEKDAY_in_keywordAllowedIdent8987 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LW_in_keywordAllowedIdent8994 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSTANCEOF_in_keywordAllowedIdent9001 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CAST_in_keywordAllowedIdent9008 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SNAPSHOT_in_keywordAllowedIdent9015 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VARIABLE_in_keywordAllowedIdent9022 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WINDOW_in_keywordAllowedIdent9031 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_in_keywordAllowedIdent9038 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RIGHT_in_keywordAllowedIdent9045 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OUTER_in_keywordAllowedIdent9052 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FULL_in_keywordAllowedIdent9059 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_JOIN_in_keywordAllowedIdent9066 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_escapableIdent9087 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TICKED_STRING_LITERAL_in_escapableIdent9096 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dayPart_in_timePeriod9119 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x9430000090000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_hourPart_in_timePeriod9121 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x9430000090000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_minutePart_in_timePeriod9124 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x9430000090000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_secondPart_in_timePeriod9127 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x9430000090000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod9130 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_hourPart_in_timePeriod9136 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x9430000090000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_minutePart_in_timePeriod9138 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x9430000090000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_secondPart_in_timePeriod9141 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x9430000090000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod9144 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_minutePart_in_timePeriod9150 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x9430000090000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_secondPart_in_timePeriod9152 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x9430000090000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod9155 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_secondPart_in_timePeriod9161 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x9430000090000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod9163 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod9169 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_dayPart9207 = new BitSet(new long[]{0x0000000000000000L,0x0000000000060000L});
    public static final BitSet FOLLOW_IDENT_in_dayPart9211 = new BitSet(new long[]{0x0000000000000000L,0x0000000000060000L});
    public static final BitSet FOLLOW_substitution_in_dayPart9213 = new BitSet(new long[]{0x0000000000000000L,0x0000000000060000L});
    public static final BitSet FOLLOW_TIMEPERIOD_DAYS_in_dayPart9217 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_DAY_in_dayPart9221 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_hourPart9270 = new BitSet(new long[]{0x0000000000000000L,0x0000000000180000L});
    public static final BitSet FOLLOW_IDENT_in_hourPart9274 = new BitSet(new long[]{0x0000000000000000L,0x0000000000180000L});
    public static final BitSet FOLLOW_substitution_in_hourPart9276 = new BitSet(new long[]{0x0000000000000000L,0x0000000000180000L});
    public static final BitSet FOLLOW_TIMEPERIOD_HOURS_in_hourPart9280 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_HOUR_in_hourPart9284 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_minutePart9333 = new BitSet(new long[]{0x0000000000100000L,0x0000000000600000L});
    public static final BitSet FOLLOW_IDENT_in_minutePart9337 = new BitSet(new long[]{0x0000000000100000L,0x0000000000600000L});
    public static final BitSet FOLLOW_substitution_in_minutePart9339 = new BitSet(new long[]{0x0000000000100000L,0x0000000000600000L});
    public static final BitSet FOLLOW_TIMEPERIOD_MINUTES_in_minutePart9343 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_MINUTE_in_minutePart9347 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MIN_in_minutePart9351 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_secondPart9401 = new BitSet(new long[]{0x0000000000000000L,0x0000000003800000L});
    public static final BitSet FOLLOW_IDENT_in_secondPart9405 = new BitSet(new long[]{0x0000000000000000L,0x0000000003800000L});
    public static final BitSet FOLLOW_substitution_in_secondPart9407 = new BitSet(new long[]{0x0000000000000000L,0x0000000003800000L});
    public static final BitSet FOLLOW_TIMEPERIOD_SECONDS_in_secondPart9411 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_SECOND_in_secondPart9415 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_SEC_in_secondPart9419 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_millisecondPart9469 = new BitSet(new long[]{0x0000000000000000L,0x000000001C000000L});
    public static final BitSet FOLLOW_IDENT_in_millisecondPart9473 = new BitSet(new long[]{0x0000000000000000L,0x000000001C000000L});
    public static final BitSet FOLLOW_substitution_in_millisecondPart9475 = new BitSet(new long[]{0x0000000000000000L,0x000000001C000000L});
    public static final BitSet FOLLOW_TIMEPERIOD_MILLISECONDS_in_millisecondPart9479 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_MILLISECOND_in_millisecondPart9483 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_MILLISEC_in_millisecondPart9487 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUM_INT_in_number9542 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUM_LONG_in_number9559 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUM_FLOAT_in_number9576 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUM_DOUBLE_in_number9593 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUESTION_in_substitution9614 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberconstant_in_constant9633 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stringconstant_in_constant9640 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BOOLEAN_TRUE_in_constant9653 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BOOLEAN_FALSE_in_constant9673 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VALUE_NULL_in_constant9693 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUS_in_numberconstant9715 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8430000010000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_PLUS_in_numberconstant9721 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8430000010000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_number_in_numberconstant9725 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_stringconstant9754 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUOTED_STRING_LITERAL_in_stringconstant9770 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_streamSelector_in_synpred1_EsperEPL2Grammar3089 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_timePeriod_in_synpred2_EsperEPL2Grammar3777 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_builtinFunc_in_synpred3_EsperEPL2Grammar5508 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventProperty_in_synpred4_EsperEPL2Grammar6183 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyStreamSelector_in_synpred5_EsperEPL2Grammar7503 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastOperand_in_synpred6_EsperEPL2Grammar7921 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastWeekdayOperand_in_synpred7_EsperEPL2Grammar7932 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_timePeriod_in_synpred8_EsperEPL2Grammar7943 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expressionQualifyable_in_synpred9_EsperEPL2Grammar7954 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rangeOperand_in_synpred10_EsperEPL2Grammar7965 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_frequencyOperand_in_synpred11_EsperEPL2Grammar7977 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastOperator_in_synpred12_EsperEPL2Grammar7988 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_weekDayOperator_in_synpred13_EsperEPL2Grammar7999 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numericParameterList_in_synpred14_EsperEPL2Grammar8012 = new BitSet(new long[]{0x0000000000000002L});

}