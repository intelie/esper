<?xml version="1.0" encoding="UTF-8"?><!-- 	Sample configuration file.--><esper-configuration xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="esper-configuration-1-0.xsd">		<!-- Event type alias names for plain Java-object events -->		<event-type alias="MyJavaBeanEvent" class="com.mycompany.myapp.MySampleEvent"/>	<!-- Event type alias names for java.util.Map events -->		<event-type alias="MyMapEvent">		<java-util-map>			<map-property name="carId" class="int"/>			<map-property name="carName" class="string"/>			<map-property name="assembly" class="com.mycompany.Assembly"/>		</java-util-map>	</event-type>		<!-- Event type alias names for XML document object model DOM events of type org.w3c.dom.Node-->		<event-type alias="MyXMLNodeEvent">		<xml-dom root-element-name="rootelement" schema-resource="optional.xsd" default-namespace="urn:specification:xml:myschema:1">			<namespace-prefix prefix="myprefix" namespace="urn:specification:xml:myschema:1"/>			<xpath-property property-name="mycount" xpath="count(/myprefix:elementone/myprefix:elementtwo)" type="number"/>		</xml-dom>	</event-type>	<!-- Event type alias names for a legacy Java class-->		<event-type alias="MyLegacyTypeEvent" class="com.mycompany.package.MyLegacyTypeEvent">		<legacy-type accessor-style="public" code-generation="enabled" property-resolution-style="case_insensitive">			<method-property name="mymethodprop" accessor-method="myAccessorMethod" />			<field-property name="myfieldprop" accessor-field="myFieldName" />		</legacy-type>	</event-type>	<!-- Import Packages and Classes -->	<auto-import import-name="com.mycompany.mypackage.*"/>	<auto-import import-name="com.mycompany.myapp.MyUtilityClass"/>		<!-- Sampe configuration for database access using InitialContext and DataSource -->	<database-reference name="mydb1">		<datasource-connection context-lookup-name="java:comp/env/jdbc/mydb">			<env-property name="java.naming.factory.initial" value ="com.myclass.CtxFactory"/>			<env-property name="java.naming.provider.url" value ="iiop://localhost:1050"/>		</datasource-connection>		<connection-settings auto-commit="true" catalog="somecatalog" read-only="true" transaction-isolation="1" />	<!-- Optional settings on connections -->		<connection-lifecycle value="pooled"/>		<!-- Obtains a new connection and closes the connection on every use, for connection pooling -->		<lru-cache size="10"/>				<!-- Configures an optional LRU cache with a size of 10 -->	</database-reference>		<!-- Sampe configuration for database access using DriverManager; retains connections associated with a statement, closing the connection when a statement is stopped -->	<database-reference name="mydb2">		<drivermanager-connection class-name="my.sql.Driver" url="jdbc:mysql://localhost/test?user=root&amp;password=welcome" user="myuser" password="mypassword">			<connection-arg name="user" value ="myuser"/>			<connection-arg name="password" value ="mypassword"/>			<connection-arg name="somearg" value ="someargvalue"/>		</drivermanager-connection>		<connection-lifecycle value="retain"/>		<!-- Retains connection associated with a statement, closing a connection only when a statement is stopped -->		<expiry-time-cache max-age-seconds="60" purge-interval-seconds="120"/>	<!-- Configures an optional time-based cache with a maximum age in seconds and a purge interval -->				</database-reference>	<!-- Sampe configuration for plugging-in a custom view implementation -->	<plugin-view namespace="ext" name="myview" factory-class="net.esper.regression.client.MyTrendSpotterView" />	<!-- Sampe configuration for plugging-in a custom aggregation function -->	<plugin-aggregation-function name="concat" function-class="net.esper.regression.client.MyConcatAggregationFunction" />	<!-- Sampe configuration for plugging-in a custom pattern guard -->	<plugin-pattern-guard namespace="myspace" name="count" factory-class="net.esper.regression.client.MyCountToPatternGuardFactory"/>	<!-- Sampe configuration for plugging-in a custom pattern observer -->	<plugin-pattern-observer namespace="myspace" name="file_exists" factory-class="net.esper.regression.client.MyFileExistsObserverFactory" />	<!-- Sample configuration for an input/output adapter loader -->	<adapter-loader name="MyLoader" class-name="net.esper.adapter.SpringContextLoader">			<!-- SpringApplicationContext translates into Spring ClassPathXmlApplicationContext or FileSystemXmlApplicationContext -->			<!-- Only one app-context of a sort can be used. When both attributes are used classpath and file, classpath prevails -->		<init-arg name="classpath-app-context" value="spring\jms-spring.xml" />		<init-arg name="file-app-context" value="spring\jms-spring.xml" />	</adapter-loader>			<!-- Sample engine settings -->	<engine-settings>		<defaults>			<threading>				<!-- In multithreaded environments, this setting controls whether dispatches to listeners preserve the ordering in which the statement processes events -->				<listener-dispatch preserve-order="true" timeout-msec="1000"/>				<!-- In multithreaded environments, this setting controls whether insert-into streams preserve the order of events inserted into them by one or more statements, -->				<!-- allowing statements that consume other statement's events to behave deterministic -->				<insert-into-dispatch preserve-order="true"/>				<!-- These settings define the resolution of the internal timer thread, and can disable the timer  to indicate that the application supplies the timer events -->				<internal-timer enabled="true" msec-resolution="100"/>			</threading>			<event-meta>			    <!-- Lets configure the engine to use case-insensitive resolution for event properties -->				<class-property-resolution style="distinct_case_insensitive"/>			</event-meta>			<view-resources>			    <!-- Lets configure the engine to reuse views, which is the default but can introduce additional locking -->				<share-views value="true"/>			</view-resources>		</defaults>	</engine-settings></esper-configuration>