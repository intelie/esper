<?xml version="1.0" encoding="UTF-8"?><!-- 	Sample configuration file.--><esper-configuration xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"    xmlns="http://www.espertech.com/schema/esper"    xsi:noNamespaceSchemaLocation="esper-configuration-2-0.xsd"><!--     Alternatively use the following external schema:   xsi:schemaLocation="http://www.espertech.com/schema/esper http://www.espertech.com/schema/esper/esper-configuration-2-0.xsd"> -->     <!-- Adds a Java package name of a package that Java event classes reside in. This setting allows an application to place all it's events into one or more Java packages            and then declare these packages. The engine attempts to resolve an event type alias to a Java class residing in each declared package. -->	<event-type-auto-alias package-name="com.mycompany.eventsone"/>	<!-- Event type alias names for plain Java-object events -->		<event-type alias="MyJavaBeanEvent" class="com.mycompany.myapp.MySampleEvent"/>	<!-- Event type alias names for java.util.Map events. In this example the map type has supertypes (optional) that are not part of this example.-->	<event-type alias="MyMapEvent">		<java-util-map supertype-aliases="MyMapSuperType1, MyMapSuperType2">			<map-property name="carId" class="int"/>			<map-property name="carName" class="string"/>			<map-property name="assembly" class="com.mycompany.Assembly"/>		</java-util-map>	</event-type>		<!-- Event type alias names for XML document object model DOM events of type org.w3c.dom.Node-->		<event-type alias="MyXMLNodeEvent">		<xml-dom root-element-name="rootelement" schema-resource="optional.xsd" default-namespace="urn:specification:xml:myschema:1">			<namespace-prefix prefix="myprefix" namespace="urn:specification:xml:myschema:1"/>			<!-- XPath expressions type is the QName type that returns string, number (double), or boolean -->			<xpath-property property-name="mycount" xpath="count(/myprefix:elementone/myprefix:elementtwo)" type="number"/>			<!-- XPath expressions return values can also be casted; this property will be treated as a XPath expression returning a string that is casted to a long-value -->			<xpath-property property-name="price" xpath="/tick/spot/price" type="string" cast="long"/>		</xml-dom>	</event-type>		<!-- Event type alias names for a legacy Java class-->		<event-type alias="MyLegacyTypeEvent" class="com.mycompany.package.MyLegacyTypeEvent">		<legacy-type accessor-style="public" code-generation="enabled" property-resolution-style="case_insensitive">			<method-property name="mymethodprop" accessor-method="myAccessorMethod" />			<field-property name="myfieldprop" accessor-field="myFieldName" />		</legacy-type>	</event-type>    <!-- Sample for an event type alias configuration that handles event updates (aka. versions, revisions). -->	<revision-event-type alias="MyRevisionEvent">	  <base-event-type alias="MyBaseEventAlias"/>	  <delta-event-type alias="MyDeltaEventAliasOne"/>	  <delta-event-type alias="MyDeltaEventAliasTwo"/>	  <key-property name="id"/>	</revision-event-type>	    <!-- Sample for an variant stream configuration that is a stream of events of multiple types. -->	<variant-stream alias="MyVariantStream">	  <variant-event-type alias="MyFirstEvent"/>		  <variant-event-type alias="MySecondEvent"/>		</variant-stream>		<!-- Import Packages and Classes -->	<auto-import import-name="com.mycompany.mypackage.*"/>	<auto-import import-name="com.mycompany.myapp.MyUtilityClass"/>    <!-- Configure caches for from-clause method invocations -->	    <method-reference class-name="com.mycompany.MyFromClauseLookupLib">		<expiry-time-cache max-age-seconds="10" purge-interval-seconds="10" ref-type="weak"/> <!-- Configures an time-based cache with a maximum age in seconds and a purge interval, and an optional reference strategy  -->			    </method-reference> 	    <method-reference class-name="com.mycompany.MyFromClauseWebServiceLib">		<lru-cache size="1000"/> <!-- Configures an LRU cache with a size of 1000 -->    </method-reference> 	<!-- Sampe configuration for database access using InitialContext and DataSource -->	<database-reference name="mydb1">		<datasource-connection context-lookup-name="java:comp/env/jdbc/mydb">			<env-property name="java.naming.factory.initial" value ="com.myclass.CtxFactory"/>			<env-property name="java.naming.provider.url" value ="iiop://localhost:1050"/>		</datasource-connection>		<connection-settings auto-commit="true" catalog="somecatalog" read-only="true" transaction-isolation="1" />	<!-- Optional settings on connections -->		<connection-lifecycle value="pooled"/>		<!-- Obtains a new connection and closes the connection on every use, for connection pooling -->		<lru-cache size="10"/>				<!-- Configures an optional LRU cache with a size of 10 -->		<column-change-case value="lowercase"/>  <!-- used to indicate to convert all columns to lowercase -->		<metadata-origin value="sample" />	<!-- for database drivers (Oracle) that don't support prepared stmt metadata, derive from a sample statement, see doc -->		<sql-types-mapping sql-type="2" java-type="int" />  <!-- map SQL type to Java type, see java.sql.Types for valid values -->		<sql-types-mapping sql-type="6" java-type="float" />	</database-reference>		<!-- Sampe configuration for database access using DriverManager; retains connections associated with a statement, closing the connection when a statement is stopped -->	<database-reference name="mydb2">		<drivermanager-connection class-name="my.sql.Driver" url="jdbc:mysql://localhost/test?user=root&amp;password=welcome" user="myuser" password="mypassword">			<connection-arg name="user" value ="myuser"/>			<connection-arg name="password" value ="mypassword"/>			<connection-arg name="somearg" value ="someargvalue"/>		</drivermanager-connection>		<connection-lifecycle value="retain"/>		<!-- Retains connection associated with a statement, closing a connection only when a statement is stopped -->		<expiry-time-cache max-age-seconds="60" purge-interval-seconds="120" ref-type="weak"/>	<!-- Configures an optional time-based cache with a maximum age in seconds and a purge interval, and an optional reference strategy  -->				</database-reference>	<!-- Sampe configuration for plugging-in a custom view implementation -->	<plugin-view namespace="ext" name="myview" factory-class="com.espertech.esper.regression.client.MyTrendSpotterView" />	<!-- Sampe configuration for plugging-in a custom aggregation function -->	<plugin-aggregation-function name="concat" function-class="com.espertech.esper.regression.client.MyConcatAggregationFunction" />	<!-- Sampe configuration for plugging-in a custom pattern guard -->	<plugin-pattern-guard namespace="myspace" name="count" factory-class="com.espertech.esper.regression.client.MyCountToPatternGuardFactory"/>	<!-- Sampe configuration for plugging-in a custom pattern observer -->	<plugin-pattern-observer namespace="myspace" name="file_exists" factory-class="com.espertech.esper.regression.client.MyFileExistsObserverFactory" />	<!-- Sampe configuration for plugging-in a new event representation -->	<plugin-event-representation uri="type://formatName/sampleRepresentation/sampleName" class-name="com.espertech.esper.regression.event.MyPlugInEventRepresentation">	  <initializer>	    <anyxml>This is sample content passed to the event representation as a configuration string, if present (optional element)</anyxml>	  </initializer>	</plugin-event-representation>		<!-- Sampe configuration for plugging-in a new event type -->	<plugin-event-type alias="MyEvent">	  <resolution-uri value="type://formatName/sampleRepresentation"/>	  <resolution-uri value="type://formatName/sampleSecondRepresentation"/>	  <initializer>	    <anyxml>This is sample content passed to the event representation resolving the event type as a configuration string for the specific event type, if present (optional element)</anyxml>	  </initializer>	</plugin-event-type>	<!-- Sampe configuration for specifying how to resolve new (unseen) event type aliases in EPL statements -->	<plugin-event-type-alias-resolution>	  <resolution-uri value="type://formatName/sampleRepresentation"/>	  <resolution-uri value="type://formatName/sampleSecondRepresentation"/>	</plugin-event-type-alias-resolution>	<!-- Sample variable, first an integer initialized to 1, then a string initialized to null -->	<variable name="varMyCounter" type="int" initialization-value="1"/>	<variable name="varMyProductName" type="string"/>	<!-- Sample configuration for an input/output adapter loader -->	<plugin-loader name="MyLoader" class-name="com.espertech.esperio.SpringContextLoader">			<!-- SpringApplicationContext translates into Spring ClassPathXmlApplicationContext or FileSystemXmlApplicationContext -->			<!-- Only one app-context of a sort can be used. When both attributes are used classpath and file, classpath prevails -->		<init-arg name="classpath-app-context" value="spring\jms-spring.xml" />		<init-arg name="file-app-context" value="spring\jms-spring.xml" />	</plugin-loader>			<!-- Sample engine settings -->	<engine-settings>		<defaults>			<threading>				<!-- In multithreaded environments, this setting controls whether dispatches to listeners preserve the ordering in which the statement processes events -->				<listener-dispatch preserve-order="true" timeout-msec="1000" locking="spin"/>				<!-- In multithreaded environments, this setting controls whether insert-into streams preserve the order of events inserted into them by one or more statements, -->				<!-- allowing statements that consume other statement's events to behave deterministic -->				<insert-into-dispatch preserve-order="true" timeout-msec="100" locking="spin"/>				<!-- These settings define the resolution of the internal timer thread, and can disable the timer  to indicate that the application supplies the timer events -->				<internal-timer enabled="true" msec-resolution="100"/>			</threading>			<event-meta>			    <!-- Lets configure the engine to use case-insensitive resolution for event properties -->				<class-property-resolution style="distinct_case_insensitive"/>			</event-meta>			<view-resources>			    <!-- Lets configure the engine to reuse views, which is the default but can introduce additional locking -->				<share-views enabled="true"/>			</view-resources>			<logging>			    <!-- By default the engine does not generate logging through Log4j of the event processing execution path. To get debug output, set this flag to true. --> 			    <!-- This setting translates into a static boolean flag and thus may apply to multiple engine instances within a given VM. -->				<execution-path enabled="true" />			</logging>			<stream-selection>			    <!-- By default the engine generates output for the insert stream only, and not for the remove stream.. --> 			    <!-- To obtain output for remove stream only, or for insert stream and remove stream, there are keywords "rstream" and "irstream" for use in the select clause. -->			    <!-- This  setting controls the default behavior, if no keyword is specified in the select-clause by statements. -->				<stream-selector value="irstream" />			</stream-selection>			<time-source>			    <!-- By default the time source is System.currentTimeMillis; This sample configures the nano-second time call System.nanoTime() as the time source, which Esper adjusts for wall clock time.  --> 				<time-source-type value="nano" />			</time-source>		</defaults>	</engine-settings></esper-configuration>