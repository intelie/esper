<chapter id="configuration" revision="1">

    <title>Configuration</title>
    
    <para>
        Esper engine configuration is entirely optional. Esper has a very small number of configuration parameters that can be used to simplify event 
        pattern and EQL statements, and to tune the engine behavior to specific requirements. The Esper engine works out-of-the-box without configuration.
    </para>

    <sect1 id="configuration-programmatic" revision="1">
        <title>Programmatic configuration</title>

        <para>
            An instance of <literal>net.esper.client.Configuration</literal> represents all configuration parameters. The <literal>Configuration</literal> is used to build an (immutable) <literal>EPServiceProvider</literal>, which provides the administrative and runtime interfaces for an Esper engine instance. 
        </para>

        <para>
            You may obtain a <literal>Configuration</literal> instance by instantiating it directly and adding or setting values on it. The <literal>Configuration</literal> instance is then passed to <literal>EPServiceProviderManager</literal> to obtain a configured Esper engine.
        </para>

		<programlisting><![CDATA[Configuration configuration = new Configuration();
configuration.addEventTypeAlias("PriceLimit", PriceLimit.class.getName());
configuration.addEventTypeAlias("StockTick", StockTick.class.getName());
configuration.addImport("org.mycompany.mypackage.MyUtility");
configuration.addImport("org.mycompany.util.*");

EPServiceProvider epService = EPServiceProviderManager.getProvider("sample", configuration);
]]></programlisting>

        <para>
			Note that <literal>Configuration</literal> is meant only as an initialization-time object. The Esper engine represented by an <literal>EPServiceProvider</literal> is immutable and does not retain any association back to the <literal>Configuration</literal>.
        </para>
        
    </sect1>

	<sect1 id="configuration-via-xml" revision="1">
        <title>Configuration via XML file</title>

        <para>
			An alternative approach to configuration is to specify a configuration in an XML file. 
        </para>

        <para>
			The default name for the XML configuration file is <literal>esper.cfg.xml</literal>. Esper reads this file from the root of the <literal>CLASSPATH</literal> as an application resource via the <literal>configure</literal> method.
        </para>
		<programlisting><![CDATA[Configuration configuration = new Configuration();		
configuration.configure();
]]></programlisting>

        <para>
			The <literal>Configuration</literal> class can read the XML configuration file from other sources as well. The <literal>configure</literal> method accepts <literal>URL, File and String</literal> filename parameters.
        </para>
		<programlisting><![CDATA[Configuration configuration = new Configuration();		
configuration.configure("myengine.esper.cfg.xml");
]]></programlisting>
    </sect1>

	<sect1 id="configuration-xml" revision="1">
        <title>XML Configuration file</title>

        <para>
			Here is an example configuration file. The schema for the configuration file can be found in the <literal>etc</literal> folder and is named <literal>esper-configuration-1-0</literal>.		</para>
		<programlisting><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<esper-configuration xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
           xsi:noNamespaceSchemaLocation="esper-configuration-1-0.xsd">
  <event-type alias="StockTick" class="net.esper.example.stockticker.event.StockTick"/>
  <event-type alias="PriceLimit" class="net.esper.example.stockticker.event.PriceLimit"/>
  <auto-import import-name="org.mycompany.mypackage.MyUtility"/>
  <auto-import import-name="org.mycompany.util.*"/>
</esper-configuration>		
]]></programlisting>

    </sect1>

	<sect1 id="configuration-items" revision="1">
        <title>Configuration items</title>

		<sect2 id="config-event-name" revision="1">
			<title>Event type alias to Java class mapping</title>
			
			<para>
				This configuration item can be set to allow event pattern statements and EQL statements to use an event type alias rather then the fully qualified Java class name. Interfaces and abstract classes are also supported as event types.
			</para>
			
			<programlisting><![CDATA[every StockTick(symbol='IBM')"
// via configuration equivalent to
every net.esper.example.stockticker.event.StockTick(symbol='IBM')]]></programlisting>
		</sect2>
			
		<sect2 id="config-class--package-imports" revision="1">
			<title>Class and package imports</title>
			
			<para>
				Esper allows invocations of static Java library functions as outlined in <xref linkend="eql-single-row-function-ref"/>. This configuration 
				item can be set to allow a partial rather than a fully qualified class name in such invocations. The imports work in the same way as in Java files, so both packages and classes can be imported.
			</para>
			
			<programlisting>select Math.max(priceOne, PriceTwo)
// via configuration equivalent to
select java.lang.Math.max(priceOne, priceTwo)</programlisting>

			<para>
				Esper auto-imports the following Java library packages if no other configuration is supplied.
				This list is replaced with any configuration specified in a configuration file or through the API.
			</para>

			<itemizedlist spacing="compact">
				<listitem>
					<para>
						java.lang.*
					</para>
				</listitem>
				<listitem>
					<para>
						java.math.*
					</para>
				</listitem>
				<listitem>
					<para>
						java.text.*
					</para>
				</listitem>
				<listitem>
					<para>
						java.util.*
					</para>
				</listitem>
			</itemizedlist>

		</sect2>

		<sect2 id="config-xml-dom" revision="1">
			<title>XML Events represented by <literal>org.w3c.dom.Node</literal></title>
			
			<para>
				Via this configuration item the Esper engine can natively process <literal>org.w3c.dom.Node</literal> instances, i.e. XML document object model (DOM) nodes.
				Please see the <xref linkend="event_representation"/> section for details on how to use <literal>Node</literal> events with the engine.
			</para>
			
			<para>
				Esper allows configuring XPath expressions as event properties. You can specify arbitrary XPath functions or expressions and provide a property name by which their result values will be available for use in expressions. 
			</para>
				
			<para>
				For XML documents that follow an XML schema, Esper can load and interrogate your schema and validate event property names and types against the schema information. 
			</para>

			<para>
				Nested, mapped and indexed event properties are also supported in expressions against <literal>org.w3c.dom.Node</literal> events. Thus XML trees can conveniently be
				interrogated using the existing event property syntax for querying JavaBean objects, JavaBean object graphs or <literal>java.util.Map</literal> events.
			</para>

			<para>
				In the simplest form, the Esper engine only requires a configuration entry containing the root element name and the event type alias in order to process <literal>org.w3c.dom.Node</literal> events:
			</para>
			<programlisting><![CDATA[<event-type alias="MyXMLNodeEvent">
  <xml-dom root-element-name="myevent" />
</event-type>]]></programlisting>
			
			<para>
				 You can also use the configuration API to configure XML event types, as the short example below demonstrates. 
				 In fact, all configuration options available through XML configuration can 
				 also be provided via setter methods on the <literal>ConfigurationEventTypeXMLDOM</literal> class.
			</para>

			<programlisting><![CDATA[Configuration configuration = new Configuration();
ConfigurationEventTypeXMLDOM desc = new ConfigurationEventTypeXMLDOM();
desc.setRootElementName("myevent");
configuration.addEventTypeAlias("MyXMLNodeEvent", desc);]]></programlisting>

			<para>
				 The next example presents all relevant configuration options in a sample configuration entry.
			</para>

			<programlisting><![CDATA[<event-type alias="AutoIdRFIDEvent">
  <xml-dom root-element-name="Sensor" schema-resource="data/AutoIdPmlCore.xsd" 
       default-namespace="urn:autoid:specification:interchange:PMLCore:xml:schema:1">
    <namespace-prefix prefix="pmlcore" 
       namespace="urn:autoid:specification:interchange:PMLCore:xml:schema:1"/>
    <xpath-property property-name="countTags" 
       xpath="count(/pmlcore:Sensor/pmlcore:Observation/pmlcore:Tag)" type="number"/>
  </xml-dom>
</event-type>]]></programlisting>

			<para>
				 This example configures an event property named <literal>countTags</literal> whose value is computed by an XPath expression. The namespace prefixes
				 and default namespace are for use with XPath expressions and must also be made known to the engine in order for the engine to compile XPath expressions. 
				 Via the <literal>schema-resource</literal> attribute we instruct the engine to load a schema file.
			</para>
			
			<para>
				 Here is an example EQL statement using the configured event type named <literal>AutoIdRFIDEvent</literal>.
			</para>

			<programlisting><![CDATA[select ID, countTags from AutoIdRFIDEvent.win:time(30)]]></programlisting>

			<sect3 id="config-xml-dom-schema" revision="1">
				<title>Schema Resource</title>
				<para>
					 The <literal>schema-resource</literal> attribute takes a schema resource URL or classpath-relative filename. 
					 The engine attempts to resolve the schema resource as an URL. If the schema resource name is not a valid URL, the engine attempts to resolve the resource from classpath via the <literal>ClassLoader.getResource</literal> method using the thread context class loader. If the name could not be resolved, the engine uses the Configuration class classloader.
				</para>

				<para>
					 By configuring a schema file for the engine to load, the engine performs these additional services:
				</para>
				
				<itemizedlist spacing="compact">
					<listitem>
						<para>
							Validates the event properties in a statement, ensuring the event property name matches an attribute or element in the XML
						</para>
					</listitem>
					<listitem>
						<para>
							Determines the type of the event property allowing event properties to be used in type-sensitive expressions such as expressions involving arithmatic (Note: XPath properties are also typed)
						</para>
					</listitem>
					<listitem>
						<para>
							Matches event property names to either element names or attributes
						</para>
					</listitem>
				</itemizedlist>

				<para>
					 If no schema resource is specified, none of the event properties specified in statements are validated at statement creation time and their type defaults to <literal>java.lang.String</literal>. Also, attributes are not supported
					 if no schema resource is specified and must thus be declared via XPath expression.
				</para>

		  </sect3>

			<sect3 id="config-xml-dom-xpathprop" revision="1">
				<title>XPath Property</title>
				<para>
					 The <literal>xpath-property</literal> element adds event properties to the event type that are computed via an XPath expression.
					 In order for the XPath expression to compile, be sure to specify the <literal>default-namespace</literal> attribute and use the 
					 <literal>namespace-prefix</literal> to declare namespace prefixes.
				</para>
					 
				<para>
					 XPath expression properties are strongly typed. The <literal>type</literal> attribute allows the following values. These values correspond to those declared by 
					 <literal>javax.xml.xpath.XPathConstants</literal>.
				</para>

				<itemizedlist spacing="compact">
					<listitem>
						<para>
							number (Note: resolves to a <literal>double</literal>)
						</para>
					</listitem>
					<listitem>
						<para>
							string
						</para>
					</listitem>
					<listitem>
						<para>
							boolean
						</para>
					</listitem>
				</itemizedlist>
				
		  </sect3>
		  
		</sect2>
		
		<sect2 id="config-eventtype-map" revision="1">
			<title>Map Event Types</title>
			
			<para>
				Via this configuration item the Esper engine can natively process <literal>java.util.Map</literal> instances as events.
				Please see the <xref linkend="event_representation"/> section for details on how to use <literal>Map</literal> events with the engine.				
			</para>
			
			<programlisting><![CDATA[
				
			]]></programlisting>
		</sect2>

    </sect1>
</chapter>

