package net.esper.adapter.csv;

import java.util.LinkedHashMap;
import java.util.Map;

import net.esper.client.EPRuntime;

/** 
 * A wrapper for the information needed to send a Map object
 * into an EPRuntime. It also acts as a bridge between the property 
 * type map passed into the Configuration object, which expects the 
 * property types to be described by Strings, and the CSVAdapter, 
 * which expects them to be described by Class objects. 
 */
public class MapEventSpec
{
	private final String eventTypeAlias;
	private final Map<String, Class> propertyTypes;
	private final EPRuntime epRuntime;
	
	/**
	 * Ctor.
	 * @param eventTypeAlias - the event type generated by the Map object in the EPRuntime
	 * @param propertyTypeNames - for each key-value pair in the map, the name of the key and the type (as a string) of the value
	 * @param epRuntime - the EPRuntime to send the Map objects into
	 * @throws ClassNotFoundException 
	 */
	protected MapEventSpec(String eventTypeAlias, Map<String, String> propertyTypeNames, EPRuntime epRuntime) throws ClassNotFoundException
	{
		this.eventTypeAlias = eventTypeAlias;
		this.propertyTypes = createPropertyTypes(propertyTypeNames);
		this.epRuntime = epRuntime;
	}

	/**
	 * @return the epRuntime
	 */
	protected EPRuntime getEpRuntime()
	{
		return epRuntime;
	}

	/**
	 * @return the eventTypeAlias
	 */
	protected String getEventTypeAlias()
	{
		return eventTypeAlias;
	}

	/**
	 * @return the propertyTypes
	 */
	protected Map<String, Class> getPropertyTypes()
	{
		return propertyTypes;
	}
	
    private Map<String, Class> createPropertyTypes(Map<String, String> propertyNames) throws ClassNotFoundException
    {
    	Map<String, Class> propertyTypes = new LinkedHashMap<String, Class>();
    	for(String property : propertyNames.keySet())
    	{
    		propertyTypes.put(property, Class.forName(propertyNames.get(property)));
    	}
    	return propertyTypes;
    }

}
