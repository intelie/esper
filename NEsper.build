<?xml version="1.0" ?>
<project name="NEsper" default="NEsperDev" xmlnds="http://tempuri.org/nant-vs.xsd">
    <!-- Global project settings -->
    <property name="project.basedir" value="${directory::get-current-directory()}" />
    <property name="project.builddir" value="${project.basedir}/build" />    
    <property name="project.build.config" value="debug" />

    <!-- Sandcastle Directories -->
    <property name="sandcastle.dir"
              value="C:\Program Files\Sandcastle" />
    <property name="sandcastle.workingdir" 
              value="${project.basedir}\SandcastleWorkingDir" />
    <property name="sandcastle.output.dir" 
              value="${sandcastle.workingdir}\Output" />
    <!-- Sandcastle Executables -->
    <property name="sandcastle.mrefbuilder.exe" 
              value="${sandcastle.dir}\productiontools\mrefbuilder.exe" />
    <property name="sandcastle.buildassembler.exe" 
              value="${sandcastle.dir}\productiontools\buildassembler.exe" />
    <property name="sandcastle.xsltransform.exe" 
              value="${sandcastle.dir}\productiontools\xsltransform.exe" />
    <!-- Sandcastle Transformations -->
    <property name="sandcastle.addoverloads.xsl" 
              value="${sandcastle.dir}\ProductionTransforms\AddOverloads.xsl" />
    <property name="sandcastle.addguidfilenames.xsl" 
              value="${sandcastle.dir}\ProductionTransforms\AddGuidFilenames.xsl" />
    <property name="sandcastle.reflectiontomanifest.xsl" 
              value="${sandcastle.dir}\ProductionTransforms\ReflectionToManifest.xsl" />
    <property name="sandcastle.reflectiontochmproject.xsl" 
              value="${sandcastle.dir}\ProductionTransforms\ReflectionToChmProject.xsl" />
    <property name="sandcastle.reflectiontochmcontents.xsl" 
              value="${sandcastle.dir}\ProductionTransforms\ReflectionToChmContents.xsl" />
    <property name="sandcastle.reflectiontochmindex.xsl" 
              value="${sandcastle.dir}\ProductionTransforms\ReflectionToChmIndex.xsl" />
    <!-- Help Compiler -->
    <property name="hhc.dir"
              value="C:\Program Files\HTML Help Workshop" />
    <property name="hhc.exe" overwrite="false" 
              value="${hhc.dir}\hhc.exe" />

		<mkdir dir="${project.builddir}" />
 		<record name="${project.builddir}/BuildLog.txt" level="Info" action="Start"/>

		<target name="NEsperDev">
      <property name="project.build.config" value="Debug" />
			<call target="BuildSolution"/>
	    <property name="project.build.config" value="Release" />
			<call target="BuildSolution"/>
  		<call target="CoreNUnit"/>		
			<record name="${project.builddir}/Buildlog.txt" action="Close"/>
		</target>

		<!--=========================================BUILD SOLUTION===========================================-->
		<target name="BuildSolution">
		 <echo message = "Start building the solution in ${project.build.config} mode ..." />
		
		 <msbuild project="${project.basedir}/NEsper/NEsper.sln">
		   <arg value="/property:Configuration=${project.build.config}" />
		   <arg value="/t:Rebuild" />
		 </msbuild>
		</target>

		<target name="CoreNUnit">
		 <echo message="Starting Core Unit Tests"/>
		 <nunit2>
		   <formatter type="Xml" outputdir="${project.builddir}/" extension=".xml" usefile="true" />
		   <test assemblyname="${project.basedir}/NEsper.Tests/bin/${project.build.config}/NEsper.Tests.dll"
		            appconfig="${project.basedir}/NEsper.Tests/bin/${project.build.config}/NEsper.Tests.dll.config" />
		 </nunit2>
		
		 <call target="GenerateNUnitReport" />
		</target>
		
		<target name="GenerateNUnitReport">
		 <echo message="Generating NUnit Report" />
		 <nunit2report todir="${project.builddir}/">
		   <fileset>
		     <includes name="${project.builddir}/NEsper.Tests.dll-results.xml" />
		   </fileset>
		 </nunit2report>
		</target>

    <!-- Generate documentation -->
    <target name="documentation">
        <!-- Create or Cleanup Working Directory -->
        <mkdir dir="${sandcastle.workingdir}" if="${not directory::exists(sandcastle.workingdir)}" />
        <delete>
           <fileset basedir="${sandcastle.workingdir}">
              <include name="**\*" />
           </fileset>
        </delete>

        <!-- Copy configuration file, and hard code references -->
        <copy file="${sandcastle.dir}/Presentation/vs2005/Configuration/Sandcastle.config"
              tofile="${sandcastle.workingdir}/Sandcastle.config"> 
           <filterchain> 
              <replacestring from="&quot;..\..\" to="&quot;${sandcastle.dir}\" /> 
              <replacestring from="&quot;..\" to="&quot;${sandcastle.dir}\Examples\" />
              <replacestring from="&quot;comments.xml" to="&quot;${doc.dir}\*.xml" /> 
           </filterchain> 
        </copy>    
        
        <!-- Run MRefBuilder (introspection on assemblies) to create basic Reflection XML -->
        <exec program="${sandcastle.mrefbuilder.exe}" workingdir="${sandcastle.workingdir}"> 
           <arg value="${current.bin.dir}/*.dll" />
           <arg value="${current.bin.dir}/*.exe" />
           <arg value="/out:reflection.org1.xml" />
           <arg value="/dep:lib/${framework::get-family(framework::get-target-framework())}/${framework::get-version(framework::get-target-framework())}/${current.build.config}/*.dll" />
           <arg value="/dep:lib/${current.build.config}/*.dll" />
           <arg value="/dep:lib/*.dll" />
        </exec>
        
        <!-- Create final Reflection XML -->
        <!-- Regroup overloads -->
        <exec program="${sandcastle.xsltransform.exe}" workingdir="${sandcastle.workingdir}">
           <arg value="reflection.org1.xml" />
           <arg value="/xsl:&quot;${sandcastle.addoverloads.xsl}&quot;" />
           <arg value="/out:reflection.org2.xml" />
        </exec>
        <!-- Create filenames for html documents -->
        <exec program="${sandcastle.xsltransform.exe}" workingdir="${sandcastle.workingdir}">
           <arg value="reflection.org2.xml" />
           <arg value="/xsl:&quot;${sandcastle.addguidfilenames.xsl}&quot;" />
           <arg value="/out:reflection.xml" />
        </exec>
        
        <!-- Create Manifest (list of Topics) -->
        <exec program="${sandcastle.xsltransform.exe}" workingdir="${sandcastle.workingdir}">
           <arg value="/xsl:&quot;${sandcastle.reflectiontomanifest.xsl}&quot;" />
           <arg value="reflection.xml" />
           <arg value="/out:manifest.xml" />
        </exec>
        
        <!-- Create Output Environment -->
        <mkdir dir="${sandcastle.output.dir}" /> 
        <mkdir dir="${sandcastle.output.dir}/html" /> 
        <copy todir="${sandcastle.output.dir}"> 
            <fileset basedir="${sandcastle.dir}/Presentation"> 
                <include name="art/*" /> 
                <include name="scripts/*" /> 
                <include name="styles/*" /> 
            </fileset> 
        </copy>
        
        <!-- Run BuildAssembler (create html topic files) -->
        <exec program="${sandcastle.buildassembler.exe}" workingdir="${sandcastle.workingdir}" >
           <arg value="manifest.xml" />
           <arg value="/config:Sandcastle.config" />
        </exec>
        
        <!-- Create html Help project -->
        <exec program="${sandcastle.xsltransform.exe}" workingdir="${sandcastle.workingdir}">
           <arg value="/xsl:&quot;${sandcastle.reflectiontochmproject.xsl}&quot;" />
           <arg value="reflection.xml" />
           <arg value="/out:&quot;${sandcastle.output.dir}\test.hhp&quot;" />
        </exec>
        <!-- Create html Help project Table Of Contents -->
        <exec program="${sandcastle.xsltransform.exe}" workingdir="${sandcastle.workingdir}" >
           <arg value="/xsl:&quot;${sandcastle.reflectiontochmcontents.xsl}&quot;" />
           <arg value="reflection.xml" />
           <arg value="/arg:html=Output\html" />
           <arg value="/out:&quot;${sandcastle.output.dir}\test.hhc&quot;" />
        </exec>
        <!-- Create html Help project Index -->
        <exec program="${sandcastle.xsltransform.exe}" workingdir="${sandcastle.workingdir}" >
           <arg value="/xsl:&quot;${sandcastle.reflectiontochmindex.xsl}&quot;" />
           <arg value="reflection.xml" />
           <arg value="/out:&quot;${sandcastle.output.dir}\test.hhk&quot;" />
        </exec>

        <!-- Generate CHM file -->
        <exec program="${hhc.exe}" 
              commandline="test.hhp" 
              workingdir="${sandcastle.output.dir}" 
              failonerror="false"/>
    </target>
</project>
