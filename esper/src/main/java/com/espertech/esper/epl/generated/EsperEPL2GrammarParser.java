  package com.espertech.esper.epl.generated;
import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import org.antlr.runtime.tree.*;
public class EsperEPL2GrammarParser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "CREATE", "WINDOW", "IN_SET", "BETWEEN", "LIKE", "REGEXP", "ESCAPE", "OR_EXPR", "AND_EXPR", "NOT_EXPR", "EVERY_EXPR", "EVERY_DISTINCT_EXPR", "WHERE", "AS", "SUM", "AVG", "MAX", "MIN", "COALESCE", "MEDIAN", "STDDEV", "AVEDEV", "COUNT", "SELECT", "CASE", "CASE2", "ELSE", "WHEN", "THEN", "END", "FROM", "OUTER", "INNER", "JOIN", "LEFT", "RIGHT", "FULL", "ON", "IS", "BY", "GROUP", "HAVING", "DISTINCT", "ALL", "ANY", "SOME", "OUTPUT", "EVENTS", "FIRST", "LAST", "INSERT", "INTO", "ORDER", "ASC", "DESC", "RSTREAM", "ISTREAM", "IRSTREAM", "SCHEMA", "UNIDIRECTIONAL", "RETAINUNION", "RETAININTERSECTION", "PATTERN", "SQL", "METADATASQL", "PREVIOUS", "PREVIOUSTAIL", "PREVIOUSCOUNT", "PREVIOUSWINDOW", "PRIOR", "EXISTS", "WEEKDAY", "LW", "INSTANCEOF", "TYPEOF", "CAST", "CURRENT_TIMESTAMP", "DELETE", "SNAPSHOT", "SET", "VARIABLE", "UNTIL", "AT", "INDEX", "TIMEPERIOD_YEAR", "TIMEPERIOD_YEARS", "TIMEPERIOD_MONTH", "TIMEPERIOD_MONTHS", "TIMEPERIOD_WEEK", "TIMEPERIOD_WEEKS", "TIMEPERIOD_DAY", "TIMEPERIOD_DAYS", "TIMEPERIOD_HOUR", "TIMEPERIOD_HOURS", "TIMEPERIOD_MINUTE", "TIMEPERIOD_MINUTES", "TIMEPERIOD_SEC", "TIMEPERIOD_SECOND", "TIMEPERIOD_SECONDS", "TIMEPERIOD_MILLISEC", "TIMEPERIOD_MILLISECOND", "TIMEPERIOD_MILLISECONDS", "BOOLEAN_TRUE", "BOOLEAN_FALSE", "VALUE_NULL", "ROW_LIMIT_EXPR", "OFFSET", "UPDATE", "MATCH_RECOGNIZE", "MEASURES", "DEFINE", "PARTITION", "MATCHES", "AFTER", "FOR", "WHILE", "USING", "MERGE", "MATCHED", "EXPRESSIONDECL", "NUMERIC_PARAM_RANGE", "NUMERIC_PARAM_LIST", "NUMERIC_PARAM_FREQUENCY", "OBJECT_PARAM_ORDERED_EXPR", "FOLLOWED_BY_EXPR", "FOLLOWED_BY_ITEM", "ARRAY_PARAM_LIST", "PATTERN_FILTER_EXPR", "PATTERN_NOT_EXPR", "PATTERN_EVERY_DISTINCT_EXPR", "EVENT_FILTER_EXPR", "EVENT_FILTER_PROPERTY_EXPR", "EVENT_FILTER_PROPERTY_EXPR_ATOM", "PROPERTY_SELECTION_ELEMENT_EXPR", "PROPERTY_SELECTION_STREAM", "PROPERTY_WILDCARD_SELECT", "EVENT_FILTER_IDENT", "EVENT_FILTER_PARAM", "EVENT_FILTER_RANGE", "EVENT_FILTER_NOT_RANGE", "EVENT_FILTER_IN", "EVENT_FILTER_NOT_IN", "EVENT_FILTER_BETWEEN", "EVENT_FILTER_NOT_BETWEEN", "CLASS_IDENT", "GUARD_EXPR", "OBSERVER_EXPR", "VIEW_EXPR", "PATTERN_INCL_EXPR", "DATABASE_JOIN_EXPR", "WHERE_EXPR", "HAVING_EXPR", "EVAL_BITWISE_EXPR", "EVAL_AND_EXPR", "EVAL_OR_EXPR", "EVAL_EQUALS_EXPR", "EVAL_NOTEQUALS_EXPR", "EVAL_EQUALS_GROUP_EXPR", "EVAL_NOTEQUALS_GROUP_EXPR", "EVAL_IDENT", "SELECTION_EXPR", "SELECTION_ELEMENT_EXPR", "SELECTION_STREAM", "STREAM_EXPR", "OUTERJOIN_EXPR", "INNERJOIN_EXPR", "LEFT_OUTERJOIN_EXPR", "RIGHT_OUTERJOIN_EXPR", "FULL_OUTERJOIN_EXPR", "GROUP_BY_EXPR", "ORDER_BY_EXPR", "ORDER_ELEMENT_EXPR", "EVENT_PROP_EXPR", "EVENT_PROP_SIMPLE", "EVENT_PROP_MAPPED", "EVENT_PROP_INDEXED", "EVENT_PROP_DYNAMIC_SIMPLE", "EVENT_PROP_DYNAMIC_INDEXED", "EVENT_PROP_DYNAMIC_MAPPED", "EVENT_LIMIT_EXPR", "TIMEPERIOD_LIMIT_EXPR", "AFTER_LIMIT_EXPR", "CRONTAB_LIMIT_EXPR", "CRONTAB_LIMIT_EXPR_PARAM", "WHEN_LIMIT_EXPR", "INSERTINTO_EXPR", "EXPRCOL", "INDEXCOL", "CONCAT", "LIB_FUNCTION", "LIB_FUNC_CHAIN", "DOT_EXPR", "UNARY_MINUS", "TIME_PERIOD", "ARRAY_EXPR", "YEAR_PART", "MONTH_PART", "WEEK_PART", "DAY_PART", "HOUR_PART", "MINUTE_PART", "SECOND_PART", "MILLISECOND_PART", "NOT_IN_SET", "NOT_BETWEEN", "NOT_LIKE", "NOT_REGEXP", "DBSELECT_EXPR", "DBFROM_CLAUSE", "DBWHERE_CLAUSE", "WILDCARD_SELECT", "INSERTINTO_STREAM_NAME", "IN_RANGE", "NOT_IN_RANGE", "SUBSELECT_EXPR", "SUBSELECT_GROUP_EXPR", "EXISTS_SUBSELECT_EXPR", "IN_SUBSELECT_EXPR", "NOT_IN_SUBSELECT_EXPR", "IN_SUBSELECT_QUERY_EXPR", "LAST_OPERATOR", "WEEKDAY_OPERATOR", "SUBSTITUTION", "CAST_EXPR", "CREATE_INDEX_EXPR", "CREATE_WINDOW_EXPR", "CREATE_WINDOW_SELECT_EXPR", "ON_EXPR", "ON_STREAM", "ON_DELETE_EXPR", "ON_SELECT_EXPR", "ON_UPDATE_EXPR", "ON_MERGE_EXPR", "ON_SELECT_INSERT_EXPR", "ON_SELECT_INSERT_OUTPUT", "ON_EXPR_FROM", "ON_SET_EXPR", "CREATE_VARIABLE_EXPR", "METHOD_JOIN_EXPR", "MATCH_UNTIL_EXPR", "MATCH_UNTIL_RANGE_HALFOPEN", "MATCH_UNTIL_RANGE_HALFCLOSED", "MATCH_UNTIL_RANGE_CLOSED", "MATCH_UNTIL_RANGE_BOUNDED", "CREATE_COL_TYPE_LIST", "CREATE_COL_TYPE", "NUMBERSETSTAR", "ANNOTATION", "ANNOTATION_ARRAY", "ANNOTATION_VALUE", "FIRST_AGGREG", "LAST_AGGREG", "WINDOW_AGGREG", "UPDATE_EXPR", "ON_SET_EXPR_ITEM", "CREATE_SCHEMA_EXPR", "CREATE_SCHEMA_EXPR_QUAL", "CREATE_SCHEMA_EXPR_INH", "VARIANT_LIST", "MERGE_UNM", "MERGE_MAT", "MERGE_UPD", "MERGE_INS", "MERGE_DEL", "INT_TYPE", "LONG_TYPE", "FLOAT_TYPE", "DOUBLE_TYPE", "STRING_TYPE", "BOOL_TYPE", "NULL_TYPE", "NUM_DOUBLE", "EPL_EXPR", "MATCHREC_PATTERN", "MATCHREC_PATTERN_ATOM", "MATCHREC_PATTERN_CONCAT", "MATCHREC_PATTERN_ALTER", "MATCHREC_PATTERN_NESTED", "MATCHREC_AFTER_SKIP", "MATCHREC_INTERVAL", "MATCHREC_DEFINE", "MATCHREC_DEFINE_ITEM", "MATCHREC_MEASURES", "MATCHREC_MEASURE_ITEM", "MATCHREC_PARTITION", "IDENT", "LCURLY", "RCURLY", "LPAREN", "RPAREN", "GOES", "COMMA", "EQUALS", "DOT", "LBRACK", "RBRACK", "STAR", "BOR", "PLUS", "QUESTION", "COLON", "STRING_LITERAL", "QUOTED_STRING_LITERAL", "BAND", "BXOR", "SQL_NE", "NOT_EQUAL", "LT", "GT", "LE", "GE", "LOR", "MINUS", "DIV", "MOD", "NUM_INT", "FOLLOWED_BY", "FOLLOWMAX_BEGIN", "FOLLOWMAX_END", "ESCAPECHAR", "TICKED_STRING_LITERAL", "NUM_LONG", "NUM_FLOAT", "EQUAL", "LNOT", "BNOT", "DIV_ASSIGN", "PLUS_ASSIGN", "INC", "MINUS_ASSIGN", "DEC", "STAR_ASSIGN", "MOD_ASSIGN", "SR", "SR_ASSIGN", "BSR", "BSR_ASSIGN", "SL", "SL_ASSIGN", "BXOR_ASSIGN", "BOR_ASSIGN", "BAND_ASSIGN", "LAND", "SEMI", "EMAILAT", "WS", "SL_COMMENT", "ML_COMMENT", "EscapeSequence", "UnicodeEscape", "OctalEscape", "HexDigit", "EXPONENT", "FLOAT_SUFFIX"
    };
    public static final int CRONTAB_LIMIT_EXPR=186;
    public static final int FLOAT_SUFFIX=357;
    public static final int STAR=300;
    public static final int DOT_EXPR=195;
    public static final int NUMERIC_PARAM_LIST=125;
    public static final int MOD=318;
    public static final int ISTREAM=60;
    public static final int LIB_FUNC_CHAIN=194;
    public static final int OUTERJOIN_EXPR=168;
    public static final int CREATE_COL_TYPE_LIST=248;
    public static final int BSR=339;
    public static final int MERGE_INS=266;
    public static final int MONTH_PART=200;
    public static final int LIB_FUNCTION=193;
    public static final int EOF=-1;
    public static final int TIMEPERIOD_MILLISECONDS=105;
    public static final int FULL_OUTERJOIN_EXPR=172;
    public static final int MATCHREC_PATTERN_CONCAT=279;
    public static final int INC=332;
    public static final int LNOT=328;
    public static final int RPAREN=293;
    public static final int CREATE=4;
    public static final int STRING_LITERAL=305;
    public static final int BSR_ASSIGN=340;
    public static final int CAST_EXPR=227;
    public static final int MATCHES=116;
    public static final int USING=120;
    public static final int STREAM_EXPR=167;
    public static final int TIMEPERIOD_SECONDS=102;
    public static final int NOT_EQUAL=310;
    public static final int METADATASQL=68;
    public static final int EVENT_FILTER_PROPERTY_EXPR=135;
    public static final int LAST_AGGREG=255;
    public static final int GOES=294;
    public static final int REGEXP=9;
    public static final int MATCHED=122;
    public static final int FOLLOWED_BY_EXPR=128;
    public static final int FOLLOWED_BY=320;
    public static final int HOUR_PART=203;
    public static final int RBRACK=299;
    public static final int MATCHREC_PATTERN_NESTED=281;
    public static final int MATCH_UNTIL_RANGE_CLOSED=246;
    public static final int GE=314;
    public static final int METHOD_JOIN_EXPR=242;
    public static final int ASC=57;
    public static final int IN_SET=6;
    public static final int EVENT_FILTER_EXPR=134;
    public static final int PATTERN_EVERY_DISTINCT_EXPR=133;
    public static final int MINUS_ASSIGN=333;
    public static final int ELSE=30;
    public static final int EVENT_FILTER_NOT_IN=145;
    public static final int NUM_DOUBLE=275;
    public static final int INSERTINTO_STREAM_NAME=215;
    public static final int LCURLY=290;
    public static final int UNARY_MINUS=196;
    public static final int TIMEPERIOD_MILLISEC=103;
    public static final int RETAINUNION=64;
    public static final int DBWHERE_CLAUSE=213;
    public static final int MEDIAN=23;
    public static final int EVENTS=51;
    public static final int AND_EXPR=12;
    public static final int GROUP=44;
    public static final int EVENT_FILTER_NOT_RANGE=143;
    public static final int WS=349;
    public static final int EMAILAT=348;
    public static final int SUBSELECT_GROUP_EXPR=219;
    public static final int ON_SELECT_INSERT_EXPR=237;
    public static final int YEAR_PART=199;
    public static final int FOLLOWED_BY_ITEM=129;
    public static final int TYPEOF=78;
    public static final int ESCAPECHAR=323;
    public static final int EXPRCOL=190;
    public static final int SL_COMMENT=350;
    public static final int NULL_TYPE=274;
    public static final int MATCH_UNTIL_RANGE_HALFOPEN=244;
    public static final int GT=312;
    public static final int BNOT=329;
    public static final int WHERE_EXPR=154;
    public static final int END=33;
    public static final int LAND=346;
    public static final int INNERJOIN_EXPR=169;
    public static final int NOT_REGEXP=210;
    public static final int MATCH_UNTIL_EXPR=243;
    public static final int EVENT_PROP_EXPR=176;
    public static final int LBRACK=298;
    public static final int MERGE_UPD=265;
    public static final int VIEW_EXPR=151;
    public static final int ANNOTATION=251;
    public static final int LONG_TYPE=269;
    public static final int EVENT_FILTER_PROPERTY_EXPR_ATOM=136;
    public static final int MATCHREC_PATTERN=277;
    public static final int ON_MERGE_EXPR=236;
    public static final int TIMEPERIOD_SEC=100;
    public static final int TICKED_STRING_LITERAL=324;
    public static final int ON_SELECT_EXPR=234;
    public static final int MINUTE_PART=204;
    public static final int PATTERN_NOT_EXPR=132;
    public static final int SQL_NE=309;
    public static final int SUM=18;
    public static final int HexDigit=355;
    public static final int UPDATE_EXPR=257;
    public static final int LPAREN=292;
    public static final int IN_SUBSELECT_EXPR=221;
    public static final int AT=86;
    public static final int AS=17;
    public static final int OR_EXPR=11;
    public static final int BOOLEAN_TRUE=106;
    public static final int THEN=32;
    public static final int MATCHREC_INTERVAL=283;
    public static final int NOT_IN_RANGE=217;
    public static final int TIMEPERIOD_MONTH=90;
    public static final int OFFSET=110;
    public static final int AVG=19;
    public static final int LEFT=38;
    public static final int SECOND_PART=205;
    public static final int PREVIOUS=69;
    public static final int PREVIOUSWINDOW=72;
    public static final int MATCH_RECOGNIZE=112;
    public static final int IDENT=289;
    public static final int DATABASE_JOIN_EXPR=153;
    public static final int BXOR=308;
    public static final int PLUS=302;
    public static final int CASE2=29;
    public static final int MERGE_MAT=264;
    public static final int TIMEPERIOD_DAY=94;
    public static final int CREATE_SCHEMA_EXPR=259;
    public static final int EXISTS=74;
    public static final int EVENT_PROP_INDEXED=179;
    public static final int CREATE_INDEX_EXPR=228;
    public static final int TIMEPERIOD_MILLISECOND=104;
    public static final int EVAL_NOTEQUALS_EXPR=160;
    public static final int MATCH_UNTIL_RANGE_HALFCLOSED=245;
    public static final int CREATE_VARIABLE_EXPR=241;
    public static final int LIKE=8;
    public static final int OUTER=35;
    public static final int MATCHREC_DEFINE=284;
    public static final int BY=43;
    public static final int ARRAY_PARAM_LIST=130;
    public static final int RIGHT_OUTERJOIN_EXPR=171;
    public static final int NUMBERSETSTAR=250;
    public static final int LAST_OPERATOR=224;
    public static final int PATTERN_FILTER_EXPR=131;
    public static final int MERGE=121;
    public static final int FOLLOWMAX_END=322;
    public static final int MERGE_UNM=263;
    public static final int EVAL_AND_EXPR=157;
    public static final int LEFT_OUTERJOIN_EXPR=170;
    public static final int EPL_EXPR=276;
    public static final int GROUP_BY_EXPR=173;
    public static final int SET=83;
    public static final int RIGHT=39;
    public static final int HAVING=45;
    public static final int INSTANCEOF=77;
    public static final int MIN=21;
    public static final int EVENT_PROP_SIMPLE=177;
    public static final int MINUS=316;
    public static final int SEMI=347;
    public static final int INDEXCOL=191;
    public static final int STAR_ASSIGN=335;
    public static final int PREVIOUSCOUNT=71;
    public static final int VARIANT_LIST=262;
    public static final int FIRST_AGGREG=254;
    public static final int COLON=304;
    public static final int EVAL_EQUALS_GROUP_EXPR=161;
    public static final int BAND_ASSIGN=345;
    public static final int PREVIOUSTAIL=70;
    public static final int SCHEMA=62;
    public static final int CRONTAB_LIMIT_EXPR_PARAM=187;
    public static final int NOT_IN_SET=207;
    public static final int VALUE_NULL=108;
    public static final int EVENT_PROP_DYNAMIC_SIMPLE=180;
    public static final int SL=341;
    public static final int NOT_IN_SUBSELECT_EXPR=222;
    public static final int WHEN=31;
    public static final int GUARD_EXPR=149;
    public static final int SR=337;
    public static final int RCURLY=291;
    public static final int PLUS_ASSIGN=331;
    public static final int EXISTS_SUBSELECT_EXPR=220;
    public static final int DAY_PART=202;
    public static final int EVENT_FILTER_IN=144;
    public static final int DIV=317;
    public static final int WEEK_PART=201;
    public static final int EXPRESSIONDECL=123;
    public static final int OBJECT_PARAM_ORDERED_EXPR=127;
    public static final int OctalEscape=354;
    public static final int MILLISECOND_PART=206;
    public static final int BETWEEN=7;
    public static final int PRIOR=73;
    public static final int FIRST=52;
    public static final int ROW_LIMIT_EXPR=109;
    public static final int SELECTION_EXPR=164;
    public static final int LOR=315;
    public static final int CAST=79;
    public static final int LW=76;
    public static final int WILDCARD_SELECT=214;
    public static final int EXPONENT=356;
    public static final int LT=311;
    public static final int PATTERN_INCL_EXPR=152;
    public static final int WHILE=119;
    public static final int ORDER_BY_EXPR=174;
    public static final int BOOL_TYPE=273;
    public static final int MOD_ASSIGN=336;
    public static final int ANNOTATION_ARRAY=252;
    public static final int CASE=28;
    public static final int IN_SUBSELECT_QUERY_EXPR=223;
    public static final int EQUALS=296;
    public static final int COUNT=26;
    public static final int RETAININTERSECTION=65;
    public static final int DIV_ASSIGN=330;
    public static final int WINDOW_AGGREG=256;
    public static final int SL_ASSIGN=342;
    public static final int TIMEPERIOD_WEEKS=93;
    public static final int PATTERN=66;
    public static final int SQL=67;
    public static final int MATCHREC_AFTER_SKIP=282;
    public static final int WEEKDAY=75;
    public static final int FULL=40;
    public static final int ON_UPDATE_EXPR=235;
    public static final int INSERT=54;
    public static final int ESCAPE=10;
    public static final int ARRAY_EXPR=198;
    public static final int CREATE_COL_TYPE=249;
    public static final int LAST=53;
    public static final int BOOLEAN_FALSE=107;
    public static final int EVAL_NOTEQUALS_GROUP_EXPR=162;
    public static final int SELECT=27;
    public static final int INTO=55;
    public static final int FLOAT_TYPE=270;
    public static final int COALESCE=22;
    public static final int TIMEPERIOD_SECOND=101;
    public static final int EVENT_FILTER_BETWEEN=146;
    public static final int ANNOTATION_VALUE=253;
    public static final int SUBSELECT_EXPR=218;
    public static final int CONCAT=192;
    public static final int NUMERIC_PARAM_RANGE=124;
    public static final int CLASS_IDENT=148;
    public static final int MATCHREC_PATTERN_ALTER=280;
    public static final int ON_EXPR=231;
    public static final int CREATE_WINDOW_EXPR=229;
    public static final int PROPERTY_SELECTION_STREAM=138;
    public static final int ON_DELETE_EXPR=233;
    public static final int NUM_LONG=325;
    public static final int ON=41;
    public static final int TIME_PERIOD=197;
    public static final int DOUBLE_TYPE=271;
    public static final int DELETE=81;
    public static final int INT_TYPE=268;
    public static final int MATCHREC_PARTITION=288;
    public static final int EVERY_EXPR=14;
    public static final int EVAL_BITWISE_EXPR=156;
    public static final int ORDER_ELEMENT_EXPR=175;
    public static final int TIMEPERIOD_HOURS=97;
    public static final int VARIABLE=84;
    public static final int SUBSTITUTION=226;
    public static final int UNTIL=85;
    public static final int STRING_TYPE=272;
    public static final int NUM_INT=319;
    public static final int MATCHREC_DEFINE_ITEM=285;
    public static final int ON_SET_EXPR=240;
    public static final int STDDEV=24;
    public static final int CREATE_SCHEMA_EXPR_INH=261;
    public static final int NUM_FLOAT=326;
    public static final int ON_EXPR_FROM=239;
    public static final int FROM=34;
    public static final int DISTINCT=46;
    public static final int EscapeSequence=352;
    public static final int OUTPUT=50;
    public static final int PROPERTY_SELECTION_ELEMENT_EXPR=137;
    public static final int WEEKDAY_OPERATOR=225;
    public static final int DEC=334;
    public static final int WHERE=16;
    public static final int INNER=36;
    public static final int BXOR_ASSIGN=343;
    public static final int NUMERIC_PARAM_FREQUENCY=126;
    public static final int SNAPSHOT=82;
    public static final int ORDER=56;
    public static final int AFTER_LIMIT_EXPR=185;
    public static final int EVENT_FILTER_PARAM=141;
    public static final int EVENT_PROP_DYNAMIC_MAPPED=182;
    public static final int IRSTREAM=61;
    public static final int MAX=20;
    public static final int UPDATE=111;
    public static final int FOR=118;
    public static final int ON_STREAM=232;
    public static final int DEFINE=114;
    public static final int TIMEPERIOD_YEARS=89;
    public static final int TIMEPERIOD_DAYS=95;
    public static final int EVENT_FILTER_RANGE=142;
    public static final int ML_COMMENT=351;
    public static final int INDEX=87;
    public static final int EVENT_PROP_DYNAMIC_INDEXED=181;
    public static final int BOR_ASSIGN=344;
    public static final int COMMA=295;
    public static final int WHEN_LIMIT_EXPR=188;
    public static final int IS=42;
    public static final int PARTITION=115;
    public static final int TIMEPERIOD_LIMIT_EXPR=184;
    public static final int SOME=49;
    public static final int EQUAL=327;
    public static final int BOR=301;
    public static final int MATCHREC_MEASURE_ITEM=287;
    public static final int ALL=47;
    public static final int TIMEPERIOD_HOUR=96;
    public static final int EVENT_FILTER_NOT_BETWEEN=147;
    public static final int IN_RANGE=216;
    public static final int DOT=297;
    public static final int MATCHREC_MEASURES=286;
    public static final int CURRENT_TIMESTAMP=80;
    public static final int TIMEPERIOD_WEEK=92;
    public static final int EVERY_DISTINCT_EXPR=15;
    public static final int PROPERTY_WILDCARD_SELECT=139;
    public static final int INSERTINTO_EXPR=189;
    public static final int UNIDIRECTIONAL=63;
    public static final int HAVING_EXPR=155;
    public static final int MATCH_UNTIL_RANGE_BOUNDED=247;
    public static final int MERGE_DEL=267;
    public static final int EVAL_EQUALS_EXPR=159;
    public static final int TIMEPERIOD_MINUTES=99;
    public static final int RSTREAM=59;
    public static final int NOT_LIKE=209;
    public static final int EVENT_LIMIT_EXPR=183;
    public static final int NOT_BETWEEN=208;
    public static final int TIMEPERIOD_MINUTE=98;
    public static final int EVAL_OR_EXPR=158;
    public static final int ON_SELECT_INSERT_OUTPUT=238;
    public static final int MEASURES=113;
    public static final int AFTER=117;
    public static final int BAND=307;
    public static final int MATCHREC_PATTERN_ATOM=278;
    public static final int QUOTED_STRING_LITERAL=306;
    public static final int JOIN=37;
    public static final int ANY=48;
    public static final int NOT_EXPR=13;
    public static final int QUESTION=303;
    public static final int OBSERVER_EXPR=150;
    public static final int CREATE_SCHEMA_EXPR_QUAL=260;
    public static final int EVENT_FILTER_IDENT=140;
    public static final int EVENT_PROP_MAPPED=178;
    public static final int UnicodeEscape=353;
    public static final int TIMEPERIOD_YEAR=88;
    public static final int AVEDEV=25;
    public static final int DBSELECT_EXPR=211;
    public static final int FOLLOWMAX_BEGIN=321;
    public static final int TIMEPERIOD_MONTHS=91;
    public static final int SELECTION_ELEMENT_EXPR=165;
    public static final int CREATE_WINDOW_SELECT_EXPR=230;
    public static final int WINDOW=5;
    public static final int ON_SET_EXPR_ITEM=258;
    public static final int DESC=58;
    public static final int SELECTION_STREAM=166;
    public static final int SR_ASSIGN=338;
    public static final int LE=313;
    public static final int DBFROM_CLAUSE=212;
    public static final int EVAL_IDENT=163;
        public EsperEPL2GrammarParser(TokenStream input) {
            this(input, new RecognizerSharedState());
        }
        public EsperEPL2GrammarParser(TokenStream input, RecognizerSharedState state) {
            super(input, state);
        }
    protected TreeAdaptor adaptor = new CommonTreeAdaptor();
    public void setTreeAdaptor(TreeAdaptor adaptor) {
        this.adaptor = adaptor;
    }
    public TreeAdaptor getTreeAdaptor() {
        return adaptor;
    }
    public String[] getTokenNames() { return EsperEPL2GrammarParser.tokenNames; }
    public String getGrammarFileName() { return "EsperEPL2Grammar.g"; }
      private Stack<String> paraphrases = new Stack<String>();
      private static Map<Integer, String> lexerTokenParaphases = new HashMap<Integer, String>();
      private static Map<Integer, String> parserTokenParaphases = new HashMap<Integer, String>();
      private static java.util.Set<String> parserKeywordSet = new java.util.HashSet<String>();
      public Stack getParaphrases() {
        return paraphrases;
      }
      public java.util.Set<String> getKeywords() {
      	getParserTokenParaphrases();
      	return parserKeywordSet;
      }
      public String removeTicks(String tickedString) {
      	return com.espertech.esper.epl.parse.ASTConstantHelper.removeTicks(tickedString);
      }
      public Map<Integer, String> getLexerTokenParaphrases() {
        if (lexerTokenParaphases.size() == 0) {
          	lexerTokenParaphases.put(IDENT, "an identifier");
          	lexerTokenParaphases.put(NUM_INT, "a numeric literal");
    	lexerTokenParaphases.put(FOLLOWED_BY, "an followed-by '->'");
    	lexerTokenParaphases.put(EQUALS, "an equals '='");
    	lexerTokenParaphases.put(SQL_NE, "a sql-style not equals '<>'");
    	lexerTokenParaphases.put(QUESTION, "a questionmark '?'");
    	lexerTokenParaphases.put(LPAREN, "an opening parenthesis '('");
    	lexerTokenParaphases.put(RPAREN, "a closing parenthesis ')'");
    	lexerTokenParaphases.put(LBRACK, "a left angle bracket '['");
    	lexerTokenParaphases.put(RBRACK, "a right angle bracket ']'");
    	lexerTokenParaphases.put(LCURLY, "a left curly bracket '{'");
    	lexerTokenParaphases.put(RCURLY, "a right curly bracket '}'");
    	lexerTokenParaphases.put(COLON, "a colon ':'");
    	lexerTokenParaphases.put(COMMA, "a comma ','");
    	lexerTokenParaphases.put(EQUAL, "an equals compare '=='");
    	lexerTokenParaphases.put(LNOT, "a not '!'");
    	lexerTokenParaphases.put(BNOT, "a binary not '~'");
    	lexerTokenParaphases.put(NOT_EQUAL, "a not equals '!='");
    	lexerTokenParaphases.put(DIV, "a division operator '\'");
    	lexerTokenParaphases.put(DIV_ASSIGN, "a division assign '/='");
    	lexerTokenParaphases.put(PLUS, "a plus operator '+'");
    	lexerTokenParaphases.put(PLUS_ASSIGN, "a plus assign '+='");
    	lexerTokenParaphases.put(INC, "an increment operator '++'");
    	lexerTokenParaphases.put(MINUS, "a minus '-'");
    	lexerTokenParaphases.put(MINUS_ASSIGN, "a minus assign '-='");
    	lexerTokenParaphases.put(DEC, "a decrement operator '--'");
    	lexerTokenParaphases.put(STAR, "a star '*'");
    	lexerTokenParaphases.put(STAR_ASSIGN, "a star assign '*='");
    	lexerTokenParaphases.put(MOD, "a modulo");
    	lexerTokenParaphases.put(MOD_ASSIGN, "a modulo assign");
    	lexerTokenParaphases.put(SR, "a shift right '>>'");
    	lexerTokenParaphases.put(SR_ASSIGN, "a shift right assign '>>='");
    	lexerTokenParaphases.put(BSR, "a binary shift right '>>>'");
    	lexerTokenParaphases.put(BSR_ASSIGN, "a binary shift right assign '>>>='");
    	lexerTokenParaphases.put(GE, "a greater equals '>='");
    	lexerTokenParaphases.put(GT, "a greater then '>'");
    	lexerTokenParaphases.put(SL, "a shift left '<<'");
    	lexerTokenParaphases.put(SL_ASSIGN, "a shift left assign '<<='");
    	lexerTokenParaphases.put(LE, "a less equals '<='");
    	lexerTokenParaphases.put(LT, "a lesser then '<'");
    	lexerTokenParaphases.put(BXOR, "a binary xor '^'");
    	lexerTokenParaphases.put(BXOR_ASSIGN, "a binary xor assign '^='");
    	lexerTokenParaphases.put(BOR, "a binary or '|'");
    	lexerTokenParaphases.put(BOR_ASSIGN, "a binary or assign '|='");
    	lexerTokenParaphases.put(LOR, "a logical or '||'");
    	lexerTokenParaphases.put(BAND, "a binary and '&'");
    	lexerTokenParaphases.put(BAND_ASSIGN, "a binary and assign '&='");
    	lexerTokenParaphases.put(LAND, "a logical and '&&'");
    	lexerTokenParaphases.put(SEMI, "a semicolon ';'");
    	lexerTokenParaphases.put(DOT, "a dot '.'");		
        }
        return lexerTokenParaphases;
      }
      public Map<Integer, String> getParserTokenParaphrases() {
        if (parserTokenParaphases.size() == 0) {
    	parserTokenParaphases.put(CREATE, "'create'");
    	parserTokenParaphases.put(WINDOW, "'window'");
    	parserTokenParaphases.put(IN_SET, "'in'");
    	parserTokenParaphases.put(BETWEEN, "'between'");
    	parserTokenParaphases.put(LIKE, "'like'");
    	parserTokenParaphases.put(REGEXP, "'regexp'");
    	parserTokenParaphases.put(ESCAPE, "'escape'");
    	parserTokenParaphases.put(OR_EXPR, "'or'");
    	parserTokenParaphases.put(AND_EXPR, "'and'");
    	parserTokenParaphases.put(NOT_EXPR, "'not'");
    	parserTokenParaphases.put(EVERY_EXPR, "'every'");
    	parserTokenParaphases.put(EVERY_DISTINCT_EXPR, "'every-distinct'");
    	parserTokenParaphases.put(WHERE, "'where'");
    	parserTokenParaphases.put(AS, "'as'");	
    	parserTokenParaphases.put(SUM, "'sum'");
    	parserTokenParaphases.put(AVG, "'avg'");
    	parserTokenParaphases.put(MAX, "'max'");
    	parserTokenParaphases.put(MIN, "'min'");
    	parserTokenParaphases.put(COALESCE, "'coalesce'");
    	parserTokenParaphases.put(MEDIAN, "'median'");
    	parserTokenParaphases.put(STDDEV, "'stddev'");
    	parserTokenParaphases.put(AVEDEV, "'avedev'");
    	parserTokenParaphases.put(COUNT, "'count'");
    	parserTokenParaphases.put(SELECT, "'select'");
    	parserTokenParaphases.put(CASE, "'case'");
    	parserTokenParaphases.put(CASE2, "'case'");
    	parserTokenParaphases.put(ELSE, "'else'");
    	parserTokenParaphases.put(WHEN, "'when'");
    	parserTokenParaphases.put(THEN, "'then'");
    	parserTokenParaphases.put(END, "'end'");
    	parserTokenParaphases.put(FROM, "'from'");
    	parserTokenParaphases.put(OUTER, "'outer'");
    	parserTokenParaphases.put(INNER, "'inner'");
    	parserTokenParaphases.put(JOIN, "'join'");
    	parserTokenParaphases.put(LEFT, "'left'");
    	parserTokenParaphases.put(RIGHT, "'right'");
    	parserTokenParaphases.put(FULL, "'full'");
    	parserTokenParaphases.put(ON, "'on'");	
    	parserTokenParaphases.put(IS, "'is'");
    	parserTokenParaphases.put(BY, "'by'");
    	parserTokenParaphases.put(GROUP, "'group'");
    	parserTokenParaphases.put(HAVING, "'having'");
    	parserTokenParaphases.put(ALL, "'all'");
    	parserTokenParaphases.put(ANY, "'any'");
    	parserTokenParaphases.put(SOME, "'some'");
    	parserTokenParaphases.put(OUTPUT, "'output'");
    	parserTokenParaphases.put(EVENTS, "'events'");
    	parserTokenParaphases.put(FIRST, "'first'");
    	parserTokenParaphases.put(LAST, "'last'");
    	parserTokenParaphases.put(INSERT, "'insert'");
    	parserTokenParaphases.put(INTO, "'into'");
    	parserTokenParaphases.put(ORDER, "'order'");
    	parserTokenParaphases.put(ASC, "'asc'");
    	parserTokenParaphases.put(DESC, "'desc'");
    	parserTokenParaphases.put(RSTREAM, "'rstream'");
    	parserTokenParaphases.put(ISTREAM, "'istream'");
    	parserTokenParaphases.put(IRSTREAM, "'irstream'");
    	parserTokenParaphases.put(SCHEMA, "'schema'");
    	parserTokenParaphases.put(UNIDIRECTIONAL, "'unidirectional'");
    	parserTokenParaphases.put(RETAINUNION, "'retain-union'");
    	parserTokenParaphases.put(RETAININTERSECTION, "'retain-intersection'");
    	parserTokenParaphases.put(PATTERN, "'pattern'");
    	parserTokenParaphases.put(SQL, "'sql'");
    	parserTokenParaphases.put(METADATASQL, "'metadatasql'");
    	parserTokenParaphases.put(PREVIOUS, "'prev'");
    	parserTokenParaphases.put(PREVIOUSTAIL, "'prevtail'");
    	parserTokenParaphases.put(PREVIOUSCOUNT, "'prevcount'");
    	parserTokenParaphases.put(PREVIOUSWINDOW, "'prevwindow'");
    	parserTokenParaphases.put(PRIOR, "'prior'");
    	parserTokenParaphases.put(EXISTS, "'exists'");
    	parserTokenParaphases.put(WEEKDAY, "'weekday'");
    	parserTokenParaphases.put(LW, "'lastweekday'");
    	parserTokenParaphases.put(INSTANCEOF, "'instanceof'");
    	parserTokenParaphases.put(TYPEOF, "'typeof'");
    	parserTokenParaphases.put(CAST, "'cast'");
    	parserTokenParaphases.put(CURRENT_TIMESTAMP, "'current_timestamp'");
    	parserTokenParaphases.put(DELETE, "'delete'");
    	parserTokenParaphases.put(DISTINCT, "'distinct'");
    	parserTokenParaphases.put(SNAPSHOT, "'snapshot'");
    	parserTokenParaphases.put(SET, "'set'");
    	parserTokenParaphases.put(VARIABLE, "'variable'");
    	parserTokenParaphases.put(INDEX, "'index'");
    	parserTokenParaphases.put(UNTIL, "'until'");
    	parserTokenParaphases.put(AT, "'at'");
    	parserTokenParaphases.put(TIMEPERIOD_YEAR, "'year'");
    	parserTokenParaphases.put(TIMEPERIOD_YEARS, "'years'");
    	parserTokenParaphases.put(TIMEPERIOD_MONTH, "'month'");
    	parserTokenParaphases.put(TIMEPERIOD_MONTHS, "'months'");
    	parserTokenParaphases.put(TIMEPERIOD_WEEK, "'week'");
    	parserTokenParaphases.put(TIMEPERIOD_WEEKS, "'weeks'");
    	parserTokenParaphases.put(TIMEPERIOD_DAY, "'day'");
    	parserTokenParaphases.put(TIMEPERIOD_DAYS, "'days'");
    	parserTokenParaphases.put(TIMEPERIOD_HOUR, "'hour'");
    	parserTokenParaphases.put(TIMEPERIOD_HOURS, "'hours'");
    	parserTokenParaphases.put(TIMEPERIOD_MINUTE, "'minute'");
    	parserTokenParaphases.put(TIMEPERIOD_MINUTES, "'minutes'");
    	parserTokenParaphases.put(TIMEPERIOD_SEC, "'sec'");
    	parserTokenParaphases.put(TIMEPERIOD_SECOND, "'second'");
    	parserTokenParaphases.put(TIMEPERIOD_SECONDS, "'seconds'");
    	parserTokenParaphases.put(TIMEPERIOD_MILLISEC, "'msec'");
    	parserTokenParaphases.put(TIMEPERIOD_MILLISECOND, "'millisecond'");
    	parserTokenParaphases.put(TIMEPERIOD_MILLISECONDS, "'milliseconds'");
    	parserTokenParaphases.put(BOOLEAN_TRUE, "'true'");
    	parserTokenParaphases.put(BOOLEAN_FALSE, "'false'");
    	parserTokenParaphases.put(VALUE_NULL, "'null'");
    	parserTokenParaphases.put(ROW_LIMIT_EXPR, "'limit'");
    	parserTokenParaphases.put(OFFSET, "'offset'");
    	parserTokenParaphases.put(UPDATE, "'update'");
    	parserTokenParaphases.put(MATCH_RECOGNIZE, "'match_recognize'");
    	parserTokenParaphases.put(MEASURES, "'measures'");
    	parserTokenParaphases.put(DEFINE, "'define'");
    	parserTokenParaphases.put(PARTITION, "'partition'");
    	parserTokenParaphases.put(MATCHES, "'matches'");
    	parserTokenParaphases.put(AFTER, "'after'");
    	parserTokenParaphases.put(FOR, "'for'");
    	parserTokenParaphases.put(WHILE, "'while'");
    	parserTokenParaphases.put(MERGE, "'merge'");
    	parserTokenParaphases.put(MATCHED, "'matched'");
    	parserKeywordSet = new java.util.TreeSet<String>(parserTokenParaphases.values());
        }
        return parserTokenParaphases;
      }
      protected void mismatch(IntStream input, int ttype, BitSet follow) throws RecognitionException {
        throw new MismatchedTokenException(ttype, input);  
      }
      public void recoverFromMismatchedToken(IntStream intStream, RecognitionException recognitionException, int i, BitSet bitSet) throws RecognitionException {
        throw recognitionException;
      }
      public Object recoverFromMismatchedSet(IntStream intStream, RecognitionException recognitionException, BitSet bitSet) throws RecognitionException {
        throw recognitionException;
      }
      protected boolean recoverFromMismatchedElement(IntStream intStream, RecognitionException recognitionException, BitSet bitSet) {
        throw new RuntimeException("Error recovering from mismatched element: " + recognitionException.getMessage(), recognitionException);
      }
      public void displayRecognitionError(String[] tokenNames,
                                            RecognitionException e) {
        throw new RuntimeException(e);
      }
    public static class startPatternExpressionRule_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.startPatternExpressionRule_return startPatternExpressionRule() throws RecognitionException {
        EsperEPL2GrammarParser.startPatternExpressionRule_return retval = new EsperEPL2GrammarParser.startPatternExpressionRule_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token EOF4=null;
        EsperEPL2GrammarParser.annotationNoEnum_return annotationNoEnum1 = null;
        EsperEPL2GrammarParser.expressionDecl_return expressionDecl2 = null;
        EsperEPL2GrammarParser.patternExpression_return patternExpression3 = null;
        CommonTree EOF4_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            loop1:
            do {
                int alt1=2;
                int LA1_0 = input.LA(1);
                if ( (LA1_0==EMAILAT) ) {
                    alt1=1;
                }
                switch (alt1) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_annotationNoEnum_in_startPatternExpressionRule1749);
            	    annotationNoEnum1=annotationNoEnum();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationNoEnum1.getTree());
            	    }
            	    break;
            	default :
            	    break loop1;
                }
            } while (true);
            loop2:
            do {
                int alt2=2;
                int LA2_0 = input.LA(1);
                if ( (LA2_0==EXPRESSIONDECL) ) {
                    alt2=1;
                }
                switch (alt2) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_expressionDecl_in_startPatternExpressionRule1754);
            	    expressionDecl2=expressionDecl();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionDecl2.getTree());
            	    }
            	    break;
            	default :
            	    break loop2;
                }
            } while (true);
            pushFollow(FOLLOW_patternExpression_in_startPatternExpressionRule1759);
            patternExpression3=patternExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, patternExpression3.getTree());
            EOF4=(Token)match(input,EOF,FOLLOW_EOF_in_startPatternExpressionRule1763); if (state.failed) return retval;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class startEPLExpressionRule_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.startEPLExpressionRule_return startEPLExpressionRule() throws RecognitionException {
        EsperEPL2GrammarParser.startEPLExpressionRule_return retval = new EsperEPL2GrammarParser.startEPLExpressionRule_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token EOF8=null;
        EsperEPL2GrammarParser.annotationEnum_return annotationEnum5 = null;
        EsperEPL2GrammarParser.expressionDecl_return expressionDecl6 = null;
        EsperEPL2GrammarParser.eplExpression_return eplExpression7 = null;
        CommonTree EOF8_tree=null;
        RewriteRuleTokenStream stream_EOF=new RewriteRuleTokenStream(adaptor,"token EOF");
        RewriteRuleSubtreeStream stream_expressionDecl=new RewriteRuleSubtreeStream(adaptor,"rule expressionDecl");
        RewriteRuleSubtreeStream stream_annotationEnum=new RewriteRuleSubtreeStream(adaptor,"rule annotationEnum");
        RewriteRuleSubtreeStream stream_eplExpression=new RewriteRuleSubtreeStream(adaptor,"rule eplExpression");
        try {
            {
            loop3:
            do {
                int alt3=2;
                int LA3_0 = input.LA(1);
                if ( (LA3_0==EMAILAT) ) {
                    alt3=1;
                }
                switch (alt3) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_annotationEnum_in_startEPLExpressionRule1777);
            	    annotationEnum5=annotationEnum();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_annotationEnum.add(annotationEnum5.getTree());
            	    }
            	    break;
            	default :
            	    break loop3;
                }
            } while (true);
            loop4:
            do {
                int alt4=2;
                int LA4_0 = input.LA(1);
                if ( (LA4_0==EXPRESSIONDECL) ) {
                    alt4=1;
                }
                switch (alt4) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_expressionDecl_in_startEPLExpressionRule1783);
            	    expressionDecl6=expressionDecl();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_expressionDecl.add(expressionDecl6.getTree());
            	    }
            	    break;
            	default :
            	    break loop4;
                }
            } while (true);
            pushFollow(FOLLOW_eplExpression_in_startEPLExpressionRule1788);
            eplExpression7=eplExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eplExpression.add(eplExpression7.getTree());
            EOF8=(Token)match(input,EOF,FOLLOW_EOF_in_startEPLExpressionRule1792); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EOF.add(EOF8);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EPL_EXPR, "EPL_EXPR"), root_1);
                while ( stream_annotationEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_annotationEnum.nextTree());
                }
                stream_annotationEnum.reset();
                while ( stream_expressionDecl.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionDecl.nextTree());
                }
                stream_expressionDecl.reset();
                adaptor.addChild(root_1, stream_eplExpression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class startEventPropertyRule_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.startEventPropertyRule_return startEventPropertyRule() throws RecognitionException {
        EsperEPL2GrammarParser.startEventPropertyRule_return retval = new EsperEPL2GrammarParser.startEventPropertyRule_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token EOF10=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty9 = null;
        CommonTree EOF10_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_eventProperty_in_startEventPropertyRule1821);
            eventProperty9=eventProperty();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty9.getTree());
            EOF10=(Token)match(input,EOF,FOLLOW_EOF_in_startEventPropertyRule1825); if (state.failed) return retval;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class expressionDecl_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.expressionDecl_return expressionDecl() throws RecognitionException {
        EsperEPL2GrammarParser.expressionDecl_return retval = new EsperEPL2GrammarParser.expressionDecl_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token EXPRESSIONDECL11=null;
        Token LCURLY12=null;
        Token RCURLY15=null;
        EsperEPL2GrammarParser.expressionLambdaDecl_return expressionLambdaDecl13 = null;
        EsperEPL2GrammarParser.expression_return expression14 = null;
        CommonTree i_tree=null;
        CommonTree EXPRESSIONDECL11_tree=null;
        CommonTree LCURLY12_tree=null;
        CommonTree RCURLY15_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_EXPRESSIONDECL=new RewriteRuleTokenStream(adaptor,"token EXPRESSIONDECL");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_expressionLambdaDecl=new RewriteRuleSubtreeStream(adaptor,"rule expressionLambdaDecl");
        try {
            {
            EXPRESSIONDECL11=(Token)match(input,EXPRESSIONDECL,FOLLOW_EXPRESSIONDECL_in_expressionDecl1844); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EXPRESSIONDECL.add(EXPRESSIONDECL11);
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_expressionDecl1848); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            LCURLY12=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_expressionDecl1850); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCURLY.add(LCURLY12);
            int alt5=2;
            int LA5_0 = input.LA(1);
            if ( (LA5_0==IDENT) ) {
                int LA5_1 = input.LA(2);
                if ( (LA5_1==GOES) ) {
                    alt5=1;
                }
            }
            else if ( (LA5_0==LPAREN) ) {
                int LA5_2 = input.LA(2);
                if ( (LA5_2==IDENT) ) {
                    int LA5_115 = input.LA(3);
                    if ( (LA5_115==RPAREN) ) {
                        int LA5_193 = input.LA(4);
                        if ( (LA5_193==GOES) ) {
                            alt5=1;
                        }
                    }
                    else if ( (LA5_115==COMMA) ) {
                        alt5=1;
                    }
                }
            }
            switch (alt5) {
                case 1 :
                    {
                    pushFollow(FOLLOW_expressionLambdaDecl_in_expressionDecl1852);
                    expressionLambdaDecl13=expressionLambdaDecl();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expressionLambdaDecl.add(expressionLambdaDecl13.getTree());
                    }
                    break;
            }
            pushFollow(FOLLOW_expression_in_expressionDecl1855);
            expression14=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression14.getTree());
            RCURLY15=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_expressionDecl1857); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCURLY.add(RCURLY15);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_EXPRESSIONDECL.nextNode(), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_expression.nextTree());
                if ( stream_expressionLambdaDecl.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionLambdaDecl.nextTree());
                }
                stream_expressionLambdaDecl.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class expressionLambdaDecl_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.expressionLambdaDecl_return expressionLambdaDecl() throws RecognitionException {
        EsperEPL2GrammarParser.expressionLambdaDecl_return retval = new EsperEPL2GrammarParser.expressionLambdaDecl_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token LPAREN16=null;
        Token RPAREN18=null;
        Token GOES19=null;
        EsperEPL2GrammarParser.columnList_return columnList17 = null;
        CommonTree i_tree=null;
        CommonTree LPAREN16_tree=null;
        CommonTree RPAREN18_tree=null;
        CommonTree GOES19_tree=null;
        RewriteRuleTokenStream stream_GOES=new RewriteRuleTokenStream(adaptor,"token GOES");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_columnList=new RewriteRuleSubtreeStream(adaptor,"rule columnList");
        try {
            {
            int alt6=2;
            int LA6_0 = input.LA(1);
            if ( (LA6_0==IDENT) ) {
                alt6=1;
            }
            else if ( (LA6_0==LPAREN) ) {
                alt6=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 6, 0, input);
                throw nvae;
            }
            switch (alt6) {
                case 1 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_expressionLambdaDecl1891); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 2 :
                    {
                    {
                    LPAREN16=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_expressionLambdaDecl1896); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN16);
                    pushFollow(FOLLOW_columnList_in_expressionLambdaDecl1898);
                    columnList17=columnList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_columnList.add(columnList17.getTree());
                    RPAREN18=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_expressionLambdaDecl1900); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN18);
                    }
                    }
                    break;
            }
            GOES19=(Token)match(input,GOES,FOLLOW_GOES_in_expressionLambdaDecl1904); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_GOES.add(GOES19);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_GOES.nextNode(), root_1);
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                if ( stream_columnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_columnList.nextTree());
                }
                stream_columnList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class annotationNoEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.annotationNoEnum_return annotationNoEnum() throws RecognitionException {
        EsperEPL2GrammarParser.annotationNoEnum_return retval = new EsperEPL2GrammarParser.annotationNoEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token char_literal20=null;
        Token char_literal22=null;
        Token char_literal25=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier21 = null;
        EsperEPL2GrammarParser.elementValuePairsNoEnum_return elementValuePairsNoEnum23 = null;
        EsperEPL2GrammarParser.elementValueNoEnum_return elementValueNoEnum24 = null;
        CommonTree char_literal20_tree=null;
        CommonTree char_literal22_tree=null;
        CommonTree char_literal25_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_EMAILAT=new RewriteRuleTokenStream(adaptor,"token EMAILAT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_elementValuePairsNoEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValuePairsNoEnum");
        RewriteRuleSubtreeStream stream_elementValueNoEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueNoEnum");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            {
            char_literal20=(Token)match(input,EMAILAT,FOLLOW_EMAILAT_in_annotationNoEnum1939); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EMAILAT.add(char_literal20);
            pushFollow(FOLLOW_classIdentifier_in_annotationNoEnum1941);
            classIdentifier21=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier21.getTree());
            int alt8=2;
            int LA8_0 = input.LA(1);
            if ( (LA8_0==LPAREN) ) {
                int LA8_1 = input.LA(2);
                if ( (LA8_1==IDENT) ) {
                    int LA8_10 = input.LA(3);
                    if ( (LA8_10==EQUALS) ) {
                        int LA8_31 = input.LA(4);
                        if ( ((LA8_31>=BOOLEAN_TRUE && LA8_31<=VALUE_NULL)||LA8_31==NUM_DOUBLE||LA8_31==LCURLY||LA8_31==PLUS||(LA8_31>=STRING_LITERAL && LA8_31<=QUOTED_STRING_LITERAL)||LA8_31==MINUS||LA8_31==NUM_INT||(LA8_31>=NUM_LONG && LA8_31<=NUM_FLOAT)||LA8_31==EMAILAT) ) {
                            alt8=1;
                        }
                    }
                }
                else if ( ((LA8_1>=BOOLEAN_TRUE && LA8_1<=VALUE_NULL)||LA8_1==NUM_DOUBLE||LA8_1==LCURLY||LA8_1==RPAREN||LA8_1==PLUS||(LA8_1>=STRING_LITERAL && LA8_1<=QUOTED_STRING_LITERAL)||LA8_1==MINUS||LA8_1==NUM_INT||(LA8_1>=NUM_LONG && LA8_1<=NUM_FLOAT)||LA8_1==EMAILAT) ) {
                    alt8=1;
                }
            }
            switch (alt8) {
                case 1 :
                    {
                    char_literal22=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_annotationNoEnum1945); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(char_literal22);
                    int alt7=3;
                    int LA7_0 = input.LA(1);
                    if ( (LA7_0==IDENT) ) {
                        alt7=1;
                    }
                    else if ( ((LA7_0>=BOOLEAN_TRUE && LA7_0<=VALUE_NULL)||LA7_0==NUM_DOUBLE||LA7_0==LCURLY||LA7_0==PLUS||(LA7_0>=STRING_LITERAL && LA7_0<=QUOTED_STRING_LITERAL)||LA7_0==MINUS||LA7_0==NUM_INT||(LA7_0>=NUM_LONG && LA7_0<=NUM_FLOAT)||LA7_0==EMAILAT) ) {
                        alt7=2;
                    }
                    switch (alt7) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_elementValuePairsNoEnum_in_annotationNoEnum1949);
                            elementValuePairsNoEnum23=elementValuePairsNoEnum();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elementValuePairsNoEnum.add(elementValuePairsNoEnum23.getTree());
                            }
                            break;
                        case 2 :
                            {
                            pushFollow(FOLLOW_elementValueNoEnum_in_annotationNoEnum1953);
                            elementValueNoEnum24=elementValueNoEnum();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elementValueNoEnum.add(elementValueNoEnum24.getTree());
                            }
                            break;
                    }
                    char_literal25=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_annotationNoEnum1958); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(char_literal25);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION, "ANNOTATION"), root_1);
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                if ( stream_elementValuePairsNoEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValuePairsNoEnum.nextTree());
                }
                stream_elementValuePairsNoEnum.reset();
                if ( stream_elementValueNoEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValueNoEnum.nextTree());
                }
                stream_elementValueNoEnum.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class annotationEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.annotationEnum_return annotationEnum() throws RecognitionException {
        EsperEPL2GrammarParser.annotationEnum_return retval = new EsperEPL2GrammarParser.annotationEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token char_literal26=null;
        Token char_literal28=null;
        Token char_literal31=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier27 = null;
        EsperEPL2GrammarParser.elementValuePairsEnum_return elementValuePairsEnum29 = null;
        EsperEPL2GrammarParser.elementValueEnum_return elementValueEnum30 = null;
        CommonTree char_literal26_tree=null;
        CommonTree char_literal28_tree=null;
        CommonTree char_literal31_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_EMAILAT=new RewriteRuleTokenStream(adaptor,"token EMAILAT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_elementValuePairsEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValuePairsEnum");
        RewriteRuleSubtreeStream stream_elementValueEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueEnum");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            {
            char_literal26=(Token)match(input,EMAILAT,FOLLOW_EMAILAT_in_annotationEnum1999); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EMAILAT.add(char_literal26);
            pushFollow(FOLLOW_classIdentifier_in_annotationEnum2001);
            classIdentifier27=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier27.getTree());
            int alt10=2;
            int LA10_0 = input.LA(1);
            if ( (LA10_0==LPAREN) ) {
                alt10=1;
            }
            switch (alt10) {
                case 1 :
                    {
                    char_literal28=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_annotationEnum2005); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(char_literal28);
                    int alt9=3;
                    int LA9_0 = input.LA(1);
                    if ( (LA9_0==IDENT) ) {
                        int LA9_1 = input.LA(2);
                        if ( (LA9_1==EQUALS) ) {
                            alt9=1;
                        }
                        else if ( (LA9_1==RPAREN||LA9_1==DOT) ) {
                            alt9=2;
                        }
                    }
                    else if ( ((LA9_0>=BOOLEAN_TRUE && LA9_0<=VALUE_NULL)||LA9_0==NUM_DOUBLE||LA9_0==LCURLY||LA9_0==PLUS||(LA9_0>=STRING_LITERAL && LA9_0<=QUOTED_STRING_LITERAL)||LA9_0==MINUS||LA9_0==NUM_INT||(LA9_0>=TICKED_STRING_LITERAL && LA9_0<=NUM_FLOAT)||LA9_0==EMAILAT) ) {
                        alt9=2;
                    }
                    switch (alt9) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_elementValuePairsEnum_in_annotationEnum2009);
                            elementValuePairsEnum29=elementValuePairsEnum();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elementValuePairsEnum.add(elementValuePairsEnum29.getTree());
                            }
                            break;
                        case 2 :
                            {
                            pushFollow(FOLLOW_elementValueEnum_in_annotationEnum2013);
                            elementValueEnum30=elementValueEnum();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elementValueEnum.add(elementValueEnum30.getTree());
                            }
                            break;
                    }
                    char_literal31=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_annotationEnum2018); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(char_literal31);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION, "ANNOTATION"), root_1);
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                if ( stream_elementValuePairsEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValuePairsEnum.nextTree());
                }
                stream_elementValuePairsEnum.reset();
                if ( stream_elementValueEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValueEnum.nextTree());
                }
                stream_elementValueEnum.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elementValuePairsNoEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elementValuePairsNoEnum_return elementValuePairsNoEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValuePairsNoEnum_return retval = new EsperEPL2GrammarParser.elementValuePairsNoEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA33=null;
        EsperEPL2GrammarParser.elementValuePairNoEnum_return elementValuePairNoEnum32 = null;
        EsperEPL2GrammarParser.elementValuePairNoEnum_return elementValuePairNoEnum34 = null;
        CommonTree COMMA33_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_elementValuePairNoEnum_in_elementValuePairsNoEnum2059);
            elementValuePairNoEnum32=elementValuePairNoEnum();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValuePairNoEnum32.getTree());
            loop11:
            do {
                int alt11=2;
                int LA11_0 = input.LA(1);
                if ( (LA11_0==COMMA) ) {
                    alt11=1;
                }
                switch (alt11) {
            	case 1 :
            	    {
            	    COMMA33=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValuePairsNoEnum2062); if (state.failed) return retval;
            	    pushFollow(FOLLOW_elementValuePairNoEnum_in_elementValuePairsNoEnum2065);
            	    elementValuePairNoEnum34=elementValuePairNoEnum();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValuePairNoEnum34.getTree());
            	    }
            	    break;
            	default :
            	    break loop11;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elementValuePairsEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elementValuePairsEnum_return elementValuePairsEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValuePairsEnum_return retval = new EsperEPL2GrammarParser.elementValuePairsEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA36=null;
        EsperEPL2GrammarParser.elementValuePairEnum_return elementValuePairEnum35 = null;
        EsperEPL2GrammarParser.elementValuePairEnum_return elementValuePairEnum37 = null;
        CommonTree COMMA36_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_elementValuePairEnum_in_elementValuePairsEnum2086);
            elementValuePairEnum35=elementValuePairEnum();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValuePairEnum35.getTree());
            loop12:
            do {
                int alt12=2;
                int LA12_0 = input.LA(1);
                if ( (LA12_0==COMMA) ) {
                    alt12=1;
                }
                switch (alt12) {
            	case 1 :
            	    {
            	    COMMA36=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValuePairsEnum2089); if (state.failed) return retval;
            	    pushFollow(FOLLOW_elementValuePairEnum_in_elementValuePairsEnum2092);
            	    elementValuePairEnum37=elementValuePairEnum();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValuePairEnum37.getTree());
            	    }
            	    break;
            	default :
            	    break loop12;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elementValuePairNoEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elementValuePairNoEnum_return elementValuePairNoEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValuePairNoEnum_return retval = new EsperEPL2GrammarParser.elementValuePairNoEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token char_literal38=null;
        EsperEPL2GrammarParser.elementValueNoEnum_return elementValueNoEnum39 = null;
        CommonTree i_tree=null;
        CommonTree char_literal38_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleSubtreeStream stream_elementValueNoEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueNoEnum");
        try {
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_elementValuePairNoEnum2115); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            char_literal38=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_elementValuePairNoEnum2117); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EQUALS.add(char_literal38);
            pushFollow(FOLLOW_elementValueNoEnum_in_elementValuePairNoEnum2119);
            elementValueNoEnum39=elementValueNoEnum();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_elementValueNoEnum.add(elementValueNoEnum39.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION_VALUE, "ANNOTATION_VALUE"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_elementValueNoEnum.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elementValuePairEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elementValuePairEnum_return elementValuePairEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValuePairEnum_return retval = new EsperEPL2GrammarParser.elementValuePairEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token char_literal40=null;
        EsperEPL2GrammarParser.elementValueEnum_return elementValueEnum41 = null;
        CommonTree i_tree=null;
        CommonTree char_literal40_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleSubtreeStream stream_elementValueEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueEnum");
        try {
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_elementValuePairEnum2156); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            char_literal40=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_elementValuePairEnum2158); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EQUALS.add(char_literal40);
            pushFollow(FOLLOW_elementValueEnum_in_elementValuePairEnum2160);
            elementValueEnum41=elementValueEnum();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_elementValueEnum.add(elementValueEnum41.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION_VALUE, "ANNOTATION_VALUE"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_elementValueEnum.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elementValueNoEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elementValueNoEnum_return elementValueNoEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValueNoEnum_return retval = new EsperEPL2GrammarParser.elementValueNoEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.annotationEnum_return annotationEnum42 = null;
        EsperEPL2GrammarParser.elementValueArrayNoEnum_return elementValueArrayNoEnum43 = null;
        EsperEPL2GrammarParser.constant_return constant44 = null;
        RewriteRuleSubtreeStream stream_elementValueArrayNoEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueArrayNoEnum");
        try {
            int alt13=3;
            switch ( input.LA(1) ) {
            case EMAILAT:
                {
                alt13=1;
                }
                break;
            case LCURLY:
                {
                alt13=2;
                }
                break;
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case NUM_DOUBLE:
            case PLUS:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt13=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 13, 0, input);
                throw nvae;
            }
            switch (alt13) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_annotationEnum_in_elementValueNoEnum2191);
                    annotationEnum42=annotationEnum();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationEnum42.getTree());
                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_elementValueArrayNoEnum_in_elementValueNoEnum2202);
                    elementValueArrayNoEnum43=elementValueArrayNoEnum();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_elementValueArrayNoEnum.add(elementValueArrayNoEnum43.getTree());
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, stream_elementValueArrayNoEnum.nextTree());
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_constant_in_elementValueNoEnum2215);
                    constant44=constant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constant44.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elementValueEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elementValueEnum_return elementValueEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValueEnum_return retval = new EsperEPL2GrammarParser.elementValueEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.annotationEnum_return annotationEnum45 = null;
        EsperEPL2GrammarParser.elementValueArrayEnum_return elementValueArrayEnum46 = null;
        EsperEPL2GrammarParser.constant_return constant47 = null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier48 = null;
        RewriteRuleSubtreeStream stream_elementValueArrayEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueArrayEnum");
        try {
            int alt14=4;
            switch ( input.LA(1) ) {
            case EMAILAT:
                {
                alt14=1;
                }
                break;
            case LCURLY:
                {
                alt14=2;
                }
                break;
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case NUM_DOUBLE:
            case PLUS:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt14=3;
                }
                break;
            case IDENT:
            case TICKED_STRING_LITERAL:
                {
                alt14=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 14, 0, input);
                throw nvae;
            }
            switch (alt14) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_annotationEnum_in_elementValueEnum2238);
                    annotationEnum45=annotationEnum();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationEnum45.getTree());
                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_elementValueArrayEnum_in_elementValueEnum2249);
                    elementValueArrayEnum46=elementValueArrayEnum();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_elementValueArrayEnum.add(elementValueArrayEnum46.getTree());
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, stream_elementValueArrayEnum.nextTree());
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_constant_in_elementValueEnum2262);
                    constant47=constant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constant47.getTree());
                    }
                    break;
                case 4 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_classIdentifier_in_elementValueEnum2270);
                    classIdentifier48=classIdentifier();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier48.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elementValueArrayNoEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elementValueArrayNoEnum_return elementValueArrayNoEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValueArrayNoEnum_return retval = new EsperEPL2GrammarParser.elementValueArrayNoEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token char_literal49=null;
        Token char_literal51=null;
        Token char_literal53=null;
        Token char_literal54=null;
        EsperEPL2GrammarParser.elementValueNoEnum_return elementValueNoEnum50 = null;
        EsperEPL2GrammarParser.elementValueNoEnum_return elementValueNoEnum52 = null;
        CommonTree char_literal49_tree=null;
        CommonTree char_literal51_tree=null;
        CommonTree char_literal53_tree=null;
        CommonTree char_literal54_tree=null;
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_elementValueNoEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueNoEnum");
        try {
            {
            char_literal49=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_elementValueArrayNoEnum2290); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCURLY.add(char_literal49);
            int alt16=2;
            int LA16_0 = input.LA(1);
            if ( ((LA16_0>=BOOLEAN_TRUE && LA16_0<=VALUE_NULL)||LA16_0==NUM_DOUBLE||LA16_0==LCURLY||LA16_0==PLUS||(LA16_0>=STRING_LITERAL && LA16_0<=QUOTED_STRING_LITERAL)||LA16_0==MINUS||LA16_0==NUM_INT||(LA16_0>=NUM_LONG && LA16_0<=NUM_FLOAT)||LA16_0==EMAILAT) ) {
                alt16=1;
            }
            switch (alt16) {
                case 1 :
                    {
                    pushFollow(FOLLOW_elementValueNoEnum_in_elementValueArrayNoEnum2293);
                    elementValueNoEnum50=elementValueNoEnum();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_elementValueNoEnum.add(elementValueNoEnum50.getTree());
                    loop15:
                    do {
                        int alt15=2;
                        int LA15_0 = input.LA(1);
                        if ( (LA15_0==COMMA) ) {
                            int LA15_1 = input.LA(2);
                            if ( ((LA15_1>=BOOLEAN_TRUE && LA15_1<=VALUE_NULL)||LA15_1==NUM_DOUBLE||LA15_1==LCURLY||LA15_1==PLUS||(LA15_1>=STRING_LITERAL && LA15_1<=QUOTED_STRING_LITERAL)||LA15_1==MINUS||LA15_1==NUM_INT||(LA15_1>=NUM_LONG && LA15_1<=NUM_FLOAT)||LA15_1==EMAILAT) ) {
                                alt15=1;
                            }
                        }
                        switch (alt15) {
                    	case 1 :
                    	    {
                    	    char_literal51=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValueArrayNoEnum2296); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(char_literal51);
                    	    pushFollow(FOLLOW_elementValueNoEnum_in_elementValueArrayNoEnum2298);
                    	    elementValueNoEnum52=elementValueNoEnum();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_elementValueNoEnum.add(elementValueNoEnum52.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop15;
                        }
                    } while (true);
                    }
                    break;
            }
            int alt17=2;
            int LA17_0 = input.LA(1);
            if ( (LA17_0==COMMA) ) {
                alt17=1;
            }
            switch (alt17) {
                case 1 :
                    {
                    char_literal53=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValueArrayNoEnum2305); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(char_literal53);
                    }
                    break;
            }
            char_literal54=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_elementValueArrayNoEnum2309); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCURLY.add(char_literal54);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION_ARRAY, "ANNOTATION_ARRAY"), root_1);
                while ( stream_elementValueNoEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValueNoEnum.nextTree());
                }
                stream_elementValueNoEnum.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elementValueArrayEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elementValueArrayEnum_return elementValueArrayEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValueArrayEnum_return retval = new EsperEPL2GrammarParser.elementValueArrayEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token char_literal55=null;
        Token char_literal57=null;
        Token char_literal59=null;
        Token char_literal60=null;
        EsperEPL2GrammarParser.elementValueEnum_return elementValueEnum56 = null;
        EsperEPL2GrammarParser.elementValueEnum_return elementValueEnum58 = null;
        CommonTree char_literal55_tree=null;
        CommonTree char_literal57_tree=null;
        CommonTree char_literal59_tree=null;
        CommonTree char_literal60_tree=null;
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_elementValueEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueEnum");
        try {
            {
            char_literal55=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_elementValueArrayEnum2338); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCURLY.add(char_literal55);
            int alt19=2;
            int LA19_0 = input.LA(1);
            if ( ((LA19_0>=BOOLEAN_TRUE && LA19_0<=VALUE_NULL)||LA19_0==NUM_DOUBLE||(LA19_0>=IDENT && LA19_0<=LCURLY)||LA19_0==PLUS||(LA19_0>=STRING_LITERAL && LA19_0<=QUOTED_STRING_LITERAL)||LA19_0==MINUS||LA19_0==NUM_INT||(LA19_0>=TICKED_STRING_LITERAL && LA19_0<=NUM_FLOAT)||LA19_0==EMAILAT) ) {
                alt19=1;
            }
            switch (alt19) {
                case 1 :
                    {
                    pushFollow(FOLLOW_elementValueEnum_in_elementValueArrayEnum2341);
                    elementValueEnum56=elementValueEnum();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_elementValueEnum.add(elementValueEnum56.getTree());
                    loop18:
                    do {
                        int alt18=2;
                        int LA18_0 = input.LA(1);
                        if ( (LA18_0==COMMA) ) {
                            int LA18_1 = input.LA(2);
                            if ( ((LA18_1>=BOOLEAN_TRUE && LA18_1<=VALUE_NULL)||LA18_1==NUM_DOUBLE||(LA18_1>=IDENT && LA18_1<=LCURLY)||LA18_1==PLUS||(LA18_1>=STRING_LITERAL && LA18_1<=QUOTED_STRING_LITERAL)||LA18_1==MINUS||LA18_1==NUM_INT||(LA18_1>=TICKED_STRING_LITERAL && LA18_1<=NUM_FLOAT)||LA18_1==EMAILAT) ) {
                                alt18=1;
                            }
                        }
                        switch (alt18) {
                    	case 1 :
                    	    {
                    	    char_literal57=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValueArrayEnum2344); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(char_literal57);
                    	    pushFollow(FOLLOW_elementValueEnum_in_elementValueArrayEnum2346);
                    	    elementValueEnum58=elementValueEnum();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_elementValueEnum.add(elementValueEnum58.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop18;
                        }
                    } while (true);
                    }
                    break;
            }
            int alt20=2;
            int LA20_0 = input.LA(1);
            if ( (LA20_0==COMMA) ) {
                alt20=1;
            }
            switch (alt20) {
                case 1 :
                    {
                    char_literal59=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValueArrayEnum2353); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(char_literal59);
                    }
                    break;
            }
            char_literal60=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_elementValueArrayEnum2357); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCURLY.add(char_literal60);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION_ARRAY, "ANNOTATION_ARRAY"), root_1);
                while ( stream_elementValueEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValueEnum.nextTree());
                }
                stream_elementValueEnum.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class eplExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.eplExpression_return eplExpression() throws RecognitionException {
        EsperEPL2GrammarParser.eplExpression_return retval = new EsperEPL2GrammarParser.eplExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.selectExpr_return selectExpr61 = null;
        EsperEPL2GrammarParser.createWindowExpr_return createWindowExpr62 = null;
        EsperEPL2GrammarParser.createIndexExpr_return createIndexExpr63 = null;
        EsperEPL2GrammarParser.createVariableExpr_return createVariableExpr64 = null;
        EsperEPL2GrammarParser.createSchemaExpr_return createSchemaExpr65 = null;
        EsperEPL2GrammarParser.onExpr_return onExpr66 = null;
        EsperEPL2GrammarParser.updateExpr_return updateExpr67 = null;
        EsperEPL2GrammarParser.forExpr_return forExpr68 = null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            int alt21=7;
            switch ( input.LA(1) ) {
            case SELECT:
            case INSERT:
                {
                alt21=1;
                }
                break;
            case CREATE:
                {
                switch ( input.LA(2) ) {
                case WINDOW:
                    {
                    alt21=2;
                    }
                    break;
                case INDEX:
                    {
                    alt21=3;
                    }
                    break;
                case VARIABLE:
                    {
                    alt21=4;
                    }
                    break;
                case SCHEMA:
                case IDENT:
                    {
                    alt21=5;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 21, 3, input);
                    throw nvae;
                }
                }
                break;
            case ON:
                {
                alt21=6;
                }
                break;
            case UPDATE:
                {
                alt21=7;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 21, 0, input);
                throw nvae;
            }
            switch (alt21) {
                case 1 :
                    {
                    pushFollow(FOLLOW_selectExpr_in_eplExpression2390);
                    selectExpr61=selectExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, selectExpr61.getTree());
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_createWindowExpr_in_eplExpression2395);
                    createWindowExpr62=createWindowExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createWindowExpr62.getTree());
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_createIndexExpr_in_eplExpression2400);
                    createIndexExpr63=createIndexExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createIndexExpr63.getTree());
                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_createVariableExpr_in_eplExpression2405);
                    createVariableExpr64=createVariableExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createVariableExpr64.getTree());
                    }
                    break;
                case 5 :
                    {
                    pushFollow(FOLLOW_createSchemaExpr_in_eplExpression2410);
                    createSchemaExpr65=createSchemaExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createSchemaExpr65.getTree());
                    }
                    break;
                case 6 :
                    {
                    pushFollow(FOLLOW_onExpr_in_eplExpression2415);
                    onExpr66=onExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, onExpr66.getTree());
                    }
                    break;
                case 7 :
                    {
                    pushFollow(FOLLOW_updateExpr_in_eplExpression2420);
                    updateExpr67=updateExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, updateExpr67.getTree());
                    }
                    break;
            }
            int alt22=2;
            int LA22_0 = input.LA(1);
            if ( (LA22_0==FOR) ) {
                alt22=1;
            }
            switch (alt22) {
                case 1 :
                    {
                    pushFollow(FOLLOW_forExpr_in_eplExpression2423);
                    forExpr68=forExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, forExpr68.getTree());
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class selectExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.selectExpr_return selectExpr() throws RecognitionException {
        EsperEPL2GrammarParser.selectExpr_return retval = new EsperEPL2GrammarParser.selectExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token INSERT69=null;
        Token SELECT71=null;
        Token FROM73=null;
        Token WHERE76=null;
        Token GROUP78=null;
        Token BY79=null;
        Token HAVING81=null;
        Token OUTPUT83=null;
        Token ORDER85=null;
        Token BY86=null;
        Token ROW_LIMIT_EXPR88=null;
        EsperEPL2GrammarParser.insertIntoExpr_return insertIntoExpr70 = null;
        EsperEPL2GrammarParser.selectClause_return selectClause72 = null;
        EsperEPL2GrammarParser.fromClause_return fromClause74 = null;
        EsperEPL2GrammarParser.matchRecog_return matchRecog75 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause77 = null;
        EsperEPL2GrammarParser.groupByListExpr_return groupByListExpr80 = null;
        EsperEPL2GrammarParser.havingClause_return havingClause82 = null;
        EsperEPL2GrammarParser.outputLimit_return outputLimit84 = null;
        EsperEPL2GrammarParser.orderByListExpr_return orderByListExpr87 = null;
        EsperEPL2GrammarParser.rowLimit_return rowLimit89 = null;
        CommonTree INSERT69_tree=null;
        CommonTree SELECT71_tree=null;
        CommonTree FROM73_tree=null;
        CommonTree WHERE76_tree=null;
        CommonTree GROUP78_tree=null;
        CommonTree BY79_tree=null;
        CommonTree HAVING81_tree=null;
        CommonTree OUTPUT83_tree=null;
        CommonTree ORDER85_tree=null;
        CommonTree BY86_tree=null;
        CommonTree ROW_LIMIT_EXPR88_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            int alt23=2;
            int LA23_0 = input.LA(1);
            if ( (LA23_0==INSERT) ) {
                alt23=1;
            }
            switch (alt23) {
                case 1 :
                    {
                    INSERT69=(Token)match(input,INSERT,FOLLOW_INSERT_in_selectExpr2437); if (state.failed) return retval;
                    pushFollow(FOLLOW_insertIntoExpr_in_selectExpr2440);
                    insertIntoExpr70=insertIntoExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, insertIntoExpr70.getTree());
                    }
                    break;
            }
            SELECT71=(Token)match(input,SELECT,FOLLOW_SELECT_in_selectExpr2446); if (state.failed) return retval;
            pushFollow(FOLLOW_selectClause_in_selectExpr2449);
            selectClause72=selectClause();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, selectClause72.getTree());
            FROM73=(Token)match(input,FROM,FOLLOW_FROM_in_selectExpr2453); if (state.failed) return retval;
            pushFollow(FOLLOW_fromClause_in_selectExpr2456);
            fromClause74=fromClause();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, fromClause74.getTree());
            int alt24=2;
            int LA24_0 = input.LA(1);
            if ( (LA24_0==MATCH_RECOGNIZE) ) {
                alt24=1;
            }
            switch (alt24) {
                case 1 :
                    {
                    pushFollow(FOLLOW_matchRecog_in_selectExpr2460);
                    matchRecog75=matchRecog();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, matchRecog75.getTree());
                    }
                    break;
            }
            int alt25=2;
            int LA25_0 = input.LA(1);
            if ( (LA25_0==WHERE) ) {
                alt25=1;
            }
            switch (alt25) {
                case 1 :
                    {
                    WHERE76=(Token)match(input,WHERE,FOLLOW_WHERE_in_selectExpr2466); if (state.failed) return retval;
                    pushFollow(FOLLOW_whereClause_in_selectExpr2469);
                    whereClause77=whereClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, whereClause77.getTree());
                    }
                    break;
            }
            int alt26=2;
            int LA26_0 = input.LA(1);
            if ( (LA26_0==GROUP) ) {
                alt26=1;
            }
            switch (alt26) {
                case 1 :
                    {
                    GROUP78=(Token)match(input,GROUP,FOLLOW_GROUP_in_selectExpr2476); if (state.failed) return retval;
                    BY79=(Token)match(input,BY,FOLLOW_BY_in_selectExpr2479); if (state.failed) return retval;
                    pushFollow(FOLLOW_groupByListExpr_in_selectExpr2482);
                    groupByListExpr80=groupByListExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, groupByListExpr80.getTree());
                    }
                    break;
            }
            int alt27=2;
            int LA27_0 = input.LA(1);
            if ( (LA27_0==HAVING) ) {
                alt27=1;
            }
            switch (alt27) {
                case 1 :
                    {
                    HAVING81=(Token)match(input,HAVING,FOLLOW_HAVING_in_selectExpr2489); if (state.failed) return retval;
                    pushFollow(FOLLOW_havingClause_in_selectExpr2492);
                    havingClause82=havingClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, havingClause82.getTree());
                    }
                    break;
            }
            int alt28=2;
            int LA28_0 = input.LA(1);
            if ( (LA28_0==OUTPUT) ) {
                alt28=1;
            }
            switch (alt28) {
                case 1 :
                    {
                    OUTPUT83=(Token)match(input,OUTPUT,FOLLOW_OUTPUT_in_selectExpr2499); if (state.failed) return retval;
                    pushFollow(FOLLOW_outputLimit_in_selectExpr2502);
                    outputLimit84=outputLimit();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, outputLimit84.getTree());
                    }
                    break;
            }
            int alt29=2;
            int LA29_0 = input.LA(1);
            if ( (LA29_0==ORDER) ) {
                alt29=1;
            }
            switch (alt29) {
                case 1 :
                    {
                    ORDER85=(Token)match(input,ORDER,FOLLOW_ORDER_in_selectExpr2509); if (state.failed) return retval;
                    BY86=(Token)match(input,BY,FOLLOW_BY_in_selectExpr2512); if (state.failed) return retval;
                    pushFollow(FOLLOW_orderByListExpr_in_selectExpr2515);
                    orderByListExpr87=orderByListExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, orderByListExpr87.getTree());
                    }
                    break;
            }
            int alt30=2;
            int LA30_0 = input.LA(1);
            if ( (LA30_0==ROW_LIMIT_EXPR) ) {
                alt30=1;
            }
            switch (alt30) {
                case 1 :
                    {
                    ROW_LIMIT_EXPR88=(Token)match(input,ROW_LIMIT_EXPR,FOLLOW_ROW_LIMIT_EXPR_in_selectExpr2522); if (state.failed) return retval;
                    pushFollow(FOLLOW_rowLimit_in_selectExpr2525);
                    rowLimit89=rowLimit();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rowLimit89.getTree());
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onExpr_return onExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onExpr_return retval = new EsperEPL2GrammarParser.onExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ON90=null;
        EsperEPL2GrammarParser.onStreamExpr_return onStreamExpr91 = null;
        EsperEPL2GrammarParser.onDeleteExpr_return onDeleteExpr92 = null;
        EsperEPL2GrammarParser.onSelectExpr_return onSelectExpr93 = null;
        EsperEPL2GrammarParser.onSelectInsertExpr_return onSelectInsertExpr94 = null;
        EsperEPL2GrammarParser.outputClauseInsert_return outputClauseInsert95 = null;
        EsperEPL2GrammarParser.onSetExpr_return onSetExpr96 = null;
        EsperEPL2GrammarParser.onUpdateExpr_return onUpdateExpr97 = null;
        EsperEPL2GrammarParser.onMergeExpr_return onMergeExpr98 = null;
        CommonTree ON90_tree=null;
        RewriteRuleTokenStream stream_ON=new RewriteRuleTokenStream(adaptor,"token ON");
        RewriteRuleSubtreeStream stream_onMergeExpr=new RewriteRuleSubtreeStream(adaptor,"rule onMergeExpr");
        RewriteRuleSubtreeStream stream_onStreamExpr=new RewriteRuleSubtreeStream(adaptor,"rule onStreamExpr");
        RewriteRuleSubtreeStream stream_onSelectExpr=new RewriteRuleSubtreeStream(adaptor,"rule onSelectExpr");
        RewriteRuleSubtreeStream stream_onDeleteExpr=new RewriteRuleSubtreeStream(adaptor,"rule onDeleteExpr");
        RewriteRuleSubtreeStream stream_onSelectInsertExpr=new RewriteRuleSubtreeStream(adaptor,"rule onSelectInsertExpr");
        RewriteRuleSubtreeStream stream_outputClauseInsert=new RewriteRuleSubtreeStream(adaptor,"rule outputClauseInsert");
        RewriteRuleSubtreeStream stream_onSetExpr=new RewriteRuleSubtreeStream(adaptor,"rule onSetExpr");
        RewriteRuleSubtreeStream stream_onUpdateExpr=new RewriteRuleSubtreeStream(adaptor,"rule onUpdateExpr");
        try {
            {
            ON90=(Token)match(input,ON,FOLLOW_ON_in_onExpr2540); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ON.add(ON90);
            pushFollow(FOLLOW_onStreamExpr_in_onExpr2542);
            onStreamExpr91=onStreamExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_onStreamExpr.add(onStreamExpr91.getTree());
            int alt34=5;
            switch ( input.LA(1) ) {
            case DELETE:
                {
                alt34=1;
                }
                break;
            case SELECT:
            case INSERT:
                {
                alt34=2;
                }
                break;
            case SET:
                {
                alt34=3;
                }
                break;
            case UPDATE:
                {
                alt34=4;
                }
                break;
            case MERGE:
                {
                alt34=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 34, 0, input);
                throw nvae;
            }
            switch (alt34) {
                case 1 :
                    {
                    pushFollow(FOLLOW_onDeleteExpr_in_onExpr2547);
                    onDeleteExpr92=onDeleteExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onDeleteExpr.add(onDeleteExpr92.getTree());
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_onSelectExpr_in_onExpr2551);
                    onSelectExpr93=onSelectExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onSelectExpr.add(onSelectExpr93.getTree());
                    int alt33=2;
                    int LA33_0 = input.LA(1);
                    if ( (LA33_0==INSERT) ) {
                        alt33=1;
                    }
                    switch (alt33) {
                        case 1 :
                            {
                            int cnt31=0;
                            loop31:
                            do {
                                int alt31=2;
                                int LA31_0 = input.LA(1);
                                if ( (LA31_0==INSERT) ) {
                                    alt31=1;
                                }
                                switch (alt31) {
                            	case 1 :
                            	    {
                            	    pushFollow(FOLLOW_onSelectInsertExpr_in_onExpr2554);
                            	    onSelectInsertExpr94=onSelectInsertExpr();
                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_onSelectInsertExpr.add(onSelectInsertExpr94.getTree());
                            	    }
                            	    break;
                            	default :
                            	    if ( cnt31 >= 1 ) break loop31;
                            	    if (state.backtracking>0) {state.failed=true; return retval;}
                                        EarlyExitException eee =
                                            new EarlyExitException(31, input);
                                        throw eee;
                                }
                                cnt31++;
                            } while (true);
                            int alt32=2;
                            int LA32_0 = input.LA(1);
                            if ( (LA32_0==OUTPUT) ) {
                                alt32=1;
                            }
                            switch (alt32) {
                                case 1 :
                                    {
                                    pushFollow(FOLLOW_outputClauseInsert_in_onExpr2557);
                                    outputClauseInsert95=outputClauseInsert();
                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_outputClauseInsert.add(outputClauseInsert95.getTree());
                                    }
                                    break;
                            }
                            }
                            break;
                    }
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_onSetExpr_in_onExpr2564);
                    onSetExpr96=onSetExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onSetExpr.add(onSetExpr96.getTree());
                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_onUpdateExpr_in_onExpr2568);
                    onUpdateExpr97=onUpdateExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onUpdateExpr.add(onUpdateExpr97.getTree());
                    }
                    break;
                case 5 :
                    {
                    pushFollow(FOLLOW_onMergeExpr_in_onExpr2572);
                    onMergeExpr98=onMergeExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onMergeExpr.add(onMergeExpr98.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_EXPR, "ON_EXPR"), root_1);
                adaptor.addChild(root_1, stream_onStreamExpr.nextTree());
                if ( stream_onDeleteExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onDeleteExpr.nextTree());
                }
                stream_onDeleteExpr.reset();
                if ( stream_onSelectExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSelectExpr.nextTree());
                }
                stream_onSelectExpr.reset();
                while ( stream_onSelectInsertExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSelectInsertExpr.nextTree());
                }
                stream_onSelectInsertExpr.reset();
                if ( stream_outputClauseInsert.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputClauseInsert.nextTree());
                }
                stream_outputClauseInsert.reset();
                if ( stream_onSetExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetExpr.nextTree());
                }
                stream_onSetExpr.reset();
                if ( stream_onUpdateExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onUpdateExpr.nextTree());
                }
                stream_onUpdateExpr.reset();
                if ( stream_onMergeExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onMergeExpr.nextTree());
                }
                stream_onMergeExpr.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onStreamExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onStreamExpr_return onStreamExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onStreamExpr_return retval = new EsperEPL2GrammarParser.onStreamExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token AS101=null;
        EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression99 = null;
        EsperEPL2GrammarParser.patternInclusionExpression_return patternInclusionExpression100 = null;
        CommonTree i_tree=null;
        CommonTree AS101_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_eventFilterExpression=new RewriteRuleSubtreeStream(adaptor,"rule eventFilterExpression");
        RewriteRuleSubtreeStream stream_patternInclusionExpression=new RewriteRuleSubtreeStream(adaptor,"rule patternInclusionExpression");
        try {
            {
            int alt35=2;
            int LA35_0 = input.LA(1);
            if ( (LA35_0==IDENT||LA35_0==TICKED_STRING_LITERAL) ) {
                alt35=1;
            }
            else if ( (LA35_0==PATTERN) ) {
                alt35=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 35, 0, input);
                throw nvae;
            }
            switch (alt35) {
                case 1 :
                    {
                    pushFollow(FOLLOW_eventFilterExpression_in_onStreamExpr2617);
                    eventFilterExpression99=eventFilterExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_eventFilterExpression.add(eventFilterExpression99.getTree());
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_patternInclusionExpression_in_onStreamExpr2621);
                    patternInclusionExpression100=patternInclusionExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_patternInclusionExpression.add(patternInclusionExpression100.getTree());
                    }
                    break;
            }
            int alt36=3;
            int LA36_0 = input.LA(1);
            if ( (LA36_0==AS) ) {
                alt36=1;
            }
            else if ( (LA36_0==IDENT) ) {
                alt36=2;
            }
            switch (alt36) {
                case 1 :
                    {
                    AS101=(Token)match(input,AS,FOLLOW_AS_in_onStreamExpr2625); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS101);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onStreamExpr2629); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onStreamExpr2635); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_STREAM, "ON_STREAM"), root_1);
                if ( stream_eventFilterExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_eventFilterExpression.nextTree());
                }
                stream_eventFilterExpression.reset();
                if ( stream_patternInclusionExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_patternInclusionExpression.nextTree());
                }
                stream_patternInclusionExpression.reset();
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class updateExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.updateExpr_return updateExpr() throws RecognitionException {
        EsperEPL2GrammarParser.updateExpr_return retval = new EsperEPL2GrammarParser.updateExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token UPDATE102=null;
        Token ISTREAM103=null;
        Token AS105=null;
        Token SET106=null;
        Token COMMA108=null;
        Token WHERE110=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier104 = null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment107 = null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment109 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause111 = null;
        CommonTree i_tree=null;
        CommonTree UPDATE102_tree=null;
        CommonTree ISTREAM103_tree=null;
        CommonTree AS105_tree=null;
        CommonTree SET106_tree=null;
        CommonTree COMMA108_tree=null;
        CommonTree WHERE110_tree=null;
        RewriteRuleTokenStream stream_UPDATE=new RewriteRuleTokenStream(adaptor,"token UPDATE");
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_SET=new RewriteRuleTokenStream(adaptor,"token SET");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_ISTREAM=new RewriteRuleTokenStream(adaptor,"token ISTREAM");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_onSetAssignment=new RewriteRuleSubtreeStream(adaptor,"rule onSetAssignment");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            {
            UPDATE102=(Token)match(input,UPDATE,FOLLOW_UPDATE_in_updateExpr2666); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_UPDATE.add(UPDATE102);
            ISTREAM103=(Token)match(input,ISTREAM,FOLLOW_ISTREAM_in_updateExpr2668); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ISTREAM.add(ISTREAM103);
            pushFollow(FOLLOW_classIdentifier_in_updateExpr2670);
            classIdentifier104=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier104.getTree());
            int alt37=3;
            int LA37_0 = input.LA(1);
            if ( (LA37_0==AS) ) {
                alt37=1;
            }
            else if ( (LA37_0==IDENT) ) {
                alt37=2;
            }
            switch (alt37) {
                case 1 :
                    {
                    AS105=(Token)match(input,AS,FOLLOW_AS_in_updateExpr2673); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS105);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_updateExpr2677); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_updateExpr2683); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            SET106=(Token)match(input,SET,FOLLOW_SET_in_updateExpr2689); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SET.add(SET106);
            pushFollow(FOLLOW_onSetAssignment_in_updateExpr2691);
            onSetAssignment107=onSetAssignment();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment107.getTree());
            loop38:
            do {
                int alt38=2;
                int LA38_0 = input.LA(1);
                if ( (LA38_0==COMMA) ) {
                    alt38=1;
                }
                switch (alt38) {
            	case 1 :
            	    {
            	    COMMA108=(Token)match(input,COMMA,FOLLOW_COMMA_in_updateExpr2694); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA108);
            	    pushFollow(FOLLOW_onSetAssignment_in_updateExpr2696);
            	    onSetAssignment109=onSetAssignment();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment109.getTree());
            	    }
            	    break;
            	default :
            	    break loop38;
                }
            } while (true);
            int alt39=2;
            int LA39_0 = input.LA(1);
            if ( (LA39_0==WHERE) ) {
                alt39=1;
            }
            switch (alt39) {
                case 1 :
                    {
                    WHERE110=(Token)match(input,WHERE,FOLLOW_WHERE_in_updateExpr2704); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE110);
                    pushFollow(FOLLOW_whereClause_in_updateExpr2706);
                    whereClause111=whereClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause111.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(UPDATE_EXPR, "UPDATE_EXPR"), root_1);
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                if ( !(stream_onSetAssignment.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_onSetAssignment.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetAssignment.nextTree());
                }
                stream_onSetAssignment.reset();
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());
                }
                stream_whereClause.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onMergeExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onMergeExpr_return onMergeExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onMergeExpr_return retval = new EsperEPL2GrammarParser.onMergeExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token n=null;
        Token i=null;
        Token MERGE112=null;
        Token INTO113=null;
        Token AS114=null;
        Token WHERE115=null;
        EsperEPL2GrammarParser.whereClause_return whereClause116 = null;
        EsperEPL2GrammarParser.mergeItem_return mergeItem117 = null;
        CommonTree n_tree=null;
        CommonTree i_tree=null;
        CommonTree MERGE112_tree=null;
        CommonTree INTO113_tree=null;
        CommonTree AS114_tree=null;
        CommonTree WHERE115_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_INTO=new RewriteRuleTokenStream(adaptor,"token INTO");
        RewriteRuleTokenStream stream_MERGE=new RewriteRuleTokenStream(adaptor,"token MERGE");
        RewriteRuleSubtreeStream stream_mergeItem=new RewriteRuleSubtreeStream(adaptor,"rule mergeItem");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        try {
            {
            MERGE112=(Token)match(input,MERGE,FOLLOW_MERGE_in_onMergeExpr2741); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MERGE.add(MERGE112);
            int alt40=2;
            int LA40_0 = input.LA(1);
            if ( (LA40_0==INTO) ) {
                alt40=1;
            }
            switch (alt40) {
                case 1 :
                    {
                    INTO113=(Token)match(input,INTO,FOLLOW_INTO_in_onMergeExpr2743); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INTO.add(INTO113);
                    }
                    break;
            }
            n=(Token)match(input,IDENT,FOLLOW_IDENT_in_onMergeExpr2748); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(n);
            int alt41=3;
            int LA41_0 = input.LA(1);
            if ( (LA41_0==AS) ) {
                alt41=1;
            }
            else if ( (LA41_0==IDENT) ) {
                alt41=2;
            }
            switch (alt41) {
                case 1 :
                    {
                    AS114=(Token)match(input,AS,FOLLOW_AS_in_onMergeExpr2751); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS114);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onMergeExpr2755); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onMergeExpr2761); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            int alt42=2;
            int LA42_0 = input.LA(1);
            if ( (LA42_0==WHERE) ) {
                alt42=1;
            }
            switch (alt42) {
                case 1 :
                    {
                    WHERE115=(Token)match(input,WHERE,FOLLOW_WHERE_in_onMergeExpr2768); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE115);
                    pushFollow(FOLLOW_whereClause_in_onMergeExpr2770);
                    whereClause116=whereClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause116.getTree());
                    }
                    break;
            }
            int cnt43=0;
            loop43:
            do {
                int alt43=2;
                int LA43_0 = input.LA(1);
                if ( (LA43_0==WHEN) ) {
                    alt43=1;
                }
                switch (alt43) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_mergeItem_in_onMergeExpr2778);
            	    mergeItem117=mergeItem();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_mergeItem.add(mergeItem117.getTree());
            	    }
            	    break;
            	default :
            	    if ( cnt43 >= 1 ) break loop43;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(43, input);
                        throw eee;
                }
                cnt43++;
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_n=new RewriteRuleTokenStream(adaptor,"token n",n);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_MERGE_EXPR, "ON_MERGE_EXPR"), root_1);
                adaptor.addChild(root_1, stream_n.nextNode());
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                if ( !(stream_mergeItem.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_mergeItem.hasNext() ) {
                    adaptor.addChild(root_1, stream_mergeItem.nextTree());
                }
                stream_mergeItem.reset();
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());
                }
                stream_whereClause.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class mergeItem_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.mergeItem_return mergeItem() throws RecognitionException {
        EsperEPL2GrammarParser.mergeItem_return retval = new EsperEPL2GrammarParser.mergeItem_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.mergeMatched_return mergeMatched118 = null;
        EsperEPL2GrammarParser.mergeUnmatched_return mergeUnmatched119 = null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            int alt44=2;
            int LA44_0 = input.LA(1);
            if ( (LA44_0==WHEN) ) {
                int LA44_1 = input.LA(2);
                if ( (LA44_1==MATCHED) ) {
                    alt44=1;
                }
                else if ( (LA44_1==NOT_EXPR) ) {
                    alt44=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 44, 1, input);
                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 44, 0, input);
                throw nvae;
            }
            switch (alt44) {
                case 1 :
                    {
                    pushFollow(FOLLOW_mergeMatched_in_mergeItem2812);
                    mergeMatched118=mergeMatched();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, mergeMatched118.getTree());
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_mergeUnmatched_in_mergeItem2816);
                    mergeUnmatched119=mergeUnmatched();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, mergeUnmatched119.getTree());
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class mergeMatched_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.mergeMatched_return mergeMatched() throws RecognitionException {
        EsperEPL2GrammarParser.mergeMatched_return retval = new EsperEPL2GrammarParser.mergeMatched_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token WHEN120=null;
        Token MATCHED121=null;
        Token AND_EXPR122=null;
        EsperEPL2GrammarParser.expression_return expression123 = null;
        EsperEPL2GrammarParser.mergeMatchedItem_return mergeMatchedItem124 = null;
        CommonTree WHEN120_tree=null;
        CommonTree MATCHED121_tree=null;
        CommonTree AND_EXPR122_tree=null;
        RewriteRuleTokenStream stream_MATCHED=new RewriteRuleTokenStream(adaptor,"token MATCHED");
        RewriteRuleTokenStream stream_AND_EXPR=new RewriteRuleTokenStream(adaptor,"token AND_EXPR");
        RewriteRuleTokenStream stream_WHEN=new RewriteRuleTokenStream(adaptor,"token WHEN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_mergeMatchedItem=new RewriteRuleSubtreeStream(adaptor,"rule mergeMatchedItem");
        try {
            {
            WHEN120=(Token)match(input,WHEN,FOLLOW_WHEN_in_mergeMatched2829); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_WHEN.add(WHEN120);
            MATCHED121=(Token)match(input,MATCHED,FOLLOW_MATCHED_in_mergeMatched2831); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MATCHED.add(MATCHED121);
            int alt45=2;
            int LA45_0 = input.LA(1);
            if ( (LA45_0==AND_EXPR) ) {
                alt45=1;
            }
            switch (alt45) {
                case 1 :
                    {
                    AND_EXPR122=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_mergeMatched2834); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AND_EXPR.add(AND_EXPR122);
                    pushFollow(FOLLOW_expression_in_mergeMatched2836);
                    expression123=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression123.getTree());
                    }
                    break;
            }
            int cnt46=0;
            loop46:
            do {
                int alt46=2;
                int LA46_0 = input.LA(1);
                if ( (LA46_0==THEN) ) {
                    alt46=1;
                }
                switch (alt46) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_mergeMatchedItem_in_mergeMatched2840);
            	    mergeMatchedItem124=mergeMatchedItem();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_mergeMatchedItem.add(mergeMatchedItem124.getTree());
            	    }
            	    break;
            	default :
            	    if ( cnt46 >= 1 ) break loop46;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(46, input);
                        throw eee;
                }
                cnt46++;
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MERGE_MAT, "MERGE_MAT"), root_1);
                if ( !(stream_mergeMatchedItem.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_mergeMatchedItem.hasNext() ) {
                    adaptor.addChild(root_1, stream_mergeMatchedItem.nextTree());
                }
                stream_mergeMatchedItem.reset();
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class mergeMatchedItem_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.mergeMatchedItem_return mergeMatchedItem() throws RecognitionException {
        EsperEPL2GrammarParser.mergeMatchedItem_return retval = new EsperEPL2GrammarParser.mergeMatchedItem_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token u=null;
        Token d=null;
        Token THEN125=null;
        Token SET126=null;
        Token COMMA128=null;
        Token WHERE130=null;
        Token WHERE132=null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment127 = null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment129 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause131 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause133 = null;
        EsperEPL2GrammarParser.mergeInsert_return mergeInsert134 = null;
        CommonTree u_tree=null;
        CommonTree d_tree=null;
        CommonTree THEN125_tree=null;
        CommonTree SET126_tree=null;
        CommonTree COMMA128_tree=null;
        CommonTree WHERE130_tree=null;
        CommonTree WHERE132_tree=null;
        RewriteRuleTokenStream stream_UPDATE=new RewriteRuleTokenStream(adaptor,"token UPDATE");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_SET=new RewriteRuleTokenStream(adaptor,"token SET");
        RewriteRuleTokenStream stream_THEN=new RewriteRuleTokenStream(adaptor,"token THEN");
        RewriteRuleTokenStream stream_DELETE=new RewriteRuleTokenStream(adaptor,"token DELETE");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_mergeInsert=new RewriteRuleSubtreeStream(adaptor,"rule mergeInsert");
        RewriteRuleSubtreeStream stream_onSetAssignment=new RewriteRuleSubtreeStream(adaptor,"rule onSetAssignment");
        try {
            {
            THEN125=(Token)match(input,THEN,FOLLOW_THEN_in_mergeMatchedItem2866); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_THEN.add(THEN125);
            int alt50=3;
            switch ( input.LA(1) ) {
            case UPDATE:
                {
                alt50=1;
                }
                break;
            case DELETE:
                {
                alt50=2;
                }
                break;
            case INSERT:
                {
                alt50=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 50, 0, input);
                throw nvae;
            }
            switch (alt50) {
                case 1 :
                    {
                    {
                    u=(Token)match(input,UPDATE,FOLLOW_UPDATE_in_mergeMatchedItem2881); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_UPDATE.add(u);
                    SET126=(Token)match(input,SET,FOLLOW_SET_in_mergeMatchedItem2883); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SET.add(SET126);
                    pushFollow(FOLLOW_onSetAssignment_in_mergeMatchedItem2885);
                    onSetAssignment127=onSetAssignment();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment127.getTree());
                    loop47:
                    do {
                        int alt47=2;
                        int LA47_0 = input.LA(1);
                        if ( (LA47_0==COMMA) ) {
                            alt47=1;
                        }
                        switch (alt47) {
                    	case 1 :
                    	    {
                    	    COMMA128=(Token)match(input,COMMA,FOLLOW_COMMA_in_mergeMatchedItem2888); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA128);
                    	    pushFollow(FOLLOW_onSetAssignment_in_mergeMatchedItem2890);
                    	    onSetAssignment129=onSetAssignment();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment129.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop47;
                        }
                    } while (true);
                    }
                    int alt48=2;
                    int LA48_0 = input.LA(1);
                    if ( (LA48_0==WHERE) ) {
                        alt48=1;
                    }
                    switch (alt48) {
                        case 1 :
                            {
                            WHERE130=(Token)match(input,WHERE,FOLLOW_WHERE_in_mergeMatchedItem2896); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_WHERE.add(WHERE130);
                            pushFollow(FOLLOW_whereClause_in_mergeMatchedItem2898);
                            whereClause131=whereClause();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_whereClause.add(whereClause131.getTree());
                            }
                            break;
                    }
                    }
                    break;
                case 2 :
                    {
                    d=(Token)match(input,DELETE,FOLLOW_DELETE_in_mergeMatchedItem2910); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DELETE.add(d);
                    int alt49=2;
                    int LA49_0 = input.LA(1);
                    if ( (LA49_0==WHERE) ) {
                        alt49=1;
                    }
                    switch (alt49) {
                        case 1 :
                            {
                            WHERE132=(Token)match(input,WHERE,FOLLOW_WHERE_in_mergeMatchedItem2913); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_WHERE.add(WHERE132);
                            pushFollow(FOLLOW_whereClause_in_mergeMatchedItem2915);
                            whereClause133=whereClause();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_whereClause.add(whereClause133.getTree());
                            }
                            break;
                    }
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_mergeInsert_in_mergeMatchedItem2926);
                    mergeInsert134=mergeInsert();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_mergeInsert.add(mergeInsert134.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (d != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MERGE_DEL, "MERGE_DEL"), root_1);
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());
                }
                stream_whereClause.reset();
                adaptor.addChild(root_1, (CommonTree)adaptor.create(INT_TYPE, "dummy"));
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (u != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MERGE_UPD, "MERGE_UPD"), root_1);
                while ( stream_onSetAssignment.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetAssignment.nextTree());
                }
                stream_onSetAssignment.reset();
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());
                }
                stream_whereClause.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_mergeInsert.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class mergeUnmatched_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.mergeUnmatched_return mergeUnmatched() throws RecognitionException {
        EsperEPL2GrammarParser.mergeUnmatched_return retval = new EsperEPL2GrammarParser.mergeUnmatched_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token WHEN135=null;
        Token NOT_EXPR136=null;
        Token MATCHED137=null;
        Token AND_EXPR138=null;
        EsperEPL2GrammarParser.expression_return expression139 = null;
        EsperEPL2GrammarParser.mergeUnmatchedItem_return mergeUnmatchedItem140 = null;
        CommonTree WHEN135_tree=null;
        CommonTree NOT_EXPR136_tree=null;
        CommonTree MATCHED137_tree=null;
        CommonTree AND_EXPR138_tree=null;
        RewriteRuleTokenStream stream_MATCHED=new RewriteRuleTokenStream(adaptor,"token MATCHED");
        RewriteRuleTokenStream stream_AND_EXPR=new RewriteRuleTokenStream(adaptor,"token AND_EXPR");
        RewriteRuleTokenStream stream_NOT_EXPR=new RewriteRuleTokenStream(adaptor,"token NOT_EXPR");
        RewriteRuleTokenStream stream_WHEN=new RewriteRuleTokenStream(adaptor,"token WHEN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_mergeUnmatchedItem=new RewriteRuleSubtreeStream(adaptor,"rule mergeUnmatchedItem");
        try {
            {
            WHEN135=(Token)match(input,WHEN,FOLLOW_WHEN_in_mergeUnmatched2983); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_WHEN.add(WHEN135);
            NOT_EXPR136=(Token)match(input,NOT_EXPR,FOLLOW_NOT_EXPR_in_mergeUnmatched2985); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_NOT_EXPR.add(NOT_EXPR136);
            MATCHED137=(Token)match(input,MATCHED,FOLLOW_MATCHED_in_mergeUnmatched2987); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MATCHED.add(MATCHED137);
            int alt51=2;
            int LA51_0 = input.LA(1);
            if ( (LA51_0==AND_EXPR) ) {
                alt51=1;
            }
            switch (alt51) {
                case 1 :
                    {
                    AND_EXPR138=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_mergeUnmatched2990); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AND_EXPR.add(AND_EXPR138);
                    pushFollow(FOLLOW_expression_in_mergeUnmatched2992);
                    expression139=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression139.getTree());
                    }
                    break;
            }
            int cnt52=0;
            loop52:
            do {
                int alt52=2;
                int LA52_0 = input.LA(1);
                if ( (LA52_0==THEN) ) {
                    alt52=1;
                }
                switch (alt52) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_mergeUnmatchedItem_in_mergeUnmatched2996);
            	    mergeUnmatchedItem140=mergeUnmatchedItem();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_mergeUnmatchedItem.add(mergeUnmatchedItem140.getTree());
            	    }
            	    break;
            	default :
            	    if ( cnt52 >= 1 ) break loop52;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(52, input);
                        throw eee;
                }
                cnt52++;
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MERGE_UNM, "MERGE_UNM"), root_1);
                if ( !(stream_mergeUnmatchedItem.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_mergeUnmatchedItem.hasNext() ) {
                    adaptor.addChild(root_1, stream_mergeUnmatchedItem.nextTree());
                }
                stream_mergeUnmatchedItem.reset();
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class mergeUnmatchedItem_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.mergeUnmatchedItem_return mergeUnmatchedItem() throws RecognitionException {
        EsperEPL2GrammarParser.mergeUnmatchedItem_return retval = new EsperEPL2GrammarParser.mergeUnmatchedItem_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token THEN141=null;
        EsperEPL2GrammarParser.mergeInsert_return mergeInsert142 = null;
        CommonTree THEN141_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            THEN141=(Token)match(input,THEN,FOLLOW_THEN_in_mergeUnmatchedItem3023); if (state.failed) return retval;
            pushFollow(FOLLOW_mergeInsert_in_mergeUnmatchedItem3026);
            mergeInsert142=mergeInsert();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, mergeInsert142.getTree());
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class mergeInsert_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.mergeInsert_return mergeInsert() throws RecognitionException {
        EsperEPL2GrammarParser.mergeInsert_return retval = new EsperEPL2GrammarParser.mergeInsert_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token INSERT143=null;
        Token INTO144=null;
        Token LPAREN146=null;
        Token RPAREN148=null;
        Token SELECT149=null;
        Token WHERE151=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier145 = null;
        EsperEPL2GrammarParser.columnList_return columnList147 = null;
        EsperEPL2GrammarParser.selectionList_return selectionList150 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause152 = null;
        CommonTree INSERT143_tree=null;
        CommonTree INTO144_tree=null;
        CommonTree LPAREN146_tree=null;
        CommonTree RPAREN148_tree=null;
        CommonTree SELECT149_tree=null;
        CommonTree WHERE151_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_INSERT=new RewriteRuleTokenStream(adaptor,"token INSERT");
        RewriteRuleTokenStream stream_SELECT=new RewriteRuleTokenStream(adaptor,"token SELECT");
        RewriteRuleTokenStream stream_INTO=new RewriteRuleTokenStream(adaptor,"token INTO");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_selectionList=new RewriteRuleSubtreeStream(adaptor,"rule selectionList");
        RewriteRuleSubtreeStream stream_columnList=new RewriteRuleSubtreeStream(adaptor,"rule columnList");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            {
            INSERT143=(Token)match(input,INSERT,FOLLOW_INSERT_in_mergeInsert3041); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_INSERT.add(INSERT143);
            int alt53=2;
            int LA53_0 = input.LA(1);
            if ( (LA53_0==INTO) ) {
                alt53=1;
            }
            switch (alt53) {
                case 1 :
                    {
                    INTO144=(Token)match(input,INTO,FOLLOW_INTO_in_mergeInsert3044); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INTO.add(INTO144);
                    pushFollow(FOLLOW_classIdentifier_in_mergeInsert3046);
                    classIdentifier145=classIdentifier();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier145.getTree());
                    }
                    break;
            }
            int alt54=2;
            int LA54_0 = input.LA(1);
            if ( (LA54_0==LPAREN) ) {
                alt54=1;
            }
            switch (alt54) {
                case 1 :
                    {
                    LPAREN146=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_mergeInsert3051); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN146);
                    pushFollow(FOLLOW_columnList_in_mergeInsert3053);
                    columnList147=columnList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_columnList.add(columnList147.getTree());
                    RPAREN148=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_mergeInsert3055); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN148);
                    }
                    break;
            }
            SELECT149=(Token)match(input,SELECT,FOLLOW_SELECT_in_mergeInsert3059); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SELECT.add(SELECT149);
            pushFollow(FOLLOW_selectionList_in_mergeInsert3061);
            selectionList150=selectionList();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_selectionList.add(selectionList150.getTree());
            int alt55=2;
            int LA55_0 = input.LA(1);
            if ( (LA55_0==WHERE) ) {
                alt55=1;
            }
            switch (alt55) {
                case 1 :
                    {
                    WHERE151=(Token)match(input,WHERE,FOLLOW_WHERE_in_mergeInsert3064); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE151);
                    pushFollow(FOLLOW_whereClause_in_mergeInsert3066);
                    whereClause152=whereClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause152.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MERGE_INS, "MERGE_INS"), root_1);
                adaptor.addChild(root_1, stream_selectionList.nextTree());
                if ( stream_classIdentifier.hasNext() ) {
                    adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                }
                stream_classIdentifier.reset();
                if ( stream_columnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_columnList.nextTree());
                }
                stream_columnList.reset();
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());
                }
                stream_whereClause.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onSelectExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onSelectExpr_return onSelectExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onSelectExpr_return retval = new EsperEPL2GrammarParser.onSelectExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token INSERT153=null;
        Token SELECT155=null;
        Token DISTINCT156=null;
        Token WHERE159=null;
        Token GROUP161=null;
        Token BY162=null;
        Token HAVING164=null;
        Token ORDER166=null;
        Token BY167=null;
        Token ROW_LIMIT_EXPR169=null;
        EsperEPL2GrammarParser.insertIntoExpr_return insertIntoExpr154 = null;
        EsperEPL2GrammarParser.selectionList_return selectionList157 = null;
        EsperEPL2GrammarParser.onExprFrom_return onExprFrom158 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause160 = null;
        EsperEPL2GrammarParser.groupByListExpr_return groupByListExpr163 = null;
        EsperEPL2GrammarParser.havingClause_return havingClause165 = null;
        EsperEPL2GrammarParser.orderByListExpr_return orderByListExpr168 = null;
        EsperEPL2GrammarParser.rowLimit_return rowLimit170 = null;
        CommonTree INSERT153_tree=null;
        CommonTree SELECT155_tree=null;
        CommonTree DISTINCT156_tree=null;
        CommonTree WHERE159_tree=null;
        CommonTree GROUP161_tree=null;
        CommonTree BY162_tree=null;
        CommonTree HAVING164_tree=null;
        CommonTree ORDER166_tree=null;
        CommonTree BY167_tree=null;
        CommonTree ROW_LIMIT_EXPR169_tree=null;
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_GROUP=new RewriteRuleTokenStream(adaptor,"token GROUP");
        RewriteRuleTokenStream stream_BY=new RewriteRuleTokenStream(adaptor,"token BY");
        RewriteRuleTokenStream stream_HAVING=new RewriteRuleTokenStream(adaptor,"token HAVING");
        RewriteRuleTokenStream stream_INSERT=new RewriteRuleTokenStream(adaptor,"token INSERT");
        RewriteRuleTokenStream stream_ORDER=new RewriteRuleTokenStream(adaptor,"token ORDER");
        RewriteRuleTokenStream stream_SELECT=new RewriteRuleTokenStream(adaptor,"token SELECT");
        RewriteRuleTokenStream stream_DISTINCT=new RewriteRuleTokenStream(adaptor,"token DISTINCT");
        RewriteRuleTokenStream stream_ROW_LIMIT_EXPR=new RewriteRuleTokenStream(adaptor,"token ROW_LIMIT_EXPR");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_groupByListExpr=new RewriteRuleSubtreeStream(adaptor,"rule groupByListExpr");
        RewriteRuleSubtreeStream stream_insertIntoExpr=new RewriteRuleSubtreeStream(adaptor,"rule insertIntoExpr");
        RewriteRuleSubtreeStream stream_orderByListExpr=new RewriteRuleSubtreeStream(adaptor,"rule orderByListExpr");
        RewriteRuleSubtreeStream stream_selectionList=new RewriteRuleSubtreeStream(adaptor,"rule selectionList");
        RewriteRuleSubtreeStream stream_onExprFrom=new RewriteRuleSubtreeStream(adaptor,"rule onExprFrom");
        RewriteRuleSubtreeStream stream_havingClause=new RewriteRuleSubtreeStream(adaptor,"rule havingClause");
        RewriteRuleSubtreeStream stream_rowLimit=new RewriteRuleSubtreeStream(adaptor,"rule rowLimit");
         paraphrases.push("on-select clause"); 
        try {
            {
            int alt56=2;
            int LA56_0 = input.LA(1);
            if ( (LA56_0==INSERT) ) {
                alt56=1;
            }
            switch (alt56) {
                case 1 :
                    {
                    INSERT153=(Token)match(input,INSERT,FOLLOW_INSERT_in_onSelectExpr3112); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INSERT.add(INSERT153);
                    pushFollow(FOLLOW_insertIntoExpr_in_onSelectExpr3114);
                    insertIntoExpr154=insertIntoExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_insertIntoExpr.add(insertIntoExpr154.getTree());
                    }
                    break;
            }
            SELECT155=(Token)match(input,SELECT,FOLLOW_SELECT_in_onSelectExpr3120); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SELECT.add(SELECT155);
            int alt57=2;
            int LA57_0 = input.LA(1);
            if ( (LA57_0==DISTINCT) ) {
                alt57=1;
            }
            switch (alt57) {
                case 1 :
                    {
                    DISTINCT156=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_onSelectExpr3122); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DISTINCT.add(DISTINCT156);
                    }
                    break;
            }
            pushFollow(FOLLOW_selectionList_in_onSelectExpr3125);
            selectionList157=selectionList();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_selectionList.add(selectionList157.getTree());
            int alt58=2;
            int LA58_0 = input.LA(1);
            if ( (LA58_0==FROM) ) {
                alt58=1;
            }
            switch (alt58) {
                case 1 :
                    {
                    pushFollow(FOLLOW_onExprFrom_in_onSelectExpr3129);
                    onExprFrom158=onExprFrom();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onExprFrom.add(onExprFrom158.getTree());
                    }
                    break;
            }
            int alt59=2;
            int LA59_0 = input.LA(1);
            if ( (LA59_0==WHERE) ) {
                alt59=1;
            }
            switch (alt59) {
                case 1 :
                    {
                    WHERE159=(Token)match(input,WHERE,FOLLOW_WHERE_in_onSelectExpr3135); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE159);
                    pushFollow(FOLLOW_whereClause_in_onSelectExpr3137);
                    whereClause160=whereClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause160.getTree());
                    }
                    break;
            }
            int alt60=2;
            int LA60_0 = input.LA(1);
            if ( (LA60_0==GROUP) ) {
                alt60=1;
            }
            switch (alt60) {
                case 1 :
                    {
                    GROUP161=(Token)match(input,GROUP,FOLLOW_GROUP_in_onSelectExpr3146); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_GROUP.add(GROUP161);
                    BY162=(Token)match(input,BY,FOLLOW_BY_in_onSelectExpr3148); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BY.add(BY162);
                    pushFollow(FOLLOW_groupByListExpr_in_onSelectExpr3150);
                    groupByListExpr163=groupByListExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_groupByListExpr.add(groupByListExpr163.getTree());
                    }
                    break;
            }
            int alt61=2;
            int LA61_0 = input.LA(1);
            if ( (LA61_0==HAVING) ) {
                alt61=1;
            }
            switch (alt61) {
                case 1 :
                    {
                    HAVING164=(Token)match(input,HAVING,FOLLOW_HAVING_in_onSelectExpr3157); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_HAVING.add(HAVING164);
                    pushFollow(FOLLOW_havingClause_in_onSelectExpr3159);
                    havingClause165=havingClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_havingClause.add(havingClause165.getTree());
                    }
                    break;
            }
            int alt62=2;
            int LA62_0 = input.LA(1);
            if ( (LA62_0==ORDER) ) {
                alt62=1;
            }
            switch (alt62) {
                case 1 :
                    {
                    ORDER166=(Token)match(input,ORDER,FOLLOW_ORDER_in_onSelectExpr3166); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ORDER.add(ORDER166);
                    BY167=(Token)match(input,BY,FOLLOW_BY_in_onSelectExpr3168); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BY.add(BY167);
                    pushFollow(FOLLOW_orderByListExpr_in_onSelectExpr3170);
                    orderByListExpr168=orderByListExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_orderByListExpr.add(orderByListExpr168.getTree());
                    }
                    break;
            }
            int alt63=2;
            int LA63_0 = input.LA(1);
            if ( (LA63_0==ROW_LIMIT_EXPR) ) {
                alt63=1;
            }
            switch (alt63) {
                case 1 :
                    {
                    ROW_LIMIT_EXPR169=(Token)match(input,ROW_LIMIT_EXPR,FOLLOW_ROW_LIMIT_EXPR_in_onSelectExpr3177); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ROW_LIMIT_EXPR.add(ROW_LIMIT_EXPR169);
                    pushFollow(FOLLOW_rowLimit_in_onSelectExpr3179);
                    rowLimit170=rowLimit();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_rowLimit.add(rowLimit170.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_SELECT_EXPR, "ON_SELECT_EXPR"), root_1);
                if ( stream_insertIntoExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_insertIntoExpr.nextTree());
                }
                stream_insertIntoExpr.reset();
                if ( stream_DISTINCT.hasNext() ) {
                    adaptor.addChild(root_1, stream_DISTINCT.nextNode());
                }
                stream_DISTINCT.reset();
                adaptor.addChild(root_1, stream_selectionList.nextTree());
                if ( stream_onExprFrom.hasNext() ) {
                    adaptor.addChild(root_1, stream_onExprFrom.nextTree());
                }
                stream_onExprFrom.reset();
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());
                }
                stream_whereClause.reset();
                if ( stream_groupByListExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_groupByListExpr.nextTree());
                }
                stream_groupByListExpr.reset();
                if ( stream_havingClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_havingClause.nextTree());
                }
                stream_havingClause.reset();
                if ( stream_orderByListExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_orderByListExpr.nextTree());
                }
                stream_orderByListExpr.reset();
                if ( stream_rowLimit.hasNext() ) {
                    adaptor.addChild(root_1, stream_rowLimit.nextTree());
                }
                stream_rowLimit.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onUpdateExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onUpdateExpr_return onUpdateExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onUpdateExpr_return retval = new EsperEPL2GrammarParser.onUpdateExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token n=null;
        Token i=null;
        Token UPDATE171=null;
        Token AS172=null;
        Token SET173=null;
        Token COMMA175=null;
        Token WHERE177=null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment174 = null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment176 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause178 = null;
        CommonTree n_tree=null;
        CommonTree i_tree=null;
        CommonTree UPDATE171_tree=null;
        CommonTree AS172_tree=null;
        CommonTree SET173_tree=null;
        CommonTree COMMA175_tree=null;
        CommonTree WHERE177_tree=null;
        RewriteRuleTokenStream stream_UPDATE=new RewriteRuleTokenStream(adaptor,"token UPDATE");
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_SET=new RewriteRuleTokenStream(adaptor,"token SET");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_onSetAssignment=new RewriteRuleSubtreeStream(adaptor,"rule onSetAssignment");
         paraphrases.push("on-update clause"); 
        try {
            {
            UPDATE171=(Token)match(input,UPDATE,FOLLOW_UPDATE_in_onUpdateExpr3239); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_UPDATE.add(UPDATE171);
            n=(Token)match(input,IDENT,FOLLOW_IDENT_in_onUpdateExpr3246); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(n);
            int alt64=3;
            int LA64_0 = input.LA(1);
            if ( (LA64_0==AS) ) {
                alt64=1;
            }
            else if ( (LA64_0==IDENT) ) {
                alt64=2;
            }
            switch (alt64) {
                case 1 :
                    {
                    AS172=(Token)match(input,AS,FOLLOW_AS_in_onUpdateExpr3249); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS172);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onUpdateExpr3253); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onUpdateExpr3259); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            SET173=(Token)match(input,SET,FOLLOW_SET_in_onUpdateExpr3265); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SET.add(SET173);
            pushFollow(FOLLOW_onSetAssignment_in_onUpdateExpr3267);
            onSetAssignment174=onSetAssignment();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment174.getTree());
            loop65:
            do {
                int alt65=2;
                int LA65_0 = input.LA(1);
                if ( (LA65_0==COMMA) ) {
                    alt65=1;
                }
                switch (alt65) {
            	case 1 :
            	    {
            	    COMMA175=(Token)match(input,COMMA,FOLLOW_COMMA_in_onUpdateExpr3270); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA175);
            	    pushFollow(FOLLOW_onSetAssignment_in_onUpdateExpr3272);
            	    onSetAssignment176=onSetAssignment();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment176.getTree());
            	    }
            	    break;
            	default :
            	    break loop65;
                }
            } while (true);
            int alt66=2;
            int LA66_0 = input.LA(1);
            if ( (LA66_0==WHERE) ) {
                alt66=1;
            }
            switch (alt66) {
                case 1 :
                    {
                    WHERE177=(Token)match(input,WHERE,FOLLOW_WHERE_in_onUpdateExpr3279); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE177);
                    pushFollow(FOLLOW_whereClause_in_onUpdateExpr3281);
                    whereClause178=whereClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause178.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_n=new RewriteRuleTokenStream(adaptor,"token n",n);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_UPDATE_EXPR, "ON_UPDATE_EXPR"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_EXPR_FROM, "ON_EXPR_FROM"), root_2);
                adaptor.addChild(root_2, stream_n.nextNode());
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_2, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_1, root_2);
                }
                if ( !(stream_onSetAssignment.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_onSetAssignment.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetAssignment.nextTree());
                }
                stream_onSetAssignment.reset();
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());
                }
                stream_whereClause.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onSelectInsertExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onSelectInsertExpr_return onSelectInsertExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onSelectInsertExpr_return retval = new EsperEPL2GrammarParser.onSelectInsertExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token INSERT179=null;
        Token SELECT181=null;
        Token WHERE183=null;
        EsperEPL2GrammarParser.insertIntoExpr_return insertIntoExpr180 = null;
        EsperEPL2GrammarParser.selectionList_return selectionList182 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause184 = null;
        CommonTree INSERT179_tree=null;
        CommonTree SELECT181_tree=null;
        CommonTree WHERE183_tree=null;
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_INSERT=new RewriteRuleTokenStream(adaptor,"token INSERT");
        RewriteRuleTokenStream stream_SELECT=new RewriteRuleTokenStream(adaptor,"token SELECT");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_insertIntoExpr=new RewriteRuleSubtreeStream(adaptor,"rule insertIntoExpr");
        RewriteRuleSubtreeStream stream_selectionList=new RewriteRuleSubtreeStream(adaptor,"rule selectionList");
         paraphrases.push("on-select-insert clause"); 
        try {
            {
            INSERT179=(Token)match(input,INSERT,FOLLOW_INSERT_in_onSelectInsertExpr3332); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_INSERT.add(INSERT179);
            pushFollow(FOLLOW_insertIntoExpr_in_onSelectInsertExpr3334);
            insertIntoExpr180=insertIntoExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_insertIntoExpr.add(insertIntoExpr180.getTree());
            SELECT181=(Token)match(input,SELECT,FOLLOW_SELECT_in_onSelectInsertExpr3338); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SELECT.add(SELECT181);
            pushFollow(FOLLOW_selectionList_in_onSelectInsertExpr3340);
            selectionList182=selectionList();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_selectionList.add(selectionList182.getTree());
            int alt67=2;
            int LA67_0 = input.LA(1);
            if ( (LA67_0==WHERE) ) {
                alt67=1;
            }
            switch (alt67) {
                case 1 :
                    {
                    WHERE183=(Token)match(input,WHERE,FOLLOW_WHERE_in_onSelectInsertExpr3345); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE183);
                    pushFollow(FOLLOW_whereClause_in_onSelectInsertExpr3347);
                    whereClause184=whereClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause184.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_SELECT_INSERT_EXPR, "ON_SELECT_INSERT_EXPR"), root_1);
                adaptor.addChild(root_1, stream_insertIntoExpr.nextTree());
                adaptor.addChild(root_1, stream_selectionList.nextTree());
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());
                }
                stream_whereClause.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class outputClauseInsert_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.outputClauseInsert_return outputClauseInsert() throws RecognitionException {
        EsperEPL2GrammarParser.outputClauseInsert_return retval = new EsperEPL2GrammarParser.outputClauseInsert_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token f=null;
        Token a=null;
        Token OUTPUT185=null;
        CommonTree f_tree=null;
        CommonTree a_tree=null;
        CommonTree OUTPUT185_tree=null;
        RewriteRuleTokenStream stream_OUTPUT=new RewriteRuleTokenStream(adaptor,"token OUTPUT");
        RewriteRuleTokenStream stream_ALL=new RewriteRuleTokenStream(adaptor,"token ALL");
        RewriteRuleTokenStream stream_FIRST=new RewriteRuleTokenStream(adaptor,"token FIRST");
        try {
            {
            OUTPUT185=(Token)match(input,OUTPUT,FOLLOW_OUTPUT_in_outputClauseInsert3378); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_OUTPUT.add(OUTPUT185);
            int alt68=2;
            int LA68_0 = input.LA(1);
            if ( (LA68_0==FIRST) ) {
                alt68=1;
            }
            else if ( (LA68_0==ALL) ) {
                alt68=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 68, 0, input);
                throw nvae;
            }
            switch (alt68) {
                case 1 :
                    {
                    f=(Token)match(input,FIRST,FOLLOW_FIRST_in_outputClauseInsert3383); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FIRST.add(f);
                    }
                    break;
                case 2 :
                    {
                    a=(Token)match(input,ALL,FOLLOW_ALL_in_outputClauseInsert3389); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ALL.add(a);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_f=new RewriteRuleTokenStream(adaptor,"token f",f);
            RewriteRuleTokenStream stream_a=new RewriteRuleTokenStream(adaptor,"token a",a);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_SELECT_INSERT_OUTPUT, "ON_SELECT_INSERT_OUTPUT"), root_1);
                if ( stream_f.hasNext() ) {
                    adaptor.addChild(root_1, stream_f.nextNode());
                }
                stream_f.reset();
                if ( stream_a.hasNext() ) {
                    adaptor.addChild(root_1, stream_a.nextNode());
                }
                stream_a.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onDeleteExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onDeleteExpr_return onDeleteExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onDeleteExpr_return retval = new EsperEPL2GrammarParser.onDeleteExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token DELETE186=null;
        Token WHERE188=null;
        EsperEPL2GrammarParser.onExprFrom_return onExprFrom187 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause189 = null;
        CommonTree DELETE186_tree=null;
        CommonTree WHERE188_tree=null;
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_DELETE=new RewriteRuleTokenStream(adaptor,"token DELETE");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_onExprFrom=new RewriteRuleSubtreeStream(adaptor,"rule onExprFrom");
         paraphrases.push("on-delete clause"); 
        try {
            {
            DELETE186=(Token)match(input,DELETE,FOLLOW_DELETE_in_onDeleteExpr3431); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DELETE.add(DELETE186);
            pushFollow(FOLLOW_onExprFrom_in_onDeleteExpr3435);
            onExprFrom187=onExprFrom();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_onExprFrom.add(onExprFrom187.getTree());
            int alt69=2;
            int LA69_0 = input.LA(1);
            if ( (LA69_0==WHERE) ) {
                alt69=1;
            }
            switch (alt69) {
                case 1 :
                    {
                    WHERE188=(Token)match(input,WHERE,FOLLOW_WHERE_in_onDeleteExpr3440); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE188);
                    pushFollow(FOLLOW_whereClause_in_onDeleteExpr3442);
                    whereClause189=whereClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause189.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_DELETE_EXPR, "ON_DELETE_EXPR"), root_1);
                adaptor.addChild(root_1, stream_onExprFrom.nextTree());
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());
                }
                stream_whereClause.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onSetExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onSetExpr_return onSetExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onSetExpr_return retval = new EsperEPL2GrammarParser.onSetExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token SET190=null;
        Token COMMA192=null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment191 = null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment193 = null;
        CommonTree SET190_tree=null;
        CommonTree COMMA192_tree=null;
        RewriteRuleTokenStream stream_SET=new RewriteRuleTokenStream(adaptor,"token SET");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_onSetAssignment=new RewriteRuleSubtreeStream(adaptor,"rule onSetAssignment");
         paraphrases.push("on-set clause"); 
        try {
            {
            SET190=(Token)match(input,SET,FOLLOW_SET_in_onSetExpr3482); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SET.add(SET190);
            pushFollow(FOLLOW_onSetAssignment_in_onSetExpr3484);
            onSetAssignment191=onSetAssignment();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment191.getTree());
            loop70:
            do {
                int alt70=2;
                int LA70_0 = input.LA(1);
                if ( (LA70_0==COMMA) ) {
                    alt70=1;
                }
                switch (alt70) {
            	case 1 :
            	    {
            	    COMMA192=(Token)match(input,COMMA,FOLLOW_COMMA_in_onSetExpr3487); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA192);
            	    pushFollow(FOLLOW_onSetAssignment_in_onSetExpr3489);
            	    onSetAssignment193=onSetAssignment();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment193.getTree());
            	    }
            	    break;
            	default :
            	    break loop70;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_SET_EXPR, "ON_SET_EXPR"), root_1);
                if ( !(stream_onSetAssignment.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_onSetAssignment.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetAssignment.nextTree());
                }
                stream_onSetAssignment.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onSetAssignment_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment() throws RecognitionException {
        EsperEPL2GrammarParser.onSetAssignment_return retval = new EsperEPL2GrammarParser.onSetAssignment_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token EQUALS195=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty194 = null;
        EsperEPL2GrammarParser.expression_return expression196 = null;
        CommonTree EQUALS195_tree=null;
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_eventProperty=new RewriteRuleSubtreeStream(adaptor,"rule eventProperty");
        try {
            {
            pushFollow(FOLLOW_eventProperty_in_onSetAssignment3514);
            eventProperty194=eventProperty();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventProperty.add(eventProperty194.getTree());
            EQUALS195=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_onSetAssignment3516); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS195);
            pushFollow(FOLLOW_expression_in_onSetAssignment3518);
            expression196=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression196.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_SET_EXPR_ITEM, "ON_SET_EXPR_ITEM"), root_1);
                adaptor.addChild(root_1, stream_eventProperty.nextTree());
                adaptor.addChild(root_1, stream_expression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onExprFrom_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onExprFrom_return onExprFrom() throws RecognitionException {
        EsperEPL2GrammarParser.onExprFrom_return retval = new EsperEPL2GrammarParser.onExprFrom_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token n=null;
        Token i=null;
        Token FROM197=null;
        Token AS198=null;
        CommonTree n_tree=null;
        CommonTree i_tree=null;
        CommonTree FROM197_tree=null;
        CommonTree AS198_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_FROM=new RewriteRuleTokenStream(adaptor,"token FROM");
        try {
            {
            FROM197=(Token)match(input,FROM,FOLLOW_FROM_in_onExprFrom3543); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_FROM.add(FROM197);
            n=(Token)match(input,IDENT,FOLLOW_IDENT_in_onExprFrom3547); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(n);
            int alt71=3;
            int LA71_0 = input.LA(1);
            if ( (LA71_0==AS) ) {
                alt71=1;
            }
            else if ( (LA71_0==IDENT) ) {
                alt71=2;
            }
            switch (alt71) {
                case 1 :
                    {
                    AS198=(Token)match(input,AS,FOLLOW_AS_in_onExprFrom3550); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS198);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onExprFrom3554); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onExprFrom3560); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_n=new RewriteRuleTokenStream(adaptor,"token n",n);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_EXPR_FROM, "ON_EXPR_FROM"), root_1);
                adaptor.addChild(root_1, stream_n.nextNode());
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createWindowExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createWindowExpr_return createWindowExpr() throws RecognitionException {
        EsperEPL2GrammarParser.createWindowExpr_return retval = new EsperEPL2GrammarParser.createWindowExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token ru=null;
        Token ri=null;
        Token i1=null;
        Token CREATE199=null;
        Token WINDOW200=null;
        Token DOT201=null;
        Token DOT203=null;
        Token AS205=null;
        Token LPAREN207=null;
        Token RPAREN209=null;
        Token WHERE210=null;
        EsperEPL2GrammarParser.viewExpression_return viewExpression202 = null;
        EsperEPL2GrammarParser.viewExpression_return viewExpression204 = null;
        EsperEPL2GrammarParser.createWindowExprModelAfter_return createWindowExprModelAfter206 = null;
        EsperEPL2GrammarParser.createColumnList_return createColumnList208 = null;
        EsperEPL2GrammarParser.expression_return expression211 = null;
        CommonTree i_tree=null;
        CommonTree ru_tree=null;
        CommonTree ri_tree=null;
        CommonTree i1_tree=null;
        CommonTree CREATE199_tree=null;
        CommonTree WINDOW200_tree=null;
        CommonTree DOT201_tree=null;
        CommonTree DOT203_tree=null;
        CommonTree AS205_tree=null;
        CommonTree LPAREN207_tree=null;
        CommonTree RPAREN209_tree=null;
        CommonTree WHERE210_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_CREATE=new RewriteRuleTokenStream(adaptor,"token CREATE");
        RewriteRuleTokenStream stream_WINDOW=new RewriteRuleTokenStream(adaptor,"token WINDOW");
        RewriteRuleTokenStream stream_RETAINUNION=new RewriteRuleTokenStream(adaptor,"token RETAINUNION");
        RewriteRuleTokenStream stream_RETAININTERSECTION=new RewriteRuleTokenStream(adaptor,"token RETAININTERSECTION");
        RewriteRuleTokenStream stream_INSERT=new RewriteRuleTokenStream(adaptor,"token INSERT");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_createWindowExprModelAfter=new RewriteRuleSubtreeStream(adaptor,"rule createWindowExprModelAfter");
        RewriteRuleSubtreeStream stream_createColumnList=new RewriteRuleSubtreeStream(adaptor,"rule createColumnList");
        RewriteRuleSubtreeStream stream_viewExpression=new RewriteRuleSubtreeStream(adaptor,"rule viewExpression");
        try {
            {
            CREATE199=(Token)match(input,CREATE,FOLLOW_CREATE_in_createWindowExpr3588); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CREATE.add(CREATE199);
            WINDOW200=(Token)match(input,WINDOW,FOLLOW_WINDOW_in_createWindowExpr3590); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_WINDOW.add(WINDOW200);
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_createWindowExpr3594); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            int alt73=2;
            int LA73_0 = input.LA(1);
            if ( (LA73_0==DOT) ) {
                alt73=1;
            }
            switch (alt73) {
                case 1 :
                    {
                    DOT201=(Token)match(input,DOT,FOLLOW_DOT_in_createWindowExpr3597); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT201);
                    pushFollow(FOLLOW_viewExpression_in_createWindowExpr3599);
                    viewExpression202=viewExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression202.getTree());
                    loop72:
                    do {
                        int alt72=2;
                        int LA72_0 = input.LA(1);
                        if ( (LA72_0==DOT) ) {
                            alt72=1;
                        }
                        switch (alt72) {
                    	case 1 :
                    	    {
                    	    DOT203=(Token)match(input,DOT,FOLLOW_DOT_in_createWindowExpr3602); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_DOT.add(DOT203);
                    	    pushFollow(FOLLOW_viewExpression_in_createWindowExpr3604);
                    	    viewExpression204=viewExpression();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression204.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop72;
                        }
                    } while (true);
                    }
                    break;
            }
            int alt74=3;
            int LA74_0 = input.LA(1);
            if ( (LA74_0==RETAINUNION) ) {
                alt74=1;
            }
            else if ( (LA74_0==RETAININTERSECTION) ) {
                alt74=2;
            }
            switch (alt74) {
                case 1 :
                    {
                    ru=(Token)match(input,RETAINUNION,FOLLOW_RETAINUNION_in_createWindowExpr3613); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAINUNION.add(ru);
                    }
                    break;
                case 2 :
                    {
                    ri=(Token)match(input,RETAININTERSECTION,FOLLOW_RETAININTERSECTION_in_createWindowExpr3617); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAININTERSECTION.add(ri);
                    }
                    break;
            }
            int alt75=2;
            int LA75_0 = input.LA(1);
            if ( (LA75_0==AS) ) {
                alt75=1;
            }
            switch (alt75) {
                case 1 :
                    {
                    AS205=(Token)match(input,AS,FOLLOW_AS_in_createWindowExpr3621); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS205);
                    }
                    break;
            }
            int alt76=2;
            int LA76_0 = input.LA(1);
            if ( (LA76_0==SELECT||LA76_0==IDENT||LA76_0==TICKED_STRING_LITERAL) ) {
                alt76=1;
            }
            else if ( (LA76_0==LPAREN) ) {
                alt76=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 76, 0, input);
                throw nvae;
            }
            switch (alt76) {
                case 1 :
                    {
                    pushFollow(FOLLOW_createWindowExprModelAfter_in_createWindowExpr3636);
                    createWindowExprModelAfter206=createWindowExprModelAfter();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_createWindowExprModelAfter.add(createWindowExprModelAfter206.getTree());
                    }
                    break;
                case 2 :
                    {
                    LPAREN207=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_createWindowExpr3651); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN207);
                    pushFollow(FOLLOW_createColumnList_in_createWindowExpr3653);
                    createColumnList208=createColumnList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_createColumnList.add(createColumnList208.getTree());
                    RPAREN209=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_createWindowExpr3655); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN209);
                    }
                    break;
            }
            int alt78=2;
            int LA78_0 = input.LA(1);
            if ( (LA78_0==INSERT) ) {
                alt78=1;
            }
            switch (alt78) {
                case 1 :
                    {
                    i1=(Token)match(input,INSERT,FOLLOW_INSERT_in_createWindowExpr3672); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INSERT.add(i1);
                    int alt77=2;
                    int LA77_0 = input.LA(1);
                    if ( (LA77_0==WHERE) ) {
                        alt77=1;
                    }
                    switch (alt77) {
                        case 1 :
                            {
                            WHERE210=(Token)match(input,WHERE,FOLLOW_WHERE_in_createWindowExpr3675); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_WHERE.add(WHERE210);
                            pushFollow(FOLLOW_expression_in_createWindowExpr3677);
                            expression211=expression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(expression211.getTree());
                            }
                            break;
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_ri=new RewriteRuleTokenStream(adaptor,"token ri",ri);
            RewriteRuleTokenStream stream_ru=new RewriteRuleTokenStream(adaptor,"token ru",ru);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i1 != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_WINDOW_EXPR, "CREATE_WINDOW_EXPR"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                while ( stream_viewExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_viewExpression.nextTree());
                }
                stream_viewExpression.reset();
                if ( stream_ru.hasNext() ) {
                    adaptor.addChild(root_1, stream_ru.nextNode());
                }
                stream_ru.reset();
                if ( stream_ri.hasNext() ) {
                    adaptor.addChild(root_1, stream_ri.nextNode());
                }
                stream_ri.reset();
                if ( stream_createWindowExprModelAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_createWindowExprModelAfter.nextTree());
                }
                stream_createWindowExprModelAfter.reset();
                if ( stream_createColumnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_createColumnList.nextTree());
                }
                stream_createColumnList.reset();
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot(stream_INSERT.nextNode(), root_2);
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_2, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_WINDOW_EXPR, "CREATE_WINDOW_EXPR"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                while ( stream_viewExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_viewExpression.nextTree());
                }
                stream_viewExpression.reset();
                if ( stream_ru.hasNext() ) {
                    adaptor.addChild(root_1, stream_ru.nextNode());
                }
                stream_ru.reset();
                if ( stream_ri.hasNext() ) {
                    adaptor.addChild(root_1, stream_ri.nextNode());
                }
                stream_ri.reset();
                if ( stream_createWindowExprModelAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_createWindowExprModelAfter.nextTree());
                }
                stream_createWindowExprModelAfter.reset();
                if ( stream_createColumnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_createColumnList.nextTree());
                }
                stream_createColumnList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createWindowExprModelAfter_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createWindowExprModelAfter_return createWindowExprModelAfter() throws RecognitionException {
        EsperEPL2GrammarParser.createWindowExprModelAfter_return retval = new EsperEPL2GrammarParser.createWindowExprModelAfter_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token SELECT212=null;
        Token FROM214=null;
        EsperEPL2GrammarParser.createSelectionList_return createSelectionList213 = null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier215 = null;
        CommonTree SELECT212_tree=null;
        CommonTree FROM214_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            int alt79=2;
            int LA79_0 = input.LA(1);
            if ( (LA79_0==SELECT) ) {
                alt79=1;
            }
            switch (alt79) {
                case 1 :
                    {
                    SELECT212=(Token)match(input,SELECT,FOLLOW_SELECT_in_createWindowExprModelAfter3764); if (state.failed) return retval;
                    pushFollow(FOLLOW_createSelectionList_in_createWindowExprModelAfter3767);
                    createSelectionList213=createSelectionList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createSelectionList213.getTree());
                    FROM214=(Token)match(input,FROM,FOLLOW_FROM_in_createWindowExprModelAfter3769); if (state.failed) return retval;
                    }
                    break;
            }
            pushFollow(FOLLOW_classIdentifier_in_createWindowExprModelAfter3774);
            classIdentifier215=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier215.getTree());
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createIndexExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createIndexExpr_return createIndexExpr() throws RecognitionException {
        EsperEPL2GrammarParser.createIndexExpr_return retval = new EsperEPL2GrammarParser.createIndexExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token n=null;
        Token w=null;
        Token CREATE216=null;
        Token INDEX217=null;
        Token ON218=null;
        Token LPAREN219=null;
        Token RPAREN221=null;
        EsperEPL2GrammarParser.createIndexColumnList_return createIndexColumnList220 = null;
        CommonTree n_tree=null;
        CommonTree w_tree=null;
        CommonTree CREATE216_tree=null;
        CommonTree INDEX217_tree=null;
        CommonTree ON218_tree=null;
        CommonTree LPAREN219_tree=null;
        CommonTree RPAREN221_tree=null;
        RewriteRuleTokenStream stream_INDEX=new RewriteRuleTokenStream(adaptor,"token INDEX");
        RewriteRuleTokenStream stream_ON=new RewriteRuleTokenStream(adaptor,"token ON");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_CREATE=new RewriteRuleTokenStream(adaptor,"token CREATE");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_createIndexColumnList=new RewriteRuleSubtreeStream(adaptor,"rule createIndexColumnList");
        try {
            {
            CREATE216=(Token)match(input,CREATE,FOLLOW_CREATE_in_createIndexExpr3787); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CREATE.add(CREATE216);
            INDEX217=(Token)match(input,INDEX,FOLLOW_INDEX_in_createIndexExpr3789); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_INDEX.add(INDEX217);
            n=(Token)match(input,IDENT,FOLLOW_IDENT_in_createIndexExpr3793); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(n);
            ON218=(Token)match(input,ON,FOLLOW_ON_in_createIndexExpr3795); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ON.add(ON218);
            w=(Token)match(input,IDENT,FOLLOW_IDENT_in_createIndexExpr3799); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(w);
            LPAREN219=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_createIndexExpr3801); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN219);
            pushFollow(FOLLOW_createIndexColumnList_in_createIndexExpr3803);
            createIndexColumnList220=createIndexColumnList();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_createIndexColumnList.add(createIndexColumnList220.getTree());
            RPAREN221=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_createIndexExpr3805); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN221);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_w=new RewriteRuleTokenStream(adaptor,"token w",w);
            RewriteRuleTokenStream stream_n=new RewriteRuleTokenStream(adaptor,"token n",n);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_INDEX_EXPR, "CREATE_INDEX_EXPR"), root_1);
                adaptor.addChild(root_1, stream_n.nextNode());
                adaptor.addChild(root_1, stream_w.nextNode());
                adaptor.addChild(root_1, stream_createIndexColumnList.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createIndexColumnList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createIndexColumnList_return createIndexColumnList() throws RecognitionException {
        EsperEPL2GrammarParser.createIndexColumnList_return retval = new EsperEPL2GrammarParser.createIndexColumnList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA223=null;
        EsperEPL2GrammarParser.createIndexColumn_return createIndexColumn222 = null;
        EsperEPL2GrammarParser.createIndexColumn_return createIndexColumn224 = null;
        CommonTree COMMA223_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_createIndexColumn=new RewriteRuleSubtreeStream(adaptor,"rule createIndexColumn");
        try {
            {
            pushFollow(FOLLOW_createIndexColumn_in_createIndexColumnList3834);
            createIndexColumn222=createIndexColumn();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_createIndexColumn.add(createIndexColumn222.getTree());
            loop80:
            do {
                int alt80=2;
                int LA80_0 = input.LA(1);
                if ( (LA80_0==COMMA) ) {
                    alt80=1;
                }
                switch (alt80) {
            	case 1 :
            	    {
            	    COMMA223=(Token)match(input,COMMA,FOLLOW_COMMA_in_createIndexColumnList3837); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA223);
            	    pushFollow(FOLLOW_createIndexColumn_in_createIndexColumnList3839);
            	    createIndexColumn224=createIndexColumn();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_createIndexColumn.add(createIndexColumn224.getTree());
            	    }
            	    break;
            	default :
            	    break loop80;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(INDEXCOL, "INDEXCOL"), root_1);
                if ( !(stream_createIndexColumn.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_createIndexColumn.hasNext() ) {
                    adaptor.addChild(root_1, stream_createIndexColumn.nextTree());
                }
                stream_createIndexColumn.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createIndexColumn_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createIndexColumn_return createIndexColumn() throws RecognitionException {
        EsperEPL2GrammarParser.createIndexColumn_return retval = new EsperEPL2GrammarParser.createIndexColumn_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token IDENT225=null;
        Token IDENT226=null;
        CommonTree IDENT225_tree=null;
        CommonTree IDENT226_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        try {
            {
            IDENT225=(Token)match(input,IDENT,FOLLOW_IDENT_in_createIndexColumn3866); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(IDENT225);
            int alt81=2;
            int LA81_0 = input.LA(1);
            if ( (LA81_0==IDENT) ) {
                alt81=1;
            }
            switch (alt81) {
                case 1 :
                    {
                    IDENT226=(Token)match(input,IDENT,FOLLOW_IDENT_in_createIndexColumn3868); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT226);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(INDEXCOL, "INDEXCOL"), root_1);
                while ( stream_IDENT.hasNext() ) {
                    adaptor.addChild(root_1, stream_IDENT.nextNode());
                }
                stream_IDENT.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createVariableExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createVariableExpr_return createVariableExpr() throws RecognitionException {
        EsperEPL2GrammarParser.createVariableExpr_return retval = new EsperEPL2GrammarParser.createVariableExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token n=null;
        Token CREATE227=null;
        Token VARIABLE228=null;
        Token EQUALS230=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier229 = null;
        EsperEPL2GrammarParser.expression_return expression231 = null;
        CommonTree n_tree=null;
        CommonTree CREATE227_tree=null;
        CommonTree VARIABLE228_tree=null;
        CommonTree EQUALS230_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_CREATE=new RewriteRuleTokenStream(adaptor,"token CREATE");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleTokenStream stream_VARIABLE=new RewriteRuleTokenStream(adaptor,"token VARIABLE");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            {
            CREATE227=(Token)match(input,CREATE,FOLLOW_CREATE_in_createVariableExpr3893); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CREATE.add(CREATE227);
            VARIABLE228=(Token)match(input,VARIABLE,FOLLOW_VARIABLE_in_createVariableExpr3895); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_VARIABLE.add(VARIABLE228);
            pushFollow(FOLLOW_classIdentifier_in_createVariableExpr3897);
            classIdentifier229=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier229.getTree());
            n=(Token)match(input,IDENT,FOLLOW_IDENT_in_createVariableExpr3901); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(n);
            int alt82=2;
            int LA82_0 = input.LA(1);
            if ( (LA82_0==EQUALS) ) {
                alt82=1;
            }
            switch (alt82) {
                case 1 :
                    {
                    EQUALS230=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_createVariableExpr3904); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS230);
                    pushFollow(FOLLOW_expression_in_createVariableExpr3906);
                    expression231=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression231.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_n=new RewriteRuleTokenStream(adaptor,"token n",n);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_VARIABLE_EXPR, "CREATE_VARIABLE_EXPR"), root_1);
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                adaptor.addChild(root_1, stream_n.nextNode());
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createColumnList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createColumnList_return createColumnList() throws RecognitionException {
        EsperEPL2GrammarParser.createColumnList_return retval = new EsperEPL2GrammarParser.createColumnList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA233=null;
        EsperEPL2GrammarParser.createColumnListElement_return createColumnListElement232 = null;
        EsperEPL2GrammarParser.createColumnListElement_return createColumnListElement234 = null;
        CommonTree COMMA233_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_createColumnListElement=new RewriteRuleSubtreeStream(adaptor,"rule createColumnListElement");
         paraphrases.push("column list"); 
        try {
            {
            pushFollow(FOLLOW_createColumnListElement_in_createColumnList3948);
            createColumnListElement232=createColumnListElement();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_createColumnListElement.add(createColumnListElement232.getTree());
            loop83:
            do {
                int alt83=2;
                int LA83_0 = input.LA(1);
                if ( (LA83_0==COMMA) ) {
                    alt83=1;
                }
                switch (alt83) {
            	case 1 :
            	    {
            	    COMMA233=(Token)match(input,COMMA,FOLLOW_COMMA_in_createColumnList3951); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA233);
            	    pushFollow(FOLLOW_createColumnListElement_in_createColumnList3953);
            	    createColumnListElement234=createColumnListElement();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_createColumnListElement.add(createColumnListElement234.getTree());
            	    }
            	    break;
            	default :
            	    break loop83;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_COL_TYPE_LIST, "CREATE_COL_TYPE_LIST"), root_1);
                if ( !(stream_createColumnListElement.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_createColumnListElement.hasNext() ) {
                    adaptor.addChild(root_1, stream_createColumnListElement.nextTree());
                }
                stream_createColumnListElement.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createColumnListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createColumnListElement_return createColumnListElement() throws RecognitionException {
        EsperEPL2GrammarParser.createColumnListElement_return retval = new EsperEPL2GrammarParser.createColumnListElement_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token b=null;
        Token RBRACK237=null;
        EsperEPL2GrammarParser.classIdentifierNonGreedy_return classIdentifierNonGreedy235 = null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier236 = null;
        CommonTree b_tree=null;
        CommonTree RBRACK237_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleSubtreeStream stream_classIdentifierNonGreedy=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifierNonGreedy");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            {
            pushFollow(FOLLOW_classIdentifierNonGreedy_in_createColumnListElement3981);
            classIdentifierNonGreedy235=classIdentifierNonGreedy();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifierNonGreedy.add(classIdentifierNonGreedy235.getTree());
            {
            pushFollow(FOLLOW_classIdentifier_in_createColumnListElement3984);
            classIdentifier236=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier236.getTree());
            int alt84=2;
            int LA84_0 = input.LA(1);
            if ( (LA84_0==LBRACK) ) {
                alt84=1;
            }
            switch (alt84) {
                case 1 :
                    {
                    b=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_createColumnListElement3989); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LBRACK.add(b);
                    RBRACK237=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_createColumnListElement3991); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK237);
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_b=new RewriteRuleTokenStream(adaptor,"token b",b);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_COL_TYPE, "CREATE_COL_TYPE"), root_1);
                adaptor.addChild(root_1, stream_classIdentifierNonGreedy.nextTree());
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                if ( stream_b.hasNext() ) {
                    adaptor.addChild(root_1, stream_b.nextNode());
                }
                stream_b.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createSelectionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createSelectionList_return createSelectionList() throws RecognitionException {
        EsperEPL2GrammarParser.createSelectionList_return retval = new EsperEPL2GrammarParser.createSelectionList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA239=null;
        EsperEPL2GrammarParser.createSelectionListElement_return createSelectionListElement238 = null;
        EsperEPL2GrammarParser.createSelectionListElement_return createSelectionListElement240 = null;
        CommonTree COMMA239_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_createSelectionListElement=new RewriteRuleSubtreeStream(adaptor,"rule createSelectionListElement");
         paraphrases.push("select clause"); 
        try {
            {
            pushFollow(FOLLOW_createSelectionListElement_in_createSelectionList4034);
            createSelectionListElement238=createSelectionListElement();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_createSelectionListElement.add(createSelectionListElement238.getTree());
            loop85:
            do {
                int alt85=2;
                int LA85_0 = input.LA(1);
                if ( (LA85_0==COMMA) ) {
                    alt85=1;
                }
                switch (alt85) {
            	case 1 :
            	    {
            	    COMMA239=(Token)match(input,COMMA,FOLLOW_COMMA_in_createSelectionList4037); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA239);
            	    pushFollow(FOLLOW_createSelectionListElement_in_createSelectionList4039);
            	    createSelectionListElement240=createSelectionListElement();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_createSelectionListElement.add(createSelectionListElement240.getTree());
            	    }
            	    break;
            	default :
            	    break loop85;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_WINDOW_SELECT_EXPR, "CREATE_WINDOW_SELECT_EXPR"), root_1);
                if ( !(stream_createSelectionListElement.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_createSelectionListElement.hasNext() ) {
                    adaptor.addChild(root_1, stream_createSelectionListElement.nextTree());
                }
                stream_createSelectionListElement.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createSelectionListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createSelectionListElement_return createSelectionListElement() throws RecognitionException {
        EsperEPL2GrammarParser.createSelectionListElement_return retval = new EsperEPL2GrammarParser.createSelectionListElement_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        Token i=null;
        Token AS242=null;
        Token AS244=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty241 = null;
        EsperEPL2GrammarParser.constant_return constant243 = null;
        CommonTree s_tree=null;
        CommonTree i_tree=null;
        CommonTree AS242_tree=null;
        CommonTree AS244_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleSubtreeStream stream_constant=new RewriteRuleSubtreeStream(adaptor,"rule constant");
        RewriteRuleSubtreeStream stream_eventProperty=new RewriteRuleSubtreeStream(adaptor,"rule eventProperty");
        try {
            int alt87=3;
            switch ( input.LA(1) ) {
            case STAR:
                {
                alt87=1;
                }
                break;
            case WINDOW:
            case ESCAPE:
            case EVERY_EXPR:
            case SUM:
            case AVG:
            case MAX:
            case MIN:
            case COALESCE:
            case MEDIAN:
            case STDDEV:
            case AVEDEV:
            case COUNT:
            case OUTER:
            case JOIN:
            case LEFT:
            case RIGHT:
            case FULL:
            case EVENTS:
            case FIRST:
            case LAST:
            case UNIDIRECTIONAL:
            case RETAINUNION:
            case RETAININTERSECTION:
            case PATTERN:
            case SQL:
            case METADATASQL:
            case PREVIOUS:
            case PREVIOUSTAIL:
            case PRIOR:
            case WEEKDAY:
            case LW:
            case INSTANCEOF:
            case TYPEOF:
            case CAST:
            case SNAPSHOT:
            case VARIABLE:
            case UNTIL:
            case AT:
            case INDEX:
            case DEFINE:
            case PARTITION:
            case MATCHES:
            case WHILE:
            case MERGE:
            case MATCHED:
            case IDENT:
            case TICKED_STRING_LITERAL:
                {
                alt87=2;
                }
                break;
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case NUM_DOUBLE:
            case PLUS:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt87=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 87, 0, input);
                throw nvae;
            }
            switch (alt87) {
                case 1 :
                    {
                    s=(Token)match(input,STAR,FOLLOW_STAR_in_createSelectionListElement4068); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STAR.add(s);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(WILDCARD_SELECT, s));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_eventProperty_in_createSelectionListElement4080);
                    eventProperty241=eventProperty();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_eventProperty.add(eventProperty241.getTree());
                    int alt86=2;
                    int LA86_0 = input.LA(1);
                    if ( (LA86_0==AS) ) {
                        alt86=1;
                    }
                    switch (alt86) {
                        case 1 :
                            {
                            AS242=(Token)match(input,AS,FOLLOW_AS_in_createSelectionListElement4083); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_AS.add(AS242);
                            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_createSelectionListElement4087); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IDENT.add(i);
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);
                        adaptor.addChild(root_1, stream_eventProperty.nextTree());
                        if ( stream_i.hasNext() ) {
                            adaptor.addChild(root_1, stream_i.nextNode());
                        }
                        stream_i.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_constant_in_createSelectionListElement4108);
                    constant243=constant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_constant.add(constant243.getTree());
                    AS244=(Token)match(input,AS,FOLLOW_AS_in_createSelectionListElement4110); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS244);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_createSelectionListElement4114); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);
                        adaptor.addChild(root_1, stream_constant.nextTree());
                        if ( stream_i.hasNext() ) {
                            adaptor.addChild(root_1, stream_i.nextNode());
                        }
                        stream_i.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createSchemaExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createSchemaExpr_return createSchemaExpr() throws RecognitionException {
        EsperEPL2GrammarParser.createSchemaExpr_return retval = new EsperEPL2GrammarParser.createSchemaExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token keyword=null;
        Token name=null;
        Token inherits=null;
        Token CREATE245=null;
        Token SCHEMA246=null;
        Token AS247=null;
        Token LPAREN249=null;
        Token RPAREN251=null;
        EsperEPL2GrammarParser.variantList_return variantList248 = null;
        EsperEPL2GrammarParser.createColumnList_return createColumnList250 = null;
        EsperEPL2GrammarParser.columnList_return columnList252 = null;
        CommonTree keyword_tree=null;
        CommonTree name_tree=null;
        CommonTree inherits_tree=null;
        CommonTree CREATE245_tree=null;
        CommonTree SCHEMA246_tree=null;
        CommonTree AS247_tree=null;
        CommonTree LPAREN249_tree=null;
        CommonTree RPAREN251_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_CREATE=new RewriteRuleTokenStream(adaptor,"token CREATE");
        RewriteRuleTokenStream stream_SCHEMA=new RewriteRuleTokenStream(adaptor,"token SCHEMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_createColumnList=new RewriteRuleSubtreeStream(adaptor,"rule createColumnList");
        RewriteRuleSubtreeStream stream_variantList=new RewriteRuleSubtreeStream(adaptor,"rule variantList");
        RewriteRuleSubtreeStream stream_columnList=new RewriteRuleSubtreeStream(adaptor,"rule columnList");
        try {
            {
            CREATE245=(Token)match(input,CREATE,FOLLOW_CREATE_in_createSchemaExpr4139); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CREATE.add(CREATE245);
            int alt88=2;
            int LA88_0 = input.LA(1);
            if ( (LA88_0==IDENT) ) {
                alt88=1;
            }
            switch (alt88) {
                case 1 :
                    {
                    keyword=(Token)match(input,IDENT,FOLLOW_IDENT_in_createSchemaExpr4143); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(keyword);
                    }
                    break;
            }
            SCHEMA246=(Token)match(input,SCHEMA,FOLLOW_SCHEMA_in_createSchemaExpr4146); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SCHEMA.add(SCHEMA246);
            name=(Token)match(input,IDENT,FOLLOW_IDENT_in_createSchemaExpr4150); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(name);
            int alt89=2;
            int LA89_0 = input.LA(1);
            if ( (LA89_0==AS) ) {
                alt89=1;
            }
            switch (alt89) {
                case 1 :
                    {
                    AS247=(Token)match(input,AS,FOLLOW_AS_in_createSchemaExpr4152); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS247);
                    }
                    break;
            }
            int alt92=2;
            int LA92_0 = input.LA(1);
            if ( (LA92_0==IDENT||LA92_0==STAR||LA92_0==TICKED_STRING_LITERAL) ) {
                alt92=1;
            }
            else if ( (LA92_0==LPAREN) ) {
                alt92=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 92, 0, input);
                throw nvae;
            }
            switch (alt92) {
                case 1 :
                    {
                    pushFollow(FOLLOW_variantList_in_createSchemaExpr4165);
                    variantList248=variantList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_variantList.add(variantList248.getTree());
                    }
                    break;
                case 2 :
                    {
                    LPAREN249=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_createSchemaExpr4176); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN249);
                    int alt90=2;
                    int LA90_0 = input.LA(1);
                    if ( (LA90_0==IDENT||LA90_0==TICKED_STRING_LITERAL) ) {
                        alt90=1;
                    }
                    switch (alt90) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_createColumnList_in_createSchemaExpr4178);
                            createColumnList250=createColumnList();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_createColumnList.add(createColumnList250.getTree());
                            }
                            break;
                    }
                    RPAREN251=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_createSchemaExpr4181); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN251);
                    int alt91=2;
                    int LA91_0 = input.LA(1);
                    if ( (LA91_0==IDENT) ) {
                        alt91=1;
                    }
                    switch (alt91) {
                        case 1 :
                            {
                            inherits=(Token)match(input,IDENT,FOLLOW_IDENT_in_createSchemaExpr4186); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IDENT.add(inherits);
                            pushFollow(FOLLOW_columnList_in_createSchemaExpr4188);
                            columnList252=columnList();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_columnList.add(columnList252.getTree());
                            }
                            break;
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_inherits=new RewriteRuleTokenStream(adaptor,"token inherits",inherits);
            RewriteRuleTokenStream stream_keyword=new RewriteRuleTokenStream(adaptor,"token keyword",keyword);
            RewriteRuleTokenStream stream_name=new RewriteRuleTokenStream(adaptor,"token name",name);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (inherits != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_SCHEMA_EXPR, "CREATE_SCHEMA_EXPR"), root_1);
                adaptor.addChild(root_1, stream_name.nextNode());
                if ( stream_createColumnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_createColumnList.nextTree());
                }
                stream_createColumnList.reset();
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_SCHEMA_EXPR_INH, "CREATE_SCHEMA_EXPR_INH"), root_2);
                adaptor.addChild(root_2, stream_inherits.nextNode());
                adaptor.addChild(root_2, stream_columnList.nextTree());
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (keyword != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_SCHEMA_EXPR, "CREATE_SCHEMA_EXPR"), root_1);
                adaptor.addChild(root_1, stream_name.nextNode());
                adaptor.addChild(root_1, stream_variantList.nextTree());
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_SCHEMA_EXPR_QUAL, "CREATE_SCHEMA_EXPR_QUAL"), root_2);
                adaptor.addChild(root_2, stream_keyword.nextNode());
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_SCHEMA_EXPR, "CREATE_SCHEMA_EXPR"), root_1);
                adaptor.addChild(root_1, stream_name.nextNode());
                if ( stream_variantList.hasNext() ) {
                    adaptor.addChild(root_1, stream_variantList.nextTree());
                }
                stream_variantList.reset();
                if ( stream_createColumnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_createColumnList.nextTree());
                }
                stream_createColumnList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class variantList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.variantList_return variantList() throws RecognitionException {
        EsperEPL2GrammarParser.variantList_return retval = new EsperEPL2GrammarParser.variantList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA254=null;
        EsperEPL2GrammarParser.variantListElement_return variantListElement253 = null;
        EsperEPL2GrammarParser.variantListElement_return variantListElement255 = null;
        CommonTree COMMA254_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_variantListElement=new RewriteRuleSubtreeStream(adaptor,"rule variantListElement");
        try {
            {
            pushFollow(FOLLOW_variantListElement_in_variantList4277);
            variantListElement253=variantListElement();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_variantListElement.add(variantListElement253.getTree());
            loop93:
            do {
                int alt93=2;
                int LA93_0 = input.LA(1);
                if ( (LA93_0==COMMA) ) {
                    alt93=1;
                }
                switch (alt93) {
            	case 1 :
            	    {
            	    COMMA254=(Token)match(input,COMMA,FOLLOW_COMMA_in_variantList4280); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA254);
            	    pushFollow(FOLLOW_variantListElement_in_variantList4282);
            	    variantListElement255=variantListElement();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_variantListElement.add(variantListElement255.getTree());
            	    }
            	    break;
            	default :
            	    break loop93;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VARIANT_LIST, "VARIANT_LIST"), root_1);
                if ( !(stream_variantListElement.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_variantListElement.hasNext() ) {
                    adaptor.addChild(root_1, stream_variantListElement.nextTree());
                }
                stream_variantListElement.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class variantListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.variantListElement_return variantListElement() throws RecognitionException {
        EsperEPL2GrammarParser.variantListElement_return retval = new EsperEPL2GrammarParser.variantListElement_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token STAR256=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier257 = null;
        CommonTree STAR256_tree=null;
        try {
            int alt94=2;
            int LA94_0 = input.LA(1);
            if ( (LA94_0==STAR) ) {
                alt94=1;
            }
            else if ( (LA94_0==IDENT||LA94_0==TICKED_STRING_LITERAL) ) {
                alt94=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 94, 0, input);
                throw nvae;
            }
            switch (alt94) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    STAR256=(Token)match(input,STAR,FOLLOW_STAR_in_variantListElement4309); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STAR256_tree = (CommonTree)adaptor.create(STAR256);
                    root_0 = (CommonTree)adaptor.becomeRoot(STAR256_tree, root_0);
                    }
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_classIdentifier_in_variantListElement4315);
                    classIdentifier257=classIdentifier();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier257.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class insertIntoExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.insertIntoExpr_return insertIntoExpr() throws RecognitionException {
        EsperEPL2GrammarParser.insertIntoExpr_return retval = new EsperEPL2GrammarParser.insertIntoExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        Token INTO258=null;
        Token LPAREN260=null;
        Token RPAREN262=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier259 = null;
        EsperEPL2GrammarParser.columnList_return columnList261 = null;
        CommonTree s_tree=null;
        CommonTree INTO258_tree=null;
        CommonTree LPAREN260_tree=null;
        CommonTree RPAREN262_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_ISTREAM=new RewriteRuleTokenStream(adaptor,"token ISTREAM");
        RewriteRuleTokenStream stream_INTO=new RewriteRuleTokenStream(adaptor,"token INTO");
        RewriteRuleTokenStream stream_RSTREAM=new RewriteRuleTokenStream(adaptor,"token RSTREAM");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_columnList=new RewriteRuleSubtreeStream(adaptor,"rule columnList");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
         paraphrases.push("insert-into clause"); 
        try {
            {
            int alt95=3;
            int LA95_0 = input.LA(1);
            if ( (LA95_0==ISTREAM) ) {
                alt95=1;
            }
            else if ( (LA95_0==RSTREAM) ) {
                alt95=2;
            }
            switch (alt95) {
                case 1 :
                    {
                    s=(Token)match(input,ISTREAM,FOLLOW_ISTREAM_in_insertIntoExpr4340); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ISTREAM.add(s);
                    }
                    break;
                case 2 :
                    {
                    s=(Token)match(input,RSTREAM,FOLLOW_RSTREAM_in_insertIntoExpr4346); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RSTREAM.add(s);
                    }
                    break;
            }
            INTO258=(Token)match(input,INTO,FOLLOW_INTO_in_insertIntoExpr4350); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_INTO.add(INTO258);
            pushFollow(FOLLOW_classIdentifier_in_insertIntoExpr4352);
            classIdentifier259=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier259.getTree());
            int alt96=2;
            int LA96_0 = input.LA(1);
            if ( (LA96_0==LPAREN) ) {
                alt96=1;
            }
            switch (alt96) {
                case 1 :
                    {
                    LPAREN260=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_insertIntoExpr4355); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN260);
                    pushFollow(FOLLOW_columnList_in_insertIntoExpr4357);
                    columnList261=columnList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_columnList.add(columnList261.getTree());
                    RPAREN262=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_insertIntoExpr4359); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN262);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(INSERTINTO_EXPR, "INSERTINTO_EXPR"), root_1);
                if ( stream_s.hasNext() ) {
                    adaptor.addChild(root_1, stream_s.nextNode());
                }
                stream_s.reset();
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                if ( stream_columnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_columnList.nextTree());
                }
                stream_columnList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class columnList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.columnList_return columnList() throws RecognitionException {
        EsperEPL2GrammarParser.columnList_return retval = new EsperEPL2GrammarParser.columnList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token IDENT263=null;
        Token COMMA264=null;
        Token IDENT265=null;
        CommonTree IDENT263_tree=null;
        CommonTree COMMA264_tree=null;
        CommonTree IDENT265_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        try {
            {
            IDENT263=(Token)match(input,IDENT,FOLLOW_IDENT_in_columnList4392); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(IDENT263);
            loop97:
            do {
                int alt97=2;
                int LA97_0 = input.LA(1);
                if ( (LA97_0==COMMA) ) {
                    alt97=1;
                }
                switch (alt97) {
            	case 1 :
            	    {
            	    COMMA264=(Token)match(input,COMMA,FOLLOW_COMMA_in_columnList4395); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA264);
            	    IDENT265=(Token)match(input,IDENT,FOLLOW_IDENT_in_columnList4397); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_IDENT.add(IDENT265);
            	    }
            	    break;
            	default :
            	    break loop97;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EXPRCOL, "EXPRCOL"), root_1);
                while ( stream_IDENT.hasNext() ) {
                    adaptor.addChild(root_1, stream_IDENT.nextNode());
                }
                stream_IDENT.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class fromClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.fromClause_return fromClause() throws RecognitionException {
        EsperEPL2GrammarParser.fromClause_return retval = new EsperEPL2GrammarParser.fromClause_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.streamExpression_return streamExpression266 = null;
        EsperEPL2GrammarParser.regularJoin_return regularJoin267 = null;
        EsperEPL2GrammarParser.outerJoinList_return outerJoinList268 = null;
         paraphrases.push("from clause"); 
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_streamExpression_in_fromClause4435);
            streamExpression266=streamExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, streamExpression266.getTree());
            int alt98=2;
            int LA98_0 = input.LA(1);
            if ( (LA98_0==EOF||LA98_0==WHERE||(LA98_0>=GROUP && LA98_0<=HAVING)||LA98_0==OUTPUT||LA98_0==ORDER||LA98_0==ROW_LIMIT_EXPR||LA98_0==MATCH_RECOGNIZE||LA98_0==FOR||LA98_0==COMMA) ) {
                alt98=1;
            }
            else if ( ((LA98_0>=INNER && LA98_0<=FULL)) ) {
                alt98=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 98, 0, input);
                throw nvae;
            }
            switch (alt98) {
                case 1 :
                    {
                    pushFollow(FOLLOW_regularJoin_in_fromClause4438);
                    regularJoin267=regularJoin();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, regularJoin267.getTree());
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_outerJoinList_in_fromClause4442);
                    outerJoinList268=outerJoinList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoinList268.getTree());
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class regularJoin_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.regularJoin_return regularJoin() throws RecognitionException {
        EsperEPL2GrammarParser.regularJoin_return retval = new EsperEPL2GrammarParser.regularJoin_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA269=null;
        EsperEPL2GrammarParser.streamExpression_return streamExpression270 = null;
        CommonTree COMMA269_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            loop99:
            do {
                int alt99=2;
                int LA99_0 = input.LA(1);
                if ( (LA99_0==COMMA) ) {
                    alt99=1;
                }
                switch (alt99) {
            	case 1 :
            	    {
            	    COMMA269=(Token)match(input,COMMA,FOLLOW_COMMA_in_regularJoin4456); if (state.failed) return retval;
            	    pushFollow(FOLLOW_streamExpression_in_regularJoin4459);
            	    streamExpression270=streamExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, streamExpression270.getTree());
            	    }
            	    break;
            	default :
            	    break loop99;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class outerJoinList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.outerJoinList_return outerJoinList() throws RecognitionException {
        EsperEPL2GrammarParser.outerJoinList_return retval = new EsperEPL2GrammarParser.outerJoinList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.outerJoin_return outerJoin271 = null;
        EsperEPL2GrammarParser.outerJoin_return outerJoin272 = null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_outerJoin_in_outerJoinList4473);
            outerJoin271=outerJoin();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoin271.getTree());
            loop100:
            do {
                int alt100=2;
                int LA100_0 = input.LA(1);
                if ( ((LA100_0>=INNER && LA100_0<=FULL)) ) {
                    alt100=1;
                }
                switch (alt100) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_outerJoin_in_outerJoinList4476);
            	    outerJoin272=outerJoin();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoin272.getTree());
            	    }
            	    break;
            	default :
            	    break loop100;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class outerJoin_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.outerJoin_return outerJoin() throws RecognitionException {
        EsperEPL2GrammarParser.outerJoin_return retval = new EsperEPL2GrammarParser.outerJoin_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token tl=null;
        Token tr=null;
        Token tf=null;
        Token i=null;
        Token OUTER273=null;
        Token JOIN274=null;
        EsperEPL2GrammarParser.streamExpression_return streamExpression275 = null;
        EsperEPL2GrammarParser.outerJoinIdent_return outerJoinIdent276 = null;
        CommonTree tl_tree=null;
        CommonTree tr_tree=null;
        CommonTree tf_tree=null;
        CommonTree i_tree=null;
        CommonTree OUTER273_tree=null;
        CommonTree JOIN274_tree=null;
        RewriteRuleTokenStream stream_OUTER=new RewriteRuleTokenStream(adaptor,"token OUTER");
        RewriteRuleTokenStream stream_RIGHT=new RewriteRuleTokenStream(adaptor,"token RIGHT");
        RewriteRuleTokenStream stream_FULL=new RewriteRuleTokenStream(adaptor,"token FULL");
        RewriteRuleTokenStream stream_INNER=new RewriteRuleTokenStream(adaptor,"token INNER");
        RewriteRuleTokenStream stream_LEFT=new RewriteRuleTokenStream(adaptor,"token LEFT");
        RewriteRuleTokenStream stream_JOIN=new RewriteRuleTokenStream(adaptor,"token JOIN");
        RewriteRuleSubtreeStream stream_streamExpression=new RewriteRuleSubtreeStream(adaptor,"rule streamExpression");
        RewriteRuleSubtreeStream stream_outerJoinIdent=new RewriteRuleSubtreeStream(adaptor,"rule outerJoinIdent");
         paraphrases.push("outer join"); 
        try {
            {
            int alt103=2;
            int LA103_0 = input.LA(1);
            if ( ((LA103_0>=JOIN && LA103_0<=FULL)) ) {
                alt103=1;
            }
            else if ( (LA103_0==INNER) ) {
                alt103=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 103, 0, input);
                throw nvae;
            }
            switch (alt103) {
                case 1 :
                    {
                    int alt102=2;
                    int LA102_0 = input.LA(1);
                    if ( ((LA102_0>=LEFT && LA102_0<=FULL)) ) {
                        alt102=1;
                    }
                    switch (alt102) {
                        case 1 :
                            {
                            int alt101=3;
                            switch ( input.LA(1) ) {
                            case LEFT:
                                {
                                alt101=1;
                                }
                                break;
                            case RIGHT:
                                {
                                alt101=2;
                                }
                                break;
                            case FULL:
                                {
                                alt101=3;
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 101, 0, input);
                                throw nvae;
                            }
                            switch (alt101) {
                                case 1 :
                                    {
                                    tl=(Token)match(input,LEFT,FOLLOW_LEFT_in_outerJoin4519); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_LEFT.add(tl);
                                    }
                                    break;
                                case 2 :
                                    {
                                    tr=(Token)match(input,RIGHT,FOLLOW_RIGHT_in_outerJoin4523); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_RIGHT.add(tr);
                                    }
                                    break;
                                case 3 :
                                    {
                                    tf=(Token)match(input,FULL,FOLLOW_FULL_in_outerJoin4527); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_FULL.add(tf);
                                    }
                                    break;
                            }
                            OUTER273=(Token)match(input,OUTER,FOLLOW_OUTER_in_outerJoin4530); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_OUTER.add(OUTER273);
                            }
                            break;
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    i=(Token)match(input,INNER,FOLLOW_INNER_in_outerJoin4551); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INNER.add(i);
                    }
                    }
                    break;
            }
            JOIN274=(Token)match(input,JOIN,FOLLOW_JOIN_in_outerJoin4565); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_JOIN.add(JOIN274);
            pushFollow(FOLLOW_streamExpression_in_outerJoin4567);
            streamExpression275=streamExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_streamExpression.add(streamExpression275.getTree());
            pushFollow(FOLLOW_outerJoinIdent_in_outerJoin4569);
            outerJoinIdent276=outerJoinIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_outerJoinIdent.add(outerJoinIdent276.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i != null) {
                adaptor.addChild(root_0, stream_streamExpression.nextTree());
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(INNERJOIN_EXPR, "INNERJOIN_EXPR"), root_1);
                adaptor.addChild(root_1, stream_outerJoinIdent.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (tl != null) {
                adaptor.addChild(root_0, stream_streamExpression.nextTree());
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LEFT_OUTERJOIN_EXPR, "LEFT_OUTERJOIN_EXPR"), root_1);
                adaptor.addChild(root_1, stream_outerJoinIdent.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (tr != null) {
                adaptor.addChild(root_0, stream_streamExpression.nextTree());
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(RIGHT_OUTERJOIN_EXPR, "RIGHT_OUTERJOIN_EXPR"), root_1);
                adaptor.addChild(root_1, stream_outerJoinIdent.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_streamExpression.nextTree());
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FULL_OUTERJOIN_EXPR, "FULL_OUTERJOIN_EXPR"), root_1);
                adaptor.addChild(root_1, stream_outerJoinIdent.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class outerJoinIdent_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.outerJoinIdent_return outerJoinIdent() throws RecognitionException {
        EsperEPL2GrammarParser.outerJoinIdent_return retval = new EsperEPL2GrammarParser.outerJoinIdent_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ON277=null;
        Token AND_EXPR279=null;
        EsperEPL2GrammarParser.outerJoinIdentPair_return outerJoinIdentPair278 = null;
        EsperEPL2GrammarParser.outerJoinIdentPair_return outerJoinIdentPair280 = null;
        CommonTree ON277_tree=null;
        CommonTree AND_EXPR279_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            ON277=(Token)match(input,ON,FOLLOW_ON_in_outerJoinIdent4634); if (state.failed) return retval;
            pushFollow(FOLLOW_outerJoinIdentPair_in_outerJoinIdent4637);
            outerJoinIdentPair278=outerJoinIdentPair();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoinIdentPair278.getTree());
            loop104:
            do {
                int alt104=2;
                int LA104_0 = input.LA(1);
                if ( (LA104_0==AND_EXPR) ) {
                    alt104=1;
                }
                switch (alt104) {
            	case 1 :
            	    {
            	    AND_EXPR279=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_outerJoinIdent4640); if (state.failed) return retval;
            	    pushFollow(FOLLOW_outerJoinIdentPair_in_outerJoinIdent4643);
            	    outerJoinIdentPair280=outerJoinIdentPair();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoinIdentPair280.getTree());
            	    }
            	    break;
            	default :
            	    break loop104;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class outerJoinIdentPair_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.outerJoinIdentPair_return outerJoinIdentPair() throws RecognitionException {
        EsperEPL2GrammarParser.outerJoinIdentPair_return retval = new EsperEPL2GrammarParser.outerJoinIdentPair_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token EQUALS282=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty281 = null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty283 = null;
        CommonTree EQUALS282_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_eventProperty_in_outerJoinIdentPair4658);
            eventProperty281=eventProperty();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty281.getTree());
            EQUALS282=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_outerJoinIdentPair4660); if (state.failed) return retval;
            pushFollow(FOLLOW_eventProperty_in_outerJoinIdentPair4663);
            eventProperty283=eventProperty();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty283.getTree());
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class whereClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.whereClause_return whereClause() throws RecognitionException {
        EsperEPL2GrammarParser.whereClause_return retval = new EsperEPL2GrammarParser.whereClause_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.evalOrExpression_return evalOrExpression284 = null;
        RewriteRuleSubtreeStream stream_evalOrExpression=new RewriteRuleSubtreeStream(adaptor,"rule evalOrExpression");
         paraphrases.push("where clause"); 
        try {
            {
            pushFollow(FOLLOW_evalOrExpression_in_whereClause4685);
            evalOrExpression284=evalOrExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_evalOrExpression.add(evalOrExpression284.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WHERE_EXPR, "WHERE_EXPR"), root_1);
                adaptor.addChild(root_1, stream_evalOrExpression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class selectClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.selectClause_return selectClause() throws RecognitionException {
        EsperEPL2GrammarParser.selectClause_return retval = new EsperEPL2GrammarParser.selectClause_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        Token d=null;
        EsperEPL2GrammarParser.selectionList_return selectionList285 = null;
        CommonTree s_tree=null;
        CommonTree d_tree=null;
        RewriteRuleTokenStream stream_IRSTREAM=new RewriteRuleTokenStream(adaptor,"token IRSTREAM");
        RewriteRuleTokenStream stream_ISTREAM=new RewriteRuleTokenStream(adaptor,"token ISTREAM");
        RewriteRuleTokenStream stream_DISTINCT=new RewriteRuleTokenStream(adaptor,"token DISTINCT");
        RewriteRuleTokenStream stream_RSTREAM=new RewriteRuleTokenStream(adaptor,"token RSTREAM");
        RewriteRuleSubtreeStream stream_selectionList=new RewriteRuleSubtreeStream(adaptor,"rule selectionList");
         paraphrases.push("select clause"); 
        try {
            {
            int alt105=4;
            switch ( input.LA(1) ) {
                case RSTREAM:
                    {
                    alt105=1;
                    }
                    break;
                case ISTREAM:
                    {
                    alt105=2;
                    }
                    break;
                case IRSTREAM:
                    {
                    alt105=3;
                    }
                    break;
            }
            switch (alt105) {
                case 1 :
                    {
                    s=(Token)match(input,RSTREAM,FOLLOW_RSTREAM_in_selectClause4721); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RSTREAM.add(s);
                    }
                    break;
                case 2 :
                    {
                    s=(Token)match(input,ISTREAM,FOLLOW_ISTREAM_in_selectClause4727); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ISTREAM.add(s);
                    }
                    break;
                case 3 :
                    {
                    s=(Token)match(input,IRSTREAM,FOLLOW_IRSTREAM_in_selectClause4733); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IRSTREAM.add(s);
                    }
                    break;
            }
            int alt106=2;
            int LA106_0 = input.LA(1);
            if ( (LA106_0==DISTINCT) ) {
                alt106=1;
            }
            switch (alt106) {
                case 1 :
                    {
                    d=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_selectClause4739); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DISTINCT.add(d);
                    }
                    break;
            }
            pushFollow(FOLLOW_selectionList_in_selectClause4742);
            selectionList285=selectionList();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_selectionList.add(selectionList285.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_d=new RewriteRuleTokenStream(adaptor,"token d",d);
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_EXPR, "SELECTION_EXPR"), root_1);
                if ( stream_s.hasNext() ) {
                    adaptor.addChild(root_1, stream_s.nextNode());
                }
                stream_s.reset();
                if ( stream_d.hasNext() ) {
                    adaptor.addChild(root_1, stream_d.nextNode());
                }
                stream_d.reset();
                adaptor.addChild(root_1, stream_selectionList.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class selectionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.selectionList_return selectionList() throws RecognitionException {
        EsperEPL2GrammarParser.selectionList_return retval = new EsperEPL2GrammarParser.selectionList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA287=null;
        EsperEPL2GrammarParser.selectionListElement_return selectionListElement286 = null;
        EsperEPL2GrammarParser.selectionListElement_return selectionListElement288 = null;
        CommonTree COMMA287_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_selectionListElement_in_selectionList4773);
            selectionListElement286=selectionListElement();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, selectionListElement286.getTree());
            loop107:
            do {
                int alt107=2;
                int LA107_0 = input.LA(1);
                if ( (LA107_0==COMMA) ) {
                    alt107=1;
                }
                switch (alt107) {
            	case 1 :
            	    {
            	    COMMA287=(Token)match(input,COMMA,FOLLOW_COMMA_in_selectionList4776); if (state.failed) return retval;
            	    pushFollow(FOLLOW_selectionListElement_in_selectionList4779);
            	    selectionListElement288=selectionListElement();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, selectionListElement288.getTree());
            	    }
            	    break;
            	default :
            	    break loop107;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class selectionListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.selectionListElement_return selectionListElement() throws RecognitionException {
        EsperEPL2GrammarParser.selectionListElement_return retval = new EsperEPL2GrammarParser.selectionListElement_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        Token AS291=null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i = null;
        EsperEPL2GrammarParser.streamSelector_return streamSelector289 = null;
        EsperEPL2GrammarParser.expression_return expression290 = null;
        CommonTree s_tree=null;
        CommonTree AS291_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_keywordAllowedIdent=new RewriteRuleSubtreeStream(adaptor,"rule keywordAllowedIdent");
         String identifier = null; 
        try {
            int alt109=3;
            switch ( input.LA(1) ) {
            case STAR:
                {
                alt109=1;
                }
                break;
            case IDENT:
                {
                int LA109_2 = input.LA(2);
                if ( (LA109_2==DOT) ) {
                    int LA109_70 = input.LA(3);
                    if ( (LA109_70==STAR) && (synpred1_EsperEPL2Grammar())) {
                        alt109=2;
                    }
                    else if ( (LA109_70==WINDOW||LA109_70==ESCAPE||LA109_70==EVERY_EXPR||LA109_70==WHERE||(LA109_70>=SUM && LA109_70<=COUNT)||LA109_70==OUTER||(LA109_70>=JOIN && LA109_70<=FULL)||(LA109_70>=EVENTS && LA109_70<=LAST)||(LA109_70>=UNIDIRECTIONAL && LA109_70<=PREVIOUSTAIL)||LA109_70==PRIOR||(LA109_70>=WEEKDAY && LA109_70<=CAST)||LA109_70==SNAPSHOT||(LA109_70>=VARIABLE && LA109_70<=INDEX)||(LA109_70>=DEFINE && LA109_70<=MATCHES)||LA109_70==WHILE||(LA109_70>=MERGE && LA109_70<=MATCHED)||LA109_70==IDENT||LA109_70==TICKED_STRING_LITERAL) ) {
                        alt109=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 109, 70, input);
                        throw nvae;
                    }
                }
                else if ( (LA109_2==EOF||(LA109_2>=IN_SET && LA109_2<=REGEXP)||(LA109_2>=OR_EXPR && LA109_2<=NOT_EXPR)||(LA109_2>=WHERE && LA109_2<=AS)||(LA109_2>=WHEN && LA109_2<=THEN)||LA109_2==FROM||LA109_2==IS||(LA109_2>=GROUP && LA109_2<=HAVING)||LA109_2==OUTPUT||LA109_2==INSERT||LA109_2==ORDER||LA109_2==ROW_LIMIT_EXPR||LA109_2==FOR||LA109_2==LPAREN||(LA109_2>=COMMA && LA109_2<=EQUALS)||LA109_2==LBRACK||(LA109_2>=STAR && LA109_2<=QUESTION)||(LA109_2>=BAND && LA109_2<=MOD)||LA109_2==ESCAPECHAR) ) {
                    alt109=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 109, 2, input);
                    throw nvae;
                }
                }
                break;
            case WINDOW:
            case ESCAPE:
            case NOT_EXPR:
            case EVERY_EXPR:
            case WHERE:
            case SUM:
            case AVG:
            case MAX:
            case MIN:
            case COALESCE:
            case MEDIAN:
            case STDDEV:
            case AVEDEV:
            case COUNT:
            case CASE:
            case OUTER:
            case JOIN:
            case LEFT:
            case RIGHT:
            case FULL:
            case EVENTS:
            case FIRST:
            case LAST:
            case UNIDIRECTIONAL:
            case RETAINUNION:
            case RETAININTERSECTION:
            case PATTERN:
            case SQL:
            case METADATASQL:
            case PREVIOUS:
            case PREVIOUSTAIL:
            case PREVIOUSCOUNT:
            case PREVIOUSWINDOW:
            case PRIOR:
            case EXISTS:
            case WEEKDAY:
            case LW:
            case INSTANCEOF:
            case TYPEOF:
            case CAST:
            case CURRENT_TIMESTAMP:
            case SNAPSHOT:
            case VARIABLE:
            case UNTIL:
            case AT:
            case INDEX:
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case DEFINE:
            case PARTITION:
            case MATCHES:
            case WHILE:
            case MERGE:
            case MATCHED:
            case NUM_DOUBLE:
            case LCURLY:
            case LPAREN:
            case PLUS:
            case QUESTION:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case MINUS:
            case NUM_INT:
            case TICKED_STRING_LITERAL:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt109=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 109, 0, input);
                throw nvae;
            }
            switch (alt109) {
                case 1 :
                    {
                    s=(Token)match(input,STAR,FOLLOW_STAR_in_selectionListElement4805); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STAR.add(s);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(WILDCARD_SELECT, s));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_streamSelector_in_selectionListElement4823);
                    streamSelector289=streamSelector();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, streamSelector289.getTree());
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_expression_in_selectionListElement4828);
                    expression290=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression290.getTree());
                    int alt108=2;
                    int LA108_0 = input.LA(1);
                    if ( (LA108_0==AS) ) {
                        alt108=1;
                    }
                    switch (alt108) {
                        case 1 :
                            {
                            AS291=(Token)match(input,AS,FOLLOW_AS_in_selectionListElement4831); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_AS.add(AS291);
                            pushFollow(FOLLOW_keywordAllowedIdent_in_selectionListElement4835);
                            i=keywordAllowedIdent();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i.getTree());
                            if ( state.backtracking==0 ) {
                               identifier = i.getTree().toString(); 
                            }
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    if (identifier != null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        adaptor.addChild(root_1, (CommonTree)adaptor.create(IDENT, identifier));
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    if (identifier == null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class streamSelector_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.streamSelector_return streamSelector() throws RecognitionException {
        EsperEPL2GrammarParser.streamSelector_return retval = new EsperEPL2GrammarParser.streamSelector_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        Token i=null;
        Token DOT292=null;
        Token STAR293=null;
        Token AS294=null;
        CommonTree s_tree=null;
        CommonTree i_tree=null;
        CommonTree DOT292_tree=null;
        CommonTree STAR293_tree=null;
        CommonTree AS294_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        try {
            {
            s=(Token)match(input,IDENT,FOLLOW_IDENT_in_streamSelector4891); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(s);
            DOT292=(Token)match(input,DOT,FOLLOW_DOT_in_streamSelector4893); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DOT.add(DOT292);
            STAR293=(Token)match(input,STAR,FOLLOW_STAR_in_streamSelector4895); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_STAR.add(STAR293);
            int alt110=2;
            int LA110_0 = input.LA(1);
            if ( (LA110_0==AS) ) {
                alt110=1;
            }
            switch (alt110) {
                case 1 :
                    {
                    AS294=(Token)match(input,AS,FOLLOW_AS_in_streamSelector4898); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS294);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_streamSelector4902); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_STREAM, "SELECTION_STREAM"), root_1);
                adaptor.addChild(root_1, stream_s.nextNode());
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class streamExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.streamExpression_return streamExpression() throws RecognitionException {
        EsperEPL2GrammarParser.streamExpression_return retval = new EsperEPL2GrammarParser.streamExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token u=null;
        Token ru=null;
        Token ri=null;
        Token DOT299=null;
        Token DOT301=null;
        Token AS303=null;
        EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression295 = null;
        EsperEPL2GrammarParser.patternInclusionExpression_return patternInclusionExpression296 = null;
        EsperEPL2GrammarParser.databaseJoinExpression_return databaseJoinExpression297 = null;
        EsperEPL2GrammarParser.methodJoinExpression_return methodJoinExpression298 = null;
        EsperEPL2GrammarParser.viewExpression_return viewExpression300 = null;
        EsperEPL2GrammarParser.viewExpression_return viewExpression302 = null;
        CommonTree i_tree=null;
        CommonTree u_tree=null;
        CommonTree ru_tree=null;
        CommonTree ri_tree=null;
        CommonTree DOT299_tree=null;
        CommonTree DOT301_tree=null;
        CommonTree AS303_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RETAINUNION=new RewriteRuleTokenStream(adaptor,"token RETAINUNION");
        RewriteRuleTokenStream stream_RETAININTERSECTION=new RewriteRuleTokenStream(adaptor,"token RETAININTERSECTION");
        RewriteRuleTokenStream stream_UNIDIRECTIONAL=new RewriteRuleTokenStream(adaptor,"token UNIDIRECTIONAL");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_databaseJoinExpression=new RewriteRuleSubtreeStream(adaptor,"rule databaseJoinExpression");
        RewriteRuleSubtreeStream stream_methodJoinExpression=new RewriteRuleSubtreeStream(adaptor,"rule methodJoinExpression");
        RewriteRuleSubtreeStream stream_viewExpression=new RewriteRuleSubtreeStream(adaptor,"rule viewExpression");
        RewriteRuleSubtreeStream stream_eventFilterExpression=new RewriteRuleSubtreeStream(adaptor,"rule eventFilterExpression");
        RewriteRuleSubtreeStream stream_patternInclusionExpression=new RewriteRuleSubtreeStream(adaptor,"rule patternInclusionExpression");
        try {
            {
            int alt111=4;
            switch ( input.LA(1) ) {
            case IDENT:
                {
                int LA111_1 = input.LA(2);
                if ( (LA111_1==EOF||(LA111_1>=WHERE && LA111_1<=AS)||(LA111_1>=INNER && LA111_1<=ON)||(LA111_1>=GROUP && LA111_1<=HAVING)||LA111_1==OUTPUT||LA111_1==ORDER||(LA111_1>=UNIDIRECTIONAL && LA111_1<=RETAININTERSECTION)||LA111_1==ROW_LIMIT_EXPR||LA111_1==MATCH_RECOGNIZE||LA111_1==FOR||LA111_1==IDENT||LA111_1==LPAREN||(LA111_1>=COMMA && LA111_1<=LBRACK)) ) {
                    alt111=1;
                }
                else if ( (LA111_1==COLON) ) {
                    alt111=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 111, 1, input);
                    throw nvae;
                }
                }
                break;
            case TICKED_STRING_LITERAL:
                {
                alt111=1;
                }
                break;
            case PATTERN:
                {
                alt111=2;
                }
                break;
            case SQL:
                {
                alt111=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 111, 0, input);
                throw nvae;
            }
            switch (alt111) {
                case 1 :
                    {
                    pushFollow(FOLLOW_eventFilterExpression_in_streamExpression4933);
                    eventFilterExpression295=eventFilterExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_eventFilterExpression.add(eventFilterExpression295.getTree());
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_patternInclusionExpression_in_streamExpression4937);
                    patternInclusionExpression296=patternInclusionExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_patternInclusionExpression.add(patternInclusionExpression296.getTree());
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_databaseJoinExpression_in_streamExpression4941);
                    databaseJoinExpression297=databaseJoinExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_databaseJoinExpression.add(databaseJoinExpression297.getTree());
                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_methodJoinExpression_in_streamExpression4945);
                    methodJoinExpression298=methodJoinExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_methodJoinExpression.add(methodJoinExpression298.getTree());
                    }
                    break;
            }
            int alt113=2;
            int LA113_0 = input.LA(1);
            if ( (LA113_0==DOT) ) {
                alt113=1;
            }
            switch (alt113) {
                case 1 :
                    {
                    DOT299=(Token)match(input,DOT,FOLLOW_DOT_in_streamExpression4952); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT299);
                    pushFollow(FOLLOW_viewExpression_in_streamExpression4954);
                    viewExpression300=viewExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression300.getTree());
                    loop112:
                    do {
                        int alt112=2;
                        int LA112_0 = input.LA(1);
                        if ( (LA112_0==DOT) ) {
                            alt112=1;
                        }
                        switch (alt112) {
                    	case 1 :
                    	    {
                    	    DOT301=(Token)match(input,DOT,FOLLOW_DOT_in_streamExpression4957); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_DOT.add(DOT301);
                    	    pushFollow(FOLLOW_viewExpression_in_streamExpression4959);
                    	    viewExpression302=viewExpression();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression302.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop112;
                        }
                    } while (true);
                    }
                    break;
            }
            int alt114=3;
            int LA114_0 = input.LA(1);
            if ( (LA114_0==AS) ) {
                alt114=1;
            }
            else if ( (LA114_0==IDENT) ) {
                alt114=2;
            }
            switch (alt114) {
                case 1 :
                    {
                    AS303=(Token)match(input,AS,FOLLOW_AS_in_streamExpression4966); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS303);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_streamExpression4970); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_streamExpression4976); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            int alt115=2;
            int LA115_0 = input.LA(1);
            if ( (LA115_0==UNIDIRECTIONAL) ) {
                alt115=1;
            }
            switch (alt115) {
                case 1 :
                    {
                    u=(Token)match(input,UNIDIRECTIONAL,FOLLOW_UNIDIRECTIONAL_in_streamExpression4983); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_UNIDIRECTIONAL.add(u);
                    }
                    break;
            }
            int alt116=3;
            int LA116_0 = input.LA(1);
            if ( (LA116_0==RETAINUNION) ) {
                alt116=1;
            }
            else if ( (LA116_0==RETAININTERSECTION) ) {
                alt116=2;
            }
            switch (alt116) {
                case 1 :
                    {
                    ru=(Token)match(input,RETAINUNION,FOLLOW_RETAINUNION_in_streamExpression4990); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAINUNION.add(ru);
                    }
                    break;
                case 2 :
                    {
                    ri=(Token)match(input,RETAININTERSECTION,FOLLOW_RETAININTERSECTION_in_streamExpression4994); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAININTERSECTION.add(ri);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_u=new RewriteRuleTokenStream(adaptor,"token u",u);
            RewriteRuleTokenStream stream_ri=new RewriteRuleTokenStream(adaptor,"token ri",ri);
            RewriteRuleTokenStream stream_ru=new RewriteRuleTokenStream(adaptor,"token ru",ru);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STREAM_EXPR, "STREAM_EXPR"), root_1);
                if ( stream_eventFilterExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_eventFilterExpression.nextTree());
                }
                stream_eventFilterExpression.reset();
                if ( stream_patternInclusionExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_patternInclusionExpression.nextTree());
                }
                stream_patternInclusionExpression.reset();
                if ( stream_databaseJoinExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_databaseJoinExpression.nextTree());
                }
                stream_databaseJoinExpression.reset();
                if ( stream_methodJoinExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_methodJoinExpression.nextTree());
                }
                stream_methodJoinExpression.reset();
                while ( stream_viewExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_viewExpression.nextTree());
                }
                stream_viewExpression.reset();
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                if ( stream_u.hasNext() ) {
                    adaptor.addChild(root_1, stream_u.nextNode());
                }
                stream_u.reset();
                if ( stream_ru.hasNext() ) {
                    adaptor.addChild(root_1, stream_ru.nextNode());
                }
                stream_ru.reset();
                if ( stream_ri.hasNext() ) {
                    adaptor.addChild(root_1, stream_ri.nextNode());
                }
                stream_ri.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class forExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.forExpr_return forExpr() throws RecognitionException {
        EsperEPL2GrammarParser.forExpr_return retval = new EsperEPL2GrammarParser.forExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token FOR304=null;
        Token LPAREN305=null;
        Token RPAREN307=null;
        EsperEPL2GrammarParser.expressionList_return expressionList306 = null;
        CommonTree i_tree=null;
        CommonTree FOR304_tree=null;
        CommonTree LPAREN305_tree=null;
        CommonTree RPAREN307_tree=null;
        RewriteRuleTokenStream stream_FOR=new RewriteRuleTokenStream(adaptor,"token FOR");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        try {
            {
            FOR304=(Token)match(input,FOR,FOLLOW_FOR_in_forExpr5050); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_FOR.add(FOR304);
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_forExpr5054); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            int alt118=2;
            int LA118_0 = input.LA(1);
            if ( (LA118_0==LPAREN) ) {
                alt118=1;
            }
            switch (alt118) {
                case 1 :
                    {
                    LPAREN305=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_forExpr5057); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN305);
                    int alt117=2;
                    int LA117_0 = input.LA(1);
                    if ( (LA117_0==WINDOW||LA117_0==ESCAPE||(LA117_0>=NOT_EXPR && LA117_0<=EVERY_EXPR)||LA117_0==WHERE||(LA117_0>=SUM && LA117_0<=COUNT)||LA117_0==CASE||LA117_0==OUTER||(LA117_0>=JOIN && LA117_0<=FULL)||(LA117_0>=EVENTS && LA117_0<=LAST)||(LA117_0>=UNIDIRECTIONAL && LA117_0<=CURRENT_TIMESTAMP)||LA117_0==SNAPSHOT||(LA117_0>=VARIABLE && LA117_0<=INDEX)||(LA117_0>=BOOLEAN_TRUE && LA117_0<=VALUE_NULL)||(LA117_0>=DEFINE && LA117_0<=MATCHES)||LA117_0==WHILE||(LA117_0>=MERGE && LA117_0<=MATCHED)||LA117_0==NUM_DOUBLE||(LA117_0>=IDENT && LA117_0<=LCURLY)||LA117_0==LPAREN||(LA117_0>=PLUS && LA117_0<=QUESTION)||(LA117_0>=STRING_LITERAL && LA117_0<=QUOTED_STRING_LITERAL)||LA117_0==MINUS||LA117_0==NUM_INT||(LA117_0>=TICKED_STRING_LITERAL && LA117_0<=NUM_FLOAT)) ) {
                        alt117=1;
                    }
                    switch (alt117) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_expressionList_in_forExpr5059);
                            expressionList306=expressionList();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList306.getTree());
                            }
                            break;
                    }
                    RPAREN307=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_forExpr5062); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN307);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_FOR.nextNode(), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());
                }
                stream_expressionList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecog_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecog_return matchRecog() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecog_return retval = new EsperEPL2GrammarParser.matchRecog_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token MATCH_RECOGNIZE308=null;
        Token LPAREN309=null;
        Token RPAREN317=null;
        EsperEPL2GrammarParser.matchRecogPartitionBy_return matchRecogPartitionBy310 = null;
        EsperEPL2GrammarParser.matchRecogMeasures_return matchRecogMeasures311 = null;
        EsperEPL2GrammarParser.matchRecogMatchesSelection_return matchRecogMatchesSelection312 = null;
        EsperEPL2GrammarParser.matchRecogMatchesAfterSkip_return matchRecogMatchesAfterSkip313 = null;
        EsperEPL2GrammarParser.matchRecogPattern_return matchRecogPattern314 = null;
        EsperEPL2GrammarParser.matchRecogMatchesInterval_return matchRecogMatchesInterval315 = null;
        EsperEPL2GrammarParser.matchRecogDefine_return matchRecogDefine316 = null;
        CommonTree MATCH_RECOGNIZE308_tree=null;
        CommonTree LPAREN309_tree=null;
        CommonTree RPAREN317_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_MATCH_RECOGNIZE=new RewriteRuleTokenStream(adaptor,"token MATCH_RECOGNIZE");
        RewriteRuleSubtreeStream stream_matchRecogPattern=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPattern");
        RewriteRuleSubtreeStream stream_matchRecogMatchesInterval=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogMatchesInterval");
        RewriteRuleSubtreeStream stream_matchRecogMatchesAfterSkip=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogMatchesAfterSkip");
        RewriteRuleSubtreeStream stream_matchRecogMeasures=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogMeasures");
        RewriteRuleSubtreeStream stream_matchRecogPartitionBy=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPartitionBy");
        RewriteRuleSubtreeStream stream_matchRecogMatchesSelection=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogMatchesSelection");
        RewriteRuleSubtreeStream stream_matchRecogDefine=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogDefine");
        try {
            {
            MATCH_RECOGNIZE308=(Token)match(input,MATCH_RECOGNIZE,FOLLOW_MATCH_RECOGNIZE_in_matchRecog5098); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MATCH_RECOGNIZE.add(MATCH_RECOGNIZE308);
            LPAREN309=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_matchRecog5112); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN309);
            int alt119=2;
            int LA119_0 = input.LA(1);
            if ( (LA119_0==PARTITION) ) {
                alt119=1;
            }
            switch (alt119) {
                case 1 :
                    {
                    pushFollow(FOLLOW_matchRecogPartitionBy_in_matchRecog5118);
                    matchRecogPartitionBy310=matchRecogPartitionBy();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_matchRecogPartitionBy.add(matchRecogPartitionBy310.getTree());
                    }
                    break;
            }
            pushFollow(FOLLOW_matchRecogMeasures_in_matchRecog5125);
            matchRecogMeasures311=matchRecogMeasures();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogMeasures.add(matchRecogMeasures311.getTree());
            int alt120=2;
            int LA120_0 = input.LA(1);
            if ( (LA120_0==ALL) ) {
                alt120=1;
            }
            switch (alt120) {
                case 1 :
                    {
                    pushFollow(FOLLOW_matchRecogMatchesSelection_in_matchRecog5130);
                    matchRecogMatchesSelection312=matchRecogMatchesSelection();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_matchRecogMatchesSelection.add(matchRecogMatchesSelection312.getTree());
                    }
                    break;
            }
            int alt121=2;
            int LA121_0 = input.LA(1);
            if ( (LA121_0==AFTER) ) {
                alt121=1;
            }
            switch (alt121) {
                case 1 :
                    {
                    pushFollow(FOLLOW_matchRecogMatchesAfterSkip_in_matchRecog5136);
                    matchRecogMatchesAfterSkip313=matchRecogMatchesAfterSkip();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_matchRecogMatchesAfterSkip.add(matchRecogMatchesAfterSkip313.getTree());
                    }
                    break;
            }
            pushFollow(FOLLOW_matchRecogPattern_in_matchRecog5142);
            matchRecogPattern314=matchRecogPattern();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogPattern.add(matchRecogPattern314.getTree());
            int alt122=2;
            int LA122_0 = input.LA(1);
            if ( (LA122_0==IDENT) ) {
                alt122=1;
            }
            switch (alt122) {
                case 1 :
                    {
                    pushFollow(FOLLOW_matchRecogMatchesInterval_in_matchRecog5148);
                    matchRecogMatchesInterval315=matchRecogMatchesInterval();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_matchRecogMatchesInterval.add(matchRecogMatchesInterval315.getTree());
                    }
                    break;
            }
            pushFollow(FOLLOW_matchRecogDefine_in_matchRecog5154);
            matchRecogDefine316=matchRecogDefine();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogDefine.add(matchRecogDefine316.getTree());
            RPAREN317=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_matchRecog5161); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN317);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_MATCH_RECOGNIZE.nextNode(), root_1);
                if ( stream_matchRecogPartitionBy.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogPartitionBy.nextTree());
                }
                stream_matchRecogPartitionBy.reset();
                adaptor.addChild(root_1, stream_matchRecogMeasures.nextTree());
                if ( stream_matchRecogMatchesSelection.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogMatchesSelection.nextTree());
                }
                stream_matchRecogMatchesSelection.reset();
                if ( stream_matchRecogMatchesAfterSkip.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogMatchesAfterSkip.nextTree());
                }
                stream_matchRecogMatchesAfterSkip.reset();
                adaptor.addChild(root_1, stream_matchRecogPattern.nextTree());
                if ( stream_matchRecogMatchesInterval.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogMatchesInterval.nextTree());
                }
                stream_matchRecogMatchesInterval.reset();
                adaptor.addChild(root_1, stream_matchRecogDefine.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogPartitionBy_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogPartitionBy_return matchRecogPartitionBy() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPartitionBy_return retval = new EsperEPL2GrammarParser.matchRecogPartitionBy_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token PARTITION318=null;
        Token BY319=null;
        Token COMMA321=null;
        EsperEPL2GrammarParser.expression_return expression320 = null;
        EsperEPL2GrammarParser.expression_return expression322 = null;
        CommonTree PARTITION318_tree=null;
        CommonTree BY319_tree=null;
        CommonTree COMMA321_tree=null;
        RewriteRuleTokenStream stream_BY=new RewriteRuleTokenStream(adaptor,"token BY");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_PARTITION=new RewriteRuleTokenStream(adaptor,"token PARTITION");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            {
            PARTITION318=(Token)match(input,PARTITION,FOLLOW_PARTITION_in_matchRecogPartitionBy5198); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_PARTITION.add(PARTITION318);
            BY319=(Token)match(input,BY,FOLLOW_BY_in_matchRecogPartitionBy5200); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_BY.add(BY319);
            pushFollow(FOLLOW_expression_in_matchRecogPartitionBy5202);
            expression320=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression320.getTree());
            loop123:
            do {
                int alt123=2;
                int LA123_0 = input.LA(1);
                if ( (LA123_0==COMMA) ) {
                    alt123=1;
                }
                switch (alt123) {
            	case 1 :
            	    {
            	    COMMA321=(Token)match(input,COMMA,FOLLOW_COMMA_in_matchRecogPartitionBy5205); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA321);
            	    pushFollow(FOLLOW_expression_in_matchRecogPartitionBy5207);
            	    expression322=expression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_expression.add(expression322.getTree());
            	    }
            	    break;
            	default :
            	    break loop123;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_PARTITION, "MATCHREC_PARTITION"), root_1);
                if ( !(stream_expression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogMeasures_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogMeasures_return matchRecogMeasures() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogMeasures_return retval = new EsperEPL2GrammarParser.matchRecogMeasures_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token MEASURES323=null;
        Token COMMA325=null;
        EsperEPL2GrammarParser.matchRecogMeasureItem_return matchRecogMeasureItem324 = null;
        EsperEPL2GrammarParser.matchRecogMeasureItem_return matchRecogMeasureItem326 = null;
        CommonTree MEASURES323_tree=null;
        CommonTree COMMA325_tree=null;
        RewriteRuleTokenStream stream_MEASURES=new RewriteRuleTokenStream(adaptor,"token MEASURES");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_matchRecogMeasureItem=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogMeasureItem");
        try {
            {
            MEASURES323=(Token)match(input,MEASURES,FOLLOW_MEASURES_in_matchRecogMeasures5236); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MEASURES.add(MEASURES323);
            pushFollow(FOLLOW_matchRecogMeasureItem_in_matchRecogMeasures5238);
            matchRecogMeasureItem324=matchRecogMeasureItem();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogMeasureItem.add(matchRecogMeasureItem324.getTree());
            loop124:
            do {
                int alt124=2;
                int LA124_0 = input.LA(1);
                if ( (LA124_0==COMMA) ) {
                    alt124=1;
                }
                switch (alt124) {
            	case 1 :
            	    {
            	    COMMA325=(Token)match(input,COMMA,FOLLOW_COMMA_in_matchRecogMeasures5241); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA325);
            	    pushFollow(FOLLOW_matchRecogMeasureItem_in_matchRecogMeasures5243);
            	    matchRecogMeasureItem326=matchRecogMeasureItem();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_matchRecogMeasureItem.add(matchRecogMeasureItem326.getTree());
            	    }
            	    break;
            	default :
            	    break loop124;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_MEASURES, "MATCHREC_MEASURES"), root_1);
                while ( stream_matchRecogMeasureItem.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogMeasureItem.nextTree());
                }
                stream_matchRecogMeasureItem.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogMeasureItem_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogMeasureItem_return matchRecogMeasureItem() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogMeasureItem_return retval = new EsperEPL2GrammarParser.matchRecogMeasureItem_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token AS328=null;
        EsperEPL2GrammarParser.expression_return expression327 = null;
        CommonTree i_tree=null;
        CommonTree AS328_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            {
            pushFollow(FOLLOW_expression_in_matchRecogMeasureItem5268);
            expression327=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression327.getTree());
            int alt126=2;
            int LA126_0 = input.LA(1);
            if ( (LA126_0==AS) ) {
                alt126=1;
            }
            switch (alt126) {
                case 1 :
                    {
                    AS328=(Token)match(input,AS,FOLLOW_AS_in_matchRecogMeasureItem5271); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS328);
                    int alt125=2;
                    int LA125_0 = input.LA(1);
                    if ( (LA125_0==IDENT) ) {
                        alt125=1;
                    }
                    switch (alt125) {
                        case 1 :
                            {
                            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_matchRecogMeasureItem5276); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IDENT.add(i);
                            }
                            break;
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_MEASURE_ITEM, "MATCHREC_MEASURE_ITEM"), root_1);
                adaptor.addChild(root_1, stream_expression.nextTree());
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogMatchesSelection_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogMatchesSelection_return matchRecogMatchesSelection() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogMatchesSelection_return retval = new EsperEPL2GrammarParser.matchRecogMatchesSelection_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ALL329=null;
        Token MATCHES330=null;
        CommonTree ALL329_tree=null;
        CommonTree MATCHES330_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            ALL329=(Token)match(input,ALL,FOLLOW_ALL_in_matchRecogMatchesSelection5307); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ALL329_tree = (CommonTree)adaptor.create(ALL329);
            root_0 = (CommonTree)adaptor.becomeRoot(ALL329_tree, root_0);
            }
            MATCHES330=(Token)match(input,MATCHES,FOLLOW_MATCHES_in_matchRecogMatchesSelection5310); if (state.failed) return retval;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogPattern_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogPattern_return matchRecogPattern() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPattern_return retval = new EsperEPL2GrammarParser.matchRecogPattern_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token PATTERN331=null;
        Token LPAREN332=null;
        Token RPAREN334=null;
        EsperEPL2GrammarParser.matchRecogPatternAlteration_return matchRecogPatternAlteration333 = null;
        CommonTree PATTERN331_tree=null;
        CommonTree LPAREN332_tree=null;
        CommonTree RPAREN334_tree=null;
        RewriteRuleTokenStream stream_PATTERN=new RewriteRuleTokenStream(adaptor,"token PATTERN");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_matchRecogPatternAlteration=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPatternAlteration");
        try {
            {
            PATTERN331=(Token)match(input,PATTERN,FOLLOW_PATTERN_in_matchRecogPattern5325); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_PATTERN.add(PATTERN331);
            LPAREN332=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_matchRecogPattern5327); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN332);
            pushFollow(FOLLOW_matchRecogPatternAlteration_in_matchRecogPattern5329);
            matchRecogPatternAlteration333=matchRecogPatternAlteration();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogPatternAlteration.add(matchRecogPatternAlteration333.getTree());
            RPAREN334=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_matchRecogPattern5331); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN334);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_PATTERN, "MATCHREC_PATTERN"), root_1);
                adaptor.addChild(root_1, stream_matchRecogPatternAlteration.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogMatchesAfterSkip_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogMatchesAfterSkip_return matchRecogMatchesAfterSkip() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogMatchesAfterSkip_return retval = new EsperEPL2GrammarParser.matchRecogMatchesAfterSkip_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token AFTER335=null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i1 = null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i2 = null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i3 = null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i4 = null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i5 = null;
        CommonTree AFTER335_tree=null;
        RewriteRuleTokenStream stream_AFTER=new RewriteRuleTokenStream(adaptor,"token AFTER");
        RewriteRuleSubtreeStream stream_keywordAllowedIdent=new RewriteRuleSubtreeStream(adaptor,"rule keywordAllowedIdent");
        try {
            {
            AFTER335=(Token)match(input,AFTER,FOLLOW_AFTER_in_matchRecogMatchesAfterSkip5353); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_AFTER.add(AFTER335);
            pushFollow(FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip5357);
            i1=keywordAllowedIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i1.getTree());
            pushFollow(FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip5361);
            i2=keywordAllowedIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i2.getTree());
            pushFollow(FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip5365);
            i3=keywordAllowedIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i3.getTree());
            pushFollow(FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip5369);
            i4=keywordAllowedIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i4.getTree());
            pushFollow(FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip5373);
            i5=keywordAllowedIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i5.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_i5=new RewriteRuleSubtreeStream(adaptor,"rule i5",i5!=null?i5.tree:null);
            RewriteRuleSubtreeStream stream_i4=new RewriteRuleSubtreeStream(adaptor,"rule i4",i4!=null?i4.tree:null);
            RewriteRuleSubtreeStream stream_i3=new RewriteRuleSubtreeStream(adaptor,"rule i3",i3!=null?i3.tree:null);
            RewriteRuleSubtreeStream stream_i2=new RewriteRuleSubtreeStream(adaptor,"rule i2",i2!=null?i2.tree:null);
            RewriteRuleSubtreeStream stream_i1=new RewriteRuleSubtreeStream(adaptor,"rule i1",i1!=null?i1.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_AFTER_SKIP, "MATCHREC_AFTER_SKIP"), root_1);
                adaptor.addChild(root_1, stream_i1.nextTree());
                adaptor.addChild(root_1, stream_i2.nextTree());
                adaptor.addChild(root_1, stream_i3.nextTree());
                adaptor.addChild(root_1, stream_i4.nextTree());
                adaptor.addChild(root_1, stream_i5.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogMatchesInterval_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogMatchesInterval_return matchRecogMatchesInterval() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogMatchesInterval_return retval = new EsperEPL2GrammarParser.matchRecogMatchesInterval_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        EsperEPL2GrammarParser.timePeriod_return timePeriod336 = null;
        CommonTree i_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_timePeriod=new RewriteRuleSubtreeStream(adaptor,"rule timePeriod");
        try {
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_matchRecogMatchesInterval5409); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            pushFollow(FOLLOW_timePeriod_in_matchRecogMatchesInterval5411);
            timePeriod336=timePeriod();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_timePeriod.add(timePeriod336.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_INTERVAL, "MATCHREC_INTERVAL"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_timePeriod.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogPatternAlteration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogPatternAlteration_return matchRecogPatternAlteration() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPatternAlteration_return retval = new EsperEPL2GrammarParser.matchRecogPatternAlteration_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token o=null;
        EsperEPL2GrammarParser.matchRecogPatternConcat_return matchRecogPatternConcat337 = null;
        EsperEPL2GrammarParser.matchRecogPatternConcat_return matchRecogPatternConcat338 = null;
        CommonTree o_tree=null;
        RewriteRuleTokenStream stream_BOR=new RewriteRuleTokenStream(adaptor,"token BOR");
        RewriteRuleSubtreeStream stream_matchRecogPatternConcat=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPatternConcat");
        try {
            {
            pushFollow(FOLLOW_matchRecogPatternConcat_in_matchRecogPatternAlteration5437);
            matchRecogPatternConcat337=matchRecogPatternConcat();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogPatternConcat.add(matchRecogPatternConcat337.getTree());
            loop127:
            do {
                int alt127=2;
                int LA127_0 = input.LA(1);
                if ( (LA127_0==BOR) ) {
                    alt127=1;
                }
                switch (alt127) {
            	case 1 :
            	    {
            	    o=(Token)match(input,BOR,FOLLOW_BOR_in_matchRecogPatternAlteration5442); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_BOR.add(o);
            	    pushFollow(FOLLOW_matchRecogPatternConcat_in_matchRecogPatternAlteration5444);
            	    matchRecogPatternConcat338=matchRecogPatternConcat();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_matchRecogPatternConcat.add(matchRecogPatternConcat338.getTree());
            	    }
            	    break;
            	default :
            	    break loop127;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (o != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_PATTERN_ALTER, "MATCHREC_PATTERN_ALTER"), root_1);
                if ( !(stream_matchRecogPatternConcat.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_matchRecogPatternConcat.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogPatternConcat.nextTree());
                }
                stream_matchRecogPatternConcat.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_matchRecogPatternConcat.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogPatternConcat_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogPatternConcat_return matchRecogPatternConcat() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPatternConcat_return retval = new EsperEPL2GrammarParser.matchRecogPatternConcat_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.matchRecogPatternUnary_return matchRecogPatternUnary339 = null;
        RewriteRuleSubtreeStream stream_matchRecogPatternUnary=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPatternUnary");
        try {
            {
            int cnt128=0;
            loop128:
            do {
                int alt128=2;
                int LA128_0 = input.LA(1);
                if ( (LA128_0==IDENT||LA128_0==LPAREN) ) {
                    alt128=1;
                }
                switch (alt128) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_matchRecogPatternUnary_in_matchRecogPatternConcat5477);
            	    matchRecogPatternUnary339=matchRecogPatternUnary();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_matchRecogPatternUnary.add(matchRecogPatternUnary339.getTree());
            	    }
            	    break;
            	default :
            	    if ( cnt128 >= 1 ) break loop128;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(128, input);
                        throw eee;
                }
                cnt128++;
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_PATTERN_CONCAT, "MATCHREC_PATTERN_CONCAT"), root_1);
                if ( !(stream_matchRecogPatternUnary.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_matchRecogPatternUnary.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogPatternUnary.nextTree());
                }
                stream_matchRecogPatternUnary.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogPatternUnary_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogPatternUnary_return matchRecogPatternUnary() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPatternUnary_return retval = new EsperEPL2GrammarParser.matchRecogPatternUnary_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.matchRecogPatternNested_return matchRecogPatternNested340 = null;
        EsperEPL2GrammarParser.matchRecogPatternAtom_return matchRecogPatternAtom341 = null;
        try {
            int alt129=2;
            int LA129_0 = input.LA(1);
            if ( (LA129_0==LPAREN) ) {
                alt129=1;
            }
            else if ( (LA129_0==IDENT) ) {
                alt129=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 129, 0, input);
                throw nvae;
            }
            switch (alt129) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_matchRecogPatternNested_in_matchRecogPatternUnary5502);
                    matchRecogPatternNested340=matchRecogPatternNested();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, matchRecogPatternNested340.getTree());
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_matchRecogPatternAtom_in_matchRecogPatternUnary5508);
                    matchRecogPatternAtom341=matchRecogPatternAtom();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, matchRecogPatternAtom341.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogPatternNested_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogPatternNested_return matchRecogPatternNested() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPatternNested_return retval = new EsperEPL2GrammarParser.matchRecogPatternNested_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        Token p=null;
        Token q=null;
        Token LPAREN342=null;
        Token RPAREN344=null;
        EsperEPL2GrammarParser.matchRecogPatternAlteration_return matchRecogPatternAlteration343 = null;
        CommonTree s_tree=null;
        CommonTree p_tree=null;
        CommonTree q_tree=null;
        CommonTree LPAREN342_tree=null;
        CommonTree RPAREN344_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_PLUS=new RewriteRuleTokenStream(adaptor,"token PLUS");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_QUESTION=new RewriteRuleTokenStream(adaptor,"token QUESTION");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_matchRecogPatternAlteration=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPatternAlteration");
        try {
            {
            LPAREN342=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_matchRecogPatternNested5520); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN342);
            pushFollow(FOLLOW_matchRecogPatternAlteration_in_matchRecogPatternNested5522);
            matchRecogPatternAlteration343=matchRecogPatternAlteration();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogPatternAlteration.add(matchRecogPatternAlteration343.getTree());
            RPAREN344=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_matchRecogPatternNested5524); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN344);
            int alt130=4;
            switch ( input.LA(1) ) {
                case STAR:
                    {
                    alt130=1;
                    }
                    break;
                case PLUS:
                    {
                    alt130=2;
                    }
                    break;
                case QUESTION:
                    {
                    alt130=3;
                    }
                    break;
            }
            switch (alt130) {
                case 1 :
                    {
                    s=(Token)match(input,STAR,FOLLOW_STAR_in_matchRecogPatternNested5529); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STAR.add(s);
                    }
                    break;
                case 2 :
                    {
                    p=(Token)match(input,PLUS,FOLLOW_PLUS_in_matchRecogPatternNested5535); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PLUS.add(p);
                    }
                    break;
                case 3 :
                    {
                    q=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_matchRecogPatternNested5541); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUESTION.add(q);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_q=new RewriteRuleTokenStream(adaptor,"token q",q);
            RewriteRuleTokenStream stream_p=new RewriteRuleTokenStream(adaptor,"token p",p);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_PATTERN_NESTED, "MATCHREC_PATTERN_NESTED"), root_1);
                adaptor.addChild(root_1, stream_matchRecogPatternAlteration.nextTree());
                if ( stream_s.hasNext() ) {
                    adaptor.addChild(root_1, stream_s.nextNode());
                }
                stream_s.reset();
                if ( stream_p.hasNext() ) {
                    adaptor.addChild(root_1, stream_p.nextNode());
                }
                stream_p.reset();
                if ( stream_q.hasNext() ) {
                    adaptor.addChild(root_1, stream_q.nextNode());
                }
                stream_q.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogPatternAtom_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogPatternAtom_return matchRecogPatternAtom() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPatternAtom_return retval = new EsperEPL2GrammarParser.matchRecogPatternAtom_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token s=null;
        Token p=null;
        Token q=null;
        Token reluctant=null;
        CommonTree i_tree=null;
        CommonTree s_tree=null;
        CommonTree p_tree=null;
        CommonTree q_tree=null;
        CommonTree reluctant_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_PLUS=new RewriteRuleTokenStream(adaptor,"token PLUS");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_QUESTION=new RewriteRuleTokenStream(adaptor,"token QUESTION");
        try {
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_matchRecogPatternAtom5580); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            int alt133=2;
            int LA133_0 = input.LA(1);
            if ( (LA133_0==STAR||(LA133_0>=PLUS && LA133_0<=QUESTION)) ) {
                alt133=1;
            }
            switch (alt133) {
                case 1 :
                    {
                    int alt131=3;
                    switch ( input.LA(1) ) {
                    case STAR:
                        {
                        alt131=1;
                        }
                        break;
                    case PLUS:
                        {
                        alt131=2;
                        }
                        break;
                    case QUESTION:
                        {
                        alt131=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 131, 0, input);
                        throw nvae;
                    }
                    switch (alt131) {
                        case 1 :
                            {
                            s=(Token)match(input,STAR,FOLLOW_STAR_in_matchRecogPatternAtom5586); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_STAR.add(s);
                            }
                            break;
                        case 2 :
                            {
                            p=(Token)match(input,PLUS,FOLLOW_PLUS_in_matchRecogPatternAtom5592); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_PLUS.add(p);
                            }
                            break;
                        case 3 :
                            {
                            q=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_matchRecogPatternAtom5598); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUESTION.add(q);
                            }
                            break;
                    }
                    int alt132=2;
                    int LA132_0 = input.LA(1);
                    if ( (LA132_0==QUESTION) ) {
                        alt132=1;
                    }
                    switch (alt132) {
                        case 1 :
                            {
                            reluctant=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_matchRecogPatternAtom5604); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUESTION.add(reluctant);
                            }
                            break;
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_reluctant=new RewriteRuleTokenStream(adaptor,"token reluctant",reluctant);
            RewriteRuleTokenStream stream_q=new RewriteRuleTokenStream(adaptor,"token q",q);
            RewriteRuleTokenStream stream_p=new RewriteRuleTokenStream(adaptor,"token p",p);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_PATTERN_ATOM, "MATCHREC_PATTERN_ATOM"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                if ( stream_s.hasNext() ) {
                    adaptor.addChild(root_1, stream_s.nextNode());
                }
                stream_s.reset();
                if ( stream_p.hasNext() ) {
                    adaptor.addChild(root_1, stream_p.nextNode());
                }
                stream_p.reset();
                if ( stream_q.hasNext() ) {
                    adaptor.addChild(root_1, stream_q.nextNode());
                }
                stream_q.reset();
                if ( stream_reluctant.hasNext() ) {
                    adaptor.addChild(root_1, stream_reluctant.nextNode());
                }
                stream_reluctant.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogDefine_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogDefine_return matchRecogDefine() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogDefine_return retval = new EsperEPL2GrammarParser.matchRecogDefine_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token DEFINE345=null;
        Token COMMA347=null;
        EsperEPL2GrammarParser.matchRecogDefineItem_return matchRecogDefineItem346 = null;
        EsperEPL2GrammarParser.matchRecogDefineItem_return matchRecogDefineItem348 = null;
        CommonTree DEFINE345_tree=null;
        CommonTree COMMA347_tree=null;
        RewriteRuleTokenStream stream_DEFINE=new RewriteRuleTokenStream(adaptor,"token DEFINE");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_matchRecogDefineItem=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogDefineItem");
        try {
            {
            DEFINE345=(Token)match(input,DEFINE,FOLLOW_DEFINE_in_matchRecogDefine5648); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DEFINE.add(DEFINE345);
            pushFollow(FOLLOW_matchRecogDefineItem_in_matchRecogDefine5650);
            matchRecogDefineItem346=matchRecogDefineItem();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogDefineItem.add(matchRecogDefineItem346.getTree());
            loop134:
            do {
                int alt134=2;
                int LA134_0 = input.LA(1);
                if ( (LA134_0==COMMA) ) {
                    alt134=1;
                }
                switch (alt134) {
            	case 1 :
            	    {
            	    COMMA347=(Token)match(input,COMMA,FOLLOW_COMMA_in_matchRecogDefine5653); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA347);
            	    pushFollow(FOLLOW_matchRecogDefineItem_in_matchRecogDefine5655);
            	    matchRecogDefineItem348=matchRecogDefineItem();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_matchRecogDefineItem.add(matchRecogDefineItem348.getTree());
            	    }
            	    break;
            	default :
            	    break loop134;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_DEFINE, "MATCHREC_DEFINE"), root_1);
                if ( !(stream_matchRecogDefineItem.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_matchRecogDefineItem.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogDefineItem.nextTree());
                }
                stream_matchRecogDefineItem.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogDefineItem_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogDefineItem_return matchRecogDefineItem() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogDefineItem_return retval = new EsperEPL2GrammarParser.matchRecogDefineItem_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token AS349=null;
        EsperEPL2GrammarParser.expression_return expression350 = null;
        CommonTree i_tree=null;
        CommonTree AS349_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_matchRecogDefineItem5682); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            AS349=(Token)match(input,AS,FOLLOW_AS_in_matchRecogDefineItem5684); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_AS.add(AS349);
            pushFollow(FOLLOW_expression_in_matchRecogDefineItem5686);
            expression350=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression350.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_DEFINE_ITEM, "MATCHREC_DEFINE_ITEM"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_expression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class patternInclusionExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.patternInclusionExpression_return patternInclusionExpression() throws RecognitionException {
        EsperEPL2GrammarParser.patternInclusionExpression_return retval = new EsperEPL2GrammarParser.patternInclusionExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token PATTERN351=null;
        Token LBRACK352=null;
        Token RBRACK354=null;
        EsperEPL2GrammarParser.patternExpression_return patternExpression353 = null;
        CommonTree PATTERN351_tree=null;
        CommonTree LBRACK352_tree=null;
        CommonTree RBRACK354_tree=null;
        RewriteRuleTokenStream stream_PATTERN=new RewriteRuleTokenStream(adaptor,"token PATTERN");
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleSubtreeStream stream_patternExpression=new RewriteRuleSubtreeStream(adaptor,"rule patternExpression");
        try {
            {
            PATTERN351=(Token)match(input,PATTERN,FOLLOW_PATTERN_in_patternInclusionExpression5711); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_PATTERN.add(PATTERN351);
            LBRACK352=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_patternInclusionExpression5713); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK352);
            pushFollow(FOLLOW_patternExpression_in_patternInclusionExpression5715);
            patternExpression353=patternExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_patternExpression.add(patternExpression353.getTree());
            RBRACK354=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_patternInclusionExpression5717); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK354);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATTERN_INCL_EXPR, "PATTERN_INCL_EXPR"), root_1);
                adaptor.addChild(root_1, stream_patternExpression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class databaseJoinExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.databaseJoinExpression_return databaseJoinExpression() throws RecognitionException {
        EsperEPL2GrammarParser.databaseJoinExpression_return retval = new EsperEPL2GrammarParser.databaseJoinExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token s=null;
        Token s2=null;
        Token SQL355=null;
        Token COLON356=null;
        Token LBRACK357=null;
        Token METADATASQL358=null;
        Token RBRACK359=null;
        CommonTree i_tree=null;
        CommonTree s_tree=null;
        CommonTree s2_tree=null;
        CommonTree SQL355_tree=null;
        CommonTree COLON356_tree=null;
        CommonTree LBRACK357_tree=null;
        CommonTree METADATASQL358_tree=null;
        CommonTree RBRACK359_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_SQL=new RewriteRuleTokenStream(adaptor,"token SQL");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token STRING_LITERAL");
        RewriteRuleTokenStream stream_METADATASQL=new RewriteRuleTokenStream(adaptor,"token METADATASQL");
        RewriteRuleTokenStream stream_QUOTED_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token QUOTED_STRING_LITERAL");
         paraphrases.push("relational data join"); 
        try {
            {
            SQL355=(Token)match(input,SQL,FOLLOW_SQL_in_databaseJoinExpression5750); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SQL.add(SQL355);
            COLON356=(Token)match(input,COLON,FOLLOW_COLON_in_databaseJoinExpression5752); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON356);
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_databaseJoinExpression5756); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            LBRACK357=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_databaseJoinExpression5758); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK357);
            int alt135=2;
            int LA135_0 = input.LA(1);
            if ( (LA135_0==STRING_LITERAL) ) {
                alt135=1;
            }
            else if ( (LA135_0==QUOTED_STRING_LITERAL) ) {
                alt135=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 135, 0, input);
                throw nvae;
            }
            switch (alt135) {
                case 1 :
                    {
                    s=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_databaseJoinExpression5763); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STRING_LITERAL.add(s);
                    }
                    break;
                case 2 :
                    {
                    s=(Token)match(input,QUOTED_STRING_LITERAL,FOLLOW_QUOTED_STRING_LITERAL_in_databaseJoinExpression5769); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUOTED_STRING_LITERAL.add(s);
                    }
                    break;
            }
            int alt137=2;
            int LA137_0 = input.LA(1);
            if ( (LA137_0==METADATASQL) ) {
                alt137=1;
            }
            switch (alt137) {
                case 1 :
                    {
                    METADATASQL358=(Token)match(input,METADATASQL,FOLLOW_METADATASQL_in_databaseJoinExpression5773); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_METADATASQL.add(METADATASQL358);
                    int alt136=2;
                    int LA136_0 = input.LA(1);
                    if ( (LA136_0==STRING_LITERAL) ) {
                        alt136=1;
                    }
                    else if ( (LA136_0==QUOTED_STRING_LITERAL) ) {
                        alt136=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 136, 0, input);
                        throw nvae;
                    }
                    switch (alt136) {
                        case 1 :
                            {
                            s2=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_databaseJoinExpression5778); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_STRING_LITERAL.add(s2);
                            }
                            break;
                        case 2 :
                            {
                            s2=(Token)match(input,QUOTED_STRING_LITERAL,FOLLOW_QUOTED_STRING_LITERAL_in_databaseJoinExpression5784); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUOTED_STRING_LITERAL.add(s2);
                            }
                            break;
                    }
                    }
                    break;
            }
            RBRACK359=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_databaseJoinExpression5789); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK359);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s2=new RewriteRuleTokenStream(adaptor,"token s2",s2);
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DATABASE_JOIN_EXPR, "DATABASE_JOIN_EXPR"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_s.nextNode());
                if ( stream_s2.hasNext() ) {
                    adaptor.addChild(root_1, stream_s2.nextNode());
                }
                stream_s2.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class methodJoinExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.methodJoinExpression_return methodJoinExpression() throws RecognitionException {
        EsperEPL2GrammarParser.methodJoinExpression_return retval = new EsperEPL2GrammarParser.methodJoinExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token COLON360=null;
        Token LPAREN362=null;
        Token RPAREN364=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier361 = null;
        EsperEPL2GrammarParser.expressionList_return expressionList363 = null;
        CommonTree i_tree=null;
        CommonTree COLON360_tree=null;
        CommonTree LPAREN362_tree=null;
        CommonTree RPAREN364_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
         paraphrases.push("method invocation join"); 
        try {
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_methodJoinExpression5840); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            COLON360=(Token)match(input,COLON,FOLLOW_COLON_in_methodJoinExpression5842); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON360);
            pushFollow(FOLLOW_classIdentifier_in_methodJoinExpression5844);
            classIdentifier361=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier361.getTree());
            int alt139=2;
            int LA139_0 = input.LA(1);
            if ( (LA139_0==LPAREN) ) {
                alt139=1;
            }
            switch (alt139) {
                case 1 :
                    {
                    LPAREN362=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_methodJoinExpression5847); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN362);
                    int alt138=2;
                    int LA138_0 = input.LA(1);
                    if ( (LA138_0==WINDOW||LA138_0==ESCAPE||(LA138_0>=NOT_EXPR && LA138_0<=EVERY_EXPR)||LA138_0==WHERE||(LA138_0>=SUM && LA138_0<=COUNT)||LA138_0==CASE||LA138_0==OUTER||(LA138_0>=JOIN && LA138_0<=FULL)||(LA138_0>=EVENTS && LA138_0<=LAST)||(LA138_0>=UNIDIRECTIONAL && LA138_0<=CURRENT_TIMESTAMP)||LA138_0==SNAPSHOT||(LA138_0>=VARIABLE && LA138_0<=INDEX)||(LA138_0>=BOOLEAN_TRUE && LA138_0<=VALUE_NULL)||(LA138_0>=DEFINE && LA138_0<=MATCHES)||LA138_0==WHILE||(LA138_0>=MERGE && LA138_0<=MATCHED)||LA138_0==NUM_DOUBLE||(LA138_0>=IDENT && LA138_0<=LCURLY)||LA138_0==LPAREN||(LA138_0>=PLUS && LA138_0<=QUESTION)||(LA138_0>=STRING_LITERAL && LA138_0<=QUOTED_STRING_LITERAL)||LA138_0==MINUS||LA138_0==NUM_INT||(LA138_0>=TICKED_STRING_LITERAL && LA138_0<=NUM_FLOAT)) ) {
                        alt138=1;
                    }
                    switch (alt138) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_expressionList_in_methodJoinExpression5849);
                            expressionList363=expressionList();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList363.getTree());
                            }
                            break;
                    }
                    RPAREN364=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_methodJoinExpression5852); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN364);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(METHOD_JOIN_EXPR, "METHOD_JOIN_EXPR"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());
                }
                stream_expressionList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class viewExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.viewExpression_return viewExpression() throws RecognitionException {
        EsperEPL2GrammarParser.viewExpression_return retval = new EsperEPL2GrammarParser.viewExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ns=null;
        Token i=null;
        Token m=null;
        Token COLON365=null;
        Token LPAREN366=null;
        Token RPAREN368=null;
        EsperEPL2GrammarParser.expressionWithTimeList_return expressionWithTimeList367 = null;
        CommonTree ns_tree=null;
        CommonTree i_tree=null;
        CommonTree m_tree=null;
        CommonTree COLON365_tree=null;
        CommonTree LPAREN366_tree=null;
        CommonTree RPAREN368_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_MERGE=new RewriteRuleTokenStream(adaptor,"token MERGE");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionWithTimeList=new RewriteRuleSubtreeStream(adaptor,"rule expressionWithTimeList");
         paraphrases.push("view specifications"); 
        try {
            {
            ns=(Token)match(input,IDENT,FOLLOW_IDENT_in_viewExpression5905); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(ns);
            COLON365=(Token)match(input,COLON,FOLLOW_COLON_in_viewExpression5907); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON365);
            int alt140=2;
            int LA140_0 = input.LA(1);
            if ( (LA140_0==IDENT) ) {
                alt140=1;
            }
            else if ( (LA140_0==MERGE) ) {
                alt140=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 140, 0, input);
                throw nvae;
            }
            switch (alt140) {
                case 1 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_viewExpression5912); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 2 :
                    {
                    m=(Token)match(input,MERGE,FOLLOW_MERGE_in_viewExpression5916); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MERGE.add(m);
                    }
                    break;
            }
            LPAREN366=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_viewExpression5919); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN366);
            int alt141=2;
            int LA141_0 = input.LA(1);
            if ( (LA141_0==WINDOW||LA141_0==ESCAPE||(LA141_0>=NOT_EXPR && LA141_0<=EVERY_EXPR)||LA141_0==WHERE||(LA141_0>=SUM && LA141_0<=COUNT)||LA141_0==CASE||LA141_0==OUTER||(LA141_0>=JOIN && LA141_0<=FULL)||(LA141_0>=EVENTS && LA141_0<=LAST)||(LA141_0>=UNIDIRECTIONAL && LA141_0<=CURRENT_TIMESTAMP)||LA141_0==SNAPSHOT||(LA141_0>=VARIABLE && LA141_0<=INDEX)||(LA141_0>=BOOLEAN_TRUE && LA141_0<=VALUE_NULL)||(LA141_0>=DEFINE && LA141_0<=MATCHES)||LA141_0==WHILE||(LA141_0>=MERGE && LA141_0<=MATCHED)||LA141_0==NUM_DOUBLE||(LA141_0>=IDENT && LA141_0<=LCURLY)||LA141_0==LPAREN||LA141_0==LBRACK||LA141_0==STAR||(LA141_0>=PLUS && LA141_0<=QUESTION)||(LA141_0>=STRING_LITERAL && LA141_0<=QUOTED_STRING_LITERAL)||LA141_0==MINUS||LA141_0==NUM_INT||(LA141_0>=TICKED_STRING_LITERAL && LA141_0<=NUM_FLOAT)) ) {
                alt141=1;
            }
            switch (alt141) {
                case 1 :
                    {
                    pushFollow(FOLLOW_expressionWithTimeList_in_viewExpression5921);
                    expressionWithTimeList367=expressionWithTimeList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expressionWithTimeList.add(expressionWithTimeList367.getTree());
                    }
                    break;
            }
            RPAREN368=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_viewExpression5924); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN368);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_ns=new RewriteRuleTokenStream(adaptor,"token ns",ns);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (m != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VIEW_EXPR, "VIEW_EXPR"), root_1);
                adaptor.addChild(root_1, stream_ns.nextNode());
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IDENT, "merge"), root_2);
                adaptor.addChild(root_1, root_2);
                }
                if ( stream_expressionWithTimeList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionWithTimeList.nextTree());
                }
                stream_expressionWithTimeList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VIEW_EXPR, "VIEW_EXPR"), root_1);
                adaptor.addChild(root_1, stream_ns.nextNode());
                adaptor.addChild(root_1, stream_i.nextNode());
                if ( stream_expressionWithTimeList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionWithTimeList.nextTree());
                }
                stream_expressionWithTimeList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class groupByListExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.groupByListExpr_return groupByListExpr() throws RecognitionException {
        EsperEPL2GrammarParser.groupByListExpr_return retval = new EsperEPL2GrammarParser.groupByListExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA370=null;
        EsperEPL2GrammarParser.expression_return expression369 = null;
        EsperEPL2GrammarParser.expression_return expression371 = null;
        CommonTree COMMA370_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
         paraphrases.push("group-by clause"); 
        try {
            {
            pushFollow(FOLLOW_expression_in_groupByListExpr5984);
            expression369=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression369.getTree());
            loop142:
            do {
                int alt142=2;
                int LA142_0 = input.LA(1);
                if ( (LA142_0==COMMA) ) {
                    alt142=1;
                }
                switch (alt142) {
            	case 1 :
            	    {
            	    COMMA370=(Token)match(input,COMMA,FOLLOW_COMMA_in_groupByListExpr5987); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA370);
            	    pushFollow(FOLLOW_expression_in_groupByListExpr5989);
            	    expression371=expression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_expression.add(expression371.getTree());
            	    }
            	    break;
            	default :
            	    break loop142;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GROUP_BY_EXPR, "GROUP_BY_EXPR"), root_1);
                if ( !(stream_expression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class orderByListExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.orderByListExpr_return orderByListExpr() throws RecognitionException {
        EsperEPL2GrammarParser.orderByListExpr_return retval = new EsperEPL2GrammarParser.orderByListExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA373=null;
        EsperEPL2GrammarParser.orderByListElement_return orderByListElement372 = null;
        EsperEPL2GrammarParser.orderByListElement_return orderByListElement374 = null;
        CommonTree COMMA373_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_orderByListElement=new RewriteRuleSubtreeStream(adaptor,"rule orderByListElement");
         paraphrases.push("order by clause"); 
        try {
            {
            pushFollow(FOLLOW_orderByListElement_in_orderByListExpr6024);
            orderByListElement372=orderByListElement();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_orderByListElement.add(orderByListElement372.getTree());
            loop143:
            do {
                int alt143=2;
                int LA143_0 = input.LA(1);
                if ( (LA143_0==COMMA) ) {
                    alt143=1;
                }
                switch (alt143) {
            	case 1 :
            	    {
            	    COMMA373=(Token)match(input,COMMA,FOLLOW_COMMA_in_orderByListExpr6027); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA373);
            	    pushFollow(FOLLOW_orderByListElement_in_orderByListExpr6029);
            	    orderByListElement374=orderByListElement();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_orderByListElement.add(orderByListElement374.getTree());
            	    }
            	    break;
            	default :
            	    break loop143;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ORDER_BY_EXPR, "ORDER_BY_EXPR"), root_1);
                if ( !(stream_orderByListElement.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_orderByListElement.hasNext() ) {
                    adaptor.addChild(root_1, stream_orderByListElement.nextTree());
                }
                stream_orderByListElement.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class orderByListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.orderByListElement_return orderByListElement() throws RecognitionException {
        EsperEPL2GrammarParser.orderByListElement_return retval = new EsperEPL2GrammarParser.orderByListElement_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token d=null;
        EsperEPL2GrammarParser.expression_return expression375 = null;
        CommonTree d_tree=null;
        RewriteRuleTokenStream stream_ASC=new RewriteRuleTokenStream(adaptor,"token ASC");
        RewriteRuleTokenStream stream_DESC=new RewriteRuleTokenStream(adaptor,"token DESC");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            {
            pushFollow(FOLLOW_expression_in_orderByListElement6054);
            expression375=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression375.getTree());
            int alt144=3;
            int LA144_0 = input.LA(1);
            if ( (LA144_0==ASC) ) {
                alt144=1;
            }
            else if ( (LA144_0==DESC) ) {
                alt144=2;
            }
            switch (alt144) {
                case 1 :
                    {
                    d=(Token)match(input,ASC,FOLLOW_ASC_in_orderByListElement6059); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASC.add(d);
                    }
                    break;
                case 2 :
                    {
                    d=(Token)match(input,DESC,FOLLOW_DESC_in_orderByListElement6063); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DESC.add(d);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_d=new RewriteRuleTokenStream(adaptor,"token d",d);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ORDER_ELEMENT_EXPR, "ORDER_ELEMENT_EXPR"), root_1);
                adaptor.addChild(root_1, stream_expression.nextTree());
                if ( stream_d.hasNext() ) {
                    adaptor.addChild(root_1, stream_d.nextNode());
                }
                stream_d.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class havingClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.havingClause_return havingClause() throws RecognitionException {
        EsperEPL2GrammarParser.havingClause_return retval = new EsperEPL2GrammarParser.havingClause_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.evalOrExpression_return evalOrExpression376 = null;
        RewriteRuleSubtreeStream stream_evalOrExpression=new RewriteRuleSubtreeStream(adaptor,"rule evalOrExpression");
         paraphrases.push("having clause"); 
        try {
            {
            pushFollow(FOLLOW_evalOrExpression_in_havingClause6101);
            evalOrExpression376=evalOrExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_evalOrExpression.add(evalOrExpression376.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(HAVING_EXPR, "HAVING_EXPR"), root_1);
                adaptor.addChild(root_1, stream_evalOrExpression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class outputLimit_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.outputLimit_return outputLimit() throws RecognitionException {
        EsperEPL2GrammarParser.outputLimit_return retval = new EsperEPL2GrammarParser.outputLimit_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token k=null;
        Token ev=null;
        Token i=null;
        Token e=null;
        Token at=null;
        Token wh=null;
        Token THEN382=null;
        EsperEPL2GrammarParser.outputLimitAfter_return outputLimitAfter377 = null;
        EsperEPL2GrammarParser.timePeriod_return timePeriod378 = null;
        EsperEPL2GrammarParser.number_return number379 = null;
        EsperEPL2GrammarParser.crontabLimitParameterSet_return crontabLimitParameterSet380 = null;
        EsperEPL2GrammarParser.expression_return expression381 = null;
        EsperEPL2GrammarParser.onSetExpr_return onSetExpr383 = null;
        CommonTree k_tree=null;
        CommonTree ev_tree=null;
        CommonTree i_tree=null;
        CommonTree e_tree=null;
        CommonTree at_tree=null;
        CommonTree wh_tree=null;
        CommonTree THEN382_tree=null;
        RewriteRuleTokenStream stream_AT=new RewriteRuleTokenStream(adaptor,"token AT");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_THEN=new RewriteRuleTokenStream(adaptor,"token THEN");
        RewriteRuleTokenStream stream_LAST=new RewriteRuleTokenStream(adaptor,"token LAST");
        RewriteRuleTokenStream stream_SNAPSHOT=new RewriteRuleTokenStream(adaptor,"token SNAPSHOT");
        RewriteRuleTokenStream stream_EVENTS=new RewriteRuleTokenStream(adaptor,"token EVENTS");
        RewriteRuleTokenStream stream_WHEN=new RewriteRuleTokenStream(adaptor,"token WHEN");
        RewriteRuleTokenStream stream_EVERY_EXPR=new RewriteRuleTokenStream(adaptor,"token EVERY_EXPR");
        RewriteRuleTokenStream stream_ALL=new RewriteRuleTokenStream(adaptor,"token ALL");
        RewriteRuleTokenStream stream_FIRST=new RewriteRuleTokenStream(adaptor,"token FIRST");
        RewriteRuleSubtreeStream stream_crontabLimitParameterSet=new RewriteRuleSubtreeStream(adaptor,"rule crontabLimitParameterSet");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_outputLimitAfter=new RewriteRuleSubtreeStream(adaptor,"rule outputLimitAfter");
        RewriteRuleSubtreeStream stream_timePeriod=new RewriteRuleSubtreeStream(adaptor,"rule timePeriod");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_onSetExpr=new RewriteRuleSubtreeStream(adaptor,"rule onSetExpr");
         paraphrases.push("output rate clause"); 
        try {
            {
            int alt145=2;
            int LA145_0 = input.LA(1);
            if ( (LA145_0==AFTER) ) {
                alt145=1;
            }
            switch (alt145) {
                case 1 :
                    {
                    pushFollow(FOLLOW_outputLimitAfter_in_outputLimit6139);
                    outputLimitAfter377=outputLimitAfter();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_outputLimitAfter.add(outputLimitAfter377.getTree());
                    }
                    break;
            }
            int alt146=5;
            switch ( input.LA(1) ) {
                case ALL:
                    {
                    alt146=1;
                    }
                    break;
                case FIRST:
                    {
                    alt146=2;
                    }
                    break;
                case LAST:
                    {
                    alt146=3;
                    }
                    break;
                case SNAPSHOT:
                    {
                    alt146=4;
                    }
                    break;
            }
            switch (alt146) {
                case 1 :
                    {
                    k=(Token)match(input,ALL,FOLLOW_ALL_in_outputLimit6154); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ALL.add(k);
                    }
                    break;
                case 2 :
                    {
                    k=(Token)match(input,FIRST,FOLLOW_FIRST_in_outputLimit6158); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FIRST.add(k);
                    }
                    break;
                case 3 :
                    {
                    k=(Token)match(input,LAST,FOLLOW_LAST_in_outputLimit6162); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LAST.add(k);
                    }
                    break;
                case 4 :
                    {
                    k=(Token)match(input,SNAPSHOT,FOLLOW_SNAPSHOT_in_outputLimit6166); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SNAPSHOT.add(k);
                    }
                    break;
            }
            int alt150=4;
            switch ( input.LA(1) ) {
            case EVERY_EXPR:
                {
                alt150=1;
                }
                break;
            case AT:
                {
                alt150=2;
                }
                break;
            case WHEN:
                {
                alt150=3;
                }
                break;
            case EOF:
            case ORDER:
            case ROW_LIMIT_EXPR:
            case FOR:
                {
                alt150=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 150, 0, input);
                throw nvae;
            }
            switch (alt150) {
                case 1 :
                    {
                    {
                    ev=(Token)match(input,EVERY_EXPR,FOLLOW_EVERY_EXPR_in_outputLimit6197); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EVERY_EXPR.add(ev);
                    int alt148=2;
                    int LA148_0 = input.LA(1);
                    if ( (LA148_0==NUM_INT) ) {
                        int LA148_1 = input.LA(2);
                        if ( (LA148_1==EVENTS) ) {
                            alt148=2;
                        }
                        else if ( (LA148_1==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt148=1;
                        }
                        else if ( (LA148_1==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt148=1;
                        }
                        else if ( (LA148_1==TIMEPERIOD_MONTHS) && (synpred2_EsperEPL2Grammar())) {
                            alt148=1;
                        }
                        else if ( (LA148_1==TIMEPERIOD_MONTH) && (synpred2_EsperEPL2Grammar())) {
                            alt148=1;
                        }
                        else if ( (LA148_1==TIMEPERIOD_WEEKS) && (synpred2_EsperEPL2Grammar())) {
                            alt148=1;
                        }
                        else if ( (LA148_1==TIMEPERIOD_WEEK) && (synpred2_EsperEPL2Grammar())) {
                            alt148=1;
                        }
                        else if ( (LA148_1==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt148=1;
                        }
                        else if ( (LA148_1==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt148=1;
                        }
                        else if ( (LA148_1==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt148=1;
                        }
                        else if ( (LA148_1==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt148=1;
                        }
                        else if ( (LA148_1==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt148=1;
                        }
                        else if ( (LA148_1==TIMEPERIOD_YEARS) && (synpred2_EsperEPL2Grammar())) {
                            alt148=1;
                        }
                        else if ( (LA148_1==TIMEPERIOD_YEAR) && (synpred2_EsperEPL2Grammar())) {
                            alt148=1;
                        }
                        else if ( (LA148_1==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt148=1;
                        }
                        else if ( (LA148_1==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt148=1;
                        }
                        else if ( (LA148_1==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt148=1;
                        }
                        else if ( (LA148_1==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt148=1;
                        }
                        else if ( (LA148_1==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt148=1;
                        }
                        else if ( (LA148_1==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt148=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 148, 1, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA148_0==NUM_LONG) ) {
                        int LA148_2 = input.LA(2);
                        if ( (LA148_2==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt148=1;
                        }
                        else if ( (LA148_2==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt148=1;
                        }
                        else if ( (LA148_2==TIMEPERIOD_MONTHS) && (synpred2_EsperEPL2Grammar())) {
                            alt148=1;
                        }
                        else if ( (LA148_2==TIMEPERIOD_MONTH) && (synpred2_EsperEPL2Grammar())) {
                            alt148=1;
                        }
                        else if ( (LA148_2==TIMEPERIOD_WEEKS) && (synpred2_EsperEPL2Grammar())) {
                            alt148=1;
                        }
                        else if ( (LA148_2==TIMEPERIOD_WEEK) && (synpred2_EsperEPL2Grammar())) {
                            alt148=1;
                        }
                        else if ( (LA148_2==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt148=1;
                        }
                        else if ( (LA148_2==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt148=1;
                        }
                        else if ( (LA148_2==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt148=1;
                        }
                        else if ( (LA148_2==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt148=1;
                        }
                        else if ( (LA148_2==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt148=1;
                        }
                        else if ( (LA148_2==TIMEPERIOD_YEARS) && (synpred2_EsperEPL2Grammar())) {
                            alt148=1;
                        }
                        else if ( (LA148_2==TIMEPERIOD_YEAR) && (synpred2_EsperEPL2Grammar())) {
                            alt148=1;
                        }
                        else if ( (LA148_2==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt148=1;
                        }
                        else if ( (LA148_2==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt148=1;
                        }
                        else if ( (LA148_2==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt148=1;
                        }
                        else if ( (LA148_2==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt148=1;
                        }
                        else if ( (LA148_2==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt148=1;
                        }
                        else if ( (LA148_2==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt148=1;
                        }
                        else if ( (LA148_2==EVENTS) ) {
                            alt148=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 148, 2, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA148_0==NUM_FLOAT) ) {
                        int LA148_3 = input.LA(2);
                        if ( (LA148_3==TIMEPERIOD_YEARS) && (synpred2_EsperEPL2Grammar())) {
                            alt148=1;
                        }
                        else if ( (LA148_3==TIMEPERIOD_YEAR) && (synpred2_EsperEPL2Grammar())) {
                            alt148=1;
                        }
                        else if ( (LA148_3==TIMEPERIOD_WEEKS) && (synpred2_EsperEPL2Grammar())) {
                            alt148=1;
                        }
                        else if ( (LA148_3==TIMEPERIOD_WEEK) && (synpred2_EsperEPL2Grammar())) {
                            alt148=1;
                        }
                        else if ( (LA148_3==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt148=1;
                        }
                        else if ( (LA148_3==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt148=1;
                        }
                        else if ( (LA148_3==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt148=1;
                        }
                        else if ( (LA148_3==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt148=1;
                        }
                        else if ( (LA148_3==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt148=1;
                        }
                        else if ( (LA148_3==TIMEPERIOD_MONTHS) && (synpred2_EsperEPL2Grammar())) {
                            alt148=1;
                        }
                        else if ( (LA148_3==TIMEPERIOD_MONTH) && (synpred2_EsperEPL2Grammar())) {
                            alt148=1;
                        }
                        else if ( (LA148_3==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt148=1;
                        }
                        else if ( (LA148_3==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt148=1;
                        }
                        else if ( (LA148_3==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt148=1;
                        }
                        else if ( (LA148_3==EVENTS) ) {
                            alt148=2;
                        }
                        else if ( (LA148_3==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt148=1;
                        }
                        else if ( (LA148_3==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt148=1;
                        }
                        else if ( (LA148_3==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt148=1;
                        }
                        else if ( (LA148_3==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt148=1;
                        }
                        else if ( (LA148_3==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt148=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 148, 3, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA148_0==NUM_DOUBLE) ) {
                        int LA148_4 = input.LA(2);
                        if ( (LA148_4==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt148=1;
                        }
                        else if ( (LA148_4==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt148=1;
                        }
                        else if ( (LA148_4==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt148=1;
                        }
                        else if ( (LA148_4==TIMEPERIOD_WEEKS) && (synpred2_EsperEPL2Grammar())) {
                            alt148=1;
                        }
                        else if ( (LA148_4==TIMEPERIOD_WEEK) && (synpred2_EsperEPL2Grammar())) {
                            alt148=1;
                        }
                        else if ( (LA148_4==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt148=1;
                        }
                        else if ( (LA148_4==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt148=1;
                        }
                        else if ( (LA148_4==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt148=1;
                        }
                        else if ( (LA148_4==TIMEPERIOD_YEARS) && (synpred2_EsperEPL2Grammar())) {
                            alt148=1;
                        }
                        else if ( (LA148_4==TIMEPERIOD_YEAR) && (synpred2_EsperEPL2Grammar())) {
                            alt148=1;
                        }
                        else if ( (LA148_4==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt148=1;
                        }
                        else if ( (LA148_4==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt148=1;
                        }
                        else if ( (LA148_4==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt148=1;
                        }
                        else if ( (LA148_4==EVENTS) ) {
                            alt148=2;
                        }
                        else if ( (LA148_4==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt148=1;
                        }
                        else if ( (LA148_4==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt148=1;
                        }
                        else if ( (LA148_4==TIMEPERIOD_MONTHS) && (synpred2_EsperEPL2Grammar())) {
                            alt148=1;
                        }
                        else if ( (LA148_4==TIMEPERIOD_MONTH) && (synpred2_EsperEPL2Grammar())) {
                            alt148=1;
                        }
                        else if ( (LA148_4==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt148=1;
                        }
                        else if ( (LA148_4==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt148=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 148, 4, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA148_0==IDENT) ) {
                        int LA148_5 = input.LA(2);
                        if ( (LA148_5==TIMEPERIOD_WEEKS) && (synpred2_EsperEPL2Grammar())) {
                            alt148=1;
                        }
                        else if ( (LA148_5==TIMEPERIOD_WEEK) && (synpred2_EsperEPL2Grammar())) {
                            alt148=1;
                        }
                        else if ( (LA148_5==TIMEPERIOD_MONTHS) && (synpred2_EsperEPL2Grammar())) {
                            alt148=1;
                        }
                        else if ( (LA148_5==TIMEPERIOD_MONTH) && (synpred2_EsperEPL2Grammar())) {
                            alt148=1;
                        }
                        else if ( (LA148_5==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt148=1;
                        }
                        else if ( (LA148_5==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt148=1;
                        }
                        else if ( (LA148_5==EVENTS) ) {
                            alt148=2;
                        }
                        else if ( (LA148_5==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt148=1;
                        }
                        else if ( (LA148_5==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt148=1;
                        }
                        else if ( (LA148_5==TIMEPERIOD_YEARS) && (synpred2_EsperEPL2Grammar())) {
                            alt148=1;
                        }
                        else if ( (LA148_5==TIMEPERIOD_YEAR) && (synpred2_EsperEPL2Grammar())) {
                            alt148=1;
                        }
                        else if ( (LA148_5==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt148=1;
                        }
                        else if ( (LA148_5==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt148=1;
                        }
                        else if ( (LA148_5==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt148=1;
                        }
                        else if ( (LA148_5==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt148=1;
                        }
                        else if ( (LA148_5==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt148=1;
                        }
                        else if ( (LA148_5==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt148=1;
                        }
                        else if ( (LA148_5==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt148=1;
                        }
                        else if ( (LA148_5==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt148=1;
                        }
                        else if ( (LA148_5==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt148=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 148, 5, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA148_0==QUESTION) && (synpred2_EsperEPL2Grammar())) {
                        alt148=1;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 148, 0, input);
                        throw nvae;
                    }
                    switch (alt148) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_timePeriod_in_outputLimit6223);
                            timePeriod378=timePeriod();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_timePeriod.add(timePeriod378.getTree());
                            }
                            break;
                        case 2 :
                            {
                            int alt147=2;
                            int LA147_0 = input.LA(1);
                            if ( (LA147_0==NUM_DOUBLE||LA147_0==NUM_INT||(LA147_0>=NUM_LONG && LA147_0<=NUM_FLOAT)) ) {
                                alt147=1;
                            }
                            else if ( (LA147_0==IDENT) ) {
                                alt147=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 147, 0, input);
                                throw nvae;
                            }
                            switch (alt147) {
                                case 1 :
                                    {
                                    pushFollow(FOLLOW_number_in_outputLimit6234);
                                    number379=number();
                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_number.add(number379.getTree());
                                    }
                                    break;
                                case 2 :
                                    {
                                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_outputLimit6240); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                                    }
                                    break;
                            }
                            {
                            e=(Token)match(input,EVENTS,FOLLOW_EVENTS_in_outputLimit6246); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_EVENTS.add(e);
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    at=(Token)match(input,AT,FOLLOW_AT_in_outputLimit6277); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AT.add(at);
                    pushFollow(FOLLOW_crontabLimitParameterSet_in_outputLimit6279);
                    crontabLimitParameterSet380=crontabLimitParameterSet();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_crontabLimitParameterSet.add(crontabLimitParameterSet380.getTree());
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    wh=(Token)match(input,WHEN,FOLLOW_WHEN_in_outputLimit6296); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHEN.add(wh);
                    pushFollow(FOLLOW_expression_in_outputLimit6298);
                    expression381=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression381.getTree());
                    int alt149=2;
                    int LA149_0 = input.LA(1);
                    if ( (LA149_0==THEN) ) {
                        alt149=1;
                    }
                    switch (alt149) {
                        case 1 :
                            {
                            THEN382=(Token)match(input,THEN,FOLLOW_THEN_in_outputLimit6301); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_THEN.add(THEN382);
                            pushFollow(FOLLOW_onSetExpr_in_outputLimit6303);
                            onSetExpr383=onSetExpr();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_onSetExpr.add(onSetExpr383.getTree());
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 4 :
                    {
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_k=new RewriteRuleTokenStream(adaptor,"token k",k);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (ev != null && e != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_LIMIT_EXPR, "EVENT_LIMIT_EXPR"), root_1);
                if ( stream_k.hasNext() ) {
                    adaptor.addChild(root_1, stream_k.nextNode());
                }
                stream_k.reset();
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                if ( stream_outputLimitAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputLimitAfter.nextTree());
                }
                stream_outputLimitAfter.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (ev != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TIMEPERIOD_LIMIT_EXPR, "TIMEPERIOD_LIMIT_EXPR"), root_1);
                if ( stream_k.hasNext() ) {
                    adaptor.addChild(root_1, stream_k.nextNode());
                }
                stream_k.reset();
                adaptor.addChild(root_1, stream_timePeriod.nextTree());
                if ( stream_outputLimitAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputLimitAfter.nextTree());
                }
                stream_outputLimitAfter.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (at != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CRONTAB_LIMIT_EXPR, "CRONTAB_LIMIT_EXPR"), root_1);
                if ( stream_k.hasNext() ) {
                    adaptor.addChild(root_1, stream_k.nextNode());
                }
                stream_k.reset();
                adaptor.addChild(root_1, stream_crontabLimitParameterSet.nextTree());
                if ( stream_outputLimitAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputLimitAfter.nextTree());
                }
                stream_outputLimitAfter.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (wh != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WHEN_LIMIT_EXPR, "WHEN_LIMIT_EXPR"), root_1);
                if ( stream_k.hasNext() ) {
                    adaptor.addChild(root_1, stream_k.nextNode());
                }
                stream_k.reset();
                adaptor.addChild(root_1, stream_expression.nextTree());
                if ( stream_onSetExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetExpr.nextTree());
                }
                stream_onSetExpr.reset();
                if ( stream_outputLimitAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputLimitAfter.nextTree());
                }
                stream_outputLimitAfter.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(AFTER_LIMIT_EXPR, "AFTER_LIMIT_EXPR"), root_1);
                adaptor.addChild(root_1, stream_outputLimitAfter.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class outputLimitAfter_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.outputLimitAfter_return outputLimitAfter() throws RecognitionException {
        EsperEPL2GrammarParser.outputLimitAfter_return retval = new EsperEPL2GrammarParser.outputLimitAfter_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token a=null;
        Token EVENTS386=null;
        EsperEPL2GrammarParser.timePeriod_return timePeriod384 = null;
        EsperEPL2GrammarParser.number_return number385 = null;
        CommonTree a_tree=null;
        CommonTree EVENTS386_tree=null;
        RewriteRuleTokenStream stream_AFTER=new RewriteRuleTokenStream(adaptor,"token AFTER");
        RewriteRuleTokenStream stream_EVENTS=new RewriteRuleTokenStream(adaptor,"token EVENTS");
        RewriteRuleSubtreeStream stream_timePeriod=new RewriteRuleSubtreeStream(adaptor,"rule timePeriod");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        try {
            {
            a=(Token)match(input,AFTER,FOLLOW_AFTER_in_outputLimitAfter6453); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_AFTER.add(a);
            int alt151=2;
            switch ( input.LA(1) ) {
            case NUM_INT:
                {
                int LA151_1 = input.LA(2);
                if ( (LA151_1==EVENTS) ) {
                    alt151=2;
                }
                else if ( (LA151_1==MIN||(LA151_1>=TIMEPERIOD_YEAR && LA151_1<=TIMEPERIOD_MILLISECONDS)) ) {
                    alt151=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 151, 1, input);
                    throw nvae;
                }
                }
                break;
            case NUM_LONG:
                {
                int LA151_2 = input.LA(2);
                if ( (LA151_2==MIN||(LA151_2>=TIMEPERIOD_YEAR && LA151_2<=TIMEPERIOD_MILLISECONDS)) ) {
                    alt151=1;
                }
                else if ( (LA151_2==EVENTS) ) {
                    alt151=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 151, 2, input);
                    throw nvae;
                }
                }
                break;
            case NUM_FLOAT:
                {
                int LA151_3 = input.LA(2);
                if ( (LA151_3==MIN||(LA151_3>=TIMEPERIOD_YEAR && LA151_3<=TIMEPERIOD_MILLISECONDS)) ) {
                    alt151=1;
                }
                else if ( (LA151_3==EVENTS) ) {
                    alt151=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 151, 3, input);
                    throw nvae;
                }
                }
                break;
            case NUM_DOUBLE:
                {
                int LA151_4 = input.LA(2);
                if ( (LA151_4==MIN||(LA151_4>=TIMEPERIOD_YEAR && LA151_4<=TIMEPERIOD_MILLISECONDS)) ) {
                    alt151=1;
                }
                else if ( (LA151_4==EVENTS) ) {
                    alt151=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 151, 4, input);
                    throw nvae;
                }
                }
                break;
            case IDENT:
            case QUESTION:
                {
                alt151=1;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 151, 0, input);
                throw nvae;
            }
            switch (alt151) {
                case 1 :
                    {
                    pushFollow(FOLLOW_timePeriod_in_outputLimitAfter6456);
                    timePeriod384=timePeriod();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_timePeriod.add(timePeriod384.getTree());
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_number_in_outputLimitAfter6460);
                    number385=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number385.getTree());
                    EVENTS386=(Token)match(input,EVENTS,FOLLOW_EVENTS_in_outputLimitAfter6462); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EVENTS.add(EVENTS386);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_AFTER.nextNode(), root_1);
                if ( stream_timePeriod.hasNext() ) {
                    adaptor.addChild(root_1, stream_timePeriod.nextTree());
                }
                stream_timePeriod.reset();
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class rowLimit_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.rowLimit_return rowLimit() throws RecognitionException {
        EsperEPL2GrammarParser.rowLimit_return retval = new EsperEPL2GrammarParser.rowLimit_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i1=null;
        Token c=null;
        Token o=null;
        Token i2=null;
        EsperEPL2GrammarParser.numberconstant_return n1 = null;
        EsperEPL2GrammarParser.numberconstant_return n2 = null;
        CommonTree i1_tree=null;
        CommonTree c_tree=null;
        CommonTree o_tree=null;
        CommonTree i2_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_OFFSET=new RewriteRuleTokenStream(adaptor,"token OFFSET");
        RewriteRuleSubtreeStream stream_numberconstant=new RewriteRuleSubtreeStream(adaptor,"rule numberconstant");
         paraphrases.push("row limit clause"); 
        try {
            {
            int alt152=2;
            int LA152_0 = input.LA(1);
            if ( (LA152_0==NUM_DOUBLE||LA152_0==PLUS||LA152_0==MINUS||LA152_0==NUM_INT||(LA152_0>=NUM_LONG && LA152_0<=NUM_FLOAT)) ) {
                alt152=1;
            }
            else if ( (LA152_0==IDENT) ) {
                alt152=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 152, 0, input);
                throw nvae;
            }
            switch (alt152) {
                case 1 :
                    {
                    pushFollow(FOLLOW_numberconstant_in_rowLimit6508);
                    n1=numberconstant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_numberconstant.add(n1.getTree());
                    }
                    break;
                case 2 :
                    {
                    i1=(Token)match(input,IDENT,FOLLOW_IDENT_in_rowLimit6514); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i1);
                    }
                    break;
            }
            int alt155=2;
            int LA155_0 = input.LA(1);
            if ( (LA155_0==OFFSET||LA155_0==COMMA) ) {
                alt155=1;
            }
            switch (alt155) {
                case 1 :
                    {
                    int alt153=2;
                    int LA153_0 = input.LA(1);
                    if ( (LA153_0==COMMA) ) {
                        alt153=1;
                    }
                    else if ( (LA153_0==OFFSET) ) {
                        alt153=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 153, 0, input);
                        throw nvae;
                    }
                    switch (alt153) {
                        case 1 :
                            {
                            c=(Token)match(input,COMMA,FOLLOW_COMMA_in_rowLimit6521); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COMMA.add(c);
                            }
                            break;
                        case 2 :
                            {
                            o=(Token)match(input,OFFSET,FOLLOW_OFFSET_in_rowLimit6527); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_OFFSET.add(o);
                            }
                            break;
                    }
                    int alt154=2;
                    int LA154_0 = input.LA(1);
                    if ( (LA154_0==NUM_DOUBLE||LA154_0==PLUS||LA154_0==MINUS||LA154_0==NUM_INT||(LA154_0>=NUM_LONG && LA154_0<=NUM_FLOAT)) ) {
                        alt154=1;
                    }
                    else if ( (LA154_0==IDENT) ) {
                        alt154=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 154, 0, input);
                        throw nvae;
                    }
                    switch (alt154) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_numberconstant_in_rowLimit6533);
                            n2=numberconstant();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_numberconstant.add(n2.getTree());
                            }
                            break;
                        case 2 :
                            {
                            i2=(Token)match(input,IDENT,FOLLOW_IDENT_in_rowLimit6539); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IDENT.add(i2);
                            }
                            break;
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_c=new RewriteRuleTokenStream(adaptor,"token c",c);
            RewriteRuleTokenStream stream_o=new RewriteRuleTokenStream(adaptor,"token o",o);
            RewriteRuleTokenStream stream_i2=new RewriteRuleTokenStream(adaptor,"token i2",i2);
            RewriteRuleTokenStream stream_i1=new RewriteRuleTokenStream(adaptor,"token i1",i1);
            RewriteRuleSubtreeStream stream_n1=new RewriteRuleSubtreeStream(adaptor,"rule n1",n1!=null?n1.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_n2=new RewriteRuleSubtreeStream(adaptor,"rule n2",n2!=null?n2.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ROW_LIMIT_EXPR, "ROW_LIMIT_EXPR"), root_1);
                if ( stream_n1.hasNext() ) {
                    adaptor.addChild(root_1, stream_n1.nextTree());
                }
                stream_n1.reset();
                if ( stream_i1.hasNext() ) {
                    adaptor.addChild(root_1, stream_i1.nextNode());
                }
                stream_i1.reset();
                if ( stream_n2.hasNext() ) {
                    adaptor.addChild(root_1, stream_n2.nextTree());
                }
                stream_n2.reset();
                if ( stream_i2.hasNext() ) {
                    adaptor.addChild(root_1, stream_i2.nextNode());
                }
                stream_i2.reset();
                if ( stream_o.hasNext() ) {
                    adaptor.addChild(root_1, stream_o.nextNode());
                }
                stream_o.reset();
                if ( stream_c.hasNext() ) {
                    adaptor.addChild(root_1, stream_c.nextNode());
                }
                stream_c.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class crontabLimitParameterSet_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.crontabLimitParameterSet_return crontabLimitParameterSet() throws RecognitionException {
        EsperEPL2GrammarParser.crontabLimitParameterSet_return retval = new EsperEPL2GrammarParser.crontabLimitParameterSet_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LPAREN387=null;
        Token COMMA389=null;
        Token COMMA391=null;
        Token COMMA393=null;
        Token COMMA395=null;
        Token COMMA397=null;
        Token RPAREN399=null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime388 = null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime390 = null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime392 = null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime394 = null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime396 = null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime398 = null;
        CommonTree LPAREN387_tree=null;
        CommonTree COMMA389_tree=null;
        CommonTree COMMA391_tree=null;
        CommonTree COMMA393_tree=null;
        CommonTree COMMA395_tree=null;
        CommonTree COMMA397_tree=null;
        CommonTree RPAREN399_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionWithTime=new RewriteRuleSubtreeStream(adaptor,"rule expressionWithTime");
        try {
            {
            LPAREN387=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_crontabLimitParameterSet6591); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN387);
            pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet6593);
            expressionWithTime388=expressionWithTime();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime388.getTree());
            COMMA389=(Token)match(input,COMMA,FOLLOW_COMMA_in_crontabLimitParameterSet6595); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COMMA.add(COMMA389);
            pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet6597);
            expressionWithTime390=expressionWithTime();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime390.getTree());
            COMMA391=(Token)match(input,COMMA,FOLLOW_COMMA_in_crontabLimitParameterSet6599); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COMMA.add(COMMA391);
            pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet6601);
            expressionWithTime392=expressionWithTime();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime392.getTree());
            COMMA393=(Token)match(input,COMMA,FOLLOW_COMMA_in_crontabLimitParameterSet6603); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COMMA.add(COMMA393);
            pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet6605);
            expressionWithTime394=expressionWithTime();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime394.getTree());
            COMMA395=(Token)match(input,COMMA,FOLLOW_COMMA_in_crontabLimitParameterSet6607); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COMMA.add(COMMA395);
            pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet6609);
            expressionWithTime396=expressionWithTime();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime396.getTree());
            int alt156=2;
            int LA156_0 = input.LA(1);
            if ( (LA156_0==COMMA) ) {
                alt156=1;
            }
            switch (alt156) {
                case 1 :
                    {
                    COMMA397=(Token)match(input,COMMA,FOLLOW_COMMA_in_crontabLimitParameterSet6612); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA397);
                    pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet6614);
                    expressionWithTime398=expressionWithTime();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime398.getTree());
                    }
                    break;
            }
            RPAREN399=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_crontabLimitParameterSet6618); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN399);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CRONTAB_LIMIT_EXPR_PARAM, "CRONTAB_LIMIT_EXPR_PARAM"), root_1);
                while ( stream_expressionWithTime.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionWithTime.nextTree());
                }
                stream_expressionWithTime.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class whenClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.whenClause_return whenClause() throws RecognitionException {
        EsperEPL2GrammarParser.whenClause_return retval = new EsperEPL2GrammarParser.whenClause_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token WHEN400=null;
        Token THEN402=null;
        EsperEPL2GrammarParser.expression_return expression401 = null;
        EsperEPL2GrammarParser.expression_return expression403 = null;
        CommonTree WHEN400_tree=null;
        CommonTree THEN402_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            {
            WHEN400=(Token)match(input,WHEN,FOLLOW_WHEN_in_whenClause6648); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_whenClause6651);
            expression401=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression401.getTree());
            THEN402=(Token)match(input,THEN,FOLLOW_THEN_in_whenClause6653); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_whenClause6656);
            expression403=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression403.getTree());
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elseClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elseClause_return elseClause() throws RecognitionException {
        EsperEPL2GrammarParser.elseClause_return retval = new EsperEPL2GrammarParser.elseClause_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ELSE404=null;
        EsperEPL2GrammarParser.expression_return expression405 = null;
        CommonTree ELSE404_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            {
            ELSE404=(Token)match(input,ELSE,FOLLOW_ELSE_in_elseClause6669); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_elseClause6672);
            expression405=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression405.getTree());
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class expression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.expression_return expression() throws RecognitionException {
        EsperEPL2GrammarParser.expression_return retval = new EsperEPL2GrammarParser.expression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.caseExpression_return caseExpression406 = null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_caseExpression_in_expression6685);
            caseExpression406=caseExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, caseExpression406.getTree());
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class caseExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.caseExpression_return caseExpression() throws RecognitionException {
        EsperEPL2GrammarParser.caseExpression_return retval = new EsperEPL2GrammarParser.caseExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token CASE407=null;
        Token END410=null;
        Token CASE411=null;
        Token END415=null;
        EsperEPL2GrammarParser.whenClause_return whenClause408 = null;
        EsperEPL2GrammarParser.elseClause_return elseClause409 = null;
        EsperEPL2GrammarParser.expression_return expression412 = null;
        EsperEPL2GrammarParser.whenClause_return whenClause413 = null;
        EsperEPL2GrammarParser.elseClause_return elseClause414 = null;
        EsperEPL2GrammarParser.evalOrExpression_return evalOrExpression416 = null;
        CommonTree CASE407_tree=null;
        CommonTree END410_tree=null;
        CommonTree CASE411_tree=null;
        CommonTree END415_tree=null;
        RewriteRuleTokenStream stream_END=new RewriteRuleTokenStream(adaptor,"token END");
        RewriteRuleTokenStream stream_CASE=new RewriteRuleTokenStream(adaptor,"token CASE");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_whenClause=new RewriteRuleSubtreeStream(adaptor,"rule whenClause");
        RewriteRuleSubtreeStream stream_elseClause=new RewriteRuleSubtreeStream(adaptor,"rule elseClause");
        try {
            int alt161=3;
            int LA161_0 = input.LA(1);
            if ( (LA161_0==CASE) ) {
                int LA161_1 = input.LA(2);
                if ( (LA161_1==WHEN) ) {
                    alt161=1;
                }
                else if ( (LA161_1==WINDOW||LA161_1==ESCAPE||(LA161_1>=NOT_EXPR && LA161_1<=EVERY_EXPR)||LA161_1==WHERE||(LA161_1>=SUM && LA161_1<=COUNT)||LA161_1==CASE||LA161_1==OUTER||(LA161_1>=JOIN && LA161_1<=FULL)||(LA161_1>=EVENTS && LA161_1<=LAST)||(LA161_1>=UNIDIRECTIONAL && LA161_1<=CURRENT_TIMESTAMP)||LA161_1==SNAPSHOT||(LA161_1>=VARIABLE && LA161_1<=INDEX)||(LA161_1>=BOOLEAN_TRUE && LA161_1<=VALUE_NULL)||(LA161_1>=DEFINE && LA161_1<=MATCHES)||LA161_1==WHILE||(LA161_1>=MERGE && LA161_1<=MATCHED)||LA161_1==NUM_DOUBLE||(LA161_1>=IDENT && LA161_1<=LCURLY)||LA161_1==LPAREN||(LA161_1>=PLUS && LA161_1<=QUESTION)||(LA161_1>=STRING_LITERAL && LA161_1<=QUOTED_STRING_LITERAL)||LA161_1==MINUS||LA161_1==NUM_INT||(LA161_1>=TICKED_STRING_LITERAL && LA161_1<=NUM_FLOAT)) ) {
                    alt161=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 161, 1, input);
                    throw nvae;
                }
            }
            else if ( (LA161_0==WINDOW||LA161_0==ESCAPE||(LA161_0>=NOT_EXPR && LA161_0<=EVERY_EXPR)||LA161_0==WHERE||(LA161_0>=SUM && LA161_0<=COUNT)||LA161_0==OUTER||(LA161_0>=JOIN && LA161_0<=FULL)||(LA161_0>=EVENTS && LA161_0<=LAST)||(LA161_0>=UNIDIRECTIONAL && LA161_0<=CURRENT_TIMESTAMP)||LA161_0==SNAPSHOT||(LA161_0>=VARIABLE && LA161_0<=INDEX)||(LA161_0>=BOOLEAN_TRUE && LA161_0<=VALUE_NULL)||(LA161_0>=DEFINE && LA161_0<=MATCHES)||LA161_0==WHILE||(LA161_0>=MERGE && LA161_0<=MATCHED)||LA161_0==NUM_DOUBLE||(LA161_0>=IDENT && LA161_0<=LCURLY)||LA161_0==LPAREN||(LA161_0>=PLUS && LA161_0<=QUESTION)||(LA161_0>=STRING_LITERAL && LA161_0<=QUOTED_STRING_LITERAL)||LA161_0==MINUS||LA161_0==NUM_INT||(LA161_0>=TICKED_STRING_LITERAL && LA161_0<=NUM_FLOAT)) ) {
                alt161=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 161, 0, input);
                throw nvae;
            }
            switch (alt161) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    if ( state.backtracking==0 ) {
                       paraphrases.push("case expression"); 
                    }
                    CASE407=(Token)match(input,CASE,FOLLOW_CASE_in_caseExpression6699); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CASE407_tree = (CommonTree)adaptor.create(CASE407);
                    root_0 = (CommonTree)adaptor.becomeRoot(CASE407_tree, root_0);
                    }
                    int cnt157=0;
                    loop157:
                    do {
                        int alt157=2;
                        int LA157_0 = input.LA(1);
                        if ( (LA157_0==WHEN) ) {
                            alt157=1;
                        }
                        switch (alt157) {
                    	case 1 :
                    	    {
                    	    pushFollow(FOLLOW_whenClause_in_caseExpression6702);
                    	    whenClause408=whenClause();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, whenClause408.getTree());
                    	    }
                    	    break;
                    	default :
                    	    if ( cnt157 >= 1 ) break loop157;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(157, input);
                                throw eee;
                        }
                        cnt157++;
                    } while (true);
                    int alt158=2;
                    int LA158_0 = input.LA(1);
                    if ( (LA158_0==ELSE) ) {
                        alt158=1;
                    }
                    switch (alt158) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_elseClause_in_caseExpression6705);
                            elseClause409=elseClause();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, elseClause409.getTree());
                            }
                            break;
                    }
                    END410=(Token)match(input,END,FOLLOW_END_in_caseExpression6708); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       paraphrases.pop(); 
                    }
                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {
                       paraphrases.push("case expression"); 
                    }
                    CASE411=(Token)match(input,CASE,FOLLOW_CASE_in_caseExpression6719); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CASE.add(CASE411);
                    pushFollow(FOLLOW_expression_in_caseExpression6721);
                    expression412=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression412.getTree());
                    int cnt159=0;
                    loop159:
                    do {
                        int alt159=2;
                        int LA159_0 = input.LA(1);
                        if ( (LA159_0==WHEN) ) {
                            alt159=1;
                        }
                        switch (alt159) {
                    	case 1 :
                    	    {
                    	    pushFollow(FOLLOW_whenClause_in_caseExpression6723);
                    	    whenClause413=whenClause();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_whenClause.add(whenClause413.getTree());
                    	    }
                    	    break;
                    	default :
                    	    if ( cnt159 >= 1 ) break loop159;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(159, input);
                                throw eee;
                        }
                        cnt159++;
                    } while (true);
                    int alt160=2;
                    int LA160_0 = input.LA(1);
                    if ( (LA160_0==ELSE) ) {
                        alt160=1;
                    }
                    switch (alt160) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_elseClause_in_caseExpression6726);
                            elseClause414=elseClause();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elseClause.add(elseClause414.getTree());
                            }
                            break;
                    }
                    END415=(Token)match(input,END,FOLLOW_END_in_caseExpression6729); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_END.add(END415);
                    if ( state.backtracking==0 ) {
                       paraphrases.pop(); 
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CASE2, "CASE2"), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        if ( !(stream_whenClause.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_whenClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_whenClause.nextTree());
                        }
                        stream_whenClause.reset();
                        if ( stream_elseClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_elseClause.nextTree());
                        }
                        stream_elseClause.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_evalOrExpression_in_caseExpression6753);
                    evalOrExpression416=evalOrExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, evalOrExpression416.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class evalOrExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.evalOrExpression_return evalOrExpression() throws RecognitionException {
        EsperEPL2GrammarParser.evalOrExpression_return retval = new EsperEPL2GrammarParser.evalOrExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token op=null;
        EsperEPL2GrammarParser.evalAndExpression_return evalAndExpression417 = null;
        EsperEPL2GrammarParser.evalAndExpression_return evalAndExpression418 = null;
        CommonTree op_tree=null;
        RewriteRuleTokenStream stream_OR_EXPR=new RewriteRuleTokenStream(adaptor,"token OR_EXPR");
        RewriteRuleSubtreeStream stream_evalAndExpression=new RewriteRuleSubtreeStream(adaptor,"rule evalAndExpression");
        try {
            {
            pushFollow(FOLLOW_evalAndExpression_in_evalOrExpression6764);
            evalAndExpression417=evalAndExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_evalAndExpression.add(evalAndExpression417.getTree());
            loop162:
            do {
                int alt162=2;
                int LA162_0 = input.LA(1);
                if ( (LA162_0==OR_EXPR) ) {
                    alt162=1;
                }
                switch (alt162) {
            	case 1 :
            	    {
            	    op=(Token)match(input,OR_EXPR,FOLLOW_OR_EXPR_in_evalOrExpression6769); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_OR_EXPR.add(op);
            	    pushFollow(FOLLOW_evalAndExpression_in_evalOrExpression6771);
            	    evalAndExpression418=evalAndExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_evalAndExpression.add(evalAndExpression418.getTree());
            	    }
            	    break;
            	default :
            	    break loop162;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (op != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_OR_EXPR, "EVAL_OR_EXPR"), root_1);
                while ( stream_evalAndExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_evalAndExpression.nextTree());
                }
                stream_evalAndExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_evalAndExpression.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class evalAndExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.evalAndExpression_return evalAndExpression() throws RecognitionException {
        EsperEPL2GrammarParser.evalAndExpression_return retval = new EsperEPL2GrammarParser.evalAndExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token op=null;
        EsperEPL2GrammarParser.bitWiseExpression_return bitWiseExpression419 = null;
        EsperEPL2GrammarParser.bitWiseExpression_return bitWiseExpression420 = null;
        CommonTree op_tree=null;
        RewriteRuleTokenStream stream_AND_EXPR=new RewriteRuleTokenStream(adaptor,"token AND_EXPR");
        RewriteRuleSubtreeStream stream_bitWiseExpression=new RewriteRuleSubtreeStream(adaptor,"rule bitWiseExpression");
        try {
            {
            pushFollow(FOLLOW_bitWiseExpression_in_evalAndExpression6803);
            bitWiseExpression419=bitWiseExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_bitWiseExpression.add(bitWiseExpression419.getTree());
            loop163:
            do {
                int alt163=2;
                int LA163_0 = input.LA(1);
                if ( (LA163_0==AND_EXPR) ) {
                    alt163=1;
                }
                switch (alt163) {
            	case 1 :
            	    {
            	    op=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_evalAndExpression6808); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_AND_EXPR.add(op);
            	    pushFollow(FOLLOW_bitWiseExpression_in_evalAndExpression6810);
            	    bitWiseExpression420=bitWiseExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_bitWiseExpression.add(bitWiseExpression420.getTree());
            	    }
            	    break;
            	default :
            	    break loop163;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (op != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_AND_EXPR, "EVAL_AND_EXPR"), root_1);
                if ( !(stream_bitWiseExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_bitWiseExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_bitWiseExpression.nextTree());
                }
                stream_bitWiseExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_bitWiseExpression.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class bitWiseExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.bitWiseExpression_return bitWiseExpression() throws RecognitionException {
        EsperEPL2GrammarParser.bitWiseExpression_return retval = new EsperEPL2GrammarParser.bitWiseExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token BAND422=null;
        Token BOR423=null;
        Token BXOR424=null;
        EsperEPL2GrammarParser.negatedExpression_return negatedExpression421 = null;
        EsperEPL2GrammarParser.negatedExpression_return negatedExpression425 = null;
        CommonTree BAND422_tree=null;
        CommonTree BOR423_tree=null;
        CommonTree BXOR424_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_negatedExpression_in_bitWiseExpression6842);
            negatedExpression421=negatedExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, negatedExpression421.getTree());
            loop165:
            do {
                int alt165=2;
                int LA165_0 = input.LA(1);
                if ( (LA165_0==BOR||(LA165_0>=BAND && LA165_0<=BXOR)) ) {
                    alt165=1;
                }
                switch (alt165) {
            	case 1 :
            	    {
            	    int alt164=3;
            	    switch ( input.LA(1) ) {
            	    case BAND:
            	        {
            	        alt164=1;
            	        }
            	        break;
            	    case BOR:
            	        {
            	        alt164=2;
            	        }
            	        break;
            	    case BXOR:
            	        {
            	        alt164=3;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 164, 0, input);
            	        throw nvae;
            	    }
            	    switch (alt164) {
            	        case 1 :
            	            {
            	            BAND422=(Token)match(input,BAND,FOLLOW_BAND_in_bitWiseExpression6847); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            BAND422_tree = (CommonTree)adaptor.create(BAND422);
            	            root_0 = (CommonTree)adaptor.becomeRoot(BAND422_tree, root_0);
            	            }
            	            }
            	            break;
            	        case 2 :
            	            {
            	            BOR423=(Token)match(input,BOR,FOLLOW_BOR_in_bitWiseExpression6850); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            BOR423_tree = (CommonTree)adaptor.create(BOR423);
            	            root_0 = (CommonTree)adaptor.becomeRoot(BOR423_tree, root_0);
            	            }
            	            }
            	            break;
            	        case 3 :
            	            {
            	            BXOR424=(Token)match(input,BXOR,FOLLOW_BXOR_in_bitWiseExpression6853); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            BXOR424_tree = (CommonTree)adaptor.create(BXOR424);
            	            root_0 = (CommonTree)adaptor.becomeRoot(BXOR424_tree, root_0);
            	            }
            	            }
            	            break;
            	    }
            	    pushFollow(FOLLOW_negatedExpression_in_bitWiseExpression6857);
            	    negatedExpression425=negatedExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, negatedExpression425.getTree());
            	    }
            	    break;
            	default :
            	    break loop165;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class negatedExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.negatedExpression_return negatedExpression() throws RecognitionException {
        EsperEPL2GrammarParser.negatedExpression_return retval = new EsperEPL2GrammarParser.negatedExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token NOT_EXPR427=null;
        EsperEPL2GrammarParser.evalEqualsExpression_return evalEqualsExpression426 = null;
        EsperEPL2GrammarParser.evalEqualsExpression_return evalEqualsExpression428 = null;
        CommonTree NOT_EXPR427_tree=null;
        try {
            int alt166=2;
            int LA166_0 = input.LA(1);
            if ( (LA166_0==WINDOW||LA166_0==ESCAPE||LA166_0==EVERY_EXPR||LA166_0==WHERE||(LA166_0>=SUM && LA166_0<=COUNT)||LA166_0==OUTER||(LA166_0>=JOIN && LA166_0<=FULL)||(LA166_0>=EVENTS && LA166_0<=LAST)||(LA166_0>=UNIDIRECTIONAL && LA166_0<=CURRENT_TIMESTAMP)||LA166_0==SNAPSHOT||(LA166_0>=VARIABLE && LA166_0<=INDEX)||(LA166_0>=BOOLEAN_TRUE && LA166_0<=VALUE_NULL)||(LA166_0>=DEFINE && LA166_0<=MATCHES)||LA166_0==WHILE||(LA166_0>=MERGE && LA166_0<=MATCHED)||LA166_0==NUM_DOUBLE||(LA166_0>=IDENT && LA166_0<=LCURLY)||LA166_0==LPAREN||(LA166_0>=PLUS && LA166_0<=QUESTION)||(LA166_0>=STRING_LITERAL && LA166_0<=QUOTED_STRING_LITERAL)||LA166_0==MINUS||LA166_0==NUM_INT||(LA166_0>=TICKED_STRING_LITERAL && LA166_0<=NUM_FLOAT)) ) {
                alt166=1;
            }
            else if ( (LA166_0==NOT_EXPR) ) {
                alt166=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 166, 0, input);
                throw nvae;
            }
            switch (alt166) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_evalEqualsExpression_in_negatedExpression6872);
                    evalEqualsExpression426=evalEqualsExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, evalEqualsExpression426.getTree());
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    NOT_EXPR427=(Token)match(input,NOT_EXPR,FOLLOW_NOT_EXPR_in_negatedExpression6878); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NOT_EXPR427_tree = (CommonTree)adaptor.create(NOT_EXPR427);
                    root_0 = (CommonTree)adaptor.becomeRoot(NOT_EXPR427_tree, root_0);
                    }
                    pushFollow(FOLLOW_evalEqualsExpression_in_negatedExpression6881);
                    evalEqualsExpression428=evalEqualsExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, evalEqualsExpression428.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class evalEqualsExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.evalEqualsExpression_return evalEqualsExpression() throws RecognitionException {
        EsperEPL2GrammarParser.evalEqualsExpression_return retval = new EsperEPL2GrammarParser.evalEqualsExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token eq=null;
        Token is=null;
        Token isnot=null;
        Token sqlne=null;
        Token ne=null;
        Token a=null;
        Token NOT_EXPR430=null;
        Token LPAREN432=null;
        Token RPAREN434=null;
        EsperEPL2GrammarParser.evalRelationalExpression_return evalRelationalExpression429 = null;
        EsperEPL2GrammarParser.evalRelationalExpression_return evalRelationalExpression431 = null;
        EsperEPL2GrammarParser.expressionList_return expressionList433 = null;
        EsperEPL2GrammarParser.subSelectGroupExpression_return subSelectGroupExpression435 = null;
        CommonTree eq_tree=null;
        CommonTree is_tree=null;
        CommonTree isnot_tree=null;
        CommonTree sqlne_tree=null;
        CommonTree ne_tree=null;
        CommonTree a_tree=null;
        CommonTree NOT_EXPR430_tree=null;
        CommonTree LPAREN432_tree=null;
        CommonTree RPAREN434_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleTokenStream stream_ANY=new RewriteRuleTokenStream(adaptor,"token ANY");
        RewriteRuleTokenStream stream_NOT_EXPR=new RewriteRuleTokenStream(adaptor,"token NOT_EXPR");
        RewriteRuleTokenStream stream_SQL_NE=new RewriteRuleTokenStream(adaptor,"token SQL_NE");
        RewriteRuleTokenStream stream_NOT_EQUAL=new RewriteRuleTokenStream(adaptor,"token NOT_EQUAL");
        RewriteRuleTokenStream stream_IS=new RewriteRuleTokenStream(adaptor,"token IS");
        RewriteRuleTokenStream stream_SOME=new RewriteRuleTokenStream(adaptor,"token SOME");
        RewriteRuleTokenStream stream_ALL=new RewriteRuleTokenStream(adaptor,"token ALL");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_subSelectGroupExpression=new RewriteRuleSubtreeStream(adaptor,"rule subSelectGroupExpression");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_evalRelationalExpression=new RewriteRuleSubtreeStream(adaptor,"rule evalRelationalExpression");
        try {
            {
            pushFollow(FOLLOW_evalRelationalExpression_in_evalEqualsExpression6894);
            evalRelationalExpression429=evalRelationalExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_evalRelationalExpression.add(evalRelationalExpression429.getTree());
            loop172:
            do {
                int alt172=2;
                int LA172_0 = input.LA(1);
                if ( (LA172_0==IS||LA172_0==EQUALS||(LA172_0>=SQL_NE && LA172_0<=NOT_EQUAL)) ) {
                    alt172=1;
                }
                switch (alt172) {
            	case 1 :
            	    {
            	    int alt167=5;
            	    switch ( input.LA(1) ) {
            	    case EQUALS:
            	        {
            	        alt167=1;
            	        }
            	        break;
            	    case IS:
            	        {
            	        int LA167_2 = input.LA(2);
            	        if ( (LA167_2==NOT_EXPR) ) {
            	            alt167=3;
            	        }
            	        else if ( (LA167_2==WINDOW||LA167_2==ESCAPE||LA167_2==EVERY_EXPR||LA167_2==WHERE||(LA167_2>=SUM && LA167_2<=COUNT)||LA167_2==OUTER||(LA167_2>=JOIN && LA167_2<=FULL)||(LA167_2>=ALL && LA167_2<=SOME)||(LA167_2>=EVENTS && LA167_2<=LAST)||(LA167_2>=UNIDIRECTIONAL && LA167_2<=CURRENT_TIMESTAMP)||LA167_2==SNAPSHOT||(LA167_2>=VARIABLE && LA167_2<=INDEX)||(LA167_2>=BOOLEAN_TRUE && LA167_2<=VALUE_NULL)||(LA167_2>=DEFINE && LA167_2<=MATCHES)||LA167_2==WHILE||(LA167_2>=MERGE && LA167_2<=MATCHED)||LA167_2==NUM_DOUBLE||(LA167_2>=IDENT && LA167_2<=LCURLY)||LA167_2==LPAREN||(LA167_2>=PLUS && LA167_2<=QUESTION)||(LA167_2>=STRING_LITERAL && LA167_2<=QUOTED_STRING_LITERAL)||LA167_2==MINUS||LA167_2==NUM_INT||(LA167_2>=TICKED_STRING_LITERAL && LA167_2<=NUM_FLOAT)) ) {
            	            alt167=2;
            	        }
            	        else {
            	            if (state.backtracking>0) {state.failed=true; return retval;}
            	            NoViableAltException nvae =
            	                new NoViableAltException("", 167, 2, input);
            	            throw nvae;
            	        }
            	        }
            	        break;
            	    case SQL_NE:
            	        {
            	        alt167=4;
            	        }
            	        break;
            	    case NOT_EQUAL:
            	        {
            	        alt167=5;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 167, 0, input);
            	        throw nvae;
            	    }
            	    switch (alt167) {
            	        case 1 :
            	            {
            	            eq=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_evalEqualsExpression6907); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_EQUALS.add(eq);
            	            }
            	            break;
            	        case 2 :
            	            {
            	            is=(Token)match(input,IS,FOLLOW_IS_in_evalEqualsExpression6925); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_IS.add(is);
            	            }
            	            break;
            	        case 3 :
            	            {
            	            isnot=(Token)match(input,IS,FOLLOW_IS_in_evalEqualsExpression6939); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_IS.add(isnot);
            	            NOT_EXPR430=(Token)match(input,NOT_EXPR,FOLLOW_NOT_EXPR_in_evalEqualsExpression6941); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NOT_EXPR.add(NOT_EXPR430);
            	            }
            	            break;
            	        case 4 :
            	            {
            	            sqlne=(Token)match(input,SQL_NE,FOLLOW_SQL_NE_in_evalEqualsExpression6955); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_SQL_NE.add(sqlne);
            	            }
            	            break;
            	        case 5 :
            	            {
            	            ne=(Token)match(input,NOT_EQUAL,FOLLOW_NOT_EQUAL_in_evalEqualsExpression6969); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NOT_EQUAL.add(ne);
            	            }
            	            break;
            	    }
            	    int alt171=2;
            	    int LA171_0 = input.LA(1);
            	    if ( (LA171_0==WINDOW||LA171_0==ESCAPE||LA171_0==EVERY_EXPR||LA171_0==WHERE||(LA171_0>=SUM && LA171_0<=COUNT)||LA171_0==OUTER||(LA171_0>=JOIN && LA171_0<=FULL)||(LA171_0>=EVENTS && LA171_0<=LAST)||(LA171_0>=UNIDIRECTIONAL && LA171_0<=CURRENT_TIMESTAMP)||LA171_0==SNAPSHOT||(LA171_0>=VARIABLE && LA171_0<=INDEX)||(LA171_0>=BOOLEAN_TRUE && LA171_0<=VALUE_NULL)||(LA171_0>=DEFINE && LA171_0<=MATCHES)||LA171_0==WHILE||(LA171_0>=MERGE && LA171_0<=MATCHED)||LA171_0==NUM_DOUBLE||(LA171_0>=IDENT && LA171_0<=LCURLY)||LA171_0==LPAREN||(LA171_0>=PLUS && LA171_0<=QUESTION)||(LA171_0>=STRING_LITERAL && LA171_0<=QUOTED_STRING_LITERAL)||LA171_0==MINUS||LA171_0==NUM_INT||(LA171_0>=TICKED_STRING_LITERAL && LA171_0<=NUM_FLOAT)) ) {
            	        alt171=1;
            	    }
            	    else if ( ((LA171_0>=ALL && LA171_0<=SOME)) ) {
            	        alt171=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 171, 0, input);
            	        throw nvae;
            	    }
            	    switch (alt171) {
            	        case 1 :
            	            {
            	            pushFollow(FOLLOW_evalRelationalExpression_in_evalEqualsExpression6999);
            	            evalRelationalExpression431=evalRelationalExpression();
            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_evalRelationalExpression.add(evalRelationalExpression431.getTree());
            	            }
            	            break;
            	        case 2 :
            	            {
            	            int alt168=3;
            	            switch ( input.LA(1) ) {
            	            case ANY:
            	                {
            	                alt168=1;
            	                }
            	                break;
            	            case SOME:
            	                {
            	                alt168=2;
            	                }
            	                break;
            	            case ALL:
            	                {
            	                alt168=3;
            	                }
            	                break;
            	            default:
            	                if (state.backtracking>0) {state.failed=true; return retval;}
            	                NoViableAltException nvae =
            	                    new NoViableAltException("", 168, 0, input);
            	                throw nvae;
            	            }
            	            switch (alt168) {
            	                case 1 :
            	                    {
            	                    a=(Token)match(input,ANY,FOLLOW_ANY_in_evalEqualsExpression7016); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_ANY.add(a);
            	                    }
            	                    break;
            	                case 2 :
            	                    {
            	                    a=(Token)match(input,SOME,FOLLOW_SOME_in_evalEqualsExpression7022); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_SOME.add(a);
            	                    }
            	                    break;
            	                case 3 :
            	                    {
            	                    a=(Token)match(input,ALL,FOLLOW_ALL_in_evalEqualsExpression7028); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_ALL.add(a);
            	                    }
            	                    break;
            	            }
            	            int alt170=2;
            	            int LA170_0 = input.LA(1);
            	            if ( (LA170_0==LPAREN) ) {
            	                int LA170_1 = input.LA(2);
            	                if ( (LA170_1==SELECT) ) {
            	                    alt170=2;
            	                }
            	                else if ( (LA170_1==WINDOW||LA170_1==ESCAPE||(LA170_1>=NOT_EXPR && LA170_1<=EVERY_EXPR)||LA170_1==WHERE||(LA170_1>=SUM && LA170_1<=COUNT)||LA170_1==CASE||LA170_1==OUTER||(LA170_1>=JOIN && LA170_1<=FULL)||(LA170_1>=EVENTS && LA170_1<=LAST)||(LA170_1>=UNIDIRECTIONAL && LA170_1<=CURRENT_TIMESTAMP)||LA170_1==SNAPSHOT||(LA170_1>=VARIABLE && LA170_1<=INDEX)||(LA170_1>=BOOLEAN_TRUE && LA170_1<=VALUE_NULL)||(LA170_1>=DEFINE && LA170_1<=MATCHES)||LA170_1==WHILE||(LA170_1>=MERGE && LA170_1<=MATCHED)||LA170_1==NUM_DOUBLE||(LA170_1>=IDENT && LA170_1<=LCURLY)||(LA170_1>=LPAREN && LA170_1<=RPAREN)||(LA170_1>=PLUS && LA170_1<=QUESTION)||(LA170_1>=STRING_LITERAL && LA170_1<=QUOTED_STRING_LITERAL)||LA170_1==MINUS||LA170_1==NUM_INT||(LA170_1>=TICKED_STRING_LITERAL && LA170_1<=NUM_FLOAT)) ) {
            	                    alt170=1;
            	                }
            	                else {
            	                    if (state.backtracking>0) {state.failed=true; return retval;}
            	                    NoViableAltException nvae =
            	                        new NoViableAltException("", 170, 1, input);
            	                    throw nvae;
            	                }
            	            }
            	            else {
            	                if (state.backtracking>0) {state.failed=true; return retval;}
            	                NoViableAltException nvae =
            	                    new NoViableAltException("", 170, 0, input);
            	                throw nvae;
            	            }
            	            switch (alt170) {
            	                case 1 :
            	                    {
            	                    {
            	                    LPAREN432=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_evalEqualsExpression7034); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN432);
            	                    int alt169=2;
            	                    int LA169_0 = input.LA(1);
            	                    if ( (LA169_0==WINDOW||LA169_0==ESCAPE||(LA169_0>=NOT_EXPR && LA169_0<=EVERY_EXPR)||LA169_0==WHERE||(LA169_0>=SUM && LA169_0<=COUNT)||LA169_0==CASE||LA169_0==OUTER||(LA169_0>=JOIN && LA169_0<=FULL)||(LA169_0>=EVENTS && LA169_0<=LAST)||(LA169_0>=UNIDIRECTIONAL && LA169_0<=CURRENT_TIMESTAMP)||LA169_0==SNAPSHOT||(LA169_0>=VARIABLE && LA169_0<=INDEX)||(LA169_0>=BOOLEAN_TRUE && LA169_0<=VALUE_NULL)||(LA169_0>=DEFINE && LA169_0<=MATCHES)||LA169_0==WHILE||(LA169_0>=MERGE && LA169_0<=MATCHED)||LA169_0==NUM_DOUBLE||(LA169_0>=IDENT && LA169_0<=LCURLY)||LA169_0==LPAREN||(LA169_0>=PLUS && LA169_0<=QUESTION)||(LA169_0>=STRING_LITERAL && LA169_0<=QUOTED_STRING_LITERAL)||LA169_0==MINUS||LA169_0==NUM_INT||(LA169_0>=TICKED_STRING_LITERAL && LA169_0<=NUM_FLOAT)) ) {
            	                        alt169=1;
            	                    }
            	                    switch (alt169) {
            	                        case 1 :
            	                            {
            	                            pushFollow(FOLLOW_expressionList_in_evalEqualsExpression7036);
            	                            expressionList433=expressionList();
            	                            state._fsp--;
            	                            if (state.failed) return retval;
            	                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList433.getTree());
            	                            }
            	                            break;
            	                    }
            	                    RPAREN434=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_evalEqualsExpression7039); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN434);
            	                    }
            	                    }
            	                    break;
            	                case 2 :
            	                    {
            	                    pushFollow(FOLLOW_subSelectGroupExpression_in_evalEqualsExpression7044);
            	                    subSelectGroupExpression435=subSelectGroupExpression();
            	                    state._fsp--;
            	                    if (state.failed) return retval;
            	                    if ( state.backtracking==0 ) stream_subSelectGroupExpression.add(subSelectGroupExpression435.getTree());
            	                    }
            	                    break;
            	            }
            	            }
            	            break;
            	    }
            	    }
            	    break;
            	default :
            	    break loop172;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_a=new RewriteRuleTokenStream(adaptor,"token a",a);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (a == null && (eq != null || is != null)) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_EQUALS_EXPR, "EVAL_EQUALS_EXPR"), root_1);
                if ( !(stream_evalRelationalExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_evalRelationalExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_evalRelationalExpression.nextTree());
                }
                stream_evalRelationalExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (a != null && (eq != null || is != null)) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_EQUALS_GROUP_EXPR, "EVAL_EQUALS_GROUP_EXPR"), root_1);
                adaptor.addChild(root_1, stream_evalRelationalExpression.nextTree());
                adaptor.addChild(root_1, stream_a.nextNode());
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());
                }
                stream_expressionList.reset();
                if ( stream_subSelectGroupExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_subSelectGroupExpression.nextTree());
                }
                stream_subSelectGroupExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (a == null && (isnot != null || sqlne != null || ne != null)) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_NOTEQUALS_EXPR, "EVAL_NOTEQUALS_EXPR"), root_1);
                if ( !(stream_evalRelationalExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_evalRelationalExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_evalRelationalExpression.nextTree());
                }
                stream_evalRelationalExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (a != null && (isnot != null || sqlne != null || ne != null)) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_NOTEQUALS_GROUP_EXPR, "EVAL_NOTEQUALS_GROUP_EXPR"), root_1);
                adaptor.addChild(root_1, stream_evalRelationalExpression.nextTree());
                adaptor.addChild(root_1, stream_a.nextNode());
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());
                }
                stream_expressionList.reset();
                if ( stream_subSelectGroupExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_subSelectGroupExpression.nextTree());
                }
                stream_subSelectGroupExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                if ( !(stream_evalRelationalExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_evalRelationalExpression.hasNext() ) {
                    adaptor.addChild(root_0, stream_evalRelationalExpression.nextTree());
                }
                stream_evalRelationalExpression.reset();
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class evalRelationalExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.evalRelationalExpression_return evalRelationalExpression() throws RecognitionException {
        EsperEPL2GrammarParser.evalRelationalExpression_return retval = new EsperEPL2GrammarParser.evalRelationalExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token r=null;
        Token g=null;
        Token n=null;
        Token i=null;
        Token l=null;
        Token col=null;
        Token LPAREN438=null;
        Token RPAREN440=null;
        Token COMMA444=null;
        Token IN_SET446=null;
        Token BETWEEN448=null;
        Token LIKE450=null;
        Token ESCAPE452=null;
        Token REGEXP454=null;
        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr436 = null;
        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr437 = null;
        EsperEPL2GrammarParser.expressionList_return expressionList439 = null;
        EsperEPL2GrammarParser.subSelectGroupExpression_return subSelectGroupExpression441 = null;
        EsperEPL2GrammarParser.expression_return expression442 = null;
        EsperEPL2GrammarParser.expression_return expression443 = null;
        EsperEPL2GrammarParser.expression_return expression445 = null;
        EsperEPL2GrammarParser.inSubSelectQuery_return inSubSelectQuery447 = null;
        EsperEPL2GrammarParser.betweenList_return betweenList449 = null;
        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr451 = null;
        EsperEPL2GrammarParser.stringconstant_return stringconstant453 = null;
        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr455 = null;
        CommonTree r_tree=null;
        CommonTree g_tree=null;
        CommonTree n_tree=null;
        CommonTree i_tree=null;
        CommonTree l_tree=null;
        CommonTree col_tree=null;
        CommonTree LPAREN438_tree=null;
        CommonTree RPAREN440_tree=null;
        CommonTree COMMA444_tree=null;
        CommonTree IN_SET446_tree=null;
        CommonTree BETWEEN448_tree=null;
        CommonTree LIKE450_tree=null;
        CommonTree ESCAPE452_tree=null;
        CommonTree REGEXP454_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_GE=new RewriteRuleTokenStream(adaptor,"token GE");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LT=new RewriteRuleTokenStream(adaptor,"token LT");
        RewriteRuleTokenStream stream_ANY=new RewriteRuleTokenStream(adaptor,"token ANY");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_NOT_EXPR=new RewriteRuleTokenStream(adaptor,"token NOT_EXPR");
        RewriteRuleTokenStream stream_ESCAPE=new RewriteRuleTokenStream(adaptor,"token ESCAPE");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_IN_SET=new RewriteRuleTokenStream(adaptor,"token IN_SET");
        RewriteRuleTokenStream stream_SOME=new RewriteRuleTokenStream(adaptor,"token SOME");
        RewriteRuleTokenStream stream_ALL=new RewriteRuleTokenStream(adaptor,"token ALL");
        RewriteRuleTokenStream stream_REGEXP=new RewriteRuleTokenStream(adaptor,"token REGEXP");
        RewriteRuleTokenStream stream_GT=new RewriteRuleTokenStream(adaptor,"token GT");
        RewriteRuleTokenStream stream_BETWEEN=new RewriteRuleTokenStream(adaptor,"token BETWEEN");
        RewriteRuleTokenStream stream_LE=new RewriteRuleTokenStream(adaptor,"token LE");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_LIKE=new RewriteRuleTokenStream(adaptor,"token LIKE");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_inSubSelectQuery=new RewriteRuleSubtreeStream(adaptor,"rule inSubSelectQuery");
        RewriteRuleSubtreeStream stream_concatenationExpr=new RewriteRuleSubtreeStream(adaptor,"rule concatenationExpr");
        RewriteRuleSubtreeStream stream_subSelectGroupExpression=new RewriteRuleSubtreeStream(adaptor,"rule subSelectGroupExpression");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_stringconstant=new RewriteRuleSubtreeStream(adaptor,"rule stringconstant");
        RewriteRuleSubtreeStream stream_betweenList=new RewriteRuleSubtreeStream(adaptor,"rule betweenList");
        try {
            {
            pushFollow(FOLLOW_concatenationExpr_in_evalRelationalExpression7172);
            concatenationExpr436=concatenationExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_concatenationExpr.add(concatenationExpr436.getTree());
            int alt186=2;
            int LA186_0 = input.LA(1);
            if ( (LA186_0==EOF||(LA186_0>=OR_EXPR && LA186_0<=AND_EXPR)||(LA186_0>=WHERE && LA186_0<=AS)||(LA186_0>=ELSE && LA186_0<=FROM)||LA186_0==IS||(LA186_0>=GROUP && LA186_0<=HAVING)||LA186_0==ALL||LA186_0==OUTPUT||LA186_0==INSERT||(LA186_0>=ORDER && LA186_0<=DESC)||LA186_0==PATTERN||(LA186_0>=TIMEPERIOD_SEC && LA186_0<=TIMEPERIOD_SECONDS)||LA186_0==ROW_LIMIT_EXPR||LA186_0==MEASURES||(LA186_0>=AFTER && LA186_0<=FOR)||LA186_0==RCURLY||LA186_0==RPAREN||(LA186_0>=COMMA && LA186_0<=EQUALS)||LA186_0==RBRACK||LA186_0==BOR||LA186_0==COLON||(LA186_0>=BAND && LA186_0<=GE)||LA186_0==FOLLOWMAX_END) ) {
                alt186=1;
            }
            else if ( ((LA186_0>=IN_SET && LA186_0<=REGEXP)||LA186_0==NOT_EXPR) ) {
                alt186=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 186, 0, input);
                throw nvae;
            }
            switch (alt186) {
                case 1 :
                    {
                    {
                    loop178:
                    do {
                        int alt178=2;
                        int LA178_0 = input.LA(1);
                        if ( ((LA178_0>=LT && LA178_0<=GE)) ) {
                            alt178=1;
                        }
                        switch (alt178) {
                    	case 1 :
                    	    {
                    	    int alt173=4;
                    	    switch ( input.LA(1) ) {
                    	    case LT:
                    	        {
                    	        alt173=1;
                    	        }
                    	        break;
                    	    case GT:
                    	        {
                    	        alt173=2;
                    	        }
                    	        break;
                    	    case LE:
                    	        {
                    	        alt173=3;
                    	        }
                    	        break;
                    	    case GE:
                    	        {
                    	        alt173=4;
                    	        }
                    	        break;
                    	    default:
                    	        if (state.backtracking>0) {state.failed=true; return retval;}
                    	        NoViableAltException nvae =
                    	            new NoViableAltException("", 173, 0, input);
                    	        throw nvae;
                    	    }
                    	    switch (alt173) {
                    	        case 1 :
                    	            {
                    	            r=(Token)match(input,LT,FOLLOW_LT_in_evalRelationalExpression7204); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_LT.add(r);
                    	            }
                    	            break;
                    	        case 2 :
                    	            {
                    	            r=(Token)match(input,GT,FOLLOW_GT_in_evalRelationalExpression7208); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_GT.add(r);
                    	            }
                    	            break;
                    	        case 3 :
                    	            {
                    	            r=(Token)match(input,LE,FOLLOW_LE_in_evalRelationalExpression7212); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_LE.add(r);
                    	            }
                    	            break;
                    	        case 4 :
                    	            {
                    	            r=(Token)match(input,GE,FOLLOW_GE_in_evalRelationalExpression7216); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_GE.add(r);
                    	            }
                    	            break;
                    	    }
                    	    int alt177=2;
                    	    int LA177_0 = input.LA(1);
                    	    if ( (LA177_0==WINDOW||LA177_0==ESCAPE||LA177_0==EVERY_EXPR||LA177_0==WHERE||(LA177_0>=SUM && LA177_0<=COUNT)||LA177_0==OUTER||(LA177_0>=JOIN && LA177_0<=FULL)||(LA177_0>=EVENTS && LA177_0<=LAST)||(LA177_0>=UNIDIRECTIONAL && LA177_0<=CURRENT_TIMESTAMP)||LA177_0==SNAPSHOT||(LA177_0>=VARIABLE && LA177_0<=INDEX)||(LA177_0>=BOOLEAN_TRUE && LA177_0<=VALUE_NULL)||(LA177_0>=DEFINE && LA177_0<=MATCHES)||LA177_0==WHILE||(LA177_0>=MERGE && LA177_0<=MATCHED)||LA177_0==NUM_DOUBLE||(LA177_0>=IDENT && LA177_0<=LCURLY)||LA177_0==LPAREN||(LA177_0>=PLUS && LA177_0<=QUESTION)||(LA177_0>=STRING_LITERAL && LA177_0<=QUOTED_STRING_LITERAL)||LA177_0==MINUS||LA177_0==NUM_INT||(LA177_0>=TICKED_STRING_LITERAL && LA177_0<=NUM_FLOAT)) ) {
                    	        alt177=1;
                    	    }
                    	    else if ( ((LA177_0>=ALL && LA177_0<=SOME)) ) {
                    	        alt177=2;
                    	    }
                    	    else {
                    	        if (state.backtracking>0) {state.failed=true; return retval;}
                    	        NoViableAltException nvae =
                    	            new NoViableAltException("", 177, 0, input);
                    	        throw nvae;
                    	    }
                    	    switch (alt177) {
                    	        case 1 :
                    	            {
                    	            pushFollow(FOLLOW_concatenationExpr_in_evalRelationalExpression7240);
                    	            concatenationExpr437=concatenationExpr();
                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) stream_concatenationExpr.add(concatenationExpr437.getTree());
                    	            }
                    	            break;
                    	        case 2 :
                    	            {
                    	            int alt174=3;
                    	            switch ( input.LA(1) ) {
                    	            case ANY:
                    	                {
                    	                alt174=1;
                    	                }
                    	                break;
                    	            case SOME:
                    	                {
                    	                alt174=2;
                    	                }
                    	                break;
                    	            case ALL:
                    	                {
                    	                alt174=3;
                    	                }
                    	                break;
                    	            default:
                    	                if (state.backtracking>0) {state.failed=true; return retval;}
                    	                NoViableAltException nvae =
                    	                    new NoViableAltException("", 174, 0, input);
                    	                throw nvae;
                    	            }
                    	            switch (alt174) {
                    	                case 1 :
                    	                    {
                    	                    g=(Token)match(input,ANY,FOLLOW_ANY_in_evalRelationalExpression7257); if (state.failed) return retval; 
                    	                    if ( state.backtracking==0 ) stream_ANY.add(g);
                    	                    }
                    	                    break;
                    	                case 2 :
                    	                    {
                    	                    g=(Token)match(input,SOME,FOLLOW_SOME_in_evalRelationalExpression7263); if (state.failed) return retval; 
                    	                    if ( state.backtracking==0 ) stream_SOME.add(g);
                    	                    }
                    	                    break;
                    	                case 3 :
                    	                    {
                    	                    g=(Token)match(input,ALL,FOLLOW_ALL_in_evalRelationalExpression7269); if (state.failed) return retval; 
                    	                    if ( state.backtracking==0 ) stream_ALL.add(g);
                    	                    }
                    	                    break;
                    	            }
                    	            int alt176=2;
                    	            int LA176_0 = input.LA(1);
                    	            if ( (LA176_0==LPAREN) ) {
                    	                int LA176_1 = input.LA(2);
                    	                if ( (LA176_1==SELECT) ) {
                    	                    alt176=2;
                    	                }
                    	                else if ( (LA176_1==WINDOW||LA176_1==ESCAPE||(LA176_1>=NOT_EXPR && LA176_1<=EVERY_EXPR)||LA176_1==WHERE||(LA176_1>=SUM && LA176_1<=COUNT)||LA176_1==CASE||LA176_1==OUTER||(LA176_1>=JOIN && LA176_1<=FULL)||(LA176_1>=EVENTS && LA176_1<=LAST)||(LA176_1>=UNIDIRECTIONAL && LA176_1<=CURRENT_TIMESTAMP)||LA176_1==SNAPSHOT||(LA176_1>=VARIABLE && LA176_1<=INDEX)||(LA176_1>=BOOLEAN_TRUE && LA176_1<=VALUE_NULL)||(LA176_1>=DEFINE && LA176_1<=MATCHES)||LA176_1==WHILE||(LA176_1>=MERGE && LA176_1<=MATCHED)||LA176_1==NUM_DOUBLE||(LA176_1>=IDENT && LA176_1<=LCURLY)||(LA176_1>=LPAREN && LA176_1<=RPAREN)||(LA176_1>=PLUS && LA176_1<=QUESTION)||(LA176_1>=STRING_LITERAL && LA176_1<=QUOTED_STRING_LITERAL)||LA176_1==MINUS||LA176_1==NUM_INT||(LA176_1>=TICKED_STRING_LITERAL && LA176_1<=NUM_FLOAT)) ) {
                    	                    alt176=1;
                    	                }
                    	                else {
                    	                    if (state.backtracking>0) {state.failed=true; return retval;}
                    	                    NoViableAltException nvae =
                    	                        new NoViableAltException("", 176, 1, input);
                    	                    throw nvae;
                    	                }
                    	            }
                    	            else {
                    	                if (state.backtracking>0) {state.failed=true; return retval;}
                    	                NoViableAltException nvae =
                    	                    new NoViableAltException("", 176, 0, input);
                    	                throw nvae;
                    	            }
                    	            switch (alt176) {
                    	                case 1 :
                    	                    {
                    	                    {
                    	                    LPAREN438=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_evalRelationalExpression7275); if (state.failed) return retval; 
                    	                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN438);
                    	                    int alt175=2;
                    	                    int LA175_0 = input.LA(1);
                    	                    if ( (LA175_0==WINDOW||LA175_0==ESCAPE||(LA175_0>=NOT_EXPR && LA175_0<=EVERY_EXPR)||LA175_0==WHERE||(LA175_0>=SUM && LA175_0<=COUNT)||LA175_0==CASE||LA175_0==OUTER||(LA175_0>=JOIN && LA175_0<=FULL)||(LA175_0>=EVENTS && LA175_0<=LAST)||(LA175_0>=UNIDIRECTIONAL && LA175_0<=CURRENT_TIMESTAMP)||LA175_0==SNAPSHOT||(LA175_0>=VARIABLE && LA175_0<=INDEX)||(LA175_0>=BOOLEAN_TRUE && LA175_0<=VALUE_NULL)||(LA175_0>=DEFINE && LA175_0<=MATCHES)||LA175_0==WHILE||(LA175_0>=MERGE && LA175_0<=MATCHED)||LA175_0==NUM_DOUBLE||(LA175_0>=IDENT && LA175_0<=LCURLY)||LA175_0==LPAREN||(LA175_0>=PLUS && LA175_0<=QUESTION)||(LA175_0>=STRING_LITERAL && LA175_0<=QUOTED_STRING_LITERAL)||LA175_0==MINUS||LA175_0==NUM_INT||(LA175_0>=TICKED_STRING_LITERAL && LA175_0<=NUM_FLOAT)) ) {
                    	                        alt175=1;
                    	                    }
                    	                    switch (alt175) {
                    	                        case 1 :
                    	                            {
                    	                            pushFollow(FOLLOW_expressionList_in_evalRelationalExpression7277);
                    	                            expressionList439=expressionList();
                    	                            state._fsp--;
                    	                            if (state.failed) return retval;
                    	                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList439.getTree());
                    	                            }
                    	                            break;
                    	                    }
                    	                    RPAREN440=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_evalRelationalExpression7280); if (state.failed) return retval; 
                    	                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN440);
                    	                    }
                    	                    }
                    	                    break;
                    	                case 2 :
                    	                    {
                    	                    pushFollow(FOLLOW_subSelectGroupExpression_in_evalRelationalExpression7285);
                    	                    subSelectGroupExpression441=subSelectGroupExpression();
                    	                    state._fsp--;
                    	                    if (state.failed) return retval;
                    	                    if ( state.backtracking==0 ) stream_subSelectGroupExpression.add(subSelectGroupExpression441.getTree());
                    	                    }
                    	                    break;
                    	            }
                    	            }
                    	            break;
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop178;
                        }
                    } while (true);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_g=new RewriteRuleTokenStream(adaptor,"token g",g);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    if (g == null && r != null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(r), root_1);
                        if ( !(stream_concatenationExpr.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_concatenationExpr.hasNext() ) {
                            adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                        }
                        stream_concatenationExpr.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    if (g != null && r != null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(r), root_1);
                        adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                        adaptor.addChild(root_1, stream_g.nextNode());
                        if ( stream_expressionList.hasNext() ) {
                            adaptor.addChild(root_1, stream_expressionList.nextTree());
                        }
                        stream_expressionList.reset();
                        if ( stream_subSelectGroupExpression.hasNext() ) {
                            adaptor.addChild(root_1, stream_subSelectGroupExpression.nextTree());
                        }
                        stream_subSelectGroupExpression.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    {
                        if ( !(stream_concatenationExpr.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_concatenationExpr.hasNext() ) {
                            adaptor.addChild(root_0, stream_concatenationExpr.nextTree());
                        }
                        stream_concatenationExpr.reset();
                    }
                    retval.tree = root_0;}
                    }
                    }
                    break;
                case 2 :
                    {
                    int alt179=2;
                    int LA179_0 = input.LA(1);
                    if ( (LA179_0==NOT_EXPR) ) {
                        alt179=1;
                    }
                    switch (alt179) {
                        case 1 :
                            {
                            n=(Token)match(input,NOT_EXPR,FOLLOW_NOT_EXPR_in_evalRelationalExpression7381); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NOT_EXPR.add(n);
                            }
                            break;
                    }
                    int alt185=5;
                    switch ( input.LA(1) ) {
                    case IN_SET:
                        {
                        int LA185_1 = input.LA(2);
                        if ( (LA185_1==LPAREN) ) {
                            int LA185_5 = input.LA(3);
                            if ( (LA185_5==SELECT) ) {
                                alt185=2;
                            }
                            else if ( (LA185_5==WINDOW||LA185_5==ESCAPE||(LA185_5>=NOT_EXPR && LA185_5<=EVERY_EXPR)||LA185_5==WHERE||(LA185_5>=SUM && LA185_5<=COUNT)||LA185_5==CASE||LA185_5==OUTER||(LA185_5>=JOIN && LA185_5<=FULL)||(LA185_5>=EVENTS && LA185_5<=LAST)||(LA185_5>=UNIDIRECTIONAL && LA185_5<=CURRENT_TIMESTAMP)||LA185_5==SNAPSHOT||(LA185_5>=VARIABLE && LA185_5<=INDEX)||(LA185_5>=BOOLEAN_TRUE && LA185_5<=VALUE_NULL)||(LA185_5>=DEFINE && LA185_5<=MATCHES)||LA185_5==WHILE||(LA185_5>=MERGE && LA185_5<=MATCHED)||LA185_5==NUM_DOUBLE||(LA185_5>=IDENT && LA185_5<=LCURLY)||LA185_5==LPAREN||(LA185_5>=PLUS && LA185_5<=QUESTION)||(LA185_5>=STRING_LITERAL && LA185_5<=QUOTED_STRING_LITERAL)||LA185_5==MINUS||LA185_5==NUM_INT||(LA185_5>=TICKED_STRING_LITERAL && LA185_5<=NUM_FLOAT)) ) {
                                alt185=1;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 185, 5, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA185_1==LBRACK) ) {
                            alt185=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 185, 1, input);
                            throw nvae;
                        }
                        }
                        break;
                    case BETWEEN:
                        {
                        alt185=3;
                        }
                        break;
                    case LIKE:
                        {
                        alt185=4;
                        }
                        break;
                    case REGEXP:
                        {
                        alt185=5;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 185, 0, input);
                        throw nvae;
                    }
                    switch (alt185) {
                        case 1 :
                            {
                            {
                            i=(Token)match(input,IN_SET,FOLLOW_IN_SET_in_evalRelationalExpression7408); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IN_SET.add(i);
                            int alt180=2;
                            int LA180_0 = input.LA(1);
                            if ( (LA180_0==LPAREN) ) {
                                alt180=1;
                            }
                            else if ( (LA180_0==LBRACK) ) {
                                alt180=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 180, 0, input);
                                throw nvae;
                            }
                            switch (alt180) {
                                case 1 :
                                    {
                                    l=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_evalRelationalExpression7420); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_LPAREN.add(l);
                                    }
                                    break;
                                case 2 :
                                    {
                                    l=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_evalRelationalExpression7426); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_LBRACK.add(l);
                                    }
                                    break;
                            }
                            pushFollow(FOLLOW_expression_in_evalRelationalExpression7429);
                            expression442=expression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(expression442.getTree());
                            int alt182=2;
                            int LA182_0 = input.LA(1);
                            if ( (LA182_0==COLON) ) {
                                alt182=1;
                            }
                            else if ( (LA182_0==RPAREN||LA182_0==COMMA||LA182_0==RBRACK) ) {
                                alt182=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 182, 0, input);
                                throw nvae;
                            }
                            switch (alt182) {
                                case 1 :
                                    {
                                    {
                                    col=(Token)match(input,COLON,FOLLOW_COLON_in_evalRelationalExpression7451); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_COLON.add(col);
                                    {
                                    pushFollow(FOLLOW_expression_in_evalRelationalExpression7454);
                                    expression443=expression();
                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_expression.add(expression443.getTree());
                                    }
                                    }
                                    }
                                    break;
                                case 2 :
                                    {
                                    {
                                    loop181:
                                    do {
                                        int alt181=2;
                                        int LA181_0 = input.LA(1);
                                        if ( (LA181_0==COMMA) ) {
                                            alt181=1;
                                        }
                                        switch (alt181) {
                                    	case 1 :
                                    	    {
                                    	    COMMA444=(Token)match(input,COMMA,FOLLOW_COMMA_in_evalRelationalExpression7480); if (state.failed) return retval; 
                                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA444);
                                    	    pushFollow(FOLLOW_expression_in_evalRelationalExpression7482);
                                    	    expression445=expression();
                                    	    state._fsp--;
                                    	    if (state.failed) return retval;
                                    	    if ( state.backtracking==0 ) stream_expression.add(expression445.getTree());
                                    	    }
                                    	    break;
                                    	default :
                                    	    break loop181;
                                        }
                                    } while (true);
                                    }
                                    }
                                    break;
                            }
                            int alt183=2;
                            int LA183_0 = input.LA(1);
                            if ( (LA183_0==RPAREN) ) {
                                alt183=1;
                            }
                            else if ( (LA183_0==RBRACK) ) {
                                alt183=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 183, 0, input);
                                throw nvae;
                            }
                            switch (alt183) {
                                case 1 :
                                    {
                                    r=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_evalRelationalExpression7508); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_RPAREN.add(r);
                                    }
                                    break;
                                case 2 :
                                    {
                                    r=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_evalRelationalExpression7514); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_RBRACK.add(r);
                                    }
                                    break;
                            }
                            }
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleTokenStream stream_r=new RewriteRuleTokenStream(adaptor,"token r",r);
                            RewriteRuleTokenStream stream_l=new RewriteRuleTokenStream(adaptor,"token l",l);
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                            root_0 = (CommonTree)adaptor.nil();
                            if (col == null && n == null) {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_IN_SET.nextNode(), root_1);
                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_l.nextNode());
                                if ( !(stream_expression.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_expression.hasNext() ) {
                                    adaptor.addChild(root_1, stream_expression.nextTree());
                                }
                                stream_expression.reset();
                                adaptor.addChild(root_1, stream_r.nextNode());
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            else 
                            if (col == null && n != null) {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_IN_SET, "NOT_IN_SET"), root_1);
                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_l.nextNode());
                                if ( !(stream_expression.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_expression.hasNext() ) {
                                    adaptor.addChild(root_1, stream_expression.nextTree());
                                }
                                stream_expression.reset();
                                adaptor.addChild(root_1, stream_r.nextNode());
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            else 
                            if (col != null && n == null) {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IN_RANGE, "IN_RANGE"), root_1);
                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_l.nextNode());
                                if ( !(stream_expression.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_expression.hasNext() ) {
                                    adaptor.addChild(root_1, stream_expression.nextTree());
                                }
                                stream_expression.reset();
                                adaptor.addChild(root_1, stream_r.nextNode());
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            else 
                            {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_IN_RANGE, "NOT_IN_RANGE"), root_1);
                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_l.nextNode());
                                if ( !(stream_expression.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_expression.hasNext() ) {
                                    adaptor.addChild(root_1, stream_expression.nextTree());
                                }
                                stream_expression.reset();
                                adaptor.addChild(root_1, stream_r.nextNode());
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            retval.tree = root_0;}
                            }
                            break;
                        case 2 :
                            {
                            IN_SET446=(Token)match(input,IN_SET,FOLLOW_IN_SET_in_evalRelationalExpression7637); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IN_SET.add(IN_SET446);
                            pushFollow(FOLLOW_inSubSelectQuery_in_evalRelationalExpression7639);
                            inSubSelectQuery447=inSubSelectQuery();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_inSubSelectQuery.add(inSubSelectQuery447.getTree());
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                            root_0 = (CommonTree)adaptor.nil();
                            if (n == null) {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IN_SUBSELECT_EXPR, "IN_SUBSELECT_EXPR"), root_1);
                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_inSubSelectQuery.nextTree());
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            else 
                            {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_IN_SUBSELECT_EXPR, "NOT_IN_SUBSELECT_EXPR"), root_1);
                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_inSubSelectQuery.nextTree());
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            retval.tree = root_0;}
                            }
                            break;
                        case 3 :
                            {
                            BETWEEN448=(Token)match(input,BETWEEN,FOLLOW_BETWEEN_in_evalRelationalExpression7685); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_BETWEEN.add(BETWEEN448);
                            pushFollow(FOLLOW_betweenList_in_evalRelationalExpression7687);
                            betweenList449=betweenList();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_betweenList.add(betweenList449.getTree());
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                            root_0 = (CommonTree)adaptor.nil();
                            if (n == null) {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_BETWEEN.nextNode(), root_1);
                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_betweenList.nextTree());
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            else 
                            {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_BETWEEN, "NOT_BETWEEN"), root_1);
                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_betweenList.nextTree());
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            retval.tree = root_0;}
                            }
                            break;
                        case 4 :
                            {
                            LIKE450=(Token)match(input,LIKE,FOLLOW_LIKE_in_evalRelationalExpression7737); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_LIKE.add(LIKE450);
                            pushFollow(FOLLOW_concatenationExpr_in_evalRelationalExpression7739);
                            concatenationExpr451=concatenationExpr();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_concatenationExpr.add(concatenationExpr451.getTree());
                            int alt184=2;
                            int LA184_0 = input.LA(1);
                            if ( (LA184_0==ESCAPE) ) {
                                alt184=1;
                            }
                            switch (alt184) {
                                case 1 :
                                    {
                                    ESCAPE452=(Token)match(input,ESCAPE,FOLLOW_ESCAPE_in_evalRelationalExpression7742); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_ESCAPE.add(ESCAPE452);
                                    pushFollow(FOLLOW_stringconstant_in_evalRelationalExpression7744);
                                    stringconstant453=stringconstant();
                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_stringconstant.add(stringconstant453.getTree());
                                    }
                                    break;
                            }
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                            root_0 = (CommonTree)adaptor.nil();
                            if (n == null) {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_LIKE.nextNode(), root_1);
                                while ( stream_concatenationExpr.hasNext() ) {
                                    adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                }
                                stream_concatenationExpr.reset();
                                if ( stream_stringconstant.hasNext() ) {
                                    adaptor.addChild(root_1, stream_stringconstant.nextTree());
                                }
                                stream_stringconstant.reset();
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            else 
                            {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_LIKE, "NOT_LIKE"), root_1);
                                while ( stream_concatenationExpr.hasNext() ) {
                                    adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                }
                                stream_concatenationExpr.reset();
                                if ( stream_stringconstant.hasNext() ) {
                                    adaptor.addChild(root_1, stream_stringconstant.nextTree());
                                }
                                stream_stringconstant.reset();
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            retval.tree = root_0;}
                            }
                            break;
                        case 5 :
                            {
                            REGEXP454=(Token)match(input,REGEXP,FOLLOW_REGEXP_in_evalRelationalExpression7796); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_REGEXP.add(REGEXP454);
                            pushFollow(FOLLOW_concatenationExpr_in_evalRelationalExpression7798);
                            concatenationExpr455=concatenationExpr();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_concatenationExpr.add(concatenationExpr455.getTree());
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                            root_0 = (CommonTree)adaptor.nil();
                            if (n == null) {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_REGEXP.nextNode(), root_1);
                                if ( !(stream_concatenationExpr.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_concatenationExpr.hasNext() ) {
                                    adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                }
                                stream_concatenationExpr.reset();
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            else 
                            {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_REGEXP, "NOT_REGEXP"), root_1);
                                if ( !(stream_concatenationExpr.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_concatenationExpr.hasNext() ) {
                                    adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                }
                                stream_concatenationExpr.reset();
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            retval.tree = root_0;}
                            }
                            break;
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class inSubSelectQuery_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.inSubSelectQuery_return inSubSelectQuery() throws RecognitionException {
        EsperEPL2GrammarParser.inSubSelectQuery_return retval = new EsperEPL2GrammarParser.inSubSelectQuery_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr456 = null;
        RewriteRuleSubtreeStream stream_subQueryExpr=new RewriteRuleSubtreeStream(adaptor,"rule subQueryExpr");
        try {
            {
            pushFollow(FOLLOW_subQueryExpr_in_inSubSelectQuery7860);
            subQueryExpr456=subQueryExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_subQueryExpr.add(subQueryExpr456.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IN_SUBSELECT_QUERY_EXPR, "IN_SUBSELECT_QUERY_EXPR"), root_1);
                adaptor.addChild(root_1, stream_subQueryExpr.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class concatenationExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr() throws RecognitionException {
        EsperEPL2GrammarParser.concatenationExpr_return retval = new EsperEPL2GrammarParser.concatenationExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token c=null;
        Token LOR459=null;
        EsperEPL2GrammarParser.additiveExpression_return additiveExpression457 = null;
        EsperEPL2GrammarParser.additiveExpression_return additiveExpression458 = null;
        EsperEPL2GrammarParser.additiveExpression_return additiveExpression460 = null;
        CommonTree c_tree=null;
        CommonTree LOR459_tree=null;
        RewriteRuleTokenStream stream_LOR=new RewriteRuleTokenStream(adaptor,"token LOR");
        RewriteRuleSubtreeStream stream_additiveExpression=new RewriteRuleSubtreeStream(adaptor,"rule additiveExpression");
        try {
            {
            pushFollow(FOLLOW_additiveExpression_in_concatenationExpr7885);
            additiveExpression457=additiveExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_additiveExpression.add(additiveExpression457.getTree());
            int alt188=2;
            int LA188_0 = input.LA(1);
            if ( (LA188_0==LOR) ) {
                alt188=1;
            }
            switch (alt188) {
                case 1 :
                    {
                    c=(Token)match(input,LOR,FOLLOW_LOR_in_concatenationExpr7891); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LOR.add(c);
                    pushFollow(FOLLOW_additiveExpression_in_concatenationExpr7893);
                    additiveExpression458=additiveExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_additiveExpression.add(additiveExpression458.getTree());
                    loop187:
                    do {
                        int alt187=2;
                        int LA187_0 = input.LA(1);
                        if ( (LA187_0==LOR) ) {
                            alt187=1;
                        }
                        switch (alt187) {
                    	case 1 :
                    	    {
                    	    LOR459=(Token)match(input,LOR,FOLLOW_LOR_in_concatenationExpr7897); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_LOR.add(LOR459);
                    	    pushFollow(FOLLOW_additiveExpression_in_concatenationExpr7899);
                    	    additiveExpression460=additiveExpression();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_additiveExpression.add(additiveExpression460.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop187;
                        }
                    } while (true);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (c != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CONCAT, "CONCAT"), root_1);
                if ( !(stream_additiveExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_additiveExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_additiveExpression.nextTree());
                }
                stream_additiveExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_additiveExpression.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class additiveExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.additiveExpression_return additiveExpression() throws RecognitionException {
        EsperEPL2GrammarParser.additiveExpression_return retval = new EsperEPL2GrammarParser.additiveExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token PLUS462=null;
        Token MINUS463=null;
        EsperEPL2GrammarParser.multiplyExpression_return multiplyExpression461 = null;
        EsperEPL2GrammarParser.multiplyExpression_return multiplyExpression464 = null;
        CommonTree PLUS462_tree=null;
        CommonTree MINUS463_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_multiplyExpression_in_additiveExpression7940);
            multiplyExpression461=multiplyExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, multiplyExpression461.getTree());
            loop190:
            do {
                int alt190=2;
                int LA190_0 = input.LA(1);
                if ( (LA190_0==PLUS||LA190_0==MINUS) ) {
                    alt190=1;
                }
                switch (alt190) {
            	case 1 :
            	    {
            	    int alt189=2;
            	    int LA189_0 = input.LA(1);
            	    if ( (LA189_0==PLUS) ) {
            	        alt189=1;
            	    }
            	    else if ( (LA189_0==MINUS) ) {
            	        alt189=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 189, 0, input);
            	        throw nvae;
            	    }
            	    switch (alt189) {
            	        case 1 :
            	            {
            	            PLUS462=(Token)match(input,PLUS,FOLLOW_PLUS_in_additiveExpression7945); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            PLUS462_tree = (CommonTree)adaptor.create(PLUS462);
            	            root_0 = (CommonTree)adaptor.becomeRoot(PLUS462_tree, root_0);
            	            }
            	            }
            	            break;
            	        case 2 :
            	            {
            	            MINUS463=(Token)match(input,MINUS,FOLLOW_MINUS_in_additiveExpression7948); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            MINUS463_tree = (CommonTree)adaptor.create(MINUS463);
            	            root_0 = (CommonTree)adaptor.becomeRoot(MINUS463_tree, root_0);
            	            }
            	            }
            	            break;
            	    }
            	    pushFollow(FOLLOW_multiplyExpression_in_additiveExpression7952);
            	    multiplyExpression464=multiplyExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, multiplyExpression464.getTree());
            	    }
            	    break;
            	default :
            	    break loop190;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class multiplyExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.multiplyExpression_return multiplyExpression() throws RecognitionException {
        EsperEPL2GrammarParser.multiplyExpression_return retval = new EsperEPL2GrammarParser.multiplyExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token STAR466=null;
        Token DIV467=null;
        Token MOD468=null;
        EsperEPL2GrammarParser.unaryExpression_return unaryExpression465 = null;
        EsperEPL2GrammarParser.unaryExpression_return unaryExpression469 = null;
        CommonTree STAR466_tree=null;
        CommonTree DIV467_tree=null;
        CommonTree MOD468_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_unaryExpression_in_multiplyExpression7966);
            unaryExpression465=unaryExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpression465.getTree());
            loop192:
            do {
                int alt192=2;
                int LA192_0 = input.LA(1);
                if ( (LA192_0==STAR||(LA192_0>=DIV && LA192_0<=MOD)) ) {
                    alt192=1;
                }
                switch (alt192) {
            	case 1 :
            	    {
            	    int alt191=3;
            	    switch ( input.LA(1) ) {
            	    case STAR:
            	        {
            	        alt191=1;
            	        }
            	        break;
            	    case DIV:
            	        {
            	        alt191=2;
            	        }
            	        break;
            	    case MOD:
            	        {
            	        alt191=3;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 191, 0, input);
            	        throw nvae;
            	    }
            	    switch (alt191) {
            	        case 1 :
            	            {
            	            STAR466=(Token)match(input,STAR,FOLLOW_STAR_in_multiplyExpression7971); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            STAR466_tree = (CommonTree)adaptor.create(STAR466);
            	            root_0 = (CommonTree)adaptor.becomeRoot(STAR466_tree, root_0);
            	            }
            	            }
            	            break;
            	        case 2 :
            	            {
            	            DIV467=(Token)match(input,DIV,FOLLOW_DIV_in_multiplyExpression7974); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            DIV467_tree = (CommonTree)adaptor.create(DIV467);
            	            root_0 = (CommonTree)adaptor.becomeRoot(DIV467_tree, root_0);
            	            }
            	            }
            	            break;
            	        case 3 :
            	            {
            	            MOD468=(Token)match(input,MOD,FOLLOW_MOD_in_multiplyExpression7977); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            MOD468_tree = (CommonTree)adaptor.create(MOD468);
            	            root_0 = (CommonTree)adaptor.becomeRoot(MOD468_tree, root_0);
            	            }
            	            }
            	            break;
            	    }
            	    pushFollow(FOLLOW_unaryExpression_in_multiplyExpression7981);
            	    unaryExpression469=unaryExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpression469.getTree());
            	    }
            	    break;
            	default :
            	    break loop192;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class unaryExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.unaryExpression_return unaryExpression() throws RecognitionException {
        EsperEPL2GrammarParser.unaryExpression_return retval = new EsperEPL2GrammarParser.unaryExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token d=null;
        Token MINUS470=null;
        Token LPAREN474=null;
        Token RPAREN476=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty471 = null;
        EsperEPL2GrammarParser.constant_return constant472 = null;
        EsperEPL2GrammarParser.substitution_return substitution473 = null;
        EsperEPL2GrammarParser.expression_return expression475 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass477 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass478 = null;
        EsperEPL2GrammarParser.eventPropertyOrLibFunction_return eventPropertyOrLibFunction479 = null;
        EsperEPL2GrammarParser.builtinFunc_return builtinFunc480 = null;
        EsperEPL2GrammarParser.arrayExpression_return arrayExpression481 = null;
        EsperEPL2GrammarParser.subSelectExpression_return subSelectExpression482 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass483 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass484 = null;
        EsperEPL2GrammarParser.existsSubSelectExpression_return existsSubSelectExpression485 = null;
        CommonTree d_tree=null;
        CommonTree MINUS470_tree=null;
        CommonTree LPAREN474_tree=null;
        CommonTree RPAREN476_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_subSelectExpression=new RewriteRuleSubtreeStream(adaptor,"rule subSelectExpression");
        RewriteRuleSubtreeStream stream_libFunctionNoClass=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionNoClass");
        RewriteRuleSubtreeStream stream_eventProperty=new RewriteRuleSubtreeStream(adaptor,"rule eventProperty");
        try {
            int alt197=9;
            alt197 = dfa197.predict(input);
            switch (alt197) {
                case 1 :
                    {
                    MINUS470=(Token)match(input,MINUS,FOLLOW_MINUS_in_unaryExpression7996); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MINUS.add(MINUS470);
                    pushFollow(FOLLOW_eventProperty_in_unaryExpression7998);
                    eventProperty471=eventProperty();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_eventProperty.add(eventProperty471.getTree());
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(UNARY_MINUS, "UNARY_MINUS"), root_1);
                        adaptor.addChild(root_1, stream_eventProperty.nextTree());
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_constant_in_unaryExpression8011);
                    constant472=constant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constant472.getTree());
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_substitution_in_unaryExpression8016);
                    substitution473=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, substitution473.getTree());
                    }
                    break;
                case 4 :
                    {
                    LPAREN474=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_unaryExpression8021); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN474);
                    pushFollow(FOLLOW_expression_in_unaryExpression8023);
                    expression475=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression475.getTree());
                    RPAREN476=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_unaryExpression8025); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN476);
                    int alt194=2;
                    int LA194_0 = input.LA(1);
                    if ( (LA194_0==DOT) ) {
                        alt194=1;
                    }
                    switch (alt194) {
                        case 1 :
                            {
                            d=(Token)match(input,DOT,FOLLOW_DOT_in_unaryExpression8030); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DOT.add(d);
                            pushFollow(FOLLOW_libFunctionNoClass_in_unaryExpression8032);
                            libFunctionNoClass477=libFunctionNoClass();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass477.getTree());
                            loop193:
                            do {
                                int alt193=2;
                                int LA193_0 = input.LA(1);
                                if ( (LA193_0==DOT) ) {
                                    alt193=1;
                                }
                                switch (alt193) {
                            	case 1 :
                            	    {
                            	    d=(Token)match(input,DOT,FOLLOW_DOT_in_unaryExpression8037); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_DOT.add(d);
                            	    pushFollow(FOLLOW_libFunctionNoClass_in_unaryExpression8039);
                            	    libFunctionNoClass478=libFunctionNoClass();
                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass478.getTree());
                            	    }
                            	    break;
                            	default :
                            	    break loop193;
                                }
                            } while (true);
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    if (d != null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DOT_EXPR, "DOT_EXPR"), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        if ( !(stream_libFunctionNoClass.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_libFunctionNoClass.hasNext() ) {
                            adaptor.addChild(root_1, stream_libFunctionNoClass.nextTree());
                        }
                        stream_libFunctionNoClass.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    {
                        adaptor.addChild(root_0, stream_expression.nextTree());
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_eventPropertyOrLibFunction_in_unaryExpression8076);
                    eventPropertyOrLibFunction479=eventPropertyOrLibFunction();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, eventPropertyOrLibFunction479.getTree());
                    }
                    break;
                case 6 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    {
                    pushFollow(FOLLOW_builtinFunc_in_unaryExpression8088);
                    builtinFunc480=builtinFunc();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, builtinFunc480.getTree());
                    }
                    }
                    break;
                case 7 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_arrayExpression_in_unaryExpression8094);
                    arrayExpression481=arrayExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arrayExpression481.getTree());
                    }
                    break;
                case 8 :
                    {
                    pushFollow(FOLLOW_subSelectExpression_in_unaryExpression8099);
                    subSelectExpression482=subSelectExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_subSelectExpression.add(subSelectExpression482.getTree());
                    int alt196=2;
                    int LA196_0 = input.LA(1);
                    if ( (LA196_0==DOT) ) {
                        alt196=1;
                    }
                    switch (alt196) {
                        case 1 :
                            {
                            d=(Token)match(input,DOT,FOLLOW_DOT_in_unaryExpression8104); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DOT.add(d);
                            pushFollow(FOLLOW_libFunctionNoClass_in_unaryExpression8106);
                            libFunctionNoClass483=libFunctionNoClass();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass483.getTree());
                            loop195:
                            do {
                                int alt195=2;
                                int LA195_0 = input.LA(1);
                                if ( (LA195_0==DOT) ) {
                                    alt195=1;
                                }
                                switch (alt195) {
                            	case 1 :
                            	    {
                            	    d=(Token)match(input,DOT,FOLLOW_DOT_in_unaryExpression8111); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_DOT.add(d);
                            	    pushFollow(FOLLOW_libFunctionNoClass_in_unaryExpression8113);
                            	    libFunctionNoClass484=libFunctionNoClass();
                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass484.getTree());
                            	    }
                            	    break;
                            	default :
                            	    break loop195;
                                }
                            } while (true);
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    if (d != null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DOT_EXPR, "DOT_EXPR"), root_1);
                        adaptor.addChild(root_1, stream_subSelectExpression.nextTree());
                        if ( !(stream_libFunctionNoClass.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_libFunctionNoClass.hasNext() ) {
                            adaptor.addChild(root_1, stream_libFunctionNoClass.nextTree());
                        }
                        stream_libFunctionNoClass.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    {
                        adaptor.addChild(root_0, stream_subSelectExpression.nextTree());
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 9 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_existsSubSelectExpression_in_unaryExpression8150);
                    existsSubSelectExpression485=existsSubSelectExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, existsSubSelectExpression485.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class subSelectExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.subSelectExpression_return subSelectExpression() throws RecognitionException {
        EsperEPL2GrammarParser.subSelectExpression_return retval = new EsperEPL2GrammarParser.subSelectExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr486 = null;
        RewriteRuleSubtreeStream stream_subQueryExpr=new RewriteRuleSubtreeStream(adaptor,"rule subQueryExpr");
        try {
            {
            pushFollow(FOLLOW_subQueryExpr_in_subSelectExpression8167);
            subQueryExpr486=subQueryExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_subQueryExpr.add(subQueryExpr486.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SUBSELECT_EXPR, "SUBSELECT_EXPR"), root_1);
                adaptor.addChild(root_1, stream_subQueryExpr.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class subSelectGroupExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.subSelectGroupExpression_return subSelectGroupExpression() throws RecognitionException {
        EsperEPL2GrammarParser.subSelectGroupExpression_return retval = new EsperEPL2GrammarParser.subSelectGroupExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr487 = null;
        RewriteRuleSubtreeStream stream_subQueryExpr=new RewriteRuleSubtreeStream(adaptor,"rule subQueryExpr");
        try {
            {
            pushFollow(FOLLOW_subQueryExpr_in_subSelectGroupExpression8189);
            subQueryExpr487=subQueryExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_subQueryExpr.add(subQueryExpr487.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SUBSELECT_GROUP_EXPR, "SUBSELECT_GROUP_EXPR"), root_1);
                adaptor.addChild(root_1, stream_subQueryExpr.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class existsSubSelectExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.existsSubSelectExpression_return existsSubSelectExpression() throws RecognitionException {
        EsperEPL2GrammarParser.existsSubSelectExpression_return retval = new EsperEPL2GrammarParser.existsSubSelectExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token EXISTS488=null;
        EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr489 = null;
        CommonTree EXISTS488_tree=null;
        RewriteRuleTokenStream stream_EXISTS=new RewriteRuleTokenStream(adaptor,"token EXISTS");
        RewriteRuleSubtreeStream stream_subQueryExpr=new RewriteRuleSubtreeStream(adaptor,"rule subQueryExpr");
        try {
            {
            EXISTS488=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_existsSubSelectExpression8211); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EXISTS.add(EXISTS488);
            pushFollow(FOLLOW_subQueryExpr_in_existsSubSelectExpression8213);
            subQueryExpr489=subQueryExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_subQueryExpr.add(subQueryExpr489.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EXISTS_SUBSELECT_EXPR, "EXISTS_SUBSELECT_EXPR"), root_1);
                adaptor.addChild(root_1, stream_subQueryExpr.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class subQueryExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr() throws RecognitionException {
        EsperEPL2GrammarParser.subQueryExpr_return retval = new EsperEPL2GrammarParser.subQueryExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LPAREN490=null;
        Token SELECT491=null;
        Token DISTINCT492=null;
        Token FROM494=null;
        Token WHERE496=null;
        Token RPAREN498=null;
        EsperEPL2GrammarParser.selectionList_return selectionList493 = null;
        EsperEPL2GrammarParser.subSelectFilterExpr_return subSelectFilterExpr495 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause497 = null;
        CommonTree LPAREN490_tree=null;
        CommonTree SELECT491_tree=null;
        CommonTree DISTINCT492_tree=null;
        CommonTree FROM494_tree=null;
        CommonTree WHERE496_tree=null;
        CommonTree RPAREN498_tree=null;
         paraphrases.push("subquery"); 
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            LPAREN490=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_subQueryExpr8246); if (state.failed) return retval;
            SELECT491=(Token)match(input,SELECT,FOLLOW_SELECT_in_subQueryExpr8252); if (state.failed) return retval;
            int alt198=2;
            int LA198_0 = input.LA(1);
            if ( (LA198_0==DISTINCT) ) {
                alt198=1;
            }
            switch (alt198) {
                case 1 :
                    {
                    DISTINCT492=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_subQueryExpr8255); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DISTINCT492_tree = (CommonTree)adaptor.create(DISTINCT492);
                    adaptor.addChild(root_0, DISTINCT492_tree);
                    }
                    }
                    break;
            }
            pushFollow(FOLLOW_selectionList_in_subQueryExpr8258);
            selectionList493=selectionList();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, selectionList493.getTree());
            FROM494=(Token)match(input,FROM,FOLLOW_FROM_in_subQueryExpr8265); if (state.failed) return retval;
            pushFollow(FOLLOW_subSelectFilterExpr_in_subQueryExpr8268);
            subSelectFilterExpr495=subSelectFilterExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, subSelectFilterExpr495.getTree());
            int alt199=2;
            int LA199_0 = input.LA(1);
            if ( (LA199_0==WHERE) ) {
                alt199=1;
            }
            switch (alt199) {
                case 1 :
                    {
                    WHERE496=(Token)match(input,WHERE,FOLLOW_WHERE_in_subQueryExpr8276); if (state.failed) return retval;
                    pushFollow(FOLLOW_whereClause_in_subQueryExpr8279);
                    whereClause497=whereClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, whereClause497.getTree());
                    }
                    break;
            }
            RPAREN498=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_subQueryExpr8288); if (state.failed) return retval;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class subSelectFilterExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.subSelectFilterExpr_return subSelectFilterExpr() throws RecognitionException {
        EsperEPL2GrammarParser.subSelectFilterExpr_return retval = new EsperEPL2GrammarParser.subSelectFilterExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token ru=null;
        Token ri=null;
        Token DOT500=null;
        Token DOT502=null;
        Token AS504=null;
        EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression499 = null;
        EsperEPL2GrammarParser.viewExpression_return viewExpression501 = null;
        EsperEPL2GrammarParser.viewExpression_return viewExpression503 = null;
        CommonTree i_tree=null;
        CommonTree ru_tree=null;
        CommonTree ri_tree=null;
        CommonTree DOT500_tree=null;
        CommonTree DOT502_tree=null;
        CommonTree AS504_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RETAINUNION=new RewriteRuleTokenStream(adaptor,"token RETAINUNION");
        RewriteRuleTokenStream stream_RETAININTERSECTION=new RewriteRuleTokenStream(adaptor,"token RETAININTERSECTION");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_viewExpression=new RewriteRuleSubtreeStream(adaptor,"rule viewExpression");
        RewriteRuleSubtreeStream stream_eventFilterExpression=new RewriteRuleSubtreeStream(adaptor,"rule eventFilterExpression");
         paraphrases.push("subquery filter specification"); 
        try {
            {
            pushFollow(FOLLOW_eventFilterExpression_in_subSelectFilterExpr8312);
            eventFilterExpression499=eventFilterExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventFilterExpression.add(eventFilterExpression499.getTree());
            int alt201=2;
            int LA201_0 = input.LA(1);
            if ( (LA201_0==DOT) ) {
                alt201=1;
            }
            switch (alt201) {
                case 1 :
                    {
                    DOT500=(Token)match(input,DOT,FOLLOW_DOT_in_subSelectFilterExpr8317); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT500);
                    pushFollow(FOLLOW_viewExpression_in_subSelectFilterExpr8319);
                    viewExpression501=viewExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression501.getTree());
                    loop200:
                    do {
                        int alt200=2;
                        int LA200_0 = input.LA(1);
                        if ( (LA200_0==DOT) ) {
                            alt200=1;
                        }
                        switch (alt200) {
                    	case 1 :
                    	    {
                    	    DOT502=(Token)match(input,DOT,FOLLOW_DOT_in_subSelectFilterExpr8322); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_DOT.add(DOT502);
                    	    pushFollow(FOLLOW_viewExpression_in_subSelectFilterExpr8324);
                    	    viewExpression503=viewExpression();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression503.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop200;
                        }
                    } while (true);
                    }
                    break;
            }
            int alt202=3;
            int LA202_0 = input.LA(1);
            if ( (LA202_0==AS) ) {
                alt202=1;
            }
            else if ( (LA202_0==IDENT) ) {
                alt202=2;
            }
            switch (alt202) {
                case 1 :
                    {
                    AS504=(Token)match(input,AS,FOLLOW_AS_in_subSelectFilterExpr8331); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS504);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_subSelectFilterExpr8335); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_subSelectFilterExpr8341); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            int alt203=3;
            int LA203_0 = input.LA(1);
            if ( (LA203_0==RETAINUNION) ) {
                alt203=1;
            }
            else if ( (LA203_0==RETAININTERSECTION) ) {
                alt203=2;
            }
            switch (alt203) {
                case 1 :
                    {
                    ru=(Token)match(input,RETAINUNION,FOLLOW_RETAINUNION_in_subSelectFilterExpr8348); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAINUNION.add(ru);
                    }
                    break;
                case 2 :
                    {
                    ri=(Token)match(input,RETAININTERSECTION,FOLLOW_RETAININTERSECTION_in_subSelectFilterExpr8352); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAININTERSECTION.add(ri);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_ri=new RewriteRuleTokenStream(adaptor,"token ri",ri);
            RewriteRuleTokenStream stream_ru=new RewriteRuleTokenStream(adaptor,"token ru",ru);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STREAM_EXPR, "STREAM_EXPR"), root_1);
                adaptor.addChild(root_1, stream_eventFilterExpression.nextTree());
                while ( stream_viewExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_viewExpression.nextTree());
                }
                stream_viewExpression.reset();
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                if ( stream_ru.hasNext() ) {
                    adaptor.addChild(root_1, stream_ru.nextNode());
                }
                stream_ru.reset();
                if ( stream_ri.hasNext() ) {
                    adaptor.addChild(root_1, stream_ri.nextNode());
                }
                stream_ri.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class arrayExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.arrayExpression_return arrayExpression() throws RecognitionException {
        EsperEPL2GrammarParser.arrayExpression_return retval = new EsperEPL2GrammarParser.arrayExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LCURLY505=null;
        Token COMMA507=null;
        Token RCURLY509=null;
        EsperEPL2GrammarParser.expression_return expression506 = null;
        EsperEPL2GrammarParser.expression_return expression508 = null;
        CommonTree LCURLY505_tree=null;
        CommonTree COMMA507_tree=null;
        CommonTree RCURLY509_tree=null;
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            {
            LCURLY505=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_arrayExpression8392); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCURLY.add(LCURLY505);
            int alt205=2;
            int LA205_0 = input.LA(1);
            if ( (LA205_0==WINDOW||LA205_0==ESCAPE||(LA205_0>=NOT_EXPR && LA205_0<=EVERY_EXPR)||LA205_0==WHERE||(LA205_0>=SUM && LA205_0<=COUNT)||LA205_0==CASE||LA205_0==OUTER||(LA205_0>=JOIN && LA205_0<=FULL)||(LA205_0>=EVENTS && LA205_0<=LAST)||(LA205_0>=UNIDIRECTIONAL && LA205_0<=CURRENT_TIMESTAMP)||LA205_0==SNAPSHOT||(LA205_0>=VARIABLE && LA205_0<=INDEX)||(LA205_0>=BOOLEAN_TRUE && LA205_0<=VALUE_NULL)||(LA205_0>=DEFINE && LA205_0<=MATCHES)||LA205_0==WHILE||(LA205_0>=MERGE && LA205_0<=MATCHED)||LA205_0==NUM_DOUBLE||(LA205_0>=IDENT && LA205_0<=LCURLY)||LA205_0==LPAREN||(LA205_0>=PLUS && LA205_0<=QUESTION)||(LA205_0>=STRING_LITERAL && LA205_0<=QUOTED_STRING_LITERAL)||LA205_0==MINUS||LA205_0==NUM_INT||(LA205_0>=TICKED_STRING_LITERAL && LA205_0<=NUM_FLOAT)) ) {
                alt205=1;
            }
            switch (alt205) {
                case 1 :
                    {
                    pushFollow(FOLLOW_expression_in_arrayExpression8395);
                    expression506=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression506.getTree());
                    loop204:
                    do {
                        int alt204=2;
                        int LA204_0 = input.LA(1);
                        if ( (LA204_0==COMMA) ) {
                            alt204=1;
                        }
                        switch (alt204) {
                    	case 1 :
                    	    {
                    	    COMMA507=(Token)match(input,COMMA,FOLLOW_COMMA_in_arrayExpression8398); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA507);
                    	    pushFollow(FOLLOW_expression_in_arrayExpression8400);
                    	    expression508=expression();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_expression.add(expression508.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop204;
                        }
                    } while (true);
                    }
                    break;
            }
            RCURLY509=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_arrayExpression8407); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCURLY.add(RCURLY509);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ARRAY_EXPR, "ARRAY_EXPR"), root_1);
                while ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class builtinFunc_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.builtinFunc_return builtinFunc() throws RecognitionException {
        EsperEPL2GrammarParser.builtinFunc_return retval = new EsperEPL2GrammarParser.builtinFunc_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token d=null;
        Token SUM510=null;
        Token LPAREN511=null;
        Token ALL512=null;
        Token DISTINCT513=null;
        Token RPAREN515=null;
        Token AVG516=null;
        Token LPAREN517=null;
        Token ALL518=null;
        Token DISTINCT519=null;
        Token RPAREN521=null;
        Token COUNT522=null;
        Token LPAREN523=null;
        Token ALL524=null;
        Token DISTINCT525=null;
        Token STAR527=null;
        Token RPAREN528=null;
        Token MEDIAN529=null;
        Token LPAREN530=null;
        Token ALL531=null;
        Token DISTINCT532=null;
        Token RPAREN534=null;
        Token STDDEV535=null;
        Token LPAREN536=null;
        Token ALL537=null;
        Token DISTINCT538=null;
        Token RPAREN540=null;
        Token AVEDEV541=null;
        Token LPAREN542=null;
        Token ALL543=null;
        Token DISTINCT544=null;
        Token RPAREN546=null;
        Token COALESCE550=null;
        Token LPAREN551=null;
        Token COMMA553=null;
        Token COMMA555=null;
        Token RPAREN557=null;
        Token PREVIOUS558=null;
        Token LPAREN559=null;
        Token COMMA561=null;
        Token RPAREN563=null;
        Token PREVIOUSTAIL566=null;
        Token LPAREN567=null;
        Token COMMA569=null;
        Token RPAREN571=null;
        Token PREVIOUSCOUNT574=null;
        Token LPAREN575=null;
        Token RPAREN577=null;
        Token PREVIOUSWINDOW578=null;
        Token LPAREN579=null;
        Token RPAREN581=null;
        Token PRIOR584=null;
        Token LPAREN585=null;
        Token NUM_INT586=null;
        Token COMMA587=null;
        Token RPAREN589=null;
        Token INSTANCEOF590=null;
        Token LPAREN591=null;
        Token COMMA593=null;
        Token COMMA595=null;
        Token RPAREN597=null;
        Token TYPEOF598=null;
        Token LPAREN599=null;
        Token RPAREN601=null;
        Token CAST602=null;
        Token LPAREN603=null;
        Token COMMA605=null;
        Token AS606=null;
        Token RPAREN608=null;
        Token EXISTS609=null;
        Token LPAREN610=null;
        Token RPAREN612=null;
        Token CURRENT_TIMESTAMP613=null;
        Token LPAREN614=null;
        Token RPAREN615=null;
        EsperEPL2GrammarParser.expression_return expression514 = null;
        EsperEPL2GrammarParser.expression_return expression520 = null;
        EsperEPL2GrammarParser.expression_return expression526 = null;
        EsperEPL2GrammarParser.expression_return expression533 = null;
        EsperEPL2GrammarParser.expression_return expression539 = null;
        EsperEPL2GrammarParser.expression_return expression545 = null;
        EsperEPL2GrammarParser.firstAggregation_return firstAggregation547 = null;
        EsperEPL2GrammarParser.lastAggregation_return lastAggregation548 = null;
        EsperEPL2GrammarParser.windowAggregation_return windowAggregation549 = null;
        EsperEPL2GrammarParser.expression_return expression552 = null;
        EsperEPL2GrammarParser.expression_return expression554 = null;
        EsperEPL2GrammarParser.expression_return expression556 = null;
        EsperEPL2GrammarParser.expression_return expression560 = null;
        EsperEPL2GrammarParser.expression_return expression562 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass564 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass565 = null;
        EsperEPL2GrammarParser.expression_return expression568 = null;
        EsperEPL2GrammarParser.expression_return expression570 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass572 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass573 = null;
        EsperEPL2GrammarParser.expression_return expression576 = null;
        EsperEPL2GrammarParser.expression_return expression580 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass582 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass583 = null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty588 = null;
        EsperEPL2GrammarParser.expression_return expression592 = null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier594 = null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier596 = null;
        EsperEPL2GrammarParser.expression_return expression600 = null;
        EsperEPL2GrammarParser.expression_return expression604 = null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier607 = null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty611 = null;
        CommonTree d_tree=null;
        CommonTree SUM510_tree=null;
        CommonTree LPAREN511_tree=null;
        CommonTree ALL512_tree=null;
        CommonTree DISTINCT513_tree=null;
        CommonTree RPAREN515_tree=null;
        CommonTree AVG516_tree=null;
        CommonTree LPAREN517_tree=null;
        CommonTree ALL518_tree=null;
        CommonTree DISTINCT519_tree=null;
        CommonTree RPAREN521_tree=null;
        CommonTree COUNT522_tree=null;
        CommonTree LPAREN523_tree=null;
        CommonTree ALL524_tree=null;
        CommonTree DISTINCT525_tree=null;
        CommonTree STAR527_tree=null;
        CommonTree RPAREN528_tree=null;
        CommonTree MEDIAN529_tree=null;
        CommonTree LPAREN530_tree=null;
        CommonTree ALL531_tree=null;
        CommonTree DISTINCT532_tree=null;
        CommonTree RPAREN534_tree=null;
        CommonTree STDDEV535_tree=null;
        CommonTree LPAREN536_tree=null;
        CommonTree ALL537_tree=null;
        CommonTree DISTINCT538_tree=null;
        CommonTree RPAREN540_tree=null;
        CommonTree AVEDEV541_tree=null;
        CommonTree LPAREN542_tree=null;
        CommonTree ALL543_tree=null;
        CommonTree DISTINCT544_tree=null;
        CommonTree RPAREN546_tree=null;
        CommonTree COALESCE550_tree=null;
        CommonTree LPAREN551_tree=null;
        CommonTree COMMA553_tree=null;
        CommonTree COMMA555_tree=null;
        CommonTree RPAREN557_tree=null;
        CommonTree PREVIOUS558_tree=null;
        CommonTree LPAREN559_tree=null;
        CommonTree COMMA561_tree=null;
        CommonTree RPAREN563_tree=null;
        CommonTree PREVIOUSTAIL566_tree=null;
        CommonTree LPAREN567_tree=null;
        CommonTree COMMA569_tree=null;
        CommonTree RPAREN571_tree=null;
        CommonTree PREVIOUSCOUNT574_tree=null;
        CommonTree LPAREN575_tree=null;
        CommonTree RPAREN577_tree=null;
        CommonTree PREVIOUSWINDOW578_tree=null;
        CommonTree LPAREN579_tree=null;
        CommonTree RPAREN581_tree=null;
        CommonTree PRIOR584_tree=null;
        CommonTree LPAREN585_tree=null;
        CommonTree NUM_INT586_tree=null;
        CommonTree COMMA587_tree=null;
        CommonTree RPAREN589_tree=null;
        CommonTree INSTANCEOF590_tree=null;
        CommonTree LPAREN591_tree=null;
        CommonTree COMMA593_tree=null;
        CommonTree COMMA595_tree=null;
        CommonTree RPAREN597_tree=null;
        CommonTree TYPEOF598_tree=null;
        CommonTree LPAREN599_tree=null;
        CommonTree RPAREN601_tree=null;
        CommonTree CAST602_tree=null;
        CommonTree LPAREN603_tree=null;
        CommonTree COMMA605_tree=null;
        CommonTree AS606_tree=null;
        CommonTree RPAREN608_tree=null;
        CommonTree EXISTS609_tree=null;
        CommonTree LPAREN610_tree=null;
        CommonTree RPAREN612_tree=null;
        CommonTree CURRENT_TIMESTAMP613_tree=null;
        CommonTree LPAREN614_tree=null;
        CommonTree RPAREN615_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_PREVIOUSTAIL=new RewriteRuleTokenStream(adaptor,"token PREVIOUSTAIL");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_PREVIOUS=new RewriteRuleTokenStream(adaptor,"token PREVIOUS");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_PREVIOUSWINDOW=new RewriteRuleTokenStream(adaptor,"token PREVIOUSWINDOW");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_libFunctionNoClass=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionNoClass");
        try {
            int alt225=20;
            switch ( input.LA(1) ) {
            case SUM:
                {
                alt225=1;
                }
                break;
            case AVG:
                {
                alt225=2;
                }
                break;
            case COUNT:
                {
                alt225=3;
                }
                break;
            case MEDIAN:
                {
                alt225=4;
                }
                break;
            case STDDEV:
                {
                alt225=5;
                }
                break;
            case AVEDEV:
                {
                alt225=6;
                }
                break;
            case FIRST:
                {
                alt225=7;
                }
                break;
            case LAST:
                {
                alt225=8;
                }
                break;
            case WINDOW:
                {
                alt225=9;
                }
                break;
            case COALESCE:
                {
                alt225=10;
                }
                break;
            case PREVIOUS:
                {
                alt225=11;
                }
                break;
            case PREVIOUSTAIL:
                {
                alt225=12;
                }
                break;
            case PREVIOUSCOUNT:
                {
                alt225=13;
                }
                break;
            case PREVIOUSWINDOW:
                {
                alt225=14;
                }
                break;
            case PRIOR:
                {
                alt225=15;
                }
                break;
            case INSTANCEOF:
                {
                alt225=16;
                }
                break;
            case TYPEOF:
                {
                alt225=17;
                }
                break;
            case CAST:
                {
                alt225=18;
                }
                break;
            case EXISTS:
                {
                alt225=19;
                }
                break;
            case CURRENT_TIMESTAMP:
                {
                alt225=20;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 225, 0, input);
                throw nvae;
            }
            switch (alt225) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    SUM510=(Token)match(input,SUM,FOLLOW_SUM_in_builtinFunc8430); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SUM510_tree = (CommonTree)adaptor.create(SUM510);
                    root_0 = (CommonTree)adaptor.becomeRoot(SUM510_tree, root_0);
                    }
                    LPAREN511=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc8433); if (state.failed) return retval;
                    int alt206=3;
                    int LA206_0 = input.LA(1);
                    if ( (LA206_0==ALL) ) {
                        alt206=1;
                    }
                    else if ( (LA206_0==DISTINCT) ) {
                        alt206=2;
                    }
                    switch (alt206) {
                        case 1 :
                            {
                            ALL512=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc8437); if (state.failed) return retval;
                            }
                            break;
                        case 2 :
                            {
                            DISTINCT513=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc8442); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT513_tree = (CommonTree)adaptor.create(DISTINCT513);
                            adaptor.addChild(root_0, DISTINCT513_tree);
                            }
                            }
                            break;
                    }
                    pushFollow(FOLLOW_expression_in_builtinFunc8446);
                    expression514=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression514.getTree());
                    RPAREN515=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc8448); if (state.failed) return retval;
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    AVG516=(Token)match(input,AVG,FOLLOW_AVG_in_builtinFunc8454); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AVG516_tree = (CommonTree)adaptor.create(AVG516);
                    root_0 = (CommonTree)adaptor.becomeRoot(AVG516_tree, root_0);
                    }
                    LPAREN517=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc8457); if (state.failed) return retval;
                    int alt207=3;
                    int LA207_0 = input.LA(1);
                    if ( (LA207_0==ALL) ) {
                        alt207=1;
                    }
                    else if ( (LA207_0==DISTINCT) ) {
                        alt207=2;
                    }
                    switch (alt207) {
                        case 1 :
                            {
                            ALL518=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc8461); if (state.failed) return retval;
                            }
                            break;
                        case 2 :
                            {
                            DISTINCT519=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc8466); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT519_tree = (CommonTree)adaptor.create(DISTINCT519);
                            adaptor.addChild(root_0, DISTINCT519_tree);
                            }
                            }
                            break;
                    }
                    pushFollow(FOLLOW_expression_in_builtinFunc8470);
                    expression520=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression520.getTree());
                    RPAREN521=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc8472); if (state.failed) return retval;
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    COUNT522=(Token)match(input,COUNT,FOLLOW_COUNT_in_builtinFunc8478); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COUNT522_tree = (CommonTree)adaptor.create(COUNT522);
                    root_0 = (CommonTree)adaptor.becomeRoot(COUNT522_tree, root_0);
                    }
                    LPAREN523=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc8481); if (state.failed) return retval;
                    int alt209=2;
                    int LA209_0 = input.LA(1);
                    if ( (LA209_0==WINDOW||LA209_0==ESCAPE||(LA209_0>=NOT_EXPR && LA209_0<=EVERY_EXPR)||LA209_0==WHERE||(LA209_0>=SUM && LA209_0<=COUNT)||LA209_0==CASE||LA209_0==OUTER||(LA209_0>=JOIN && LA209_0<=FULL)||(LA209_0>=DISTINCT && LA209_0<=ALL)||(LA209_0>=EVENTS && LA209_0<=LAST)||(LA209_0>=UNIDIRECTIONAL && LA209_0<=CURRENT_TIMESTAMP)||LA209_0==SNAPSHOT||(LA209_0>=VARIABLE && LA209_0<=INDEX)||(LA209_0>=BOOLEAN_TRUE && LA209_0<=VALUE_NULL)||(LA209_0>=DEFINE && LA209_0<=MATCHES)||LA209_0==WHILE||(LA209_0>=MERGE && LA209_0<=MATCHED)||LA209_0==NUM_DOUBLE||(LA209_0>=IDENT && LA209_0<=LCURLY)||LA209_0==LPAREN||(LA209_0>=PLUS && LA209_0<=QUESTION)||(LA209_0>=STRING_LITERAL && LA209_0<=QUOTED_STRING_LITERAL)||LA209_0==MINUS||LA209_0==NUM_INT||(LA209_0>=TICKED_STRING_LITERAL && LA209_0<=NUM_FLOAT)) ) {
                        alt209=1;
                    }
                    else if ( (LA209_0==STAR) ) {
                        alt209=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 209, 0, input);
                        throw nvae;
                    }
                    switch (alt209) {
                        case 1 :
                            {
                            {
                            int alt208=3;
                            int LA208_0 = input.LA(1);
                            if ( (LA208_0==ALL) ) {
                                alt208=1;
                            }
                            else if ( (LA208_0==DISTINCT) ) {
                                alt208=2;
                            }
                            switch (alt208) {
                                case 1 :
                                    {
                                    ALL524=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc8493); if (state.failed) return retval;
                                    }
                                    break;
                                case 2 :
                                    {
                                    DISTINCT525=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc8498); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                    DISTINCT525_tree = (CommonTree)adaptor.create(DISTINCT525);
                                    adaptor.addChild(root_0, DISTINCT525_tree);
                                    }
                                    }
                                    break;
                            }
                            pushFollow(FOLLOW_expression_in_builtinFunc8502);
                            expression526=expression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression526.getTree());
                            }
                            }
                            break;
                        case 2 :
                            {
                            {
                            STAR527=(Token)match(input,STAR,FOLLOW_STAR_in_builtinFunc8513); if (state.failed) return retval;
                            }
                            }
                            break;
                    }
                    RPAREN528=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc8524); if (state.failed) return retval;
                    }
                    break;
                case 4 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    MEDIAN529=(Token)match(input,MEDIAN,FOLLOW_MEDIAN_in_builtinFunc8530); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MEDIAN529_tree = (CommonTree)adaptor.create(MEDIAN529);
                    root_0 = (CommonTree)adaptor.becomeRoot(MEDIAN529_tree, root_0);
                    }
                    LPAREN530=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc8533); if (state.failed) return retval;
                    int alt210=3;
                    int LA210_0 = input.LA(1);
                    if ( (LA210_0==ALL) ) {
                        alt210=1;
                    }
                    else if ( (LA210_0==DISTINCT) ) {
                        alt210=2;
                    }
                    switch (alt210) {
                        case 1 :
                            {
                            ALL531=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc8537); if (state.failed) return retval;
                            }
                            break;
                        case 2 :
                            {
                            DISTINCT532=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc8542); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT532_tree = (CommonTree)adaptor.create(DISTINCT532);
                            adaptor.addChild(root_0, DISTINCT532_tree);
                            }
                            }
                            break;
                    }
                    pushFollow(FOLLOW_expression_in_builtinFunc8546);
                    expression533=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression533.getTree());
                    RPAREN534=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc8548); if (state.failed) return retval;
                    }
                    break;
                case 5 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    STDDEV535=(Token)match(input,STDDEV,FOLLOW_STDDEV_in_builtinFunc8554); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STDDEV535_tree = (CommonTree)adaptor.create(STDDEV535);
                    root_0 = (CommonTree)adaptor.becomeRoot(STDDEV535_tree, root_0);
                    }
                    LPAREN536=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc8557); if (state.failed) return retval;
                    int alt211=3;
                    int LA211_0 = input.LA(1);
                    if ( (LA211_0==ALL) ) {
                        alt211=1;
                    }
                    else if ( (LA211_0==DISTINCT) ) {
                        alt211=2;
                    }
                    switch (alt211) {
                        case 1 :
                            {
                            ALL537=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc8561); if (state.failed) return retval;
                            }
                            break;
                        case 2 :
                            {
                            DISTINCT538=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc8566); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT538_tree = (CommonTree)adaptor.create(DISTINCT538);
                            adaptor.addChild(root_0, DISTINCT538_tree);
                            }
                            }
                            break;
                    }
                    pushFollow(FOLLOW_expression_in_builtinFunc8570);
                    expression539=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression539.getTree());
                    RPAREN540=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc8572); if (state.failed) return retval;
                    }
                    break;
                case 6 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    AVEDEV541=(Token)match(input,AVEDEV,FOLLOW_AVEDEV_in_builtinFunc8578); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AVEDEV541_tree = (CommonTree)adaptor.create(AVEDEV541);
                    root_0 = (CommonTree)adaptor.becomeRoot(AVEDEV541_tree, root_0);
                    }
                    LPAREN542=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc8581); if (state.failed) return retval;
                    int alt212=3;
                    int LA212_0 = input.LA(1);
                    if ( (LA212_0==ALL) ) {
                        alt212=1;
                    }
                    else if ( (LA212_0==DISTINCT) ) {
                        alt212=2;
                    }
                    switch (alt212) {
                        case 1 :
                            {
                            ALL543=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc8585); if (state.failed) return retval;
                            }
                            break;
                        case 2 :
                            {
                            DISTINCT544=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc8590); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT544_tree = (CommonTree)adaptor.create(DISTINCT544);
                            adaptor.addChild(root_0, DISTINCT544_tree);
                            }
                            }
                            break;
                    }
                    pushFollow(FOLLOW_expression_in_builtinFunc8594);
                    expression545=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression545.getTree());
                    RPAREN546=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc8596); if (state.failed) return retval;
                    }
                    break;
                case 7 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_firstAggregation_in_builtinFunc8602);
                    firstAggregation547=firstAggregation();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, firstAggregation547.getTree());
                    }
                    break;
                case 8 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_lastAggregation_in_builtinFunc8607);
                    lastAggregation548=lastAggregation();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lastAggregation548.getTree());
                    }
                    break;
                case 9 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_windowAggregation_in_builtinFunc8612);
                    windowAggregation549=windowAggregation();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, windowAggregation549.getTree());
                    }
                    break;
                case 10 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    COALESCE550=(Token)match(input,COALESCE,FOLLOW_COALESCE_in_builtinFunc8617); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COALESCE550_tree = (CommonTree)adaptor.create(COALESCE550);
                    root_0 = (CommonTree)adaptor.becomeRoot(COALESCE550_tree, root_0);
                    }
                    LPAREN551=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc8620); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc8623);
                    expression552=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression552.getTree());
                    COMMA553=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc8625); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc8628);
                    expression554=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression554.getTree());
                    loop213:
                    do {
                        int alt213=2;
                        int LA213_0 = input.LA(1);
                        if ( (LA213_0==COMMA) ) {
                            alt213=1;
                        }
                        switch (alt213) {
                    	case 1 :
                    	    {
                    	    COMMA555=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc8631); if (state.failed) return retval;
                    	    pushFollow(FOLLOW_expression_in_builtinFunc8634);
                    	    expression556=expression();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression556.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop213;
                        }
                    } while (true);
                    RPAREN557=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc8638); if (state.failed) return retval;
                    }
                    break;
                case 11 :
                    {
                    PREVIOUS558=(Token)match(input,PREVIOUS,FOLLOW_PREVIOUS_in_builtinFunc8644); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PREVIOUS.add(PREVIOUS558);
                    LPAREN559=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc8646); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN559);
                    pushFollow(FOLLOW_expression_in_builtinFunc8648);
                    expression560=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression560.getTree());
                    int alt214=2;
                    int LA214_0 = input.LA(1);
                    if ( (LA214_0==COMMA) ) {
                        alt214=1;
                    }
                    switch (alt214) {
                        case 1 :
                            {
                            COMMA561=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc8651); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COMMA.add(COMMA561);
                            pushFollow(FOLLOW_expression_in_builtinFunc8653);
                            expression562=expression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(expression562.getTree());
                            }
                            break;
                    }
                    RPAREN563=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc8657); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN563);
                    int alt216=2;
                    int LA216_0 = input.LA(1);
                    if ( (LA216_0==DOT) ) {
                        alt216=1;
                    }
                    switch (alt216) {
                        case 1 :
                            {
                            d=(Token)match(input,DOT,FOLLOW_DOT_in_builtinFunc8662); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DOT.add(d);
                            pushFollow(FOLLOW_libFunctionNoClass_in_builtinFunc8664);
                            libFunctionNoClass564=libFunctionNoClass();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass564.getTree());
                            loop215:
                            do {
                                int alt215=2;
                                int LA215_0 = input.LA(1);
                                if ( (LA215_0==DOT) ) {
                                    alt215=1;
                                }
                                switch (alt215) {
                            	case 1 :
                            	    {
                            	    d=(Token)match(input,DOT,FOLLOW_DOT_in_builtinFunc8669); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_DOT.add(d);
                            	    pushFollow(FOLLOW_libFunctionNoClass_in_builtinFunc8671);
                            	    libFunctionNoClass565=libFunctionNoClass();
                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass565.getTree());
                            	    }
                            	    break;
                            	default :
                            	    break loop215;
                                }
                            } while (true);
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    if (d != null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DOT_EXPR, "DOT_EXPR"), root_1);
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot(stream_PREVIOUS.nextNode(), root_2);
                        if ( !(stream_expression.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_expression.hasNext() ) {
                            adaptor.addChild(root_2, stream_expression.nextTree());
                        }
                        stream_expression.reset();
                        adaptor.addChild(root_1, root_2);
                        }
                        if ( !(stream_libFunctionNoClass.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_libFunctionNoClass.hasNext() ) {
                            adaptor.addChild(root_1, stream_libFunctionNoClass.nextTree());
                        }
                        stream_libFunctionNoClass.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_PREVIOUS.nextNode(), root_1);
                        if ( !(stream_expression.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_expression.hasNext() ) {
                            adaptor.addChild(root_1, stream_expression.nextTree());
                        }
                        stream_expression.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 12 :
                    {
                    PREVIOUSTAIL566=(Token)match(input,PREVIOUSTAIL,FOLLOW_PREVIOUSTAIL_in_builtinFunc8718); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PREVIOUSTAIL.add(PREVIOUSTAIL566);
                    LPAREN567=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc8720); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN567);
                    pushFollow(FOLLOW_expression_in_builtinFunc8722);
                    expression568=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression568.getTree());
                    int alt217=2;
                    int LA217_0 = input.LA(1);
                    if ( (LA217_0==COMMA) ) {
                        alt217=1;
                    }
                    switch (alt217) {
                        case 1 :
                            {
                            COMMA569=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc8725); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COMMA.add(COMMA569);
                            pushFollow(FOLLOW_expression_in_builtinFunc8727);
                            expression570=expression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(expression570.getTree());
                            }
                            break;
                    }
                    RPAREN571=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc8731); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN571);
                    int alt219=2;
                    int LA219_0 = input.LA(1);
                    if ( (LA219_0==DOT) ) {
                        alt219=1;
                    }
                    switch (alt219) {
                        case 1 :
                            {
                            d=(Token)match(input,DOT,FOLLOW_DOT_in_builtinFunc8736); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DOT.add(d);
                            pushFollow(FOLLOW_libFunctionNoClass_in_builtinFunc8738);
                            libFunctionNoClass572=libFunctionNoClass();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass572.getTree());
                            loop218:
                            do {
                                int alt218=2;
                                int LA218_0 = input.LA(1);
                                if ( (LA218_0==DOT) ) {
                                    alt218=1;
                                }
                                switch (alt218) {
                            	case 1 :
                            	    {
                            	    d=(Token)match(input,DOT,FOLLOW_DOT_in_builtinFunc8743); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_DOT.add(d);
                            	    pushFollow(FOLLOW_libFunctionNoClass_in_builtinFunc8745);
                            	    libFunctionNoClass573=libFunctionNoClass();
                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass573.getTree());
                            	    }
                            	    break;
                            	default :
                            	    break loop218;
                                }
                            } while (true);
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    if (d != null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DOT_EXPR, "DOT_EXPR"), root_1);
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot(stream_PREVIOUSTAIL.nextNode(), root_2);
                        if ( !(stream_expression.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_expression.hasNext() ) {
                            adaptor.addChild(root_2, stream_expression.nextTree());
                        }
                        stream_expression.reset();
                        adaptor.addChild(root_1, root_2);
                        }
                        if ( !(stream_libFunctionNoClass.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_libFunctionNoClass.hasNext() ) {
                            adaptor.addChild(root_1, stream_libFunctionNoClass.nextTree());
                        }
                        stream_libFunctionNoClass.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_PREVIOUSTAIL.nextNode(), root_1);
                        if ( !(stream_expression.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_expression.hasNext() ) {
                            adaptor.addChild(root_1, stream_expression.nextTree());
                        }
                        stream_expression.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 13 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    PREVIOUSCOUNT574=(Token)match(input,PREVIOUSCOUNT,FOLLOW_PREVIOUSCOUNT_in_builtinFunc8792); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PREVIOUSCOUNT574_tree = (CommonTree)adaptor.create(PREVIOUSCOUNT574);
                    root_0 = (CommonTree)adaptor.becomeRoot(PREVIOUSCOUNT574_tree, root_0);
                    }
                    LPAREN575=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc8795); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc8798);
                    expression576=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression576.getTree());
                    RPAREN577=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc8800); if (state.failed) return retval;
                    }
                    break;
                case 14 :
                    {
                    PREVIOUSWINDOW578=(Token)match(input,PREVIOUSWINDOW,FOLLOW_PREVIOUSWINDOW_in_builtinFunc8806); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PREVIOUSWINDOW.add(PREVIOUSWINDOW578);
                    LPAREN579=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc8808); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN579);
                    pushFollow(FOLLOW_expression_in_builtinFunc8810);
                    expression580=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression580.getTree());
                    RPAREN581=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc8812); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN581);
                    int alt221=2;
                    int LA221_0 = input.LA(1);
                    if ( (LA221_0==DOT) ) {
                        alt221=1;
                    }
                    switch (alt221) {
                        case 1 :
                            {
                            d=(Token)match(input,DOT,FOLLOW_DOT_in_builtinFunc8817); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DOT.add(d);
                            pushFollow(FOLLOW_libFunctionNoClass_in_builtinFunc8819);
                            libFunctionNoClass582=libFunctionNoClass();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass582.getTree());
                            loop220:
                            do {
                                int alt220=2;
                                int LA220_0 = input.LA(1);
                                if ( (LA220_0==DOT) ) {
                                    alt220=1;
                                }
                                switch (alt220) {
                            	case 1 :
                            	    {
                            	    d=(Token)match(input,DOT,FOLLOW_DOT_in_builtinFunc8824); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_DOT.add(d);
                            	    pushFollow(FOLLOW_libFunctionNoClass_in_builtinFunc8826);
                            	    libFunctionNoClass583=libFunctionNoClass();
                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass583.getTree());
                            	    }
                            	    break;
                            	default :
                            	    break loop220;
                                }
                            } while (true);
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    if (d != null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DOT_EXPR, "DOT_EXPR"), root_1);
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot(stream_PREVIOUSWINDOW.nextNode(), root_2);
                        adaptor.addChild(root_2, stream_expression.nextTree());
                        adaptor.addChild(root_1, root_2);
                        }
                        if ( !(stream_libFunctionNoClass.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_libFunctionNoClass.hasNext() ) {
                            adaptor.addChild(root_1, stream_libFunctionNoClass.nextTree());
                        }
                        stream_libFunctionNoClass.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_PREVIOUSWINDOW.nextNode(), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 15 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    PRIOR584=(Token)match(input,PRIOR,FOLLOW_PRIOR_in_builtinFunc8871); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PRIOR584_tree = (CommonTree)adaptor.create(PRIOR584);
                    root_0 = (CommonTree)adaptor.becomeRoot(PRIOR584_tree, root_0);
                    }
                    LPAREN585=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc8874); if (state.failed) return retval;
                    NUM_INT586=(Token)match(input,NUM_INT,FOLLOW_NUM_INT_in_builtinFunc8877); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NUM_INT586_tree = (CommonTree)adaptor.create(NUM_INT586);
                    adaptor.addChild(root_0, NUM_INT586_tree);
                    }
                    COMMA587=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc8879); if (state.failed) return retval;
                    pushFollow(FOLLOW_eventProperty_in_builtinFunc8882);
                    eventProperty588=eventProperty();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty588.getTree());
                    RPAREN589=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc8884); if (state.failed) return retval;
                    }
                    break;
                case 16 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    INSTANCEOF590=(Token)match(input,INSTANCEOF,FOLLOW_INSTANCEOF_in_builtinFunc8894); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INSTANCEOF590_tree = (CommonTree)adaptor.create(INSTANCEOF590);
                    root_0 = (CommonTree)adaptor.becomeRoot(INSTANCEOF590_tree, root_0);
                    }
                    LPAREN591=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc8897); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc8900);
                    expression592=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression592.getTree());
                    COMMA593=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc8902); if (state.failed) return retval;
                    pushFollow(FOLLOW_classIdentifier_in_builtinFunc8905);
                    classIdentifier594=classIdentifier();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier594.getTree());
                    loop222:
                    do {
                        int alt222=2;
                        int LA222_0 = input.LA(1);
                        if ( (LA222_0==COMMA) ) {
                            alt222=1;
                        }
                        switch (alt222) {
                    	case 1 :
                    	    {
                    	    COMMA595=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc8908); if (state.failed) return retval;
                    	    pushFollow(FOLLOW_classIdentifier_in_builtinFunc8911);
                    	    classIdentifier596=classIdentifier();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier596.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop222;
                        }
                    } while (true);
                    RPAREN597=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc8915); if (state.failed) return retval;
                    }
                    break;
                case 17 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    TYPEOF598=(Token)match(input,TYPEOF,FOLLOW_TYPEOF_in_builtinFunc8921); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TYPEOF598_tree = (CommonTree)adaptor.create(TYPEOF598);
                    root_0 = (CommonTree)adaptor.becomeRoot(TYPEOF598_tree, root_0);
                    }
                    LPAREN599=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc8924); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc8927);
                    expression600=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression600.getTree());
                    RPAREN601=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc8929); if (state.failed) return retval;
                    }
                    break;
                case 18 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    CAST602=(Token)match(input,CAST,FOLLOW_CAST_in_builtinFunc8935); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CAST602_tree = (CommonTree)adaptor.create(CAST602);
                    root_0 = (CommonTree)adaptor.becomeRoot(CAST602_tree, root_0);
                    }
                    LPAREN603=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc8938); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc8941);
                    expression604=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression604.getTree());
                    int alt223=2;
                    int LA223_0 = input.LA(1);
                    if ( (LA223_0==COMMA) ) {
                        alt223=1;
                    }
                    else if ( (LA223_0==AS) ) {
                        alt223=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 223, 0, input);
                        throw nvae;
                    }
                    switch (alt223) {
                        case 1 :
                            {
                            COMMA605=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc8944); if (state.failed) return retval;
                            }
                            break;
                        case 2 :
                            {
                            AS606=(Token)match(input,AS,FOLLOW_AS_in_builtinFunc8949); if (state.failed) return retval;
                            }
                            break;
                    }
                    pushFollow(FOLLOW_classIdentifier_in_builtinFunc8953);
                    classIdentifier607=classIdentifier();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier607.getTree());
                    RPAREN608=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc8955); if (state.failed) return retval;
                    }
                    break;
                case 19 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    EXISTS609=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_builtinFunc8961); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EXISTS609_tree = (CommonTree)adaptor.create(EXISTS609);
                    root_0 = (CommonTree)adaptor.becomeRoot(EXISTS609_tree, root_0);
                    }
                    LPAREN610=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc8964); if (state.failed) return retval;
                    pushFollow(FOLLOW_eventProperty_in_builtinFunc8967);
                    eventProperty611=eventProperty();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty611.getTree());
                    RPAREN612=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc8969); if (state.failed) return retval;
                    }
                    break;
                case 20 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    CURRENT_TIMESTAMP613=(Token)match(input,CURRENT_TIMESTAMP,FOLLOW_CURRENT_TIMESTAMP_in_builtinFunc8975); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CURRENT_TIMESTAMP613_tree = (CommonTree)adaptor.create(CURRENT_TIMESTAMP613);
                    root_0 = (CommonTree)adaptor.becomeRoot(CURRENT_TIMESTAMP613_tree, root_0);
                    }
                    int alt224=2;
                    int LA224_0 = input.LA(1);
                    if ( (LA224_0==LPAREN) ) {
                        alt224=1;
                    }
                    switch (alt224) {
                        case 1 :
                            {
                            LPAREN614=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc8979); if (state.failed) return retval;
                            RPAREN615=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc8982); if (state.failed) return retval;
                            }
                            break;
                    }
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class firstAggregation_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.firstAggregation_return firstAggregation() throws RecognitionException {
        EsperEPL2GrammarParser.firstAggregation_return retval = new EsperEPL2GrammarParser.firstAggregation_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token d=null;
        Token FIRST616=null;
        Token LPAREN617=null;
        Token COMMA619=null;
        Token RPAREN621=null;
        EsperEPL2GrammarParser.accessAggExpr_return accessAggExpr618 = null;
        EsperEPL2GrammarParser.expression_return expression620 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass622 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass623 = null;
        CommonTree d_tree=null;
        CommonTree FIRST616_tree=null;
        CommonTree LPAREN617_tree=null;
        CommonTree COMMA619_tree=null;
        CommonTree RPAREN621_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_FIRST=new RewriteRuleTokenStream(adaptor,"token FIRST");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_accessAggExpr=new RewriteRuleSubtreeStream(adaptor,"rule accessAggExpr");
        RewriteRuleSubtreeStream stream_libFunctionNoClass=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionNoClass");
        try {
            {
            FIRST616=(Token)match(input,FIRST,FOLLOW_FIRST_in_firstAggregation8997); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_FIRST.add(FIRST616);
            LPAREN617=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_firstAggregation8999); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN617);
            pushFollow(FOLLOW_accessAggExpr_in_firstAggregation9001);
            accessAggExpr618=accessAggExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_accessAggExpr.add(accessAggExpr618.getTree());
            int alt226=2;
            int LA226_0 = input.LA(1);
            if ( (LA226_0==COMMA) ) {
                alt226=1;
            }
            switch (alt226) {
                case 1 :
                    {
                    COMMA619=(Token)match(input,COMMA,FOLLOW_COMMA_in_firstAggregation9004); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA619);
                    pushFollow(FOLLOW_expression_in_firstAggregation9006);
                    expression620=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression620.getTree());
                    }
                    break;
            }
            RPAREN621=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_firstAggregation9010); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN621);
            int alt228=2;
            int LA228_0 = input.LA(1);
            if ( (LA228_0==DOT) ) {
                alt228=1;
            }
            switch (alt228) {
                case 1 :
                    {
                    d=(Token)match(input,DOT,FOLLOW_DOT_in_firstAggregation9015); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(d);
                    pushFollow(FOLLOW_libFunctionNoClass_in_firstAggregation9017);
                    libFunctionNoClass622=libFunctionNoClass();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass622.getTree());
                    loop227:
                    do {
                        int alt227=2;
                        int LA227_0 = input.LA(1);
                        if ( (LA227_0==DOT) ) {
                            alt227=1;
                        }
                        switch (alt227) {
                    	case 1 :
                    	    {
                    	    d=(Token)match(input,DOT,FOLLOW_DOT_in_firstAggregation9022); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_DOT.add(d);
                    	    pushFollow(FOLLOW_libFunctionNoClass_in_firstAggregation9024);
                    	    libFunctionNoClass623=libFunctionNoClass();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass623.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop227;
                        }
                    } while (true);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (d != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DOT_EXPR, "DOT_EXPR"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FIRST_AGGREG, "FIRST_AGGREG"), root_2);
                adaptor.addChild(root_2, stream_accessAggExpr.nextTree());
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_2, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_1, root_2);
                }
                if ( !(stream_libFunctionNoClass.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_libFunctionNoClass.hasNext() ) {
                    adaptor.addChild(root_1, stream_libFunctionNoClass.nextTree());
                }
                stream_libFunctionNoClass.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FIRST_AGGREG, "FIRST_AGGREG"), root_1);
                adaptor.addChild(root_1, stream_accessAggExpr.nextTree());
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class lastAggregation_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.lastAggregation_return lastAggregation() throws RecognitionException {
        EsperEPL2GrammarParser.lastAggregation_return retval = new EsperEPL2GrammarParser.lastAggregation_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token d=null;
        Token LAST624=null;
        Token LPAREN625=null;
        Token COMMA627=null;
        Token RPAREN629=null;
        EsperEPL2GrammarParser.accessAggExpr_return accessAggExpr626 = null;
        EsperEPL2GrammarParser.expression_return expression628 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass630 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass631 = null;
        CommonTree d_tree=null;
        CommonTree LAST624_tree=null;
        CommonTree LPAREN625_tree=null;
        CommonTree COMMA627_tree=null;
        CommonTree RPAREN629_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LAST=new RewriteRuleTokenStream(adaptor,"token LAST");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_accessAggExpr=new RewriteRuleSubtreeStream(adaptor,"rule accessAggExpr");
        RewriteRuleSubtreeStream stream_libFunctionNoClass=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionNoClass");
        try {
            {
            LAST624=(Token)match(input,LAST,FOLLOW_LAST_in_lastAggregation9077); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LAST.add(LAST624);
            LPAREN625=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_lastAggregation9079); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN625);
            pushFollow(FOLLOW_accessAggExpr_in_lastAggregation9081);
            accessAggExpr626=accessAggExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_accessAggExpr.add(accessAggExpr626.getTree());
            int alt229=2;
            int LA229_0 = input.LA(1);
            if ( (LA229_0==COMMA) ) {
                alt229=1;
            }
            switch (alt229) {
                case 1 :
                    {
                    COMMA627=(Token)match(input,COMMA,FOLLOW_COMMA_in_lastAggregation9084); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA627);
                    pushFollow(FOLLOW_expression_in_lastAggregation9086);
                    expression628=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression628.getTree());
                    }
                    break;
            }
            RPAREN629=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_lastAggregation9090); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN629);
            int alt231=2;
            int LA231_0 = input.LA(1);
            if ( (LA231_0==DOT) ) {
                alt231=1;
            }
            switch (alt231) {
                case 1 :
                    {
                    d=(Token)match(input,DOT,FOLLOW_DOT_in_lastAggregation9095); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(d);
                    pushFollow(FOLLOW_libFunctionNoClass_in_lastAggregation9097);
                    libFunctionNoClass630=libFunctionNoClass();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass630.getTree());
                    loop230:
                    do {
                        int alt230=2;
                        int LA230_0 = input.LA(1);
                        if ( (LA230_0==DOT) ) {
                            alt230=1;
                        }
                        switch (alt230) {
                    	case 1 :
                    	    {
                    	    d=(Token)match(input,DOT,FOLLOW_DOT_in_lastAggregation9102); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_DOT.add(d);
                    	    pushFollow(FOLLOW_libFunctionNoClass_in_lastAggregation9104);
                    	    libFunctionNoClass631=libFunctionNoClass();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass631.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop230;
                        }
                    } while (true);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (d != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DOT_EXPR, "DOT_EXPR"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LAST_AGGREG, "LAST_AGGREG"), root_2);
                adaptor.addChild(root_2, stream_accessAggExpr.nextTree());
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_2, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_1, root_2);
                }
                if ( !(stream_libFunctionNoClass.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_libFunctionNoClass.hasNext() ) {
                    adaptor.addChild(root_1, stream_libFunctionNoClass.nextTree());
                }
                stream_libFunctionNoClass.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LAST_AGGREG, "LAST_AGGREG"), root_1);
                adaptor.addChild(root_1, stream_accessAggExpr.nextTree());
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class windowAggregation_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.windowAggregation_return windowAggregation() throws RecognitionException {
        EsperEPL2GrammarParser.windowAggregation_return retval = new EsperEPL2GrammarParser.windowAggregation_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token d=null;
        Token WINDOW632=null;
        Token LPAREN633=null;
        Token RPAREN635=null;
        EsperEPL2GrammarParser.accessAggExpr_return accessAggExpr634 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass636 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass637 = null;
        CommonTree d_tree=null;
        CommonTree WINDOW632_tree=null;
        CommonTree LPAREN633_tree=null;
        CommonTree RPAREN635_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_WINDOW=new RewriteRuleTokenStream(adaptor,"token WINDOW");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_accessAggExpr=new RewriteRuleSubtreeStream(adaptor,"rule accessAggExpr");
        RewriteRuleSubtreeStream stream_libFunctionNoClass=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionNoClass");
        try {
            {
            WINDOW632=(Token)match(input,WINDOW,FOLLOW_WINDOW_in_windowAggregation9158); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_WINDOW.add(WINDOW632);
            LPAREN633=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_windowAggregation9160); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN633);
            pushFollow(FOLLOW_accessAggExpr_in_windowAggregation9162);
            accessAggExpr634=accessAggExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_accessAggExpr.add(accessAggExpr634.getTree());
            RPAREN635=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_windowAggregation9164); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN635);
            int alt233=2;
            int LA233_0 = input.LA(1);
            if ( (LA233_0==DOT) ) {
                alt233=1;
            }
            switch (alt233) {
                case 1 :
                    {
                    d=(Token)match(input,DOT,FOLLOW_DOT_in_windowAggregation9169); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(d);
                    pushFollow(FOLLOW_libFunctionNoClass_in_windowAggregation9171);
                    libFunctionNoClass636=libFunctionNoClass();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass636.getTree());
                    loop232:
                    do {
                        int alt232=2;
                        int LA232_0 = input.LA(1);
                        if ( (LA232_0==DOT) ) {
                            alt232=1;
                        }
                        switch (alt232) {
                    	case 1 :
                    	    {
                    	    d=(Token)match(input,DOT,FOLLOW_DOT_in_windowAggregation9176); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_DOT.add(d);
                    	    pushFollow(FOLLOW_libFunctionNoClass_in_windowAggregation9178);
                    	    libFunctionNoClass637=libFunctionNoClass();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass637.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop232;
                        }
                    } while (true);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (d != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DOT_EXPR, "DOT_EXPR"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WINDOW_AGGREG, "WINDOW_AGGREG"), root_2);
                adaptor.addChild(root_2, stream_accessAggExpr.nextTree());
                adaptor.addChild(root_1, root_2);
                }
                if ( !(stream_libFunctionNoClass.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_libFunctionNoClass.hasNext() ) {
                    adaptor.addChild(root_1, stream_libFunctionNoClass.nextTree());
                }
                stream_libFunctionNoClass.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WINDOW_AGGREG, "WINDOW_AGGREG"), root_1);
                adaptor.addChild(root_1, stream_accessAggExpr.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class accessAggExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.accessAggExpr_return accessAggExpr() throws RecognitionException {
        EsperEPL2GrammarParser.accessAggExpr_return retval = new EsperEPL2GrammarParser.accessAggExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        EsperEPL2GrammarParser.propertyStreamSelector_return propertyStreamSelector638 = null;
        EsperEPL2GrammarParser.expression_return expression639 = null;
        CommonTree s_tree=null;
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        try {
            int alt234=3;
            switch ( input.LA(1) ) {
            case STAR:
                {
                alt234=1;
                }
                break;
            case IDENT:
                {
                int LA234_2 = input.LA(2);
                if ( (LA234_2==DOT) ) {
                    int LA234_70 = input.LA(3);
                    if ( (LA234_70==STAR) && (synpred4_EsperEPL2Grammar())) {
                        alt234=2;
                    }
                    else if ( (LA234_70==WINDOW||LA234_70==ESCAPE||LA234_70==EVERY_EXPR||LA234_70==WHERE||(LA234_70>=SUM && LA234_70<=COUNT)||LA234_70==OUTER||(LA234_70>=JOIN && LA234_70<=FULL)||(LA234_70>=EVENTS && LA234_70<=LAST)||(LA234_70>=UNIDIRECTIONAL && LA234_70<=PREVIOUSTAIL)||LA234_70==PRIOR||(LA234_70>=WEEKDAY && LA234_70<=CAST)||LA234_70==SNAPSHOT||(LA234_70>=VARIABLE && LA234_70<=INDEX)||(LA234_70>=DEFINE && LA234_70<=MATCHES)||LA234_70==WHILE||(LA234_70>=MERGE && LA234_70<=MATCHED)||LA234_70==IDENT||LA234_70==TICKED_STRING_LITERAL) ) {
                        alt234=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 234, 70, input);
                        throw nvae;
                    }
                }
                else if ( ((LA234_2>=IN_SET && LA234_2<=REGEXP)||(LA234_2>=OR_EXPR && LA234_2<=NOT_EXPR)||LA234_2==IS||(LA234_2>=LPAREN && LA234_2<=RPAREN)||(LA234_2>=COMMA && LA234_2<=EQUALS)||LA234_2==LBRACK||(LA234_2>=STAR && LA234_2<=QUESTION)||(LA234_2>=BAND && LA234_2<=MOD)||LA234_2==ESCAPECHAR) ) {
                    alt234=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 234, 2, input);
                    throw nvae;
                }
                }
                break;
            case WINDOW:
            case ESCAPE:
            case NOT_EXPR:
            case EVERY_EXPR:
            case WHERE:
            case SUM:
            case AVG:
            case MAX:
            case MIN:
            case COALESCE:
            case MEDIAN:
            case STDDEV:
            case AVEDEV:
            case COUNT:
            case CASE:
            case OUTER:
            case JOIN:
            case LEFT:
            case RIGHT:
            case FULL:
            case EVENTS:
            case FIRST:
            case LAST:
            case UNIDIRECTIONAL:
            case RETAINUNION:
            case RETAININTERSECTION:
            case PATTERN:
            case SQL:
            case METADATASQL:
            case PREVIOUS:
            case PREVIOUSTAIL:
            case PREVIOUSCOUNT:
            case PREVIOUSWINDOW:
            case PRIOR:
            case EXISTS:
            case WEEKDAY:
            case LW:
            case INSTANCEOF:
            case TYPEOF:
            case CAST:
            case CURRENT_TIMESTAMP:
            case SNAPSHOT:
            case VARIABLE:
            case UNTIL:
            case AT:
            case INDEX:
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case DEFINE:
            case PARTITION:
            case MATCHES:
            case WHILE:
            case MERGE:
            case MATCHED:
            case NUM_DOUBLE:
            case LCURLY:
            case LPAREN:
            case PLUS:
            case QUESTION:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case MINUS:
            case NUM_INT:
            case TICKED_STRING_LITERAL:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt234=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 234, 0, input);
                throw nvae;
            }
            switch (alt234) {
                case 1 :
                    {
                    s=(Token)match(input,STAR,FOLLOW_STAR_in_accessAggExpr9233); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STAR.add(s);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(PROPERTY_WILDCARD_SELECT, s));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_propertyStreamSelector_in_accessAggExpr9249);
                    propertyStreamSelector638=propertyStreamSelector();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, propertyStreamSelector638.getTree());
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_expression_in_accessAggExpr9254);
                    expression639=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression639.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class maxFunc_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.maxFunc_return maxFunc() throws RecognitionException {
        EsperEPL2GrammarParser.maxFunc_return retval = new EsperEPL2GrammarParser.maxFunc_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token MAX640=null;
        Token MIN641=null;
        Token LPAREN642=null;
        Token COMMA644=null;
        Token COMMA646=null;
        Token RPAREN648=null;
        EsperEPL2GrammarParser.expression_return expression643 = null;
        EsperEPL2GrammarParser.expression_return expression645 = null;
        EsperEPL2GrammarParser.expression_return expression647 = null;
        CommonTree MAX640_tree=null;
        CommonTree MIN641_tree=null;
        CommonTree LPAREN642_tree=null;
        CommonTree COMMA644_tree=null;
        CommonTree COMMA646_tree=null;
        CommonTree RPAREN648_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            int alt235=2;
            int LA235_0 = input.LA(1);
            if ( (LA235_0==MAX) ) {
                alt235=1;
            }
            else if ( (LA235_0==MIN) ) {
                alt235=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 235, 0, input);
                throw nvae;
            }
            switch (alt235) {
                case 1 :
                    {
                    MAX640=(Token)match(input,MAX,FOLLOW_MAX_in_maxFunc9267); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MAX640_tree = (CommonTree)adaptor.create(MAX640);
                    root_0 = (CommonTree)adaptor.becomeRoot(MAX640_tree, root_0);
                    }
                    }
                    break;
                case 2 :
                    {
                    MIN641=(Token)match(input,MIN,FOLLOW_MIN_in_maxFunc9272); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MIN641_tree = (CommonTree)adaptor.create(MIN641);
                    root_0 = (CommonTree)adaptor.becomeRoot(MIN641_tree, root_0);
                    }
                    }
                    break;
            }
            LPAREN642=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_maxFunc9276); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_maxFunc9279);
            expression643=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression643.getTree());
            int alt237=2;
            int LA237_0 = input.LA(1);
            if ( (LA237_0==COMMA) ) {
                alt237=1;
            }
            switch (alt237) {
                case 1 :
                    {
                    COMMA644=(Token)match(input,COMMA,FOLLOW_COMMA_in_maxFunc9282); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_maxFunc9285);
                    expression645=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression645.getTree());
                    loop236:
                    do {
                        int alt236=2;
                        int LA236_0 = input.LA(1);
                        if ( (LA236_0==COMMA) ) {
                            alt236=1;
                        }
                        switch (alt236) {
                    	case 1 :
                    	    {
                    	    COMMA646=(Token)match(input,COMMA,FOLLOW_COMMA_in_maxFunc9288); if (state.failed) return retval;
                    	    pushFollow(FOLLOW_expression_in_maxFunc9291);
                    	    expression647=expression();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression647.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop236;
                        }
                    } while (true);
                    }
                    break;
            }
            RPAREN648=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_maxFunc9298); if (state.failed) return retval;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class eventPropertyOrLibFunction_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.eventPropertyOrLibFunction_return eventPropertyOrLibFunction() throws RecognitionException {
        EsperEPL2GrammarParser.eventPropertyOrLibFunction_return retval = new EsperEPL2GrammarParser.eventPropertyOrLibFunction_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty649 = null;
        EsperEPL2GrammarParser.libFunction_return libFunction650 = null;
        try {
            int alt238=2;
            int LA238_0 = input.LA(1);
            if ( (LA238_0==IDENT) ) {
                int LA238_1 = input.LA(2);
                if ( (LA238_1==LPAREN) ) {
                    switch ( input.LA(3) ) {
                    case STRING_LITERAL:
                        {
                        int LA238_289 = input.LA(4);
                        if ( (LA238_289==RPAREN) ) {
                            int LA238_669 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt238=1;
                            }
                            else if ( (true) ) {
                                alt238=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 238, 669, input);
                                throw nvae;
                            }
                        }
                        else if ( ((LA238_289>=IN_SET && LA238_289<=REGEXP)||(LA238_289>=OR_EXPR && LA238_289<=NOT_EXPR)||LA238_289==IS||(LA238_289>=COMMA && LA238_289<=EQUALS)||(LA238_289>=STAR && LA238_289<=PLUS)||(LA238_289>=BAND && LA238_289<=MOD)) ) {
                            alt238=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 238, 289, input);
                            throw nvae;
                        }
                        }
                        break;
                    case QUOTED_STRING_LITERAL:
                        {
                        int LA238_290 = input.LA(4);
                        if ( ((LA238_290>=IN_SET && LA238_290<=REGEXP)||(LA238_290>=OR_EXPR && LA238_290<=NOT_EXPR)||LA238_290==IS||(LA238_290>=COMMA && LA238_290<=EQUALS)||(LA238_290>=STAR && LA238_290<=PLUS)||(LA238_290>=BAND && LA238_290<=MOD)) ) {
                            alt238=2;
                        }
                        else if ( (LA238_290==RPAREN) ) {
                            int LA238_715 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt238=1;
                            }
                            else if ( (true) ) {
                                alt238=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 238, 715, input);
                                throw nvae;
                            }
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 238, 290, input);
                            throw nvae;
                        }
                        }
                        break;
                    case WINDOW:
                    case ESCAPE:
                    case NOT_EXPR:
                    case EVERY_EXPR:
                    case WHERE:
                    case SUM:
                    case AVG:
                    case MAX:
                    case MIN:
                    case COALESCE:
                    case MEDIAN:
                    case STDDEV:
                    case AVEDEV:
                    case COUNT:
                    case CASE:
                    case OUTER:
                    case JOIN:
                    case LEFT:
                    case RIGHT:
                    case FULL:
                    case DISTINCT:
                    case ALL:
                    case EVENTS:
                    case FIRST:
                    case LAST:
                    case UNIDIRECTIONAL:
                    case RETAINUNION:
                    case RETAININTERSECTION:
                    case PATTERN:
                    case SQL:
                    case METADATASQL:
                    case PREVIOUS:
                    case PREVIOUSTAIL:
                    case PREVIOUSCOUNT:
                    case PREVIOUSWINDOW:
                    case PRIOR:
                    case EXISTS:
                    case WEEKDAY:
                    case LW:
                    case INSTANCEOF:
                    case TYPEOF:
                    case CAST:
                    case CURRENT_TIMESTAMP:
                    case SNAPSHOT:
                    case VARIABLE:
                    case UNTIL:
                    case AT:
                    case INDEX:
                    case BOOLEAN_TRUE:
                    case BOOLEAN_FALSE:
                    case VALUE_NULL:
                    case DEFINE:
                    case PARTITION:
                    case MATCHES:
                    case WHILE:
                    case MERGE:
                    case MATCHED:
                    case NUM_DOUBLE:
                    case IDENT:
                    case LCURLY:
                    case LPAREN:
                    case RPAREN:
                    case PLUS:
                    case QUESTION:
                    case MINUS:
                    case NUM_INT:
                    case TICKED_STRING_LITERAL:
                    case NUM_LONG:
                    case NUM_FLOAT:
                        {
                        alt238=2;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 238, 49, input);
                        throw nvae;
                    }
                }
                else if ( (LA238_1==DOT) ) {
                    int LA238_50 = input.LA(3);
                    if ( (LA238_50==IDENT) ) {
                        int LA238_360 = input.LA(4);
                        if ( (LA238_360==LPAREN) ) {
                            int LA238_721 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt238=1;
                            }
                            else if ( (true) ) {
                                alt238=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 238, 721, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA238_360==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_360==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_360==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_360==STAR) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_360==DIV) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_360==MOD) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_360==PLUS) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_360==MINUS) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_360==LOR) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_360==LT) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_360==GT) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_360==LE) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_360==GE) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_360==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_360==IS) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_360==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_360==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_360==BAND) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_360==BOR) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_360==BXOR) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_360==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_360==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_360==GROUP) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_360==HAVING) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_360==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_360==ORDER) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_360==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_360==FOR) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_360==EOF) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_360==WHEN) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_360==THEN) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_360==INSERT) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_360==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_360==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_360==COMMA) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_360==WHERE) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_360==AS) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_360==FROM) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_360==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_360==ALL) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_360==AFTER) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_360==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_360==ASC) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_360==DESC) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_360==ELSE) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_360==END) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_360==COLON) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_360==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_360==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_360==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_360==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_360==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_360==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_360==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_360==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_360==LIKE) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_360==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_360==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_360==DOT) ) {
                            int LA238_780 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt238=1;
                            }
                            else if ( (true) ) {
                                alt238=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 238, 780, input);
                                throw nvae;
                            }
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 238, 360, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA238_50==TICKED_STRING_LITERAL) ) {
                        int LA238_361 = input.LA(4);
                        if ( (LA238_361==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_361==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_361==LPAREN) ) {
                            int LA238_783 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt238=1;
                            }
                            else if ( (true) ) {
                                alt238=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 238, 783, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA238_361==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_361==STAR) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_361==DIV) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_361==MOD) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_361==PLUS) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_361==MINUS) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_361==LOR) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_361==LT) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_361==GT) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_361==LE) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_361==GE) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_361==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_361==IS) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_361==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_361==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_361==BAND) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_361==BOR) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_361==BXOR) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_361==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_361==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_361==GROUP) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_361==HAVING) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_361==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_361==ORDER) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_361==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_361==FOR) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_361==EOF) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_361==WHEN) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_361==THEN) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_361==INSERT) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_361==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_361==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_361==COMMA) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_361==WHERE) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_361==AS) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_361==FROM) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_361==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_361==ALL) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_361==AFTER) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_361==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_361==ASC) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_361==DESC) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_361==ELSE) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_361==END) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_361==COLON) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_361==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_361==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_361==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_361==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_361==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_361==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_361==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_361==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_361==LIKE) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_361==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_361==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_361==DOT) ) {
                            int LA238_840 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt238=1;
                            }
                            else if ( (true) ) {
                                alt238=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 238, 840, input);
                                throw nvae;
                            }
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 238, 361, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA238_50==AT) && (synpred5_EsperEPL2Grammar())) {
                        alt238=1;
                    }
                    else if ( (LA238_50==COUNT) && (synpred5_EsperEPL2Grammar())) {
                        alt238=1;
                    }
                    else if ( (LA238_50==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                        alt238=1;
                    }
                    else if ( (LA238_50==EVERY_EXPR) && (synpred5_EsperEPL2Grammar())) {
                        alt238=1;
                    }
                    else if ( (LA238_50==SUM) && (synpred5_EsperEPL2Grammar())) {
                        alt238=1;
                    }
                    else if ( (LA238_50==AVG) && (synpred5_EsperEPL2Grammar())) {
                        alt238=1;
                    }
                    else if ( (LA238_50==MAX) ) {
                        int LA238_368 = input.LA(4);
                        if ( (LA238_368==LPAREN) ) {
                            int LA238_841 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt238=1;
                            }
                            else if ( (true) ) {
                                alt238=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 238, 841, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA238_368==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_368==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_368==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_368==STAR) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_368==DIV) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_368==MOD) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_368==PLUS) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_368==MINUS) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_368==LOR) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_368==LT) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_368==GT) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_368==LE) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_368==GE) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_368==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_368==IS) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_368==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_368==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_368==BAND) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_368==BOR) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_368==BXOR) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_368==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_368==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_368==GROUP) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_368==HAVING) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_368==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_368==ORDER) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_368==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_368==FOR) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_368==EOF) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_368==WHEN) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_368==THEN) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_368==INSERT) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_368==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_368==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_368==COMMA) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_368==WHERE) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_368==AS) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_368==FROM) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_368==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_368==ALL) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_368==AFTER) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_368==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_368==ASC) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_368==DESC) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_368==ELSE) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_368==END) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_368==COLON) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_368==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_368==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_368==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_368==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_368==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_368==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_368==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_368==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_368==LIKE) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_368==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_368==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_368==DOT) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 238, 368, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA238_50==MIN) ) {
                        int LA238_369 = input.LA(4);
                        if ( (LA238_369==LPAREN) ) {
                            int LA238_901 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt238=1;
                            }
                            else if ( (true) ) {
                                alt238=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 238, 901, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA238_369==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_369==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_369==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_369==STAR) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_369==DIV) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_369==MOD) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_369==PLUS) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_369==MINUS) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_369==LOR) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_369==LT) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_369==GT) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_369==LE) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_369==GE) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_369==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_369==IS) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_369==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_369==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_369==BAND) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_369==BOR) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_369==BXOR) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_369==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_369==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_369==GROUP) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_369==HAVING) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_369==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_369==ORDER) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_369==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_369==FOR) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_369==EOF) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_369==WHEN) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_369==THEN) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_369==INSERT) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_369==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_369==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_369==COMMA) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_369==WHERE) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_369==AS) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_369==FROM) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_369==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_369==ALL) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_369==AFTER) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_369==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_369==ASC) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_369==DESC) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_369==ELSE) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_369==END) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_369==COLON) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_369==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_369==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_369==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_369==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_369==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_369==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_369==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_369==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_369==LIKE) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_369==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_369==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_369==DOT) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 238, 369, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA238_50==COALESCE) && (synpred5_EsperEPL2Grammar())) {
                        alt238=1;
                    }
                    else if ( (LA238_50==MEDIAN) && (synpred5_EsperEPL2Grammar())) {
                        alt238=1;
                    }
                    else if ( (LA238_50==STDDEV) && (synpred5_EsperEPL2Grammar())) {
                        alt238=1;
                    }
                    else if ( (LA238_50==AVEDEV) && (synpred5_EsperEPL2Grammar())) {
                        alt238=1;
                    }
                    else if ( (LA238_50==EVENTS) && (synpred5_EsperEPL2Grammar())) {
                        alt238=1;
                    }
                    else if ( (LA238_50==FIRST) && (synpred5_EsperEPL2Grammar())) {
                        alt238=1;
                    }
                    else if ( (LA238_50==LAST) && (synpred5_EsperEPL2Grammar())) {
                        alt238=1;
                    }
                    else if ( (LA238_50==WHILE) && (synpred5_EsperEPL2Grammar())) {
                        alt238=1;
                    }
                    else if ( (LA238_50==MERGE) && (synpred5_EsperEPL2Grammar())) {
                        alt238=1;
                    }
                    else if ( (LA238_50==MATCHED) && (synpred5_EsperEPL2Grammar())) {
                        alt238=1;
                    }
                    else if ( (LA238_50==UNIDIRECTIONAL) && (synpred5_EsperEPL2Grammar())) {
                        alt238=1;
                    }
                    else if ( (LA238_50==RETAINUNION) && (synpred5_EsperEPL2Grammar())) {
                        alt238=1;
                    }
                    else if ( (LA238_50==RETAININTERSECTION) && (synpred5_EsperEPL2Grammar())) {
                        alt238=1;
                    }
                    else if ( (LA238_50==UNTIL) && (synpred5_EsperEPL2Grammar())) {
                        alt238=1;
                    }
                    else if ( (LA238_50==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                        alt238=1;
                    }
                    else if ( (LA238_50==SQL) && (synpred5_EsperEPL2Grammar())) {
                        alt238=1;
                    }
                    else if ( (LA238_50==METADATASQL) && (synpred5_EsperEPL2Grammar())) {
                        alt238=1;
                    }
                    else if ( (LA238_50==PREVIOUS) && (synpred5_EsperEPL2Grammar())) {
                        alt238=1;
                    }
                    else if ( (LA238_50==PREVIOUSTAIL) && (synpred5_EsperEPL2Grammar())) {
                        alt238=1;
                    }
                    else if ( (LA238_50==PRIOR) && (synpred5_EsperEPL2Grammar())) {
                        alt238=1;
                    }
                    else if ( (LA238_50==WEEKDAY) && (synpred5_EsperEPL2Grammar())) {
                        alt238=1;
                    }
                    else if ( (LA238_50==LW) && (synpred5_EsperEPL2Grammar())) {
                        alt238=1;
                    }
                    else if ( (LA238_50==INSTANCEOF) && (synpred5_EsperEPL2Grammar())) {
                        alt238=1;
                    }
                    else if ( (LA238_50==TYPEOF) && (synpred5_EsperEPL2Grammar())) {
                        alt238=1;
                    }
                    else if ( (LA238_50==CAST) && (synpred5_EsperEPL2Grammar())) {
                        alt238=1;
                    }
                    else if ( (LA238_50==SNAPSHOT) && (synpred5_EsperEPL2Grammar())) {
                        alt238=1;
                    }
                    else if ( (LA238_50==VARIABLE) && (synpred5_EsperEPL2Grammar())) {
                        alt238=1;
                    }
                    else if ( (LA238_50==INDEX) && (synpred5_EsperEPL2Grammar())) {
                        alt238=1;
                    }
                    else if ( (LA238_50==WINDOW) && (synpred5_EsperEPL2Grammar())) {
                        alt238=1;
                    }
                    else if ( (LA238_50==LEFT) && (synpred5_EsperEPL2Grammar())) {
                        alt238=1;
                    }
                    else if ( (LA238_50==RIGHT) && (synpred5_EsperEPL2Grammar())) {
                        alt238=1;
                    }
                    else if ( (LA238_50==OUTER) && (synpred5_EsperEPL2Grammar())) {
                        alt238=1;
                    }
                    else if ( (LA238_50==FULL) && (synpred5_EsperEPL2Grammar())) {
                        alt238=1;
                    }
                    else if ( (LA238_50==JOIN) && (synpred5_EsperEPL2Grammar())) {
                        alt238=1;
                    }
                    else if ( (LA238_50==DEFINE) && (synpred5_EsperEPL2Grammar())) {
                        alt238=1;
                    }
                    else if ( (LA238_50==PARTITION) && (synpred5_EsperEPL2Grammar())) {
                        alt238=1;
                    }
                    else if ( (LA238_50==MATCHES) && (synpred5_EsperEPL2Grammar())) {
                        alt238=1;
                    }
                    else if ( (LA238_50==WHERE) ) {
                        alt238=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 238, 50, input);
                        throw nvae;
                    }
                }
                else if ( (LA238_1==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_1==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_1==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_1==STAR) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_1==DIV) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_1==MOD) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_1==PLUS) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_1==MINUS) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_1==LOR) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_1==LT) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_1==GT) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_1==LE) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_1==GE) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_1==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_1==IS) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_1==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_1==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_1==BAND) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_1==BOR) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_1==BXOR) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_1==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_1==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_1==GROUP) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_1==HAVING) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_1==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_1==ORDER) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_1==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_1==FOR) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_1==EOF) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_1==WHEN) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_1==THEN) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_1==INSERT) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_1==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_1==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_1==COMMA) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_1==WHERE) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_1==AS) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_1==FROM) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_1==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_1==ALL) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_1==AFTER) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_1==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_1==ASC) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_1==DESC) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_1==ELSE) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_1==END) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_1==COLON) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_1==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_1==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_1==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_1==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_1==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_1==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_1==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_1==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_1==LIKE) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_1==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_1==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 238, 1, input);
                    throw nvae;
                }
            }
            else if ( (LA238_0==TICKED_STRING_LITERAL) ) {
                int LA238_2 = input.LA(2);
                if ( (LA238_2==DOT) ) {
                    int LA238_109 = input.LA(3);
                    if ( (LA238_109==IDENT) ) {
                        int LA238_408 = input.LA(4);
                        if ( (LA238_408==LPAREN) ) {
                            int LA238_961 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt238=1;
                            }
                            else if ( (true) ) {
                                alt238=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 238, 961, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA238_408==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_408==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_408==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_408==STAR) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_408==DIV) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_408==MOD) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_408==PLUS) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_408==MINUS) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_408==LOR) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_408==LT) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_408==GT) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_408==LE) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_408==GE) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_408==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_408==IS) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_408==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_408==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_408==BAND) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_408==BOR) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_408==BXOR) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_408==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_408==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_408==GROUP) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_408==HAVING) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_408==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_408==ORDER) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_408==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_408==FOR) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_408==EOF) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_408==WHEN) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_408==THEN) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_408==INSERT) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_408==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_408==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_408==COMMA) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_408==WHERE) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_408==AS) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_408==FROM) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_408==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_408==ALL) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_408==AFTER) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_408==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_408==ASC) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_408==DESC) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_408==ELSE) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_408==END) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_408==COLON) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_408==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_408==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_408==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_408==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_408==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_408==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_408==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_408==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_408==LIKE) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_408==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_408==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_408==DOT) ) {
                            int LA238_1020 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt238=1;
                            }
                            else if ( (true) ) {
                                alt238=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 238, 1020, input);
                                throw nvae;
                            }
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 238, 408, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA238_109==TICKED_STRING_LITERAL) ) {
                        int LA238_409 = input.LA(4);
                        if ( (LA238_409==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_409==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_409==LPAREN) ) {
                            int LA238_1023 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt238=1;
                            }
                            else if ( (true) ) {
                                alt238=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 238, 1023, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA238_409==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_409==STAR) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_409==DIV) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_409==MOD) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_409==PLUS) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_409==MINUS) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_409==LOR) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_409==LT) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_409==GT) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_409==LE) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_409==GE) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_409==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_409==IS) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_409==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_409==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_409==BAND) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_409==BOR) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_409==BXOR) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_409==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_409==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_409==GROUP) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_409==HAVING) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_409==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_409==ORDER) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_409==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_409==FOR) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_409==EOF) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_409==WHEN) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_409==THEN) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_409==INSERT) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_409==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_409==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_409==COMMA) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_409==WHERE) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_409==AS) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_409==FROM) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_409==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_409==ALL) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_409==AFTER) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_409==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_409==ASC) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_409==DESC) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_409==ELSE) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_409==END) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_409==COLON) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_409==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_409==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_409==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_409==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_409==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_409==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_409==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_409==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_409==LIKE) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_409==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_409==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_409==DOT) ) {
                            int LA238_1080 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt238=1;
                            }
                            else if ( (true) ) {
                                alt238=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 238, 1080, input);
                                throw nvae;
                            }
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 238, 409, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA238_109==AT) && (synpred5_EsperEPL2Grammar())) {
                        alt238=1;
                    }
                    else if ( (LA238_109==COUNT) && (synpred5_EsperEPL2Grammar())) {
                        alt238=1;
                    }
                    else if ( (LA238_109==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                        alt238=1;
                    }
                    else if ( (LA238_109==EVERY_EXPR) && (synpred5_EsperEPL2Grammar())) {
                        alt238=1;
                    }
                    else if ( (LA238_109==SUM) && (synpred5_EsperEPL2Grammar())) {
                        alt238=1;
                    }
                    else if ( (LA238_109==AVG) && (synpred5_EsperEPL2Grammar())) {
                        alt238=1;
                    }
                    else if ( (LA238_109==MAX) ) {
                        int LA238_416 = input.LA(4);
                        if ( (LA238_416==LPAREN) ) {
                            int LA238_1081 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt238=1;
                            }
                            else if ( (true) ) {
                                alt238=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 238, 1081, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA238_416==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_416==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_416==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_416==STAR) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_416==DIV) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_416==MOD) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_416==PLUS) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_416==MINUS) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_416==LOR) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_416==LT) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_416==GT) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_416==LE) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_416==GE) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_416==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_416==IS) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_416==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_416==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_416==BAND) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_416==BOR) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_416==BXOR) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_416==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_416==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_416==GROUP) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_416==HAVING) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_416==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_416==ORDER) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_416==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_416==FOR) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_416==EOF) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_416==WHEN) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_416==THEN) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_416==INSERT) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_416==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_416==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_416==COMMA) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_416==WHERE) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_416==AS) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_416==FROM) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_416==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_416==ALL) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_416==AFTER) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_416==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_416==ASC) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_416==DESC) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_416==ELSE) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_416==END) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_416==COLON) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_416==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_416==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_416==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_416==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_416==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_416==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_416==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_416==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_416==LIKE) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_416==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_416==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_416==DOT) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 238, 416, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA238_109==MIN) ) {
                        int LA238_417 = input.LA(4);
                        if ( (LA238_417==LPAREN) ) {
                            int LA238_1141 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt238=1;
                            }
                            else if ( (true) ) {
                                alt238=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 238, 1141, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA238_417==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_417==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_417==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_417==STAR) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_417==DIV) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_417==MOD) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_417==PLUS) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_417==MINUS) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_417==LOR) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_417==LT) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_417==GT) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_417==LE) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_417==GE) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_417==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_417==IS) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_417==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_417==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_417==BAND) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_417==BOR) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_417==BXOR) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_417==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_417==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_417==GROUP) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_417==HAVING) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_417==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_417==ORDER) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_417==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_417==FOR) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_417==EOF) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_417==WHEN) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_417==THEN) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_417==INSERT) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_417==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_417==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_417==COMMA) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_417==WHERE) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_417==AS) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_417==FROM) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_417==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_417==ALL) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_417==AFTER) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_417==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_417==ASC) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_417==DESC) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_417==ELSE) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_417==END) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_417==COLON) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_417==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_417==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_417==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_417==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_417==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_417==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_417==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_417==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_417==LIKE) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_417==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_417==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else if ( (LA238_417==DOT) && (synpred5_EsperEPL2Grammar())) {
                            alt238=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 238, 417, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA238_109==COALESCE) && (synpred5_EsperEPL2Grammar())) {
                        alt238=1;
                    }
                    else if ( (LA238_109==MEDIAN) && (synpred5_EsperEPL2Grammar())) {
                        alt238=1;
                    }
                    else if ( (LA238_109==STDDEV) && (synpred5_EsperEPL2Grammar())) {
                        alt238=1;
                    }
                    else if ( (LA238_109==AVEDEV) && (synpred5_EsperEPL2Grammar())) {
                        alt238=1;
                    }
                    else if ( (LA238_109==EVENTS) && (synpred5_EsperEPL2Grammar())) {
                        alt238=1;
                    }
                    else if ( (LA238_109==FIRST) && (synpred5_EsperEPL2Grammar())) {
                        alt238=1;
                    }
                    else if ( (LA238_109==LAST) && (synpred5_EsperEPL2Grammar())) {
                        alt238=1;
                    }
                    else if ( (LA238_109==WHILE) && (synpred5_EsperEPL2Grammar())) {
                        alt238=1;
                    }
                    else if ( (LA238_109==MERGE) && (synpred5_EsperEPL2Grammar())) {
                        alt238=1;
                    }
                    else if ( (LA238_109==MATCHED) && (synpred5_EsperEPL2Grammar())) {
                        alt238=1;
                    }
                    else if ( (LA238_109==UNIDIRECTIONAL) && (synpred5_EsperEPL2Grammar())) {
                        alt238=1;
                    }
                    else if ( (LA238_109==RETAINUNION) && (synpred5_EsperEPL2Grammar())) {
                        alt238=1;
                    }
                    else if ( (LA238_109==RETAININTERSECTION) && (synpred5_EsperEPL2Grammar())) {
                        alt238=1;
                    }
                    else if ( (LA238_109==UNTIL) && (synpred5_EsperEPL2Grammar())) {
                        alt238=1;
                    }
                    else if ( (LA238_109==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                        alt238=1;
                    }
                    else if ( (LA238_109==SQL) && (synpred5_EsperEPL2Grammar())) {
                        alt238=1;
                    }
                    else if ( (LA238_109==METADATASQL) && (synpred5_EsperEPL2Grammar())) {
                        alt238=1;
                    }
                    else if ( (LA238_109==PREVIOUS) && (synpred5_EsperEPL2Grammar())) {
                        alt238=1;
                    }
                    else if ( (LA238_109==PREVIOUSTAIL) && (synpred5_EsperEPL2Grammar())) {
                        alt238=1;
                    }
                    else if ( (LA238_109==PRIOR) && (synpred5_EsperEPL2Grammar())) {
                        alt238=1;
                    }
                    else if ( (LA238_109==WEEKDAY) && (synpred5_EsperEPL2Grammar())) {
                        alt238=1;
                    }
                    else if ( (LA238_109==LW) && (synpred5_EsperEPL2Grammar())) {
                        alt238=1;
                    }
                    else if ( (LA238_109==INSTANCEOF) && (synpred5_EsperEPL2Grammar())) {
                        alt238=1;
                    }
                    else if ( (LA238_109==TYPEOF) && (synpred5_EsperEPL2Grammar())) {
                        alt238=1;
                    }
                    else if ( (LA238_109==CAST) && (synpred5_EsperEPL2Grammar())) {
                        alt238=1;
                    }
                    else if ( (LA238_109==SNAPSHOT) && (synpred5_EsperEPL2Grammar())) {
                        alt238=1;
                    }
                    else if ( (LA238_109==VARIABLE) && (synpred5_EsperEPL2Grammar())) {
                        alt238=1;
                    }
                    else if ( (LA238_109==INDEX) && (synpred5_EsperEPL2Grammar())) {
                        alt238=1;
                    }
                    else if ( (LA238_109==WINDOW) && (synpred5_EsperEPL2Grammar())) {
                        alt238=1;
                    }
                    else if ( (LA238_109==LEFT) && (synpred5_EsperEPL2Grammar())) {
                        alt238=1;
                    }
                    else if ( (LA238_109==RIGHT) && (synpred5_EsperEPL2Grammar())) {
                        alt238=1;
                    }
                    else if ( (LA238_109==OUTER) && (synpred5_EsperEPL2Grammar())) {
                        alt238=1;
                    }
                    else if ( (LA238_109==FULL) && (synpred5_EsperEPL2Grammar())) {
                        alt238=1;
                    }
                    else if ( (LA238_109==JOIN) && (synpred5_EsperEPL2Grammar())) {
                        alt238=1;
                    }
                    else if ( (LA238_109==DEFINE) && (synpred5_EsperEPL2Grammar())) {
                        alt238=1;
                    }
                    else if ( (LA238_109==PARTITION) && (synpred5_EsperEPL2Grammar())) {
                        alt238=1;
                    }
                    else if ( (LA238_109==MATCHES) && (synpred5_EsperEPL2Grammar())) {
                        alt238=1;
                    }
                    else if ( (LA238_109==WHERE) ) {
                        alt238=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 238, 109, input);
                        throw nvae;
                    }
                }
                else if ( (LA238_2==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_2==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_2==LPAREN) ) {
                    switch ( input.LA(3) ) {
                    case STRING_LITERAL:
                        {
                        int LA238_456 = input.LA(4);
                        if ( (LA238_456==RPAREN) ) {
                            int LA238_1201 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt238=1;
                            }
                            else if ( (true) ) {
                                alt238=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 238, 1201, input);
                                throw nvae;
                            }
                        }
                        else if ( ((LA238_456>=IN_SET && LA238_456<=REGEXP)||(LA238_456>=OR_EXPR && LA238_456<=NOT_EXPR)||LA238_456==IS||(LA238_456>=COMMA && LA238_456<=EQUALS)||(LA238_456>=STAR && LA238_456<=PLUS)||(LA238_456>=BAND && LA238_456<=MOD)) ) {
                            alt238=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 238, 456, input);
                            throw nvae;
                        }
                        }
                        break;
                    case QUOTED_STRING_LITERAL:
                        {
                        int LA238_457 = input.LA(4);
                        if ( ((LA238_457>=IN_SET && LA238_457<=REGEXP)||(LA238_457>=OR_EXPR && LA238_457<=NOT_EXPR)||LA238_457==IS||(LA238_457>=COMMA && LA238_457<=EQUALS)||(LA238_457>=STAR && LA238_457<=PLUS)||(LA238_457>=BAND && LA238_457<=MOD)) ) {
                            alt238=2;
                        }
                        else if ( (LA238_457==RPAREN) ) {
                            int LA238_1247 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt238=1;
                            }
                            else if ( (true) ) {
                                alt238=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 238, 1247, input);
                                throw nvae;
                            }
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 238, 457, input);
                            throw nvae;
                        }
                        }
                        break;
                    case WINDOW:
                    case ESCAPE:
                    case NOT_EXPR:
                    case EVERY_EXPR:
                    case WHERE:
                    case SUM:
                    case AVG:
                    case MAX:
                    case MIN:
                    case COALESCE:
                    case MEDIAN:
                    case STDDEV:
                    case AVEDEV:
                    case COUNT:
                    case CASE:
                    case OUTER:
                    case JOIN:
                    case LEFT:
                    case RIGHT:
                    case FULL:
                    case DISTINCT:
                    case ALL:
                    case EVENTS:
                    case FIRST:
                    case LAST:
                    case UNIDIRECTIONAL:
                    case RETAINUNION:
                    case RETAININTERSECTION:
                    case PATTERN:
                    case SQL:
                    case METADATASQL:
                    case PREVIOUS:
                    case PREVIOUSTAIL:
                    case PREVIOUSCOUNT:
                    case PREVIOUSWINDOW:
                    case PRIOR:
                    case EXISTS:
                    case WEEKDAY:
                    case LW:
                    case INSTANCEOF:
                    case TYPEOF:
                    case CAST:
                    case CURRENT_TIMESTAMP:
                    case SNAPSHOT:
                    case VARIABLE:
                    case UNTIL:
                    case AT:
                    case INDEX:
                    case BOOLEAN_TRUE:
                    case BOOLEAN_FALSE:
                    case VALUE_NULL:
                    case DEFINE:
                    case PARTITION:
                    case MATCHES:
                    case WHILE:
                    case MERGE:
                    case MATCHED:
                    case NUM_DOUBLE:
                    case IDENT:
                    case LCURLY:
                    case LPAREN:
                    case RPAREN:
                    case PLUS:
                    case QUESTION:
                    case MINUS:
                    case NUM_INT:
                    case TICKED_STRING_LITERAL:
                    case NUM_LONG:
                    case NUM_FLOAT:
                        {
                        alt238=2;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 238, 112, input);
                        throw nvae;
                    }
                }
                else if ( (LA238_2==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_2==STAR) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_2==DIV) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_2==MOD) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_2==PLUS) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_2==MINUS) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_2==LOR) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_2==LT) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_2==GT) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_2==LE) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_2==GE) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_2==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_2==IS) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_2==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_2==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_2==BAND) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_2==BOR) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_2==BXOR) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_2==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_2==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_2==GROUP) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_2==HAVING) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_2==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_2==ORDER) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_2==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_2==FOR) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_2==EOF) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_2==WHEN) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_2==THEN) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_2==INSERT) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_2==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_2==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_2==COMMA) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_2==WHERE) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_2==AS) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_2==FROM) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_2==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_2==ALL) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_2==AFTER) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_2==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_2==ASC) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_2==DESC) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_2==ELSE) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_2==END) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_2==COLON) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_2==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_2==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_2==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_2==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_2==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_2==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_2==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_2==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_2==LIKE) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_2==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_2==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 238, 2, input);
                    throw nvae;
                }
            }
            else if ( (LA238_0==AT) && (synpred5_EsperEPL2Grammar())) {
                alt238=1;
            }
            else if ( (LA238_0==COUNT) && (synpred5_EsperEPL2Grammar())) {
                alt238=1;
            }
            else if ( (LA238_0==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                alt238=1;
            }
            else if ( (LA238_0==EVERY_EXPR) && (synpred5_EsperEPL2Grammar())) {
                alt238=1;
            }
            else if ( (LA238_0==SUM) && (synpred5_EsperEPL2Grammar())) {
                alt238=1;
            }
            else if ( (LA238_0==AVG) && (synpred5_EsperEPL2Grammar())) {
                alt238=1;
            }
            else if ( (LA238_0==MAX) ) {
                int LA238_9 = input.LA(2);
                if ( (LA238_9==LPAREN) ) {
                    switch ( input.LA(3) ) {
                    case STRING_LITERAL:
                        {
                        int LA238_527 = input.LA(4);
                        if ( (LA238_527==RPAREN) ) {
                            int LA238_1253 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt238=1;
                            }
                            else if ( (true) ) {
                                alt238=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 238, 1253, input);
                                throw nvae;
                            }
                        }
                        else if ( ((LA238_527>=IN_SET && LA238_527<=REGEXP)||(LA238_527>=OR_EXPR && LA238_527<=NOT_EXPR)||LA238_527==IS||(LA238_527>=COMMA && LA238_527<=EQUALS)||(LA238_527>=STAR && LA238_527<=PLUS)||(LA238_527>=BAND && LA238_527<=MOD)) ) {
                            alt238=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 238, 527, input);
                            throw nvae;
                        }
                        }
                        break;
                    case QUOTED_STRING_LITERAL:
                        {
                        int LA238_528 = input.LA(4);
                        if ( ((LA238_528>=IN_SET && LA238_528<=REGEXP)||(LA238_528>=OR_EXPR && LA238_528<=NOT_EXPR)||LA238_528==IS||(LA238_528>=COMMA && LA238_528<=EQUALS)||(LA238_528>=STAR && LA238_528<=PLUS)||(LA238_528>=BAND && LA238_528<=MOD)) ) {
                            alt238=2;
                        }
                        else if ( (LA238_528==RPAREN) ) {
                            int LA238_1299 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt238=1;
                            }
                            else if ( (true) ) {
                                alt238=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 238, 1299, input);
                                throw nvae;
                            }
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 238, 528, input);
                            throw nvae;
                        }
                        }
                        break;
                    case WINDOW:
                    case ESCAPE:
                    case NOT_EXPR:
                    case EVERY_EXPR:
                    case WHERE:
                    case SUM:
                    case AVG:
                    case MAX:
                    case MIN:
                    case COALESCE:
                    case MEDIAN:
                    case STDDEV:
                    case AVEDEV:
                    case COUNT:
                    case CASE:
                    case OUTER:
                    case JOIN:
                    case LEFT:
                    case RIGHT:
                    case FULL:
                    case DISTINCT:
                    case ALL:
                    case EVENTS:
                    case FIRST:
                    case LAST:
                    case UNIDIRECTIONAL:
                    case RETAINUNION:
                    case RETAININTERSECTION:
                    case PATTERN:
                    case SQL:
                    case METADATASQL:
                    case PREVIOUS:
                    case PREVIOUSTAIL:
                    case PREVIOUSCOUNT:
                    case PREVIOUSWINDOW:
                    case PRIOR:
                    case EXISTS:
                    case WEEKDAY:
                    case LW:
                    case INSTANCEOF:
                    case TYPEOF:
                    case CAST:
                    case CURRENT_TIMESTAMP:
                    case SNAPSHOT:
                    case VARIABLE:
                    case UNTIL:
                    case AT:
                    case INDEX:
                    case BOOLEAN_TRUE:
                    case BOOLEAN_FALSE:
                    case VALUE_NULL:
                    case DEFINE:
                    case PARTITION:
                    case MATCHES:
                    case WHILE:
                    case MERGE:
                    case MATCHED:
                    case NUM_DOUBLE:
                    case IDENT:
                    case LCURLY:
                    case LPAREN:
                    case RPAREN:
                    case PLUS:
                    case QUESTION:
                    case MINUS:
                    case NUM_INT:
                    case TICKED_STRING_LITERAL:
                    case NUM_LONG:
                    case NUM_FLOAT:
                        {
                        alt238=2;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 238, 169, input);
                        throw nvae;
                    }
                }
                else if ( (LA238_9==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_9==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_9==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_9==DOT) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_9==STAR) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_9==DIV) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_9==MOD) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_9==PLUS) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_9==MINUS) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_9==LOR) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_9==LT) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_9==GT) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_9==LE) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_9==GE) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_9==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_9==IS) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_9==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_9==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_9==BAND) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_9==BOR) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_9==BXOR) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_9==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_9==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_9==GROUP) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_9==HAVING) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_9==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_9==ORDER) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_9==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_9==FOR) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_9==EOF) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_9==WHEN) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_9==THEN) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_9==INSERT) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_9==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_9==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_9==COMMA) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_9==WHERE) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_9==AS) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_9==FROM) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_9==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_9==ALL) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_9==AFTER) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_9==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_9==ASC) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_9==DESC) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_9==ELSE) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_9==END) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_9==COLON) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_9==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_9==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_9==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_9==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_9==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_9==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_9==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_9==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_9==LIKE) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_9==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_9==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 238, 9, input);
                    throw nvae;
                }
            }
            else if ( (LA238_0==MIN) ) {
                int LA238_10 = input.LA(2);
                if ( (LA238_10==LPAREN) ) {
                    switch ( input.LA(3) ) {
                    case STRING_LITERAL:
                        {
                        int LA238_598 = input.LA(4);
                        if ( (LA238_598==RPAREN) ) {
                            int LA238_1305 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt238=1;
                            }
                            else if ( (true) ) {
                                alt238=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 238, 1305, input);
                                throw nvae;
                            }
                        }
                        else if ( ((LA238_598>=IN_SET && LA238_598<=REGEXP)||(LA238_598>=OR_EXPR && LA238_598<=NOT_EXPR)||LA238_598==IS||(LA238_598>=COMMA && LA238_598<=EQUALS)||(LA238_598>=STAR && LA238_598<=PLUS)||(LA238_598>=BAND && LA238_598<=MOD)) ) {
                            alt238=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 238, 598, input);
                            throw nvae;
                        }
                        }
                        break;
                    case QUOTED_STRING_LITERAL:
                        {
                        int LA238_599 = input.LA(4);
                        if ( ((LA238_599>=IN_SET && LA238_599<=REGEXP)||(LA238_599>=OR_EXPR && LA238_599<=NOT_EXPR)||LA238_599==IS||(LA238_599>=COMMA && LA238_599<=EQUALS)||(LA238_599>=STAR && LA238_599<=PLUS)||(LA238_599>=BAND && LA238_599<=MOD)) ) {
                            alt238=2;
                        }
                        else if ( (LA238_599==RPAREN) ) {
                            int LA238_1351 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt238=1;
                            }
                            else if ( (true) ) {
                                alt238=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 238, 1351, input);
                                throw nvae;
                            }
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 238, 599, input);
                            throw nvae;
                        }
                        }
                        break;
                    case WINDOW:
                    case ESCAPE:
                    case NOT_EXPR:
                    case EVERY_EXPR:
                    case WHERE:
                    case SUM:
                    case AVG:
                    case MAX:
                    case MIN:
                    case COALESCE:
                    case MEDIAN:
                    case STDDEV:
                    case AVEDEV:
                    case COUNT:
                    case CASE:
                    case OUTER:
                    case JOIN:
                    case LEFT:
                    case RIGHT:
                    case FULL:
                    case DISTINCT:
                    case ALL:
                    case EVENTS:
                    case FIRST:
                    case LAST:
                    case UNIDIRECTIONAL:
                    case RETAINUNION:
                    case RETAININTERSECTION:
                    case PATTERN:
                    case SQL:
                    case METADATASQL:
                    case PREVIOUS:
                    case PREVIOUSTAIL:
                    case PREVIOUSCOUNT:
                    case PREVIOUSWINDOW:
                    case PRIOR:
                    case EXISTS:
                    case WEEKDAY:
                    case LW:
                    case INSTANCEOF:
                    case TYPEOF:
                    case CAST:
                    case CURRENT_TIMESTAMP:
                    case SNAPSHOT:
                    case VARIABLE:
                    case UNTIL:
                    case AT:
                    case INDEX:
                    case BOOLEAN_TRUE:
                    case BOOLEAN_FALSE:
                    case VALUE_NULL:
                    case DEFINE:
                    case PARTITION:
                    case MATCHES:
                    case WHILE:
                    case MERGE:
                    case MATCHED:
                    case NUM_DOUBLE:
                    case IDENT:
                    case LCURLY:
                    case LPAREN:
                    case RPAREN:
                    case PLUS:
                    case QUESTION:
                    case MINUS:
                    case NUM_INT:
                    case TICKED_STRING_LITERAL:
                    case NUM_LONG:
                    case NUM_FLOAT:
                        {
                        alt238=2;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 238, 229, input);
                        throw nvae;
                    }
                }
                else if ( (LA238_10==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_10==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_10==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_10==DOT) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_10==STAR) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_10==DIV) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_10==MOD) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_10==PLUS) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_10==MINUS) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_10==LOR) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_10==LT) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_10==GT) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_10==LE) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_10==GE) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_10==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_10==IS) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_10==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_10==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_10==BAND) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_10==BOR) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_10==BXOR) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_10==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_10==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_10==GROUP) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_10==HAVING) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_10==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_10==ORDER) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_10==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_10==FOR) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_10==EOF) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_10==WHEN) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_10==THEN) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_10==INSERT) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_10==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_10==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_10==COMMA) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_10==WHERE) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_10==AS) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_10==FROM) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_10==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_10==ALL) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_10==AFTER) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_10==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_10==ASC) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_10==DESC) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_10==ELSE) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_10==END) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_10==COLON) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_10==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_10==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_10==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_10==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_10==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_10==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_10==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_10==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_10==LIKE) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_10==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else if ( (LA238_10==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                    alt238=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 238, 10, input);
                    throw nvae;
                }
            }
            else if ( (LA238_0==COALESCE) && (synpred5_EsperEPL2Grammar())) {
                alt238=1;
            }
            else if ( (LA238_0==MEDIAN) && (synpred5_EsperEPL2Grammar())) {
                alt238=1;
            }
            else if ( (LA238_0==STDDEV) && (synpred5_EsperEPL2Grammar())) {
                alt238=1;
            }
            else if ( (LA238_0==AVEDEV) && (synpred5_EsperEPL2Grammar())) {
                alt238=1;
            }
            else if ( (LA238_0==EVENTS) && (synpred5_EsperEPL2Grammar())) {
                alt238=1;
            }
            else if ( (LA238_0==FIRST) && (synpred5_EsperEPL2Grammar())) {
                alt238=1;
            }
            else if ( (LA238_0==LAST) && (synpred5_EsperEPL2Grammar())) {
                alt238=1;
            }
            else if ( (LA238_0==WHILE) && (synpred5_EsperEPL2Grammar())) {
                alt238=1;
            }
            else if ( (LA238_0==MERGE) && (synpred5_EsperEPL2Grammar())) {
                alt238=1;
            }
            else if ( (LA238_0==MATCHED) && (synpred5_EsperEPL2Grammar())) {
                alt238=1;
            }
            else if ( (LA238_0==UNIDIRECTIONAL) && (synpred5_EsperEPL2Grammar())) {
                alt238=1;
            }
            else if ( (LA238_0==RETAINUNION) && (synpred5_EsperEPL2Grammar())) {
                alt238=1;
            }
            else if ( (LA238_0==RETAININTERSECTION) && (synpred5_EsperEPL2Grammar())) {
                alt238=1;
            }
            else if ( (LA238_0==UNTIL) && (synpred5_EsperEPL2Grammar())) {
                alt238=1;
            }
            else if ( (LA238_0==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                alt238=1;
            }
            else if ( (LA238_0==SQL) && (synpred5_EsperEPL2Grammar())) {
                alt238=1;
            }
            else if ( (LA238_0==METADATASQL) && (synpred5_EsperEPL2Grammar())) {
                alt238=1;
            }
            else if ( (LA238_0==PREVIOUS) && (synpred5_EsperEPL2Grammar())) {
                alt238=1;
            }
            else if ( (LA238_0==PREVIOUSTAIL) && (synpred5_EsperEPL2Grammar())) {
                alt238=1;
            }
            else if ( (LA238_0==PRIOR) && (synpred5_EsperEPL2Grammar())) {
                alt238=1;
            }
            else if ( (LA238_0==WEEKDAY) && (synpred5_EsperEPL2Grammar())) {
                alt238=1;
            }
            else if ( (LA238_0==LW) && (synpred5_EsperEPL2Grammar())) {
                alt238=1;
            }
            else if ( (LA238_0==INSTANCEOF) && (synpred5_EsperEPL2Grammar())) {
                alt238=1;
            }
            else if ( (LA238_0==TYPEOF) && (synpred5_EsperEPL2Grammar())) {
                alt238=1;
            }
            else if ( (LA238_0==CAST) && (synpred5_EsperEPL2Grammar())) {
                alt238=1;
            }
            else if ( (LA238_0==SNAPSHOT) && (synpred5_EsperEPL2Grammar())) {
                alt238=1;
            }
            else if ( (LA238_0==VARIABLE) && (synpred5_EsperEPL2Grammar())) {
                alt238=1;
            }
            else if ( (LA238_0==INDEX) && (synpred5_EsperEPL2Grammar())) {
                alt238=1;
            }
            else if ( (LA238_0==WINDOW) && (synpred5_EsperEPL2Grammar())) {
                alt238=1;
            }
            else if ( (LA238_0==LEFT) && (synpred5_EsperEPL2Grammar())) {
                alt238=1;
            }
            else if ( (LA238_0==RIGHT) && (synpred5_EsperEPL2Grammar())) {
                alt238=1;
            }
            else if ( (LA238_0==OUTER) && (synpred5_EsperEPL2Grammar())) {
                alt238=1;
            }
            else if ( (LA238_0==FULL) && (synpred5_EsperEPL2Grammar())) {
                alt238=1;
            }
            else if ( (LA238_0==JOIN) && (synpred5_EsperEPL2Grammar())) {
                alt238=1;
            }
            else if ( (LA238_0==DEFINE) && (synpred5_EsperEPL2Grammar())) {
                alt238=1;
            }
            else if ( (LA238_0==PARTITION) && (synpred5_EsperEPL2Grammar())) {
                alt238=1;
            }
            else if ( (LA238_0==MATCHES) && (synpred5_EsperEPL2Grammar())) {
                alt238=1;
            }
            else if ( (LA238_0==WHERE) ) {
                alt238=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 238, 0, input);
                throw nvae;
            }
            switch (alt238) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_eventProperty_in_eventPropertyOrLibFunction9317);
                    eventProperty649=eventProperty();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty649.getTree());
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_libFunction_in_eventPropertyOrLibFunction9322);
                    libFunction650=libFunction();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, libFunction650.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class libFunction_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.libFunction_return libFunction() throws RecognitionException {
        EsperEPL2GrammarParser.libFunction_return retval = new EsperEPL2GrammarParser.libFunction_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token DOT652=null;
        EsperEPL2GrammarParser.libFunctionWithClass_return libFunctionWithClass651 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass653 = null;
        CommonTree DOT652_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_libFunctionWithClass=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionWithClass");
        RewriteRuleSubtreeStream stream_libFunctionNoClass=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionNoClass");
        try {
            {
            pushFollow(FOLLOW_libFunctionWithClass_in_libFunction9334);
            libFunctionWithClass651=libFunctionWithClass();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_libFunctionWithClass.add(libFunctionWithClass651.getTree());
            loop239:
            do {
                int alt239=2;
                int LA239_0 = input.LA(1);
                if ( (LA239_0==DOT) ) {
                    alt239=1;
                }
                switch (alt239) {
            	case 1 :
            	    {
            	    DOT652=(Token)match(input,DOT,FOLLOW_DOT_in_libFunction9337); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT652);
            	    pushFollow(FOLLOW_libFunctionNoClass_in_libFunction9339);
            	    libFunctionNoClass653=libFunctionNoClass();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass653.getTree());
            	    }
            	    break;
            	default :
            	    break loop239;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LIB_FUNC_CHAIN, "LIB_FUNC_CHAIN"), root_1);
                adaptor.addChild(root_1, stream_libFunctionWithClass.nextTree());
                while ( stream_libFunctionNoClass.hasNext() ) {
                    adaptor.addChild(root_1, stream_libFunctionNoClass.nextTree());
                }
                stream_libFunctionNoClass.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class libFunctionWithClass_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.libFunctionWithClass_return libFunctionWithClass() throws RecognitionException {
        EsperEPL2GrammarParser.libFunctionWithClass_return retval = new EsperEPL2GrammarParser.libFunctionWithClass_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token DOT655=null;
        Token LPAREN657=null;
        Token RPAREN659=null;
        EsperEPL2GrammarParser.classIdentifierNonGreedy_return classIdentifierNonGreedy654 = null;
        EsperEPL2GrammarParser.funcIdent_return funcIdent656 = null;
        EsperEPL2GrammarParser.libFunctionArgs_return libFunctionArgs658 = null;
        CommonTree DOT655_tree=null;
        CommonTree LPAREN657_tree=null;
        CommonTree RPAREN659_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_libFunctionArgs=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionArgs");
        RewriteRuleSubtreeStream stream_classIdentifierNonGreedy=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifierNonGreedy");
        RewriteRuleSubtreeStream stream_funcIdent=new RewriteRuleSubtreeStream(adaptor,"rule funcIdent");
        try {
            {
            int alt240=2;
            int LA240_0 = input.LA(1);
            if ( (LA240_0==IDENT) ) {
                int LA240_1 = input.LA(2);
                if ( (LA240_1==DOT) ) {
                    alt240=1;
                }
            }
            else if ( (LA240_0==TICKED_STRING_LITERAL) ) {
                int LA240_2 = input.LA(2);
                if ( (LA240_2==DOT) ) {
                    alt240=1;
                }
            }
            switch (alt240) {
                case 1 :
                    {
                    pushFollow(FOLLOW_classIdentifierNonGreedy_in_libFunctionWithClass9369);
                    classIdentifierNonGreedy654=classIdentifierNonGreedy();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_classIdentifierNonGreedy.add(classIdentifierNonGreedy654.getTree());
                    DOT655=(Token)match(input,DOT,FOLLOW_DOT_in_libFunctionWithClass9371); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT655);
                    }
                    break;
            }
            pushFollow(FOLLOW_funcIdent_in_libFunctionWithClass9375);
            funcIdent656=funcIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_funcIdent.add(funcIdent656.getTree());
            LPAREN657=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_libFunctionWithClass9377); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN657);
            int alt241=2;
            int LA241_0 = input.LA(1);
            if ( (LA241_0==WINDOW||LA241_0==ESCAPE||(LA241_0>=NOT_EXPR && LA241_0<=EVERY_EXPR)||LA241_0==WHERE||(LA241_0>=SUM && LA241_0<=COUNT)||LA241_0==CASE||LA241_0==OUTER||(LA241_0>=JOIN && LA241_0<=FULL)||(LA241_0>=DISTINCT && LA241_0<=ALL)||(LA241_0>=EVENTS && LA241_0<=LAST)||(LA241_0>=UNIDIRECTIONAL && LA241_0<=CURRENT_TIMESTAMP)||LA241_0==SNAPSHOT||(LA241_0>=VARIABLE && LA241_0<=INDEX)||(LA241_0>=BOOLEAN_TRUE && LA241_0<=VALUE_NULL)||(LA241_0>=DEFINE && LA241_0<=MATCHES)||LA241_0==WHILE||(LA241_0>=MERGE && LA241_0<=MATCHED)||LA241_0==NUM_DOUBLE||(LA241_0>=IDENT && LA241_0<=LCURLY)||LA241_0==LPAREN||(LA241_0>=PLUS && LA241_0<=QUESTION)||(LA241_0>=STRING_LITERAL && LA241_0<=QUOTED_STRING_LITERAL)||LA241_0==MINUS||LA241_0==NUM_INT||(LA241_0>=TICKED_STRING_LITERAL && LA241_0<=NUM_FLOAT)) ) {
                alt241=1;
            }
            switch (alt241) {
                case 1 :
                    {
                    pushFollow(FOLLOW_libFunctionArgs_in_libFunctionWithClass9380);
                    libFunctionArgs658=libFunctionArgs();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_libFunctionArgs.add(libFunctionArgs658.getTree());
                    }
                    break;
            }
            RPAREN659=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_libFunctionWithClass9384); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN659);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LIB_FUNCTION, "LIB_FUNCTION"), root_1);
                if ( stream_classIdentifierNonGreedy.hasNext() ) {
                    adaptor.addChild(root_1, stream_classIdentifierNonGreedy.nextTree());
                }
                stream_classIdentifierNonGreedy.reset();
                adaptor.addChild(root_1, stream_funcIdent.nextTree());
                if ( stream_libFunctionArgs.hasNext() ) {
                    adaptor.addChild(root_1, stream_libFunctionArgs.nextTree());
                }
                stream_libFunctionArgs.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class libFunctionNoClass_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass() throws RecognitionException {
        EsperEPL2GrammarParser.libFunctionNoClass_return retval = new EsperEPL2GrammarParser.libFunctionNoClass_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LPAREN661=null;
        Token RPAREN663=null;
        EsperEPL2GrammarParser.funcIdent_return funcIdent660 = null;
        EsperEPL2GrammarParser.libFunctionArgs_return libFunctionArgs662 = null;
        CommonTree LPAREN661_tree=null;
        CommonTree RPAREN663_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_libFunctionArgs=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionArgs");
        RewriteRuleSubtreeStream stream_funcIdent=new RewriteRuleSubtreeStream(adaptor,"rule funcIdent");
        try {
            {
            pushFollow(FOLLOW_funcIdent_in_libFunctionNoClass9413);
            funcIdent660=funcIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_funcIdent.add(funcIdent660.getTree());
            LPAREN661=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_libFunctionNoClass9415); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN661);
            int alt242=2;
            int LA242_0 = input.LA(1);
            if ( (LA242_0==WINDOW||LA242_0==ESCAPE||(LA242_0>=NOT_EXPR && LA242_0<=EVERY_EXPR)||LA242_0==WHERE||(LA242_0>=SUM && LA242_0<=COUNT)||LA242_0==CASE||LA242_0==OUTER||(LA242_0>=JOIN && LA242_0<=FULL)||(LA242_0>=DISTINCT && LA242_0<=ALL)||(LA242_0>=EVENTS && LA242_0<=LAST)||(LA242_0>=UNIDIRECTIONAL && LA242_0<=CURRENT_TIMESTAMP)||LA242_0==SNAPSHOT||(LA242_0>=VARIABLE && LA242_0<=INDEX)||(LA242_0>=BOOLEAN_TRUE && LA242_0<=VALUE_NULL)||(LA242_0>=DEFINE && LA242_0<=MATCHES)||LA242_0==WHILE||(LA242_0>=MERGE && LA242_0<=MATCHED)||LA242_0==NUM_DOUBLE||(LA242_0>=IDENT && LA242_0<=LCURLY)||LA242_0==LPAREN||(LA242_0>=PLUS && LA242_0<=QUESTION)||(LA242_0>=STRING_LITERAL && LA242_0<=QUOTED_STRING_LITERAL)||LA242_0==MINUS||LA242_0==NUM_INT||(LA242_0>=TICKED_STRING_LITERAL && LA242_0<=NUM_FLOAT)) ) {
                alt242=1;
            }
            switch (alt242) {
                case 1 :
                    {
                    pushFollow(FOLLOW_libFunctionArgs_in_libFunctionNoClass9418);
                    libFunctionArgs662=libFunctionArgs();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_libFunctionArgs.add(libFunctionArgs662.getTree());
                    }
                    break;
            }
            RPAREN663=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_libFunctionNoClass9422); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN663);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LIB_FUNCTION, "LIB_FUNCTION"), root_1);
                adaptor.addChild(root_1, stream_funcIdent.nextTree());
                if ( stream_libFunctionArgs.hasNext() ) {
                    adaptor.addChild(root_1, stream_libFunctionArgs.nextTree());
                }
                stream_libFunctionArgs.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class funcIdent_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.funcIdent_return funcIdent() throws RecognitionException {
        EsperEPL2GrammarParser.funcIdent_return retval = new EsperEPL2GrammarParser.funcIdent_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token max=null;
        Token min=null;
        Token w=null;
        EsperEPL2GrammarParser.escapableIdent_return escapableIdent664 = null;
        CommonTree max_tree=null;
        CommonTree min_tree=null;
        CommonTree w_tree=null;
        RewriteRuleTokenStream stream_MAX=new RewriteRuleTokenStream(adaptor,"token MAX");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_MIN=new RewriteRuleTokenStream(adaptor,"token MIN");
        try {
            int alt243=4;
            switch ( input.LA(1) ) {
            case IDENT:
            case TICKED_STRING_LITERAL:
                {
                alt243=1;
                }
                break;
            case MAX:
                {
                alt243=2;
                }
                break;
            case MIN:
                {
                alt243=3;
                }
                break;
            case WHERE:
                {
                alt243=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 243, 0, input);
                throw nvae;
            }
            switch (alt243) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_escapableIdent_in_funcIdent9448);
                    escapableIdent664=escapableIdent();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, escapableIdent664.getTree());
                    }
                    break;
                case 2 :
                    {
                    max=(Token)match(input,MAX,FOLLOW_MAX_in_funcIdent9455); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MAX.add(max);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(IDENT, max));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    {
                    min=(Token)match(input,MIN,FOLLOW_MIN_in_funcIdent9467); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MIN.add(min);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(IDENT, min));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    {
                    w=(Token)match(input,WHERE,FOLLOW_WHERE_in_funcIdent9479); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(w);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(IDENT, w));
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class libFunctionArgs_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.libFunctionArgs_return libFunctionArgs() throws RecognitionException {
        EsperEPL2GrammarParser.libFunctionArgs_return retval = new EsperEPL2GrammarParser.libFunctionArgs_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ALL665=null;
        Token DISTINCT666=null;
        Token COMMA668=null;
        EsperEPL2GrammarParser.libFunctionArgItem_return libFunctionArgItem667 = null;
        EsperEPL2GrammarParser.libFunctionArgItem_return libFunctionArgItem669 = null;
        CommonTree ALL665_tree=null;
        CommonTree DISTINCT666_tree=null;
        CommonTree COMMA668_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            int alt244=3;
            int LA244_0 = input.LA(1);
            if ( (LA244_0==ALL) ) {
                alt244=1;
            }
            else if ( (LA244_0==DISTINCT) ) {
                alt244=2;
            }
            switch (alt244) {
                case 1 :
                    {
                    ALL665=(Token)match(input,ALL,FOLLOW_ALL_in_libFunctionArgs9497); if (state.failed) return retval;
                    }
                    break;
                case 2 :
                    {
                    DISTINCT666=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_libFunctionArgs9502); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DISTINCT666_tree = (CommonTree)adaptor.create(DISTINCT666);
                    adaptor.addChild(root_0, DISTINCT666_tree);
                    }
                    }
                    break;
            }
            pushFollow(FOLLOW_libFunctionArgItem_in_libFunctionArgs9506);
            libFunctionArgItem667=libFunctionArgItem();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, libFunctionArgItem667.getTree());
            loop245:
            do {
                int alt245=2;
                int LA245_0 = input.LA(1);
                if ( (LA245_0==COMMA) ) {
                    alt245=1;
                }
                switch (alt245) {
            	case 1 :
            	    {
            	    COMMA668=(Token)match(input,COMMA,FOLLOW_COMMA_in_libFunctionArgs9509); if (state.failed) return retval;
            	    pushFollow(FOLLOW_libFunctionArgItem_in_libFunctionArgs9512);
            	    libFunctionArgItem669=libFunctionArgItem();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, libFunctionArgItem669.getTree());
            	    }
            	    break;
            	default :
            	    break loop245;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class libFunctionArgItem_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.libFunctionArgItem_return libFunctionArgItem() throws RecognitionException {
        EsperEPL2GrammarParser.libFunctionArgItem_return retval = new EsperEPL2GrammarParser.libFunctionArgItem_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.expressionLambdaDecl_return expressionLambdaDecl670 = null;
        EsperEPL2GrammarParser.expression_return expression671 = null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            int alt246=2;
            int LA246_0 = input.LA(1);
            if ( (LA246_0==IDENT) ) {
                int LA246_1 = input.LA(2);
                if ( (LA246_1==GOES) ) {
                    alt246=1;
                }
            }
            else if ( (LA246_0==LPAREN) ) {
                int LA246_2 = input.LA(2);
                if ( (LA246_2==IDENT) ) {
                    int LA246_102 = input.LA(3);
                    if ( (LA246_102==COMMA) ) {
                        alt246=1;
                    }
                    else if ( (LA246_102==RPAREN) ) {
                        int LA246_173 = input.LA(4);
                        if ( (LA246_173==GOES) ) {
                            alt246=1;
                        }
                    }
                }
            }
            switch (alt246) {
                case 1 :
                    {
                    pushFollow(FOLLOW_expressionLambdaDecl_in_libFunctionArgItem9526);
                    expressionLambdaDecl670=expressionLambdaDecl();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionLambdaDecl670.getTree());
                    }
                    break;
            }
            pushFollow(FOLLOW_expression_in_libFunctionArgItem9529);
            expression671=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression671.getTree());
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class betweenList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.betweenList_return betweenList() throws RecognitionException {
        EsperEPL2GrammarParser.betweenList_return retval = new EsperEPL2GrammarParser.betweenList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token AND_EXPR673=null;
        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr672 = null;
        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr674 = null;
        CommonTree AND_EXPR673_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_concatenationExpr_in_betweenList9540);
            concatenationExpr672=concatenationExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, concatenationExpr672.getTree());
            AND_EXPR673=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_betweenList9542); if (state.failed) return retval;
            pushFollow(FOLLOW_concatenationExpr_in_betweenList9545);
            concatenationExpr674=concatenationExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, concatenationExpr674.getTree());
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class patternExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.patternExpression_return patternExpression() throws RecognitionException {
        EsperEPL2GrammarParser.patternExpression_return retval = new EsperEPL2GrammarParser.patternExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.followedByExpression_return followedByExpression675 = null;
         paraphrases.push("pattern expression"); 
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_followedByExpression_in_patternExpression9573);
            followedByExpression675=followedByExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, followedByExpression675.getTree());
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class followedByExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.followedByExpression_return followedByExpression() throws RecognitionException {
        EsperEPL2GrammarParser.followedByExpression_return retval = new EsperEPL2GrammarParser.followedByExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.orExpression_return orExpression676 = null;
        EsperEPL2GrammarParser.followedByRepeat_return followedByRepeat677 = null;
        RewriteRuleSubtreeStream stream_followedByRepeat=new RewriteRuleSubtreeStream(adaptor,"rule followedByRepeat");
        RewriteRuleSubtreeStream stream_orExpression=new RewriteRuleSubtreeStream(adaptor,"rule orExpression");
         boolean fb = false; 
        try {
            {
            pushFollow(FOLLOW_orExpression_in_followedByExpression9592);
            orExpression676=orExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_orExpression.add(orExpression676.getTree());
            loop247:
            do {
                int alt247=2;
                int LA247_0 = input.LA(1);
                if ( ((LA247_0>=FOLLOWED_BY && LA247_0<=FOLLOWMAX_BEGIN)) ) {
                    alt247=1;
                }
                switch (alt247) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_followedByRepeat_in_followedByExpression9595);
            	    followedByRepeat677=followedByRepeat();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_followedByRepeat.add(followedByRepeat677.getTree());
            	    if ( state.backtracking==0 ) {
            	       fb = true; 
            	    }
            	    }
            	    break;
            	default :
            	    break loop247;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (fb == true) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FOLLOWED_BY_EXPR, "FOLLOWED_BY_EXPR"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FOLLOWED_BY_ITEM, "FOLLOWED_BY_ITEM"), root_2);
                adaptor.addChild(root_2, stream_orExpression.nextTree());
                adaptor.addChild(root_1, root_2);
                }
                if ( !(stream_followedByRepeat.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_followedByRepeat.hasNext() ) {
                    adaptor.addChild(root_1, stream_followedByRepeat.nextTree());
                }
                stream_followedByRepeat.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_orExpression.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class followedByRepeat_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.followedByRepeat_return followedByRepeat() throws RecognitionException {
        EsperEPL2GrammarParser.followedByRepeat_return retval = new EsperEPL2GrammarParser.followedByRepeat_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token f=null;
        Token g=null;
        Token FOLLOWMAX_END679=null;
        EsperEPL2GrammarParser.expression_return expression678 = null;
        EsperEPL2GrammarParser.orExpression_return orExpression680 = null;
        CommonTree f_tree=null;
        CommonTree g_tree=null;
        CommonTree FOLLOWMAX_END679_tree=null;
        RewriteRuleTokenStream stream_FOLLOWED_BY=new RewriteRuleTokenStream(adaptor,"token FOLLOWED_BY");
        RewriteRuleTokenStream stream_FOLLOWMAX_END=new RewriteRuleTokenStream(adaptor,"token FOLLOWMAX_END");
        RewriteRuleTokenStream stream_FOLLOWMAX_BEGIN=new RewriteRuleTokenStream(adaptor,"token FOLLOWMAX_BEGIN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_orExpression=new RewriteRuleSubtreeStream(adaptor,"rule orExpression");
        try {
            {
            int alt248=2;
            int LA248_0 = input.LA(1);
            if ( (LA248_0==FOLLOWED_BY) ) {
                alt248=1;
            }
            else if ( (LA248_0==FOLLOWMAX_BEGIN) ) {
                alt248=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 248, 0, input);
                throw nvae;
            }
            switch (alt248) {
                case 1 :
                    {
                    f=(Token)match(input,FOLLOWED_BY,FOLLOW_FOLLOWED_BY_in_followedByRepeat9648); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FOLLOWED_BY.add(f);
                    }
                    break;
                case 2 :
                    {
                    {
                    g=(Token)match(input,FOLLOWMAX_BEGIN,FOLLOW_FOLLOWMAX_BEGIN_in_followedByRepeat9655); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FOLLOWMAX_BEGIN.add(g);
                    pushFollow(FOLLOW_expression_in_followedByRepeat9657);
                    expression678=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression678.getTree());
                    FOLLOWMAX_END679=(Token)match(input,FOLLOWMAX_END,FOLLOW_FOLLOWMAX_END_in_followedByRepeat9659); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FOLLOWMAX_END.add(FOLLOWMAX_END679);
                    }
                    }
                    break;
            }
            pushFollow(FOLLOW_orExpression_in_followedByRepeat9663);
            orExpression680=orExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_orExpression.add(orExpression680.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FOLLOWED_BY_ITEM, "FOLLOWED_BY_ITEM"), root_1);
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_1, stream_orExpression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class orExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.orExpression_return orExpression() throws RecognitionException {
        EsperEPL2GrammarParser.orExpression_return retval = new EsperEPL2GrammarParser.orExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token o=null;
        EsperEPL2GrammarParser.andExpression_return andExpression681 = null;
        EsperEPL2GrammarParser.andExpression_return andExpression682 = null;
        CommonTree o_tree=null;
        RewriteRuleTokenStream stream_OR_EXPR=new RewriteRuleTokenStream(adaptor,"token OR_EXPR");
        RewriteRuleSubtreeStream stream_andExpression=new RewriteRuleSubtreeStream(adaptor,"rule andExpression");
        try {
            {
            pushFollow(FOLLOW_andExpression_in_orExpression9692);
            andExpression681=andExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_andExpression.add(andExpression681.getTree());
            loop249:
            do {
                int alt249=2;
                int LA249_0 = input.LA(1);
                if ( (LA249_0==OR_EXPR) ) {
                    alt249=1;
                }
                switch (alt249) {
            	case 1 :
            	    {
            	    o=(Token)match(input,OR_EXPR,FOLLOW_OR_EXPR_in_orExpression9697); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_OR_EXPR.add(o);
            	    pushFollow(FOLLOW_andExpression_in_orExpression9699);
            	    andExpression682=andExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_andExpression.add(andExpression682.getTree());
            	    }
            	    break;
            	default :
            	    break loop249;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (o != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_OR_EXPR.nextNode(), root_1);
                if ( !(stream_andExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_andExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_andExpression.nextTree());
                }
                stream_andExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_andExpression.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class andExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.andExpression_return andExpression() throws RecognitionException {
        EsperEPL2GrammarParser.andExpression_return retval = new EsperEPL2GrammarParser.andExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token a=null;
        EsperEPL2GrammarParser.matchUntilExpression_return matchUntilExpression683 = null;
        EsperEPL2GrammarParser.matchUntilExpression_return matchUntilExpression684 = null;
        CommonTree a_tree=null;
        RewriteRuleTokenStream stream_AND_EXPR=new RewriteRuleTokenStream(adaptor,"token AND_EXPR");
        RewriteRuleSubtreeStream stream_matchUntilExpression=new RewriteRuleSubtreeStream(adaptor,"rule matchUntilExpression");
        try {
            {
            pushFollow(FOLLOW_matchUntilExpression_in_andExpression9731);
            matchUntilExpression683=matchUntilExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchUntilExpression.add(matchUntilExpression683.getTree());
            loop250:
            do {
                int alt250=2;
                int LA250_0 = input.LA(1);
                if ( (LA250_0==AND_EXPR) ) {
                    alt250=1;
                }
                switch (alt250) {
            	case 1 :
            	    {
            	    a=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_andExpression9736); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_AND_EXPR.add(a);
            	    pushFollow(FOLLOW_matchUntilExpression_in_andExpression9738);
            	    matchUntilExpression684=matchUntilExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_matchUntilExpression.add(matchUntilExpression684.getTree());
            	    }
            	    break;
            	default :
            	    break loop250;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (a != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_AND_EXPR.nextNode(), root_1);
                if ( !(stream_matchUntilExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_matchUntilExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchUntilExpression.nextTree());
                }
                stream_matchUntilExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_matchUntilExpression.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchUntilExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchUntilExpression_return matchUntilExpression() throws RecognitionException {
        EsperEPL2GrammarParser.matchUntilExpression_return retval = new EsperEPL2GrammarParser.matchUntilExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token a=null;
        EsperEPL2GrammarParser.matchUntilRange_return r = null;
        EsperEPL2GrammarParser.qualifyExpression_return qualifyExpression685 = null;
        EsperEPL2GrammarParser.qualifyExpression_return qualifyExpression686 = null;
        CommonTree a_tree=null;
        RewriteRuleTokenStream stream_UNTIL=new RewriteRuleTokenStream(adaptor,"token UNTIL");
        RewriteRuleSubtreeStream stream_qualifyExpression=new RewriteRuleSubtreeStream(adaptor,"rule qualifyExpression");
        RewriteRuleSubtreeStream stream_matchUntilRange=new RewriteRuleSubtreeStream(adaptor,"rule matchUntilRange");
        try {
            {
            int alt251=2;
            int LA251_0 = input.LA(1);
            if ( (LA251_0==LBRACK) ) {
                alt251=1;
            }
            switch (alt251) {
                case 1 :
                    {
                    pushFollow(FOLLOW_matchUntilRange_in_matchUntilExpression9773);
                    r=matchUntilRange();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_matchUntilRange.add(r.getTree());
                    }
                    break;
            }
            pushFollow(FOLLOW_qualifyExpression_in_matchUntilExpression9777);
            qualifyExpression685=qualifyExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_qualifyExpression.add(qualifyExpression685.getTree());
            int alt252=2;
            int LA252_0 = input.LA(1);
            if ( (LA252_0==UNTIL) ) {
                alt252=1;
            }
            switch (alt252) {
                case 1 :
                    {
                    a=(Token)match(input,UNTIL,FOLLOW_UNTIL_in_matchUntilExpression9782); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_UNTIL.add(a);
                    pushFollow(FOLLOW_qualifyExpression_in_matchUntilExpression9784);
                    qualifyExpression686=qualifyExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_qualifyExpression.add(qualifyExpression686.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (r != null && a != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_1);
                adaptor.addChild(root_1, stream_matchUntilRange.nextTree());
                if ( !(stream_qualifyExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_qualifyExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_qualifyExpression.nextTree());
                }
                stream_qualifyExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (r != null && a == null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_1);
                adaptor.addChild(root_1, stream_matchUntilRange.nextTree());
                adaptor.addChild(root_1, stream_qualifyExpression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (a != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_1);
                if ( !(stream_qualifyExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_qualifyExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_qualifyExpression.nextTree());
                }
                stream_qualifyExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_qualifyExpression.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class qualifyExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.qualifyExpression_return qualifyExpression() throws RecognitionException {
        EsperEPL2GrammarParser.qualifyExpression_return retval = new EsperEPL2GrammarParser.qualifyExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token e=null;
        Token n=null;
        Token d=null;
        EsperEPL2GrammarParser.matchUntilRange_return r = null;
        EsperEPL2GrammarParser.distinctExpressionList_return distinctExpressionList687 = null;
        EsperEPL2GrammarParser.guardPostFix_return guardPostFix688 = null;
        CommonTree e_tree=null;
        CommonTree n_tree=null;
        CommonTree d_tree=null;
        RewriteRuleTokenStream stream_NOT_EXPR=new RewriteRuleTokenStream(adaptor,"token NOT_EXPR");
        RewriteRuleTokenStream stream_EVERY_EXPR=new RewriteRuleTokenStream(adaptor,"token EVERY_EXPR");
        RewriteRuleTokenStream stream_EVERY_DISTINCT_EXPR=new RewriteRuleTokenStream(adaptor,"token EVERY_DISTINCT_EXPR");
        RewriteRuleSubtreeStream stream_distinctExpressionList=new RewriteRuleSubtreeStream(adaptor,"rule distinctExpressionList");
        RewriteRuleSubtreeStream stream_guardPostFix=new RewriteRuleSubtreeStream(adaptor,"rule guardPostFix");
        RewriteRuleSubtreeStream stream_matchUntilRange=new RewriteRuleSubtreeStream(adaptor,"rule matchUntilRange");
        try {
            {
            int alt255=2;
            int LA255_0 = input.LA(1);
            if ( ((LA255_0>=NOT_EXPR && LA255_0<=EVERY_DISTINCT_EXPR)) ) {
                alt255=1;
            }
            switch (alt255) {
                case 1 :
                    {
                    int alt253=3;
                    switch ( input.LA(1) ) {
                    case EVERY_EXPR:
                        {
                        alt253=1;
                        }
                        break;
                    case NOT_EXPR:
                        {
                        alt253=2;
                        }
                        break;
                    case EVERY_DISTINCT_EXPR:
                        {
                        alt253=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 253, 0, input);
                        throw nvae;
                    }
                    switch (alt253) {
                        case 1 :
                            {
                            e=(Token)match(input,EVERY_EXPR,FOLLOW_EVERY_EXPR_in_qualifyExpression9849); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_EVERY_EXPR.add(e);
                            }
                            break;
                        case 2 :
                            {
                            n=(Token)match(input,NOT_EXPR,FOLLOW_NOT_EXPR_in_qualifyExpression9855); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NOT_EXPR.add(n);
                            }
                            break;
                        case 3 :
                            {
                            d=(Token)match(input,EVERY_DISTINCT_EXPR,FOLLOW_EVERY_DISTINCT_EXPR_in_qualifyExpression9861); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_EVERY_DISTINCT_EXPR.add(d);
                            pushFollow(FOLLOW_distinctExpressionList_in_qualifyExpression9863);
                            distinctExpressionList687=distinctExpressionList();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_distinctExpressionList.add(distinctExpressionList687.getTree());
                            }
                            break;
                    }
                    int alt254=2;
                    int LA254_0 = input.LA(1);
                    if ( (LA254_0==LBRACK) ) {
                        alt254=1;
                    }
                    switch (alt254) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_matchUntilRange_in_qualifyExpression9869);
                            r=matchUntilRange();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_matchUntilRange.add(r.getTree());
                            }
                            break;
                    }
                    }
                    break;
            }
            pushFollow(FOLLOW_guardPostFix_in_qualifyExpression9878);
            guardPostFix688=guardPostFix();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_guardPostFix.add(guardPostFix688.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (e != null && r == null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_EVERY_EXPR.nextNode(), root_1);
                adaptor.addChild(root_1, stream_guardPostFix.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (n != null && r == null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATTERN_NOT_EXPR, "PATTERN_NOT_EXPR"), root_1);
                adaptor.addChild(root_1, stream_guardPostFix.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (d != null && r == null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_EVERY_DISTINCT_EXPR.nextNode(), root_1);
                adaptor.addChild(root_1, stream_distinctExpressionList.nextTree());
                adaptor.addChild(root_1, stream_guardPostFix.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (e != null && r != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_EVERY_EXPR.nextNode(), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_2);
                adaptor.addChild(root_2, stream_matchUntilRange.nextTree());
                adaptor.addChild(root_2, stream_guardPostFix.nextTree());
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (n != null && r != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATTERN_NOT_EXPR, "PATTERN_NOT_EXPR"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_2);
                adaptor.addChild(root_2, stream_matchUntilRange.nextTree());
                adaptor.addChild(root_2, stream_guardPostFix.nextTree());
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (d != null && r != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_EVERY_DISTINCT_EXPR.nextNode(), root_1);
                adaptor.addChild(root_1, stream_distinctExpressionList.nextTree());
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_2);
                adaptor.addChild(root_2, stream_matchUntilRange.nextTree());
                adaptor.addChild(root_2, stream_guardPostFix.nextTree());
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_guardPostFix.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class distinctExpressionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.distinctExpressionList_return distinctExpressionList() throws RecognitionException {
        EsperEPL2GrammarParser.distinctExpressionList_return retval = new EsperEPL2GrammarParser.distinctExpressionList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LPAREN689=null;
        Token COMMA691=null;
        Token RPAREN693=null;
        EsperEPL2GrammarParser.distinctExpressionAtom_return distinctExpressionAtom690 = null;
        EsperEPL2GrammarParser.distinctExpressionAtom_return distinctExpressionAtom692 = null;
        CommonTree LPAREN689_tree=null;
        CommonTree COMMA691_tree=null;
        CommonTree RPAREN693_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_distinctExpressionAtom=new RewriteRuleSubtreeStream(adaptor,"rule distinctExpressionAtom");
        try {
            {
            LPAREN689=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_distinctExpressionList9993); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN689);
            pushFollow(FOLLOW_distinctExpressionAtom_in_distinctExpressionList9995);
            distinctExpressionAtom690=distinctExpressionAtom();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_distinctExpressionAtom.add(distinctExpressionAtom690.getTree());
            loop256:
            do {
                int alt256=2;
                int LA256_0 = input.LA(1);
                if ( (LA256_0==COMMA) ) {
                    alt256=1;
                }
                switch (alt256) {
            	case 1 :
            	    {
            	    COMMA691=(Token)match(input,COMMA,FOLLOW_COMMA_in_distinctExpressionList9998); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA691);
            	    pushFollow(FOLLOW_distinctExpressionAtom_in_distinctExpressionList10000);
            	    distinctExpressionAtom692=distinctExpressionAtom();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_distinctExpressionAtom.add(distinctExpressionAtom692.getTree());
            	    }
            	    break;
            	default :
            	    break loop256;
                }
            } while (true);
            RPAREN693=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_distinctExpressionList10004); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN693);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATTERN_EVERY_DISTINCT_EXPR, "PATTERN_EVERY_DISTINCT_EXPR"), root_1);
                if ( !(stream_distinctExpressionAtom.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_distinctExpressionAtom.hasNext() ) {
                    adaptor.addChild(root_1, stream_distinctExpressionAtom.nextTree());
                }
                stream_distinctExpressionAtom.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class distinctExpressionAtom_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.distinctExpressionAtom_return distinctExpressionAtom() throws RecognitionException {
        EsperEPL2GrammarParser.distinctExpressionAtom_return retval = new EsperEPL2GrammarParser.distinctExpressionAtom_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime694 = null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_expressionWithTime_in_distinctExpressionAtom10027);
            expressionWithTime694=expressionWithTime();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionWithTime694.getTree());
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class guardPostFix_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.guardPostFix_return guardPostFix() throws RecognitionException {
        EsperEPL2GrammarParser.guardPostFix_return retval = new EsperEPL2GrammarParser.guardPostFix_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token l=null;
        Token wh=null;
        Token wi=null;
        Token RPAREN697=null;
        EsperEPL2GrammarParser.atomicExpression_return atomicExpression695 = null;
        EsperEPL2GrammarParser.patternExpression_return patternExpression696 = null;
        EsperEPL2GrammarParser.guardWhereExpression_return guardWhereExpression698 = null;
        EsperEPL2GrammarParser.guardWhileExpression_return guardWhileExpression699 = null;
        CommonTree l_tree=null;
        CommonTree wh_tree=null;
        CommonTree wi_tree=null;
        CommonTree RPAREN697_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_WHILE=new RewriteRuleTokenStream(adaptor,"token WHILE");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_guardWhileExpression=new RewriteRuleSubtreeStream(adaptor,"rule guardWhileExpression");
        RewriteRuleSubtreeStream stream_atomicExpression=new RewriteRuleSubtreeStream(adaptor,"rule atomicExpression");
        RewriteRuleSubtreeStream stream_guardWhereExpression=new RewriteRuleSubtreeStream(adaptor,"rule guardWhereExpression");
        RewriteRuleSubtreeStream stream_patternExpression=new RewriteRuleSubtreeStream(adaptor,"rule patternExpression");
        try {
            {
            int alt257=2;
            int LA257_0 = input.LA(1);
            if ( (LA257_0==IDENT||LA257_0==TICKED_STRING_LITERAL) ) {
                alt257=1;
            }
            else if ( (LA257_0==LPAREN) ) {
                alt257=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 257, 0, input);
                throw nvae;
            }
            switch (alt257) {
                case 1 :
                    {
                    pushFollow(FOLLOW_atomicExpression_in_guardPostFix10042);
                    atomicExpression695=atomicExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_atomicExpression.add(atomicExpression695.getTree());
                    }
                    break;
                case 2 :
                    {
                    l=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_guardPostFix10048); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(l);
                    pushFollow(FOLLOW_patternExpression_in_guardPostFix10050);
                    patternExpression696=patternExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_patternExpression.add(patternExpression696.getTree());
                    RPAREN697=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_guardPostFix10052); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN697);
                    }
                    break;
            }
            int alt258=3;
            int LA258_0 = input.LA(1);
            if ( (LA258_0==WHERE) ) {
                alt258=1;
            }
            else if ( (LA258_0==WHILE) ) {
                alt258=2;
            }
            switch (alt258) {
                case 1 :
                    {
                    {
                    wh=(Token)match(input,WHERE,FOLLOW_WHERE_in_guardPostFix10059); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(wh);
                    pushFollow(FOLLOW_guardWhereExpression_in_guardPostFix10061);
                    guardWhereExpression698=guardWhereExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_guardWhereExpression.add(guardWhereExpression698.getTree());
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    wi=(Token)match(input,WHILE,FOLLOW_WHILE_in_guardPostFix10069); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHILE.add(wi);
                    pushFollow(FOLLOW_guardWhileExpression_in_guardPostFix10071);
                    guardWhileExpression699=guardWhileExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_guardWhileExpression.add(guardWhileExpression699.getTree());
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (wh != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GUARD_EXPR, "GUARD_EXPR"), root_1);
                if ( stream_atomicExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_atomicExpression.nextTree());
                }
                stream_atomicExpression.reset();
                if ( stream_patternExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_patternExpression.nextTree());
                }
                stream_patternExpression.reset();
                adaptor.addChild(root_1, stream_guardWhereExpression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (wi != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GUARD_EXPR, "GUARD_EXPR"), root_1);
                if ( stream_atomicExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_atomicExpression.nextTree());
                }
                stream_atomicExpression.reset();
                if ( stream_patternExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_patternExpression.nextTree());
                }
                stream_patternExpression.reset();
                adaptor.addChild(root_1, stream_guardWhileExpression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                if ( stream_atomicExpression.hasNext() ) {
                    adaptor.addChild(root_0, stream_atomicExpression.nextTree());
                }
                stream_atomicExpression.reset();
                if ( stream_patternExpression.hasNext() ) {
                    adaptor.addChild(root_0, stream_patternExpression.nextTree());
                }
                stream_patternExpression.reset();
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class atomicExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.atomicExpression_return atomicExpression() throws RecognitionException {
        EsperEPL2GrammarParser.atomicExpression_return retval = new EsperEPL2GrammarParser.atomicExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.observerExpression_return observerExpression700 = null;
        EsperEPL2GrammarParser.patternFilterExpression_return patternFilterExpression701 = null;
        try {
            int alt259=2;
            int LA259_0 = input.LA(1);
            if ( (LA259_0==IDENT) ) {
                int LA259_1 = input.LA(2);
                if ( (LA259_1==COLON) ) {
                    alt259=1;
                }
                else if ( (LA259_1==EOF||(LA259_1>=OR_EXPR && LA259_1<=AND_EXPR)||LA259_1==WHERE||LA259_1==UNTIL||LA259_1==WHILE||(LA259_1>=LPAREN && LA259_1<=RPAREN)||(LA259_1>=EQUALS && LA259_1<=RBRACK)||(LA259_1>=FOLLOWED_BY && LA259_1<=FOLLOWMAX_BEGIN)) ) {
                    alt259=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 259, 1, input);
                    throw nvae;
                }
            }
            else if ( (LA259_0==TICKED_STRING_LITERAL) ) {
                alt259=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 259, 0, input);
                throw nvae;
            }
            switch (alt259) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_observerExpression_in_atomicExpression10133);
                    observerExpression700=observerExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, observerExpression700.getTree());
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_patternFilterExpression_in_atomicExpression10137);
                    patternFilterExpression701=patternFilterExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, patternFilterExpression701.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class observerExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.observerExpression_return observerExpression() throws RecognitionException {
        EsperEPL2GrammarParser.observerExpression_return retval = new EsperEPL2GrammarParser.observerExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ns=null;
        Token nm=null;
        Token a=null;
        Token COLON702=null;
        Token LPAREN703=null;
        Token RPAREN705=null;
        EsperEPL2GrammarParser.expressionWithTimeList_return expressionWithTimeList704 = null;
        CommonTree ns_tree=null;
        CommonTree nm_tree=null;
        CommonTree a_tree=null;
        CommonTree COLON702_tree=null;
        CommonTree LPAREN703_tree=null;
        CommonTree RPAREN705_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_AT=new RewriteRuleTokenStream(adaptor,"token AT");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionWithTimeList=new RewriteRuleSubtreeStream(adaptor,"rule expressionWithTimeList");
        try {
            {
            ns=(Token)match(input,IDENT,FOLLOW_IDENT_in_observerExpression10152); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(ns);
            COLON702=(Token)match(input,COLON,FOLLOW_COLON_in_observerExpression10154); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON702);
            int alt260=2;
            int LA260_0 = input.LA(1);
            if ( (LA260_0==IDENT) ) {
                alt260=1;
            }
            else if ( (LA260_0==AT) ) {
                alt260=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 260, 0, input);
                throw nvae;
            }
            switch (alt260) {
                case 1 :
                    {
                    nm=(Token)match(input,IDENT,FOLLOW_IDENT_in_observerExpression10159); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(nm);
                    }
                    break;
                case 2 :
                    {
                    a=(Token)match(input,AT,FOLLOW_AT_in_observerExpression10165); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AT.add(a);
                    }
                    break;
            }
            LPAREN703=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_observerExpression10168); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN703);
            int alt261=2;
            int LA261_0 = input.LA(1);
            if ( (LA261_0==WINDOW||LA261_0==ESCAPE||(LA261_0>=NOT_EXPR && LA261_0<=EVERY_EXPR)||LA261_0==WHERE||(LA261_0>=SUM && LA261_0<=COUNT)||LA261_0==CASE||LA261_0==OUTER||(LA261_0>=JOIN && LA261_0<=FULL)||(LA261_0>=EVENTS && LA261_0<=LAST)||(LA261_0>=UNIDIRECTIONAL && LA261_0<=CURRENT_TIMESTAMP)||LA261_0==SNAPSHOT||(LA261_0>=VARIABLE && LA261_0<=INDEX)||(LA261_0>=BOOLEAN_TRUE && LA261_0<=VALUE_NULL)||(LA261_0>=DEFINE && LA261_0<=MATCHES)||LA261_0==WHILE||(LA261_0>=MERGE && LA261_0<=MATCHED)||LA261_0==NUM_DOUBLE||(LA261_0>=IDENT && LA261_0<=LCURLY)||LA261_0==LPAREN||LA261_0==LBRACK||LA261_0==STAR||(LA261_0>=PLUS && LA261_0<=QUESTION)||(LA261_0>=STRING_LITERAL && LA261_0<=QUOTED_STRING_LITERAL)||LA261_0==MINUS||LA261_0==NUM_INT||(LA261_0>=TICKED_STRING_LITERAL && LA261_0<=NUM_FLOAT)) ) {
                alt261=1;
            }
            switch (alt261) {
                case 1 :
                    {
                    pushFollow(FOLLOW_expressionWithTimeList_in_observerExpression10170);
                    expressionWithTimeList704=expressionWithTimeList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expressionWithTimeList.add(expressionWithTimeList704.getTree());
                    }
                    break;
            }
            RPAREN705=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_observerExpression10173); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN705);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_ns=new RewriteRuleTokenStream(adaptor,"token ns",ns);
            RewriteRuleTokenStream stream_nm=new RewriteRuleTokenStream(adaptor,"token nm",nm);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (a != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(OBSERVER_EXPR, "OBSERVER_EXPR"), root_1);
                adaptor.addChild(root_1, stream_ns.nextNode());
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IDENT, (a!=null?a.getText():null)), root_2);
                adaptor.addChild(root_1, root_2);
                }
                if ( stream_expressionWithTimeList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionWithTimeList.nextTree());
                }
                stream_expressionWithTimeList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(OBSERVER_EXPR, "OBSERVER_EXPR"), root_1);
                adaptor.addChild(root_1, stream_ns.nextNode());
                adaptor.addChild(root_1, stream_nm.nextNode());
                if ( stream_expressionWithTimeList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionWithTimeList.nextTree());
                }
                stream_expressionWithTimeList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class guardWhereExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.guardWhereExpression_return guardWhereExpression() throws RecognitionException {
        EsperEPL2GrammarParser.guardWhereExpression_return retval = new EsperEPL2GrammarParser.guardWhereExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token IDENT706=null;
        Token COLON707=null;
        Token IDENT708=null;
        Token LPAREN709=null;
        Token RPAREN711=null;
        EsperEPL2GrammarParser.expressionWithTimeList_return expressionWithTimeList710 = null;
        CommonTree IDENT706_tree=null;
        CommonTree COLON707_tree=null;
        CommonTree IDENT708_tree=null;
        CommonTree LPAREN709_tree=null;
        CommonTree RPAREN711_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            IDENT706=(Token)match(input,IDENT,FOLLOW_IDENT_in_guardWhereExpression10222); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IDENT706_tree = (CommonTree)adaptor.create(IDENT706);
            adaptor.addChild(root_0, IDENT706_tree);
            }
            COLON707=(Token)match(input,COLON,FOLLOW_COLON_in_guardWhereExpression10224); if (state.failed) return retval;
            IDENT708=(Token)match(input,IDENT,FOLLOW_IDENT_in_guardWhereExpression10227); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IDENT708_tree = (CommonTree)adaptor.create(IDENT708);
            adaptor.addChild(root_0, IDENT708_tree);
            }
            LPAREN709=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_guardWhereExpression10229); if (state.failed) return retval;
            int alt262=2;
            int LA262_0 = input.LA(1);
            if ( (LA262_0==WINDOW||LA262_0==ESCAPE||(LA262_0>=NOT_EXPR && LA262_0<=EVERY_EXPR)||LA262_0==WHERE||(LA262_0>=SUM && LA262_0<=COUNT)||LA262_0==CASE||LA262_0==OUTER||(LA262_0>=JOIN && LA262_0<=FULL)||(LA262_0>=EVENTS && LA262_0<=LAST)||(LA262_0>=UNIDIRECTIONAL && LA262_0<=CURRENT_TIMESTAMP)||LA262_0==SNAPSHOT||(LA262_0>=VARIABLE && LA262_0<=INDEX)||(LA262_0>=BOOLEAN_TRUE && LA262_0<=VALUE_NULL)||(LA262_0>=DEFINE && LA262_0<=MATCHES)||LA262_0==WHILE||(LA262_0>=MERGE && LA262_0<=MATCHED)||LA262_0==NUM_DOUBLE||(LA262_0>=IDENT && LA262_0<=LCURLY)||LA262_0==LPAREN||LA262_0==LBRACK||LA262_0==STAR||(LA262_0>=PLUS && LA262_0<=QUESTION)||(LA262_0>=STRING_LITERAL && LA262_0<=QUOTED_STRING_LITERAL)||LA262_0==MINUS||LA262_0==NUM_INT||(LA262_0>=TICKED_STRING_LITERAL && LA262_0<=NUM_FLOAT)) ) {
                alt262=1;
            }
            switch (alt262) {
                case 1 :
                    {
                    pushFollow(FOLLOW_expressionWithTimeList_in_guardWhereExpression10233);
                    expressionWithTimeList710=expressionWithTimeList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionWithTimeList710.getTree());
                    }
                    break;
            }
            RPAREN711=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_guardWhereExpression10237); if (state.failed) return retval;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class guardWhileExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.guardWhileExpression_return guardWhileExpression() throws RecognitionException {
        EsperEPL2GrammarParser.guardWhileExpression_return retval = new EsperEPL2GrammarParser.guardWhileExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LPAREN712=null;
        Token RPAREN714=null;
        EsperEPL2GrammarParser.expression_return expression713 = null;
        CommonTree LPAREN712_tree=null;
        CommonTree RPAREN714_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            LPAREN712=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_guardWhileExpression10250); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_guardWhileExpression10253);
            expression713=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression713.getTree());
            RPAREN714=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_guardWhileExpression10255); if (state.failed) return retval;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchUntilRange_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchUntilRange_return matchUntilRange() throws RecognitionException {
        EsperEPL2GrammarParser.matchUntilRange_return retval = new EsperEPL2GrammarParser.matchUntilRange_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token c1=null;
        Token c2=null;
        Token LBRACK715=null;
        Token RBRACK719=null;
        EsperEPL2GrammarParser.expression_return expression716 = null;
        EsperEPL2GrammarParser.expression_return expression717 = null;
        EsperEPL2GrammarParser.expression_return expression718 = null;
        CommonTree c1_tree=null;
        CommonTree c2_tree=null;
        CommonTree LBRACK715_tree=null;
        CommonTree RBRACK719_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
         Boolean isopen = true; 
        try {
            {
            LBRACK715=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_matchUntilRange10276); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK715);
            int alt265=2;
            int LA265_0 = input.LA(1);
            if ( (LA265_0==WINDOW||LA265_0==ESCAPE||(LA265_0>=NOT_EXPR && LA265_0<=EVERY_EXPR)||LA265_0==WHERE||(LA265_0>=SUM && LA265_0<=COUNT)||LA265_0==CASE||LA265_0==OUTER||(LA265_0>=JOIN && LA265_0<=FULL)||(LA265_0>=EVENTS && LA265_0<=LAST)||(LA265_0>=UNIDIRECTIONAL && LA265_0<=CURRENT_TIMESTAMP)||LA265_0==SNAPSHOT||(LA265_0>=VARIABLE && LA265_0<=INDEX)||(LA265_0>=BOOLEAN_TRUE && LA265_0<=VALUE_NULL)||(LA265_0>=DEFINE && LA265_0<=MATCHES)||LA265_0==WHILE||(LA265_0>=MERGE && LA265_0<=MATCHED)||LA265_0==NUM_DOUBLE||(LA265_0>=IDENT && LA265_0<=LCURLY)||LA265_0==LPAREN||(LA265_0>=PLUS && LA265_0<=QUESTION)||(LA265_0>=STRING_LITERAL && LA265_0<=QUOTED_STRING_LITERAL)||LA265_0==MINUS||LA265_0==NUM_INT||(LA265_0>=TICKED_STRING_LITERAL && LA265_0<=NUM_FLOAT)) ) {
                alt265=1;
            }
            else if ( (LA265_0==COLON) ) {
                alt265=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 265, 0, input);
                throw nvae;
            }
            switch (alt265) {
                case 1 :
                    {
                    pushFollow(FOLLOW_expression_in_matchUntilRange10283);
                    expression716=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression716.getTree());
                    int alt264=2;
                    int LA264_0 = input.LA(1);
                    if ( (LA264_0==COLON) ) {
                        alt264=1;
                    }
                    switch (alt264) {
                        case 1 :
                            {
                            c1=(Token)match(input,COLON,FOLLOW_COLON_in_matchUntilRange10288); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COLON.add(c1);
                            int alt263=2;
                            int LA263_0 = input.LA(1);
                            if ( (LA263_0==WINDOW||LA263_0==ESCAPE||(LA263_0>=NOT_EXPR && LA263_0<=EVERY_EXPR)||LA263_0==WHERE||(LA263_0>=SUM && LA263_0<=COUNT)||LA263_0==CASE||LA263_0==OUTER||(LA263_0>=JOIN && LA263_0<=FULL)||(LA263_0>=EVENTS && LA263_0<=LAST)||(LA263_0>=UNIDIRECTIONAL && LA263_0<=CURRENT_TIMESTAMP)||LA263_0==SNAPSHOT||(LA263_0>=VARIABLE && LA263_0<=INDEX)||(LA263_0>=BOOLEAN_TRUE && LA263_0<=VALUE_NULL)||(LA263_0>=DEFINE && LA263_0<=MATCHES)||LA263_0==WHILE||(LA263_0>=MERGE && LA263_0<=MATCHED)||LA263_0==NUM_DOUBLE||(LA263_0>=IDENT && LA263_0<=LCURLY)||LA263_0==LPAREN||(LA263_0>=PLUS && LA263_0<=QUESTION)||(LA263_0>=STRING_LITERAL && LA263_0<=QUOTED_STRING_LITERAL)||LA263_0==MINUS||LA263_0==NUM_INT||(LA263_0>=TICKED_STRING_LITERAL && LA263_0<=NUM_FLOAT)) ) {
                                alt263=1;
                            }
                            switch (alt263) {
                                case 1 :
                                    {
                                    pushFollow(FOLLOW_expression_in_matchUntilRange10291);
                                    expression717=expression();
                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_expression.add(expression717.getTree());
                                    if ( state.backtracking==0 ) {
                                       isopen = false; 
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                    }
                    }
                    break;
                case 2 :
                    {
                    c2=(Token)match(input,COLON,FOLLOW_COLON_in_matchUntilRange10311); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COLON.add(c2);
                    pushFollow(FOLLOW_expression_in_matchUntilRange10313);
                    expression718=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression718.getTree());
                    }
                    break;
            }
            RBRACK719=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_matchUntilRange10324); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK719);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (c1 != null && !isopen) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_CLOSED, "MATCH_UNTIL_RANGE_CLOSED"), root_1);
                adaptor.addChild(root_1, stream_expression.nextTree());
                adaptor.addChild(root_1, stream_expression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (c1 != null && isopen) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_HALFOPEN, "MATCH_UNTIL_RANGE_HALFOPEN"), root_1);
                adaptor.addChild(root_1, stream_expression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (c2 != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_HALFCLOSED, "MATCH_UNTIL_RANGE_HALFCLOSED"), root_1);
                adaptor.addChild(root_1, stream_expression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_BOUNDED, "MATCH_UNTIL_RANGE_BOUNDED"), root_1);
                adaptor.addChild(root_1, stream_expression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class eventFilterExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression() throws RecognitionException {
        EsperEPL2GrammarParser.eventFilterExpression_return retval = new EsperEPL2GrammarParser.eventFilterExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token EQUALS720=null;
        Token LPAREN722=null;
        Token RPAREN724=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier721 = null;
        EsperEPL2GrammarParser.expressionList_return expressionList723 = null;
        EsperEPL2GrammarParser.propertyExpression_return propertyExpression725 = null;
        CommonTree i_tree=null;
        CommonTree EQUALS720_tree=null;
        CommonTree LPAREN722_tree=null;
        CommonTree RPAREN724_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_propertyExpression=new RewriteRuleSubtreeStream(adaptor,"rule propertyExpression");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
         paraphrases.push("filter specification"); 
        try {
            {
            int alt266=2;
            int LA266_0 = input.LA(1);
            if ( (LA266_0==IDENT) ) {
                int LA266_1 = input.LA(2);
                if ( (LA266_1==EQUALS) ) {
                    alt266=1;
                }
            }
            switch (alt266) {
                case 1 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_eventFilterExpression10411); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    EQUALS720=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_eventFilterExpression10413); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS720);
                    }
                    break;
            }
            pushFollow(FOLLOW_classIdentifier_in_eventFilterExpression10422);
            classIdentifier721=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier721.getTree());
            int alt268=2;
            int LA268_0 = input.LA(1);
            if ( (LA268_0==LPAREN) ) {
                alt268=1;
            }
            switch (alt268) {
                case 1 :
                    {
                    LPAREN722=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_eventFilterExpression10433); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN722);
                    int alt267=2;
                    int LA267_0 = input.LA(1);
                    if ( (LA267_0==WINDOW||LA267_0==ESCAPE||(LA267_0>=NOT_EXPR && LA267_0<=EVERY_EXPR)||LA267_0==WHERE||(LA267_0>=SUM && LA267_0<=COUNT)||LA267_0==CASE||LA267_0==OUTER||(LA267_0>=JOIN && LA267_0<=FULL)||(LA267_0>=EVENTS && LA267_0<=LAST)||(LA267_0>=UNIDIRECTIONAL && LA267_0<=CURRENT_TIMESTAMP)||LA267_0==SNAPSHOT||(LA267_0>=VARIABLE && LA267_0<=INDEX)||(LA267_0>=BOOLEAN_TRUE && LA267_0<=VALUE_NULL)||(LA267_0>=DEFINE && LA267_0<=MATCHES)||LA267_0==WHILE||(LA267_0>=MERGE && LA267_0<=MATCHED)||LA267_0==NUM_DOUBLE||(LA267_0>=IDENT && LA267_0<=LCURLY)||LA267_0==LPAREN||(LA267_0>=PLUS && LA267_0<=QUESTION)||(LA267_0>=STRING_LITERAL && LA267_0<=QUOTED_STRING_LITERAL)||LA267_0==MINUS||LA267_0==NUM_INT||(LA267_0>=TICKED_STRING_LITERAL && LA267_0<=NUM_FLOAT)) ) {
                        alt267=1;
                    }
                    switch (alt267) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_expressionList_in_eventFilterExpression10435);
                            expressionList723=expressionList();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList723.getTree());
                            }
                            break;
                    }
                    RPAREN724=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_eventFilterExpression10438); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN724);
                    }
                    break;
            }
            int alt269=2;
            int LA269_0 = input.LA(1);
            if ( (LA269_0==LBRACK) ) {
                alt269=1;
            }
            switch (alt269) {
                case 1 :
                    {
                    pushFollow(FOLLOW_propertyExpression_in_eventFilterExpression10450);
                    propertyExpression725=propertyExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_propertyExpression.add(propertyExpression725.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_FILTER_EXPR, "EVENT_FILTER_EXPR"), root_1);
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                if ( stream_propertyExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_propertyExpression.nextTree());
                }
                stream_propertyExpression.reset();
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());
                }
                stream_expressionList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class propertyExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.propertyExpression_return propertyExpression() throws RecognitionException {
        EsperEPL2GrammarParser.propertyExpression_return retval = new EsperEPL2GrammarParser.propertyExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.propertyExpressionAtomic_return propertyExpressionAtomic726 = null;
        EsperEPL2GrammarParser.propertyExpressionAtomic_return propertyExpressionAtomic727 = null;
        RewriteRuleSubtreeStream stream_propertyExpressionAtomic=new RewriteRuleSubtreeStream(adaptor,"rule propertyExpressionAtomic");
        try {
            {
            pushFollow(FOLLOW_propertyExpressionAtomic_in_propertyExpression10495);
            propertyExpressionAtomic726=propertyExpressionAtomic();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_propertyExpressionAtomic.add(propertyExpressionAtomic726.getTree());
            loop270:
            do {
                int alt270=2;
                int LA270_0 = input.LA(1);
                if ( (LA270_0==LBRACK) ) {
                    alt270=1;
                }
                switch (alt270) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_propertyExpressionAtomic_in_propertyExpression10498);
            	    propertyExpressionAtomic727=propertyExpressionAtomic();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_propertyExpressionAtomic.add(propertyExpressionAtomic727.getTree());
            	    }
            	    break;
            	default :
            	    break loop270;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_FILTER_PROPERTY_EXPR, "EVENT_FILTER_PROPERTY_EXPR"), root_1);
                if ( !(stream_propertyExpressionAtomic.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_propertyExpressionAtomic.hasNext() ) {
                    adaptor.addChild(root_1, stream_propertyExpressionAtomic.nextTree());
                }
                stream_propertyExpressionAtomic.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class propertyExpressionAtomic_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.propertyExpressionAtomic_return propertyExpressionAtomic() throws RecognitionException {
        EsperEPL2GrammarParser.propertyExpressionAtomic_return retval = new EsperEPL2GrammarParser.propertyExpressionAtomic_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LBRACK728=null;
        Token SELECT729=null;
        Token FROM731=null;
        Token AS733=null;
        Token IDENT734=null;
        Token WHERE735=null;
        Token RBRACK737=null;
        EsperEPL2GrammarParser.propertySelectionList_return propertySelectionList730 = null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty732 = null;
        EsperEPL2GrammarParser.expression_return expression736 = null;
        CommonTree LBRACK728_tree=null;
        CommonTree SELECT729_tree=null;
        CommonTree FROM731_tree=null;
        CommonTree AS733_tree=null;
        CommonTree IDENT734_tree=null;
        CommonTree WHERE735_tree=null;
        CommonTree RBRACK737_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_FROM=new RewriteRuleTokenStream(adaptor,"token FROM");
        RewriteRuleTokenStream stream_SELECT=new RewriteRuleTokenStream(adaptor,"token SELECT");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_propertySelectionList=new RewriteRuleSubtreeStream(adaptor,"rule propertySelectionList");
        RewriteRuleSubtreeStream stream_eventProperty=new RewriteRuleSubtreeStream(adaptor,"rule eventProperty");
        try {
            {
            LBRACK728=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_propertyExpressionAtomic10528); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK728);
            int alt271=2;
            int LA271_0 = input.LA(1);
            if ( (LA271_0==SELECT) ) {
                alt271=1;
            }
            switch (alt271) {
                case 1 :
                    {
                    SELECT729=(Token)match(input,SELECT,FOLLOW_SELECT_in_propertyExpressionAtomic10531); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SELECT.add(SELECT729);
                    pushFollow(FOLLOW_propertySelectionList_in_propertyExpressionAtomic10533);
                    propertySelectionList730=propertySelectionList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_propertySelectionList.add(propertySelectionList730.getTree());
                    FROM731=(Token)match(input,FROM,FOLLOW_FROM_in_propertyExpressionAtomic10535); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FROM.add(FROM731);
                    }
                    break;
            }
            pushFollow(FOLLOW_eventProperty_in_propertyExpressionAtomic10539);
            eventProperty732=eventProperty();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventProperty.add(eventProperty732.getTree());
            int alt272=2;
            int LA272_0 = input.LA(1);
            if ( (LA272_0==AS) ) {
                alt272=1;
            }
            switch (alt272) {
                case 1 :
                    {
                    AS733=(Token)match(input,AS,FOLLOW_AS_in_propertyExpressionAtomic10542); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS733);
                    IDENT734=(Token)match(input,IDENT,FOLLOW_IDENT_in_propertyExpressionAtomic10544); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT734);
                    }
                    break;
            }
            int alt273=2;
            int LA273_0 = input.LA(1);
            if ( (LA273_0==WHERE) ) {
                alt273=1;
            }
            switch (alt273) {
                case 1 :
                    {
                    WHERE735=(Token)match(input,WHERE,FOLLOW_WHERE_in_propertyExpressionAtomic10549); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE735);
                    pushFollow(FOLLOW_expression_in_propertyExpressionAtomic10551);
                    expression736=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression736.getTree());
                    }
                    break;
            }
            RBRACK737=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_propertyExpressionAtomic10555); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK737);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_FILTER_PROPERTY_EXPR_ATOM, "EVENT_FILTER_PROPERTY_EXPR_ATOM"), root_1);
                if ( stream_propertySelectionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_propertySelectionList.nextTree());
                }
                stream_propertySelectionList.reset();
                adaptor.addChild(root_1, stream_eventProperty.nextTree());
                if ( stream_IDENT.hasNext() ) {
                    adaptor.addChild(root_1, stream_IDENT.nextNode());
                }
                stream_IDENT.reset();
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WHERE_EXPR, "WHERE_EXPR"), root_2);
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_2, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class propertySelectionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.propertySelectionList_return propertySelectionList() throws RecognitionException {
        EsperEPL2GrammarParser.propertySelectionList_return retval = new EsperEPL2GrammarParser.propertySelectionList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA739=null;
        EsperEPL2GrammarParser.propertySelectionListElement_return propertySelectionListElement738 = null;
        EsperEPL2GrammarParser.propertySelectionListElement_return propertySelectionListElement740 = null;
        CommonTree COMMA739_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_propertySelectionListElement_in_propertySelectionList10605);
            propertySelectionListElement738=propertySelectionListElement();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, propertySelectionListElement738.getTree());
            loop274:
            do {
                int alt274=2;
                int LA274_0 = input.LA(1);
                if ( (LA274_0==COMMA) ) {
                    alt274=1;
                }
                switch (alt274) {
            	case 1 :
            	    {
            	    COMMA739=(Token)match(input,COMMA,FOLLOW_COMMA_in_propertySelectionList10608); if (state.failed) return retval;
            	    pushFollow(FOLLOW_propertySelectionListElement_in_propertySelectionList10611);
            	    propertySelectionListElement740=propertySelectionListElement();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, propertySelectionListElement740.getTree());
            	    }
            	    break;
            	default :
            	    break loop274;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class propertySelectionListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.propertySelectionListElement_return propertySelectionListElement() throws RecognitionException {
        EsperEPL2GrammarParser.propertySelectionListElement_return retval = new EsperEPL2GrammarParser.propertySelectionListElement_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        Token AS743=null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i = null;
        EsperEPL2GrammarParser.propertyStreamSelector_return propertyStreamSelector741 = null;
        EsperEPL2GrammarParser.expression_return expression742 = null;
        CommonTree s_tree=null;
        CommonTree AS743_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_keywordAllowedIdent=new RewriteRuleSubtreeStream(adaptor,"rule keywordAllowedIdent");
         String identifier = null; 
        try {
            int alt276=3;
            switch ( input.LA(1) ) {
            case STAR:
                {
                alt276=1;
                }
                break;
            case IDENT:
                {
                int LA276_2 = input.LA(2);
                if ( (LA276_2==DOT) ) {
                    int LA276_70 = input.LA(3);
                    if ( (LA276_70==STAR) && (synpred6_EsperEPL2Grammar())) {
                        alt276=2;
                    }
                    else if ( (LA276_70==WINDOW||LA276_70==ESCAPE||LA276_70==EVERY_EXPR||LA276_70==WHERE||(LA276_70>=SUM && LA276_70<=COUNT)||LA276_70==OUTER||(LA276_70>=JOIN && LA276_70<=FULL)||(LA276_70>=EVENTS && LA276_70<=LAST)||(LA276_70>=UNIDIRECTIONAL && LA276_70<=PREVIOUSTAIL)||LA276_70==PRIOR||(LA276_70>=WEEKDAY && LA276_70<=CAST)||LA276_70==SNAPSHOT||(LA276_70>=VARIABLE && LA276_70<=INDEX)||(LA276_70>=DEFINE && LA276_70<=MATCHES)||LA276_70==WHILE||(LA276_70>=MERGE && LA276_70<=MATCHED)||LA276_70==IDENT||LA276_70==TICKED_STRING_LITERAL) ) {
                        alt276=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 276, 70, input);
                        throw nvae;
                    }
                }
                else if ( ((LA276_2>=IN_SET && LA276_2<=REGEXP)||(LA276_2>=OR_EXPR && LA276_2<=NOT_EXPR)||LA276_2==AS||LA276_2==FROM||LA276_2==IS||LA276_2==LPAREN||(LA276_2>=COMMA && LA276_2<=EQUALS)||LA276_2==LBRACK||(LA276_2>=STAR && LA276_2<=QUESTION)||(LA276_2>=BAND && LA276_2<=MOD)||LA276_2==ESCAPECHAR) ) {
                    alt276=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 276, 2, input);
                    throw nvae;
                }
                }
                break;
            case WINDOW:
            case ESCAPE:
            case NOT_EXPR:
            case EVERY_EXPR:
            case WHERE:
            case SUM:
            case AVG:
            case MAX:
            case MIN:
            case COALESCE:
            case MEDIAN:
            case STDDEV:
            case AVEDEV:
            case COUNT:
            case CASE:
            case OUTER:
            case JOIN:
            case LEFT:
            case RIGHT:
            case FULL:
            case EVENTS:
            case FIRST:
            case LAST:
            case UNIDIRECTIONAL:
            case RETAINUNION:
            case RETAININTERSECTION:
            case PATTERN:
            case SQL:
            case METADATASQL:
            case PREVIOUS:
            case PREVIOUSTAIL:
            case PREVIOUSCOUNT:
            case PREVIOUSWINDOW:
            case PRIOR:
            case EXISTS:
            case WEEKDAY:
            case LW:
            case INSTANCEOF:
            case TYPEOF:
            case CAST:
            case CURRENT_TIMESTAMP:
            case SNAPSHOT:
            case VARIABLE:
            case UNTIL:
            case AT:
            case INDEX:
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case DEFINE:
            case PARTITION:
            case MATCHES:
            case WHILE:
            case MERGE:
            case MATCHED:
            case NUM_DOUBLE:
            case LCURLY:
            case LPAREN:
            case PLUS:
            case QUESTION:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case MINUS:
            case NUM_INT:
            case TICKED_STRING_LITERAL:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt276=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 276, 0, input);
                throw nvae;
            }
            switch (alt276) {
                case 1 :
                    {
                    s=(Token)match(input,STAR,FOLLOW_STAR_in_propertySelectionListElement10637); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STAR.add(s);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(PROPERTY_WILDCARD_SELECT, s));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_propertyStreamSelector_in_propertySelectionListElement10653);
                    propertyStreamSelector741=propertyStreamSelector();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, propertyStreamSelector741.getTree());
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_expression_in_propertySelectionListElement10658);
                    expression742=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression742.getTree());
                    int alt275=2;
                    int LA275_0 = input.LA(1);
                    if ( (LA275_0==AS) ) {
                        alt275=1;
                    }
                    switch (alt275) {
                        case 1 :
                            {
                            AS743=(Token)match(input,AS,FOLLOW_AS_in_propertySelectionListElement10661); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_AS.add(AS743);
                            pushFollow(FOLLOW_keywordAllowedIdent_in_propertySelectionListElement10665);
                            i=keywordAllowedIdent();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i.getTree());
                            if ( state.backtracking==0 ) {
                               identifier = i.getTree().toString(); 
                            }
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    if (identifier != null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PROPERTY_SELECTION_ELEMENT_EXPR, "PROPERTY_SELECTION_ELEMENT_EXPR"), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        adaptor.addChild(root_1, (CommonTree)adaptor.create(IDENT, identifier));
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PROPERTY_SELECTION_ELEMENT_EXPR, "PROPERTY_SELECTION_ELEMENT_EXPR"), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class propertyStreamSelector_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.propertyStreamSelector_return propertyStreamSelector() throws RecognitionException {
        EsperEPL2GrammarParser.propertyStreamSelector_return retval = new EsperEPL2GrammarParser.propertyStreamSelector_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        Token i=null;
        Token DOT744=null;
        Token STAR745=null;
        Token AS746=null;
        CommonTree s_tree=null;
        CommonTree i_tree=null;
        CommonTree DOT744_tree=null;
        CommonTree STAR745_tree=null;
        CommonTree AS746_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        try {
            {
            s=(Token)match(input,IDENT,FOLLOW_IDENT_in_propertyStreamSelector10709); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(s);
            DOT744=(Token)match(input,DOT,FOLLOW_DOT_in_propertyStreamSelector10711); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DOT.add(DOT744);
            STAR745=(Token)match(input,STAR,FOLLOW_STAR_in_propertyStreamSelector10713); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_STAR.add(STAR745);
            int alt277=2;
            int LA277_0 = input.LA(1);
            if ( (LA277_0==AS) ) {
                alt277=1;
            }
            switch (alt277) {
                case 1 :
                    {
                    AS746=(Token)match(input,AS,FOLLOW_AS_in_propertyStreamSelector10716); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS746);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_propertyStreamSelector10720); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PROPERTY_SELECTION_STREAM, "PROPERTY_SELECTION_STREAM"), root_1);
                adaptor.addChild(root_1, stream_s.nextNode());
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class patternFilterExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.patternFilterExpression_return patternFilterExpression() throws RecognitionException {
        EsperEPL2GrammarParser.patternFilterExpression_return retval = new EsperEPL2GrammarParser.patternFilterExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token EQUALS747=null;
        Token LPAREN749=null;
        Token RPAREN751=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier748 = null;
        EsperEPL2GrammarParser.expressionList_return expressionList750 = null;
        EsperEPL2GrammarParser.propertyExpression_return propertyExpression752 = null;
        CommonTree i_tree=null;
        CommonTree EQUALS747_tree=null;
        CommonTree LPAREN749_tree=null;
        CommonTree RPAREN751_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_propertyExpression=new RewriteRuleSubtreeStream(adaptor,"rule propertyExpression");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
         paraphrases.push("filter specification"); 
        try {
            {
            int alt278=2;
            int LA278_0 = input.LA(1);
            if ( (LA278_0==IDENT) ) {
                int LA278_1 = input.LA(2);
                if ( (LA278_1==EQUALS) ) {
                    alt278=1;
                }
            }
            switch (alt278) {
                case 1 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_patternFilterExpression10767); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    EQUALS747=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_patternFilterExpression10769); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS747);
                    }
                    break;
            }
            pushFollow(FOLLOW_classIdentifier_in_patternFilterExpression10778);
            classIdentifier748=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier748.getTree());
            int alt280=2;
            int LA280_0 = input.LA(1);
            if ( (LA280_0==LPAREN) ) {
                alt280=1;
            }
            switch (alt280) {
                case 1 :
                    {
                    LPAREN749=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_patternFilterExpression10789); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN749);
                    int alt279=2;
                    int LA279_0 = input.LA(1);
                    if ( (LA279_0==WINDOW||LA279_0==ESCAPE||(LA279_0>=NOT_EXPR && LA279_0<=EVERY_EXPR)||LA279_0==WHERE||(LA279_0>=SUM && LA279_0<=COUNT)||LA279_0==CASE||LA279_0==OUTER||(LA279_0>=JOIN && LA279_0<=FULL)||(LA279_0>=EVENTS && LA279_0<=LAST)||(LA279_0>=UNIDIRECTIONAL && LA279_0<=CURRENT_TIMESTAMP)||LA279_0==SNAPSHOT||(LA279_0>=VARIABLE && LA279_0<=INDEX)||(LA279_0>=BOOLEAN_TRUE && LA279_0<=VALUE_NULL)||(LA279_0>=DEFINE && LA279_0<=MATCHES)||LA279_0==WHILE||(LA279_0>=MERGE && LA279_0<=MATCHED)||LA279_0==NUM_DOUBLE||(LA279_0>=IDENT && LA279_0<=LCURLY)||LA279_0==LPAREN||(LA279_0>=PLUS && LA279_0<=QUESTION)||(LA279_0>=STRING_LITERAL && LA279_0<=QUOTED_STRING_LITERAL)||LA279_0==MINUS||LA279_0==NUM_INT||(LA279_0>=TICKED_STRING_LITERAL && LA279_0<=NUM_FLOAT)) ) {
                        alt279=1;
                    }
                    switch (alt279) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_expressionList_in_patternFilterExpression10791);
                            expressionList750=expressionList();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList750.getTree());
                            }
                            break;
                    }
                    RPAREN751=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_patternFilterExpression10794); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN751);
                    }
                    break;
            }
            int alt281=2;
            int LA281_0 = input.LA(1);
            if ( (LA281_0==LBRACK) ) {
                alt281=1;
            }
            switch (alt281) {
                case 1 :
                    {
                    pushFollow(FOLLOW_propertyExpression_in_patternFilterExpression10806);
                    propertyExpression752=propertyExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_propertyExpression.add(propertyExpression752.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATTERN_FILTER_EXPR, "PATTERN_FILTER_EXPR"), root_1);
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                if ( stream_propertyExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_propertyExpression.nextTree());
                }
                stream_propertyExpression.reset();
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());
                }
                stream_expressionList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class classIdentifier_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.classIdentifier_return classIdentifier() throws RecognitionException {
        EsperEPL2GrammarParser.classIdentifier_return retval = new EsperEPL2GrammarParser.classIdentifier_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token DOT753=null;
        EsperEPL2GrammarParser.escapableStr_return i1 = null;
        EsperEPL2GrammarParser.escapableStr_return i2 = null;
        CommonTree DOT753_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_escapableStr=new RewriteRuleSubtreeStream(adaptor,"rule escapableStr");
         String identifier = ""; 
        try {
            {
            pushFollow(FOLLOW_escapableStr_in_classIdentifier10861);
            i1=escapableStr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_escapableStr.add(i1.getTree());
            if ( state.backtracking==0 ) {
               identifier = (i1!=null?i1.result:null); 
            }
            loop282:
            do {
                int alt282=2;
                int LA282_0 = input.LA(1);
                if ( (LA282_0==DOT) ) {
                    int LA282_22 = input.LA(2);
                    if ( (LA282_22==IDENT) ) {
                        int LA282_47 = input.LA(3);
                        if ( (LA282_47==EOF||LA282_47==CREATE||(LA282_47>=OR_EXPR && LA282_47<=AS)||LA282_47==SELECT||(LA282_47>=INNER && LA282_47<=ON)||(LA282_47>=GROUP && LA282_47<=HAVING)||LA282_47==OUTPUT||LA282_47==INSERT||LA282_47==ORDER||(LA282_47>=UNIDIRECTIONAL && LA282_47<=RETAININTERSECTION)||LA282_47==DELETE||LA282_47==SET||LA282_47==UNTIL||LA282_47==ROW_LIMIT_EXPR||(LA282_47>=UPDATE && LA282_47<=MATCH_RECOGNIZE)||(LA282_47>=FOR && LA282_47<=WHILE)||LA282_47==MERGE||LA282_47==EXPRESSIONDECL||LA282_47==IDENT||(LA282_47>=RCURLY && LA282_47<=RPAREN)||LA282_47==COMMA||(LA282_47>=DOT && LA282_47<=RBRACK)||(LA282_47>=FOLLOWED_BY && LA282_47<=FOLLOWMAX_BEGIN)||LA282_47==TICKED_STRING_LITERAL||LA282_47==EMAILAT) ) {
                            alt282=1;
                        }
                    }
                    else if ( (LA282_22==TICKED_STRING_LITERAL) ) {
                        alt282=1;
                    }
                }
                switch (alt282) {
            	case 1 :
            	    {
            	    DOT753=(Token)match(input,DOT,FOLLOW_DOT_in_classIdentifier10880); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT753);
            	    pushFollow(FOLLOW_escapableStr_in_classIdentifier10884);
            	    i2=escapableStr();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_escapableStr.add(i2.getTree());
            	    if ( state.backtracking==0 ) {
            	       identifier += "." + (i2!=null?i2.result:null); 
            	    }
            	    }
            	    break;
            	default :
            	    break loop282;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CLASS_IDENT, identifier), root_1);
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class classIdentifierNonGreedy_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.classIdentifierNonGreedy_return classIdentifierNonGreedy() throws RecognitionException {
        EsperEPL2GrammarParser.classIdentifierNonGreedy_return retval = new EsperEPL2GrammarParser.classIdentifierNonGreedy_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token DOT754=null;
        EsperEPL2GrammarParser.escapableStr_return i1 = null;
        EsperEPL2GrammarParser.escapableStr_return i2 = null;
        CommonTree DOT754_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_escapableStr=new RewriteRuleSubtreeStream(adaptor,"rule escapableStr");
         String identifier = ""; 
        try {
            {
            pushFollow(FOLLOW_escapableStr_in_classIdentifierNonGreedy10929);
            i1=escapableStr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_escapableStr.add(i1.getTree());
            if ( state.backtracking==0 ) {
               identifier = (i1!=null?i1.result:null); 
            }
            loop283:
            do {
                int alt283=2;
                int LA283_0 = input.LA(1);
                if ( (LA283_0==IDENT||LA283_0==TICKED_STRING_LITERAL) ) {
                    alt283=2;
                }
                else if ( (LA283_0==DOT) ) {
                    switch ( input.LA(2) ) {
                    case IDENT:
                        {
                        int LA283_4 = input.LA(3);
                        if ( (LA283_4==LPAREN) ) {
                            alt283=2;
                        }
                        else if ( (LA283_4==IDENT||LA283_4==DOT||LA283_4==TICKED_STRING_LITERAL) ) {
                            alt283=1;
                        }
                        }
                        break;
                    case TICKED_STRING_LITERAL:
                        {
                        int LA283_5 = input.LA(3);
                        if ( (LA283_5==LPAREN) ) {
                            alt283=2;
                        }
                        else if ( (LA283_5==IDENT||LA283_5==DOT||LA283_5==TICKED_STRING_LITERAL) ) {
                            alt283=1;
                        }
                        }
                        break;
                    case WHERE:
                    case MAX:
                    case MIN:
                        {
                        alt283=2;
                        }
                        break;
                    }
                }
                switch (alt283) {
            	case 1 :
            	    {
            	    DOT754=(Token)match(input,DOT,FOLLOW_DOT_in_classIdentifierNonGreedy10964); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT754);
            	    pushFollow(FOLLOW_escapableStr_in_classIdentifierNonGreedy10968);
            	    i2=escapableStr();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_escapableStr.add(i2.getTree());
            	    if ( state.backtracking==0 ) {
            	       identifier += "." + (i2!=null?i2.result:null); 
            	    }
            	    }
            	    break;
            	default :
            	    break loop283;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CLASS_IDENT, identifier), root_1);
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class expressionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.expressionList_return expressionList() throws RecognitionException {
        EsperEPL2GrammarParser.expressionList_return retval = new EsperEPL2GrammarParser.expressionList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA756=null;
        EsperEPL2GrammarParser.expression_return expression755 = null;
        EsperEPL2GrammarParser.expression_return expression757 = null;
        CommonTree COMMA756_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_expression_in_expressionList11010);
            expression755=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression755.getTree());
            loop284:
            do {
                int alt284=2;
                int LA284_0 = input.LA(1);
                if ( (LA284_0==COMMA) ) {
                    alt284=1;
                }
                switch (alt284) {
            	case 1 :
            	    {
            	    COMMA756=(Token)match(input,COMMA,FOLLOW_COMMA_in_expressionList11013); if (state.failed) return retval;
            	    pushFollow(FOLLOW_expression_in_expressionList11016);
            	    expression757=expression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression757.getTree());
            	    }
            	    break;
            	default :
            	    break loop284;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class expressionWithTimeList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.expressionWithTimeList_return expressionWithTimeList() throws RecognitionException {
        EsperEPL2GrammarParser.expressionWithTimeList_return retval = new EsperEPL2GrammarParser.expressionWithTimeList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA759=null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime758 = null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime760 = null;
        CommonTree COMMA759_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_expressionWithTime_in_expressionWithTimeList11044);
            expressionWithTime758=expressionWithTime();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionWithTime758.getTree());
            loop285:
            do {
                int alt285=2;
                int LA285_0 = input.LA(1);
                if ( (LA285_0==COMMA) ) {
                    alt285=1;
                }
                switch (alt285) {
            	case 1 :
            	    {
            	    COMMA759=(Token)match(input,COMMA,FOLLOW_COMMA_in_expressionWithTimeList11047); if (state.failed) return retval;
            	    pushFollow(FOLLOW_expressionWithTime_in_expressionWithTimeList11050);
            	    expressionWithTime760=expressionWithTime();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionWithTime760.getTree());
            	    }
            	    break;
            	default :
            	    break loop285;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class expressionWithTime_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime() throws RecognitionException {
        EsperEPL2GrammarParser.expressionWithTime_return retval = new EsperEPL2GrammarParser.expressionWithTime_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.lastOperand_return lastOperand761 = null;
        EsperEPL2GrammarParser.lastWeekdayOperand_return lastWeekdayOperand762 = null;
        EsperEPL2GrammarParser.timePeriod_return timePeriod763 = null;
        EsperEPL2GrammarParser.expressionQualifyable_return expressionQualifyable764 = null;
        EsperEPL2GrammarParser.rangeOperand_return rangeOperand765 = null;
        EsperEPL2GrammarParser.frequencyOperand_return frequencyOperand766 = null;
        EsperEPL2GrammarParser.lastOperator_return lastOperator767 = null;
        EsperEPL2GrammarParser.weekDayOperator_return weekDayOperator768 = null;
        EsperEPL2GrammarParser.numericParameterList_return numericParameterList769 = null;
        EsperEPL2GrammarParser.numberSetStar_return numberSetStar770 = null;
        try {
            int alt286=10;
            int LA286_0 = input.LA(1);
            if ( (LA286_0==LAST) ) {
                int LA286_1 = input.LA(2);
                if ( (synpred7_EsperEPL2Grammar()) ) {
                    alt286=1;
                }
                else if ( (synpred10_EsperEPL2Grammar()) ) {
                    alt286=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 286, 1, input);
                    throw nvae;
                }
            }
            else if ( (LA286_0==LW) ) {
                int LA286_2 = input.LA(2);
                if ( (synpred8_EsperEPL2Grammar()) ) {
                    alt286=2;
                }
                else if ( (synpred10_EsperEPL2Grammar()) ) {
                    alt286=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 286, 2, input);
                    throw nvae;
                }
            }
            else if ( (LA286_0==NUM_INT) ) {
                int LA286_3 = input.LA(2);
                if ( (LA286_3==LAST) && (synpred13_EsperEPL2Grammar())) {
                    alt286=7;
                }
                else if ( (LA286_3==TIMEPERIOD_MILLISECONDS) && (synpred9_EsperEPL2Grammar())) {
                    alt286=3;
                }
                else if ( (LA286_3==TIMEPERIOD_MILLISECOND) && (synpred9_EsperEPL2Grammar())) {
                    alt286=3;
                }
                else if ( (LA286_3==TIMEPERIOD_MILLISEC) && (synpred9_EsperEPL2Grammar())) {
                    alt286=3;
                }
                else if ( (LA286_3==TIMEPERIOD_MONTHS) && (synpred9_EsperEPL2Grammar())) {
                    alt286=3;
                }
                else if ( (LA286_3==TIMEPERIOD_MONTH) && (synpred9_EsperEPL2Grammar())) {
                    alt286=3;
                }
                else if ( (LA286_3==TIMEPERIOD_SECONDS) ) {
                    int LA286_151 = input.LA(3);
                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt286=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt286=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 286, 151, input);
                        throw nvae;
                    }
                }
                else if ( (LA286_3==TIMEPERIOD_SECOND) ) {
                    int LA286_152 = input.LA(3);
                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt286=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt286=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 286, 152, input);
                        throw nvae;
                    }
                }
                else if ( (LA286_3==TIMEPERIOD_SEC) ) {
                    int LA286_153 = input.LA(3);
                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt286=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt286=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 286, 153, input);
                        throw nvae;
                    }
                }
                else if ( (LA286_3==TIMEPERIOD_HOURS) && (synpred9_EsperEPL2Grammar())) {
                    alt286=3;
                }
                else if ( (LA286_3==TIMEPERIOD_HOUR) && (synpred9_EsperEPL2Grammar())) {
                    alt286=3;
                }
                else if ( (LA286_3==TIMEPERIOD_WEEKS) && (synpred9_EsperEPL2Grammar())) {
                    alt286=3;
                }
                else if ( (LA286_3==TIMEPERIOD_WEEK) && (synpred9_EsperEPL2Grammar())) {
                    alt286=3;
                }
                else if ( (LA286_3==COLON) && (synpred11_EsperEPL2Grammar())) {
                    alt286=5;
                }
                else if ( (LA286_3==TIMEPERIOD_DAYS) && (synpred9_EsperEPL2Grammar())) {
                    alt286=3;
                }
                else if ( (LA286_3==TIMEPERIOD_DAY) && (synpred9_EsperEPL2Grammar())) {
                    alt286=3;
                }
                else if ( (LA286_3==TIMEPERIOD_YEARS) && (synpred9_EsperEPL2Grammar())) {
                    alt286=3;
                }
                else if ( (LA286_3==TIMEPERIOD_YEAR) && (synpred9_EsperEPL2Grammar())) {
                    alt286=3;
                }
                else if ( (LA286_3==WEEKDAY) && (synpred14_EsperEPL2Grammar())) {
                    alt286=8;
                }
                else if ( (LA286_3==STAR) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_3==DIV) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_3==MOD) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_3==PLUS) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_3==MINUS) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_3==LOR) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_3==LT) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_3==GT) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_3==LE) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_3==GE) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_3==EQUALS) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_3==IS) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_3==SQL_NE) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_3==NOT_EQUAL) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_3==BAND) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_3==BOR) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_3==BXOR) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_3==AND_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_3==OR_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_3==ASC) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_3==DESC) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_3==COMMA) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_3==RPAREN) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_3==NOT_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_3==IN_SET) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_3==BETWEEN) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_3==LIKE) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_3==REGEXP) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_3==TIMEPERIOD_MINUTES) && (synpred9_EsperEPL2Grammar())) {
                    alt286=3;
                }
                else if ( (LA286_3==TIMEPERIOD_MINUTE) && (synpred9_EsperEPL2Grammar())) {
                    alt286=3;
                }
                else if ( (LA286_3==MIN) && (synpred9_EsperEPL2Grammar())) {
                    alt286=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 286, 3, input);
                    throw nvae;
                }
            }
            else if ( (LA286_0==NUM_LONG) ) {
                int LA286_4 = input.LA(2);
                if ( (LA286_4==TIMEPERIOD_SECONDS) ) {
                    int LA286_195 = input.LA(3);
                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt286=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt286=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 286, 195, input);
                        throw nvae;
                    }
                }
                else if ( (LA286_4==TIMEPERIOD_SECOND) ) {
                    int LA286_196 = input.LA(3);
                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt286=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt286=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 286, 196, input);
                        throw nvae;
                    }
                }
                else if ( (LA286_4==TIMEPERIOD_SEC) ) {
                    int LA286_197 = input.LA(3);
                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt286=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt286=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 286, 197, input);
                        throw nvae;
                    }
                }
                else if ( (LA286_4==TIMEPERIOD_MINUTES) && (synpred9_EsperEPL2Grammar())) {
                    alt286=3;
                }
                else if ( (LA286_4==TIMEPERIOD_MINUTE) && (synpred9_EsperEPL2Grammar())) {
                    alt286=3;
                }
                else if ( (LA286_4==MIN) && (synpred9_EsperEPL2Grammar())) {
                    alt286=3;
                }
                else if ( (LA286_4==LAST) && (synpred13_EsperEPL2Grammar())) {
                    alt286=7;
                }
                else if ( (LA286_4==TIMEPERIOD_MILLISECONDS) && (synpred9_EsperEPL2Grammar())) {
                    alt286=3;
                }
                else if ( (LA286_4==TIMEPERIOD_MILLISECOND) && (synpred9_EsperEPL2Grammar())) {
                    alt286=3;
                }
                else if ( (LA286_4==TIMEPERIOD_MILLISEC) && (synpred9_EsperEPL2Grammar())) {
                    alt286=3;
                }
                else if ( (LA286_4==TIMEPERIOD_YEARS) && (synpred9_EsperEPL2Grammar())) {
                    alt286=3;
                }
                else if ( (LA286_4==TIMEPERIOD_YEAR) && (synpred9_EsperEPL2Grammar())) {
                    alt286=3;
                }
                else if ( (LA286_4==TIMEPERIOD_DAYS) && (synpred9_EsperEPL2Grammar())) {
                    alt286=3;
                }
                else if ( (LA286_4==TIMEPERIOD_DAY) && (synpred9_EsperEPL2Grammar())) {
                    alt286=3;
                }
                else if ( (LA286_4==COLON) && (synpred11_EsperEPL2Grammar())) {
                    alt286=5;
                }
                else if ( (LA286_4==TIMEPERIOD_HOURS) && (synpred9_EsperEPL2Grammar())) {
                    alt286=3;
                }
                else if ( (LA286_4==TIMEPERIOD_HOUR) && (synpred9_EsperEPL2Grammar())) {
                    alt286=3;
                }
                else if ( (LA286_4==STAR) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_4==DIV) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_4==MOD) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_4==PLUS) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_4==MINUS) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_4==LOR) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_4==LT) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_4==GT) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_4==LE) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_4==GE) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_4==EQUALS) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_4==IS) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_4==SQL_NE) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_4==NOT_EQUAL) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_4==BAND) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_4==BOR) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_4==BXOR) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_4==AND_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_4==OR_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_4==ASC) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_4==DESC) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_4==COMMA) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_4==RPAREN) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_4==NOT_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_4==IN_SET) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_4==BETWEEN) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_4==LIKE) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_4==REGEXP) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_4==WEEKDAY) && (synpred14_EsperEPL2Grammar())) {
                    alt286=8;
                }
                else if ( (LA286_4==TIMEPERIOD_WEEKS) && (synpred9_EsperEPL2Grammar())) {
                    alt286=3;
                }
                else if ( (LA286_4==TIMEPERIOD_WEEK) && (synpred9_EsperEPL2Grammar())) {
                    alt286=3;
                }
                else if ( (LA286_4==TIMEPERIOD_MONTHS) && (synpred9_EsperEPL2Grammar())) {
                    alt286=3;
                }
                else if ( (LA286_4==TIMEPERIOD_MONTH) && (synpred9_EsperEPL2Grammar())) {
                    alt286=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 286, 4, input);
                    throw nvae;
                }
            }
            else if ( (LA286_0==NUM_FLOAT) ) {
                int LA286_5 = input.LA(2);
                if ( (LA286_5==TIMEPERIOD_YEARS) && (synpred9_EsperEPL2Grammar())) {
                    alt286=3;
                }
                else if ( (LA286_5==TIMEPERIOD_YEAR) && (synpred9_EsperEPL2Grammar())) {
                    alt286=3;
                }
                else if ( (LA286_5==TIMEPERIOD_MINUTES) && (synpred9_EsperEPL2Grammar())) {
                    alt286=3;
                }
                else if ( (LA286_5==TIMEPERIOD_MINUTE) && (synpred9_EsperEPL2Grammar())) {
                    alt286=3;
                }
                else if ( (LA286_5==MIN) && (synpred9_EsperEPL2Grammar())) {
                    alt286=3;
                }
                else if ( (LA286_5==TIMEPERIOD_DAYS) && (synpred9_EsperEPL2Grammar())) {
                    alt286=3;
                }
                else if ( (LA286_5==TIMEPERIOD_DAY) && (synpred9_EsperEPL2Grammar())) {
                    alt286=3;
                }
                else if ( (LA286_5==TIMEPERIOD_HOURS) && (synpred9_EsperEPL2Grammar())) {
                    alt286=3;
                }
                else if ( (LA286_5==TIMEPERIOD_HOUR) && (synpred9_EsperEPL2Grammar())) {
                    alt286=3;
                }
                else if ( (LA286_5==WEEKDAY) && (synpred14_EsperEPL2Grammar())) {
                    alt286=8;
                }
                else if ( (LA286_5==STAR) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_5==DIV) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_5==MOD) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_5==PLUS) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_5==MINUS) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_5==LOR) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_5==LT) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_5==GT) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_5==LE) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_5==GE) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_5==EQUALS) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_5==IS) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_5==SQL_NE) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_5==NOT_EQUAL) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_5==BAND) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_5==BOR) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_5==BXOR) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_5==AND_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_5==OR_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_5==ASC) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_5==DESC) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_5==TIMEPERIOD_SECONDS) ) {
                    int LA286_276 = input.LA(3);
                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt286=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt286=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 286, 276, input);
                        throw nvae;
                    }
                }
                else if ( (LA286_5==TIMEPERIOD_SECOND) ) {
                    int LA286_277 = input.LA(3);
                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt286=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt286=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 286, 277, input);
                        throw nvae;
                    }
                }
                else if ( (LA286_5==TIMEPERIOD_SEC) ) {
                    int LA286_278 = input.LA(3);
                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt286=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt286=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 286, 278, input);
                        throw nvae;
                    }
                }
                else if ( (LA286_5==COMMA) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_5==RPAREN) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_5==NOT_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_5==IN_SET) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_5==BETWEEN) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_5==LIKE) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_5==REGEXP) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_5==LAST) && (synpred13_EsperEPL2Grammar())) {
                    alt286=7;
                }
                else if ( (LA286_5==TIMEPERIOD_MILLISECONDS) && (synpred9_EsperEPL2Grammar())) {
                    alt286=3;
                }
                else if ( (LA286_5==TIMEPERIOD_MILLISECOND) && (synpred9_EsperEPL2Grammar())) {
                    alt286=3;
                }
                else if ( (LA286_5==TIMEPERIOD_MILLISEC) && (synpred9_EsperEPL2Grammar())) {
                    alt286=3;
                }
                else if ( (LA286_5==TIMEPERIOD_WEEKS) && (synpred9_EsperEPL2Grammar())) {
                    alt286=3;
                }
                else if ( (LA286_5==TIMEPERIOD_WEEK) && (synpred9_EsperEPL2Grammar())) {
                    alt286=3;
                }
                else if ( (LA286_5==TIMEPERIOD_MONTHS) && (synpred9_EsperEPL2Grammar())) {
                    alt286=3;
                }
                else if ( (LA286_5==TIMEPERIOD_MONTH) && (synpred9_EsperEPL2Grammar())) {
                    alt286=3;
                }
                else if ( (LA286_5==COLON) && (synpred11_EsperEPL2Grammar())) {
                    alt286=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 286, 5, input);
                    throw nvae;
                }
            }
            else if ( (LA286_0==NUM_DOUBLE) ) {
                int LA286_6 = input.LA(2);
                if ( (LA286_6==TIMEPERIOD_DAYS) && (synpred9_EsperEPL2Grammar())) {
                    alt286=3;
                }
                else if ( (LA286_6==TIMEPERIOD_DAY) && (synpred9_EsperEPL2Grammar())) {
                    alt286=3;
                }
                else if ( (LA286_6==TIMEPERIOD_WEEKS) && (synpred9_EsperEPL2Grammar())) {
                    alt286=3;
                }
                else if ( (LA286_6==TIMEPERIOD_WEEK) && (synpred9_EsperEPL2Grammar())) {
                    alt286=3;
                }
                else if ( (LA286_6==TIMEPERIOD_MINUTES) && (synpred9_EsperEPL2Grammar())) {
                    alt286=3;
                }
                else if ( (LA286_6==TIMEPERIOD_MINUTE) && (synpred9_EsperEPL2Grammar())) {
                    alt286=3;
                }
                else if ( (LA286_6==MIN) && (synpred9_EsperEPL2Grammar())) {
                    alt286=3;
                }
                else if ( (LA286_6==STAR) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_6==DIV) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_6==MOD) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_6==PLUS) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_6==MINUS) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_6==LOR) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_6==LT) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_6==GT) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_6==LE) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_6==GE) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_6==EQUALS) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_6==IS) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_6==SQL_NE) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_6==NOT_EQUAL) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_6==BAND) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_6==BOR) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_6==BXOR) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_6==AND_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_6==OR_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_6==ASC) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_6==DESC) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_6==TIMEPERIOD_SECONDS) ) {
                    int LA286_323 = input.LA(3);
                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt286=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt286=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 286, 323, input);
                        throw nvae;
                    }
                }
                else if ( (LA286_6==TIMEPERIOD_SECOND) ) {
                    int LA286_324 = input.LA(3);
                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt286=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt286=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 286, 324, input);
                        throw nvae;
                    }
                }
                else if ( (LA286_6==TIMEPERIOD_SEC) ) {
                    int LA286_325 = input.LA(3);
                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt286=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt286=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 286, 325, input);
                        throw nvae;
                    }
                }
                else if ( (LA286_6==COMMA) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_6==RPAREN) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_6==NOT_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_6==IN_SET) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_6==BETWEEN) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_6==LIKE) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_6==REGEXP) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_6==TIMEPERIOD_YEARS) && (synpred9_EsperEPL2Grammar())) {
                    alt286=3;
                }
                else if ( (LA286_6==TIMEPERIOD_YEAR) && (synpred9_EsperEPL2Grammar())) {
                    alt286=3;
                }
                else if ( (LA286_6==WEEKDAY) && (synpred14_EsperEPL2Grammar())) {
                    alt286=8;
                }
                else if ( (LA286_6==TIMEPERIOD_MONTHS) && (synpred9_EsperEPL2Grammar())) {
                    alt286=3;
                }
                else if ( (LA286_6==TIMEPERIOD_MONTH) && (synpred9_EsperEPL2Grammar())) {
                    alt286=3;
                }
                else if ( (LA286_6==COLON) && (synpred11_EsperEPL2Grammar())) {
                    alt286=5;
                }
                else if ( (LA286_6==LAST) && (synpred13_EsperEPL2Grammar())) {
                    alt286=7;
                }
                else if ( (LA286_6==TIMEPERIOD_MILLISECONDS) && (synpred9_EsperEPL2Grammar())) {
                    alt286=3;
                }
                else if ( (LA286_6==TIMEPERIOD_MILLISECOND) && (synpred9_EsperEPL2Grammar())) {
                    alt286=3;
                }
                else if ( (LA286_6==TIMEPERIOD_MILLISEC) && (synpred9_EsperEPL2Grammar())) {
                    alt286=3;
                }
                else if ( (LA286_6==TIMEPERIOD_HOURS) && (synpred9_EsperEPL2Grammar())) {
                    alt286=3;
                }
                else if ( (LA286_6==TIMEPERIOD_HOUR) && (synpred9_EsperEPL2Grammar())) {
                    alt286=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 286, 6, input);
                    throw nvae;
                }
            }
            else if ( (LA286_0==IDENT) ) {
                int LA286_7 = input.LA(2);
                if ( (LA286_7==LAST) && (synpred13_EsperEPL2Grammar())) {
                    alt286=7;
                }
                else if ( (LA286_7==DOT) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_7==TIMEPERIOD_SECONDS) ) {
                    int LA286_347 = input.LA(3);
                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt286=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt286=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 286, 347, input);
                        throw nvae;
                    }
                }
                else if ( (LA286_7==TIMEPERIOD_SECOND) ) {
                    int LA286_348 = input.LA(3);
                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt286=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt286=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 286, 348, input);
                        throw nvae;
                    }
                }
                else if ( (LA286_7==TIMEPERIOD_SEC) ) {
                    int LA286_349 = input.LA(3);
                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt286=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt286=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 286, 349, input);
                        throw nvae;
                    }
                }
                else if ( (LA286_7==TIMEPERIOD_MILLISECONDS) && (synpred9_EsperEPL2Grammar())) {
                    alt286=3;
                }
                else if ( (LA286_7==TIMEPERIOD_MILLISECOND) && (synpred9_EsperEPL2Grammar())) {
                    alt286=3;
                }
                else if ( (LA286_7==TIMEPERIOD_MILLISEC) && (synpred9_EsperEPL2Grammar())) {
                    alt286=3;
                }
                else if ( (LA286_7==TIMEPERIOD_MONTHS) && (synpred9_EsperEPL2Grammar())) {
                    alt286=3;
                }
                else if ( (LA286_7==TIMEPERIOD_MONTH) && (synpred9_EsperEPL2Grammar())) {
                    alt286=3;
                }
                else if ( (LA286_7==TIMEPERIOD_YEARS) && (synpred9_EsperEPL2Grammar())) {
                    alt286=3;
                }
                else if ( (LA286_7==TIMEPERIOD_YEAR) && (synpred9_EsperEPL2Grammar())) {
                    alt286=3;
                }
                else if ( (LA286_7==LPAREN) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_7==COLON) && (synpred11_EsperEPL2Grammar())) {
                    alt286=5;
                }
                else if ( (LA286_7==TIMEPERIOD_HOURS) && (synpred9_EsperEPL2Grammar())) {
                    alt286=3;
                }
                else if ( (LA286_7==TIMEPERIOD_HOUR) && (synpred9_EsperEPL2Grammar())) {
                    alt286=3;
                }
                else if ( (LA286_7==WEEKDAY) && (synpred14_EsperEPL2Grammar())) {
                    alt286=8;
                }
                else if ( (LA286_7==ESCAPECHAR) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_7==LBRACK) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_7==QUESTION) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_7==STAR) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_7==DIV) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_7==MOD) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_7==PLUS) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_7==MINUS) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_7==LOR) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_7==LT) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_7==GT) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_7==LE) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_7==GE) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_7==EQUALS) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_7==IS) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_7==SQL_NE) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_7==NOT_EQUAL) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_7==BAND) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_7==BOR) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_7==BXOR) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_7==AND_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_7==OR_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_7==ASC) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_7==DESC) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_7==COMMA) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_7==RPAREN) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_7==NOT_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_7==IN_SET) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_7==BETWEEN) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_7==LIKE) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_7==REGEXP) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_7==TIMEPERIOD_WEEKS) && (synpred9_EsperEPL2Grammar())) {
                    alt286=3;
                }
                else if ( (LA286_7==TIMEPERIOD_WEEK) && (synpred9_EsperEPL2Grammar())) {
                    alt286=3;
                }
                else if ( (LA286_7==TIMEPERIOD_DAYS) && (synpred9_EsperEPL2Grammar())) {
                    alt286=3;
                }
                else if ( (LA286_7==TIMEPERIOD_DAY) && (synpred9_EsperEPL2Grammar())) {
                    alt286=3;
                }
                else if ( (LA286_7==TIMEPERIOD_MINUTES) && (synpred9_EsperEPL2Grammar())) {
                    alt286=3;
                }
                else if ( (LA286_7==TIMEPERIOD_MINUTE) && (synpred9_EsperEPL2Grammar())) {
                    alt286=3;
                }
                else if ( (LA286_7==MIN) && (synpred9_EsperEPL2Grammar())) {
                    alt286=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 286, 7, input);
                    throw nvae;
                }
            }
            else if ( (LA286_0==QUESTION) ) {
                int LA286_8 = input.LA(2);
                if ( (LA286_8==LAST) && (synpred13_EsperEPL2Grammar())) {
                    alt286=7;
                }
                else if ( (LA286_8==TIMEPERIOD_SECONDS) ) {
                    int LA286_401 = input.LA(3);
                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt286=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt286=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 286, 401, input);
                        throw nvae;
                    }
                }
                else if ( (LA286_8==TIMEPERIOD_SECOND) ) {
                    int LA286_402 = input.LA(3);
                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt286=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt286=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 286, 402, input);
                        throw nvae;
                    }
                }
                else if ( (LA286_8==TIMEPERIOD_SEC) ) {
                    int LA286_403 = input.LA(3);
                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt286=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt286=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 286, 403, input);
                        throw nvae;
                    }
                }
                else if ( (LA286_8==TIMEPERIOD_YEARS) && (synpred9_EsperEPL2Grammar())) {
                    alt286=3;
                }
                else if ( (LA286_8==TIMEPERIOD_YEAR) && (synpred9_EsperEPL2Grammar())) {
                    alt286=3;
                }
                else if ( (LA286_8==TIMEPERIOD_DAYS) && (synpred9_EsperEPL2Grammar())) {
                    alt286=3;
                }
                else if ( (LA286_8==TIMEPERIOD_DAY) && (synpred9_EsperEPL2Grammar())) {
                    alt286=3;
                }
                else if ( (LA286_8==TIMEPERIOD_MINUTES) && (synpred9_EsperEPL2Grammar())) {
                    alt286=3;
                }
                else if ( (LA286_8==TIMEPERIOD_MINUTE) && (synpred9_EsperEPL2Grammar())) {
                    alt286=3;
                }
                else if ( (LA286_8==MIN) && (synpred9_EsperEPL2Grammar())) {
                    alt286=3;
                }
                else if ( (LA286_8==COLON) && (synpred11_EsperEPL2Grammar())) {
                    alt286=5;
                }
                else if ( (LA286_8==STAR) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_8==DIV) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_8==MOD) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_8==PLUS) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_8==MINUS) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_8==LOR) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_8==LT) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_8==GT) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_8==LE) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_8==GE) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_8==EQUALS) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_8==IS) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_8==SQL_NE) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_8==NOT_EQUAL) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_8==BAND) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_8==BOR) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_8==BXOR) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_8==AND_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_8==OR_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_8==ASC) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_8==DESC) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_8==COMMA) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_8==RPAREN) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_8==NOT_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_8==IN_SET) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_8==BETWEEN) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_8==LIKE) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_8==REGEXP) && (synpred10_EsperEPL2Grammar())) {
                    alt286=4;
                }
                else if ( (LA286_8==TIMEPERIOD_HOURS) && (synpred9_EsperEPL2Grammar())) {
                    alt286=3;
                }
                else if ( (LA286_8==TIMEPERIOD_HOUR) && (synpred9_EsperEPL2Grammar())) {
                    alt286=3;
                }
                else if ( (LA286_8==WEEKDAY) && (synpred14_EsperEPL2Grammar())) {
                    alt286=8;
                }
                else if ( (LA286_8==TIMEPERIOD_MILLISECONDS) && (synpred9_EsperEPL2Grammar())) {
                    alt286=3;
                }
                else if ( (LA286_8==TIMEPERIOD_MILLISECOND) && (synpred9_EsperEPL2Grammar())) {
                    alt286=3;
                }
                else if ( (LA286_8==TIMEPERIOD_MILLISEC) && (synpred9_EsperEPL2Grammar())) {
                    alt286=3;
                }
                else if ( (LA286_8==TIMEPERIOD_WEEKS) && (synpred9_EsperEPL2Grammar())) {
                    alt286=3;
                }
                else if ( (LA286_8==TIMEPERIOD_WEEK) && (synpred9_EsperEPL2Grammar())) {
                    alt286=3;
                }
                else if ( (LA286_8==TIMEPERIOD_MONTHS) && (synpred9_EsperEPL2Grammar())) {
                    alt286=3;
                }
                else if ( (LA286_8==TIMEPERIOD_MONTH) && (synpred9_EsperEPL2Grammar())) {
                    alt286=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 286, 8, input);
                    throw nvae;
                }
            }
            else if ( (LA286_0==CASE) && (synpred10_EsperEPL2Grammar())) {
                alt286=4;
            }
            else if ( (LA286_0==MINUS) && (synpred10_EsperEPL2Grammar())) {
                alt286=4;
            }
            else if ( (LA286_0==PLUS) && (synpred10_EsperEPL2Grammar())) {
                alt286=4;
            }
            else if ( (LA286_0==STRING_LITERAL) && (synpred10_EsperEPL2Grammar())) {
                alt286=4;
            }
            else if ( (LA286_0==QUOTED_STRING_LITERAL) && (synpred10_EsperEPL2Grammar())) {
                alt286=4;
            }
            else if ( (LA286_0==BOOLEAN_TRUE) && (synpred10_EsperEPL2Grammar())) {
                alt286=4;
            }
            else if ( (LA286_0==BOOLEAN_FALSE) && (synpred10_EsperEPL2Grammar())) {
                alt286=4;
            }
            else if ( (LA286_0==VALUE_NULL) && (synpred10_EsperEPL2Grammar())) {
                alt286=4;
            }
            else if ( (LA286_0==LPAREN) && (synpred10_EsperEPL2Grammar())) {
                alt286=4;
            }
            else if ( (LA286_0==TICKED_STRING_LITERAL) && (synpred10_EsperEPL2Grammar())) {
                alt286=4;
            }
            else if ( (LA286_0==AT) && (synpred10_EsperEPL2Grammar())) {
                alt286=4;
            }
            else if ( (LA286_0==COUNT) && (synpred10_EsperEPL2Grammar())) {
                alt286=4;
            }
            else if ( (LA286_0==ESCAPE) && (synpred10_EsperEPL2Grammar())) {
                alt286=4;
            }
            else if ( (LA286_0==EVERY_EXPR) && (synpred10_EsperEPL2Grammar())) {
                alt286=4;
            }
            else if ( (LA286_0==SUM) && (synpred10_EsperEPL2Grammar())) {
                alt286=4;
            }
            else if ( (LA286_0==AVG) && (synpred10_EsperEPL2Grammar())) {
                alt286=4;
            }
            else if ( (LA286_0==MAX) && (synpred10_EsperEPL2Grammar())) {
                alt286=4;
            }
            else if ( (LA286_0==MIN) && (synpred10_EsperEPL2Grammar())) {
                alt286=4;
            }
            else if ( (LA286_0==COALESCE) && (synpred10_EsperEPL2Grammar())) {
                alt286=4;
            }
            else if ( (LA286_0==MEDIAN) && (synpred10_EsperEPL2Grammar())) {
                alt286=4;
            }
            else if ( (LA286_0==STDDEV) && (synpred10_EsperEPL2Grammar())) {
                alt286=4;
            }
            else if ( (LA286_0==AVEDEV) && (synpred10_EsperEPL2Grammar())) {
                alt286=4;
            }
            else if ( (LA286_0==EVENTS) && (synpred10_EsperEPL2Grammar())) {
                alt286=4;
            }
            else if ( (LA286_0==FIRST) && (synpred10_EsperEPL2Grammar())) {
                alt286=4;
            }
            else if ( (LA286_0==WHILE) && (synpred10_EsperEPL2Grammar())) {
                alt286=4;
            }
            else if ( (LA286_0==MERGE) && (synpred10_EsperEPL2Grammar())) {
                alt286=4;
            }
            else if ( (LA286_0==MATCHED) && (synpred10_EsperEPL2Grammar())) {
                alt286=4;
            }
            else if ( (LA286_0==UNIDIRECTIONAL) && (synpred10_EsperEPL2Grammar())) {
                alt286=4;
            }
            else if ( (LA286_0==RETAINUNION) && (synpred10_EsperEPL2Grammar())) {
                alt286=4;
            }
            else if ( (LA286_0==RETAININTERSECTION) && (synpred10_EsperEPL2Grammar())) {
                alt286=4;
            }
            else if ( (LA286_0==UNTIL) && (synpred10_EsperEPL2Grammar())) {
                alt286=4;
            }
            else if ( (LA286_0==PATTERN) && (synpred10_EsperEPL2Grammar())) {
                alt286=4;
            }
            else if ( (LA286_0==SQL) && (synpred10_EsperEPL2Grammar())) {
                alt286=4;
            }
            else if ( (LA286_0==METADATASQL) && (synpred10_EsperEPL2Grammar())) {
                alt286=4;
            }
            else if ( (LA286_0==PREVIOUS) && (synpred10_EsperEPL2Grammar())) {
                alt286=4;
            }
            else if ( (LA286_0==PREVIOUSTAIL) && (synpred10_EsperEPL2Grammar())) {
                alt286=4;
            }
            else if ( (LA286_0==PRIOR) && (synpred10_EsperEPL2Grammar())) {
                alt286=4;
            }
            else if ( (LA286_0==WEEKDAY) && (synpred10_EsperEPL2Grammar())) {
                alt286=4;
            }
            else if ( (LA286_0==INSTANCEOF) && (synpred10_EsperEPL2Grammar())) {
                alt286=4;
            }
            else if ( (LA286_0==TYPEOF) && (synpred10_EsperEPL2Grammar())) {
                alt286=4;
            }
            else if ( (LA286_0==CAST) && (synpred10_EsperEPL2Grammar())) {
                alt286=4;
            }
            else if ( (LA286_0==SNAPSHOT) && (synpred10_EsperEPL2Grammar())) {
                alt286=4;
            }
            else if ( (LA286_0==VARIABLE) && (synpred10_EsperEPL2Grammar())) {
                alt286=4;
            }
            else if ( (LA286_0==INDEX) && (synpred10_EsperEPL2Grammar())) {
                alt286=4;
            }
            else if ( (LA286_0==WINDOW) && (synpred10_EsperEPL2Grammar())) {
                alt286=4;
            }
            else if ( (LA286_0==LEFT) && (synpred10_EsperEPL2Grammar())) {
                alt286=4;
            }
            else if ( (LA286_0==RIGHT) && (synpred10_EsperEPL2Grammar())) {
                alt286=4;
            }
            else if ( (LA286_0==OUTER) && (synpred10_EsperEPL2Grammar())) {
                alt286=4;
            }
            else if ( (LA286_0==FULL) && (synpred10_EsperEPL2Grammar())) {
                alt286=4;
            }
            else if ( (LA286_0==JOIN) && (synpred10_EsperEPL2Grammar())) {
                alt286=4;
            }
            else if ( (LA286_0==DEFINE) && (synpred10_EsperEPL2Grammar())) {
                alt286=4;
            }
            else if ( (LA286_0==PARTITION) && (synpred10_EsperEPL2Grammar())) {
                alt286=4;
            }
            else if ( (LA286_0==MATCHES) && (synpred10_EsperEPL2Grammar())) {
                alt286=4;
            }
            else if ( (LA286_0==WHERE) && (synpred10_EsperEPL2Grammar())) {
                alt286=4;
            }
            else if ( (LA286_0==PREVIOUSCOUNT) && (synpred10_EsperEPL2Grammar())) {
                alt286=4;
            }
            else if ( (LA286_0==PREVIOUSWINDOW) && (synpred10_EsperEPL2Grammar())) {
                alt286=4;
            }
            else if ( (LA286_0==EXISTS) && (synpred10_EsperEPL2Grammar())) {
                alt286=4;
            }
            else if ( (LA286_0==CURRENT_TIMESTAMP) && (synpred10_EsperEPL2Grammar())) {
                alt286=4;
            }
            else if ( (LA286_0==LCURLY) && (synpred10_EsperEPL2Grammar())) {
                alt286=4;
            }
            else if ( (LA286_0==NOT_EXPR) && (synpred10_EsperEPL2Grammar())) {
                alt286=4;
            }
            else if ( (LA286_0==STAR) ) {
                int LA286_69 = input.LA(2);
                if ( (LA286_69==DIV) && (synpred12_EsperEPL2Grammar())) {
                    alt286=6;
                }
                else if ( (LA286_69==RPAREN||LA286_69==COMMA) ) {
                    alt286=10;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 286, 69, input);
                    throw nvae;
                }
            }
            else if ( (LA286_0==LBRACK) && (synpred15_EsperEPL2Grammar())) {
                alt286=9;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 286, 0, input);
                throw nvae;
            }
            switch (alt286) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_lastOperand_in_expressionWithTime11076);
                    lastOperand761=lastOperand();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lastOperand761.getTree());
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_lastWeekdayOperand_in_expressionWithTime11087);
                    lastWeekdayOperand762=lastWeekdayOperand();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lastWeekdayOperand762.getTree());
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_timePeriod_in_expressionWithTime11098);
                    timePeriod763=timePeriod();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, timePeriod763.getTree());
                    }
                    break;
                case 4 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_expressionQualifyable_in_expressionWithTime11109);
                    expressionQualifyable764=expressionQualifyable();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionQualifyable764.getTree());
                    }
                    break;
                case 5 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_rangeOperand_in_expressionWithTime11120);
                    rangeOperand765=rangeOperand();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rangeOperand765.getTree());
                    }
                    break;
                case 6 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_frequencyOperand_in_expressionWithTime11132);
                    frequencyOperand766=frequencyOperand();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, frequencyOperand766.getTree());
                    }
                    break;
                case 7 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_lastOperator_in_expressionWithTime11143);
                    lastOperator767=lastOperator();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lastOperator767.getTree());
                    }
                    break;
                case 8 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_weekDayOperator_in_expressionWithTime11155);
                    weekDayOperator768=weekDayOperator();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, weekDayOperator768.getTree());
                    }
                    break;
                case 9 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_numericParameterList_in_expressionWithTime11167);
                    numericParameterList769=numericParameterList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numericParameterList769.getTree());
                    }
                    break;
                case 10 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_numberSetStar_in_expressionWithTime11172);
                    numberSetStar770=numberSetStar();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numberSetStar770.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class expressionQualifyable_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.expressionQualifyable_return expressionQualifyable() throws RecognitionException {
        EsperEPL2GrammarParser.expressionQualifyable_return retval = new EsperEPL2GrammarParser.expressionQualifyable_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token a=null;
        Token d=null;
        Token s=null;
        EsperEPL2GrammarParser.expression_return expression771 = null;
        CommonTree a_tree=null;
        CommonTree d_tree=null;
        CommonTree s_tree=null;
        RewriteRuleTokenStream stream_TIMEPERIOD_SEC=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SEC");
        RewriteRuleTokenStream stream_TIMEPERIOD_SECOND=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SECOND");
        RewriteRuleTokenStream stream_ASC=new RewriteRuleTokenStream(adaptor,"token ASC");
        RewriteRuleTokenStream stream_DESC=new RewriteRuleTokenStream(adaptor,"token DESC");
        RewriteRuleTokenStream stream_TIMEPERIOD_SECONDS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SECONDS");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            {
            pushFollow(FOLLOW_expression_in_expressionQualifyable11183);
            expression771=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression771.getTree());
            int alt287=6;
            switch ( input.LA(1) ) {
                case ASC:
                    {
                    alt287=1;
                    }
                    break;
                case DESC:
                    {
                    alt287=2;
                    }
                    break;
                case TIMEPERIOD_SECONDS:
                    {
                    alt287=3;
                    }
                    break;
                case TIMEPERIOD_SECOND:
                    {
                    alt287=4;
                    }
                    break;
                case TIMEPERIOD_SEC:
                    {
                    alt287=5;
                    }
                    break;
            }
            switch (alt287) {
                case 1 :
                    {
                    a=(Token)match(input,ASC,FOLLOW_ASC_in_expressionQualifyable11188); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASC.add(a);
                    }
                    break;
                case 2 :
                    {
                    d=(Token)match(input,DESC,FOLLOW_DESC_in_expressionQualifyable11192); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DESC.add(d);
                    }
                    break;
                case 3 :
                    {
                    s=(Token)match(input,TIMEPERIOD_SECONDS,FOLLOW_TIMEPERIOD_SECONDS_in_expressionQualifyable11196); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SECONDS.add(s);
                    }
                    break;
                case 4 :
                    {
                    s=(Token)match(input,TIMEPERIOD_SECOND,FOLLOW_TIMEPERIOD_SECOND_in_expressionQualifyable11200); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SECOND.add(s);
                    }
                    break;
                case 5 :
                    {
                    s=(Token)match(input,TIMEPERIOD_SEC,FOLLOW_TIMEPERIOD_SEC_in_expressionQualifyable11204); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SEC.add(s);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_d=new RewriteRuleTokenStream(adaptor,"token d",d);
            RewriteRuleTokenStream stream_a=new RewriteRuleTokenStream(adaptor,"token a",a);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (d != null || a != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(OBJECT_PARAM_ORDERED_EXPR, "OBJECT_PARAM_ORDERED_EXPR"), root_1);
                adaptor.addChild(root_1, stream_expression.nextTree());
                if ( stream_a.hasNext() ) {
                    adaptor.addChild(root_1, stream_a.nextNode());
                }
                stream_a.reset();
                if ( stream_d.hasNext() ) {
                    adaptor.addChild(root_1, stream_d.nextNode());
                }
                stream_d.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (s != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TIME_PERIOD, "TIME_PERIOD"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SECOND_PART, "SECOND_PART"), root_2);
                adaptor.addChild(root_2, stream_expression.nextTree());
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_expression.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class numberSetStar_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.numberSetStar_return numberSetStar() throws RecognitionException {
        EsperEPL2GrammarParser.numberSetStar_return retval = new EsperEPL2GrammarParser.numberSetStar_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token STAR772=null;
        CommonTree STAR772_tree=null;
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        try {
            {
            STAR772=(Token)match(input,STAR,FOLLOW_STAR_in_numberSetStar11261); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_STAR.add(STAR772);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMBERSETSTAR, "NUMBERSETSTAR"), root_1);
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class lastWeekdayOperand_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.lastWeekdayOperand_return lastWeekdayOperand() throws RecognitionException {
        EsperEPL2GrammarParser.lastWeekdayOperand_return retval = new EsperEPL2GrammarParser.lastWeekdayOperand_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LW773=null;
        CommonTree LW773_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            LW773=(Token)match(input,LW,FOLLOW_LW_in_lastWeekdayOperand11281); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LW773_tree = (CommonTree)adaptor.create(LW773);
            root_0 = (CommonTree)adaptor.becomeRoot(LW773_tree, root_0);
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class lastOperand_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.lastOperand_return lastOperand() throws RecognitionException {
        EsperEPL2GrammarParser.lastOperand_return retval = new EsperEPL2GrammarParser.lastOperand_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LAST774=null;
        CommonTree LAST774_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            LAST774=(Token)match(input,LAST,FOLLOW_LAST_in_lastOperand11294); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LAST774_tree = (CommonTree)adaptor.create(LAST774);
            root_0 = (CommonTree)adaptor.becomeRoot(LAST774_tree, root_0);
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class frequencyOperand_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.frequencyOperand_return frequencyOperand() throws RecognitionException {
        EsperEPL2GrammarParser.frequencyOperand_return retval = new EsperEPL2GrammarParser.frequencyOperand_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token STAR775=null;
        Token DIV776=null;
        EsperEPL2GrammarParser.number_return number777 = null;
        EsperEPL2GrammarParser.substitution_return substitution778 = null;
        CommonTree i_tree=null;
        CommonTree STAR775_tree=null;
        CommonTree DIV776_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_DIV=new RewriteRuleTokenStream(adaptor,"token DIV");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            {
            STAR775=(Token)match(input,STAR,FOLLOW_STAR_in_frequencyOperand11306); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_STAR.add(STAR775);
            DIV776=(Token)match(input,DIV,FOLLOW_DIV_in_frequencyOperand11308); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DIV.add(DIV776);
            int alt288=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt288=1;
                }
                break;
            case IDENT:
                {
                alt288=2;
                }
                break;
            case QUESTION:
                {
                alt288=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 288, 0, input);
                throw nvae;
            }
            switch (alt288) {
                case 1 :
                    {
                    pushFollow(FOLLOW_number_in_frequencyOperand11311);
                    number777=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number777.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_frequencyOperand11315); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_frequencyOperand11317);
                    substitution778=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution778.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_FREQUENCY, "NUMERIC_PARAM_FREQUENCY"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_FREQUENCY, "NUMERIC_PARAM_FREQUENCY"), root_1);
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class rangeOperand_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.rangeOperand_return rangeOperand() throws RecognitionException {
        EsperEPL2GrammarParser.rangeOperand_return retval = new EsperEPL2GrammarParser.rangeOperand_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i1=null;
        Token i2=null;
        Token COLON781=null;
        EsperEPL2GrammarParser.number_return number779 = null;
        EsperEPL2GrammarParser.substitution_return substitution780 = null;
        EsperEPL2GrammarParser.number_return number782 = null;
        EsperEPL2GrammarParser.substitution_return substitution783 = null;
        CommonTree i1_tree=null;
        CommonTree i2_tree=null;
        CommonTree COLON781_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            {
            int alt289=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt289=1;
                }
                break;
            case IDENT:
                {
                alt289=2;
                }
                break;
            case QUESTION:
                {
                alt289=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 289, 0, input);
                throw nvae;
            }
            switch (alt289) {
                case 1 :
                    {
                    pushFollow(FOLLOW_number_in_rangeOperand11366);
                    number779=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number779.getTree());
                    }
                    break;
                case 2 :
                    {
                    i1=(Token)match(input,IDENT,FOLLOW_IDENT_in_rangeOperand11370); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i1);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_rangeOperand11372);
                    substitution780=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution780.getTree());
                    }
                    break;
            }
            COLON781=(Token)match(input,COLON,FOLLOW_COLON_in_rangeOperand11375); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON781);
            int alt290=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt290=1;
                }
                break;
            case IDENT:
                {
                alt290=2;
                }
                break;
            case QUESTION:
                {
                alt290=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 290, 0, input);
                throw nvae;
            }
            switch (alt290) {
                case 1 :
                    {
                    pushFollow(FOLLOW_number_in_rangeOperand11378);
                    number782=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number782.getTree());
                    }
                    break;
                case 2 :
                    {
                    i2=(Token)match(input,IDENT,FOLLOW_IDENT_in_rangeOperand11382); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i2);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_rangeOperand11384);
                    substitution783=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution783.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i2=new RewriteRuleTokenStream(adaptor,"token i2",i2);
            RewriteRuleTokenStream stream_i1=new RewriteRuleTokenStream(adaptor,"token i1",i1);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i1 != null && i2 != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_RANGE, "NUMERIC_PARAM_RANGE"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i1.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i2.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (i1 != null && i2 == null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_RANGE, "NUMERIC_PARAM_RANGE"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i1.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (i1 == null && i2 != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_RANGE, "NUMERIC_PARAM_RANGE"), root_1);
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i2.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_RANGE, "NUMERIC_PARAM_RANGE"), root_1);
                while ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                while ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class lastOperator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.lastOperator_return lastOperator() throws RecognitionException {
        EsperEPL2GrammarParser.lastOperator_return retval = new EsperEPL2GrammarParser.lastOperator_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token LAST786=null;
        EsperEPL2GrammarParser.number_return number784 = null;
        EsperEPL2GrammarParser.substitution_return substitution785 = null;
        CommonTree i_tree=null;
        CommonTree LAST786_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_LAST=new RewriteRuleTokenStream(adaptor,"token LAST");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            {
            int alt291=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt291=1;
                }
                break;
            case IDENT:
                {
                alt291=2;
                }
                break;
            case QUESTION:
                {
                alt291=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 291, 0, input);
                throw nvae;
            }
            switch (alt291) {
                case 1 :
                    {
                    pushFollow(FOLLOW_number_in_lastOperator11498);
                    number784=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number784.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_lastOperator11502); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_lastOperator11504);
                    substitution785=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution785.getTree());
                    }
                    break;
            }
            LAST786=(Token)match(input,LAST,FOLLOW_LAST_in_lastOperator11507); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LAST.add(LAST786);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LAST_OPERATOR, "LAST_OPERATOR"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LAST_OPERATOR, "LAST_OPERATOR"), root_1);
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class weekDayOperator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.weekDayOperator_return weekDayOperator() throws RecognitionException {
        EsperEPL2GrammarParser.weekDayOperator_return retval = new EsperEPL2GrammarParser.weekDayOperator_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token WEEKDAY789=null;
        EsperEPL2GrammarParser.number_return number787 = null;
        EsperEPL2GrammarParser.substitution_return substitution788 = null;
        CommonTree i_tree=null;
        CommonTree WEEKDAY789_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_WEEKDAY=new RewriteRuleTokenStream(adaptor,"token WEEKDAY");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            {
            int alt292=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt292=1;
                }
                break;
            case IDENT:
                {
                alt292=2;
                }
                break;
            case QUESTION:
                {
                alt292=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 292, 0, input);
                throw nvae;
            }
            switch (alt292) {
                case 1 :
                    {
                    pushFollow(FOLLOW_number_in_weekDayOperator11555);
                    number787=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number787.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_weekDayOperator11559); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_weekDayOperator11561);
                    substitution788=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution788.getTree());
                    }
                    break;
            }
            WEEKDAY789=(Token)match(input,WEEKDAY,FOLLOW_WEEKDAY_in_weekDayOperator11564); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_WEEKDAY.add(WEEKDAY789);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WEEKDAY_OPERATOR, "WEEKDAY_OPERATOR"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WEEKDAY_OPERATOR, "WEEKDAY_OPERATOR"), root_1);
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class numericParameterList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.numericParameterList_return numericParameterList() throws RecognitionException {
        EsperEPL2GrammarParser.numericParameterList_return retval = new EsperEPL2GrammarParser.numericParameterList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LBRACK790=null;
        Token COMMA792=null;
        Token RBRACK794=null;
        EsperEPL2GrammarParser.numericListParameter_return numericListParameter791 = null;
        EsperEPL2GrammarParser.numericListParameter_return numericListParameter793 = null;
        CommonTree LBRACK790_tree=null;
        CommonTree COMMA792_tree=null;
        CommonTree RBRACK794_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_numericListParameter=new RewriteRuleSubtreeStream(adaptor,"rule numericListParameter");
        try {
            {
            LBRACK790=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_numericParameterList11611); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK790);
            pushFollow(FOLLOW_numericListParameter_in_numericParameterList11613);
            numericListParameter791=numericListParameter();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_numericListParameter.add(numericListParameter791.getTree());
            loop293:
            do {
                int alt293=2;
                int LA293_0 = input.LA(1);
                if ( (LA293_0==COMMA) ) {
                    alt293=1;
                }
                switch (alt293) {
            	case 1 :
            	    {
            	    COMMA792=(Token)match(input,COMMA,FOLLOW_COMMA_in_numericParameterList11616); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA792);
            	    pushFollow(FOLLOW_numericListParameter_in_numericParameterList11618);
            	    numericListParameter793=numericListParameter();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_numericListParameter.add(numericListParameter793.getTree());
            	    }
            	    break;
            	default :
            	    break loop293;
                }
            } while (true);
            RBRACK794=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_numericParameterList11622); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK794);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_LIST, "NUMERIC_PARAM_LIST"), root_1);
                if ( !(stream_numericListParameter.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_numericListParameter.hasNext() ) {
                    adaptor.addChild(root_1, stream_numericListParameter.nextTree());
                }
                stream_numericListParameter.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class numericListParameter_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.numericListParameter_return numericListParameter() throws RecognitionException {
        EsperEPL2GrammarParser.numericListParameter_return retval = new EsperEPL2GrammarParser.numericListParameter_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.rangeOperand_return rangeOperand795 = null;
        EsperEPL2GrammarParser.frequencyOperand_return frequencyOperand796 = null;
        EsperEPL2GrammarParser.numberconstant_return numberconstant797 = null;
        try {
            int alt294=3;
            switch ( input.LA(1) ) {
            case NUM_INT:
                {
                int LA294_1 = input.LA(2);
                if ( (LA294_1==COLON) ) {
                    alt294=1;
                }
                else if ( (LA294_1==COMMA||LA294_1==RBRACK) ) {
                    alt294=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 294, 1, input);
                    throw nvae;
                }
                }
                break;
            case NUM_LONG:
                {
                int LA294_2 = input.LA(2);
                if ( (LA294_2==COLON) ) {
                    alt294=1;
                }
                else if ( (LA294_2==COMMA||LA294_2==RBRACK) ) {
                    alt294=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 294, 2, input);
                    throw nvae;
                }
                }
                break;
            case NUM_FLOAT:
                {
                int LA294_3 = input.LA(2);
                if ( (LA294_3==COLON) ) {
                    alt294=1;
                }
                else if ( (LA294_3==COMMA||LA294_3==RBRACK) ) {
                    alt294=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 294, 3, input);
                    throw nvae;
                }
                }
                break;
            case NUM_DOUBLE:
                {
                int LA294_4 = input.LA(2);
                if ( (LA294_4==COLON) ) {
                    alt294=1;
                }
                else if ( (LA294_4==COMMA||LA294_4==RBRACK) ) {
                    alt294=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 294, 4, input);
                    throw nvae;
                }
                }
                break;
            case IDENT:
            case QUESTION:
                {
                alt294=1;
                }
                break;
            case STAR:
                {
                alt294=2;
                }
                break;
            case PLUS:
            case MINUS:
                {
                alt294=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 294, 0, input);
                throw nvae;
            }
            switch (alt294) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_rangeOperand_in_numericListParameter11644);
                    rangeOperand795=rangeOperand();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rangeOperand795.getTree());
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_frequencyOperand_in_numericListParameter11650);
                    frequencyOperand796=frequencyOperand();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, frequencyOperand796.getTree());
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_numberconstant_in_numericListParameter11655);
                    numberconstant797=numberconstant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numberconstant797.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class eventProperty_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.eventProperty_return eventProperty() throws RecognitionException {
        EsperEPL2GrammarParser.eventProperty_return retval = new EsperEPL2GrammarParser.eventProperty_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token DOT799=null;
        EsperEPL2GrammarParser.eventPropertyAtomic_return eventPropertyAtomic798 = null;
        EsperEPL2GrammarParser.eventPropertyAtomic_return eventPropertyAtomic800 = null;
        CommonTree DOT799_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_eventPropertyAtomic=new RewriteRuleSubtreeStream(adaptor,"rule eventPropertyAtomic");
        try {
            {
            pushFollow(FOLLOW_eventPropertyAtomic_in_eventProperty11671);
            eventPropertyAtomic798=eventPropertyAtomic();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventPropertyAtomic.add(eventPropertyAtomic798.getTree());
            loop295:
            do {
                int alt295=2;
                int LA295_0 = input.LA(1);
                if ( (LA295_0==DOT) ) {
                    alt295=1;
                }
                switch (alt295) {
            	case 1 :
            	    {
            	    DOT799=(Token)match(input,DOT,FOLLOW_DOT_in_eventProperty11674); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT799);
            	    pushFollow(FOLLOW_eventPropertyAtomic_in_eventProperty11676);
            	    eventPropertyAtomic800=eventPropertyAtomic();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_eventPropertyAtomic.add(eventPropertyAtomic800.getTree());
            	    }
            	    break;
            	default :
            	    break loop295;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_1);
                if ( !(stream_eventPropertyAtomic.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_eventPropertyAtomic.hasNext() ) {
                    adaptor.addChild(root_1, stream_eventPropertyAtomic.nextTree());
                }
                stream_eventPropertyAtomic.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class eventPropertyAtomic_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.eventPropertyAtomic_return eventPropertyAtomic() throws RecognitionException {
        EsperEPL2GrammarParser.eventPropertyAtomic_return retval = new EsperEPL2GrammarParser.eventPropertyAtomic_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token lb=null;
        Token ni=null;
        Token q=null;
        Token lp=null;
        Token s=null;
        Token q1=null;
        Token RBRACK802=null;
        Token RPAREN803=null;
        EsperEPL2GrammarParser.eventPropertyIdent_return eventPropertyIdent801 = null;
        CommonTree lb_tree=null;
        CommonTree ni_tree=null;
        CommonTree q_tree=null;
        CommonTree lp_tree=null;
        CommonTree s_tree=null;
        CommonTree q1_tree=null;
        CommonTree RBRACK802_tree=null;
        CommonTree RPAREN803_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token STRING_LITERAL");
        RewriteRuleTokenStream stream_QUESTION=new RewriteRuleTokenStream(adaptor,"token QUESTION");
        RewriteRuleTokenStream stream_QUOTED_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token QUOTED_STRING_LITERAL");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_NUM_INT=new RewriteRuleTokenStream(adaptor,"token NUM_INT");
        RewriteRuleSubtreeStream stream_eventPropertyIdent=new RewriteRuleSubtreeStream(adaptor,"rule eventPropertyIdent");
        try {
            {
            pushFollow(FOLLOW_eventPropertyIdent_in_eventPropertyAtomic11702);
            eventPropertyIdent801=eventPropertyIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventPropertyIdent.add(eventPropertyIdent801.getTree());
            int alt299=4;
            switch ( input.LA(1) ) {
                case LBRACK:
                    {
                    alt299=1;
                    }
                    break;
                case LPAREN:
                    {
                    alt299=2;
                    }
                    break;
                case QUESTION:
                    {
                    alt299=3;
                    }
                    break;
            }
            switch (alt299) {
                case 1 :
                    {
                    lb=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_eventPropertyAtomic11711); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LBRACK.add(lb);
                    ni=(Token)match(input,NUM_INT,FOLLOW_NUM_INT_in_eventPropertyAtomic11715); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_INT.add(ni);
                    RBRACK802=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_eventPropertyAtomic11717); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK802);
                    int alt296=2;
                    int LA296_0 = input.LA(1);
                    if ( (LA296_0==QUESTION) ) {
                        alt296=1;
                    }
                    switch (alt296) {
                        case 1 :
                            {
                            q=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_eventPropertyAtomic11722); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUESTION.add(q);
                            }
                            break;
                    }
                    }
                    break;
                case 2 :
                    {
                    lp=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_eventPropertyAtomic11736); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(lp);
                    int alt297=2;
                    int LA297_0 = input.LA(1);
                    if ( (LA297_0==STRING_LITERAL) ) {
                        alt297=1;
                    }
                    else if ( (LA297_0==QUOTED_STRING_LITERAL) ) {
                        alt297=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 297, 0, input);
                        throw nvae;
                    }
                    switch (alt297) {
                        case 1 :
                            {
                            s=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_eventPropertyAtomic11741); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_STRING_LITERAL.add(s);
                            }
                            break;
                        case 2 :
                            {
                            s=(Token)match(input,QUOTED_STRING_LITERAL,FOLLOW_QUOTED_STRING_LITERAL_in_eventPropertyAtomic11747); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUOTED_STRING_LITERAL.add(s);
                            }
                            break;
                    }
                    RPAREN803=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_eventPropertyAtomic11750); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN803);
                    int alt298=2;
                    int LA298_0 = input.LA(1);
                    if ( (LA298_0==QUESTION) ) {
                        alt298=1;
                    }
                    switch (alt298) {
                        case 1 :
                            {
                            q=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_eventPropertyAtomic11755); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUESTION.add(q);
                            }
                            break;
                    }
                    }
                    break;
                case 3 :
                    {
                    q1=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_eventPropertyAtomic11769); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUESTION.add(q1);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_ni=new RewriteRuleTokenStream(adaptor,"token ni",ni);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (lb!= null && q == null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_INDEXED, "EVENT_PROP_INDEXED"), root_1);
                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_1, stream_ni.nextNode());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (lb!= null && q != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_DYNAMIC_INDEXED, "EVENT_PROP_DYNAMIC_INDEXED"), root_1);
                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_1, stream_ni.nextNode());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (lp!= null && q == null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_MAPPED, "EVENT_PROP_MAPPED"), root_1);
                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_1, stream_s.nextNode());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (lp!= null && q != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_DYNAMIC_MAPPED, "EVENT_PROP_DYNAMIC_MAPPED"), root_1);
                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_1, stream_s.nextNode());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (q1 != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_DYNAMIC_SIMPLE, "EVENT_PROP_DYNAMIC_SIMPLE"), root_1);
                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_1);
                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class eventPropertyIdent_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.eventPropertyIdent_return eventPropertyIdent() throws RecognitionException {
        EsperEPL2GrammarParser.eventPropertyIdent_return retval = new EsperEPL2GrammarParser.eventPropertyIdent_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ESCAPECHAR804=null;
        Token DOT805=null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return ipi = null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return ipi2 = null;
        CommonTree ESCAPECHAR804_tree=null;
        CommonTree DOT805_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_ESCAPECHAR=new RewriteRuleTokenStream(adaptor,"token ESCAPECHAR");
        RewriteRuleSubtreeStream stream_keywordAllowedIdent=new RewriteRuleSubtreeStream(adaptor,"rule keywordAllowedIdent");
         String identifier = ""; 
        try {
            {
            pushFollow(FOLLOW_keywordAllowedIdent_in_eventPropertyIdent11892);
            ipi=keywordAllowedIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(ipi.getTree());
            if ( state.backtracking==0 ) {
               identifier = ipi.result; 
            }
            loop301:
            do {
                int alt301=2;
                int LA301_0 = input.LA(1);
                if ( (LA301_0==ESCAPECHAR) ) {
                    alt301=1;
                }
                switch (alt301) {
            	case 1 :
            	    {
            	    ESCAPECHAR804=(Token)match(input,ESCAPECHAR,FOLLOW_ESCAPECHAR_in_eventPropertyIdent11904); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_ESCAPECHAR.add(ESCAPECHAR804);
            	    DOT805=(Token)match(input,DOT,FOLLOW_DOT_in_eventPropertyIdent11906); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT805);
            	    int alt300=2;
            	    switch ( input.LA(1) ) {
            	        case WINDOW:
            	        case EVERY_EXPR:
            	        case SUM:
            	        case AVG:
            	        case MAX:
            	        case MIN:
            	        case COALESCE:
            	        case MEDIAN:
            	        case STDDEV:
            	        case AVEDEV:
            	        case COUNT:
            	        case OUTER:
            	        case EVENTS:
            	        case FIRST:
            	        case LAST:
            	        case UNIDIRECTIONAL:
            	        case RETAINUNION:
            	        case RETAININTERSECTION:
            	        case SQL:
            	        case METADATASQL:
            	        case PREVIOUS:
            	        case PREVIOUSTAIL:
            	        case PRIOR:
            	        case WEEKDAY:
            	        case LW:
            	        case INSTANCEOF:
            	        case TYPEOF:
            	        case CAST:
            	        case SNAPSHOT:
            	        case VARIABLE:
            	        case UNTIL:
            	        case AT:
            	        case INDEX:
            	        case DEFINE:
            	        case PARTITION:
            	        case MATCHES:
            	        case WHILE:
            	        case MERGE:
            	        case MATCHED:
            	        case IDENT:
            	        case TICKED_STRING_LITERAL:
            	            {
            	            alt300=1;
            	            }
            	            break;
            	        case ESCAPE:
            	            {
            	            int LA300_5 = input.LA(2);
            	            if ( (LA300_5==EOF||(LA300_5>=IN_SET && LA300_5<=NOT_EXPR)||(LA300_5>=WHERE && LA300_5<=AS)||(LA300_5>=ELSE && LA300_5<=FROM)||(LA300_5>=INNER && LA300_5<=FULL)||LA300_5==IS||(LA300_5>=GROUP && LA300_5<=HAVING)||LA300_5==ALL||LA300_5==OUTPUT||LA300_5==INSERT||(LA300_5>=ORDER && LA300_5<=DESC)||LA300_5==PATTERN||(LA300_5>=TIMEPERIOD_SEC && LA300_5<=TIMEPERIOD_SECONDS)||LA300_5==ROW_LIMIT_EXPR||(LA300_5>=MATCH_RECOGNIZE && LA300_5<=MEASURES)||(LA300_5>=AFTER && LA300_5<=FOR)||(LA300_5>=RCURLY && LA300_5<=RPAREN)||(LA300_5>=COMMA && LA300_5<=COLON)||(LA300_5>=BAND && LA300_5<=MOD)||(LA300_5>=FOLLOWMAX_END && LA300_5<=ESCAPECHAR)) ) {
            	                alt300=1;
            	            }
            	            }
            	            break;
            	        case PATTERN:
            	            {
            	            int LA300_25 = input.LA(2);
            	            if ( (LA300_25==LPAREN) ) {
            	                int LA300_176 = input.LA(3);
            	                if ( ((LA300_176>=STRING_LITERAL && LA300_176<=QUOTED_STRING_LITERAL)) ) {
            	                    alt300=1;
            	                }
            	            }
            	            else if ( (LA300_25==EOF||(LA300_25>=IN_SET && LA300_25<=NOT_EXPR)||(LA300_25>=WHERE && LA300_25<=AS)||(LA300_25>=ELSE && LA300_25<=FROM)||(LA300_25>=INNER && LA300_25<=FULL)||LA300_25==IS||(LA300_25>=GROUP && LA300_25<=HAVING)||LA300_25==ALL||LA300_25==OUTPUT||LA300_25==INSERT||(LA300_25>=ORDER && LA300_25<=DESC)||LA300_25==PATTERN||(LA300_25>=TIMEPERIOD_SEC && LA300_25<=TIMEPERIOD_SECONDS)||LA300_25==ROW_LIMIT_EXPR||(LA300_25>=MATCH_RECOGNIZE && LA300_25<=MEASURES)||(LA300_25>=AFTER && LA300_25<=FOR)||LA300_25==RCURLY||LA300_25==RPAREN||(LA300_25>=COMMA && LA300_25<=COLON)||(LA300_25>=BAND && LA300_25<=MOD)||(LA300_25>=FOLLOWMAX_END && LA300_25<=ESCAPECHAR)) ) {
            	                alt300=1;
            	            }
            	            }
            	            break;
            	        case LEFT:
            	            {
            	            int LA300_40 = input.LA(2);
            	            if ( (LA300_40==EOF||(LA300_40>=IN_SET && LA300_40<=NOT_EXPR)||(LA300_40>=WHERE && LA300_40<=AS)||(LA300_40>=ELSE && LA300_40<=FROM)||(LA300_40>=INNER && LA300_40<=FULL)||LA300_40==IS||(LA300_40>=GROUP && LA300_40<=HAVING)||LA300_40==ALL||LA300_40==OUTPUT||LA300_40==INSERT||(LA300_40>=ORDER && LA300_40<=DESC)||LA300_40==PATTERN||(LA300_40>=TIMEPERIOD_SEC && LA300_40<=TIMEPERIOD_SECONDS)||LA300_40==ROW_LIMIT_EXPR||(LA300_40>=MATCH_RECOGNIZE && LA300_40<=MEASURES)||(LA300_40>=AFTER && LA300_40<=FOR)||(LA300_40>=RCURLY && LA300_40<=RPAREN)||(LA300_40>=COMMA && LA300_40<=COLON)||(LA300_40>=BAND && LA300_40<=MOD)||(LA300_40>=FOLLOWMAX_END && LA300_40<=ESCAPECHAR)) ) {
            	                alt300=1;
            	            }
            	            }
            	            break;
            	        case RIGHT:
            	            {
            	            int LA300_41 = input.LA(2);
            	            if ( (LA300_41==EOF||(LA300_41>=IN_SET && LA300_41<=NOT_EXPR)||(LA300_41>=WHERE && LA300_41<=AS)||(LA300_41>=ELSE && LA300_41<=FROM)||(LA300_41>=INNER && LA300_41<=FULL)||LA300_41==IS||(LA300_41>=GROUP && LA300_41<=HAVING)||LA300_41==ALL||LA300_41==OUTPUT||LA300_41==INSERT||(LA300_41>=ORDER && LA300_41<=DESC)||LA300_41==PATTERN||(LA300_41>=TIMEPERIOD_SEC && LA300_41<=TIMEPERIOD_SECONDS)||LA300_41==ROW_LIMIT_EXPR||(LA300_41>=MATCH_RECOGNIZE && LA300_41<=MEASURES)||(LA300_41>=AFTER && LA300_41<=FOR)||(LA300_41>=RCURLY && LA300_41<=RPAREN)||(LA300_41>=COMMA && LA300_41<=COLON)||(LA300_41>=BAND && LA300_41<=MOD)||(LA300_41>=FOLLOWMAX_END && LA300_41<=ESCAPECHAR)) ) {
            	                alt300=1;
            	            }
            	            }
            	            break;
            	        case FULL:
            	            {
            	            int LA300_43 = input.LA(2);
            	            if ( (LA300_43==EOF||(LA300_43>=IN_SET && LA300_43<=NOT_EXPR)||(LA300_43>=WHERE && LA300_43<=AS)||(LA300_43>=ELSE && LA300_43<=FROM)||(LA300_43>=INNER && LA300_43<=FULL)||LA300_43==IS||(LA300_43>=GROUP && LA300_43<=HAVING)||LA300_43==ALL||LA300_43==OUTPUT||LA300_43==INSERT||(LA300_43>=ORDER && LA300_43<=DESC)||LA300_43==PATTERN||(LA300_43>=TIMEPERIOD_SEC && LA300_43<=TIMEPERIOD_SECONDS)||LA300_43==ROW_LIMIT_EXPR||(LA300_43>=MATCH_RECOGNIZE && LA300_43<=MEASURES)||(LA300_43>=AFTER && LA300_43<=FOR)||(LA300_43>=RCURLY && LA300_43<=RPAREN)||(LA300_43>=COMMA && LA300_43<=COLON)||(LA300_43>=BAND && LA300_43<=MOD)||(LA300_43>=FOLLOWMAX_END && LA300_43<=ESCAPECHAR)) ) {
            	                alt300=1;
            	            }
            	            }
            	            break;
            	        case JOIN:
            	            {
            	            int LA300_44 = input.LA(2);
            	            if ( (LA300_44==PATTERN) ) {
            	                int LA300_445 = input.LA(3);
            	                if ( (LA300_445==LPAREN) ) {
            	                    alt300=1;
            	                }
            	            }
            	            else if ( (LA300_44==EOF||(LA300_44>=IN_SET && LA300_44<=NOT_EXPR)||(LA300_44>=WHERE && LA300_44<=AS)||(LA300_44>=ELSE && LA300_44<=FROM)||(LA300_44>=INNER && LA300_44<=FULL)||LA300_44==IS||(LA300_44>=GROUP && LA300_44<=HAVING)||LA300_44==ALL||LA300_44==OUTPUT||LA300_44==INSERT||(LA300_44>=ORDER && LA300_44<=DESC)||(LA300_44>=TIMEPERIOD_SEC && LA300_44<=TIMEPERIOD_SECONDS)||LA300_44==ROW_LIMIT_EXPR||(LA300_44>=MATCH_RECOGNIZE && LA300_44<=MEASURES)||(LA300_44>=AFTER && LA300_44<=FOR)||(LA300_44>=RCURLY && LA300_44<=RPAREN)||(LA300_44>=COMMA && LA300_44<=COLON)||(LA300_44>=BAND && LA300_44<=MOD)||(LA300_44>=FOLLOWMAX_END && LA300_44<=ESCAPECHAR)) ) {
            	                alt300=1;
            	            }
            	            }
            	            break;
            	    }
            	    switch (alt300) {
            	        case 1 :
            	            {
            	            pushFollow(FOLLOW_keywordAllowedIdent_in_eventPropertyIdent11910);
            	            ipi2=keywordAllowedIdent();
            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(ipi2.getTree());
            	            }
            	            break;
            	    }
            	    if ( state.backtracking==0 ) {
            	       identifier += "."; if (ipi2 != null) identifier += ipi2.result; 
            	    }
            	    }
            	    break;
            	default :
            	    break loop301;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IDENT, identifier), root_1);
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class keywordAllowedIdent_return extends ParserRuleReturnScope {
        public String result;
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.keywordAllowedIdent_return keywordAllowedIdent() throws RecognitionException {
        EsperEPL2GrammarParser.keywordAllowedIdent_return retval = new EsperEPL2GrammarParser.keywordAllowedIdent_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i1=null;
        Token i2=null;
        Token AT806=null;
        Token COUNT807=null;
        Token ESCAPE808=null;
        Token EVERY_EXPR809=null;
        Token SUM810=null;
        Token AVG811=null;
        Token MAX812=null;
        Token MIN813=null;
        Token COALESCE814=null;
        Token MEDIAN815=null;
        Token STDDEV816=null;
        Token AVEDEV817=null;
        Token EVENTS818=null;
        Token FIRST819=null;
        Token LAST820=null;
        Token WHILE821=null;
        Token MERGE822=null;
        Token MATCHED823=null;
        Token UNIDIRECTIONAL824=null;
        Token RETAINUNION825=null;
        Token RETAININTERSECTION826=null;
        Token UNTIL827=null;
        Token PATTERN828=null;
        Token SQL829=null;
        Token METADATASQL830=null;
        Token PREVIOUS831=null;
        Token PREVIOUSTAIL832=null;
        Token PRIOR833=null;
        Token WEEKDAY834=null;
        Token LW835=null;
        Token INSTANCEOF836=null;
        Token TYPEOF837=null;
        Token CAST838=null;
        Token SNAPSHOT839=null;
        Token VARIABLE840=null;
        Token INDEX841=null;
        Token WINDOW842=null;
        Token LEFT843=null;
        Token RIGHT844=null;
        Token OUTER845=null;
        Token FULL846=null;
        Token JOIN847=null;
        Token DEFINE848=null;
        Token PARTITION849=null;
        Token MATCHES850=null;
        CommonTree i1_tree=null;
        CommonTree i2_tree=null;
        CommonTree AT806_tree=null;
        CommonTree COUNT807_tree=null;
        CommonTree ESCAPE808_tree=null;
        CommonTree EVERY_EXPR809_tree=null;
        CommonTree SUM810_tree=null;
        CommonTree AVG811_tree=null;
        CommonTree MAX812_tree=null;
        CommonTree MIN813_tree=null;
        CommonTree COALESCE814_tree=null;
        CommonTree MEDIAN815_tree=null;
        CommonTree STDDEV816_tree=null;
        CommonTree AVEDEV817_tree=null;
        CommonTree EVENTS818_tree=null;
        CommonTree FIRST819_tree=null;
        CommonTree LAST820_tree=null;
        CommonTree WHILE821_tree=null;
        CommonTree MERGE822_tree=null;
        CommonTree MATCHED823_tree=null;
        CommonTree UNIDIRECTIONAL824_tree=null;
        CommonTree RETAINUNION825_tree=null;
        CommonTree RETAININTERSECTION826_tree=null;
        CommonTree UNTIL827_tree=null;
        CommonTree PATTERN828_tree=null;
        CommonTree SQL829_tree=null;
        CommonTree METADATASQL830_tree=null;
        CommonTree PREVIOUS831_tree=null;
        CommonTree PREVIOUSTAIL832_tree=null;
        CommonTree PRIOR833_tree=null;
        CommonTree WEEKDAY834_tree=null;
        CommonTree LW835_tree=null;
        CommonTree INSTANCEOF836_tree=null;
        CommonTree TYPEOF837_tree=null;
        CommonTree CAST838_tree=null;
        CommonTree SNAPSHOT839_tree=null;
        CommonTree VARIABLE840_tree=null;
        CommonTree INDEX841_tree=null;
        CommonTree WINDOW842_tree=null;
        CommonTree LEFT843_tree=null;
        CommonTree RIGHT844_tree=null;
        CommonTree OUTER845_tree=null;
        CommonTree FULL846_tree=null;
        CommonTree JOIN847_tree=null;
        CommonTree DEFINE848_tree=null;
        CommonTree PARTITION849_tree=null;
        CommonTree MATCHES850_tree=null;
        try {
            int alt302=47;
            switch ( input.LA(1) ) {
            case IDENT:
                {
                alt302=1;
                }
                break;
            case TICKED_STRING_LITERAL:
                {
                alt302=2;
                }
                break;
            case AT:
                {
                alt302=3;
                }
                break;
            case COUNT:
                {
                alt302=4;
                }
                break;
            case ESCAPE:
                {
                alt302=5;
                }
                break;
            case EVERY_EXPR:
                {
                alt302=6;
                }
                break;
            case SUM:
                {
                alt302=7;
                }
                break;
            case AVG:
                {
                alt302=8;
                }
                break;
            case MAX:
                {
                alt302=9;
                }
                break;
            case MIN:
                {
                alt302=10;
                }
                break;
            case COALESCE:
                {
                alt302=11;
                }
                break;
            case MEDIAN:
                {
                alt302=12;
                }
                break;
            case STDDEV:
                {
                alt302=13;
                }
                break;
            case AVEDEV:
                {
                alt302=14;
                }
                break;
            case EVENTS:
                {
                alt302=15;
                }
                break;
            case FIRST:
                {
                alt302=16;
                }
                break;
            case LAST:
                {
                alt302=17;
                }
                break;
            case WHILE:
                {
                alt302=18;
                }
                break;
            case MERGE:
                {
                alt302=19;
                }
                break;
            case MATCHED:
                {
                alt302=20;
                }
                break;
            case UNIDIRECTIONAL:
                {
                alt302=21;
                }
                break;
            case RETAINUNION:
                {
                alt302=22;
                }
                break;
            case RETAININTERSECTION:
                {
                alt302=23;
                }
                break;
            case UNTIL:
                {
                alt302=24;
                }
                break;
            case PATTERN:
                {
                alt302=25;
                }
                break;
            case SQL:
                {
                alt302=26;
                }
                break;
            case METADATASQL:
                {
                alt302=27;
                }
                break;
            case PREVIOUS:
                {
                alt302=28;
                }
                break;
            case PREVIOUSTAIL:
                {
                alt302=29;
                }
                break;
            case PRIOR:
                {
                alt302=30;
                }
                break;
            case WEEKDAY:
                {
                alt302=31;
                }
                break;
            case LW:
                {
                alt302=32;
                }
                break;
            case INSTANCEOF:
                {
                alt302=33;
                }
                break;
            case TYPEOF:
                {
                alt302=34;
                }
                break;
            case CAST:
                {
                alt302=35;
                }
                break;
            case SNAPSHOT:
                {
                alt302=36;
                }
                break;
            case VARIABLE:
                {
                alt302=37;
                }
                break;
            case INDEX:
                {
                alt302=38;
                }
                break;
            case WINDOW:
                {
                alt302=39;
                }
                break;
            case LEFT:
                {
                alt302=40;
                }
                break;
            case RIGHT:
                {
                alt302=41;
                }
                break;
            case OUTER:
                {
                alt302=42;
                }
                break;
            case FULL:
                {
                alt302=43;
                }
                break;
            case JOIN:
                {
                alt302=44;
                }
                break;
            case DEFINE:
                {
                alt302=45;
                }
                break;
            case PARTITION:
                {
                alt302=46;
                }
                break;
            case MATCHES:
                {
                alt302=47;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 302, 0, input);
                throw nvae;
            }
            switch (alt302) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    i1=(Token)match(input,IDENT,FOLLOW_IDENT_in_keywordAllowedIdent11949); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    i1_tree = (CommonTree)adaptor.create(i1);
                    adaptor.addChild(root_0, i1_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = i1.getText(); 
                    }
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    i2=(Token)match(input,TICKED_STRING_LITERAL,FOLLOW_TICKED_STRING_LITERAL_in_keywordAllowedIdent11958); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    i2_tree = (CommonTree)adaptor.create(i2);
                    adaptor.addChild(root_0, i2_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = removeTicks(i2.getText()); 
                    }
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    AT806=(Token)match(input,AT,FOLLOW_AT_in_keywordAllowedIdent11965); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AT806_tree = (CommonTree)adaptor.create(AT806);
                    adaptor.addChild(root_0, AT806_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "at"; 
                    }
                    }
                    break;
                case 4 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    COUNT807=(Token)match(input,COUNT,FOLLOW_COUNT_in_keywordAllowedIdent11972); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COUNT807_tree = (CommonTree)adaptor.create(COUNT807);
                    adaptor.addChild(root_0, COUNT807_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "count"; 
                    }
                    }
                    break;
                case 5 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    ESCAPE808=(Token)match(input,ESCAPE,FOLLOW_ESCAPE_in_keywordAllowedIdent11979); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ESCAPE808_tree = (CommonTree)adaptor.create(ESCAPE808);
                    adaptor.addChild(root_0, ESCAPE808_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "escape"; 
                    }
                    }
                    break;
                case 6 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    EVERY_EXPR809=(Token)match(input,EVERY_EXPR,FOLLOW_EVERY_EXPR_in_keywordAllowedIdent11990); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EVERY_EXPR809_tree = (CommonTree)adaptor.create(EVERY_EXPR809);
                    adaptor.addChild(root_0, EVERY_EXPR809_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "every"; 
                    }
                    }
                    break;
                case 7 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    SUM810=(Token)match(input,SUM,FOLLOW_SUM_in_keywordAllowedIdent11997); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SUM810_tree = (CommonTree)adaptor.create(SUM810);
                    adaptor.addChild(root_0, SUM810_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "sum"; 
                    }
                    }
                    break;
                case 8 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    AVG811=(Token)match(input,AVG,FOLLOW_AVG_in_keywordAllowedIdent12004); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AVG811_tree = (CommonTree)adaptor.create(AVG811);
                    adaptor.addChild(root_0, AVG811_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "avg"; 
                    }
                    }
                    break;
                case 9 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    MAX812=(Token)match(input,MAX,FOLLOW_MAX_in_keywordAllowedIdent12011); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MAX812_tree = (CommonTree)adaptor.create(MAX812);
                    adaptor.addChild(root_0, MAX812_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "max"; 
                    }
                    }
                    break;
                case 10 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    MIN813=(Token)match(input,MIN,FOLLOW_MIN_in_keywordAllowedIdent12018); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MIN813_tree = (CommonTree)adaptor.create(MIN813);
                    adaptor.addChild(root_0, MIN813_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "min"; 
                    }
                    }
                    break;
                case 11 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    COALESCE814=(Token)match(input,COALESCE,FOLLOW_COALESCE_in_keywordAllowedIdent12025); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COALESCE814_tree = (CommonTree)adaptor.create(COALESCE814);
                    adaptor.addChild(root_0, COALESCE814_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "coalesce"; 
                    }
                    }
                    break;
                case 12 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    MEDIAN815=(Token)match(input,MEDIAN,FOLLOW_MEDIAN_in_keywordAllowedIdent12032); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MEDIAN815_tree = (CommonTree)adaptor.create(MEDIAN815);
                    adaptor.addChild(root_0, MEDIAN815_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "median"; 
                    }
                    }
                    break;
                case 13 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    STDDEV816=(Token)match(input,STDDEV,FOLLOW_STDDEV_in_keywordAllowedIdent12039); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STDDEV816_tree = (CommonTree)adaptor.create(STDDEV816);
                    adaptor.addChild(root_0, STDDEV816_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "stddev"; 
                    }
                    }
                    break;
                case 14 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    AVEDEV817=(Token)match(input,AVEDEV,FOLLOW_AVEDEV_in_keywordAllowedIdent12046); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AVEDEV817_tree = (CommonTree)adaptor.create(AVEDEV817);
                    adaptor.addChild(root_0, AVEDEV817_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "avedev"; 
                    }
                    }
                    break;
                case 15 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    EVENTS818=(Token)match(input,EVENTS,FOLLOW_EVENTS_in_keywordAllowedIdent12053); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EVENTS818_tree = (CommonTree)adaptor.create(EVENTS818);
                    adaptor.addChild(root_0, EVENTS818_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "events"; 
                    }
                    }
                    break;
                case 16 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    FIRST819=(Token)match(input,FIRST,FOLLOW_FIRST_in_keywordAllowedIdent12060); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FIRST819_tree = (CommonTree)adaptor.create(FIRST819);
                    adaptor.addChild(root_0, FIRST819_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "first"; 
                    }
                    }
                    break;
                case 17 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    LAST820=(Token)match(input,LAST,FOLLOW_LAST_in_keywordAllowedIdent12067); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LAST820_tree = (CommonTree)adaptor.create(LAST820);
                    adaptor.addChild(root_0, LAST820_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "last"; 
                    }
                    }
                    break;
                case 18 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    WHILE821=(Token)match(input,WHILE,FOLLOW_WHILE_in_keywordAllowedIdent12074); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    WHILE821_tree = (CommonTree)adaptor.create(WHILE821);
                    adaptor.addChild(root_0, WHILE821_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "while"; 
                    }
                    }
                    break;
                case 19 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    MERGE822=(Token)match(input,MERGE,FOLLOW_MERGE_in_keywordAllowedIdent12081); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MERGE822_tree = (CommonTree)adaptor.create(MERGE822);
                    adaptor.addChild(root_0, MERGE822_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "merge"; 
                    }
                    }
                    break;
                case 20 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    MATCHED823=(Token)match(input,MATCHED,FOLLOW_MATCHED_in_keywordAllowedIdent12088); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MATCHED823_tree = (CommonTree)adaptor.create(MATCHED823);
                    adaptor.addChild(root_0, MATCHED823_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "matched"; 
                    }
                    }
                    break;
                case 21 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    UNIDIRECTIONAL824=(Token)match(input,UNIDIRECTIONAL,FOLLOW_UNIDIRECTIONAL_in_keywordAllowedIdent12095); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    UNIDIRECTIONAL824_tree = (CommonTree)adaptor.create(UNIDIRECTIONAL824);
                    adaptor.addChild(root_0, UNIDIRECTIONAL824_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "unidirectional"; 
                    }
                    }
                    break;
                case 22 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    RETAINUNION825=(Token)match(input,RETAINUNION,FOLLOW_RETAINUNION_in_keywordAllowedIdent12102); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RETAINUNION825_tree = (CommonTree)adaptor.create(RETAINUNION825);
                    adaptor.addChild(root_0, RETAINUNION825_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "retain-union"; 
                    }
                    }
                    break;
                case 23 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    RETAININTERSECTION826=(Token)match(input,RETAININTERSECTION,FOLLOW_RETAININTERSECTION_in_keywordAllowedIdent12109); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RETAININTERSECTION826_tree = (CommonTree)adaptor.create(RETAININTERSECTION826);
                    adaptor.addChild(root_0, RETAININTERSECTION826_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "retain-intersection"; 
                    }
                    }
                    break;
                case 24 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    UNTIL827=(Token)match(input,UNTIL,FOLLOW_UNTIL_in_keywordAllowedIdent12116); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    UNTIL827_tree = (CommonTree)adaptor.create(UNTIL827);
                    adaptor.addChild(root_0, UNTIL827_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "until"; 
                    }
                    }
                    break;
                case 25 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    PATTERN828=(Token)match(input,PATTERN,FOLLOW_PATTERN_in_keywordAllowedIdent12123); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PATTERN828_tree = (CommonTree)adaptor.create(PATTERN828);
                    adaptor.addChild(root_0, PATTERN828_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "pattern"; 
                    }
                    }
                    break;
                case 26 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    SQL829=(Token)match(input,SQL,FOLLOW_SQL_in_keywordAllowedIdent12130); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SQL829_tree = (CommonTree)adaptor.create(SQL829);
                    adaptor.addChild(root_0, SQL829_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "sql"; 
                    }
                    }
                    break;
                case 27 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    METADATASQL830=(Token)match(input,METADATASQL,FOLLOW_METADATASQL_in_keywordAllowedIdent12137); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    METADATASQL830_tree = (CommonTree)adaptor.create(METADATASQL830);
                    adaptor.addChild(root_0, METADATASQL830_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "metadatasql"; 
                    }
                    }
                    break;
                case 28 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    PREVIOUS831=(Token)match(input,PREVIOUS,FOLLOW_PREVIOUS_in_keywordAllowedIdent12144); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PREVIOUS831_tree = (CommonTree)adaptor.create(PREVIOUS831);
                    adaptor.addChild(root_0, PREVIOUS831_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "prev"; 
                    }
                    }
                    break;
                case 29 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    PREVIOUSTAIL832=(Token)match(input,PREVIOUSTAIL,FOLLOW_PREVIOUSTAIL_in_keywordAllowedIdent12151); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PREVIOUSTAIL832_tree = (CommonTree)adaptor.create(PREVIOUSTAIL832);
                    adaptor.addChild(root_0, PREVIOUSTAIL832_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "prevtail"; 
                    }
                    }
                    break;
                case 30 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    PRIOR833=(Token)match(input,PRIOR,FOLLOW_PRIOR_in_keywordAllowedIdent12158); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PRIOR833_tree = (CommonTree)adaptor.create(PRIOR833);
                    adaptor.addChild(root_0, PRIOR833_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "prior"; 
                    }
                    }
                    break;
                case 31 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    WEEKDAY834=(Token)match(input,WEEKDAY,FOLLOW_WEEKDAY_in_keywordAllowedIdent12165); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    WEEKDAY834_tree = (CommonTree)adaptor.create(WEEKDAY834);
                    adaptor.addChild(root_0, WEEKDAY834_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "weekday"; 
                    }
                    }
                    break;
                case 32 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    LW835=(Token)match(input,LW,FOLLOW_LW_in_keywordAllowedIdent12172); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LW835_tree = (CommonTree)adaptor.create(LW835);
                    adaptor.addChild(root_0, LW835_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "lastweekday"; 
                    }
                    }
                    break;
                case 33 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    INSTANCEOF836=(Token)match(input,INSTANCEOF,FOLLOW_INSTANCEOF_in_keywordAllowedIdent12179); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INSTANCEOF836_tree = (CommonTree)adaptor.create(INSTANCEOF836);
                    adaptor.addChild(root_0, INSTANCEOF836_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "instanceof"; 
                    }
                    }
                    break;
                case 34 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    TYPEOF837=(Token)match(input,TYPEOF,FOLLOW_TYPEOF_in_keywordAllowedIdent12186); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TYPEOF837_tree = (CommonTree)adaptor.create(TYPEOF837);
                    adaptor.addChild(root_0, TYPEOF837_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "typeof"; 
                    }
                    }
                    break;
                case 35 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    CAST838=(Token)match(input,CAST,FOLLOW_CAST_in_keywordAllowedIdent12193); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CAST838_tree = (CommonTree)adaptor.create(CAST838);
                    adaptor.addChild(root_0, CAST838_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "cast"; 
                    }
                    }
                    break;
                case 36 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    SNAPSHOT839=(Token)match(input,SNAPSHOT,FOLLOW_SNAPSHOT_in_keywordAllowedIdent12200); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SNAPSHOT839_tree = (CommonTree)adaptor.create(SNAPSHOT839);
                    adaptor.addChild(root_0, SNAPSHOT839_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "snapshot"; 
                    }
                    }
                    break;
                case 37 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    VARIABLE840=(Token)match(input,VARIABLE,FOLLOW_VARIABLE_in_keywordAllowedIdent12207); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    VARIABLE840_tree = (CommonTree)adaptor.create(VARIABLE840);
                    adaptor.addChild(root_0, VARIABLE840_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "variable"; 
                    }
                    }
                    break;
                case 38 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    INDEX841=(Token)match(input,INDEX,FOLLOW_INDEX_in_keywordAllowedIdent12216); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INDEX841_tree = (CommonTree)adaptor.create(INDEX841);
                    adaptor.addChild(root_0, INDEX841_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "index"; 
                    }
                    }
                    break;
                case 39 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    WINDOW842=(Token)match(input,WINDOW,FOLLOW_WINDOW_in_keywordAllowedIdent12225); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    WINDOW842_tree = (CommonTree)adaptor.create(WINDOW842);
                    adaptor.addChild(root_0, WINDOW842_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "window"; 
                    }
                    }
                    break;
                case 40 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    LEFT843=(Token)match(input,LEFT,FOLLOW_LEFT_in_keywordAllowedIdent12232); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LEFT843_tree = (CommonTree)adaptor.create(LEFT843);
                    adaptor.addChild(root_0, LEFT843_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "left"; 
                    }
                    }
                    break;
                case 41 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    RIGHT844=(Token)match(input,RIGHT,FOLLOW_RIGHT_in_keywordAllowedIdent12239); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RIGHT844_tree = (CommonTree)adaptor.create(RIGHT844);
                    adaptor.addChild(root_0, RIGHT844_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "right"; 
                    }
                    }
                    break;
                case 42 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    OUTER845=(Token)match(input,OUTER,FOLLOW_OUTER_in_keywordAllowedIdent12246); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    OUTER845_tree = (CommonTree)adaptor.create(OUTER845);
                    adaptor.addChild(root_0, OUTER845_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "outer"; 
                    }
                    }
                    break;
                case 43 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    FULL846=(Token)match(input,FULL,FOLLOW_FULL_in_keywordAllowedIdent12253); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FULL846_tree = (CommonTree)adaptor.create(FULL846);
                    adaptor.addChild(root_0, FULL846_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "full"; 
                    }
                    }
                    break;
                case 44 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    JOIN847=(Token)match(input,JOIN,FOLLOW_JOIN_in_keywordAllowedIdent12260); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    JOIN847_tree = (CommonTree)adaptor.create(JOIN847);
                    adaptor.addChild(root_0, JOIN847_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "join"; 
                    }
                    }
                    break;
                case 45 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    DEFINE848=(Token)match(input,DEFINE,FOLLOW_DEFINE_in_keywordAllowedIdent12267); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DEFINE848_tree = (CommonTree)adaptor.create(DEFINE848);
                    adaptor.addChild(root_0, DEFINE848_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "define"; 
                    }
                    }
                    break;
                case 46 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    PARTITION849=(Token)match(input,PARTITION,FOLLOW_PARTITION_in_keywordAllowedIdent12274); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PARTITION849_tree = (CommonTree)adaptor.create(PARTITION849);
                    adaptor.addChild(root_0, PARTITION849_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "partition"; 
                    }
                    }
                    break;
                case 47 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    MATCHES850=(Token)match(input,MATCHES,FOLLOW_MATCHES_in_keywordAllowedIdent12281); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MATCHES850_tree = (CommonTree)adaptor.create(MATCHES850);
                    adaptor.addChild(root_0, MATCHES850_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "matches"; 
                    }
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class escapableStr_return extends ParserRuleReturnScope {
        public String result;
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.escapableStr_return escapableStr() throws RecognitionException {
        EsperEPL2GrammarParser.escapableStr_return retval = new EsperEPL2GrammarParser.escapableStr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i1=null;
        Token i2=null;
        CommonTree i1_tree=null;
        CommonTree i2_tree=null;
        try {
            int alt303=2;
            int LA303_0 = input.LA(1);
            if ( (LA303_0==IDENT) ) {
                alt303=1;
            }
            else if ( (LA303_0==TICKED_STRING_LITERAL) ) {
                alt303=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 303, 0, input);
                throw nvae;
            }
            switch (alt303) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    i1=(Token)match(input,IDENT,FOLLOW_IDENT_in_escapableStr12302); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    i1_tree = (CommonTree)adaptor.create(i1);
                    adaptor.addChild(root_0, i1_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = i1.getText(); 
                    }
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    i2=(Token)match(input,TICKED_STRING_LITERAL,FOLLOW_TICKED_STRING_LITERAL_in_escapableStr12311); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    i2_tree = (CommonTree)adaptor.create(i2);
                    adaptor.addChild(root_0, i2_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = removeTicks(i2.getText()); 
                    }
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class escapableIdent_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.escapableIdent_return escapableIdent() throws RecognitionException {
        EsperEPL2GrammarParser.escapableIdent_return retval = new EsperEPL2GrammarParser.escapableIdent_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token t=null;
        Token IDENT851=null;
        CommonTree t_tree=null;
        CommonTree IDENT851_tree=null;
        RewriteRuleTokenStream stream_TICKED_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token TICKED_STRING_LITERAL");
        try {
            int alt304=2;
            int LA304_0 = input.LA(1);
            if ( (LA304_0==IDENT) ) {
                alt304=1;
            }
            else if ( (LA304_0==TICKED_STRING_LITERAL) ) {
                alt304=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 304, 0, input);
                throw nvae;
            }
            switch (alt304) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    IDENT851=(Token)match(input,IDENT,FOLLOW_IDENT_in_escapableIdent12325); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IDENT851_tree = (CommonTree)adaptor.create(IDENT851);
                    adaptor.addChild(root_0, IDENT851_tree);
                    }
                    }
                    break;
                case 2 :
                    {
                    t=(Token)match(input,TICKED_STRING_LITERAL,FOLLOW_TICKED_STRING_LITERAL_in_escapableIdent12333); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TICKED_STRING_LITERAL.add(t);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(IDENT, t));
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class timePeriod_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.timePeriod_return timePeriod() throws RecognitionException {
        EsperEPL2GrammarParser.timePeriod_return retval = new EsperEPL2GrammarParser.timePeriod_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.yearPart_return yearPart852 = null;
        EsperEPL2GrammarParser.monthPart_return monthPart853 = null;
        EsperEPL2GrammarParser.weekPart_return weekPart854 = null;
        EsperEPL2GrammarParser.dayPart_return dayPart855 = null;
        EsperEPL2GrammarParser.hourPart_return hourPart856 = null;
        EsperEPL2GrammarParser.minutePart_return minutePart857 = null;
        EsperEPL2GrammarParser.secondPart_return secondPart858 = null;
        EsperEPL2GrammarParser.millisecondPart_return millisecondPart859 = null;
        EsperEPL2GrammarParser.monthPart_return monthPart860 = null;
        EsperEPL2GrammarParser.weekPart_return weekPart861 = null;
        EsperEPL2GrammarParser.dayPart_return dayPart862 = null;
        EsperEPL2GrammarParser.hourPart_return hourPart863 = null;
        EsperEPL2GrammarParser.minutePart_return minutePart864 = null;
        EsperEPL2GrammarParser.secondPart_return secondPart865 = null;
        EsperEPL2GrammarParser.millisecondPart_return millisecondPart866 = null;
        EsperEPL2GrammarParser.weekPart_return weekPart867 = null;
        EsperEPL2GrammarParser.dayPart_return dayPart868 = null;
        EsperEPL2GrammarParser.hourPart_return hourPart869 = null;
        EsperEPL2GrammarParser.minutePart_return minutePart870 = null;
        EsperEPL2GrammarParser.secondPart_return secondPart871 = null;
        EsperEPL2GrammarParser.millisecondPart_return millisecondPart872 = null;
        EsperEPL2GrammarParser.dayPart_return dayPart873 = null;
        EsperEPL2GrammarParser.hourPart_return hourPart874 = null;
        EsperEPL2GrammarParser.minutePart_return minutePart875 = null;
        EsperEPL2GrammarParser.secondPart_return secondPart876 = null;
        EsperEPL2GrammarParser.millisecondPart_return millisecondPart877 = null;
        EsperEPL2GrammarParser.hourPart_return hourPart878 = null;
        EsperEPL2GrammarParser.minutePart_return minutePart879 = null;
        EsperEPL2GrammarParser.secondPart_return secondPart880 = null;
        EsperEPL2GrammarParser.millisecondPart_return millisecondPart881 = null;
        EsperEPL2GrammarParser.minutePart_return minutePart882 = null;
        EsperEPL2GrammarParser.secondPart_return secondPart883 = null;
        EsperEPL2GrammarParser.millisecondPart_return millisecondPart884 = null;
        EsperEPL2GrammarParser.secondPart_return secondPart885 = null;
        EsperEPL2GrammarParser.millisecondPart_return millisecondPart886 = null;
        EsperEPL2GrammarParser.millisecondPart_return millisecondPart887 = null;
        RewriteRuleSubtreeStream stream_yearPart=new RewriteRuleSubtreeStream(adaptor,"rule yearPart");
        RewriteRuleSubtreeStream stream_secondPart=new RewriteRuleSubtreeStream(adaptor,"rule secondPart");
        RewriteRuleSubtreeStream stream_minutePart=new RewriteRuleSubtreeStream(adaptor,"rule minutePart");
        RewriteRuleSubtreeStream stream_millisecondPart=new RewriteRuleSubtreeStream(adaptor,"rule millisecondPart");
        RewriteRuleSubtreeStream stream_dayPart=new RewriteRuleSubtreeStream(adaptor,"rule dayPart");
        RewriteRuleSubtreeStream stream_hourPart=new RewriteRuleSubtreeStream(adaptor,"rule hourPart");
        RewriteRuleSubtreeStream stream_weekPart=new RewriteRuleSubtreeStream(adaptor,"rule weekPart");
        RewriteRuleSubtreeStream stream_monthPart=new RewriteRuleSubtreeStream(adaptor,"rule monthPart");
        try {
            {
            int alt333=8;
            switch ( input.LA(1) ) {
            case NUM_INT:
                {
                switch ( input.LA(2) ) {
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt333=4;
                    }
                    break;
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt333=5;
                    }
                    break;
                case TIMEPERIOD_WEEK:
                case TIMEPERIOD_WEEKS:
                    {
                    alt333=3;
                    }
                    break;
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt333=8;
                    }
                    break;
                case TIMEPERIOD_MONTH:
                case TIMEPERIOD_MONTHS:
                    {
                    alt333=2;
                    }
                    break;
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt333=7;
                    }
                    break;
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt333=6;
                    }
                    break;
                case TIMEPERIOD_YEAR:
                case TIMEPERIOD_YEARS:
                    {
                    alt333=1;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 333, 1, input);
                    throw nvae;
                }
                }
                break;
            case NUM_LONG:
                {
                switch ( input.LA(2) ) {
                case TIMEPERIOD_WEEK:
                case TIMEPERIOD_WEEKS:
                    {
                    alt333=3;
                    }
                    break;
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt333=5;
                    }
                    break;
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt333=7;
                    }
                    break;
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt333=8;
                    }
                    break;
                case TIMEPERIOD_MONTH:
                case TIMEPERIOD_MONTHS:
                    {
                    alt333=2;
                    }
                    break;
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt333=6;
                    }
                    break;
                case TIMEPERIOD_YEAR:
                case TIMEPERIOD_YEARS:
                    {
                    alt333=1;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt333=4;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 333, 2, input);
                    throw nvae;
                }
                }
                break;
            case NUM_FLOAT:
                {
                switch ( input.LA(2) ) {
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt333=8;
                    }
                    break;
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt333=5;
                    }
                    break;
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt333=7;
                    }
                    break;
                case TIMEPERIOD_WEEK:
                case TIMEPERIOD_WEEKS:
                    {
                    alt333=3;
                    }
                    break;
                case TIMEPERIOD_YEAR:
                case TIMEPERIOD_YEARS:
                    {
                    alt333=1;
                    }
                    break;
                case TIMEPERIOD_MONTH:
                case TIMEPERIOD_MONTHS:
                    {
                    alt333=2;
                    }
                    break;
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt333=6;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt333=4;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 333, 3, input);
                    throw nvae;
                }
                }
                break;
            case NUM_DOUBLE:
                {
                switch ( input.LA(2) ) {
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt333=7;
                    }
                    break;
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt333=8;
                    }
                    break;
                case TIMEPERIOD_WEEK:
                case TIMEPERIOD_WEEKS:
                    {
                    alt333=3;
                    }
                    break;
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt333=5;
                    }
                    break;
                case TIMEPERIOD_YEAR:
                case TIMEPERIOD_YEARS:
                    {
                    alt333=1;
                    }
                    break;
                case TIMEPERIOD_MONTH:
                case TIMEPERIOD_MONTHS:
                    {
                    alt333=2;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt333=4;
                    }
                    break;
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt333=6;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 333, 4, input);
                    throw nvae;
                }
                }
                break;
            case IDENT:
                {
                switch ( input.LA(2) ) {
                case TIMEPERIOD_WEEK:
                case TIMEPERIOD_WEEKS:
                    {
                    alt333=3;
                    }
                    break;
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt333=7;
                    }
                    break;
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt333=5;
                    }
                    break;
                case TIMEPERIOD_YEAR:
                case TIMEPERIOD_YEARS:
                    {
                    alt333=1;
                    }
                    break;
                case TIMEPERIOD_MONTH:
                case TIMEPERIOD_MONTHS:
                    {
                    alt333=2;
                    }
                    break;
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt333=8;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt333=4;
                    }
                    break;
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt333=6;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 333, 5, input);
                    throw nvae;
                }
                }
                break;
            case QUESTION:
                {
                switch ( input.LA(2) ) {
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt333=5;
                    }
                    break;
                case TIMEPERIOD_WEEK:
                case TIMEPERIOD_WEEKS:
                    {
                    alt333=3;
                    }
                    break;
                case TIMEPERIOD_MONTH:
                case TIMEPERIOD_MONTHS:
                    {
                    alt333=2;
                    }
                    break;
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt333=7;
                    }
                    break;
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt333=8;
                    }
                    break;
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt333=6;
                    }
                    break;
                case TIMEPERIOD_YEAR:
                case TIMEPERIOD_YEARS:
                    {
                    alt333=1;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt333=4;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 333, 6, input);
                    throw nvae;
                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 333, 0, input);
                throw nvae;
            }
            switch (alt333) {
                case 1 :
                    {
                    pushFollow(FOLLOW_yearPart_in_timePeriod12358);
                    yearPart852=yearPart();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_yearPart.add(yearPart852.getTree());
                    int alt305=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA305_1 = input.LA(2);
                            if ( ((LA305_1>=TIMEPERIOD_MONTH && LA305_1<=TIMEPERIOD_MONTHS)) ) {
                                alt305=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA305_2 = input.LA(2);
                            if ( ((LA305_2>=TIMEPERIOD_MONTH && LA305_2<=TIMEPERIOD_MONTHS)) ) {
                                alt305=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA305_3 = input.LA(2);
                            if ( ((LA305_3>=TIMEPERIOD_MONTH && LA305_3<=TIMEPERIOD_MONTHS)) ) {
                                alt305=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA305_4 = input.LA(2);
                            if ( ((LA305_4>=TIMEPERIOD_MONTH && LA305_4<=TIMEPERIOD_MONTHS)) ) {
                                alt305=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA305_5 = input.LA(2);
                            if ( ((LA305_5>=TIMEPERIOD_MONTH && LA305_5<=TIMEPERIOD_MONTHS)) ) {
                                alt305=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA305_6 = input.LA(2);
                            if ( ((LA305_6>=TIMEPERIOD_MONTH && LA305_6<=TIMEPERIOD_MONTHS)) ) {
                                alt305=1;
                            }
                            }
                            break;
                    }
                    switch (alt305) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_monthPart_in_timePeriod12360);
                            monthPart853=monthPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_monthPart.add(monthPart853.getTree());
                            }
                            break;
                    }
                    int alt306=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA306_1 = input.LA(2);
                            if ( ((LA306_1>=TIMEPERIOD_WEEK && LA306_1<=TIMEPERIOD_WEEKS)) ) {
                                alt306=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA306_2 = input.LA(2);
                            if ( ((LA306_2>=TIMEPERIOD_WEEK && LA306_2<=TIMEPERIOD_WEEKS)) ) {
                                alt306=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA306_3 = input.LA(2);
                            if ( ((LA306_3>=TIMEPERIOD_WEEK && LA306_3<=TIMEPERIOD_WEEKS)) ) {
                                alt306=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA306_4 = input.LA(2);
                            if ( ((LA306_4>=TIMEPERIOD_WEEK && LA306_4<=TIMEPERIOD_WEEKS)) ) {
                                alt306=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA306_5 = input.LA(2);
                            if ( ((LA306_5>=TIMEPERIOD_WEEK && LA306_5<=TIMEPERIOD_WEEKS)) ) {
                                alt306=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA306_6 = input.LA(2);
                            if ( ((LA306_6>=TIMEPERIOD_WEEK && LA306_6<=TIMEPERIOD_WEEKS)) ) {
                                alt306=1;
                            }
                            }
                            break;
                    }
                    switch (alt306) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_weekPart_in_timePeriod12363);
                            weekPart854=weekPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_weekPart.add(weekPart854.getTree());
                            }
                            break;
                    }
                    int alt307=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA307_1 = input.LA(2);
                            if ( ((LA307_1>=TIMEPERIOD_DAY && LA307_1<=TIMEPERIOD_DAYS)) ) {
                                alt307=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA307_2 = input.LA(2);
                            if ( ((LA307_2>=TIMEPERIOD_DAY && LA307_2<=TIMEPERIOD_DAYS)) ) {
                                alt307=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA307_3 = input.LA(2);
                            if ( ((LA307_3>=TIMEPERIOD_DAY && LA307_3<=TIMEPERIOD_DAYS)) ) {
                                alt307=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA307_4 = input.LA(2);
                            if ( ((LA307_4>=TIMEPERIOD_DAY && LA307_4<=TIMEPERIOD_DAYS)) ) {
                                alt307=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA307_5 = input.LA(2);
                            if ( ((LA307_5>=TIMEPERIOD_DAY && LA307_5<=TIMEPERIOD_DAYS)) ) {
                                alt307=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA307_6 = input.LA(2);
                            if ( ((LA307_6>=TIMEPERIOD_DAY && LA307_6<=TIMEPERIOD_DAYS)) ) {
                                alt307=1;
                            }
                            }
                            break;
                    }
                    switch (alt307) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_dayPart_in_timePeriod12366);
                            dayPart855=dayPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_dayPart.add(dayPart855.getTree());
                            }
                            break;
                    }
                    int alt308=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA308_1 = input.LA(2);
                            if ( ((LA308_1>=TIMEPERIOD_HOUR && LA308_1<=TIMEPERIOD_HOURS)) ) {
                                alt308=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA308_2 = input.LA(2);
                            if ( ((LA308_2>=TIMEPERIOD_HOUR && LA308_2<=TIMEPERIOD_HOURS)) ) {
                                alt308=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA308_3 = input.LA(2);
                            if ( ((LA308_3>=TIMEPERIOD_HOUR && LA308_3<=TIMEPERIOD_HOURS)) ) {
                                alt308=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA308_4 = input.LA(2);
                            if ( ((LA308_4>=TIMEPERIOD_HOUR && LA308_4<=TIMEPERIOD_HOURS)) ) {
                                alt308=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA308_5 = input.LA(2);
                            if ( ((LA308_5>=TIMEPERIOD_HOUR && LA308_5<=TIMEPERIOD_HOURS)) ) {
                                alt308=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA308_6 = input.LA(2);
                            if ( ((LA308_6>=TIMEPERIOD_HOUR && LA308_6<=TIMEPERIOD_HOURS)) ) {
                                alt308=1;
                            }
                            }
                            break;
                    }
                    switch (alt308) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_hourPart_in_timePeriod12369);
                            hourPart856=hourPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_hourPart.add(hourPart856.getTree());
                            }
                            break;
                    }
                    int alt309=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA309_1 = input.LA(2);
                            if ( (LA309_1==MIN||(LA309_1>=TIMEPERIOD_MINUTE && LA309_1<=TIMEPERIOD_MINUTES)) ) {
                                alt309=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA309_2 = input.LA(2);
                            if ( (LA309_2==MIN||(LA309_2>=TIMEPERIOD_MINUTE && LA309_2<=TIMEPERIOD_MINUTES)) ) {
                                alt309=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA309_3 = input.LA(2);
                            if ( (LA309_3==MIN||(LA309_3>=TIMEPERIOD_MINUTE && LA309_3<=TIMEPERIOD_MINUTES)) ) {
                                alt309=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA309_4 = input.LA(2);
                            if ( (LA309_4==MIN||(LA309_4>=TIMEPERIOD_MINUTE && LA309_4<=TIMEPERIOD_MINUTES)) ) {
                                alt309=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA309_5 = input.LA(2);
                            if ( (LA309_5==MIN||(LA309_5>=TIMEPERIOD_MINUTE && LA309_5<=TIMEPERIOD_MINUTES)) ) {
                                alt309=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA309_6 = input.LA(2);
                            if ( (LA309_6==MIN||(LA309_6>=TIMEPERIOD_MINUTE && LA309_6<=TIMEPERIOD_MINUTES)) ) {
                                alt309=1;
                            }
                            }
                            break;
                    }
                    switch (alt309) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_minutePart_in_timePeriod12372);
                            minutePart857=minutePart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_minutePart.add(minutePart857.getTree());
                            }
                            break;
                    }
                    int alt310=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA310_1 = input.LA(2);
                            if ( ((LA310_1>=TIMEPERIOD_SEC && LA310_1<=TIMEPERIOD_SECONDS)) ) {
                                alt310=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA310_2 = input.LA(2);
                            if ( ((LA310_2>=TIMEPERIOD_SEC && LA310_2<=TIMEPERIOD_SECONDS)) ) {
                                alt310=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA310_3 = input.LA(2);
                            if ( ((LA310_3>=TIMEPERIOD_SEC && LA310_3<=TIMEPERIOD_SECONDS)) ) {
                                alt310=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA310_4 = input.LA(2);
                            if ( ((LA310_4>=TIMEPERIOD_SEC && LA310_4<=TIMEPERIOD_SECONDS)) ) {
                                alt310=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA310_5 = input.LA(2);
                            if ( ((LA310_5>=TIMEPERIOD_SEC && LA310_5<=TIMEPERIOD_SECONDS)) ) {
                                alt310=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA310_6 = input.LA(2);
                            if ( ((LA310_6>=TIMEPERIOD_SEC && LA310_6<=TIMEPERIOD_SECONDS)) ) {
                                alt310=1;
                            }
                            }
                            break;
                    }
                    switch (alt310) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_secondPart_in_timePeriod12375);
                            secondPart858=secondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_secondPart.add(secondPart858.getTree());
                            }
                            break;
                    }
                    int alt311=2;
                    int LA311_0 = input.LA(1);
                    if ( (LA311_0==NUM_DOUBLE||LA311_0==IDENT||LA311_0==QUESTION||LA311_0==NUM_INT||(LA311_0>=NUM_LONG && LA311_0<=NUM_FLOAT)) ) {
                        alt311=1;
                    }
                    switch (alt311) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod12378);
                            millisecondPart859=millisecondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart859.getTree());
                            }
                            break;
                    }
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_monthPart_in_timePeriod12384);
                    monthPart860=monthPart();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_monthPart.add(monthPart860.getTree());
                    int alt312=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA312_1 = input.LA(2);
                            if ( ((LA312_1>=TIMEPERIOD_WEEK && LA312_1<=TIMEPERIOD_WEEKS)) ) {
                                alt312=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA312_2 = input.LA(2);
                            if ( ((LA312_2>=TIMEPERIOD_WEEK && LA312_2<=TIMEPERIOD_WEEKS)) ) {
                                alt312=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA312_3 = input.LA(2);
                            if ( ((LA312_3>=TIMEPERIOD_WEEK && LA312_3<=TIMEPERIOD_WEEKS)) ) {
                                alt312=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA312_4 = input.LA(2);
                            if ( ((LA312_4>=TIMEPERIOD_WEEK && LA312_4<=TIMEPERIOD_WEEKS)) ) {
                                alt312=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA312_5 = input.LA(2);
                            if ( ((LA312_5>=TIMEPERIOD_WEEK && LA312_5<=TIMEPERIOD_WEEKS)) ) {
                                alt312=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA312_6 = input.LA(2);
                            if ( ((LA312_6>=TIMEPERIOD_WEEK && LA312_6<=TIMEPERIOD_WEEKS)) ) {
                                alt312=1;
                            }
                            }
                            break;
                    }
                    switch (alt312) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_weekPart_in_timePeriod12386);
                            weekPart861=weekPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_weekPart.add(weekPart861.getTree());
                            }
                            break;
                    }
                    int alt313=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA313_1 = input.LA(2);
                            if ( ((LA313_1>=TIMEPERIOD_DAY && LA313_1<=TIMEPERIOD_DAYS)) ) {
                                alt313=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA313_2 = input.LA(2);
                            if ( ((LA313_2>=TIMEPERIOD_DAY && LA313_2<=TIMEPERIOD_DAYS)) ) {
                                alt313=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA313_3 = input.LA(2);
                            if ( ((LA313_3>=TIMEPERIOD_DAY && LA313_3<=TIMEPERIOD_DAYS)) ) {
                                alt313=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA313_4 = input.LA(2);
                            if ( ((LA313_4>=TIMEPERIOD_DAY && LA313_4<=TIMEPERIOD_DAYS)) ) {
                                alt313=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA313_5 = input.LA(2);
                            if ( ((LA313_5>=TIMEPERIOD_DAY && LA313_5<=TIMEPERIOD_DAYS)) ) {
                                alt313=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA313_6 = input.LA(2);
                            if ( ((LA313_6>=TIMEPERIOD_DAY && LA313_6<=TIMEPERIOD_DAYS)) ) {
                                alt313=1;
                            }
                            }
                            break;
                    }
                    switch (alt313) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_dayPart_in_timePeriod12389);
                            dayPart862=dayPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_dayPart.add(dayPart862.getTree());
                            }
                            break;
                    }
                    int alt314=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA314_1 = input.LA(2);
                            if ( ((LA314_1>=TIMEPERIOD_HOUR && LA314_1<=TIMEPERIOD_HOURS)) ) {
                                alt314=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA314_2 = input.LA(2);
                            if ( ((LA314_2>=TIMEPERIOD_HOUR && LA314_2<=TIMEPERIOD_HOURS)) ) {
                                alt314=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA314_3 = input.LA(2);
                            if ( ((LA314_3>=TIMEPERIOD_HOUR && LA314_3<=TIMEPERIOD_HOURS)) ) {
                                alt314=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA314_4 = input.LA(2);
                            if ( ((LA314_4>=TIMEPERIOD_HOUR && LA314_4<=TIMEPERIOD_HOURS)) ) {
                                alt314=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA314_5 = input.LA(2);
                            if ( ((LA314_5>=TIMEPERIOD_HOUR && LA314_5<=TIMEPERIOD_HOURS)) ) {
                                alt314=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA314_6 = input.LA(2);
                            if ( ((LA314_6>=TIMEPERIOD_HOUR && LA314_6<=TIMEPERIOD_HOURS)) ) {
                                alt314=1;
                            }
                            }
                            break;
                    }
                    switch (alt314) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_hourPart_in_timePeriod12392);
                            hourPart863=hourPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_hourPart.add(hourPart863.getTree());
                            }
                            break;
                    }
                    int alt315=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA315_1 = input.LA(2);
                            if ( (LA315_1==MIN||(LA315_1>=TIMEPERIOD_MINUTE && LA315_1<=TIMEPERIOD_MINUTES)) ) {
                                alt315=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA315_2 = input.LA(2);
                            if ( (LA315_2==MIN||(LA315_2>=TIMEPERIOD_MINUTE && LA315_2<=TIMEPERIOD_MINUTES)) ) {
                                alt315=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA315_3 = input.LA(2);
                            if ( (LA315_3==MIN||(LA315_3>=TIMEPERIOD_MINUTE && LA315_3<=TIMEPERIOD_MINUTES)) ) {
                                alt315=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA315_4 = input.LA(2);
                            if ( (LA315_4==MIN||(LA315_4>=TIMEPERIOD_MINUTE && LA315_4<=TIMEPERIOD_MINUTES)) ) {
                                alt315=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA315_5 = input.LA(2);
                            if ( (LA315_5==MIN||(LA315_5>=TIMEPERIOD_MINUTE && LA315_5<=TIMEPERIOD_MINUTES)) ) {
                                alt315=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA315_6 = input.LA(2);
                            if ( (LA315_6==MIN||(LA315_6>=TIMEPERIOD_MINUTE && LA315_6<=TIMEPERIOD_MINUTES)) ) {
                                alt315=1;
                            }
                            }
                            break;
                    }
                    switch (alt315) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_minutePart_in_timePeriod12395);
                            minutePart864=minutePart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_minutePart.add(minutePart864.getTree());
                            }
                            break;
                    }
                    int alt316=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA316_1 = input.LA(2);
                            if ( ((LA316_1>=TIMEPERIOD_SEC && LA316_1<=TIMEPERIOD_SECONDS)) ) {
                                alt316=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA316_2 = input.LA(2);
                            if ( ((LA316_2>=TIMEPERIOD_SEC && LA316_2<=TIMEPERIOD_SECONDS)) ) {
                                alt316=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA316_3 = input.LA(2);
                            if ( ((LA316_3>=TIMEPERIOD_SEC && LA316_3<=TIMEPERIOD_SECONDS)) ) {
                                alt316=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA316_4 = input.LA(2);
                            if ( ((LA316_4>=TIMEPERIOD_SEC && LA316_4<=TIMEPERIOD_SECONDS)) ) {
                                alt316=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA316_5 = input.LA(2);
                            if ( ((LA316_5>=TIMEPERIOD_SEC && LA316_5<=TIMEPERIOD_SECONDS)) ) {
                                alt316=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA316_6 = input.LA(2);
                            if ( ((LA316_6>=TIMEPERIOD_SEC && LA316_6<=TIMEPERIOD_SECONDS)) ) {
                                alt316=1;
                            }
                            }
                            break;
                    }
                    switch (alt316) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_secondPart_in_timePeriod12398);
                            secondPart865=secondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_secondPart.add(secondPart865.getTree());
                            }
                            break;
                    }
                    int alt317=2;
                    int LA317_0 = input.LA(1);
                    if ( (LA317_0==NUM_DOUBLE||LA317_0==IDENT||LA317_0==QUESTION||LA317_0==NUM_INT||(LA317_0>=NUM_LONG && LA317_0<=NUM_FLOAT)) ) {
                        alt317=1;
                    }
                    switch (alt317) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod12401);
                            millisecondPart866=millisecondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart866.getTree());
                            }
                            break;
                    }
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_weekPart_in_timePeriod12407);
                    weekPart867=weekPart();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_weekPart.add(weekPart867.getTree());
                    int alt318=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA318_1 = input.LA(2);
                            if ( ((LA318_1>=TIMEPERIOD_DAY && LA318_1<=TIMEPERIOD_DAYS)) ) {
                                alt318=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA318_2 = input.LA(2);
                            if ( ((LA318_2>=TIMEPERIOD_DAY && LA318_2<=TIMEPERIOD_DAYS)) ) {
                                alt318=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA318_3 = input.LA(2);
                            if ( ((LA318_3>=TIMEPERIOD_DAY && LA318_3<=TIMEPERIOD_DAYS)) ) {
                                alt318=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA318_4 = input.LA(2);
                            if ( ((LA318_4>=TIMEPERIOD_DAY && LA318_4<=TIMEPERIOD_DAYS)) ) {
                                alt318=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA318_5 = input.LA(2);
                            if ( ((LA318_5>=TIMEPERIOD_DAY && LA318_5<=TIMEPERIOD_DAYS)) ) {
                                alt318=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA318_6 = input.LA(2);
                            if ( ((LA318_6>=TIMEPERIOD_DAY && LA318_6<=TIMEPERIOD_DAYS)) ) {
                                alt318=1;
                            }
                            }
                            break;
                    }
                    switch (alt318) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_dayPart_in_timePeriod12409);
                            dayPart868=dayPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_dayPart.add(dayPart868.getTree());
                            }
                            break;
                    }
                    int alt319=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA319_1 = input.LA(2);
                            if ( ((LA319_1>=TIMEPERIOD_HOUR && LA319_1<=TIMEPERIOD_HOURS)) ) {
                                alt319=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA319_2 = input.LA(2);
                            if ( ((LA319_2>=TIMEPERIOD_HOUR && LA319_2<=TIMEPERIOD_HOURS)) ) {
                                alt319=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA319_3 = input.LA(2);
                            if ( ((LA319_3>=TIMEPERIOD_HOUR && LA319_3<=TIMEPERIOD_HOURS)) ) {
                                alt319=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA319_4 = input.LA(2);
                            if ( ((LA319_4>=TIMEPERIOD_HOUR && LA319_4<=TIMEPERIOD_HOURS)) ) {
                                alt319=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA319_5 = input.LA(2);
                            if ( ((LA319_5>=TIMEPERIOD_HOUR && LA319_5<=TIMEPERIOD_HOURS)) ) {
                                alt319=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA319_6 = input.LA(2);
                            if ( ((LA319_6>=TIMEPERIOD_HOUR && LA319_6<=TIMEPERIOD_HOURS)) ) {
                                alt319=1;
                            }
                            }
                            break;
                    }
                    switch (alt319) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_hourPart_in_timePeriod12412);
                            hourPart869=hourPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_hourPart.add(hourPart869.getTree());
                            }
                            break;
                    }
                    int alt320=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA320_1 = input.LA(2);
                            if ( (LA320_1==MIN||(LA320_1>=TIMEPERIOD_MINUTE && LA320_1<=TIMEPERIOD_MINUTES)) ) {
                                alt320=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA320_2 = input.LA(2);
                            if ( (LA320_2==MIN||(LA320_2>=TIMEPERIOD_MINUTE && LA320_2<=TIMEPERIOD_MINUTES)) ) {
                                alt320=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA320_3 = input.LA(2);
                            if ( (LA320_3==MIN||(LA320_3>=TIMEPERIOD_MINUTE && LA320_3<=TIMEPERIOD_MINUTES)) ) {
                                alt320=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA320_4 = input.LA(2);
                            if ( (LA320_4==MIN||(LA320_4>=TIMEPERIOD_MINUTE && LA320_4<=TIMEPERIOD_MINUTES)) ) {
                                alt320=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA320_5 = input.LA(2);
                            if ( (LA320_5==MIN||(LA320_5>=TIMEPERIOD_MINUTE && LA320_5<=TIMEPERIOD_MINUTES)) ) {
                                alt320=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA320_6 = input.LA(2);
                            if ( (LA320_6==MIN||(LA320_6>=TIMEPERIOD_MINUTE && LA320_6<=TIMEPERIOD_MINUTES)) ) {
                                alt320=1;
                            }
                            }
                            break;
                    }
                    switch (alt320) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_minutePart_in_timePeriod12415);
                            minutePart870=minutePart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_minutePart.add(minutePart870.getTree());
                            }
                            break;
                    }
                    int alt321=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA321_1 = input.LA(2);
                            if ( ((LA321_1>=TIMEPERIOD_SEC && LA321_1<=TIMEPERIOD_SECONDS)) ) {
                                alt321=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA321_2 = input.LA(2);
                            if ( ((LA321_2>=TIMEPERIOD_SEC && LA321_2<=TIMEPERIOD_SECONDS)) ) {
                                alt321=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA321_3 = input.LA(2);
                            if ( ((LA321_3>=TIMEPERIOD_SEC && LA321_3<=TIMEPERIOD_SECONDS)) ) {
                                alt321=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA321_4 = input.LA(2);
                            if ( ((LA321_4>=TIMEPERIOD_SEC && LA321_4<=TIMEPERIOD_SECONDS)) ) {
                                alt321=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA321_5 = input.LA(2);
                            if ( ((LA321_5>=TIMEPERIOD_SEC && LA321_5<=TIMEPERIOD_SECONDS)) ) {
                                alt321=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA321_6 = input.LA(2);
                            if ( ((LA321_6>=TIMEPERIOD_SEC && LA321_6<=TIMEPERIOD_SECONDS)) ) {
                                alt321=1;
                            }
                            }
                            break;
                    }
                    switch (alt321) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_secondPart_in_timePeriod12418);
                            secondPart871=secondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_secondPart.add(secondPart871.getTree());
                            }
                            break;
                    }
                    int alt322=2;
                    int LA322_0 = input.LA(1);
                    if ( (LA322_0==NUM_DOUBLE||LA322_0==IDENT||LA322_0==QUESTION||LA322_0==NUM_INT||(LA322_0>=NUM_LONG && LA322_0<=NUM_FLOAT)) ) {
                        alt322=1;
                    }
                    switch (alt322) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod12421);
                            millisecondPart872=millisecondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart872.getTree());
                            }
                            break;
                    }
                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_dayPart_in_timePeriod12427);
                    dayPart873=dayPart();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_dayPart.add(dayPart873.getTree());
                    int alt323=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA323_1 = input.LA(2);
                            if ( ((LA323_1>=TIMEPERIOD_HOUR && LA323_1<=TIMEPERIOD_HOURS)) ) {
                                alt323=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA323_2 = input.LA(2);
                            if ( ((LA323_2>=TIMEPERIOD_HOUR && LA323_2<=TIMEPERIOD_HOURS)) ) {
                                alt323=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA323_3 = input.LA(2);
                            if ( ((LA323_3>=TIMEPERIOD_HOUR && LA323_3<=TIMEPERIOD_HOURS)) ) {
                                alt323=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA323_4 = input.LA(2);
                            if ( ((LA323_4>=TIMEPERIOD_HOUR && LA323_4<=TIMEPERIOD_HOURS)) ) {
                                alt323=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA323_5 = input.LA(2);
                            if ( ((LA323_5>=TIMEPERIOD_HOUR && LA323_5<=TIMEPERIOD_HOURS)) ) {
                                alt323=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA323_6 = input.LA(2);
                            if ( ((LA323_6>=TIMEPERIOD_HOUR && LA323_6<=TIMEPERIOD_HOURS)) ) {
                                alt323=1;
                            }
                            }
                            break;
                    }
                    switch (alt323) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_hourPart_in_timePeriod12429);
                            hourPart874=hourPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_hourPart.add(hourPart874.getTree());
                            }
                            break;
                    }
                    int alt324=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA324_1 = input.LA(2);
                            if ( (LA324_1==MIN||(LA324_1>=TIMEPERIOD_MINUTE && LA324_1<=TIMEPERIOD_MINUTES)) ) {
                                alt324=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA324_2 = input.LA(2);
                            if ( (LA324_2==MIN||(LA324_2>=TIMEPERIOD_MINUTE && LA324_2<=TIMEPERIOD_MINUTES)) ) {
                                alt324=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA324_3 = input.LA(2);
                            if ( (LA324_3==MIN||(LA324_3>=TIMEPERIOD_MINUTE && LA324_3<=TIMEPERIOD_MINUTES)) ) {
                                alt324=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA324_4 = input.LA(2);
                            if ( (LA324_4==MIN||(LA324_4>=TIMEPERIOD_MINUTE && LA324_4<=TIMEPERIOD_MINUTES)) ) {
                                alt324=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA324_5 = input.LA(2);
                            if ( (LA324_5==MIN||(LA324_5>=TIMEPERIOD_MINUTE && LA324_5<=TIMEPERIOD_MINUTES)) ) {
                                alt324=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA324_6 = input.LA(2);
                            if ( (LA324_6==MIN||(LA324_6>=TIMEPERIOD_MINUTE && LA324_6<=TIMEPERIOD_MINUTES)) ) {
                                alt324=1;
                            }
                            }
                            break;
                    }
                    switch (alt324) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_minutePart_in_timePeriod12432);
                            minutePart875=minutePart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_minutePart.add(minutePart875.getTree());
                            }
                            break;
                    }
                    int alt325=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA325_1 = input.LA(2);
                            if ( ((LA325_1>=TIMEPERIOD_SEC && LA325_1<=TIMEPERIOD_SECONDS)) ) {
                                alt325=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA325_2 = input.LA(2);
                            if ( ((LA325_2>=TIMEPERIOD_SEC && LA325_2<=TIMEPERIOD_SECONDS)) ) {
                                alt325=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA325_3 = input.LA(2);
                            if ( ((LA325_3>=TIMEPERIOD_SEC && LA325_3<=TIMEPERIOD_SECONDS)) ) {
                                alt325=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA325_4 = input.LA(2);
                            if ( ((LA325_4>=TIMEPERIOD_SEC && LA325_4<=TIMEPERIOD_SECONDS)) ) {
                                alt325=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA325_5 = input.LA(2);
                            if ( ((LA325_5>=TIMEPERIOD_SEC && LA325_5<=TIMEPERIOD_SECONDS)) ) {
                                alt325=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA325_6 = input.LA(2);
                            if ( ((LA325_6>=TIMEPERIOD_SEC && LA325_6<=TIMEPERIOD_SECONDS)) ) {
                                alt325=1;
                            }
                            }
                            break;
                    }
                    switch (alt325) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_secondPart_in_timePeriod12435);
                            secondPart876=secondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_secondPart.add(secondPart876.getTree());
                            }
                            break;
                    }
                    int alt326=2;
                    int LA326_0 = input.LA(1);
                    if ( (LA326_0==NUM_DOUBLE||LA326_0==IDENT||LA326_0==QUESTION||LA326_0==NUM_INT||(LA326_0>=NUM_LONG && LA326_0<=NUM_FLOAT)) ) {
                        alt326=1;
                    }
                    switch (alt326) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod12438);
                            millisecondPart877=millisecondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart877.getTree());
                            }
                            break;
                    }
                    }
                    break;
                case 5 :
                    {
                    pushFollow(FOLLOW_hourPart_in_timePeriod12444);
                    hourPart878=hourPart();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_hourPart.add(hourPart878.getTree());
                    int alt327=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA327_1 = input.LA(2);
                            if ( (LA327_1==MIN||(LA327_1>=TIMEPERIOD_MINUTE && LA327_1<=TIMEPERIOD_MINUTES)) ) {
                                alt327=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA327_2 = input.LA(2);
                            if ( (LA327_2==MIN||(LA327_2>=TIMEPERIOD_MINUTE && LA327_2<=TIMEPERIOD_MINUTES)) ) {
                                alt327=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA327_3 = input.LA(2);
                            if ( (LA327_3==MIN||(LA327_3>=TIMEPERIOD_MINUTE && LA327_3<=TIMEPERIOD_MINUTES)) ) {
                                alt327=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA327_4 = input.LA(2);
                            if ( (LA327_4==MIN||(LA327_4>=TIMEPERIOD_MINUTE && LA327_4<=TIMEPERIOD_MINUTES)) ) {
                                alt327=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA327_5 = input.LA(2);
                            if ( (LA327_5==MIN||(LA327_5>=TIMEPERIOD_MINUTE && LA327_5<=TIMEPERIOD_MINUTES)) ) {
                                alt327=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA327_6 = input.LA(2);
                            if ( (LA327_6==MIN||(LA327_6>=TIMEPERIOD_MINUTE && LA327_6<=TIMEPERIOD_MINUTES)) ) {
                                alt327=1;
                            }
                            }
                            break;
                    }
                    switch (alt327) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_minutePart_in_timePeriod12446);
                            minutePart879=minutePart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_minutePart.add(minutePart879.getTree());
                            }
                            break;
                    }
                    int alt328=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA328_1 = input.LA(2);
                            if ( ((LA328_1>=TIMEPERIOD_SEC && LA328_1<=TIMEPERIOD_SECONDS)) ) {
                                alt328=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA328_2 = input.LA(2);
                            if ( ((LA328_2>=TIMEPERIOD_SEC && LA328_2<=TIMEPERIOD_SECONDS)) ) {
                                alt328=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA328_3 = input.LA(2);
                            if ( ((LA328_3>=TIMEPERIOD_SEC && LA328_3<=TIMEPERIOD_SECONDS)) ) {
                                alt328=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA328_4 = input.LA(2);
                            if ( ((LA328_4>=TIMEPERIOD_SEC && LA328_4<=TIMEPERIOD_SECONDS)) ) {
                                alt328=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA328_5 = input.LA(2);
                            if ( ((LA328_5>=TIMEPERIOD_SEC && LA328_5<=TIMEPERIOD_SECONDS)) ) {
                                alt328=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA328_6 = input.LA(2);
                            if ( ((LA328_6>=TIMEPERIOD_SEC && LA328_6<=TIMEPERIOD_SECONDS)) ) {
                                alt328=1;
                            }
                            }
                            break;
                    }
                    switch (alt328) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_secondPart_in_timePeriod12449);
                            secondPart880=secondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_secondPart.add(secondPart880.getTree());
                            }
                            break;
                    }
                    int alt329=2;
                    int LA329_0 = input.LA(1);
                    if ( (LA329_0==NUM_DOUBLE||LA329_0==IDENT||LA329_0==QUESTION||LA329_0==NUM_INT||(LA329_0>=NUM_LONG && LA329_0<=NUM_FLOAT)) ) {
                        alt329=1;
                    }
                    switch (alt329) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod12452);
                            millisecondPart881=millisecondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart881.getTree());
                            }
                            break;
                    }
                    }
                    break;
                case 6 :
                    {
                    pushFollow(FOLLOW_minutePart_in_timePeriod12458);
                    minutePart882=minutePart();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_minutePart.add(minutePart882.getTree());
                    int alt330=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA330_1 = input.LA(2);
                            if ( ((LA330_1>=TIMEPERIOD_SEC && LA330_1<=TIMEPERIOD_SECONDS)) ) {
                                alt330=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA330_2 = input.LA(2);
                            if ( ((LA330_2>=TIMEPERIOD_SEC && LA330_2<=TIMEPERIOD_SECONDS)) ) {
                                alt330=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA330_3 = input.LA(2);
                            if ( ((LA330_3>=TIMEPERIOD_SEC && LA330_3<=TIMEPERIOD_SECONDS)) ) {
                                alt330=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA330_4 = input.LA(2);
                            if ( ((LA330_4>=TIMEPERIOD_SEC && LA330_4<=TIMEPERIOD_SECONDS)) ) {
                                alt330=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA330_5 = input.LA(2);
                            if ( ((LA330_5>=TIMEPERIOD_SEC && LA330_5<=TIMEPERIOD_SECONDS)) ) {
                                alt330=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA330_6 = input.LA(2);
                            if ( ((LA330_6>=TIMEPERIOD_SEC && LA330_6<=TIMEPERIOD_SECONDS)) ) {
                                alt330=1;
                            }
                            }
                            break;
                    }
                    switch (alt330) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_secondPart_in_timePeriod12460);
                            secondPart883=secondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_secondPart.add(secondPart883.getTree());
                            }
                            break;
                    }
                    int alt331=2;
                    int LA331_0 = input.LA(1);
                    if ( (LA331_0==NUM_DOUBLE||LA331_0==IDENT||LA331_0==QUESTION||LA331_0==NUM_INT||(LA331_0>=NUM_LONG && LA331_0<=NUM_FLOAT)) ) {
                        alt331=1;
                    }
                    switch (alt331) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod12463);
                            millisecondPart884=millisecondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart884.getTree());
                            }
                            break;
                    }
                    }
                    break;
                case 7 :
                    {
                    pushFollow(FOLLOW_secondPart_in_timePeriod12469);
                    secondPart885=secondPart();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_secondPart.add(secondPart885.getTree());
                    int alt332=2;
                    int LA332_0 = input.LA(1);
                    if ( (LA332_0==NUM_DOUBLE||LA332_0==IDENT||LA332_0==QUESTION||LA332_0==NUM_INT||(LA332_0>=NUM_LONG && LA332_0<=NUM_FLOAT)) ) {
                        alt332=1;
                    }
                    switch (alt332) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod12471);
                            millisecondPart886=millisecondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart886.getTree());
                            }
                            break;
                    }
                    }
                    break;
                case 8 :
                    {
                    pushFollow(FOLLOW_millisecondPart_in_timePeriod12477);
                    millisecondPart887=millisecondPart();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart887.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TIME_PERIOD, "TIME_PERIOD"), root_1);
                if ( stream_yearPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_yearPart.nextTree());
                }
                stream_yearPart.reset();
                if ( stream_monthPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_monthPart.nextTree());
                }
                stream_monthPart.reset();
                if ( stream_weekPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_weekPart.nextTree());
                }
                stream_weekPart.reset();
                if ( stream_dayPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_dayPart.nextTree());
                }
                stream_dayPart.reset();
                if ( stream_hourPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_hourPart.nextTree());
                }
                stream_hourPart.reset();
                if ( stream_minutePart.hasNext() ) {
                    adaptor.addChild(root_1, stream_minutePart.nextTree());
                }
                stream_minutePart.reset();
                if ( stream_secondPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_secondPart.nextTree());
                }
                stream_secondPart.reset();
                if ( stream_millisecondPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_millisecondPart.nextTree());
                }
                stream_millisecondPart.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class yearPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.yearPart_return yearPart() throws RecognitionException {
        EsperEPL2GrammarParser.yearPart_return retval = new EsperEPL2GrammarParser.yearPart_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token TIMEPERIOD_YEARS890=null;
        Token TIMEPERIOD_YEAR891=null;
        EsperEPL2GrammarParser.number_return number888 = null;
        EsperEPL2GrammarParser.substitution_return substitution889 = null;
        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_YEARS890_tree=null;
        CommonTree TIMEPERIOD_YEAR891_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_YEARS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_YEARS");
        RewriteRuleTokenStream stream_TIMEPERIOD_YEAR=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_YEAR");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            {
            int alt334=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt334=1;
                }
                break;
            case IDENT:
                {
                alt334=2;
                }
                break;
            case QUESTION:
                {
                alt334=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 334, 0, input);
                throw nvae;
            }
            switch (alt334) {
                case 1 :
                    {
                    pushFollow(FOLLOW_number_in_yearPart12524);
                    number888=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number888.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_yearPart12528); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_yearPart12530);
                    substitution889=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution889.getTree());
                    }
                    break;
            }
            int alt335=2;
            int LA335_0 = input.LA(1);
            if ( (LA335_0==TIMEPERIOD_YEARS) ) {
                alt335=1;
            }
            else if ( (LA335_0==TIMEPERIOD_YEAR) ) {
                alt335=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 335, 0, input);
                throw nvae;
            }
            switch (alt335) {
                case 1 :
                    {
                    TIMEPERIOD_YEARS890=(Token)match(input,TIMEPERIOD_YEARS,FOLLOW_TIMEPERIOD_YEARS_in_yearPart12534); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_YEARS.add(TIMEPERIOD_YEARS890);
                    }
                    break;
                case 2 :
                    {
                    TIMEPERIOD_YEAR891=(Token)match(input,TIMEPERIOD_YEAR,FOLLOW_TIMEPERIOD_YEAR_in_yearPart12538); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_YEAR.add(TIMEPERIOD_YEAR891);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(YEAR_PART, "YEAR_PART"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(YEAR_PART, "YEAR_PART"), root_1);
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class monthPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.monthPart_return monthPart() throws RecognitionException {
        EsperEPL2GrammarParser.monthPart_return retval = new EsperEPL2GrammarParser.monthPart_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token TIMEPERIOD_MONTHS894=null;
        Token TIMEPERIOD_MONTH895=null;
        EsperEPL2GrammarParser.number_return number892 = null;
        EsperEPL2GrammarParser.substitution_return substitution893 = null;
        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_MONTHS894_tree=null;
        CommonTree TIMEPERIOD_MONTH895_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_MONTH=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MONTH");
        RewriteRuleTokenStream stream_TIMEPERIOD_MONTHS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MONTHS");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            {
            int alt336=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt336=1;
                }
                break;
            case IDENT:
                {
                alt336=2;
                }
                break;
            case QUESTION:
                {
                alt336=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 336, 0, input);
                throw nvae;
            }
            switch (alt336) {
                case 1 :
                    {
                    pushFollow(FOLLOW_number_in_monthPart12586);
                    number892=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number892.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_monthPart12590); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_monthPart12592);
                    substitution893=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution893.getTree());
                    }
                    break;
            }
            int alt337=2;
            int LA337_0 = input.LA(1);
            if ( (LA337_0==TIMEPERIOD_MONTHS) ) {
                alt337=1;
            }
            else if ( (LA337_0==TIMEPERIOD_MONTH) ) {
                alt337=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 337, 0, input);
                throw nvae;
            }
            switch (alt337) {
                case 1 :
                    {
                    TIMEPERIOD_MONTHS894=(Token)match(input,TIMEPERIOD_MONTHS,FOLLOW_TIMEPERIOD_MONTHS_in_monthPart12596); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MONTHS.add(TIMEPERIOD_MONTHS894);
                    }
                    break;
                case 2 :
                    {
                    TIMEPERIOD_MONTH895=(Token)match(input,TIMEPERIOD_MONTH,FOLLOW_TIMEPERIOD_MONTH_in_monthPart12600); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MONTH.add(TIMEPERIOD_MONTH895);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MONTH_PART, "MONTH_PART"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MONTH_PART, "MONTH_PART"), root_1);
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class weekPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.weekPart_return weekPart() throws RecognitionException {
        EsperEPL2GrammarParser.weekPart_return retval = new EsperEPL2GrammarParser.weekPart_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token TIMEPERIOD_WEEKS898=null;
        Token TIMEPERIOD_WEEK899=null;
        EsperEPL2GrammarParser.number_return number896 = null;
        EsperEPL2GrammarParser.substitution_return substitution897 = null;
        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_WEEKS898_tree=null;
        CommonTree TIMEPERIOD_WEEK899_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_WEEK=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_WEEK");
        RewriteRuleTokenStream stream_TIMEPERIOD_WEEKS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_WEEKS");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            {
            int alt338=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt338=1;
                }
                break;
            case IDENT:
                {
                alt338=2;
                }
                break;
            case QUESTION:
                {
                alt338=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 338, 0, input);
                throw nvae;
            }
            switch (alt338) {
                case 1 :
                    {
                    pushFollow(FOLLOW_number_in_weekPart12648);
                    number896=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number896.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_weekPart12652); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_weekPart12654);
                    substitution897=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution897.getTree());
                    }
                    break;
            }
            int alt339=2;
            int LA339_0 = input.LA(1);
            if ( (LA339_0==TIMEPERIOD_WEEKS) ) {
                alt339=1;
            }
            else if ( (LA339_0==TIMEPERIOD_WEEK) ) {
                alt339=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 339, 0, input);
                throw nvae;
            }
            switch (alt339) {
                case 1 :
                    {
                    TIMEPERIOD_WEEKS898=(Token)match(input,TIMEPERIOD_WEEKS,FOLLOW_TIMEPERIOD_WEEKS_in_weekPart12658); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_WEEKS.add(TIMEPERIOD_WEEKS898);
                    }
                    break;
                case 2 :
                    {
                    TIMEPERIOD_WEEK899=(Token)match(input,TIMEPERIOD_WEEK,FOLLOW_TIMEPERIOD_WEEK_in_weekPart12662); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_WEEK.add(TIMEPERIOD_WEEK899);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WEEK_PART, "WEEK_PART"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WEEK_PART, "WEEK_PART"), root_1);
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class dayPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.dayPart_return dayPart() throws RecognitionException {
        EsperEPL2GrammarParser.dayPart_return retval = new EsperEPL2GrammarParser.dayPart_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token TIMEPERIOD_DAYS902=null;
        Token TIMEPERIOD_DAY903=null;
        EsperEPL2GrammarParser.number_return number900 = null;
        EsperEPL2GrammarParser.substitution_return substitution901 = null;
        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_DAYS902_tree=null;
        CommonTree TIMEPERIOD_DAY903_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_DAY=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_DAY");
        RewriteRuleTokenStream stream_TIMEPERIOD_DAYS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_DAYS");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            {
            int alt340=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt340=1;
                }
                break;
            case IDENT:
                {
                alt340=2;
                }
                break;
            case QUESTION:
                {
                alt340=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 340, 0, input);
                throw nvae;
            }
            switch (alt340) {
                case 1 :
                    {
                    pushFollow(FOLLOW_number_in_dayPart12710);
                    number900=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number900.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_dayPart12714); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_dayPart12716);
                    substitution901=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution901.getTree());
                    }
                    break;
            }
            int alt341=2;
            int LA341_0 = input.LA(1);
            if ( (LA341_0==TIMEPERIOD_DAYS) ) {
                alt341=1;
            }
            else if ( (LA341_0==TIMEPERIOD_DAY) ) {
                alt341=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 341, 0, input);
                throw nvae;
            }
            switch (alt341) {
                case 1 :
                    {
                    TIMEPERIOD_DAYS902=(Token)match(input,TIMEPERIOD_DAYS,FOLLOW_TIMEPERIOD_DAYS_in_dayPart12720); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_DAYS.add(TIMEPERIOD_DAYS902);
                    }
                    break;
                case 2 :
                    {
                    TIMEPERIOD_DAY903=(Token)match(input,TIMEPERIOD_DAY,FOLLOW_TIMEPERIOD_DAY_in_dayPart12724); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_DAY.add(TIMEPERIOD_DAY903);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DAY_PART, "DAY_PART"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DAY_PART, "DAY_PART"), root_1);
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class hourPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.hourPart_return hourPart() throws RecognitionException {
        EsperEPL2GrammarParser.hourPart_return retval = new EsperEPL2GrammarParser.hourPart_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token TIMEPERIOD_HOURS906=null;
        Token TIMEPERIOD_HOUR907=null;
        EsperEPL2GrammarParser.number_return number904 = null;
        EsperEPL2GrammarParser.substitution_return substitution905 = null;
        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_HOURS906_tree=null;
        CommonTree TIMEPERIOD_HOUR907_tree=null;
        RewriteRuleTokenStream stream_TIMEPERIOD_HOURS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_HOURS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_HOUR=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_HOUR");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            {
            int alt342=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt342=1;
                }
                break;
            case IDENT:
                {
                alt342=2;
                }
                break;
            case QUESTION:
                {
                alt342=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 342, 0, input);
                throw nvae;
            }
            switch (alt342) {
                case 1 :
                    {
                    pushFollow(FOLLOW_number_in_hourPart12773);
                    number904=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number904.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_hourPart12777); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_hourPart12779);
                    substitution905=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution905.getTree());
                    }
                    break;
            }
            int alt343=2;
            int LA343_0 = input.LA(1);
            if ( (LA343_0==TIMEPERIOD_HOURS) ) {
                alt343=1;
            }
            else if ( (LA343_0==TIMEPERIOD_HOUR) ) {
                alt343=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 343, 0, input);
                throw nvae;
            }
            switch (alt343) {
                case 1 :
                    {
                    TIMEPERIOD_HOURS906=(Token)match(input,TIMEPERIOD_HOURS,FOLLOW_TIMEPERIOD_HOURS_in_hourPart12783); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_HOURS.add(TIMEPERIOD_HOURS906);
                    }
                    break;
                case 2 :
                    {
                    TIMEPERIOD_HOUR907=(Token)match(input,TIMEPERIOD_HOUR,FOLLOW_TIMEPERIOD_HOUR_in_hourPart12787); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_HOUR.add(TIMEPERIOD_HOUR907);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(HOUR_PART, "HOUR_PART"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(HOUR_PART, "HOUR_PART"), root_1);
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class minutePart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.minutePart_return minutePart() throws RecognitionException {
        EsperEPL2GrammarParser.minutePart_return retval = new EsperEPL2GrammarParser.minutePart_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token TIMEPERIOD_MINUTES910=null;
        Token TIMEPERIOD_MINUTE911=null;
        Token MIN912=null;
        EsperEPL2GrammarParser.number_return number908 = null;
        EsperEPL2GrammarParser.substitution_return substitution909 = null;
        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_MINUTES910_tree=null;
        CommonTree TIMEPERIOD_MINUTE911_tree=null;
        CommonTree MIN912_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_MINUTE=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MINUTE");
        RewriteRuleTokenStream stream_MIN=new RewriteRuleTokenStream(adaptor,"token MIN");
        RewriteRuleTokenStream stream_TIMEPERIOD_MINUTES=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MINUTES");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            {
            int alt344=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt344=1;
                }
                break;
            case IDENT:
                {
                alt344=2;
                }
                break;
            case QUESTION:
                {
                alt344=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 344, 0, input);
                throw nvae;
            }
            switch (alt344) {
                case 1 :
                    {
                    pushFollow(FOLLOW_number_in_minutePart12836);
                    number908=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number908.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_minutePart12840); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_minutePart12842);
                    substitution909=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution909.getTree());
                    }
                    break;
            }
            int alt345=3;
            switch ( input.LA(1) ) {
            case TIMEPERIOD_MINUTES:
                {
                alt345=1;
                }
                break;
            case TIMEPERIOD_MINUTE:
                {
                alt345=2;
                }
                break;
            case MIN:
                {
                alt345=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 345, 0, input);
                throw nvae;
            }
            switch (alt345) {
                case 1 :
                    {
                    TIMEPERIOD_MINUTES910=(Token)match(input,TIMEPERIOD_MINUTES,FOLLOW_TIMEPERIOD_MINUTES_in_minutePart12846); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MINUTES.add(TIMEPERIOD_MINUTES910);
                    }
                    break;
                case 2 :
                    {
                    TIMEPERIOD_MINUTE911=(Token)match(input,TIMEPERIOD_MINUTE,FOLLOW_TIMEPERIOD_MINUTE_in_minutePart12850); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MINUTE.add(TIMEPERIOD_MINUTE911);
                    }
                    break;
                case 3 :
                    {
                    MIN912=(Token)match(input,MIN,FOLLOW_MIN_in_minutePart12854); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MIN.add(MIN912);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MINUTE_PART, "MINUTE_PART"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MINUTE_PART, "MINUTE_PART"), root_1);
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class secondPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.secondPart_return secondPart() throws RecognitionException {
        EsperEPL2GrammarParser.secondPart_return retval = new EsperEPL2GrammarParser.secondPart_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token TIMEPERIOD_SECONDS915=null;
        Token TIMEPERIOD_SECOND916=null;
        Token TIMEPERIOD_SEC917=null;
        EsperEPL2GrammarParser.number_return number913 = null;
        EsperEPL2GrammarParser.substitution_return substitution914 = null;
        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_SECONDS915_tree=null;
        CommonTree TIMEPERIOD_SECOND916_tree=null;
        CommonTree TIMEPERIOD_SEC917_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_SEC=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SEC");
        RewriteRuleTokenStream stream_TIMEPERIOD_SECOND=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SECOND");
        RewriteRuleTokenStream stream_TIMEPERIOD_SECONDS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SECONDS");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            {
            int alt346=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt346=1;
                }
                break;
            case IDENT:
                {
                alt346=2;
                }
                break;
            case QUESTION:
                {
                alt346=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 346, 0, input);
                throw nvae;
            }
            switch (alt346) {
                case 1 :
                    {
                    pushFollow(FOLLOW_number_in_secondPart12904);
                    number913=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number913.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_secondPart12908); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_secondPart12910);
                    substitution914=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution914.getTree());
                    }
                    break;
            }
            int alt347=3;
            switch ( input.LA(1) ) {
            case TIMEPERIOD_SECONDS:
                {
                alt347=1;
                }
                break;
            case TIMEPERIOD_SECOND:
                {
                alt347=2;
                }
                break;
            case TIMEPERIOD_SEC:
                {
                alt347=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 347, 0, input);
                throw nvae;
            }
            switch (alt347) {
                case 1 :
                    {
                    TIMEPERIOD_SECONDS915=(Token)match(input,TIMEPERIOD_SECONDS,FOLLOW_TIMEPERIOD_SECONDS_in_secondPart12914); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SECONDS.add(TIMEPERIOD_SECONDS915);
                    }
                    break;
                case 2 :
                    {
                    TIMEPERIOD_SECOND916=(Token)match(input,TIMEPERIOD_SECOND,FOLLOW_TIMEPERIOD_SECOND_in_secondPart12918); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SECOND.add(TIMEPERIOD_SECOND916);
                    }
                    break;
                case 3 :
                    {
                    TIMEPERIOD_SEC917=(Token)match(input,TIMEPERIOD_SEC,FOLLOW_TIMEPERIOD_SEC_in_secondPart12922); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SEC.add(TIMEPERIOD_SEC917);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SECOND_PART, "SECOND_PART"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SECOND_PART, "SECOND_PART"), root_1);
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class millisecondPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.millisecondPart_return millisecondPart() throws RecognitionException {
        EsperEPL2GrammarParser.millisecondPart_return retval = new EsperEPL2GrammarParser.millisecondPart_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token TIMEPERIOD_MILLISECONDS920=null;
        Token TIMEPERIOD_MILLISECOND921=null;
        Token TIMEPERIOD_MILLISEC922=null;
        EsperEPL2GrammarParser.number_return number918 = null;
        EsperEPL2GrammarParser.substitution_return substitution919 = null;
        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_MILLISECONDS920_tree=null;
        CommonTree TIMEPERIOD_MILLISECOND921_tree=null;
        CommonTree TIMEPERIOD_MILLISEC922_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_MILLISEC=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MILLISEC");
        RewriteRuleTokenStream stream_TIMEPERIOD_MILLISECOND=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MILLISECOND");
        RewriteRuleTokenStream stream_TIMEPERIOD_MILLISECONDS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MILLISECONDS");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            {
            int alt348=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt348=1;
                }
                break;
            case IDENT:
                {
                alt348=2;
                }
                break;
            case QUESTION:
                {
                alt348=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 348, 0, input);
                throw nvae;
            }
            switch (alt348) {
                case 1 :
                    {
                    pushFollow(FOLLOW_number_in_millisecondPart12972);
                    number918=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number918.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_millisecondPart12976); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_millisecondPart12978);
                    substitution919=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution919.getTree());
                    }
                    break;
            }
            int alt349=3;
            switch ( input.LA(1) ) {
            case TIMEPERIOD_MILLISECONDS:
                {
                alt349=1;
                }
                break;
            case TIMEPERIOD_MILLISECOND:
                {
                alt349=2;
                }
                break;
            case TIMEPERIOD_MILLISEC:
                {
                alt349=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 349, 0, input);
                throw nvae;
            }
            switch (alt349) {
                case 1 :
                    {
                    TIMEPERIOD_MILLISECONDS920=(Token)match(input,TIMEPERIOD_MILLISECONDS,FOLLOW_TIMEPERIOD_MILLISECONDS_in_millisecondPart12982); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MILLISECONDS.add(TIMEPERIOD_MILLISECONDS920);
                    }
                    break;
                case 2 :
                    {
                    TIMEPERIOD_MILLISECOND921=(Token)match(input,TIMEPERIOD_MILLISECOND,FOLLOW_TIMEPERIOD_MILLISECOND_in_millisecondPart12986); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MILLISECOND.add(TIMEPERIOD_MILLISECOND921);
                    }
                    break;
                case 3 :
                    {
                    TIMEPERIOD_MILLISEC922=(Token)match(input,TIMEPERIOD_MILLISEC,FOLLOW_TIMEPERIOD_MILLISEC_in_millisecondPart12990); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MILLISEC.add(TIMEPERIOD_MILLISEC922);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MILLISECOND_PART, "MILLISECOND_PART"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MILLISECOND_PART, "MILLISECOND_PART"), root_1);
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class number_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.number_return number() throws RecognitionException {
        EsperEPL2GrammarParser.number_return retval = new EsperEPL2GrammarParser.number_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ni=null;
        Token nl=null;
        Token nf=null;
        Token nd=null;
        CommonTree ni_tree=null;
        CommonTree nl_tree=null;
        CommonTree nf_tree=null;
        CommonTree nd_tree=null;
        RewriteRuleTokenStream stream_NUM_LONG=new RewriteRuleTokenStream(adaptor,"token NUM_LONG");
        RewriteRuleTokenStream stream_NUM_DOUBLE=new RewriteRuleTokenStream(adaptor,"token NUM_DOUBLE");
        RewriteRuleTokenStream stream_NUM_FLOAT=new RewriteRuleTokenStream(adaptor,"token NUM_FLOAT");
        RewriteRuleTokenStream stream_NUM_INT=new RewriteRuleTokenStream(adaptor,"token NUM_INT");
        try {
            int alt350=4;
            switch ( input.LA(1) ) {
            case NUM_INT:
                {
                alt350=1;
                }
                break;
            case NUM_LONG:
                {
                alt350=2;
                }
                break;
            case NUM_FLOAT:
                {
                alt350=3;
                }
                break;
            case NUM_DOUBLE:
                {
                alt350=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 350, 0, input);
                throw nvae;
            }
            switch (alt350) {
                case 1 :
                    {
                    ni=(Token)match(input,NUM_INT,FOLLOW_NUM_INT_in_number13045); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_INT.add(ni);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(INT_TYPE, ni));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    {
                    nl=(Token)match(input,NUM_LONG,FOLLOW_NUM_LONG_in_number13062); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_LONG.add(nl);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(LONG_TYPE, nl));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    {
                    nf=(Token)match(input,NUM_FLOAT,FOLLOW_NUM_FLOAT_in_number13079); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_FLOAT.add(nf);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(FLOAT_TYPE, nf));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    {
                    nd=(Token)match(input,NUM_DOUBLE,FOLLOW_NUM_DOUBLE_in_number13096); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_DOUBLE.add(nd);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(DOUBLE_TYPE, nd));
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class substitution_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.substitution_return substitution() throws RecognitionException {
        EsperEPL2GrammarParser.substitution_return retval = new EsperEPL2GrammarParser.substitution_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token q=null;
        CommonTree q_tree=null;
        RewriteRuleTokenStream stream_QUESTION=new RewriteRuleTokenStream(adaptor,"token QUESTION");
        try {
            {
            q=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_substitution13117); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_QUESTION.add(q);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                adaptor.addChild(root_0, (CommonTree)adaptor.create(SUBSTITUTION, q));
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class constant_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.constant_return constant() throws RecognitionException {
        EsperEPL2GrammarParser.constant_return retval = new EsperEPL2GrammarParser.constant_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token t=null;
        Token f=null;
        Token nu=null;
        EsperEPL2GrammarParser.numberconstant_return numberconstant923 = null;
        EsperEPL2GrammarParser.stringconstant_return stringconstant924 = null;
        CommonTree t_tree=null;
        CommonTree f_tree=null;
        CommonTree nu_tree=null;
        RewriteRuleTokenStream stream_BOOLEAN_TRUE=new RewriteRuleTokenStream(adaptor,"token BOOLEAN_TRUE");
        RewriteRuleTokenStream stream_VALUE_NULL=new RewriteRuleTokenStream(adaptor,"token VALUE_NULL");
        RewriteRuleTokenStream stream_BOOLEAN_FALSE=new RewriteRuleTokenStream(adaptor,"token BOOLEAN_FALSE");
        try {
            int alt351=5;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case PLUS:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt351=1;
                }
                break;
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
                {
                alt351=2;
                }
                break;
            case BOOLEAN_TRUE:
                {
                alt351=3;
                }
                break;
            case BOOLEAN_FALSE:
                {
                alt351=4;
                }
                break;
            case VALUE_NULL:
                {
                alt351=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 351, 0, input);
                throw nvae;
            }
            switch (alt351) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_numberconstant_in_constant13136);
                    numberconstant923=numberconstant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numberconstant923.getTree());
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_stringconstant_in_constant13143);
                    stringconstant924=stringconstant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stringconstant924.getTree());
                    }
                    break;
                case 3 :
                    {
                    t=(Token)match(input,BOOLEAN_TRUE,FOLLOW_BOOLEAN_TRUE_in_constant13156); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BOOLEAN_TRUE.add(t);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BOOL_TYPE, t), root_1);
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    {
                    f=(Token)match(input,BOOLEAN_FALSE,FOLLOW_BOOLEAN_FALSE_in_constant13176); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BOOLEAN_FALSE.add(f);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BOOL_TYPE, f), root_1);
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    {
                    nu=(Token)match(input,VALUE_NULL,FOLLOW_VALUE_NULL_in_constant13196); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_VALUE_NULL.add(nu);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NULL_TYPE, nu), root_1);
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class numberconstant_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.numberconstant_return numberconstant() throws RecognitionException {
        EsperEPL2GrammarParser.numberconstant_return retval = new EsperEPL2GrammarParser.numberconstant_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token m=null;
        Token p=null;
        EsperEPL2GrammarParser.number_return number925 = null;
        CommonTree m_tree=null;
        CommonTree p_tree=null;
        RewriteRuleTokenStream stream_PLUS=new RewriteRuleTokenStream(adaptor,"token PLUS");
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        try {
            {
            int alt352=3;
            int LA352_0 = input.LA(1);
            if ( (LA352_0==MINUS) ) {
                alt352=1;
            }
            else if ( (LA352_0==PLUS) ) {
                alt352=2;
            }
            switch (alt352) {
                case 1 :
                    {
                    m=(Token)match(input,MINUS,FOLLOW_MINUS_in_numberconstant13218); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MINUS.add(m);
                    }
                    break;
                case 2 :
                    {
                    p=(Token)match(input,PLUS,FOLLOW_PLUS_in_numberconstant13224); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PLUS.add(p);
                    }
                    break;
            }
            pushFollow(FOLLOW_number_in_numberconstant13228);
            number925=number();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_number.add(number925.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (m != null) {
                adaptor.addChild(root_0, adaptor.create((number925!=null?((CommonTree)number925.tree):null).getType(), "-" + (number925!=null?input.toString(number925.start,number925.stop):null)));
            }
            else 
            {
                adaptor.addChild(root_0, stream_number.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class stringconstant_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.stringconstant_return stringconstant() throws RecognitionException {
        EsperEPL2GrammarParser.stringconstant_return retval = new EsperEPL2GrammarParser.stringconstant_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token sl=null;
        Token qsl=null;
        CommonTree sl_tree=null;
        CommonTree qsl_tree=null;
        RewriteRuleTokenStream stream_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token STRING_LITERAL");
        RewriteRuleTokenStream stream_QUOTED_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token QUOTED_STRING_LITERAL");
        try {
            int alt353=2;
            int LA353_0 = input.LA(1);
            if ( (LA353_0==STRING_LITERAL) ) {
                alt353=1;
            }
            else if ( (LA353_0==QUOTED_STRING_LITERAL) ) {
                alt353=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 353, 0, input);
                throw nvae;
            }
            switch (alt353) {
                case 1 :
                    {
                    sl=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_stringconstant13257); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STRING_LITERAL.add(sl);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STRING_TYPE, sl), root_1);
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    {
                    qsl=(Token)match(input,QUOTED_STRING_LITERAL,FOLLOW_QUOTED_STRING_LITERAL_in_stringconstant13273); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUOTED_STRING_LITERAL.add(qsl);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STRING_TYPE, qsl), root_1);
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public final void synpred1_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_streamSelector_in_synpred1_EsperEPL2Grammar4818);
        streamSelector();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred2_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_timePeriod_in_synpred2_EsperEPL2Grammar6218);
        timePeriod();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred3_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_builtinFunc_in_synpred3_EsperEPL2Grammar8082);
        builtinFunc();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred4_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_propertyStreamSelector_in_synpred4_EsperEPL2Grammar9244);
        propertyStreamSelector();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred5_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_eventProperty_in_synpred5_EsperEPL2Grammar9312);
        eventProperty();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred6_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_propertyStreamSelector_in_synpred6_EsperEPL2Grammar10648);
        propertyStreamSelector();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred7_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_lastOperand_in_synpred7_EsperEPL2Grammar11071);
        lastOperand();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred8_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_lastWeekdayOperand_in_synpred8_EsperEPL2Grammar11082);
        lastWeekdayOperand();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred9_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_timePeriod_in_synpred9_EsperEPL2Grammar11093);
        timePeriod();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred10_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_expressionQualifyable_in_synpred10_EsperEPL2Grammar11104);
        expressionQualifyable();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred11_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_rangeOperand_in_synpred11_EsperEPL2Grammar11115);
        rangeOperand();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred12_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_frequencyOperand_in_synpred12_EsperEPL2Grammar11127);
        frequencyOperand();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred13_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_lastOperator_in_synpred13_EsperEPL2Grammar11138);
        lastOperator();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred14_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_weekDayOperator_in_synpred14_EsperEPL2Grammar11149);
        weekDayOperator();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred15_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_numericParameterList_in_synpred15_EsperEPL2Grammar11162);
        numericParameterList();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final boolean synpred3_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred3_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred5_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred5_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred4_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred4_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred7_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred7_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred11_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred11_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred14_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred14_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred2_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred2_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred12_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred12_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred13_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred13_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred6_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred6_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred10_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred10_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred1_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred1_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred15_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred15_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred8_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred8_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred9_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred9_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    protected DFA197 dfa197 = new DFA197(this);
    static final String DFA197_eotS =
        "\u0bb9\uffff";
    static final String DFA197_eofS =
        "\21\uffff\1\16\2\uffff\2\16\2\uffff\4\16\1\uffff\2\16\12\uffff"+
        "\3\16\2\uffff\3\16\3\uffff\1\16\u0b84\uffff";
    static final String DFA197_minS =
        "\2\5\13\uffff\1\5\3\uffff\1\6\2\uffff\2\6\2\uffff\4\6\1\uffff\2"+
        "\6\12\uffff\3\6\2\uffff\3\6\3\uffff\1\6\13\uffff\1\u0124\172\uffff"+
        "\1\5\73\uffff\1\5\73\uffff\1\5\73\uffff\1\5\73\uffff\1\5\73\uffff"+
        "\1\5\73\uffff\1\5\73\uffff\1\5\73\uffff\1\5\73\uffff\1\5\73\uffff"+
        "\1\5\73\uffff\1\u0131\73\uffff\1\5\73\uffff\1\5\73\uffff\1\5\73"+
        "\uffff\1\5\73\uffff\1\5\2\6\116\uffff\2\6\73\uffff\2\6\104\uffff"+
        "\2\6\113\uffff\2\6\104\uffff\2\6\104\uffff\2\6\104\uffff\2\6\103"+
        "\uffff\2\6\72\uffff\2\6\102\uffff\2\6\105\uffff\2\6\102\uffff\2"+
        "\6\111\uffff\2\6\104\uffff\2\6\175\uffff\1\0\30\uffff\1\0\30\uffff"+
        "\1\0\30\uffff\1\0\30\uffff\1\0\30\uffff\1\0\71\uffff\1\0\30\uffff"+
        "\1\0\30\uffff\1\0\30\uffff\1\0\30\uffff\1\0\30\uffff\1\0\30\uffff"+
        "\1\0\55\uffff\1\0\31\uffff\1\0\31\uffff\1\0\5\uffff\1\0\31\uffff"+
        "\1\0\31\uffff\1\0\55\uffff\1\0\114\uffff\1\0\30\uffff\1\0\116\uffff"+
        "\1\0\5\uffff\1\0\30\uffff";
    static final String DFA197_maxS =
        "\2\u0146\13\uffff\1\u0146\3\uffff\1\u0143\2\uffff\2\u0143\2\uffff"+
        "\4\u0143\1\uffff\2\u0143\12\uffff\3\u0143\2\uffff\3\u0143\3\uffff"+
        "\1\u0143\13\uffff\1\u0124\172\uffff\1\u0146\73\uffff\1\u0146\73"+
        "\uffff\1\u0146\73\uffff\1\u0146\73\uffff\1\u0146\73\uffff\1\u0146"+
        "\73\uffff\1\u0146\73\uffff\1\u0146\73\uffff\1\u0146\73\uffff\1\u0146"+
        "\73\uffff\1\u0146\73\uffff\1\u013f\73\uffff\1\u0146\73\uffff\1\u0146"+
        "\73\uffff\1\u0146\73\uffff\1\u0146\73\uffff\1\u0144\2\u013e\116"+
        "\uffff\2\u013e\73\uffff\2\u013e\104\uffff\2\u013e\113\uffff\2\u013e"+
        "\104\uffff\2\u013e\104\uffff\2\u013e\104\uffff\2\u013e\103\uffff"+
        "\2\u013e\72\uffff\2\u013e\102\uffff\2\u013e\105\uffff\2\u013e\102"+
        "\uffff\2\u013e\111\uffff\2\u013e\104\uffff\2\u013e\175\uffff\1\0"+
        "\30\uffff\1\0\30\uffff\1\0\30\uffff\1\0\30\uffff\1\0\30\uffff\1"+
        "\0\71\uffff\1\0\30\uffff\1\0\30\uffff\1\0\30\uffff\1\0\30\uffff"+
        "\1\0\30\uffff\1\0\30\uffff\1\0\55\uffff\1\0\31\uffff\1\0\31\uffff"+
        "\1\0\5\uffff\1\0\31\uffff\1\0\31\uffff\1\0\55\uffff\1\0\114\uffff"+
        "\1\0\30\uffff\1\0\116\uffff\1\0\5\uffff\1\0\30\uffff";
    static final String DFA197_acceptS =
        "\2\uffff\1\2\11\uffff\1\3\1\uffff\1\5\57\uffff\2\6\1\uffff\1\6"+
        "\1\7\4\uffff\1\1\56\uffff\1\10\1\4\u0406\uffff\116\6\2\uffff\73"+
        "\6\2\uffff\104\6\2\uffff\113\6\2\uffff\104\6\2\uffff\104\6\2\uffff"+
        "\104\6\2\uffff\103\6\2\uffff\72\6\2\uffff\102\6\2\uffff\103\6\4"+
        "\uffff\102\6\2\uffff\111\6\2\uffff\104\6\2\uffff\72\6\1\11\102\6"+
        "\1\uffff\30\6\1\uffff\30\6\1\uffff\30\6\1\uffff\30\6\1\uffff\30"+
        "\6\1\uffff\5\6\1\uffff\31\6\1\uffff\31\6\1\uffff\30\6\1\uffff\30"+
        "\6\1\uffff\30\6\1\uffff\30\6\1\uffff\30\6\1\uffff\30\6\1\uffff\55"+
        "\6\1\uffff\31\6\1\uffff\31\6\1\uffff\5\6\1\uffff\31\6\1\uffff\31"+
        "\6\1\uffff\55\6\1\uffff\5\6\1\uffff\31\6\1\uffff\54\6\1\uffff\30"+
        "\6\1\uffff\5\6\1\uffff\32\6\1\uffff\55\6\1\uffff\5\6\1\uffff\30"+
        "\6";
    static final String DFA197_specialS =
        "\1\0\u00ba\uffff\1\1\73\uffff\1\2\73\uffff\1\3\73\uffff\1\4\73"+
        "\uffff\1\5\73\uffff\1\6\73\uffff\1\7\73\uffff\1\10\73\uffff\1\11"+
        "\73\uffff\1\12\73\uffff\1\13\73\uffff\1\14\73\uffff\1\15\73\uffff"+
        "\1\16\73\uffff\1\17\73\uffff\1\20\73\uffff\1\21\1\22\1\23\116\uffff"+
        "\1\24\1\25\73\uffff\1\26\1\27\104\uffff\1\30\1\31\113\uffff\1\32"+
        "\1\33\104\uffff\1\34\1\35\104\uffff\1\36\1\37\104\uffff\1\40\1\41"+
        "\103\uffff\1\42\1\43\72\uffff\1\44\1\45\102\uffff\1\46\1\47\105"+
        "\uffff\1\50\1\51\102\uffff\1\52\1\53\111\uffff\1\54\1\55\104\uffff"+
        "\1\56\1\57\175\uffff\1\60\30\uffff\1\61\30\uffff\1\62\30\uffff\1"+
        "\63\30\uffff\1\64\30\uffff\1\65\71\uffff\1\66\30\uffff\1\67\30\uffff"+
        "\1\70\30\uffff\1\71\30\uffff\1\72\30\uffff\1\73\30\uffff\1\74\55"+
        "\uffff\1\75\31\uffff\1\76\31\uffff\1\77\5\uffff\1\100\31\uffff\1"+
        "\101\31\uffff\1\102\55\uffff\1\103\114\uffff\1\104\30\uffff\1\105"+
        "\116\uffff\1\106\5\uffff\1\107\30\uffff}>";
    static final String[] DFA197_transitionS = {
            "\1\64\4\uffff\1\16\3\uffff\1\16\1\uffff\1\16\1\uffff\1\24\1"+
            "\25\2\16\1\30\1\31\1\32\1\33\1\21\10\uffff\1\16\1\uffff\4\16"+
            "\12\uffff\1\16\1\35\1\36\11\uffff\6\16\1\51\1\52\1\76\1\77\1"+
            "\53\1\100\2\16\1\56\1\57\1\60\1\101\1\uffff\1\16\1\uffff\4\16"+
            "\22\uffff\3\2\5\uffff\3\16\2\uffff\1\16\1\uffff\2\16\u0098\uffff"+
            "\1\2\15\uffff\1\16\1\102\1\uffff\1\15\11\uffff\1\2\1\14\1\uffff"+
            "\2\2\11\uffff\1\1\2\uffff\1\2\4\uffff\1\16\2\2",
            "\1\107\4\uffff\1\107\3\uffff\1\107\3\uffff\11\107\10\uffff"+
            "\1\107\1\uffff\4\107\12\uffff\3\107\11\uffff\10\107\2\uffff"+
            "\1\107\1\uffff\5\107\2\uffff\1\107\1\uffff\4\107\32\uffff\3"+
            "\107\2\uffff\1\107\1\uffff\2\107\u0098\uffff\1\2\15\uffff\1"+
            "\107\35\uffff\1\2\4\uffff\1\107\2\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\167\4\uffff\1\167\2\uffff\2\167\1\uffff\1\167\1\uffff\11"+
            "\167\1\166\1\167\6\uffff\1\167\1\uffff\4\167\12\uffff\3\167"+
            "\11\uffff\22\167\1\uffff\1\167\1\uffff\4\167\22\uffff\3\167"+
            "\5\uffff\3\167\2\uffff\1\167\1\uffff\2\167\u0098\uffff\1\167"+
            "\15\uffff\2\167\1\uffff\1\167\11\uffff\2\167\1\uffff\2\167\11"+
            "\uffff\1\167\2\uffff\1\167\4\uffff\3\167",
            "",
            "",
            "",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\41\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u00ac"+
            "\uffff\1\16\1\u00bb\1\16\1\uffff\12\16\2\uffff\14\16\3\uffff"+
            "\2\16",
            "",
            "",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\41\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u00ac"+
            "\uffff\1\16\1\u00f7\1\16\1\uffff\12\16\2\uffff\14\16\3\uffff"+
            "\2\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\41\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u00ac"+
            "\uffff\1\16\1\u0133\1\16\1\uffff\12\16\2\uffff\14\16\3\uffff"+
            "\2\16",
            "",
            "",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\41\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u00ac"+
            "\uffff\1\16\1\u016f\1\16\1\uffff\12\16\2\uffff\14\16\3\uffff"+
            "\2\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\41\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u00ac"+
            "\uffff\1\16\1\u01ab\1\16\1\uffff\12\16\2\uffff\14\16\3\uffff"+
            "\2\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\41\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u00ac"+
            "\uffff\1\16\1\u01e7\1\16\1\uffff\12\16\2\uffff\14\16\3\uffff"+
            "\2\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\41\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u00ac"+
            "\uffff\1\16\1\u0223\1\16\1\uffff\12\16\2\uffff\14\16\3\uffff"+
            "\2\16",
            "",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\41\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u00ac"+
            "\uffff\1\16\1\u025f\1\16\1\uffff\12\16\2\uffff\14\16\3\uffff"+
            "\2\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\41\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u00ac"+
            "\uffff\1\16\1\u029b\1\16\1\uffff\12\16\2\uffff\14\16\3\uffff"+
            "\2\16",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\41\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u00ac"+
            "\uffff\1\16\1\u02d7\1\16\1\uffff\12\16\2\uffff\14\16\3\uffff"+
            "\2\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\41\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u00ac"+
            "\uffff\1\16\1\u0313\1\16\1\uffff\12\16\2\uffff\14\16\3\uffff"+
            "\2\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\41\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u00ac"+
            "\uffff\1\16\1\u034f\1\16\1\uffff\12\16\2\uffff\14\16\3\uffff"+
            "\2\16",
            "",
            "",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\41\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u00ac"+
            "\uffff\1\16\1\u038b\1\16\1\uffff\12\16\2\uffff\14\16\3\uffff"+
            "\2\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\41\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u00ac"+
            "\uffff\1\16\1\u03c7\1\16\1\uffff\12\16\2\uffff\14\16\3\uffff"+
            "\2\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\41\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u00ac"+
            "\uffff\1\16\1\u0403\1\16\1\uffff\12\16\2\uffff\14\16\3\uffff"+
            "\2\16",
            "",
            "",
            "",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\41\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u00ac"+
            "\uffff\1\16\1\u043f\1\16\1\uffff\12\16\2\uffff\14\16\3\uffff"+
            "\2\16",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u047b",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u04b2\4\uffff\1\u0490\2\uffff\1\u04c1\1\u0491\1\uffff\1"+
            "\u04bb\1\uffff\1\u0492\1\u0493\1\u0494\1\u0495\1\u0496\1\u0497"+
            "\1\u0498\1\u0499\1\u048f\1\uffff\1\u0480\6\uffff\1\u04b5\1\uffff"+
            "\1\u04b7\1\u04b3\1\u04b4\1\u04b6\5\uffff\1\u047f\1\u047e\3\uffff"+
            "\1\u049a\1\u049b\1\u049c\11\uffff\1\u04a0\1\u04a1\1\u04a2\1"+
            "\u04a4\1\u04a5\1\u04a6\1\u04a7\1\u04a8\1\u04bc\1\u04bd\1\u04a9"+
            "\1\u04be\1\u04aa\1\u04ab\1\u04ac\1\u04ad\1\u04ae\1\u04bf\1\uffff"+
            "\1\u04af\1\uffff\1\u04b0\1\u04a3\1\u048e\1\u04b1\22\uffff\1"+
            "\u0487\1\u0488\1\u0489\5\uffff\1\u04b8\1\u04b9\1\u04ba\2\uffff"+
            "\1\u049d\1\uffff\1\u049e\1\u049f\u0098\uffff\1\u0486\15\uffff"+
            "\1\u048c\1\u04c0\1\uffff\1\u048b\7\uffff\1\u04c2\1\uffff\1\u0482"+
            "\1\u048a\1\uffff\1\u047c\1\u047d\11\uffff\1\u0481\2\uffff\1"+
            "\u0483\4\uffff\1\u048d\1\u0484\1\u0485",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u04f9\4\uffff\1\u04d7\2\uffff\1\u0508\1\u04d8\1\uffff\1"+
            "\u0502\1\uffff\1\u04d9\1\u04da\1\u04db\1\u04dc\1\u04dd\1\u04de"+
            "\1\u04df\1\u04e0\1\u04d6\1\uffff\1\u04c5\6\uffff\1\u04fc\1\uffff"+
            "\1\u04fe\1\u04fa\1\u04fb\1\u04fd\5\uffff\1\u04c4\1\u04c3\3\uffff"+
            "\1\u04e1\1\u04e2\1\u04e3\11\uffff\1\u04e7\1\u04e8\1\u04e9\1"+
            "\u04eb\1\u04ec\1\u04ed\1\u04ee\1\u04ef\1\u0503\1\u0504\1\u04f0"+
            "\1\u0505\1\u04f1\1\u04f2\1\u04f3\1\u04f4\1\u04f5\1\u0506\1\uffff"+
            "\1\u04f6\1\uffff\1\u04f7\1\u04ea\1\u04d5\1\u04f8\22\uffff\1"+
            "\u04ce\1\u04cf\1\u04d0\5\uffff\1\u04ff\1\u0500\1\u0501\2\uffff"+
            "\1\u04e4\1\uffff\1\u04e5\1\u04e6\u0098\uffff\1\u04cb\15\uffff"+
            "\1\u04d3\1\u0507\1\uffff\1\u04d2\11\uffff\1\u04c7\1\u04d1\1"+
            "\uffff\1\u04cc\1\u04cd\11\uffff\1\u04c6\2\uffff\1\u04c8\4\uffff"+
            "\1\u04d4\1\u04c9\1\u04ca",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u053f\4\uffff\1\u051d\2\uffff\1\u054e\1\u051e\1\uffff\1"+
            "\u0548\1\uffff\1\u051f\1\u0520\1\u0521\1\u0522\1\u0523\1\u0524"+
            "\1\u0525\1\u0526\1\u051c\1\uffff\1\u050d\6\uffff\1\u0542\1\uffff"+
            "\1\u0544\1\u0540\1\u0541\1\u0543\5\uffff\1\u050c\1\u050b\3\uffff"+
            "\1\u0527\1\u0528\1\u0529\11\uffff\1\u052d\1\u052e\1\u052f\1"+
            "\u0531\1\u0532\1\u0533\1\u0534\1\u0535\1\u0549\1\u054a\1\u0536"+
            "\1\u054b\1\u0537\1\u0538\1\u0539\1\u053a\1\u053b\1\u054c\1\uffff"+
            "\1\u053c\1\uffff\1\u053d\1\u0530\1\u051b\1\u053e\22\uffff\1"+
            "\u0514\1\u0515\1\u0516\5\uffff\1\u0545\1\u0546\1\u0547\2\uffff"+
            "\1\u052a\1\uffff\1\u052b\1\u052c\u0098\uffff\1\u0513\15\uffff"+
            "\1\u0519\1\u054d\1\uffff\1\u0518\11\uffff\1\u050f\1\u0517\1"+
            "\uffff\1\u0509\1\u050a\11\uffff\1\u050e\2\uffff\1\u0510\4\uffff"+
            "\1\u051a\1\u0511\1\u0512",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0583\4\uffff\1\u0561\2\uffff\1\u0592\1\u0562\1\uffff\1"+
            "\u058c\1\uffff\1\u0563\1\u0564\1\u0565\1\u0566\1\u0567\1\u0568"+
            "\1\u0569\1\u056a\1\u0560\1\uffff\1\u0551\6\uffff\1\u0586\1\uffff"+
            "\1\u0588\1\u0584\1\u0585\1\u0587\12\uffff\1\u056b\1\u056c\1"+
            "\u056d\11\uffff\1\u0571\1\u0572\1\u0573\1\u0575\1\u0576\1\u0577"+
            "\1\u0578\1\u0579\1\u058d\1\u058e\1\u057a\1\u058f\1\u057b\1\u057c"+
            "\1\u057d\1\u057e\1\u057f\1\u0590\1\uffff\1\u0580\1\uffff\1\u0581"+
            "\1\u0574\1\u055f\1\u0582\22\uffff\1\u0558\1\u0559\1\u055a\5"+
            "\uffff\1\u0589\1\u058a\1\u058b\2\uffff\1\u056e\1\uffff\1\u056f"+
            "\1\u0570\u0098\uffff\1\u0557\15\uffff\1\u055d\1\u0591\1\uffff"+
            "\1\u055c\11\uffff\1\u0553\1\u055b\1\uffff\1\u054f\1\u0550\11"+
            "\uffff\1\u0552\2\uffff\1\u0554\4\uffff\1\u055e\1\u0555\1\u0556",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u05c9\4\uffff\1\u05a7\2\uffff\1\u05d8\1\u05a8\1\uffff\1"+
            "\u05d2\1\uffff\1\u05a9\1\u05aa\1\u05ab\1\u05ac\1\u05ad\1\u05ae"+
            "\1\u05af\1\u05b0\1\u05a6\1\uffff\1\u0595\6\uffff\1\u05cc\1\uffff"+
            "\1\u05ce\1\u05ca\1\u05cb\1\u05cd\5\uffff\1\u0594\1\u0593\3\uffff"+
            "\1\u05b1\1\u05b2\1\u05b3\11\uffff\1\u05b7\1\u05b8\1\u05b9\1"+
            "\u05bb\1\u05bc\1\u05bd\1\u05be\1\u05bf\1\u05d3\1\u05d4\1\u05c0"+
            "\1\u05d5\1\u05c1\1\u05c2\1\u05c3\1\u05c4\1\u05c5\1\u05d6\1\uffff"+
            "\1\u05c6\1\uffff\1\u05c7\1\u05ba\1\u05a5\1\u05c8\22\uffff\1"+
            "\u059e\1\u059f\1\u05a0\5\uffff\1\u05cf\1\u05d0\1\u05d1\2\uffff"+
            "\1\u05b4\1\uffff\1\u05b5\1\u05b6\u0098\uffff\1\u059b\15\uffff"+
            "\1\u05a3\1\u05d7\1\uffff\1\u05a2\11\uffff\1\u0597\1\u05a1\1"+
            "\uffff\1\u059c\1\u059d\11\uffff\1\u0596\2\uffff\1\u0598\4\uffff"+
            "\1\u05a4\1\u0599\1\u059a",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u060f\4\uffff\1\u05ed\2\uffff\1\u061e\1\u05ee\1\uffff\1"+
            "\u0618\1\uffff\1\u05ef\1\u05f0\1\u05f1\1\u05f2\1\u05f3\1\u05f4"+
            "\1\u05f5\1\u05f6\1\u05ec\1\uffff\1\u05db\6\uffff\1\u0612\1\uffff"+
            "\1\u0614\1\u0610\1\u0611\1\u0613\5\uffff\1\u05da\1\u05d9\3\uffff"+
            "\1\u05f7\1\u05f8\1\u05f9\11\uffff\1\u05fd\1\u05fe\1\u05ff\1"+
            "\u0601\1\u0602\1\u0603\1\u0604\1\u0605\1\u0619\1\u061a\1\u0606"+
            "\1\u061b\1\u0607\1\u0608\1\u0609\1\u060a\1\u060b\1\u061c\1\uffff"+
            "\1\u060c\1\uffff\1\u060d\1\u0600\1\u05eb\1\u060e\22\uffff\1"+
            "\u05e4\1\u05e5\1\u05e6\5\uffff\1\u0615\1\u0616\1\u0617\2\uffff"+
            "\1\u05fa\1\uffff\1\u05fb\1\u05fc\u0098\uffff\1\u05e1\15\uffff"+
            "\1\u05e9\1\u061d\1\uffff\1\u05e8\11\uffff\1\u05dd\1\u05e7\1"+
            "\uffff\1\u05e2\1\u05e3\11\uffff\1\u05dc\2\uffff\1\u05de\4\uffff"+
            "\1\u05ea\1\u05df\1\u05e0",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0655\4\uffff\1\u0633\2\uffff\1\u0664\1\u0634\1\uffff\1"+
            "\u065e\1\uffff\1\u0635\1\u0636\1\u0637\1\u0638\1\u0639\1\u063a"+
            "\1\u063b\1\u063c\1\u0632\1\uffff\1\u0621\6\uffff\1\u0658\1\uffff"+
            "\1\u065a\1\u0656\1\u0657\1\u0659\5\uffff\1\u0620\1\u061f\3\uffff"+
            "\1\u063d\1\u063e\1\u063f\11\uffff\1\u0643\1\u0644\1\u0645\1"+
            "\u0647\1\u0648\1\u0649\1\u064a\1\u064b\1\u065f\1\u0660\1\u064c"+
            "\1\u0661\1\u064d\1\u064e\1\u064f\1\u0650\1\u0651\1\u0662\1\uffff"+
            "\1\u0652\1\uffff\1\u0653\1\u0646\1\u0631\1\u0654\22\uffff\1"+
            "\u062a\1\u062b\1\u062c\5\uffff\1\u065b\1\u065c\1\u065d\2\uffff"+
            "\1\u0640\1\uffff\1\u0641\1\u0642\u0098\uffff\1\u0627\15\uffff"+
            "\1\u062f\1\u0663\1\uffff\1\u062e\11\uffff\1\u0623\1\u062d\1"+
            "\uffff\1\u0628\1\u0629\11\uffff\1\u0622\2\uffff\1\u0624\4\uffff"+
            "\1\u0630\1\u0625\1\u0626",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u069a\4\uffff\1\u0678\2\uffff\1\u06a9\1\u0679\1\uffff\1"+
            "\u06a3\1\uffff\1\u067a\1\u067b\1\u067c\1\u067d\1\u067e\1\u067f"+
            "\1\u0680\1\u0681\1\u0677\1\uffff\1\u0667\6\uffff\1\u069d\1\uffff"+
            "\1\u069f\1\u069b\1\u069c\1\u069e\12\uffff\1\u0682\1\u0683\1"+
            "\u0684\11\uffff\1\u0688\1\u0689\1\u068a\1\u068c\1\u068d\1\u068e"+
            "\1\u068f\1\u0690\1\u06a4\1\u06a5\1\u0691\1\u06a6\1\u0692\1\u0693"+
            "\1\u0694\1\u0695\1\u0696\1\u06a7\1\uffff\1\u0697\1\uffff\1\u0698"+
            "\1\u068b\1\u0676\1\u0699\22\uffff\1\u0670\1\u0671\1\u0672\5"+
            "\uffff\1\u06a0\1\u06a1\1\u06a2\2\uffff\1\u0685\1\uffff\1\u0686"+
            "\1\u0687\u0098\uffff\1\u066d\15\uffff\1\u0666\1\u06a8\1\uffff"+
            "\1\u0674\7\uffff\1\u0665\1\uffff\1\u0669\1\u0673\1\uffff\1\u066e"+
            "\1\u066f\11\uffff\1\u0668\2\uffff\1\u066a\4\uffff\1\u0675\1"+
            "\u066b\1\u066c",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u06df\4\uffff\1\u06bd\2\uffff\1\u06ee\1\u06be\1\uffff\1"+
            "\u06e8\1\uffff\1\u06bf\1\u06c0\1\u06c1\1\u06c2\1\u06c3\1\u06c4"+
            "\1\u06c5\1\u06c6\1\u06bc\1\uffff\1\u06ac\6\uffff\1\u06e2\1\uffff"+
            "\1\u06e4\1\u06e0\1\u06e1\1\u06e3\12\uffff\1\u06c7\1\u06c8\1"+
            "\u06c9\11\uffff\1\u06cd\1\u06ce\1\u06cf\1\u06d1\1\u06d2\1\u06d3"+
            "\1\u06d4\1\u06d5\1\u06e9\1\u06ea\1\u06d6\1\u06eb\1\u06d7\1\u06d8"+
            "\1\u06d9\1\u06da\1\u06db\1\u06ec\1\uffff\1\u06dc\1\uffff\1\u06dd"+
            "\1\u06d0\1\u06bb\1\u06de\22\uffff\1\u06b5\1\u06b6\1\u06b7\5"+
            "\uffff\1\u06e5\1\u06e6\1\u06e7\2\uffff\1\u06ca\1\uffff\1\u06cb"+
            "\1\u06cc\u0098\uffff\1\u06b2\15\uffff\1\u06ab\1\u06ed\1\uffff"+
            "\1\u06b9\7\uffff\1\u06aa\1\uffff\1\u06ae\1\u06b8\1\uffff\1\u06b3"+
            "\1\u06b4\11\uffff\1\u06ad\2\uffff\1\u06af\4\uffff\1\u06ba\1"+
            "\u06b0\1\u06b1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0723\4\uffff\1\u0701\2\uffff\1\u0732\1\u0702\1\uffff\1"+
            "\u072c\1\uffff\1\u0703\1\u0704\1\u0705\1\u0706\1\u0707\1\u0708"+
            "\1\u0709\1\u070a\1\u0700\1\uffff\1\u06f1\6\uffff\1\u0726\1\uffff"+
            "\1\u0728\1\u0724\1\u0725\1\u0727\12\uffff\1\u070b\1\u070c\1"+
            "\u070d\11\uffff\1\u0711\1\u0712\1\u0713\1\u0715\1\u0716\1\u0717"+
            "\1\u0718\1\u0719\1\u072d\1\u072e\1\u071a\1\u072f\1\u071b\1\u071c"+
            "\1\u071d\1\u071e\1\u071f\1\u0730\1\uffff\1\u0720\1\uffff\1\u0721"+
            "\1\u0714\1\u06ff\1\u0722\22\uffff\1\u06f8\1\u06f9\1\u06fa\5"+
            "\uffff\1\u0729\1\u072a\1\u072b\2\uffff\1\u070e\1\uffff\1\u070f"+
            "\1\u0710\u0098\uffff\1\u06f7\15\uffff\1\u06fd\1\u0731\1\uffff"+
            "\1\u06fc\11\uffff\1\u06f3\1\u06fb\1\uffff\1\u06ef\1\u06f0\11"+
            "\uffff\1\u06f2\2\uffff\1\u06f4\4\uffff\1\u06fe\1\u06f5\1\u06f6",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0767\4\uffff\1\u0745\2\uffff\1\u0776\1\u0746\1\uffff\1"+
            "\u0770\1\uffff\1\u0747\1\u0748\1\u0749\1\u074a\1\u074b\1\u074c"+
            "\1\u074d\1\u074e\1\u0744\1\uffff\1\u0735\6\uffff\1\u076a\1\uffff"+
            "\1\u076c\1\u0768\1\u0769\1\u076b\12\uffff\1\u074f\1\u0750\1"+
            "\u0751\11\uffff\1\u0755\1\u0756\1\u0757\1\u0759\1\u075a\1\u075b"+
            "\1\u075c\1\u075d\1\u0771\1\u0772\1\u075e\1\u0773\1\u075f\1\u0760"+
            "\1\u0761\1\u0762\1\u0763\1\u0774\1\uffff\1\u0764\1\uffff\1\u0765"+
            "\1\u0758\1\u0743\1\u0766\22\uffff\1\u073c\1\u073d\1\u073e\5"+
            "\uffff\1\u076d\1\u076e\1\u076f\2\uffff\1\u0752\1\uffff\1\u0753"+
            "\1\u0754\u0098\uffff\1\u073b\15\uffff\1\u0741\1\u0775\1\uffff"+
            "\1\u0740\11\uffff\1\u0737\1\u073f\1\uffff\1\u0733\1\u0734\11"+
            "\uffff\1\u0736\2\uffff\1\u0738\4\uffff\1\u0742\1\u0739\1\u073a",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\2\16\14\uffff\1\u0777",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u07ae\4\uffff\1\u078c\2\uffff\1\u07bd\1\u078d\1\uffff\1"+
            "\u07b7\1\uffff\1\u078e\1\u078f\1\u0790\1\u0791\1\u0792\1\u0793"+
            "\1\u0794\1\u0795\1\u078b\1\uffff\1\u077c\6\uffff\1\u07b1\1\uffff"+
            "\1\u07b3\1\u07af\1\u07b0\1\u07b2\12\uffff\1\u0796\1\u0797\1"+
            "\u0798\11\uffff\1\u079c\1\u079d\1\u079e\1\u07a0\1\u07a1\1\u07a2"+
            "\1\u07a3\1\u07a4\1\u07b8\1\u07b9\1\u07a5\1\u07ba\1\u07a6\1\u07a7"+
            "\1\u07a8\1\u07a9\1\u07aa\1\u07bb\1\uffff\1\u07ab\1\uffff\1\u07ac"+
            "\1\u079f\1\u078a\1\u07ad\22\uffff\1\u0783\1\u0784\1\u0785\5"+
            "\uffff\1\u07b4\1\u07b5\1\u07b6\2\uffff\1\u0799\1\uffff\1\u079a"+
            "\1\u079b\u0098\uffff\1\u0782\15\uffff\1\u0788\1\u07bc\1\uffff"+
            "\1\u0787\11\uffff\1\u077e\1\u0786\1\uffff\1\u077a\1\u077b\11"+
            "\uffff\1\u077d\2\uffff\1\u077f\4\uffff\1\u0789\1\u0780\1\u0781",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u07f2\4\uffff\1\u07d0\2\uffff\1\u0801\1\u07d1\1\uffff\1"+
            "\u07fb\1\uffff\1\u07d2\1\u07d3\1\u07d4\1\u07d5\1\u07d6\1\u07d7"+
            "\1\u07d8\1\u07d9\1\u07cf\1\uffff\1\u07c0\6\uffff\1\u07f5\1\uffff"+
            "\1\u07f7\1\u07f3\1\u07f4\1\u07f6\12\uffff\1\u07da\1\u07db\1"+
            "\u07dc\11\uffff\1\u07e0\1\u07e1\1\u07e2\1\u07e4\1\u07e5\1\u07e6"+
            "\1\u07e7\1\u07e8\1\u07fc\1\u07fd\1\u07e9\1\u07fe\1\u07ea\1\u07eb"+
            "\1\u07ec\1\u07ed\1\u07ee\1\u07ff\1\uffff\1\u07ef\1\uffff\1\u07f0"+
            "\1\u07e3\1\u07ce\1\u07f1\22\uffff\1\u07c7\1\u07c8\1\u07c9\5"+
            "\uffff\1\u07f8\1\u07f9\1\u07fa\2\uffff\1\u07dd\1\uffff\1\u07de"+
            "\1\u07df\u0098\uffff\1\u07c6\15\uffff\1\u07cc\1\u0800\1\uffff"+
            "\1\u07cb\11\uffff\1\u07c2\1\u07ca\1\uffff\1\u07be\1\u07bf\11"+
            "\uffff\1\u07c1\2\uffff\1\u07c3\4\uffff\1\u07cd\1\u07c4\1\u07c5",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0836\4\uffff\1\u0814\2\uffff\1\u0845\1\u0815\1\uffff\1"+
            "\u083f\1\uffff\1\u0816\1\u0817\1\u0818\1\u0819\1\u081a\1\u081b"+
            "\1\u081c\1\u081d\1\u0813\1\uffff\1\u0802\6\uffff\1\u0839\1\uffff"+
            "\1\u083b\1\u0837\1\u0838\1\u083a\12\uffff\1\u081e\1\u081f\1"+
            "\u0820\11\uffff\1\u0824\1\u0825\1\u0826\1\u0828\1\u0829\1\u082a"+
            "\1\u082b\1\u082c\1\u0840\1\u0841\1\u082d\1\u0842\1\u082e\1\u082f"+
            "\1\u0830\1\u0831\1\u0832\1\u0843\1\uffff\1\u0833\1\uffff\1\u0834"+
            "\1\u0827\1\u0812\1\u0835\22\uffff\1\u080b\1\u080c\1\u080d\5"+
            "\uffff\1\u083c\1\u083d\1\u083e\2\uffff\1\u0821\1\uffff\1\u0822"+
            "\1\u0823\u0098\uffff\1\u0808\15\uffff\1\u0810\1\u0844\1\uffff"+
            "\1\u080f\11\uffff\1\u0804\1\u080e\1\uffff\1\u0809\1\u080a\11"+
            "\uffff\1\u0803\2\uffff\1\u0805\4\uffff\1\u0811\1\u0806\1\u0807",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u087b\4\uffff\1\u0859\2\uffff\1\u088a\1\u085a\1\uffff\1"+
            "\u0884\1\uffff\1\u085b\1\u085c\1\u085d\1\u085e\1\u085f\1\u0860"+
            "\1\u0861\1\u0862\1\u0858\1\uffff\1\u0848\6\uffff\1\u087e\1\uffff"+
            "\1\u0880\1\u087c\1\u087d\1\u087f\12\uffff\1\u0863\1\u0864\1"+
            "\u0865\11\uffff\1\u0869\1\u086a\1\u086b\1\u086d\1\u086e\1\u086f"+
            "\1\u0870\1\u0871\1\u0885\1\u0886\1\u0872\1\u0887\1\u0873\1\u0874"+
            "\1\u0875\1\u0876\1\u0877\1\u0888\1\uffff\1\u0878\1\uffff\1\u0879"+
            "\1\u086c\1\u0857\1\u087a\22\uffff\1\u0851\1\u0852\1\u0853\5"+
            "\uffff\1\u0881\1\u0882\1\u0883\2\uffff\1\u0866\1\uffff\1\u0867"+
            "\1\u0868\u0098\uffff\1\u084e\15\uffff\1\u0847\1\u0889\1\uffff"+
            "\1\u0855\7\uffff\1\u0846\1\uffff\1\u084a\1\u0854\1\uffff\1\u084f"+
            "\1\u0850\11\uffff\1\u0849\2\uffff\1\u084b\4\uffff\1\u0856\1"+
            "\u084c\1\u084d",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u08b2\4\uffff\1\u0890\3\uffff\1\u0891\3\uffff\1\u0892\1"+
            "\u0893\1\u0894\1\u0895\1\u0896\1\u0897\1\u0898\1\u0899\1\u088f"+
            "\1\u088b\7\uffff\1\u08b5\1\uffff\1\u08b7\1\u08b3\1\u08b4\1\u08b6"+
            "\12\uffff\1\u089a\1\u089b\1\u089c\11\uffff\1\u08a0\1\u08a1\1"+
            "\u08a2\1\u08a4\1\u08a5\1\u08a6\1\u08a7\1\u08a8\2\uffff\1\u08a9"+
            "\1\uffff\1\u08aa\1\u08ab\1\u08ac\1\u08ad\1\u08ae\2\uffff\1\u08af"+
            "\1\uffff\1\u08b0\1\u08a3\1\u088e\1\u08b1\32\uffff\1\u08b8\1"+
            "\u08b9\1\u08ba\2\uffff\1\u089d\1\uffff\1\u089e\1\u089f\u00a6"+
            "\uffff\1\u088c\42\uffff\1\u088d",
            "\1\u08d0\1\u08d1\1\u08d2\1\u08d3\1\uffff\1\u08cd\1\u08cc\1"+
            "\u08cf\34\uffff\1\u08c6\u00fa\uffff\1\u08ce\2\uffff\1\u08c5"+
            "\3\uffff\1\u08bb\1\u08ca\1\u08be\4\uffff\1\u08c9\1\u08cb\1\u08c7"+
            "\1\u08c8\1\u08c1\1\u08c2\1\u08c3\1\u08c4\1\u08c0\1\u08bf\1\u08bc"+
            "\1\u08bd",
            "\1\u08e9\1\u08ea\1\u08eb\1\u08ec\1\uffff\1\u08e6\1\u08e5\1"+
            "\u08e8\34\uffff\1\u08df\u00fa\uffff\1\u08e7\2\uffff\1\u08de"+
            "\3\uffff\1\u08d4\1\u08e3\1\u08d7\4\uffff\1\u08e2\1\u08e4\1\u08e0"+
            "\1\u08e1\1\u08da\1\u08db\1\u08dc\1\u08dd\1\u08d9\1\u08d8\1\u08d5"+
            "\1\u08d6",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0902\1\u0903\1\u0904\1\u0905\1\uffff\1\u08ff\1\u08fe\1"+
            "\u0901\34\uffff\1\u08f8\u00fa\uffff\1\u0900\2\uffff\1\u08f7"+
            "\3\uffff\1\u08ed\1\u08fc\1\u08f0\4\uffff\1\u08fb\1\u08fd\1\u08f9"+
            "\1\u08fa\1\u08f3\1\u08f4\1\u08f5\1\u08f6\1\u08f2\1\u08f1\1\u08ee"+
            "\1\u08ef",
            "\1\u091b\1\u091c\1\u091d\1\u091e\1\uffff\1\u0918\1\u0917\1"+
            "\u091a\34\uffff\1\u0911\u00fa\uffff\1\u0919\2\uffff\1\u0910"+
            "\3\uffff\1\u0906\1\u0915\1\u0909\4\uffff\1\u0914\1\u0916\1\u0912"+
            "\1\u0913\1\u090c\1\u090d\1\u090e\1\u090f\1\u090b\1\u090a\1\u0907"+
            "\1\u0908",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0934\1\u0935\1\u0936\1\u0937\1\uffff\1\u0931\1\u0930\1"+
            "\u0933\34\uffff\1\u092a\u00fa\uffff\1\u0932\2\uffff\1\u0929"+
            "\3\uffff\1\u091f\1\u092e\1\u0922\4\uffff\1\u092d\1\u092f\1\u092b"+
            "\1\u092c\1\u0925\1\u0926\1\u0927\1\u0928\1\u0924\1\u0923\1\u0920"+
            "\1\u0921",
            "\1\u094d\1\u094e\1\u094f\1\u0950\1\uffff\1\u094a\1\u0949\1"+
            "\u094c\34\uffff\1\u0943\u00fa\uffff\1\u094b\2\uffff\1\u0942"+
            "\3\uffff\1\u0938\1\u0947\1\u093b\4\uffff\1\u0946\1\u0948\1\u0944"+
            "\1\u0945\1\u093e\1\u093f\1\u0940\1\u0941\1\u093d\1\u093c\1\u0939"+
            "\1\u093a",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0967\1\u0968\1\u0969\1\u096a\1\uffff\1\u0964\1\u0963\1"+
            "\u0966\34\uffff\1\u095d\u00fa\uffff\1\16\1\uffff\1\u0965\1\u095c"+
            "\3\uffff\1\u0952\1\u0961\1\u0955\4\uffff\1\u0960\1\u0962\1\u095e"+
            "\1\u095f\1\u0958\1\u0959\1\u095a\1\u095b\1\u0957\1\u0956\1\u0953"+
            "\1\u0954",
            "\1\u0981\1\u0982\1\u0983\1\u0984\1\uffff\1\u097e\1\u097d\1"+
            "\u0980\34\uffff\1\u0977\u00fa\uffff\1\16\1\uffff\1\u097f\1\u0976"+
            "\3\uffff\1\u096c\1\u097b\1\u096f\4\uffff\1\u097a\1\u097c\1\u0978"+
            "\1\u0979\1\u0972\1\u0973\1\u0974\1\u0975\1\u0971\1\u0970\1\u096d"+
            "\1\u096e",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u099a\1\u099b\1\u099c\1\u099d\1\uffff\1\u0998\1\u0997\1"+
            "\u0999\34\uffff\1\u0991\u00fa\uffff\1\u0985\2\uffff\1\u0990"+
            "\3\uffff\1\u0986\1\u0995\1\u0989\4\uffff\1\u0994\1\u0996\1\u0992"+
            "\1\u0993\1\u098c\1\u098d\1\u098e\1\u098f\1\u098b\1\u098a\1\u0987"+
            "\1\u0988",
            "\1\u09b3\1\u09b4\1\u09b5\1\u09b6\1\uffff\1\u09b1\1\u09b0\1"+
            "\u09b2\34\uffff\1\u09aa\u00fa\uffff\1\u099e\2\uffff\1\u09a9"+
            "\3\uffff\1\u099f\1\u09ae\1\u09a2\4\uffff\1\u09ad\1\u09af\1\u09ab"+
            "\1\u09ac\1\u09a5\1\u09a6\1\u09a7\1\u09a8\1\u09a4\1\u09a3\1\u09a0"+
            "\1\u09a1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u09cc\1\u09cd\1\u09ce\1\u09cf\1\uffff\1\u09ca\1\u09c9\1"+
            "\u09cb\34\uffff\1\u09c3\u00fa\uffff\1\u09b7\2\uffff\1\u09c2"+
            "\3\uffff\1\u09b8\1\u09c7\1\u09bb\4\uffff\1\u09c6\1\u09c8\1\u09c4"+
            "\1\u09c5\1\u09be\1\u09bf\1\u09c0\1\u09c1\1\u09bd\1\u09bc\1\u09b9"+
            "\1\u09ba",
            "\1\u09e5\1\u09e6\1\u09e7\1\u09e8\1\uffff\1\u09e3\1\u09e2\1"+
            "\u09e4\34\uffff\1\u09dc\u00fa\uffff\1\u09d0\2\uffff\1\u09db"+
            "\3\uffff\1\u09d1\1\u09e0\1\u09d4\4\uffff\1\u09df\1\u09e1\1\u09dd"+
            "\1\u09de\1\u09d7\1\u09d8\1\u09d9\1\u09da\1\u09d6\1\u09d5\1\u09d2"+
            "\1\u09d3",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u09fe\1\u09ff\1\u0a00\1\u0a01\1\uffff\1\u09fc\1\u09fb\1"+
            "\u09fd\34\uffff\1\u09f5\u00fa\uffff\1\u09e9\2\uffff\1\u09f4"+
            "\3\uffff\1\u09ea\1\u09f9\1\u09ed\4\uffff\1\u09f8\1\u09fa\1\u09f6"+
            "\1\u09f7\1\u09f0\1\u09f1\1\u09f2\1\u09f3\1\u09ef\1\u09ee\1\u09eb"+
            "\1\u09ec",
            "\1\u0a17\1\u0a18\1\u0a19\1\u0a1a\1\uffff\1\u0a15\1\u0a14\1"+
            "\u0a16\34\uffff\1\u0a0e\u00fa\uffff\1\u0a02\2\uffff\1\u0a0d"+
            "\3\uffff\1\u0a03\1\u0a12\1\u0a06\4\uffff\1\u0a11\1\u0a13\1\u0a0f"+
            "\1\u0a10\1\u0a09\1\u0a0a\1\u0a0b\1\u0a0c\1\u0a08\1\u0a07\1\u0a04"+
            "\1\u0a05",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0a31\1\u0a32\1\u0a33\1\u0a34\1\uffff\1\u0a2e\1\u0a2d\1"+
            "\u0a30\34\uffff\1\u0a27\u00fa\uffff\1\u0a1b\1\uffff\1\u0a2f"+
            "\1\u0a26\3\uffff\1\u0a1c\1\u0a2b\1\u0a1f\4\uffff\1\u0a2a\1\u0a2c"+
            "\1\u0a28\1\u0a29\1\u0a22\1\u0a23\1\u0a24\1\u0a25\1\u0a21\1\u0a20"+
            "\1\u0a1d\1\u0a1e",
            "\1\u0a4b\1\u0a4c\1\u0a4d\1\u0a4e\1\uffff\1\u0a47\1\u0a46\1"+
            "\u0a4a\34\uffff\1\u0a40\u00fa\uffff\1\u0a49\1\uffff\1\u0a48"+
            "\1\u0a3f\3\uffff\1\u0a35\1\u0a44\1\u0a38\4\uffff\1\u0a43\1\u0a45"+
            "\1\u0a41\1\u0a42\1\u0a3b\1\u0a3c\1\u0a3d\1\u0a3e\1\u0a3a\1\u0a39"+
            "\1\u0a36\1\u0a37",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0a65\1\u0a66\1\u0a67\1\u0a68\1\uffff\1\u0a61\1\u0a60\1"+
            "\u0a64\34\uffff\1\u0a5a\u00fa\uffff\1\u0a63\1\uffff\1\u0a62"+
            "\1\u0a59\3\uffff\1\u0a4f\1\u0a5e\1\u0a52\4\uffff\1\u0a5d\1\u0a5f"+
            "\1\u0a5b\1\u0a5c\1\u0a55\1\u0a56\1\u0a57\1\u0a58\1\u0a54\1\u0a53"+
            "\1\u0a50\1\u0a51",
            "\1\u0a7f\1\u0a80\1\u0a81\1\u0a82\1\uffff\1\u0a7b\1\u0a7a\1"+
            "\u0a7e\34\uffff\1\u0a74\u00fa\uffff\1\u0a7d\1\uffff\1\u0a7c"+
            "\1\u0a73\3\uffff\1\u0a69\1\u0a78\1\u0a6c\4\uffff\1\u0a77\1\u0a79"+
            "\1\u0a75\1\u0a76\1\u0a6f\1\u0a70\1\u0a71\1\u0a72\1\u0a6e\1\u0a6d"+
            "\1\u0a6a\1\u0a6b",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0a99\1\u0a9a\1\u0a9b\1\u0a9c\1\uffff\1\u0a96\1\u0a95\1"+
            "\u0a98\34\uffff\1\u0a8f\u00fa\uffff\1\u0a83\1\uffff\1\u0a97"+
            "\1\u0a8e\3\uffff\1\u0a84\1\u0a93\1\u0a87\4\uffff\1\u0a92\1\u0a94"+
            "\1\u0a90\1\u0a91\1\u0a8a\1\u0a8b\1\u0a8c\1\u0a8d\1\u0a89\1\u0a88"+
            "\1\u0a85\1\u0a86",
            "\1\u0ab3\1\u0ab4\1\u0ab5\1\u0ab6\1\uffff\1\u0ab0\1\u0aaf\1"+
            "\u0ab2\34\uffff\1\u0aa9\u00fa\uffff\1\u0a9d\1\uffff\1\u0ab1"+
            "\1\u0aa8\3\uffff\1\u0a9e\1\u0aad\1\u0aa1\4\uffff\1\u0aac\1\u0aae"+
            "\1\u0aaa\1\u0aab\1\u0aa4\1\u0aa5\1\u0aa6\1\u0aa7\1\u0aa3\1\u0aa2"+
            "\1\u0a9f\1\u0aa0",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0acd\1\u0ace\1\u0acf\1\u0ad0\1\uffff\1\u0aca\1\u0ac9\1"+
            "\u0acc\34\uffff\1\u0ac3\u00fa\uffff\1\u0ab7\1\uffff\1\u0acb"+
            "\1\u0ac2\3\uffff\1\u0ab8\1\u0ac7\1\u0abb\4\uffff\1\u0ac6\1\u0ac8"+
            "\1\u0ac4\1\u0ac5\1\u0abe\1\u0abf\1\u0ac0\1\u0ac1\1\u0abd\1\u0abc"+
            "\1\u0ab9\1\u0aba",
            "\1\u0ae7\1\u0ae8\1\u0ae9\1\u0aea\1\uffff\1\u0ae3\1\u0ae2\1"+
            "\u0ae6\34\uffff\1\u0adc\u00fa\uffff\1\u0ae5\1\uffff\1\u0ae4"+
            "\1\u0adb\3\uffff\1\u0ad1\1\u0ae0\1\u0ad4\4\uffff\1\u0adf\1\u0ae1"+
            "\1\u0add\1\u0ade\1\u0ad7\1\u0ad8\1\u0ad9\1\u0ada\1\u0ad6\1\u0ad5"+
            "\1\u0ad2\1\u0ad3",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0b01\1\u0b02\1\u0b03\1\u0b04\1\uffff\1\u0afe\1\u0afd\1"+
            "\u0b00\34\uffff\1\u0af7\u00fa\uffff\1\16\1\uffff\1\u0aff\1\u0af6"+
            "\3\uffff\1\u0aec\1\u0afb\1\u0aef\4\uffff\1\u0afa\1\u0afc\1\u0af8"+
            "\1\u0af9\1\u0af2\1\u0af3\1\u0af4\1\u0af5\1\u0af1\1\u0af0\1\u0aed"+
            "\1\u0aee",
            "\1\u0b1b\1\u0b1c\1\u0b1d\1\u0b1e\1\uffff\1\u0b18\1\u0b17\1"+
            "\u0b1a\34\uffff\1\u0b11\u00fa\uffff\1\16\1\uffff\1\u0b19\1\u0b10"+
            "\3\uffff\1\u0b06\1\u0b15\1\u0b09\4\uffff\1\u0b14\1\u0b16\1\u0b12"+
            "\1\u0b13\1\u0b0c\1\u0b0d\1\u0b0e\1\u0b0f\1\u0b0b\1\u0b0a\1\u0b07"+
            "\1\u0b08",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0b34\1\u0b35\1\u0b36\1\u0b37\1\uffff\1\u0b31\1\u0b30\1"+
            "\u0b33\34\uffff\1\u0b2a\u00fa\uffff\1\u0b32\2\uffff\1\u0b29"+
            "\3\uffff\1\u0b1f\1\u0b2e\1\u0b22\4\uffff\1\u0b2d\1\u0b2f\1\u0b2b"+
            "\1\u0b2c\1\u0b25\1\u0b26\1\u0b27\1\u0b28\1\u0b24\1\u0b23\1\u0b20"+
            "\1\u0b21",
            "\1\u0b4d\1\u0b4e\1\u0b4f\1\u0b50\1\uffff\1\u0b4a\1\u0b49\1"+
            "\u0b4c\34\uffff\1\u0b43\u00fa\uffff\1\u0b4b\2\uffff\1\u0b42"+
            "\3\uffff\1\u0b38\1\u0b47\1\u0b3b\4\uffff\1\u0b46\1\u0b48\1\u0b44"+
            "\1\u0b45\1\u0b3e\1\u0b3f\1\u0b40\1\u0b41\1\u0b3d\1\u0b3c\1\u0b39"+
            "\1\u0b3a",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0b68\1\u0b69\1\u0b6a\1\u0b6b\1\uffff\1\u0b64\1\u0b63\1"+
            "\u0b67\3\uffff\1\u0b66\30\uffff\1\u0b5d\u00fa\uffff\1\16\1\uffff"+
            "\1\u0b65\1\u0b5c\3\uffff\1\u0b52\1\u0b61\1\u0b55\4\uffff\1\u0b60"+
            "\1\u0b62\1\u0b5e\1\u0b5f\1\u0b58\1\u0b59\1\u0b5a\1\u0b5b\1\u0b57"+
            "\1\u0b56\1\u0b53\1\u0b54",
            "\1\u0b83\1\u0b84\1\u0b85\1\u0b86\1\uffff\1\u0b7f\1\u0b7e\1"+
            "\u0b82\3\uffff\1\u0b81\30\uffff\1\u0b78\u00fa\uffff\1\16\1\uffff"+
            "\1\u0b80\1\u0b77\3\uffff\1\u0b6d\1\u0b7c\1\u0b70\4\uffff\1\u0b7b"+
            "\1\u0b7d\1\u0b79\1\u0b7a\1\u0b73\1\u0b74\1\u0b75\1\u0b76\1\u0b72"+
            "\1\u0b71\1\u0b6e\1\u0b6f",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0b9c\1\u0b9d\1\u0b9e\1\u0b9f\1\uffff\1\u0b99\1\u0b98\1"+
            "\u0b9b\34\uffff\1\u0b92\u00fa\uffff\1\u0b9a\2\uffff\1\u0b91"+
            "\3\uffff\1\u0b87\1\u0b96\1\u0b8a\4\uffff\1\u0b95\1\u0b97\1\u0b93"+
            "\1\u0b94\1\u0b8d\1\u0b8e\1\u0b8f\1\u0b90\1\u0b8c\1\u0b8b\1\u0b88"+
            "\1\u0b89",
            "\1\u0bb5\1\u0bb6\1\u0bb7\1\u0bb8\1\uffff\1\u0bb3\1\u0bb2\1"+
            "\u0bb4\34\uffff\1\u0bac\u00fa\uffff\1\u0ba0\2\uffff\1\u0bab"+
            "\3\uffff\1\u0ba1\1\u0bb0\1\u0ba4\4\uffff\1\u0baf\1\u0bb1\1\u0bad"+
            "\1\u0bae\1\u0ba7\1\u0ba8\1\u0ba9\1\u0baa\1\u0ba6\1\u0ba5\1\u0ba2"+
            "\1\u0ba3",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] DFA197_eot = DFA.unpackEncodedString(DFA197_eotS);
    static final short[] DFA197_eof = DFA.unpackEncodedString(DFA197_eofS);
    static final char[] DFA197_min = DFA.unpackEncodedStringToUnsignedChars(DFA197_minS);
    static final char[] DFA197_max = DFA.unpackEncodedStringToUnsignedChars(DFA197_maxS);
    static final short[] DFA197_accept = DFA.unpackEncodedString(DFA197_acceptS);
    static final short[] DFA197_special = DFA.unpackEncodedString(DFA197_specialS);
    static final short[][] DFA197_transition;
    static {
        int numStates = DFA197_transitionS.length;
        DFA197_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA197_transition[i] = DFA.unpackEncodedString(DFA197_transitionS[i]);
        }
    }
    class DFA197 extends DFA {
        public DFA197(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 197;
            this.eot = DFA197_eot;
            this.eof = DFA197_eof;
            this.min = DFA197_min;
            this.max = DFA197_max;
            this.accept = DFA197_accept;
            this.special = DFA197_special;
            this.transition = DFA197_transition;
        }
        public String getDescription() {
            return "1298:1: unaryExpression : ( MINUS eventProperty -> ^( UNARY_MINUS eventProperty ) | constant | substitution | LPAREN expression RPAREN (d= DOT libFunctionNoClass (d= DOT libFunctionNoClass )* )? -> {$d != null}? ^( DOT_EXPR expression ( libFunctionNoClass )+ ) -> expression | eventPropertyOrLibFunction | ( builtinFunc )=> ( builtinFunc ) | arrayExpression | subSelectExpression (d= DOT libFunctionNoClass (d= DOT libFunctionNoClass )* )? -> {$d != null}? ^( DOT_EXPR subSelectExpression ( libFunctionNoClass )+ ) -> subSelectExpression | existsSubSelectExpression );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
  case 0: 
    s = sst_0();
    if ( s>=0 ) return s;
    break;
  case 1: 
    s = sst_1();
    if ( s>=0 ) return s;
    break;
  case 2: 
    s = sst_2();
    if ( s>=0 ) return s;
    break;
  case 3: 
    s = sst_3();
    if ( s>=0 ) return s;
    break;
  case 4: 
    s = sst_4();
    if ( s>=0 ) return s;
    break;
  case 5: 
    s = sst_5();
    if ( s>=0 ) return s;
    break;
  case 6: 
    s = sst_6();
    if ( s>=0 ) return s;
    break;
  case 7: 
    s = sst_7();
    if ( s>=0 ) return s;
    break;
  case 8: 
    s = sst_8();
    if ( s>=0 ) return s;
    break;
  case 9: 
    s = sst_9();
    if ( s>=0 ) return s;
    break;
  case 10: 
    s = sst_10();
    if ( s>=0 ) return s;
    break;
  case 11: 
    s = sst_11();
    if ( s>=0 ) return s;
    break;
  case 12: 
    s = sst_12();
    if ( s>=0 ) return s;
    break;
  case 13: 
    s = sst_13();
    if ( s>=0 ) return s;
    break;
  case 14: 
    s = sst_14();
    if ( s>=0 ) return s;
    break;
  case 15: 
    s = sst_15();
    if ( s>=0 ) return s;
    break;
  case 16: 
    s = sst_16();
    if ( s>=0 ) return s;
    break;
  case 17: 
    s = sst_17();
    if ( s>=0 ) return s;
    break;
  case 18: 
    s = sst_18();
    if ( s>=0 ) return s;
    break;
  case 19: 
    s = sst_19();
    if ( s>=0 ) return s;
    break;
  case 20: 
    s = sst_20();
    if ( s>=0 ) return s;
    break;
  case 21: 
    s = sst_21();
    if ( s>=0 ) return s;
    break;
  case 22: 
    s = sst_22();
    if ( s>=0 ) return s;
    break;
  case 23: 
    s = sst_23();
    if ( s>=0 ) return s;
    break;
  case 24: 
    s = sst_24();
    if ( s>=0 ) return s;
    break;
  case 25: 
    s = sst_25();
    if ( s>=0 ) return s;
    break;
  case 26: 
    s = sst_26();
    if ( s>=0 ) return s;
    break;
  case 27: 
    s = sst_27();
    if ( s>=0 ) return s;
    break;
  case 28: 
    s = sst_28();
    if ( s>=0 ) return s;
    break;
  case 29: 
    s = sst_29();
    if ( s>=0 ) return s;
    break;
  case 30: 
    s = sst_30();
    if ( s>=0 ) return s;
    break;
  case 31: 
    s = sst_31();
    if ( s>=0 ) return s;
    break;
  case 32: 
    s = sst_32();
    if ( s>=0 ) return s;
    break;
  case 33: 
    s = sst_33();
    if ( s>=0 ) return s;
    break;
  case 34: 
    s = sst_34();
    if ( s>=0 ) return s;
    break;
  case 35: 
    s = sst_35();
    if ( s>=0 ) return s;
    break;
  case 36: 
    s = sst_36();
    if ( s>=0 ) return s;
    break;
  case 37: 
    s = sst_37();
    if ( s>=0 ) return s;
    break;
  case 38: 
    s = sst_38();
    if ( s>=0 ) return s;
    break;
  case 39: 
    s = sst_39();
    if ( s>=0 ) return s;
    break;
  case 40: 
    s = sst_40();
    if ( s>=0 ) return s;
    break;
  case 41: 
    s = sst_41();
    if ( s>=0 ) return s;
    break;
  case 42: 
    s = sst_42();
    if ( s>=0 ) return s;
    break;
  case 43: 
    s = sst_43();
    if ( s>=0 ) return s;
    break;
  case 44: 
    s = sst_44();
    if ( s>=0 ) return s;
    break;
  case 45: 
    s = sst_45();
    if ( s>=0 ) return s;
    break;
  case 46: 
    s = sst_46();
    if ( s>=0 ) return s;
    break;
  case 47: 
    s = sst_47();
    if ( s>=0 ) return s;
    break;
  case 48: 
    s = sst_48();
    if ( s>=0 ) return s;
    break;
  case 49: 
    s = sst_49();
    if ( s>=0 ) return s;
    break;
  case 50: 
    s = sst_50();
    if ( s>=0 ) return s;
    break;
  case 51: 
    s = sst_51();
    if ( s>=0 ) return s;
    break;
  case 52: 
    s = sst_52();
    if ( s>=0 ) return s;
    break;
  case 53: 
    s = sst_53();
    if ( s>=0 ) return s;
    break;
  case 54: 
    s = sst_54();
    if ( s>=0 ) return s;
    break;
  case 55: 
    s = sst_55();
    if ( s>=0 ) return s;
    break;
  case 56: 
    s = sst_56();
    if ( s>=0 ) return s;
    break;
  case 57: 
    s = sst_57();
    if ( s>=0 ) return s;
    break;
  case 58: 
    s = sst_58();
    if ( s>=0 ) return s;
    break;
  case 59: 
    s = sst_59();
    if ( s>=0 ) return s;
    break;
  case 60: 
    s = sst_60();
    if ( s>=0 ) return s;
    break;
  case 61: 
    s = sst_61();
    if ( s>=0 ) return s;
    break;
  case 62: 
    s = sst_62();
    if ( s>=0 ) return s;
    break;
  case 63: 
    s = sst_63();
    if ( s>=0 ) return s;
    break;
  case 64: 
    s = sst_64();
    if ( s>=0 ) return s;
    break;
  case 65: 
    s = sst_65();
    if ( s>=0 ) return s;
    break;
  case 66: 
    s = sst_66();
    if ( s>=0 ) return s;
    break;
  case 67: 
    s = sst_67();
    if ( s>=0 ) return s;
    break;
  case 68: 
    s = sst_68();
    if ( s>=0 ) return s;
    break;
  case 69: 
    s = sst_69();
    if ( s>=0 ) return s;
    break;
  case 70: 
    s = sst_70();
    if ( s>=0 ) return s;
    break;
  case 71: 
    s = sst_71();
    if ( s>=0 ) return s;
    break;
  }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 197, _s, input);
            error(nvae);
            throw nvae;
        }
  private int sst_0() {
    int s = -1;
                        int LA197_0 = input.LA(1);
                        int index197_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA197_0==MINUS) ) {s = 1;}
                        else if ( ((LA197_0>=BOOLEAN_TRUE && LA197_0<=VALUE_NULL)||LA197_0==NUM_DOUBLE||LA197_0==PLUS||(LA197_0>=STRING_LITERAL && LA197_0<=QUOTED_STRING_LITERAL)||LA197_0==NUM_INT||(LA197_0>=NUM_LONG && LA197_0<=NUM_FLOAT)) ) {s = 2;}
                        else if ( (LA197_0==QUESTION) ) {s = 12;}
                        else if ( (LA197_0==LPAREN) ) {s = 13;}
                        else if ( (LA197_0==ESCAPE||LA197_0==EVERY_EXPR||LA197_0==WHERE||(LA197_0>=MAX && LA197_0<=MIN)||LA197_0==OUTER||(LA197_0>=JOIN && LA197_0<=FULL)||LA197_0==EVENTS||(LA197_0>=UNIDIRECTIONAL && LA197_0<=METADATASQL)||(LA197_0>=WEEKDAY && LA197_0<=LW)||LA197_0==SNAPSHOT||(LA197_0>=VARIABLE && LA197_0<=INDEX)||(LA197_0>=DEFINE && LA197_0<=MATCHES)||LA197_0==WHILE||(LA197_0>=MERGE && LA197_0<=MATCHED)||LA197_0==IDENT||LA197_0==TICKED_STRING_LITERAL) ) {s = 14;}
                        else if ( (LA197_0==COUNT) ) {s = 17;}
                        else if ( (LA197_0==SUM) ) {s = 20;}
                        else if ( (LA197_0==AVG) ) {s = 21;}
                        else if ( (LA197_0==COALESCE) ) {s = 24;}
                        else if ( (LA197_0==MEDIAN) ) {s = 25;}
                        else if ( (LA197_0==STDDEV) ) {s = 26;}
                        else if ( (LA197_0==AVEDEV) ) {s = 27;}
                        else if ( (LA197_0==FIRST) ) {s = 29;}
                        else if ( (LA197_0==LAST) ) {s = 30;}
                        else if ( (LA197_0==PREVIOUS) ) {s = 41;}
                        else if ( (LA197_0==PREVIOUSTAIL) ) {s = 42;}
                        else if ( (LA197_0==PRIOR) ) {s = 43;}
                        else if ( (LA197_0==INSTANCEOF) ) {s = 46;}
                        else if ( (LA197_0==TYPEOF) ) {s = 47;}
                        else if ( (LA197_0==CAST) ) {s = 48;}
                        else if ( (LA197_0==WINDOW) ) {s = 52;}
                        else if ( (LA197_0==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 62;}
                        else if ( (LA197_0==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 63;}
                        else if ( (LA197_0==EXISTS) ) {s = 64;}
                        else if ( (LA197_0==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 65;}
                        else if ( (LA197_0==LCURLY) ) {s = 66;}
                        input.seek(index197_0);
    return s;
  }
  private int sst_1() {
    int s = -1;
                        int LA197_187 = input.LA(1);
                        int index197_187 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA197_187==STRING_LITERAL) ) {s = 1148;}
                        else if ( (LA197_187==QUOTED_STRING_LITERAL) ) {s = 1149;}
                        else if ( (LA197_187==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1150;}
                        else if ( (LA197_187==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1151;}
                        else if ( (LA197_187==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1152;}
                        else if ( (LA197_187==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1153;}
                        else if ( (LA197_187==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1154;}
                        else if ( (LA197_187==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1155;}
                        else if ( (LA197_187==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1156;}
                        else if ( (LA197_187==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1157;}
                        else if ( (LA197_187==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1158;}
                        else if ( (LA197_187==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1159;}
                        else if ( (LA197_187==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1160;}
                        else if ( (LA197_187==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1161;}
                        else if ( (LA197_187==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1162;}
                        else if ( (LA197_187==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1163;}
                        else if ( (LA197_187==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1164;}
                        else if ( (LA197_187==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1165;}
                        else if ( (LA197_187==AT) && (synpred3_EsperEPL2Grammar())) {s = 1166;}
                        else if ( (LA197_187==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1167;}
                        else if ( (LA197_187==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1168;}
                        else if ( (LA197_187==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1169;}
                        else if ( (LA197_187==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1170;}
                        else if ( (LA197_187==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1171;}
                        else if ( (LA197_187==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1172;}
                        else if ( (LA197_187==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1173;}
                        else if ( (LA197_187==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1174;}
                        else if ( (LA197_187==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1175;}
                        else if ( (LA197_187==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1176;}
                        else if ( (LA197_187==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1177;}
                        else if ( (LA197_187==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1178;}
                        else if ( (LA197_187==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1179;}
                        else if ( (LA197_187==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1180;}
                        else if ( (LA197_187==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1181;}
                        else if ( (LA197_187==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1182;}
                        else if ( (LA197_187==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1183;}
                        else if ( (LA197_187==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1184;}
                        else if ( (LA197_187==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1185;}
                        else if ( (LA197_187==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1186;}
                        else if ( (LA197_187==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1187;}
                        else if ( (LA197_187==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1188;}
                        else if ( (LA197_187==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1189;}
                        else if ( (LA197_187==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1190;}
                        else if ( (LA197_187==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1191;}
                        else if ( (LA197_187==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1192;}
                        else if ( (LA197_187==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1193;}
                        else if ( (LA197_187==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1194;}
                        else if ( (LA197_187==LW) && (synpred3_EsperEPL2Grammar())) {s = 1195;}
                        else if ( (LA197_187==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1196;}
                        else if ( (LA197_187==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1197;}
                        else if ( (LA197_187==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1198;}
                        else if ( (LA197_187==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1199;}
                        else if ( (LA197_187==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1200;}
                        else if ( (LA197_187==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1201;}
                        else if ( (LA197_187==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1202;}
                        else if ( (LA197_187==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1203;}
                        else if ( (LA197_187==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1204;}
                        else if ( (LA197_187==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1205;}
                        else if ( (LA197_187==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1206;}
                        else if ( (LA197_187==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1207;}
                        else if ( (LA197_187==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1208;}
                        else if ( (LA197_187==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1209;}
                        else if ( (LA197_187==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1210;}
                        else if ( (LA197_187==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 1211;}
                        else if ( (LA197_187==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1212;}
                        else if ( (LA197_187==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1213;}
                        else if ( (LA197_187==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1214;}
                        else if ( (LA197_187==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1215;}
                        else if ( (LA197_187==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1216;}
                        else if ( (LA197_187==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1217;}
                        else if ( (LA197_187==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1218;}
                        input.seek(index197_187);
    return s;
  }
  private int sst_2() {
    int s = -1;
                        int LA197_247 = input.LA(1);
                        int index197_247 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA197_247==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1219;}
                        else if ( (LA197_247==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1220;}
                        else if ( (LA197_247==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1221;}
                        else if ( (LA197_247==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1222;}
                        else if ( (LA197_247==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1223;}
                        else if ( (LA197_247==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1224;}
                        else if ( (LA197_247==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1225;}
                        else if ( (LA197_247==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1226;}
                        else if ( (LA197_247==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1227;}
                        else if ( (LA197_247==STRING_LITERAL) ) {s = 1228;}
                        else if ( (LA197_247==QUOTED_STRING_LITERAL) ) {s = 1229;}
                        else if ( (LA197_247==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1230;}
                        else if ( (LA197_247==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1231;}
                        else if ( (LA197_247==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1232;}
                        else if ( (LA197_247==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1233;}
                        else if ( (LA197_247==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1234;}
                        else if ( (LA197_247==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1235;}
                        else if ( (LA197_247==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1236;}
                        else if ( (LA197_247==AT) && (synpred3_EsperEPL2Grammar())) {s = 1237;}
                        else if ( (LA197_247==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1238;}
                        else if ( (LA197_247==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1239;}
                        else if ( (LA197_247==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1240;}
                        else if ( (LA197_247==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1241;}
                        else if ( (LA197_247==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1242;}
                        else if ( (LA197_247==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1243;}
                        else if ( (LA197_247==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1244;}
                        else if ( (LA197_247==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1245;}
                        else if ( (LA197_247==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1246;}
                        else if ( (LA197_247==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1247;}
                        else if ( (LA197_247==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1248;}
                        else if ( (LA197_247==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1249;}
                        else if ( (LA197_247==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1250;}
                        else if ( (LA197_247==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1251;}
                        else if ( (LA197_247==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1252;}
                        else if ( (LA197_247==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1253;}
                        else if ( (LA197_247==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1254;}
                        else if ( (LA197_247==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1255;}
                        else if ( (LA197_247==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1256;}
                        else if ( (LA197_247==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1257;}
                        else if ( (LA197_247==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1258;}
                        else if ( (LA197_247==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1259;}
                        else if ( (LA197_247==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1260;}
                        else if ( (LA197_247==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1261;}
                        else if ( (LA197_247==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1262;}
                        else if ( (LA197_247==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1263;}
                        else if ( (LA197_247==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1264;}
                        else if ( (LA197_247==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1265;}
                        else if ( (LA197_247==LW) && (synpred3_EsperEPL2Grammar())) {s = 1266;}
                        else if ( (LA197_247==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1267;}
                        else if ( (LA197_247==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1268;}
                        else if ( (LA197_247==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1269;}
                        else if ( (LA197_247==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1270;}
                        else if ( (LA197_247==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1271;}
                        else if ( (LA197_247==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1272;}
                        else if ( (LA197_247==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1273;}
                        else if ( (LA197_247==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1274;}
                        else if ( (LA197_247==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1275;}
                        else if ( (LA197_247==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1276;}
                        else if ( (LA197_247==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1277;}
                        else if ( (LA197_247==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1278;}
                        else if ( (LA197_247==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1279;}
                        else if ( (LA197_247==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1280;}
                        else if ( (LA197_247==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1281;}
                        else if ( (LA197_247==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 1282;}
                        else if ( (LA197_247==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1283;}
                        else if ( (LA197_247==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1284;}
                        else if ( (LA197_247==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1285;}
                        else if ( (LA197_247==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1286;}
                        else if ( (LA197_247==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1287;}
                        else if ( (LA197_247==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1288;}
                        input.seek(index197_247);
    return s;
  }
  private int sst_3() {
    int s = -1;
                        int LA197_307 = input.LA(1);
                        int index197_307 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA197_307==STRING_LITERAL) ) {s = 1289;}
                        else if ( (LA197_307==QUOTED_STRING_LITERAL) ) {s = 1290;}
                        else if ( (LA197_307==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1291;}
                        else if ( (LA197_307==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1292;}
                        else if ( (LA197_307==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1293;}
                        else if ( (LA197_307==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1294;}
                        else if ( (LA197_307==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1295;}
                        else if ( (LA197_307==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1296;}
                        else if ( (LA197_307==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1297;}
                        else if ( (LA197_307==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1298;}
                        else if ( (LA197_307==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1299;}
                        else if ( (LA197_307==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1300;}
                        else if ( (LA197_307==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1301;}
                        else if ( (LA197_307==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1302;}
                        else if ( (LA197_307==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1303;}
                        else if ( (LA197_307==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1304;}
                        else if ( (LA197_307==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1305;}
                        else if ( (LA197_307==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1306;}
                        else if ( (LA197_307==AT) && (synpred3_EsperEPL2Grammar())) {s = 1307;}
                        else if ( (LA197_307==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1308;}
                        else if ( (LA197_307==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1309;}
                        else if ( (LA197_307==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1310;}
                        else if ( (LA197_307==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1311;}
                        else if ( (LA197_307==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1312;}
                        else if ( (LA197_307==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1313;}
                        else if ( (LA197_307==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1314;}
                        else if ( (LA197_307==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1315;}
                        else if ( (LA197_307==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1316;}
                        else if ( (LA197_307==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1317;}
                        else if ( (LA197_307==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1318;}
                        else if ( (LA197_307==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1319;}
                        else if ( (LA197_307==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1320;}
                        else if ( (LA197_307==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1321;}
                        else if ( (LA197_307==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1322;}
                        else if ( (LA197_307==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1323;}
                        else if ( (LA197_307==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1324;}
                        else if ( (LA197_307==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1325;}
                        else if ( (LA197_307==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1326;}
                        else if ( (LA197_307==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1327;}
                        else if ( (LA197_307==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1328;}
                        else if ( (LA197_307==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1329;}
                        else if ( (LA197_307==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1330;}
                        else if ( (LA197_307==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1331;}
                        else if ( (LA197_307==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1332;}
                        else if ( (LA197_307==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1333;}
                        else if ( (LA197_307==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1334;}
                        else if ( (LA197_307==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1335;}
                        else if ( (LA197_307==LW) && (synpred3_EsperEPL2Grammar())) {s = 1336;}
                        else if ( (LA197_307==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1337;}
                        else if ( (LA197_307==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1338;}
                        else if ( (LA197_307==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1339;}
                        else if ( (LA197_307==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1340;}
                        else if ( (LA197_307==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1341;}
                        else if ( (LA197_307==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1342;}
                        else if ( (LA197_307==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1343;}
                        else if ( (LA197_307==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1344;}
                        else if ( (LA197_307==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1345;}
                        else if ( (LA197_307==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1346;}
                        else if ( (LA197_307==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1347;}
                        else if ( (LA197_307==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1348;}
                        else if ( (LA197_307==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1349;}
                        else if ( (LA197_307==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1350;}
                        else if ( (LA197_307==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1351;}
                        else if ( (LA197_307==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 1352;}
                        else if ( (LA197_307==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1353;}
                        else if ( (LA197_307==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1354;}
                        else if ( (LA197_307==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1355;}
                        else if ( (LA197_307==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1356;}
                        else if ( (LA197_307==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1357;}
                        else if ( (LA197_307==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1358;}
                        input.seek(index197_307);
    return s;
  }
  private int sst_4() {
    int s = -1;
                        int LA197_367 = input.LA(1);
                        int index197_367 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA197_367==STRING_LITERAL) ) {s = 1359;}
                        else if ( (LA197_367==QUOTED_STRING_LITERAL) ) {s = 1360;}
                        else if ( (LA197_367==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1361;}
                        else if ( (LA197_367==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1362;}
                        else if ( (LA197_367==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1363;}
                        else if ( (LA197_367==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1364;}
                        else if ( (LA197_367==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1365;}
                        else if ( (LA197_367==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1366;}
                        else if ( (LA197_367==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1367;}
                        else if ( (LA197_367==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1368;}
                        else if ( (LA197_367==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1369;}
                        else if ( (LA197_367==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1370;}
                        else if ( (LA197_367==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1371;}
                        else if ( (LA197_367==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1372;}
                        else if ( (LA197_367==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1373;}
                        else if ( (LA197_367==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1374;}
                        else if ( (LA197_367==AT) && (synpred3_EsperEPL2Grammar())) {s = 1375;}
                        else if ( (LA197_367==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1376;}
                        else if ( (LA197_367==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1377;}
                        else if ( (LA197_367==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1378;}
                        else if ( (LA197_367==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1379;}
                        else if ( (LA197_367==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1380;}
                        else if ( (LA197_367==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1381;}
                        else if ( (LA197_367==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1382;}
                        else if ( (LA197_367==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1383;}
                        else if ( (LA197_367==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1384;}
                        else if ( (LA197_367==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1385;}
                        else if ( (LA197_367==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1386;}
                        else if ( (LA197_367==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1387;}
                        else if ( (LA197_367==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1388;}
                        else if ( (LA197_367==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1389;}
                        else if ( (LA197_367==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1390;}
                        else if ( (LA197_367==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1391;}
                        else if ( (LA197_367==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1392;}
                        else if ( (LA197_367==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1393;}
                        else if ( (LA197_367==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1394;}
                        else if ( (LA197_367==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1395;}
                        else if ( (LA197_367==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1396;}
                        else if ( (LA197_367==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1397;}
                        else if ( (LA197_367==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1398;}
                        else if ( (LA197_367==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1399;}
                        else if ( (LA197_367==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1400;}
                        else if ( (LA197_367==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1401;}
                        else if ( (LA197_367==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1402;}
                        else if ( (LA197_367==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1403;}
                        else if ( (LA197_367==LW) && (synpred3_EsperEPL2Grammar())) {s = 1404;}
                        else if ( (LA197_367==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1405;}
                        else if ( (LA197_367==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1406;}
                        else if ( (LA197_367==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1407;}
                        else if ( (LA197_367==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1408;}
                        else if ( (LA197_367==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1409;}
                        else if ( (LA197_367==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1410;}
                        else if ( (LA197_367==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1411;}
                        else if ( (LA197_367==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1412;}
                        else if ( (LA197_367==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1413;}
                        else if ( (LA197_367==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1414;}
                        else if ( (LA197_367==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1415;}
                        else if ( (LA197_367==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1416;}
                        else if ( (LA197_367==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1417;}
                        else if ( (LA197_367==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1418;}
                        else if ( (LA197_367==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1419;}
                        else if ( (LA197_367==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 1420;}
                        else if ( (LA197_367==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1421;}
                        else if ( (LA197_367==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1422;}
                        else if ( (LA197_367==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1423;}
                        else if ( (LA197_367==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1424;}
                        else if ( (LA197_367==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1425;}
                        else if ( (LA197_367==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1426;}
                        input.seek(index197_367);
    return s;
  }
  private int sst_5() {
    int s = -1;
                        int LA197_427 = input.LA(1);
                        int index197_427 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA197_427==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1427;}
                        else if ( (LA197_427==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1428;}
                        else if ( (LA197_427==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1429;}
                        else if ( (LA197_427==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1430;}
                        else if ( (LA197_427==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1431;}
                        else if ( (LA197_427==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1432;}
                        else if ( (LA197_427==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1433;}
                        else if ( (LA197_427==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1434;}
                        else if ( (LA197_427==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1435;}
                        else if ( (LA197_427==STRING_LITERAL) ) {s = 1436;}
                        else if ( (LA197_427==QUOTED_STRING_LITERAL) ) {s = 1437;}
                        else if ( (LA197_427==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1438;}
                        else if ( (LA197_427==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1439;}
                        else if ( (LA197_427==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1440;}
                        else if ( (LA197_427==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1441;}
                        else if ( (LA197_427==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1442;}
                        else if ( (LA197_427==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1443;}
                        else if ( (LA197_427==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1444;}
                        else if ( (LA197_427==AT) && (synpred3_EsperEPL2Grammar())) {s = 1445;}
                        else if ( (LA197_427==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1446;}
                        else if ( (LA197_427==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1447;}
                        else if ( (LA197_427==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1448;}
                        else if ( (LA197_427==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1449;}
                        else if ( (LA197_427==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1450;}
                        else if ( (LA197_427==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1451;}
                        else if ( (LA197_427==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1452;}
                        else if ( (LA197_427==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1453;}
                        else if ( (LA197_427==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1454;}
                        else if ( (LA197_427==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1455;}
                        else if ( (LA197_427==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1456;}
                        else if ( (LA197_427==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1457;}
                        else if ( (LA197_427==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1458;}
                        else if ( (LA197_427==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1459;}
                        else if ( (LA197_427==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1460;}
                        else if ( (LA197_427==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1461;}
                        else if ( (LA197_427==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1462;}
                        else if ( (LA197_427==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1463;}
                        else if ( (LA197_427==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1464;}
                        else if ( (LA197_427==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1465;}
                        else if ( (LA197_427==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1466;}
                        else if ( (LA197_427==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1467;}
                        else if ( (LA197_427==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1468;}
                        else if ( (LA197_427==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1469;}
                        else if ( (LA197_427==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1470;}
                        else if ( (LA197_427==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1471;}
                        else if ( (LA197_427==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1472;}
                        else if ( (LA197_427==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1473;}
                        else if ( (LA197_427==LW) && (synpred3_EsperEPL2Grammar())) {s = 1474;}
                        else if ( (LA197_427==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1475;}
                        else if ( (LA197_427==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1476;}
                        else if ( (LA197_427==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1477;}
                        else if ( (LA197_427==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1478;}
                        else if ( (LA197_427==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1479;}
                        else if ( (LA197_427==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1480;}
                        else if ( (LA197_427==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1481;}
                        else if ( (LA197_427==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1482;}
                        else if ( (LA197_427==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1483;}
                        else if ( (LA197_427==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1484;}
                        else if ( (LA197_427==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1485;}
                        else if ( (LA197_427==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1486;}
                        else if ( (LA197_427==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1487;}
                        else if ( (LA197_427==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1488;}
                        else if ( (LA197_427==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1489;}
                        else if ( (LA197_427==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 1490;}
                        else if ( (LA197_427==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1491;}
                        else if ( (LA197_427==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1492;}
                        else if ( (LA197_427==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1493;}
                        else if ( (LA197_427==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1494;}
                        else if ( (LA197_427==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1495;}
                        else if ( (LA197_427==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1496;}
                        input.seek(index197_427);
    return s;
  }
  private int sst_6() {
    int s = -1;
                        int LA197_487 = input.LA(1);
                        int index197_487 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA197_487==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1497;}
                        else if ( (LA197_487==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1498;}
                        else if ( (LA197_487==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1499;}
                        else if ( (LA197_487==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1500;}
                        else if ( (LA197_487==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1501;}
                        else if ( (LA197_487==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1502;}
                        else if ( (LA197_487==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1503;}
                        else if ( (LA197_487==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1504;}
                        else if ( (LA197_487==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1505;}
                        else if ( (LA197_487==STRING_LITERAL) ) {s = 1506;}
                        else if ( (LA197_487==QUOTED_STRING_LITERAL) ) {s = 1507;}
                        else if ( (LA197_487==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1508;}
                        else if ( (LA197_487==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1509;}
                        else if ( (LA197_487==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1510;}
                        else if ( (LA197_487==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1511;}
                        else if ( (LA197_487==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1512;}
                        else if ( (LA197_487==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1513;}
                        else if ( (LA197_487==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1514;}
                        else if ( (LA197_487==AT) && (synpred3_EsperEPL2Grammar())) {s = 1515;}
                        else if ( (LA197_487==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1516;}
                        else if ( (LA197_487==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1517;}
                        else if ( (LA197_487==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1518;}
                        else if ( (LA197_487==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1519;}
                        else if ( (LA197_487==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1520;}
                        else if ( (LA197_487==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1521;}
                        else if ( (LA197_487==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1522;}
                        else if ( (LA197_487==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1523;}
                        else if ( (LA197_487==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1524;}
                        else if ( (LA197_487==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1525;}
                        else if ( (LA197_487==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1526;}
                        else if ( (LA197_487==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1527;}
                        else if ( (LA197_487==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1528;}
                        else if ( (LA197_487==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1529;}
                        else if ( (LA197_487==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1530;}
                        else if ( (LA197_487==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1531;}
                        else if ( (LA197_487==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1532;}
                        else if ( (LA197_487==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1533;}
                        else if ( (LA197_487==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1534;}
                        else if ( (LA197_487==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1535;}
                        else if ( (LA197_487==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1536;}
                        else if ( (LA197_487==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1537;}
                        else if ( (LA197_487==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1538;}
                        else if ( (LA197_487==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1539;}
                        else if ( (LA197_487==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1540;}
                        else if ( (LA197_487==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1541;}
                        else if ( (LA197_487==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1542;}
                        else if ( (LA197_487==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1543;}
                        else if ( (LA197_487==LW) && (synpred3_EsperEPL2Grammar())) {s = 1544;}
                        else if ( (LA197_487==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1545;}
                        else if ( (LA197_487==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1546;}
                        else if ( (LA197_487==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1547;}
                        else if ( (LA197_487==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1548;}
                        else if ( (LA197_487==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1549;}
                        else if ( (LA197_487==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1550;}
                        else if ( (LA197_487==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1551;}
                        else if ( (LA197_487==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1552;}
                        else if ( (LA197_487==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1553;}
                        else if ( (LA197_487==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1554;}
                        else if ( (LA197_487==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1555;}
                        else if ( (LA197_487==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1556;}
                        else if ( (LA197_487==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1557;}
                        else if ( (LA197_487==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1558;}
                        else if ( (LA197_487==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1559;}
                        else if ( (LA197_487==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 1560;}
                        else if ( (LA197_487==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1561;}
                        else if ( (LA197_487==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1562;}
                        else if ( (LA197_487==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1563;}
                        else if ( (LA197_487==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1564;}
                        else if ( (LA197_487==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1565;}
                        else if ( (LA197_487==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1566;}
                        input.seek(index197_487);
    return s;
  }
  private int sst_7() {
    int s = -1;
                        int LA197_547 = input.LA(1);
                        int index197_547 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA197_547==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1567;}
                        else if ( (LA197_547==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1568;}
                        else if ( (LA197_547==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1569;}
                        else if ( (LA197_547==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1570;}
                        else if ( (LA197_547==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1571;}
                        else if ( (LA197_547==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1572;}
                        else if ( (LA197_547==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1573;}
                        else if ( (LA197_547==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1574;}
                        else if ( (LA197_547==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1575;}
                        else if ( (LA197_547==STRING_LITERAL) ) {s = 1576;}
                        else if ( (LA197_547==QUOTED_STRING_LITERAL) ) {s = 1577;}
                        else if ( (LA197_547==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1578;}
                        else if ( (LA197_547==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1579;}
                        else if ( (LA197_547==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1580;}
                        else if ( (LA197_547==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1581;}
                        else if ( (LA197_547==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1582;}
                        else if ( (LA197_547==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1583;}
                        else if ( (LA197_547==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1584;}
                        else if ( (LA197_547==AT) && (synpred3_EsperEPL2Grammar())) {s = 1585;}
                        else if ( (LA197_547==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1586;}
                        else if ( (LA197_547==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1587;}
                        else if ( (LA197_547==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1588;}
                        else if ( (LA197_547==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1589;}
                        else if ( (LA197_547==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1590;}
                        else if ( (LA197_547==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1591;}
                        else if ( (LA197_547==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1592;}
                        else if ( (LA197_547==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1593;}
                        else if ( (LA197_547==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1594;}
                        else if ( (LA197_547==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1595;}
                        else if ( (LA197_547==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1596;}
                        else if ( (LA197_547==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1597;}
                        else if ( (LA197_547==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1598;}
                        else if ( (LA197_547==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1599;}
                        else if ( (LA197_547==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1600;}
                        else if ( (LA197_547==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1601;}
                        else if ( (LA197_547==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1602;}
                        else if ( (LA197_547==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1603;}
                        else if ( (LA197_547==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1604;}
                        else if ( (LA197_547==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1605;}
                        else if ( (LA197_547==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1606;}
                        else if ( (LA197_547==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1607;}
                        else if ( (LA197_547==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1608;}
                        else if ( (LA197_547==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1609;}
                        else if ( (LA197_547==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1610;}
                        else if ( (LA197_547==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1611;}
                        else if ( (LA197_547==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1612;}
                        else if ( (LA197_547==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1613;}
                        else if ( (LA197_547==LW) && (synpred3_EsperEPL2Grammar())) {s = 1614;}
                        else if ( (LA197_547==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1615;}
                        else if ( (LA197_547==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1616;}
                        else if ( (LA197_547==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1617;}
                        else if ( (LA197_547==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1618;}
                        else if ( (LA197_547==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1619;}
                        else if ( (LA197_547==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1620;}
                        else if ( (LA197_547==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1621;}
                        else if ( (LA197_547==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1622;}
                        else if ( (LA197_547==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1623;}
                        else if ( (LA197_547==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1624;}
                        else if ( (LA197_547==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1625;}
                        else if ( (LA197_547==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1626;}
                        else if ( (LA197_547==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1627;}
                        else if ( (LA197_547==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1628;}
                        else if ( (LA197_547==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1629;}
                        else if ( (LA197_547==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 1630;}
                        else if ( (LA197_547==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1631;}
                        else if ( (LA197_547==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1632;}
                        else if ( (LA197_547==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1633;}
                        else if ( (LA197_547==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1634;}
                        else if ( (LA197_547==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1635;}
                        else if ( (LA197_547==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1636;}
                        input.seek(index197_547);
    return s;
  }
  private int sst_8() {
    int s = -1;
                        int LA197_607 = input.LA(1);
                        int index197_607 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA197_607==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1637;}
                        else if ( (LA197_607==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1638;}
                        else if ( (LA197_607==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1639;}
                        else if ( (LA197_607==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1640;}
                        else if ( (LA197_607==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1641;}
                        else if ( (LA197_607==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1642;}
                        else if ( (LA197_607==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1643;}
                        else if ( (LA197_607==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1644;}
                        else if ( (LA197_607==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1645;}
                        else if ( (LA197_607==STRING_LITERAL) ) {s = 1646;}
                        else if ( (LA197_607==QUOTED_STRING_LITERAL) ) {s = 1647;}
                        else if ( (LA197_607==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1648;}
                        else if ( (LA197_607==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1649;}
                        else if ( (LA197_607==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1650;}
                        else if ( (LA197_607==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1651;}
                        else if ( (LA197_607==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1652;}
                        else if ( (LA197_607==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1653;}
                        else if ( (LA197_607==AT) && (synpred3_EsperEPL2Grammar())) {s = 1654;}
                        else if ( (LA197_607==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1655;}
                        else if ( (LA197_607==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1656;}
                        else if ( (LA197_607==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1657;}
                        else if ( (LA197_607==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1658;}
                        else if ( (LA197_607==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1659;}
                        else if ( (LA197_607==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1660;}
                        else if ( (LA197_607==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1661;}
                        else if ( (LA197_607==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1662;}
                        else if ( (LA197_607==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1663;}
                        else if ( (LA197_607==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1664;}
                        else if ( (LA197_607==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1665;}
                        else if ( (LA197_607==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1666;}
                        else if ( (LA197_607==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1667;}
                        else if ( (LA197_607==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1668;}
                        else if ( (LA197_607==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1669;}
                        else if ( (LA197_607==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1670;}
                        else if ( (LA197_607==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1671;}
                        else if ( (LA197_607==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1672;}
                        else if ( (LA197_607==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1673;}
                        else if ( (LA197_607==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1674;}
                        else if ( (LA197_607==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1675;}
                        else if ( (LA197_607==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1676;}
                        else if ( (LA197_607==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1677;}
                        else if ( (LA197_607==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1678;}
                        else if ( (LA197_607==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1679;}
                        else if ( (LA197_607==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1680;}
                        else if ( (LA197_607==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1681;}
                        else if ( (LA197_607==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1682;}
                        else if ( (LA197_607==LW) && (synpred3_EsperEPL2Grammar())) {s = 1683;}
                        else if ( (LA197_607==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1684;}
                        else if ( (LA197_607==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1685;}
                        else if ( (LA197_607==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1686;}
                        else if ( (LA197_607==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1687;}
                        else if ( (LA197_607==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1688;}
                        else if ( (LA197_607==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1689;}
                        else if ( (LA197_607==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1690;}
                        else if ( (LA197_607==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1691;}
                        else if ( (LA197_607==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1692;}
                        else if ( (LA197_607==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1693;}
                        else if ( (LA197_607==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1694;}
                        else if ( (LA197_607==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1695;}
                        else if ( (LA197_607==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1696;}
                        else if ( (LA197_607==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1697;}
                        else if ( (LA197_607==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1698;}
                        else if ( (LA197_607==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 1699;}
                        else if ( (LA197_607==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1700;}
                        else if ( (LA197_607==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1701;}
                        else if ( (LA197_607==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1702;}
                        else if ( (LA197_607==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1703;}
                        else if ( (LA197_607==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1704;}
                        else if ( (LA197_607==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1705;}
                        input.seek(index197_607);
    return s;
  }
  private int sst_9() {
    int s = -1;
                        int LA197_667 = input.LA(1);
                        int index197_667 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA197_667==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1706;}
                        else if ( (LA197_667==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1707;}
                        else if ( (LA197_667==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1708;}
                        else if ( (LA197_667==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1709;}
                        else if ( (LA197_667==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1710;}
                        else if ( (LA197_667==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1711;}
                        else if ( (LA197_667==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1712;}
                        else if ( (LA197_667==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1713;}
                        else if ( (LA197_667==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1714;}
                        else if ( (LA197_667==STRING_LITERAL) ) {s = 1715;}
                        else if ( (LA197_667==QUOTED_STRING_LITERAL) ) {s = 1716;}
                        else if ( (LA197_667==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1717;}
                        else if ( (LA197_667==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1718;}
                        else if ( (LA197_667==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1719;}
                        else if ( (LA197_667==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1720;}
                        else if ( (LA197_667==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1721;}
                        else if ( (LA197_667==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1722;}
                        else if ( (LA197_667==AT) && (synpred3_EsperEPL2Grammar())) {s = 1723;}
                        else if ( (LA197_667==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1724;}
                        else if ( (LA197_667==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1725;}
                        else if ( (LA197_667==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1726;}
                        else if ( (LA197_667==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1727;}
                        else if ( (LA197_667==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1728;}
                        else if ( (LA197_667==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1729;}
                        else if ( (LA197_667==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1730;}
                        else if ( (LA197_667==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1731;}
                        else if ( (LA197_667==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1732;}
                        else if ( (LA197_667==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1733;}
                        else if ( (LA197_667==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1734;}
                        else if ( (LA197_667==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1735;}
                        else if ( (LA197_667==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1736;}
                        else if ( (LA197_667==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1737;}
                        else if ( (LA197_667==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1738;}
                        else if ( (LA197_667==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1739;}
                        else if ( (LA197_667==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1740;}
                        else if ( (LA197_667==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1741;}
                        else if ( (LA197_667==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1742;}
                        else if ( (LA197_667==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1743;}
                        else if ( (LA197_667==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1744;}
                        else if ( (LA197_667==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1745;}
                        else if ( (LA197_667==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1746;}
                        else if ( (LA197_667==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1747;}
                        else if ( (LA197_667==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1748;}
                        else if ( (LA197_667==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1749;}
                        else if ( (LA197_667==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1750;}
                        else if ( (LA197_667==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1751;}
                        else if ( (LA197_667==LW) && (synpred3_EsperEPL2Grammar())) {s = 1752;}
                        else if ( (LA197_667==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1753;}
                        else if ( (LA197_667==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1754;}
                        else if ( (LA197_667==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1755;}
                        else if ( (LA197_667==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1756;}
                        else if ( (LA197_667==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1757;}
                        else if ( (LA197_667==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1758;}
                        else if ( (LA197_667==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1759;}
                        else if ( (LA197_667==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1760;}
                        else if ( (LA197_667==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1761;}
                        else if ( (LA197_667==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1762;}
                        else if ( (LA197_667==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1763;}
                        else if ( (LA197_667==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1764;}
                        else if ( (LA197_667==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1765;}
                        else if ( (LA197_667==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1766;}
                        else if ( (LA197_667==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1767;}
                        else if ( (LA197_667==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 1768;}
                        else if ( (LA197_667==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1769;}
                        else if ( (LA197_667==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1770;}
                        else if ( (LA197_667==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1771;}
                        else if ( (LA197_667==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1772;}
                        else if ( (LA197_667==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1773;}
                        else if ( (LA197_667==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1774;}
                        input.seek(index197_667);
    return s;
  }
  private int sst_10() {
    int s = -1;
                        int LA197_727 = input.LA(1);
                        int index197_727 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA197_727==STRING_LITERAL) ) {s = 1775;}
                        else if ( (LA197_727==QUOTED_STRING_LITERAL) ) {s = 1776;}
                        else if ( (LA197_727==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1777;}
                        else if ( (LA197_727==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1778;}
                        else if ( (LA197_727==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1779;}
                        else if ( (LA197_727==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1780;}
                        else if ( (LA197_727==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1781;}
                        else if ( (LA197_727==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1782;}
                        else if ( (LA197_727==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1783;}
                        else if ( (LA197_727==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1784;}
                        else if ( (LA197_727==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1785;}
                        else if ( (LA197_727==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1786;}
                        else if ( (LA197_727==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1787;}
                        else if ( (LA197_727==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1788;}
                        else if ( (LA197_727==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1789;}
                        else if ( (LA197_727==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1790;}
                        else if ( (LA197_727==AT) && (synpred3_EsperEPL2Grammar())) {s = 1791;}
                        else if ( (LA197_727==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1792;}
                        else if ( (LA197_727==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1793;}
                        else if ( (LA197_727==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1794;}
                        else if ( (LA197_727==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1795;}
                        else if ( (LA197_727==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1796;}
                        else if ( (LA197_727==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1797;}
                        else if ( (LA197_727==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1798;}
                        else if ( (LA197_727==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1799;}
                        else if ( (LA197_727==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1800;}
                        else if ( (LA197_727==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1801;}
                        else if ( (LA197_727==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1802;}
                        else if ( (LA197_727==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1803;}
                        else if ( (LA197_727==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1804;}
                        else if ( (LA197_727==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1805;}
                        else if ( (LA197_727==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1806;}
                        else if ( (LA197_727==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1807;}
                        else if ( (LA197_727==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1808;}
                        else if ( (LA197_727==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1809;}
                        else if ( (LA197_727==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1810;}
                        else if ( (LA197_727==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1811;}
                        else if ( (LA197_727==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1812;}
                        else if ( (LA197_727==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1813;}
                        else if ( (LA197_727==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1814;}
                        else if ( (LA197_727==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1815;}
                        else if ( (LA197_727==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1816;}
                        else if ( (LA197_727==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1817;}
                        else if ( (LA197_727==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1818;}
                        else if ( (LA197_727==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1819;}
                        else if ( (LA197_727==LW) && (synpred3_EsperEPL2Grammar())) {s = 1820;}
                        else if ( (LA197_727==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1821;}
                        else if ( (LA197_727==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1822;}
                        else if ( (LA197_727==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1823;}
                        else if ( (LA197_727==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1824;}
                        else if ( (LA197_727==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1825;}
                        else if ( (LA197_727==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1826;}
                        else if ( (LA197_727==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1827;}
                        else if ( (LA197_727==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1828;}
                        else if ( (LA197_727==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1829;}
                        else if ( (LA197_727==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1830;}
                        else if ( (LA197_727==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1831;}
                        else if ( (LA197_727==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1832;}
                        else if ( (LA197_727==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1833;}
                        else if ( (LA197_727==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1834;}
                        else if ( (LA197_727==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1835;}
                        else if ( (LA197_727==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 1836;}
                        else if ( (LA197_727==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1837;}
                        else if ( (LA197_727==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1838;}
                        else if ( (LA197_727==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1839;}
                        else if ( (LA197_727==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1840;}
                        else if ( (LA197_727==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1841;}
                        else if ( (LA197_727==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1842;}
                        input.seek(index197_727);
    return s;
  }
  private int sst_11() {
    int s = -1;
                        int LA197_787 = input.LA(1);
                        int index197_787 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA197_787==STRING_LITERAL) ) {s = 1843;}
                        else if ( (LA197_787==QUOTED_STRING_LITERAL) ) {s = 1844;}
                        else if ( (LA197_787==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1845;}
                        else if ( (LA197_787==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1846;}
                        else if ( (LA197_787==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1847;}
                        else if ( (LA197_787==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1848;}
                        else if ( (LA197_787==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1849;}
                        else if ( (LA197_787==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1850;}
                        else if ( (LA197_787==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1851;}
                        else if ( (LA197_787==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1852;}
                        else if ( (LA197_787==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1853;}
                        else if ( (LA197_787==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1854;}
                        else if ( (LA197_787==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1855;}
                        else if ( (LA197_787==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1856;}
                        else if ( (LA197_787==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1857;}
                        else if ( (LA197_787==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1858;}
                        else if ( (LA197_787==AT) && (synpred3_EsperEPL2Grammar())) {s = 1859;}
                        else if ( (LA197_787==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1860;}
                        else if ( (LA197_787==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1861;}
                        else if ( (LA197_787==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1862;}
                        else if ( (LA197_787==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1863;}
                        else if ( (LA197_787==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1864;}
                        else if ( (LA197_787==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1865;}
                        else if ( (LA197_787==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1866;}
                        else if ( (LA197_787==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1867;}
                        else if ( (LA197_787==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1868;}
                        else if ( (LA197_787==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1869;}
                        else if ( (LA197_787==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1870;}
                        else if ( (LA197_787==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1871;}
                        else if ( (LA197_787==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1872;}
                        else if ( (LA197_787==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1873;}
                        else if ( (LA197_787==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1874;}
                        else if ( (LA197_787==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1875;}
                        else if ( (LA197_787==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1876;}
                        else if ( (LA197_787==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1877;}
                        else if ( (LA197_787==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1878;}
                        else if ( (LA197_787==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1879;}
                        else if ( (LA197_787==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1880;}
                        else if ( (LA197_787==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1881;}
                        else if ( (LA197_787==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1882;}
                        else if ( (LA197_787==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1883;}
                        else if ( (LA197_787==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1884;}
                        else if ( (LA197_787==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1885;}
                        else if ( (LA197_787==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1886;}
                        else if ( (LA197_787==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1887;}
                        else if ( (LA197_787==LW) && (synpred3_EsperEPL2Grammar())) {s = 1888;}
                        else if ( (LA197_787==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1889;}
                        else if ( (LA197_787==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1890;}
                        else if ( (LA197_787==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1891;}
                        else if ( (LA197_787==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1892;}
                        else if ( (LA197_787==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1893;}
                        else if ( (LA197_787==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1894;}
                        else if ( (LA197_787==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1895;}
                        else if ( (LA197_787==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1896;}
                        else if ( (LA197_787==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1897;}
                        else if ( (LA197_787==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1898;}
                        else if ( (LA197_787==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1899;}
                        else if ( (LA197_787==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1900;}
                        else if ( (LA197_787==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1901;}
                        else if ( (LA197_787==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1902;}
                        else if ( (LA197_787==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1903;}
                        else if ( (LA197_787==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 1904;}
                        else if ( (LA197_787==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1905;}
                        else if ( (LA197_787==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1906;}
                        else if ( (LA197_787==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1907;}
                        else if ( (LA197_787==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1908;}
                        else if ( (LA197_787==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1909;}
                        else if ( (LA197_787==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1910;}
                        input.seek(index197_787);
    return s;
  }
  private int sst_12() {
    int s = -1;
                        int LA197_847 = input.LA(1);
                        int index197_847 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA197_847==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1911;}
                        else if ( ((LA197_847>=STRING_LITERAL && LA197_847<=QUOTED_STRING_LITERAL)) ) {s = 14;}
                        input.seek(index197_847);
    return s;
  }
  private int sst_13() {
    int s = -1;
                        int LA197_907 = input.LA(1);
                        int index197_907 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA197_907==STRING_LITERAL) ) {s = 1914;}
                        else if ( (LA197_907==QUOTED_STRING_LITERAL) ) {s = 1915;}
                        else if ( (LA197_907==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1916;}
                        else if ( (LA197_907==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1917;}
                        else if ( (LA197_907==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1918;}
                        else if ( (LA197_907==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1919;}
                        else if ( (LA197_907==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1920;}
                        else if ( (LA197_907==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1921;}
                        else if ( (LA197_907==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1922;}
                        else if ( (LA197_907==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1923;}
                        else if ( (LA197_907==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1924;}
                        else if ( (LA197_907==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1925;}
                        else if ( (LA197_907==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1926;}
                        else if ( (LA197_907==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1927;}
                        else if ( (LA197_907==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1928;}
                        else if ( (LA197_907==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1929;}
                        else if ( (LA197_907==AT) && (synpred3_EsperEPL2Grammar())) {s = 1930;}
                        else if ( (LA197_907==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1931;}
                        else if ( (LA197_907==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1932;}
                        else if ( (LA197_907==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1933;}
                        else if ( (LA197_907==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1934;}
                        else if ( (LA197_907==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1935;}
                        else if ( (LA197_907==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1936;}
                        else if ( (LA197_907==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1937;}
                        else if ( (LA197_907==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1938;}
                        else if ( (LA197_907==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1939;}
                        else if ( (LA197_907==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1940;}
                        else if ( (LA197_907==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1941;}
                        else if ( (LA197_907==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1942;}
                        else if ( (LA197_907==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1943;}
                        else if ( (LA197_907==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1944;}
                        else if ( (LA197_907==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1945;}
                        else if ( (LA197_907==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1946;}
                        else if ( (LA197_907==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1947;}
                        else if ( (LA197_907==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1948;}
                        else if ( (LA197_907==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1949;}
                        else if ( (LA197_907==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1950;}
                        else if ( (LA197_907==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1951;}
                        else if ( (LA197_907==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1952;}
                        else if ( (LA197_907==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1953;}
                        else if ( (LA197_907==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1954;}
                        else if ( (LA197_907==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1955;}
                        else if ( (LA197_907==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1956;}
                        else if ( (LA197_907==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1957;}
                        else if ( (LA197_907==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1958;}
                        else if ( (LA197_907==LW) && (synpred3_EsperEPL2Grammar())) {s = 1959;}
                        else if ( (LA197_907==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1960;}
                        else if ( (LA197_907==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1961;}
                        else if ( (LA197_907==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1962;}
                        else if ( (LA197_907==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1963;}
                        else if ( (LA197_907==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1964;}
                        else if ( (LA197_907==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1965;}
                        else if ( (LA197_907==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1966;}
                        else if ( (LA197_907==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1967;}
                        else if ( (LA197_907==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1968;}
                        else if ( (LA197_907==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1969;}
                        else if ( (LA197_907==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1970;}
                        else if ( (LA197_907==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1971;}
                        else if ( (LA197_907==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1972;}
                        else if ( (LA197_907==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1973;}
                        else if ( (LA197_907==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1974;}
                        else if ( (LA197_907==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 1975;}
                        else if ( (LA197_907==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1976;}
                        else if ( (LA197_907==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1977;}
                        else if ( (LA197_907==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1978;}
                        else if ( (LA197_907==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1979;}
                        else if ( (LA197_907==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1980;}
                        else if ( (LA197_907==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1981;}
                        input.seek(index197_907);
    return s;
  }
  private int sst_14() {
    int s = -1;
                        int LA197_967 = input.LA(1);
                        int index197_967 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA197_967==STRING_LITERAL) ) {s = 1982;}
                        else if ( (LA197_967==QUOTED_STRING_LITERAL) ) {s = 1983;}
                        else if ( (LA197_967==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1984;}
                        else if ( (LA197_967==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1985;}
                        else if ( (LA197_967==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1986;}
                        else if ( (LA197_967==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1987;}
                        else if ( (LA197_967==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1988;}
                        else if ( (LA197_967==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1989;}
                        else if ( (LA197_967==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1990;}
                        else if ( (LA197_967==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1991;}
                        else if ( (LA197_967==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1992;}
                        else if ( (LA197_967==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1993;}
                        else if ( (LA197_967==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1994;}
                        else if ( (LA197_967==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1995;}
                        else if ( (LA197_967==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1996;}
                        else if ( (LA197_967==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1997;}
                        else if ( (LA197_967==AT) && (synpred3_EsperEPL2Grammar())) {s = 1998;}
                        else if ( (LA197_967==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1999;}
                        else if ( (LA197_967==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 2000;}
                        else if ( (LA197_967==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2001;}
                        else if ( (LA197_967==SUM) && (synpred3_EsperEPL2Grammar())) {s = 2002;}
                        else if ( (LA197_967==AVG) && (synpred3_EsperEPL2Grammar())) {s = 2003;}
                        else if ( (LA197_967==MAX) && (synpred3_EsperEPL2Grammar())) {s = 2004;}
                        else if ( (LA197_967==MIN) && (synpred3_EsperEPL2Grammar())) {s = 2005;}
                        else if ( (LA197_967==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 2006;}
                        else if ( (LA197_967==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 2007;}
                        else if ( (LA197_967==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 2008;}
                        else if ( (LA197_967==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 2009;}
                        else if ( (LA197_967==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 2010;}
                        else if ( (LA197_967==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 2011;}
                        else if ( (LA197_967==LAST) && (synpred3_EsperEPL2Grammar())) {s = 2012;}
                        else if ( (LA197_967==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 2013;}
                        else if ( (LA197_967==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 2014;}
                        else if ( (LA197_967==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 2015;}
                        else if ( (LA197_967==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 2016;}
                        else if ( (LA197_967==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 2017;}
                        else if ( (LA197_967==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 2018;}
                        else if ( (LA197_967==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 2019;}
                        else if ( (LA197_967==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 2020;}
                        else if ( (LA197_967==SQL) && (synpred3_EsperEPL2Grammar())) {s = 2021;}
                        else if ( (LA197_967==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 2022;}
                        else if ( (LA197_967==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 2023;}
                        else if ( (LA197_967==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 2024;}
                        else if ( (LA197_967==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 2025;}
                        else if ( (LA197_967==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 2026;}
                        else if ( (LA197_967==LW) && (synpred3_EsperEPL2Grammar())) {s = 2027;}
                        else if ( (LA197_967==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 2028;}
                        else if ( (LA197_967==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 2029;}
                        else if ( (LA197_967==CAST) && (synpred3_EsperEPL2Grammar())) {s = 2030;}
                        else if ( (LA197_967==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 2031;}
                        else if ( (LA197_967==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 2032;}
                        else if ( (LA197_967==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 2033;}
                        else if ( (LA197_967==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 2034;}
                        else if ( (LA197_967==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 2035;}
                        else if ( (LA197_967==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 2036;}
                        else if ( (LA197_967==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 2037;}
                        else if ( (LA197_967==FULL) && (synpred3_EsperEPL2Grammar())) {s = 2038;}
                        else if ( (LA197_967==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 2039;}
                        else if ( (LA197_967==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 2040;}
                        else if ( (LA197_967==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 2041;}
                        else if ( (LA197_967==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 2042;}
                        else if ( (LA197_967==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 2043;}
                        else if ( (LA197_967==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 2044;}
                        else if ( (LA197_967==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 2045;}
                        else if ( (LA197_967==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 2046;}
                        else if ( (LA197_967==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 2047;}
                        else if ( (LA197_967==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 2048;}
                        else if ( (LA197_967==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2049;}
                        input.seek(index197_967);
    return s;
  }
  private int sst_15() {
    int s = -1;
                        int LA197_1027 = input.LA(1);
                        int index197_1027 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA197_1027==CASE) && (synpred3_EsperEPL2Grammar())) {s = 2050;}
                        else if ( (LA197_1027==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2051;}
                        else if ( (LA197_1027==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2052;}
                        else if ( (LA197_1027==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 2053;}
                        else if ( (LA197_1027==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 2054;}
                        else if ( (LA197_1027==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 2055;}
                        else if ( (LA197_1027==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 2056;}
                        else if ( (LA197_1027==STRING_LITERAL) ) {s = 2057;}
                        else if ( (LA197_1027==QUOTED_STRING_LITERAL) ) {s = 2058;}
                        else if ( (LA197_1027==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 2059;}
                        else if ( (LA197_1027==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 2060;}
                        else if ( (LA197_1027==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 2061;}
                        else if ( (LA197_1027==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 2062;}
                        else if ( (LA197_1027==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 2063;}
                        else if ( (LA197_1027==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 2064;}
                        else if ( (LA197_1027==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 2065;}
                        else if ( (LA197_1027==AT) && (synpred3_EsperEPL2Grammar())) {s = 2066;}
                        else if ( (LA197_1027==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 2067;}
                        else if ( (LA197_1027==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 2068;}
                        else if ( (LA197_1027==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2069;}
                        else if ( (LA197_1027==SUM) && (synpred3_EsperEPL2Grammar())) {s = 2070;}
                        else if ( (LA197_1027==AVG) && (synpred3_EsperEPL2Grammar())) {s = 2071;}
                        else if ( (LA197_1027==MAX) && (synpred3_EsperEPL2Grammar())) {s = 2072;}
                        else if ( (LA197_1027==MIN) && (synpred3_EsperEPL2Grammar())) {s = 2073;}
                        else if ( (LA197_1027==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 2074;}
                        else if ( (LA197_1027==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 2075;}
                        else if ( (LA197_1027==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 2076;}
                        else if ( (LA197_1027==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 2077;}
                        else if ( (LA197_1027==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 2078;}
                        else if ( (LA197_1027==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 2079;}
                        else if ( (LA197_1027==LAST) && (synpred3_EsperEPL2Grammar())) {s = 2080;}
                        else if ( (LA197_1027==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 2081;}
                        else if ( (LA197_1027==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 2082;}
                        else if ( (LA197_1027==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 2083;}
                        else if ( (LA197_1027==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 2084;}
                        else if ( (LA197_1027==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 2085;}
                        else if ( (LA197_1027==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 2086;}
                        else if ( (LA197_1027==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 2087;}
                        else if ( (LA197_1027==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 2088;}
                        else if ( (LA197_1027==SQL) && (synpred3_EsperEPL2Grammar())) {s = 2089;}
                        else if ( (LA197_1027==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 2090;}
                        else if ( (LA197_1027==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 2091;}
                        else if ( (LA197_1027==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 2092;}
                        else if ( (LA197_1027==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 2093;}
                        else if ( (LA197_1027==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 2094;}
                        else if ( (LA197_1027==LW) && (synpred3_EsperEPL2Grammar())) {s = 2095;}
                        else if ( (LA197_1027==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 2096;}
                        else if ( (LA197_1027==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 2097;}
                        else if ( (LA197_1027==CAST) && (synpred3_EsperEPL2Grammar())) {s = 2098;}
                        else if ( (LA197_1027==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 2099;}
                        else if ( (LA197_1027==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 2100;}
                        else if ( (LA197_1027==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 2101;}
                        else if ( (LA197_1027==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 2102;}
                        else if ( (LA197_1027==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 2103;}
                        else if ( (LA197_1027==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 2104;}
                        else if ( (LA197_1027==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 2105;}
                        else if ( (LA197_1027==FULL) && (synpred3_EsperEPL2Grammar())) {s = 2106;}
                        else if ( (LA197_1027==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 2107;}
                        else if ( (LA197_1027==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 2108;}
                        else if ( (LA197_1027==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 2109;}
                        else if ( (LA197_1027==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 2110;}
                        else if ( (LA197_1027==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 2111;}
                        else if ( (LA197_1027==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 2112;}
                        else if ( (LA197_1027==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 2113;}
                        else if ( (LA197_1027==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 2114;}
                        else if ( (LA197_1027==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 2115;}
                        else if ( (LA197_1027==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 2116;}
                        else if ( (LA197_1027==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2117;}
                        input.seek(index197_1027);
    return s;
  }
  private int sst_16() {
    int s = -1;
                        int LA197_1087 = input.LA(1);
                        int index197_1087 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA197_1087==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2118;}
                        else if ( (LA197_1087==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 2119;}
                        else if ( (LA197_1087==CASE) && (synpred3_EsperEPL2Grammar())) {s = 2120;}
                        else if ( (LA197_1087==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2121;}
                        else if ( (LA197_1087==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2122;}
                        else if ( (LA197_1087==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 2123;}
                        else if ( (LA197_1087==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 2124;}
                        else if ( (LA197_1087==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 2125;}
                        else if ( (LA197_1087==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 2126;}
                        else if ( (LA197_1087==STRING_LITERAL) ) {s = 2127;}
                        else if ( (LA197_1087==QUOTED_STRING_LITERAL) ) {s = 2128;}
                        else if ( (LA197_1087==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 2129;}
                        else if ( (LA197_1087==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 2130;}
                        else if ( (LA197_1087==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 2131;}
                        else if ( (LA197_1087==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 2132;}
                        else if ( (LA197_1087==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 2133;}
                        else if ( (LA197_1087==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 2134;}
                        else if ( (LA197_1087==AT) && (synpred3_EsperEPL2Grammar())) {s = 2135;}
                        else if ( (LA197_1087==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 2136;}
                        else if ( (LA197_1087==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 2137;}
                        else if ( (LA197_1087==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2138;}
                        else if ( (LA197_1087==SUM) && (synpred3_EsperEPL2Grammar())) {s = 2139;}
                        else if ( (LA197_1087==AVG) && (synpred3_EsperEPL2Grammar())) {s = 2140;}
                        else if ( (LA197_1087==MAX) && (synpred3_EsperEPL2Grammar())) {s = 2141;}
                        else if ( (LA197_1087==MIN) && (synpred3_EsperEPL2Grammar())) {s = 2142;}
                        else if ( (LA197_1087==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 2143;}
                        else if ( (LA197_1087==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 2144;}
                        else if ( (LA197_1087==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 2145;}
                        else if ( (LA197_1087==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 2146;}
                        else if ( (LA197_1087==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 2147;}
                        else if ( (LA197_1087==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 2148;}
                        else if ( (LA197_1087==LAST) && (synpred3_EsperEPL2Grammar())) {s = 2149;}
                        else if ( (LA197_1087==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 2150;}
                        else if ( (LA197_1087==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 2151;}
                        else if ( (LA197_1087==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 2152;}
                        else if ( (LA197_1087==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 2153;}
                        else if ( (LA197_1087==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 2154;}
                        else if ( (LA197_1087==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 2155;}
                        else if ( (LA197_1087==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 2156;}
                        else if ( (LA197_1087==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 2157;}
                        else if ( (LA197_1087==SQL) && (synpred3_EsperEPL2Grammar())) {s = 2158;}
                        else if ( (LA197_1087==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 2159;}
                        else if ( (LA197_1087==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 2160;}
                        else if ( (LA197_1087==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 2161;}
                        else if ( (LA197_1087==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 2162;}
                        else if ( (LA197_1087==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 2163;}
                        else if ( (LA197_1087==LW) && (synpred3_EsperEPL2Grammar())) {s = 2164;}
                        else if ( (LA197_1087==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 2165;}
                        else if ( (LA197_1087==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 2166;}
                        else if ( (LA197_1087==CAST) && (synpred3_EsperEPL2Grammar())) {s = 2167;}
                        else if ( (LA197_1087==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 2168;}
                        else if ( (LA197_1087==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 2169;}
                        else if ( (LA197_1087==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 2170;}
                        else if ( (LA197_1087==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 2171;}
                        else if ( (LA197_1087==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 2172;}
                        else if ( (LA197_1087==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 2173;}
                        else if ( (LA197_1087==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 2174;}
                        else if ( (LA197_1087==FULL) && (synpred3_EsperEPL2Grammar())) {s = 2175;}
                        else if ( (LA197_1087==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 2176;}
                        else if ( (LA197_1087==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 2177;}
                        else if ( (LA197_1087==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 2178;}
                        else if ( (LA197_1087==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 2179;}
                        else if ( (LA197_1087==WHERE) && (synpred3_EsperEPL2Grammar())) {s = 2180;}
                        else if ( (LA197_1087==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 2181;}
                        else if ( (LA197_1087==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 2182;}
                        else if ( (LA197_1087==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 2183;}
                        else if ( (LA197_1087==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 2184;}
                        else if ( (LA197_1087==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 2185;}
                        else if ( (LA197_1087==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2186;}
                        input.seek(index197_1087);
    return s;
  }
  private int sst_17() {
    int s = -1;
                        int LA197_1147 = input.LA(1);
                        int index197_1147 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA197_1147==SELECT) ) {s = 2187;}
                        else if ( (LA197_1147==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 2188;}
                        else if ( (LA197_1147==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 2189;}
                        else if ( (LA197_1147==AT) && (synpred3_EsperEPL2Grammar())) {s = 2190;}
                        else if ( (LA197_1147==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 2191;}
                        else if ( (LA197_1147==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 2192;}
                        else if ( (LA197_1147==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2193;}
                        else if ( (LA197_1147==SUM) && (synpred3_EsperEPL2Grammar())) {s = 2194;}
                        else if ( (LA197_1147==AVG) && (synpred3_EsperEPL2Grammar())) {s = 2195;}
                        else if ( (LA197_1147==MAX) && (synpred3_EsperEPL2Grammar())) {s = 2196;}
                        else if ( (LA197_1147==MIN) && (synpred3_EsperEPL2Grammar())) {s = 2197;}
                        else if ( (LA197_1147==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 2198;}
                        else if ( (LA197_1147==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 2199;}
                        else if ( (LA197_1147==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 2200;}
                        else if ( (LA197_1147==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 2201;}
                        else if ( (LA197_1147==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 2202;}
                        else if ( (LA197_1147==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 2203;}
                        else if ( (LA197_1147==LAST) && (synpred3_EsperEPL2Grammar())) {s = 2204;}
                        else if ( (LA197_1147==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 2205;}
                        else if ( (LA197_1147==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 2206;}
                        else if ( (LA197_1147==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 2207;}
                        else if ( (LA197_1147==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 2208;}
                        else if ( (LA197_1147==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 2209;}
                        else if ( (LA197_1147==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 2210;}
                        else if ( (LA197_1147==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 2211;}
                        else if ( (LA197_1147==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 2212;}
                        else if ( (LA197_1147==SQL) && (synpred3_EsperEPL2Grammar())) {s = 2213;}
                        else if ( (LA197_1147==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 2214;}
                        else if ( (LA197_1147==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 2215;}
                        else if ( (LA197_1147==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 2216;}
                        else if ( (LA197_1147==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 2217;}
                        else if ( (LA197_1147==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 2218;}
                        else if ( (LA197_1147==LW) && (synpred3_EsperEPL2Grammar())) {s = 2219;}
                        else if ( (LA197_1147==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 2220;}
                        else if ( (LA197_1147==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 2221;}
                        else if ( (LA197_1147==CAST) && (synpred3_EsperEPL2Grammar())) {s = 2222;}
                        else if ( (LA197_1147==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 2223;}
                        else if ( (LA197_1147==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 2224;}
                        else if ( (LA197_1147==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 2225;}
                        else if ( (LA197_1147==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 2226;}
                        else if ( (LA197_1147==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 2227;}
                        else if ( (LA197_1147==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 2228;}
                        else if ( (LA197_1147==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 2229;}
                        else if ( (LA197_1147==FULL) && (synpred3_EsperEPL2Grammar())) {s = 2230;}
                        else if ( (LA197_1147==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 2231;}
                        else if ( (LA197_1147==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 2232;}
                        else if ( (LA197_1147==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 2233;}
                        else if ( (LA197_1147==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 2234;}
                        input.seek(index197_1147);
    return s;
  }
  private int sst_18() {
    int s = -1;
                        int LA197_1148 = input.LA(1);
                        int index197_1148 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA197_1148==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2235;}
                        else if ( (LA197_1148==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2236;}
                        else if ( (LA197_1148==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2237;}
                        else if ( (LA197_1148==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2238;}
                        else if ( (LA197_1148==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2239;}
                        else if ( (LA197_1148==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2240;}
                        else if ( (LA197_1148==LT) && (synpred3_EsperEPL2Grammar())) {s = 2241;}
                        else if ( (LA197_1148==GT) && (synpred3_EsperEPL2Grammar())) {s = 2242;}
                        else if ( (LA197_1148==LE) && (synpred3_EsperEPL2Grammar())) {s = 2243;}
                        else if ( (LA197_1148==GE) && (synpred3_EsperEPL2Grammar())) {s = 2244;}
                        else if ( (LA197_1148==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2245;}
                        else if ( (LA197_1148==IS) && (synpred3_EsperEPL2Grammar())) {s = 2246;}
                        else if ( (LA197_1148==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2247;}
                        else if ( (LA197_1148==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2248;}
                        else if ( (LA197_1148==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2249;}
                        else if ( (LA197_1148==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2250;}
                        else if ( (LA197_1148==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2251;}
                        else if ( (LA197_1148==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2252;}
                        else if ( (LA197_1148==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2253;}
                        else if ( (LA197_1148==RPAREN) ) {s = 2254;}
                        else if ( (LA197_1148==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2255;}
                        else if ( (LA197_1148==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2256;}
                        else if ( (LA197_1148==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2257;}
                        else if ( (LA197_1148==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2258;}
                        else if ( (LA197_1148==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2259;}
                        input.seek(index197_1148);
    return s;
  }
  private int sst_19() {
    int s = -1;
                        int LA197_1149 = input.LA(1);
                        int index197_1149 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA197_1149==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2260;}
                        else if ( (LA197_1149==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2261;}
                        else if ( (LA197_1149==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2262;}
                        else if ( (LA197_1149==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2263;}
                        else if ( (LA197_1149==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2264;}
                        else if ( (LA197_1149==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2265;}
                        else if ( (LA197_1149==LT) && (synpred3_EsperEPL2Grammar())) {s = 2266;}
                        else if ( (LA197_1149==GT) && (synpred3_EsperEPL2Grammar())) {s = 2267;}
                        else if ( (LA197_1149==LE) && (synpred3_EsperEPL2Grammar())) {s = 2268;}
                        else if ( (LA197_1149==GE) && (synpred3_EsperEPL2Grammar())) {s = 2269;}
                        else if ( (LA197_1149==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2270;}
                        else if ( (LA197_1149==IS) && (synpred3_EsperEPL2Grammar())) {s = 2271;}
                        else if ( (LA197_1149==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2272;}
                        else if ( (LA197_1149==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2273;}
                        else if ( (LA197_1149==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2274;}
                        else if ( (LA197_1149==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2275;}
                        else if ( (LA197_1149==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2276;}
                        else if ( (LA197_1149==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2277;}
                        else if ( (LA197_1149==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2278;}
                        else if ( (LA197_1149==RPAREN) ) {s = 2279;}
                        else if ( (LA197_1149==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2280;}
                        else if ( (LA197_1149==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2281;}
                        else if ( (LA197_1149==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2282;}
                        else if ( (LA197_1149==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2283;}
                        else if ( (LA197_1149==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2284;}
                        input.seek(index197_1149);
    return s;
  }
  private int sst_20() {
    int s = -1;
                        int LA197_1228 = input.LA(1);
                        int index197_1228 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA197_1228==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2285;}
                        else if ( (LA197_1228==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2286;}
                        else if ( (LA197_1228==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2287;}
                        else if ( (LA197_1228==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2288;}
                        else if ( (LA197_1228==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2289;}
                        else if ( (LA197_1228==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2290;}
                        else if ( (LA197_1228==LT) && (synpred3_EsperEPL2Grammar())) {s = 2291;}
                        else if ( (LA197_1228==GT) && (synpred3_EsperEPL2Grammar())) {s = 2292;}
                        else if ( (LA197_1228==LE) && (synpred3_EsperEPL2Grammar())) {s = 2293;}
                        else if ( (LA197_1228==GE) && (synpred3_EsperEPL2Grammar())) {s = 2294;}
                        else if ( (LA197_1228==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2295;}
                        else if ( (LA197_1228==IS) && (synpred3_EsperEPL2Grammar())) {s = 2296;}
                        else if ( (LA197_1228==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2297;}
                        else if ( (LA197_1228==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2298;}
                        else if ( (LA197_1228==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2299;}
                        else if ( (LA197_1228==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2300;}
                        else if ( (LA197_1228==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2301;}
                        else if ( (LA197_1228==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2302;}
                        else if ( (LA197_1228==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2303;}
                        else if ( (LA197_1228==RPAREN) ) {s = 2304;}
                        else if ( (LA197_1228==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2305;}
                        else if ( (LA197_1228==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2306;}
                        else if ( (LA197_1228==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2307;}
                        else if ( (LA197_1228==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2308;}
                        else if ( (LA197_1228==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2309;}
                        input.seek(index197_1228);
    return s;
  }
  private int sst_21() {
    int s = -1;
                        int LA197_1229 = input.LA(1);
                        int index197_1229 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA197_1229==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2310;}
                        else if ( (LA197_1229==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2311;}
                        else if ( (LA197_1229==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2312;}
                        else if ( (LA197_1229==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2313;}
                        else if ( (LA197_1229==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2314;}
                        else if ( (LA197_1229==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2315;}
                        else if ( (LA197_1229==LT) && (synpred3_EsperEPL2Grammar())) {s = 2316;}
                        else if ( (LA197_1229==GT) && (synpred3_EsperEPL2Grammar())) {s = 2317;}
                        else if ( (LA197_1229==LE) && (synpred3_EsperEPL2Grammar())) {s = 2318;}
                        else if ( (LA197_1229==GE) && (synpred3_EsperEPL2Grammar())) {s = 2319;}
                        else if ( (LA197_1229==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2320;}
                        else if ( (LA197_1229==IS) && (synpred3_EsperEPL2Grammar())) {s = 2321;}
                        else if ( (LA197_1229==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2322;}
                        else if ( (LA197_1229==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2323;}
                        else if ( (LA197_1229==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2324;}
                        else if ( (LA197_1229==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2325;}
                        else if ( (LA197_1229==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2326;}
                        else if ( (LA197_1229==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2327;}
                        else if ( (LA197_1229==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2328;}
                        else if ( (LA197_1229==RPAREN) ) {s = 2329;}
                        else if ( (LA197_1229==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2330;}
                        else if ( (LA197_1229==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2331;}
                        else if ( (LA197_1229==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2332;}
                        else if ( (LA197_1229==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2333;}
                        else if ( (LA197_1229==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2334;}
                        input.seek(index197_1229);
    return s;
  }
  private int sst_22() {
    int s = -1;
                        int LA197_1289 = input.LA(1);
                        int index197_1289 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA197_1289==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2335;}
                        else if ( (LA197_1289==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2336;}
                        else if ( (LA197_1289==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2337;}
                        else if ( (LA197_1289==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2338;}
                        else if ( (LA197_1289==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2339;}
                        else if ( (LA197_1289==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2340;}
                        else if ( (LA197_1289==LT) && (synpred3_EsperEPL2Grammar())) {s = 2341;}
                        else if ( (LA197_1289==GT) && (synpred3_EsperEPL2Grammar())) {s = 2342;}
                        else if ( (LA197_1289==LE) && (synpred3_EsperEPL2Grammar())) {s = 2343;}
                        else if ( (LA197_1289==GE) && (synpred3_EsperEPL2Grammar())) {s = 2344;}
                        else if ( (LA197_1289==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2345;}
                        else if ( (LA197_1289==IS) && (synpred3_EsperEPL2Grammar())) {s = 2346;}
                        else if ( (LA197_1289==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2347;}
                        else if ( (LA197_1289==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2348;}
                        else if ( (LA197_1289==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2349;}
                        else if ( (LA197_1289==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2350;}
                        else if ( (LA197_1289==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2351;}
                        else if ( (LA197_1289==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2352;}
                        else if ( (LA197_1289==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2353;}
                        else if ( (LA197_1289==RPAREN) ) {s = 2354;}
                        else if ( (LA197_1289==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2355;}
                        else if ( (LA197_1289==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2356;}
                        else if ( (LA197_1289==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2357;}
                        else if ( (LA197_1289==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2358;}
                        else if ( (LA197_1289==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2359;}
                        input.seek(index197_1289);
    return s;
  }
  private int sst_23() {
    int s = -1;
                        int LA197_1290 = input.LA(1);
                        int index197_1290 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA197_1290==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2360;}
                        else if ( (LA197_1290==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2361;}
                        else if ( (LA197_1290==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2362;}
                        else if ( (LA197_1290==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2363;}
                        else if ( (LA197_1290==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2364;}
                        else if ( (LA197_1290==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2365;}
                        else if ( (LA197_1290==LT) && (synpred3_EsperEPL2Grammar())) {s = 2366;}
                        else if ( (LA197_1290==GT) && (synpred3_EsperEPL2Grammar())) {s = 2367;}
                        else if ( (LA197_1290==LE) && (synpred3_EsperEPL2Grammar())) {s = 2368;}
                        else if ( (LA197_1290==GE) && (synpred3_EsperEPL2Grammar())) {s = 2369;}
                        else if ( (LA197_1290==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2370;}
                        else if ( (LA197_1290==IS) && (synpred3_EsperEPL2Grammar())) {s = 2371;}
                        else if ( (LA197_1290==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2372;}
                        else if ( (LA197_1290==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2373;}
                        else if ( (LA197_1290==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2374;}
                        else if ( (LA197_1290==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2375;}
                        else if ( (LA197_1290==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2376;}
                        else if ( (LA197_1290==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2377;}
                        else if ( (LA197_1290==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2378;}
                        else if ( (LA197_1290==RPAREN) ) {s = 2379;}
                        else if ( (LA197_1290==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2380;}
                        else if ( (LA197_1290==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2381;}
                        else if ( (LA197_1290==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2382;}
                        else if ( (LA197_1290==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2383;}
                        else if ( (LA197_1290==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2384;}
                        input.seek(index197_1290);
    return s;
  }
  private int sst_24() {
    int s = -1;
                        int LA197_1359 = input.LA(1);
                        int index197_1359 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA197_1359==RPAREN) ) {s = 14;}
                        else if ( (LA197_1359==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2386;}
                        else if ( (LA197_1359==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2387;}
                        else if ( (LA197_1359==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2388;}
                        else if ( (LA197_1359==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2389;}
                        else if ( (LA197_1359==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2390;}
                        else if ( (LA197_1359==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2391;}
                        else if ( (LA197_1359==LT) && (synpred3_EsperEPL2Grammar())) {s = 2392;}
                        else if ( (LA197_1359==GT) && (synpred3_EsperEPL2Grammar())) {s = 2393;}
                        else if ( (LA197_1359==LE) && (synpred3_EsperEPL2Grammar())) {s = 2394;}
                        else if ( (LA197_1359==GE) && (synpred3_EsperEPL2Grammar())) {s = 2395;}
                        else if ( (LA197_1359==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2396;}
                        else if ( (LA197_1359==IS) && (synpred3_EsperEPL2Grammar())) {s = 2397;}
                        else if ( (LA197_1359==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2398;}
                        else if ( (LA197_1359==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2399;}
                        else if ( (LA197_1359==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2400;}
                        else if ( (LA197_1359==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2401;}
                        else if ( (LA197_1359==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2402;}
                        else if ( (LA197_1359==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2403;}
                        else if ( (LA197_1359==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2404;}
                        else if ( (LA197_1359==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2405;}
                        else if ( (LA197_1359==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2406;}
                        else if ( (LA197_1359==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2407;}
                        else if ( (LA197_1359==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2408;}
                        else if ( (LA197_1359==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2409;}
                        else if ( (LA197_1359==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2410;}
                        input.seek(index197_1359);
    return s;
  }
  private int sst_25() {
    int s = -1;
                        int LA197_1360 = input.LA(1);
                        int index197_1360 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA197_1360==RPAREN) ) {s = 14;}
                        else if ( (LA197_1360==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2412;}
                        else if ( (LA197_1360==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2413;}
                        else if ( (LA197_1360==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2414;}
                        else if ( (LA197_1360==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2415;}
                        else if ( (LA197_1360==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2416;}
                        else if ( (LA197_1360==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2417;}
                        else if ( (LA197_1360==LT) && (synpred3_EsperEPL2Grammar())) {s = 2418;}
                        else if ( (LA197_1360==GT) && (synpred3_EsperEPL2Grammar())) {s = 2419;}
                        else if ( (LA197_1360==LE) && (synpred3_EsperEPL2Grammar())) {s = 2420;}
                        else if ( (LA197_1360==GE) && (synpred3_EsperEPL2Grammar())) {s = 2421;}
                        else if ( (LA197_1360==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2422;}
                        else if ( (LA197_1360==IS) && (synpred3_EsperEPL2Grammar())) {s = 2423;}
                        else if ( (LA197_1360==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2424;}
                        else if ( (LA197_1360==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2425;}
                        else if ( (LA197_1360==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2426;}
                        else if ( (LA197_1360==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2427;}
                        else if ( (LA197_1360==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2428;}
                        else if ( (LA197_1360==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2429;}
                        else if ( (LA197_1360==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2430;}
                        else if ( (LA197_1360==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2431;}
                        else if ( (LA197_1360==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2432;}
                        else if ( (LA197_1360==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2433;}
                        else if ( (LA197_1360==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2434;}
                        else if ( (LA197_1360==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2435;}
                        else if ( (LA197_1360==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2436;}
                        input.seek(index197_1360);
    return s;
  }
  private int sst_26() {
    int s = -1;
                        int LA197_1436 = input.LA(1);
                        int index197_1436 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA197_1436==RPAREN) ) {s = 2437;}
                        else if ( (LA197_1436==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2438;}
                        else if ( (LA197_1436==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2439;}
                        else if ( (LA197_1436==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2440;}
                        else if ( (LA197_1436==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2441;}
                        else if ( (LA197_1436==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2442;}
                        else if ( (LA197_1436==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2443;}
                        else if ( (LA197_1436==LT) && (synpred3_EsperEPL2Grammar())) {s = 2444;}
                        else if ( (LA197_1436==GT) && (synpred3_EsperEPL2Grammar())) {s = 2445;}
                        else if ( (LA197_1436==LE) && (synpred3_EsperEPL2Grammar())) {s = 2446;}
                        else if ( (LA197_1436==GE) && (synpred3_EsperEPL2Grammar())) {s = 2447;}
                        else if ( (LA197_1436==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2448;}
                        else if ( (LA197_1436==IS) && (synpred3_EsperEPL2Grammar())) {s = 2449;}
                        else if ( (LA197_1436==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2450;}
                        else if ( (LA197_1436==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2451;}
                        else if ( (LA197_1436==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2452;}
                        else if ( (LA197_1436==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2453;}
                        else if ( (LA197_1436==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2454;}
                        else if ( (LA197_1436==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2455;}
                        else if ( (LA197_1436==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2456;}
                        else if ( (LA197_1436==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2457;}
                        else if ( (LA197_1436==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2458;}
                        else if ( (LA197_1436==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2459;}
                        else if ( (LA197_1436==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2460;}
                        else if ( (LA197_1436==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2461;}
                        input.seek(index197_1436);
    return s;
  }
  private int sst_27() {
    int s = -1;
                        int LA197_1437 = input.LA(1);
                        int index197_1437 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA197_1437==RPAREN) ) {s = 2462;}
                        else if ( (LA197_1437==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2463;}
                        else if ( (LA197_1437==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2464;}
                        else if ( (LA197_1437==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2465;}
                        else if ( (LA197_1437==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2466;}
                        else if ( (LA197_1437==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2467;}
                        else if ( (LA197_1437==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2468;}
                        else if ( (LA197_1437==LT) && (synpred3_EsperEPL2Grammar())) {s = 2469;}
                        else if ( (LA197_1437==GT) && (synpred3_EsperEPL2Grammar())) {s = 2470;}
                        else if ( (LA197_1437==LE) && (synpred3_EsperEPL2Grammar())) {s = 2471;}
                        else if ( (LA197_1437==GE) && (synpred3_EsperEPL2Grammar())) {s = 2472;}
                        else if ( (LA197_1437==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2473;}
                        else if ( (LA197_1437==IS) && (synpred3_EsperEPL2Grammar())) {s = 2474;}
                        else if ( (LA197_1437==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2475;}
                        else if ( (LA197_1437==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2476;}
                        else if ( (LA197_1437==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2477;}
                        else if ( (LA197_1437==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2478;}
                        else if ( (LA197_1437==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2479;}
                        else if ( (LA197_1437==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2480;}
                        else if ( (LA197_1437==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2481;}
                        else if ( (LA197_1437==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2482;}
                        else if ( (LA197_1437==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2483;}
                        else if ( (LA197_1437==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2484;}
                        else if ( (LA197_1437==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2485;}
                        else if ( (LA197_1437==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2486;}
                        input.seek(index197_1437);
    return s;
  }
  private int sst_28() {
    int s = -1;
                        int LA197_1506 = input.LA(1);
                        int index197_1506 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA197_1506==RPAREN) ) {s = 2487;}
                        else if ( (LA197_1506==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2488;}
                        else if ( (LA197_1506==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2489;}
                        else if ( (LA197_1506==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2490;}
                        else if ( (LA197_1506==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2491;}
                        else if ( (LA197_1506==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2492;}
                        else if ( (LA197_1506==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2493;}
                        else if ( (LA197_1506==LT) && (synpred3_EsperEPL2Grammar())) {s = 2494;}
                        else if ( (LA197_1506==GT) && (synpred3_EsperEPL2Grammar())) {s = 2495;}
                        else if ( (LA197_1506==LE) && (synpred3_EsperEPL2Grammar())) {s = 2496;}
                        else if ( (LA197_1506==GE) && (synpred3_EsperEPL2Grammar())) {s = 2497;}
                        else if ( (LA197_1506==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2498;}
                        else if ( (LA197_1506==IS) && (synpred3_EsperEPL2Grammar())) {s = 2499;}
                        else if ( (LA197_1506==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2500;}
                        else if ( (LA197_1506==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2501;}
                        else if ( (LA197_1506==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2502;}
                        else if ( (LA197_1506==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2503;}
                        else if ( (LA197_1506==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2504;}
                        else if ( (LA197_1506==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2505;}
                        else if ( (LA197_1506==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2506;}
                        else if ( (LA197_1506==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2507;}
                        else if ( (LA197_1506==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2508;}
                        else if ( (LA197_1506==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2509;}
                        else if ( (LA197_1506==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2510;}
                        else if ( (LA197_1506==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2511;}
                        input.seek(index197_1506);
    return s;
  }
  private int sst_29() {
    int s = -1;
                        int LA197_1507 = input.LA(1);
                        int index197_1507 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA197_1507==RPAREN) ) {s = 2512;}
                        else if ( (LA197_1507==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2513;}
                        else if ( (LA197_1507==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2514;}
                        else if ( (LA197_1507==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2515;}
                        else if ( (LA197_1507==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2516;}
                        else if ( (LA197_1507==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2517;}
                        else if ( (LA197_1507==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2518;}
                        else if ( (LA197_1507==LT) && (synpred3_EsperEPL2Grammar())) {s = 2519;}
                        else if ( (LA197_1507==GT) && (synpred3_EsperEPL2Grammar())) {s = 2520;}
                        else if ( (LA197_1507==LE) && (synpred3_EsperEPL2Grammar())) {s = 2521;}
                        else if ( (LA197_1507==GE) && (synpred3_EsperEPL2Grammar())) {s = 2522;}
                        else if ( (LA197_1507==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2523;}
                        else if ( (LA197_1507==IS) && (synpred3_EsperEPL2Grammar())) {s = 2524;}
                        else if ( (LA197_1507==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2525;}
                        else if ( (LA197_1507==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2526;}
                        else if ( (LA197_1507==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2527;}
                        else if ( (LA197_1507==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2528;}
                        else if ( (LA197_1507==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2529;}
                        else if ( (LA197_1507==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2530;}
                        else if ( (LA197_1507==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2531;}
                        else if ( (LA197_1507==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2532;}
                        else if ( (LA197_1507==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2533;}
                        else if ( (LA197_1507==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2534;}
                        else if ( (LA197_1507==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2535;}
                        else if ( (LA197_1507==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2536;}
                        input.seek(index197_1507);
    return s;
  }
  private int sst_30() {
    int s = -1;
                        int LA197_1576 = input.LA(1);
                        int index197_1576 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA197_1576==RPAREN) ) {s = 2537;}
                        else if ( (LA197_1576==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2538;}
                        else if ( (LA197_1576==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2539;}
                        else if ( (LA197_1576==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2540;}
                        else if ( (LA197_1576==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2541;}
                        else if ( (LA197_1576==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2542;}
                        else if ( (LA197_1576==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2543;}
                        else if ( (LA197_1576==LT) && (synpred3_EsperEPL2Grammar())) {s = 2544;}
                        else if ( (LA197_1576==GT) && (synpred3_EsperEPL2Grammar())) {s = 2545;}
                        else if ( (LA197_1576==LE) && (synpred3_EsperEPL2Grammar())) {s = 2546;}
                        else if ( (LA197_1576==GE) && (synpred3_EsperEPL2Grammar())) {s = 2547;}
                        else if ( (LA197_1576==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2548;}
                        else if ( (LA197_1576==IS) && (synpred3_EsperEPL2Grammar())) {s = 2549;}
                        else if ( (LA197_1576==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2550;}
                        else if ( (LA197_1576==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2551;}
                        else if ( (LA197_1576==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2552;}
                        else if ( (LA197_1576==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2553;}
                        else if ( (LA197_1576==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2554;}
                        else if ( (LA197_1576==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2555;}
                        else if ( (LA197_1576==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2556;}
                        else if ( (LA197_1576==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2557;}
                        else if ( (LA197_1576==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2558;}
                        else if ( (LA197_1576==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2559;}
                        else if ( (LA197_1576==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2560;}
                        else if ( (LA197_1576==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2561;}
                        input.seek(index197_1576);
    return s;
  }
  private int sst_31() {
    int s = -1;
                        int LA197_1577 = input.LA(1);
                        int index197_1577 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA197_1577==RPAREN) ) {s = 2562;}
                        else if ( (LA197_1577==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2563;}
                        else if ( (LA197_1577==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2564;}
                        else if ( (LA197_1577==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2565;}
                        else if ( (LA197_1577==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2566;}
                        else if ( (LA197_1577==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2567;}
                        else if ( (LA197_1577==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2568;}
                        else if ( (LA197_1577==LT) && (synpred3_EsperEPL2Grammar())) {s = 2569;}
                        else if ( (LA197_1577==GT) && (synpred3_EsperEPL2Grammar())) {s = 2570;}
                        else if ( (LA197_1577==LE) && (synpred3_EsperEPL2Grammar())) {s = 2571;}
                        else if ( (LA197_1577==GE) && (synpred3_EsperEPL2Grammar())) {s = 2572;}
                        else if ( (LA197_1577==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2573;}
                        else if ( (LA197_1577==IS) && (synpred3_EsperEPL2Grammar())) {s = 2574;}
                        else if ( (LA197_1577==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2575;}
                        else if ( (LA197_1577==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2576;}
                        else if ( (LA197_1577==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2577;}
                        else if ( (LA197_1577==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2578;}
                        else if ( (LA197_1577==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2579;}
                        else if ( (LA197_1577==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2580;}
                        else if ( (LA197_1577==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2581;}
                        else if ( (LA197_1577==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2582;}
                        else if ( (LA197_1577==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2583;}
                        else if ( (LA197_1577==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2584;}
                        else if ( (LA197_1577==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2585;}
                        else if ( (LA197_1577==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2586;}
                        input.seek(index197_1577);
    return s;
  }
  private int sst_32() {
    int s = -1;
                        int LA197_1646 = input.LA(1);
                        int index197_1646 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA197_1646==RPAREN) ) {s = 2587;}
                        else if ( (LA197_1646==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2588;}
                        else if ( (LA197_1646==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2589;}
                        else if ( (LA197_1646==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2590;}
                        else if ( (LA197_1646==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2591;}
                        else if ( (LA197_1646==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2592;}
                        else if ( (LA197_1646==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2593;}
                        else if ( (LA197_1646==LT) && (synpred3_EsperEPL2Grammar())) {s = 2594;}
                        else if ( (LA197_1646==GT) && (synpred3_EsperEPL2Grammar())) {s = 2595;}
                        else if ( (LA197_1646==LE) && (synpred3_EsperEPL2Grammar())) {s = 2596;}
                        else if ( (LA197_1646==GE) && (synpred3_EsperEPL2Grammar())) {s = 2597;}
                        else if ( (LA197_1646==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2598;}
                        else if ( (LA197_1646==IS) && (synpred3_EsperEPL2Grammar())) {s = 2599;}
                        else if ( (LA197_1646==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2600;}
                        else if ( (LA197_1646==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2601;}
                        else if ( (LA197_1646==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2602;}
                        else if ( (LA197_1646==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2603;}
                        else if ( (LA197_1646==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2604;}
                        else if ( (LA197_1646==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2605;}
                        else if ( (LA197_1646==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2606;}
                        else if ( (LA197_1646==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2607;}
                        else if ( (LA197_1646==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2608;}
                        else if ( (LA197_1646==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2609;}
                        else if ( (LA197_1646==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2610;}
                        else if ( (LA197_1646==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2611;}
                        else if ( (LA197_1646==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2612;}
                        input.seek(index197_1646);
    return s;
  }
  private int sst_33() {
    int s = -1;
                        int LA197_1647 = input.LA(1);
                        int index197_1647 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA197_1647==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2613;}
                        else if ( (LA197_1647==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2614;}
                        else if ( (LA197_1647==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2615;}
                        else if ( (LA197_1647==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2616;}
                        else if ( (LA197_1647==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2617;}
                        else if ( (LA197_1647==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2618;}
                        else if ( (LA197_1647==LT) && (synpred3_EsperEPL2Grammar())) {s = 2619;}
                        else if ( (LA197_1647==GT) && (synpred3_EsperEPL2Grammar())) {s = 2620;}
                        else if ( (LA197_1647==LE) && (synpred3_EsperEPL2Grammar())) {s = 2621;}
                        else if ( (LA197_1647==GE) && (synpred3_EsperEPL2Grammar())) {s = 2622;}
                        else if ( (LA197_1647==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2623;}
                        else if ( (LA197_1647==IS) && (synpred3_EsperEPL2Grammar())) {s = 2624;}
                        else if ( (LA197_1647==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2625;}
                        else if ( (LA197_1647==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2626;}
                        else if ( (LA197_1647==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2627;}
                        else if ( (LA197_1647==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2628;}
                        else if ( (LA197_1647==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2629;}
                        else if ( (LA197_1647==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2630;}
                        else if ( (LA197_1647==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2631;}
                        else if ( (LA197_1647==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2632;}
                        else if ( (LA197_1647==RPAREN) ) {s = 2633;}
                        else if ( (LA197_1647==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2634;}
                        else if ( (LA197_1647==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2635;}
                        else if ( (LA197_1647==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2636;}
                        else if ( (LA197_1647==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2637;}
                        else if ( (LA197_1647==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2638;}
                        input.seek(index197_1647);
    return s;
  }
  private int sst_34() {
    int s = -1;
                        int LA197_1715 = input.LA(1);
                        int index197_1715 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA197_1715==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2639;}
                        else if ( (LA197_1715==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2640;}
                        else if ( (LA197_1715==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2641;}
                        else if ( (LA197_1715==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2642;}
                        else if ( (LA197_1715==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2643;}
                        else if ( (LA197_1715==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2644;}
                        else if ( (LA197_1715==LT) && (synpred3_EsperEPL2Grammar())) {s = 2645;}
                        else if ( (LA197_1715==GT) && (synpred3_EsperEPL2Grammar())) {s = 2646;}
                        else if ( (LA197_1715==LE) && (synpred3_EsperEPL2Grammar())) {s = 2647;}
                        else if ( (LA197_1715==GE) && (synpred3_EsperEPL2Grammar())) {s = 2648;}
                        else if ( (LA197_1715==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2649;}
                        else if ( (LA197_1715==IS) && (synpred3_EsperEPL2Grammar())) {s = 2650;}
                        else if ( (LA197_1715==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2651;}
                        else if ( (LA197_1715==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2652;}
                        else if ( (LA197_1715==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2653;}
                        else if ( (LA197_1715==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2654;}
                        else if ( (LA197_1715==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2655;}
                        else if ( (LA197_1715==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2656;}
                        else if ( (LA197_1715==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2657;}
                        else if ( (LA197_1715==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2658;}
                        else if ( (LA197_1715==RPAREN) ) {s = 2659;}
                        else if ( (LA197_1715==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2660;}
                        else if ( (LA197_1715==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2661;}
                        else if ( (LA197_1715==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2662;}
                        else if ( (LA197_1715==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2663;}
                        else if ( (LA197_1715==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2664;}
                        input.seek(index197_1715);
    return s;
  }
  private int sst_35() {
    int s = -1;
                        int LA197_1716 = input.LA(1);
                        int index197_1716 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA197_1716==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2665;}
                        else if ( (LA197_1716==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2666;}
                        else if ( (LA197_1716==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2667;}
                        else if ( (LA197_1716==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2668;}
                        else if ( (LA197_1716==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2669;}
                        else if ( (LA197_1716==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2670;}
                        else if ( (LA197_1716==LT) && (synpred3_EsperEPL2Grammar())) {s = 2671;}
                        else if ( (LA197_1716==GT) && (synpred3_EsperEPL2Grammar())) {s = 2672;}
                        else if ( (LA197_1716==LE) && (synpred3_EsperEPL2Grammar())) {s = 2673;}
                        else if ( (LA197_1716==GE) && (synpred3_EsperEPL2Grammar())) {s = 2674;}
                        else if ( (LA197_1716==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2675;}
                        else if ( (LA197_1716==IS) && (synpred3_EsperEPL2Grammar())) {s = 2676;}
                        else if ( (LA197_1716==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2677;}
                        else if ( (LA197_1716==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2678;}
                        else if ( (LA197_1716==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2679;}
                        else if ( (LA197_1716==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2680;}
                        else if ( (LA197_1716==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2681;}
                        else if ( (LA197_1716==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2682;}
                        else if ( (LA197_1716==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2683;}
                        else if ( (LA197_1716==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2684;}
                        else if ( (LA197_1716==RPAREN) ) {s = 2685;}
                        else if ( (LA197_1716==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2686;}
                        else if ( (LA197_1716==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2687;}
                        else if ( (LA197_1716==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2688;}
                        else if ( (LA197_1716==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2689;}
                        else if ( (LA197_1716==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2690;}
                        input.seek(index197_1716);
    return s;
  }
  private int sst_36() {
    int s = -1;
                        int LA197_1775 = input.LA(1);
                        int index197_1775 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA197_1775==RPAREN) ) {s = 2691;}
                        else if ( (LA197_1775==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2692;}
                        else if ( (LA197_1775==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2693;}
                        else if ( (LA197_1775==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2694;}
                        else if ( (LA197_1775==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2695;}
                        else if ( (LA197_1775==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2696;}
                        else if ( (LA197_1775==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2697;}
                        else if ( (LA197_1775==LT) && (synpred3_EsperEPL2Grammar())) {s = 2698;}
                        else if ( (LA197_1775==GT) && (synpred3_EsperEPL2Grammar())) {s = 2699;}
                        else if ( (LA197_1775==LE) && (synpred3_EsperEPL2Grammar())) {s = 2700;}
                        else if ( (LA197_1775==GE) && (synpred3_EsperEPL2Grammar())) {s = 2701;}
                        else if ( (LA197_1775==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2702;}
                        else if ( (LA197_1775==IS) && (synpred3_EsperEPL2Grammar())) {s = 2703;}
                        else if ( (LA197_1775==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2704;}
                        else if ( (LA197_1775==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2705;}
                        else if ( (LA197_1775==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2706;}
                        else if ( (LA197_1775==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2707;}
                        else if ( (LA197_1775==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2708;}
                        else if ( (LA197_1775==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2709;}
                        else if ( (LA197_1775==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2710;}
                        else if ( (LA197_1775==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2711;}
                        else if ( (LA197_1775==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2712;}
                        else if ( (LA197_1775==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2713;}
                        else if ( (LA197_1775==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2714;}
                        else if ( (LA197_1775==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2715;}
                        else if ( (LA197_1775==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2716;}
                        input.seek(index197_1775);
    return s;
  }
  private int sst_37() {
    int s = -1;
                        int LA197_1776 = input.LA(1);
                        int index197_1776 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA197_1776==RPAREN) ) {s = 2717;}
                        else if ( (LA197_1776==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2718;}
                        else if ( (LA197_1776==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2719;}
                        else if ( (LA197_1776==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2720;}
                        else if ( (LA197_1776==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2721;}
                        else if ( (LA197_1776==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2722;}
                        else if ( (LA197_1776==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2723;}
                        else if ( (LA197_1776==LT) && (synpred3_EsperEPL2Grammar())) {s = 2724;}
                        else if ( (LA197_1776==GT) && (synpred3_EsperEPL2Grammar())) {s = 2725;}
                        else if ( (LA197_1776==LE) && (synpred3_EsperEPL2Grammar())) {s = 2726;}
                        else if ( (LA197_1776==GE) && (synpred3_EsperEPL2Grammar())) {s = 2727;}
                        else if ( (LA197_1776==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2728;}
                        else if ( (LA197_1776==IS) && (synpred3_EsperEPL2Grammar())) {s = 2729;}
                        else if ( (LA197_1776==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2730;}
                        else if ( (LA197_1776==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2731;}
                        else if ( (LA197_1776==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2732;}
                        else if ( (LA197_1776==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2733;}
                        else if ( (LA197_1776==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2734;}
                        else if ( (LA197_1776==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2735;}
                        else if ( (LA197_1776==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2736;}
                        else if ( (LA197_1776==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2737;}
                        else if ( (LA197_1776==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2738;}
                        else if ( (LA197_1776==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2739;}
                        else if ( (LA197_1776==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2740;}
                        else if ( (LA197_1776==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2741;}
                        else if ( (LA197_1776==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2742;}
                        input.seek(index197_1776);
    return s;
  }
  private int sst_38() {
    int s = -1;
                        int LA197_1843 = input.LA(1);
                        int index197_1843 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA197_1843==RPAREN) ) {s = 2743;}
                        else if ( (LA197_1843==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2744;}
                        else if ( (LA197_1843==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2745;}
                        else if ( (LA197_1843==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2746;}
                        else if ( (LA197_1843==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2747;}
                        else if ( (LA197_1843==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2748;}
                        else if ( (LA197_1843==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2749;}
                        else if ( (LA197_1843==LT) && (synpred3_EsperEPL2Grammar())) {s = 2750;}
                        else if ( (LA197_1843==GT) && (synpred3_EsperEPL2Grammar())) {s = 2751;}
                        else if ( (LA197_1843==LE) && (synpred3_EsperEPL2Grammar())) {s = 2752;}
                        else if ( (LA197_1843==GE) && (synpred3_EsperEPL2Grammar())) {s = 2753;}
                        else if ( (LA197_1843==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2754;}
                        else if ( (LA197_1843==IS) && (synpred3_EsperEPL2Grammar())) {s = 2755;}
                        else if ( (LA197_1843==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2756;}
                        else if ( (LA197_1843==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2757;}
                        else if ( (LA197_1843==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2758;}
                        else if ( (LA197_1843==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2759;}
                        else if ( (LA197_1843==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2760;}
                        else if ( (LA197_1843==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2761;}
                        else if ( (LA197_1843==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2762;}
                        else if ( (LA197_1843==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2763;}
                        else if ( (LA197_1843==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2764;}
                        else if ( (LA197_1843==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2765;}
                        else if ( (LA197_1843==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2766;}
                        else if ( (LA197_1843==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2767;}
                        else if ( (LA197_1843==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2768;}
                        input.seek(index197_1843);
    return s;
  }
  private int sst_39() {
    int s = -1;
                        int LA197_1844 = input.LA(1);
                        int index197_1844 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA197_1844==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2769;}
                        else if ( (LA197_1844==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2770;}
                        else if ( (LA197_1844==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2771;}
                        else if ( (LA197_1844==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2772;}
                        else if ( (LA197_1844==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2773;}
                        else if ( (LA197_1844==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2774;}
                        else if ( (LA197_1844==LT) && (synpred3_EsperEPL2Grammar())) {s = 2775;}
                        else if ( (LA197_1844==GT) && (synpred3_EsperEPL2Grammar())) {s = 2776;}
                        else if ( (LA197_1844==LE) && (synpred3_EsperEPL2Grammar())) {s = 2777;}
                        else if ( (LA197_1844==GE) && (synpred3_EsperEPL2Grammar())) {s = 2778;}
                        else if ( (LA197_1844==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2779;}
                        else if ( (LA197_1844==IS) && (synpred3_EsperEPL2Grammar())) {s = 2780;}
                        else if ( (LA197_1844==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2781;}
                        else if ( (LA197_1844==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2782;}
                        else if ( (LA197_1844==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2783;}
                        else if ( (LA197_1844==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2784;}
                        else if ( (LA197_1844==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2785;}
                        else if ( (LA197_1844==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2786;}
                        else if ( (LA197_1844==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2787;}
                        else if ( (LA197_1844==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2788;}
                        else if ( (LA197_1844==RPAREN) ) {s = 2789;}
                        else if ( (LA197_1844==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2790;}
                        else if ( (LA197_1844==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2791;}
                        else if ( (LA197_1844==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2792;}
                        else if ( (LA197_1844==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2793;}
                        else if ( (LA197_1844==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2794;}
                        input.seek(index197_1844);
    return s;
  }
  private int sst_40() {
    int s = -1;
                        int LA197_1914 = input.LA(1);
                        int index197_1914 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA197_1914==RPAREN) ) {s = 14;}
                        else if ( (LA197_1914==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2796;}
                        else if ( (LA197_1914==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2797;}
                        else if ( (LA197_1914==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2798;}
                        else if ( (LA197_1914==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2799;}
                        else if ( (LA197_1914==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2800;}
                        else if ( (LA197_1914==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2801;}
                        else if ( (LA197_1914==LT) && (synpred3_EsperEPL2Grammar())) {s = 2802;}
                        else if ( (LA197_1914==GT) && (synpred3_EsperEPL2Grammar())) {s = 2803;}
                        else if ( (LA197_1914==LE) && (synpred3_EsperEPL2Grammar())) {s = 2804;}
                        else if ( (LA197_1914==GE) && (synpred3_EsperEPL2Grammar())) {s = 2805;}
                        else if ( (LA197_1914==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2806;}
                        else if ( (LA197_1914==IS) && (synpred3_EsperEPL2Grammar())) {s = 2807;}
                        else if ( (LA197_1914==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2808;}
                        else if ( (LA197_1914==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2809;}
                        else if ( (LA197_1914==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2810;}
                        else if ( (LA197_1914==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2811;}
                        else if ( (LA197_1914==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2812;}
                        else if ( (LA197_1914==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2813;}
                        else if ( (LA197_1914==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2814;}
                        else if ( (LA197_1914==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2815;}
                        else if ( (LA197_1914==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2816;}
                        else if ( (LA197_1914==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2817;}
                        else if ( (LA197_1914==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2818;}
                        else if ( (LA197_1914==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2819;}
                        else if ( (LA197_1914==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2820;}
                        input.seek(index197_1914);
    return s;
  }
  private int sst_41() {
    int s = -1;
                        int LA197_1915 = input.LA(1);
                        int index197_1915 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA197_1915==RPAREN) ) {s = 14;}
                        else if ( (LA197_1915==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2822;}
                        else if ( (LA197_1915==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2823;}
                        else if ( (LA197_1915==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2824;}
                        else if ( (LA197_1915==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2825;}
                        else if ( (LA197_1915==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2826;}
                        else if ( (LA197_1915==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2827;}
                        else if ( (LA197_1915==LT) && (synpred3_EsperEPL2Grammar())) {s = 2828;}
                        else if ( (LA197_1915==GT) && (synpred3_EsperEPL2Grammar())) {s = 2829;}
                        else if ( (LA197_1915==LE) && (synpred3_EsperEPL2Grammar())) {s = 2830;}
                        else if ( (LA197_1915==GE) && (synpred3_EsperEPL2Grammar())) {s = 2831;}
                        else if ( (LA197_1915==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2832;}
                        else if ( (LA197_1915==IS) && (synpred3_EsperEPL2Grammar())) {s = 2833;}
                        else if ( (LA197_1915==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2834;}
                        else if ( (LA197_1915==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2835;}
                        else if ( (LA197_1915==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2836;}
                        else if ( (LA197_1915==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2837;}
                        else if ( (LA197_1915==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2838;}
                        else if ( (LA197_1915==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2839;}
                        else if ( (LA197_1915==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2840;}
                        else if ( (LA197_1915==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2841;}
                        else if ( (LA197_1915==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2842;}
                        else if ( (LA197_1915==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2843;}
                        else if ( (LA197_1915==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2844;}
                        else if ( (LA197_1915==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2845;}
                        else if ( (LA197_1915==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2846;}
                        input.seek(index197_1915);
    return s;
  }
  private int sst_42() {
    int s = -1;
                        int LA197_1982 = input.LA(1);
                        int index197_1982 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA197_1982==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2847;}
                        else if ( (LA197_1982==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2848;}
                        else if ( (LA197_1982==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2849;}
                        else if ( (LA197_1982==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2850;}
                        else if ( (LA197_1982==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2851;}
                        else if ( (LA197_1982==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2852;}
                        else if ( (LA197_1982==LT) && (synpred3_EsperEPL2Grammar())) {s = 2853;}
                        else if ( (LA197_1982==GT) && (synpred3_EsperEPL2Grammar())) {s = 2854;}
                        else if ( (LA197_1982==LE) && (synpred3_EsperEPL2Grammar())) {s = 2855;}
                        else if ( (LA197_1982==GE) && (synpred3_EsperEPL2Grammar())) {s = 2856;}
                        else if ( (LA197_1982==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2857;}
                        else if ( (LA197_1982==IS) && (synpred3_EsperEPL2Grammar())) {s = 2858;}
                        else if ( (LA197_1982==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2859;}
                        else if ( (LA197_1982==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2860;}
                        else if ( (LA197_1982==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2861;}
                        else if ( (LA197_1982==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2862;}
                        else if ( (LA197_1982==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2863;}
                        else if ( (LA197_1982==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2864;}
                        else if ( (LA197_1982==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2865;}
                        else if ( (LA197_1982==RPAREN) ) {s = 2866;}
                        else if ( (LA197_1982==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2867;}
                        else if ( (LA197_1982==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2868;}
                        else if ( (LA197_1982==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2869;}
                        else if ( (LA197_1982==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2870;}
                        else if ( (LA197_1982==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2871;}
                        input.seek(index197_1982);
    return s;
  }
  private int sst_43() {
    int s = -1;
                        int LA197_1983 = input.LA(1);
                        int index197_1983 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA197_1983==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2872;}
                        else if ( (LA197_1983==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2873;}
                        else if ( (LA197_1983==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2874;}
                        else if ( (LA197_1983==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2875;}
                        else if ( (LA197_1983==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2876;}
                        else if ( (LA197_1983==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2877;}
                        else if ( (LA197_1983==LT) && (synpred3_EsperEPL2Grammar())) {s = 2878;}
                        else if ( (LA197_1983==GT) && (synpred3_EsperEPL2Grammar())) {s = 2879;}
                        else if ( (LA197_1983==LE) && (synpred3_EsperEPL2Grammar())) {s = 2880;}
                        else if ( (LA197_1983==GE) && (synpred3_EsperEPL2Grammar())) {s = 2881;}
                        else if ( (LA197_1983==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2882;}
                        else if ( (LA197_1983==IS) && (synpred3_EsperEPL2Grammar())) {s = 2883;}
                        else if ( (LA197_1983==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2884;}
                        else if ( (LA197_1983==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2885;}
                        else if ( (LA197_1983==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2886;}
                        else if ( (LA197_1983==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2887;}
                        else if ( (LA197_1983==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2888;}
                        else if ( (LA197_1983==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2889;}
                        else if ( (LA197_1983==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2890;}
                        else if ( (LA197_1983==RPAREN) ) {s = 2891;}
                        else if ( (LA197_1983==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2892;}
                        else if ( (LA197_1983==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2893;}
                        else if ( (LA197_1983==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2894;}
                        else if ( (LA197_1983==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2895;}
                        else if ( (LA197_1983==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2896;}
                        input.seek(index197_1983);
    return s;
  }
  private int sst_44() {
    int s = -1;
                        int LA197_2057 = input.LA(1);
                        int index197_2057 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA197_2057==RPAREN) ) {s = 14;}
                        else if ( (LA197_2057==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2898;}
                        else if ( (LA197_2057==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2899;}
                        else if ( (LA197_2057==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2900;}
                        else if ( (LA197_2057==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2901;}
                        else if ( (LA197_2057==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2902;}
                        else if ( (LA197_2057==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2903;}
                        else if ( (LA197_2057==LT) && (synpred3_EsperEPL2Grammar())) {s = 2904;}
                        else if ( (LA197_2057==GT) && (synpred3_EsperEPL2Grammar())) {s = 2905;}
                        else if ( (LA197_2057==LE) && (synpred3_EsperEPL2Grammar())) {s = 2906;}
                        else if ( (LA197_2057==GE) && (synpred3_EsperEPL2Grammar())) {s = 2907;}
                        else if ( (LA197_2057==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2908;}
                        else if ( (LA197_2057==IS) && (synpred3_EsperEPL2Grammar())) {s = 2909;}
                        else if ( (LA197_2057==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2910;}
                        else if ( (LA197_2057==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2911;}
                        else if ( (LA197_2057==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2912;}
                        else if ( (LA197_2057==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2913;}
                        else if ( (LA197_2057==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2914;}
                        else if ( (LA197_2057==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2915;}
                        else if ( (LA197_2057==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2916;}
                        else if ( (LA197_2057==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2917;}
                        else if ( (LA197_2057==AS) && (synpred3_EsperEPL2Grammar())) {s = 2918;}
                        else if ( (LA197_2057==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2919;}
                        else if ( (LA197_2057==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2920;}
                        else if ( (LA197_2057==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2921;}
                        else if ( (LA197_2057==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2922;}
                        else if ( (LA197_2057==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2923;}
                        input.seek(index197_2057);
    return s;
  }
  private int sst_45() {
    int s = -1;
                        int LA197_2058 = input.LA(1);
                        int index197_2058 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA197_2058==RPAREN) ) {s = 14;}
                        else if ( (LA197_2058==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2925;}
                        else if ( (LA197_2058==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2926;}
                        else if ( (LA197_2058==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2927;}
                        else if ( (LA197_2058==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2928;}
                        else if ( (LA197_2058==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2929;}
                        else if ( (LA197_2058==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2930;}
                        else if ( (LA197_2058==LT) && (synpred3_EsperEPL2Grammar())) {s = 2931;}
                        else if ( (LA197_2058==GT) && (synpred3_EsperEPL2Grammar())) {s = 2932;}
                        else if ( (LA197_2058==LE) && (synpred3_EsperEPL2Grammar())) {s = 2933;}
                        else if ( (LA197_2058==GE) && (synpred3_EsperEPL2Grammar())) {s = 2934;}
                        else if ( (LA197_2058==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2935;}
                        else if ( (LA197_2058==IS) && (synpred3_EsperEPL2Grammar())) {s = 2936;}
                        else if ( (LA197_2058==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2937;}
                        else if ( (LA197_2058==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2938;}
                        else if ( (LA197_2058==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2939;}
                        else if ( (LA197_2058==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2940;}
                        else if ( (LA197_2058==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2941;}
                        else if ( (LA197_2058==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2942;}
                        else if ( (LA197_2058==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2943;}
                        else if ( (LA197_2058==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2944;}
                        else if ( (LA197_2058==AS) && (synpred3_EsperEPL2Grammar())) {s = 2945;}
                        else if ( (LA197_2058==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2946;}
                        else if ( (LA197_2058==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2947;}
                        else if ( (LA197_2058==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2948;}
                        else if ( (LA197_2058==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2949;}
                        else if ( (LA197_2058==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2950;}
                        input.seek(index197_2058);
    return s;
  }
  private int sst_46() {
    int s = -1;
                        int LA197_2127 = input.LA(1);
                        int index197_2127 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA197_2127==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2951;}
                        else if ( (LA197_2127==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2952;}
                        else if ( (LA197_2127==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2953;}
                        else if ( (LA197_2127==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2954;}
                        else if ( (LA197_2127==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2955;}
                        else if ( (LA197_2127==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2956;}
                        else if ( (LA197_2127==LT) && (synpred3_EsperEPL2Grammar())) {s = 2957;}
                        else if ( (LA197_2127==GT) && (synpred3_EsperEPL2Grammar())) {s = 2958;}
                        else if ( (LA197_2127==LE) && (synpred3_EsperEPL2Grammar())) {s = 2959;}
                        else if ( (LA197_2127==GE) && (synpred3_EsperEPL2Grammar())) {s = 2960;}
                        else if ( (LA197_2127==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2961;}
                        else if ( (LA197_2127==IS) && (synpred3_EsperEPL2Grammar())) {s = 2962;}
                        else if ( (LA197_2127==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2963;}
                        else if ( (LA197_2127==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2964;}
                        else if ( (LA197_2127==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2965;}
                        else if ( (LA197_2127==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2966;}
                        else if ( (LA197_2127==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2967;}
                        else if ( (LA197_2127==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2968;}
                        else if ( (LA197_2127==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2969;}
                        else if ( (LA197_2127==RPAREN) ) {s = 2970;}
                        else if ( (LA197_2127==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2971;}
                        else if ( (LA197_2127==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2972;}
                        else if ( (LA197_2127==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2973;}
                        else if ( (LA197_2127==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2974;}
                        else if ( (LA197_2127==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2975;}
                        input.seek(index197_2127);
    return s;
  }
  private int sst_47() {
    int s = -1;
                        int LA197_2128 = input.LA(1);
                        int index197_2128 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA197_2128==RPAREN) ) {s = 2976;}
                        else if ( (LA197_2128==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2977;}
                        else if ( (LA197_2128==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2978;}
                        else if ( (LA197_2128==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2979;}
                        else if ( (LA197_2128==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2980;}
                        else if ( (LA197_2128==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2981;}
                        else if ( (LA197_2128==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2982;}
                        else if ( (LA197_2128==LT) && (synpred3_EsperEPL2Grammar())) {s = 2983;}
                        else if ( (LA197_2128==GT) && (synpred3_EsperEPL2Grammar())) {s = 2984;}
                        else if ( (LA197_2128==LE) && (synpred3_EsperEPL2Grammar())) {s = 2985;}
                        else if ( (LA197_2128==GE) && (synpred3_EsperEPL2Grammar())) {s = 2986;}
                        else if ( (LA197_2128==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2987;}
                        else if ( (LA197_2128==IS) && (synpred3_EsperEPL2Grammar())) {s = 2988;}
                        else if ( (LA197_2128==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2989;}
                        else if ( (LA197_2128==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2990;}
                        else if ( (LA197_2128==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2991;}
                        else if ( (LA197_2128==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2992;}
                        else if ( (LA197_2128==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2993;}
                        else if ( (LA197_2128==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2994;}
                        else if ( (LA197_2128==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2995;}
                        else if ( (LA197_2128==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2996;}
                        else if ( (LA197_2128==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2997;}
                        else if ( (LA197_2128==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2998;}
                        else if ( (LA197_2128==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2999;}
                        else if ( (LA197_2128==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 3000;}
                        input.seek(index197_2128);
    return s;
  }
  private int sst_48() {
    int s = -1;
                        int LA197_2254 = input.LA(1);
                        int index197_2254 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3000;}
                        input.seek(index197_2254);
    return s;
  }
  private int sst_49() {
    int s = -1;
                        int LA197_2279 = input.LA(1);
                        int index197_2279 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3000;}
                        input.seek(index197_2279);
    return s;
  }
  private int sst_50() {
    int s = -1;
                        int LA197_2304 = input.LA(1);
                        int index197_2304 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3000;}
                        input.seek(index197_2304);
    return s;
  }
  private int sst_51() {
    int s = -1;
                        int LA197_2329 = input.LA(1);
                        int index197_2329 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3000;}
                        input.seek(index197_2329);
    return s;
  }
  private int sst_52() {
    int s = -1;
                        int LA197_2354 = input.LA(1);
                        int index197_2354 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3000;}
                        input.seek(index197_2354);
    return s;
  }
  private int sst_53() {
    int s = -1;
                        int LA197_2379 = input.LA(1);
                        int index197_2379 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3000;}
                        input.seek(index197_2379);
    return s;
  }
  private int sst_54() {
    int s = -1;
                        int LA197_2437 = input.LA(1);
                        int index197_2437 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3000;}
                        input.seek(index197_2437);
    return s;
  }
  private int sst_55() {
    int s = -1;
                        int LA197_2462 = input.LA(1);
                        int index197_2462 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3000;}
                        input.seek(index197_2462);
    return s;
  }
  private int sst_56() {
    int s = -1;
                        int LA197_2487 = input.LA(1);
                        int index197_2487 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3000;}
                        input.seek(index197_2487);
    return s;
  }
  private int sst_57() {
    int s = -1;
                        int LA197_2512 = input.LA(1);
                        int index197_2512 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3000;}
                        input.seek(index197_2512);
    return s;
  }
  private int sst_58() {
    int s = -1;
                        int LA197_2537 = input.LA(1);
                        int index197_2537 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3000;}
                        input.seek(index197_2537);
    return s;
  }
  private int sst_59() {
    int s = -1;
                        int LA197_2562 = input.LA(1);
                        int index197_2562 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3000;}
                        input.seek(index197_2562);
    return s;
  }
  private int sst_60() {
    int s = -1;
                        int LA197_2587 = input.LA(1);
                        int index197_2587 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3000;}
                        input.seek(index197_2587);
    return s;
  }
  private int sst_61() {
    int s = -1;
                        int LA197_2633 = input.LA(1);
                        int index197_2633 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3000;}
                        input.seek(index197_2633);
    return s;
  }
  private int sst_62() {
    int s = -1;
                        int LA197_2659 = input.LA(1);
                        int index197_2659 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3000;}
                        input.seek(index197_2659);
    return s;
  }
  private int sst_63() {
    int s = -1;
                        int LA197_2685 = input.LA(1);
                        int index197_2685 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3000;}
                        input.seek(index197_2685);
    return s;
  }
  private int sst_64() {
    int s = -1;
                        int LA197_2691 = input.LA(1);
                        int index197_2691 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3000;}
                        input.seek(index197_2691);
    return s;
  }
  private int sst_65() {
    int s = -1;
                        int LA197_2717 = input.LA(1);
                        int index197_2717 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3000;}
                        input.seek(index197_2717);
    return s;
  }
  private int sst_66() {
    int s = -1;
                        int LA197_2743 = input.LA(1);
                        int index197_2743 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3000;}
                        input.seek(index197_2743);
    return s;
  }
  private int sst_67() {
    int s = -1;
                        int LA197_2789 = input.LA(1);
                        int index197_2789 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3000;}
                        input.seek(index197_2789);
    return s;
  }
  private int sst_68() {
    int s = -1;
                        int LA197_2866 = input.LA(1);
                        int index197_2866 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3000;}
                        input.seek(index197_2866);
    return s;
  }
  private int sst_69() {
    int s = -1;
                        int LA197_2891 = input.LA(1);
                        int index197_2891 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3000;}
                        input.seek(index197_2891);
    return s;
  }
  private int sst_70() {
    int s = -1;
                        int LA197_2970 = input.LA(1);
                        int index197_2970 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3000;}
                        input.seek(index197_2970);
    return s;
  }
  private int sst_71() {
    int s = -1;
                        int LA197_2976 = input.LA(1);
                        int index197_2976 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 3000;}
                        input.seek(index197_2976);
    return s;
  }
    }
    public static final BitSet FOLLOW_annotationNoEnum_in_startPatternExpressionRule1749 = new BitSet(new long[]{0x000000000000E000L,0x0800000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000041200000000L,0x0000000010000010L});
    public static final BitSet FOLLOW_expressionDecl_in_startPatternExpressionRule1754 = new BitSet(new long[]{0x000000000000E000L,0x0800000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000041200000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_patternExpression_in_startPatternExpressionRule1759 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_startPatternExpressionRule1763 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationEnum_in_startEPLExpressionRule1777 = new BitSet(new long[]{0x0040020008000010L,0x0800800000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_expressionDecl_in_startEPLExpressionRule1783 = new BitSet(new long[]{0x0040020008000010L,0x0800800000000000L});
    public static final BitSet FOLLOW_eplExpression_in_startEPLExpressionRule1788 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_startEPLExpressionRule1792 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventProperty_in_startEventPropertyRule1821 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_startEventPropertyRule1825 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXPRESSIONDECL_in_expressionDecl1844 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_IDENT_in_expressionDecl1848 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_LCURLY_in_expressionDecl1850 = new BitSet(new long[]{0x803801E817FD6420L,0x069C1C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x9006C01600080000L,0x0000000000000070L});
    public static final BitSet FOLLOW_expressionLambdaDecl_in_expressionDecl1852 = new BitSet(new long[]{0x803801E817FD6420L,0x069C1C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x9006C01600080000L,0x0000000000000070L});
    public static final BitSet FOLLOW_expression_in_expressionDecl1855 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_RCURLY_in_expressionDecl1857 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_expressionLambdaDecl1891 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_LPAREN_in_expressionLambdaDecl1896 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_columnList_in_expressionLambdaDecl1898 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_RPAREN_in_expressionLambdaDecl1900 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_GOES_in_expressionLambdaDecl1904 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EMAILAT_in_annotationNoEnum1939 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_classIdentifier_in_annotationNoEnum1941 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_LPAREN_in_annotationNoEnum1945 = new BitSet(new long[]{0x0040020008000010L,0x08009C0000000000L,0x0000000000000000L,0x0000000000000000L,0x9006402600080000L,0x0000000010000060L});
    public static final BitSet FOLLOW_elementValuePairsNoEnum_in_annotationNoEnum1949 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_elementValueNoEnum_in_annotationNoEnum1953 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_RPAREN_in_annotationNoEnum1958 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EMAILAT_in_annotationEnum1999 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_classIdentifier_in_annotationEnum2001 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_LPAREN_in_annotationEnum2005 = new BitSet(new long[]{0x0040020008000010L,0x08009C0000000000L,0x0000000000000000L,0x0000000000000000L,0x9006402600080000L,0x0000000010000070L});
    public static final BitSet FOLLOW_elementValuePairsEnum_in_annotationEnum2009 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_elementValueEnum_in_annotationEnum2013 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_RPAREN_in_annotationEnum2018 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_elementValuePairNoEnum_in_elementValuePairsNoEnum2059 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_COMMA_in_elementValuePairsNoEnum2062 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_elementValuePairNoEnum_in_elementValuePairsNoEnum2065 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_elementValuePairEnum_in_elementValuePairsEnum2086 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_COMMA_in_elementValuePairsEnum2089 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_elementValuePairEnum_in_elementValuePairsEnum2092 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_IDENT_in_elementValuePairNoEnum2115 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_EQUALS_in_elementValuePairNoEnum2117 = new BitSet(new long[]{0x0040020008000010L,0x08009C0000000000L,0x0000000000000000L,0x0000000000000000L,0x9006400400080000L,0x0000000010000060L});
    public static final BitSet FOLLOW_elementValueNoEnum_in_elementValuePairNoEnum2119 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_elementValuePairEnum2156 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_EQUALS_in_elementValuePairEnum2158 = new BitSet(new long[]{0x0040020008000010L,0x08009C0000000000L,0x0000000000000000L,0x0000000000000000L,0x9006400600080000L,0x0000000010000070L});
    public static final BitSet FOLLOW_elementValueEnum_in_elementValuePairEnum2160 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationEnum_in_elementValueNoEnum2191 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_elementValueArrayNoEnum_in_elementValueNoEnum2202 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constant_in_elementValueNoEnum2215 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationEnum_in_elementValueEnum2238 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_elementValueArrayEnum_in_elementValueEnum2249 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constant_in_elementValueEnum2262 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classIdentifier_in_elementValueEnum2270 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCURLY_in_elementValueArrayNoEnum2290 = new BitSet(new long[]{0x0040020008000010L,0x08009C0000000000L,0x0000000000000000L,0x0000000000000000L,0x9006408C00080000L,0x0000000010000060L});
    public static final BitSet FOLLOW_elementValueNoEnum_in_elementValueArrayNoEnum2293 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008800000000L});
    public static final BitSet FOLLOW_COMMA_in_elementValueArrayNoEnum2296 = new BitSet(new long[]{0x0040020008000010L,0x08009C0000000000L,0x0000000000000000L,0x0000000000000000L,0x9006400400080000L,0x0000000010000060L});
    public static final BitSet FOLLOW_elementValueNoEnum_in_elementValueArrayNoEnum2298 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008800000000L});
    public static final BitSet FOLLOW_COMMA_in_elementValueArrayNoEnum2305 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_RCURLY_in_elementValueArrayNoEnum2309 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCURLY_in_elementValueArrayEnum2338 = new BitSet(new long[]{0x0040020008000010L,0x08009C0000000000L,0x0000000000000000L,0x0000000000000000L,0x9006408E00080000L,0x0000000010000070L});
    public static final BitSet FOLLOW_elementValueEnum_in_elementValueArrayEnum2341 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008800000000L});
    public static final BitSet FOLLOW_COMMA_in_elementValueArrayEnum2344 = new BitSet(new long[]{0x0040020008000010L,0x08009C0000000000L,0x0000000000000000L,0x0000000000000000L,0x9006400600080000L,0x0000000010000070L});
    public static final BitSet FOLLOW_elementValueEnum_in_elementValueArrayEnum2346 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008800000000L});
    public static final BitSet FOLLOW_COMMA_in_elementValueArrayEnum2353 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_RCURLY_in_elementValueArrayEnum2357 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_selectExpr_in_eplExpression2390 = new BitSet(new long[]{0x0000000000000002L,0x0040000000000000L});
    public static final BitSet FOLLOW_createWindowExpr_in_eplExpression2395 = new BitSet(new long[]{0x0000000000000002L,0x0040000000000000L});
    public static final BitSet FOLLOW_createIndexExpr_in_eplExpression2400 = new BitSet(new long[]{0x0000000000000002L,0x0040000000000000L});
    public static final BitSet FOLLOW_createVariableExpr_in_eplExpression2405 = new BitSet(new long[]{0x0000000000000002L,0x0040000000000000L});
    public static final BitSet FOLLOW_createSchemaExpr_in_eplExpression2410 = new BitSet(new long[]{0x0000000000000002L,0x0040000000000000L});
    public static final BitSet FOLLOW_onExpr_in_eplExpression2415 = new BitSet(new long[]{0x0000000000000002L,0x0040000000000000L});
    public static final BitSet FOLLOW_updateExpr_in_eplExpression2420 = new BitSet(new long[]{0x0000000000000002L,0x0040000000000000L});
    public static final BitSet FOLLOW_forExpr_in_eplExpression2423 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSERT_in_selectExpr2437 = new BitSet(new long[]{0x1880000000000000L});
    public static final BitSet FOLLOW_insertIntoExpr_in_selectExpr2440 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_SELECT_in_selectExpr2446 = new BitSet(new long[]{0xB83841E817FD6420L,0x069C1C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x9006D01600080000L,0x0000000000000070L});
    public static final BitSet FOLLOW_selectClause_in_selectExpr2449 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_FROM_in_selectExpr2453 = new BitSet(new long[]{0x0000000000000000L,0x000000000000000CL,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_fromClause_in_selectExpr2456 = new BitSet(new long[]{0x0104300000010002L,0x0001200000000000L});
    public static final BitSet FOLLOW_matchRecog_in_selectExpr2460 = new BitSet(new long[]{0x0104300000010002L,0x0000200000000000L});
    public static final BitSet FOLLOW_WHERE_in_selectExpr2466 = new BitSet(new long[]{0x803801E817FD6420L,0x069C1C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x9006C01600080000L,0x0000000000000070L});
    public static final BitSet FOLLOW_whereClause_in_selectExpr2469 = new BitSet(new long[]{0x0104300000000002L,0x0000200000000000L});
    public static final BitSet FOLLOW_GROUP_in_selectExpr2476 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_BY_in_selectExpr2479 = new BitSet(new long[]{0x803801E817FD6420L,0x069C1C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x9006C01600080000L,0x0000000000000070L});
    public static final BitSet FOLLOW_groupByListExpr_in_selectExpr2482 = new BitSet(new long[]{0x0104200000000002L,0x0000200000000000L});
    public static final BitSet FOLLOW_HAVING_in_selectExpr2489 = new BitSet(new long[]{0x803801E817FD6420L,0x069C1C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x9006C01600080000L,0x0000000000000070L});
    public static final BitSet FOLLOW_havingClause_in_selectExpr2492 = new BitSet(new long[]{0x0104000000000002L,0x0000200000000000L});
    public static final BitSet FOLLOW_OUTPUT_in_selectExpr2499 = new BitSet(new long[]{0x0130800080004000L,0x0020200000440000L});
    public static final BitSet FOLLOW_outputLimit_in_selectExpr2502 = new BitSet(new long[]{0x0100000000000002L,0x0000200000000000L});
    public static final BitSet FOLLOW_ORDER_in_selectExpr2509 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_BY_in_selectExpr2512 = new BitSet(new long[]{0x803801E817FD6420L,0x069C1C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x9006C01600080000L,0x0000000000000070L});
    public static final BitSet FOLLOW_orderByListExpr_in_selectExpr2515 = new BitSet(new long[]{0x0000000000000002L,0x0000200000000000L});
    public static final BitSet FOLLOW_ROW_LIMIT_EXPR_in_selectExpr2522 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x9000400200080000L,0x0000000000000060L});
    public static final BitSet FOLLOW_rowLimit_in_selectExpr2525 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ON_in_onExpr2540 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_onStreamExpr_in_onExpr2542 = new BitSet(new long[]{0x0040000008000000L,0x02008000000A0000L});
    public static final BitSet FOLLOW_onDeleteExpr_in_onExpr2547 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_onSelectExpr_in_onExpr2551 = new BitSet(new long[]{0x0040000000000002L});
    public static final BitSet FOLLOW_onSelectInsertExpr_in_onExpr2554 = new BitSet(new long[]{0x0044000000000002L});
    public static final BitSet FOLLOW_outputClauseInsert_in_onExpr2557 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_onSetExpr_in_onExpr2564 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_onUpdateExpr_in_onExpr2568 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_onMergeExpr_in_onExpr2572 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventFilterExpression_in_onStreamExpr2617 = new BitSet(new long[]{0x0000000000020002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_patternInclusionExpression_in_onStreamExpr2621 = new BitSet(new long[]{0x0000000000020002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_AS_in_onStreamExpr2625 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_IDENT_in_onStreamExpr2629 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_onStreamExpr2635 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UPDATE_in_updateExpr2666 = new BitSet(new long[]{0x1000000000000000L});
    public static final BitSet FOLLOW_ISTREAM_in_updateExpr2668 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_classIdentifier_in_updateExpr2670 = new BitSet(new long[]{0x0000000000020000L,0x0000000000080000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_AS_in_updateExpr2673 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_IDENT_in_updateExpr2677 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_IDENT_in_updateExpr2683 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_SET_in_updateExpr2689 = new BitSet(new long[]{0x803801E807FC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_onSetAssignment_in_updateExpr2691 = new BitSet(new long[]{0x0000000000010002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_COMMA_in_updateExpr2694 = new BitSet(new long[]{0x803801E807FC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_onSetAssignment_in_updateExpr2696 = new BitSet(new long[]{0x0000000000010002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_WHERE_in_updateExpr2704 = new BitSet(new long[]{0x803801E817FD6420L,0x069C1C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x9006C01600080000L,0x0000000000000070L});
    public static final BitSet FOLLOW_whereClause_in_updateExpr2706 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MERGE_in_onMergeExpr2741 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_INTO_in_onMergeExpr2743 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_IDENT_in_onMergeExpr2748 = new BitSet(new long[]{0x0000000080030000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_AS_in_onMergeExpr2751 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_IDENT_in_onMergeExpr2755 = new BitSet(new long[]{0x0000000080030000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_IDENT_in_onMergeExpr2761 = new BitSet(new long[]{0x0000000080030000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_WHERE_in_onMergeExpr2768 = new BitSet(new long[]{0x803801E817FD6420L,0x069C1C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x9006C01600080000L,0x0000000000000070L});
    public static final BitSet FOLLOW_whereClause_in_onMergeExpr2770 = new BitSet(new long[]{0x0000000080030000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_mergeItem_in_onMergeExpr2778 = new BitSet(new long[]{0x0000000080030002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_mergeMatched_in_mergeItem2812 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_mergeUnmatched_in_mergeItem2816 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHEN_in_mergeMatched2829 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_MATCHED_in_mergeMatched2831 = new BitSet(new long[]{0x0000000100001000L});
    public static final BitSet FOLLOW_AND_EXPR_in_mergeMatched2834 = new BitSet(new long[]{0x803801E817FD6420L,0x069C1C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x9006C01600080000L,0x0000000000000070L});
    public static final BitSet FOLLOW_expression_in_mergeMatched2836 = new BitSet(new long[]{0x0000000100001000L});
    public static final BitSet FOLLOW_mergeMatchedItem_in_mergeMatched2840 = new BitSet(new long[]{0x0000000100001002L});
    public static final BitSet FOLLOW_THEN_in_mergeMatchedItem2866 = new BitSet(new long[]{0x0040000000000000L,0x0000800000020000L});
    public static final BitSet FOLLOW_UPDATE_in_mergeMatchedItem2881 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_SET_in_mergeMatchedItem2883 = new BitSet(new long[]{0x803801E807FC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_onSetAssignment_in_mergeMatchedItem2885 = new BitSet(new long[]{0x0000000000010002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_COMMA_in_mergeMatchedItem2888 = new BitSet(new long[]{0x803801E807FC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_onSetAssignment_in_mergeMatchedItem2890 = new BitSet(new long[]{0x0000000000010002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_WHERE_in_mergeMatchedItem2896 = new BitSet(new long[]{0x803801E817FD6420L,0x069C1C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x9006C01600080000L,0x0000000000000070L});
    public static final BitSet FOLLOW_whereClause_in_mergeMatchedItem2898 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DELETE_in_mergeMatchedItem2910 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_WHERE_in_mergeMatchedItem2913 = new BitSet(new long[]{0x803801E817FD6420L,0x069C1C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x9006C01600080000L,0x0000000000000070L});
    public static final BitSet FOLLOW_whereClause_in_mergeMatchedItem2915 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_mergeInsert_in_mergeMatchedItem2926 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHEN_in_mergeUnmatched2983 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_NOT_EXPR_in_mergeUnmatched2985 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_MATCHED_in_mergeUnmatched2987 = new BitSet(new long[]{0x0000000100001000L});
    public static final BitSet FOLLOW_AND_EXPR_in_mergeUnmatched2990 = new BitSet(new long[]{0x803801E817FD6420L,0x069C1C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x9006C01600080000L,0x0000000000000070L});
    public static final BitSet FOLLOW_expression_in_mergeUnmatched2992 = new BitSet(new long[]{0x0000000100001000L});
    public static final BitSet FOLLOW_mergeUnmatchedItem_in_mergeUnmatched2996 = new BitSet(new long[]{0x0000000100001002L});
    public static final BitSet FOLLOW_THEN_in_mergeUnmatchedItem3023 = new BitSet(new long[]{0x0040000000000000L,0x0000800000020000L});
    public static final BitSet FOLLOW_mergeInsert_in_mergeUnmatchedItem3026 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSERT_in_mergeInsert3041 = new BitSet(new long[]{0x0080000008000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_INTO_in_mergeInsert3044 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_classIdentifier_in_mergeInsert3046 = new BitSet(new long[]{0x0000000008000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_LPAREN_in_mergeInsert3051 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_columnList_in_mergeInsert3053 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_RPAREN_in_mergeInsert3055 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_SELECT_in_mergeInsert3059 = new BitSet(new long[]{0xB83841E817FD6420L,0x069C1C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x9006D01600080000L,0x0000000000000070L});
    public static final BitSet FOLLOW_selectionList_in_mergeInsert3061 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_WHERE_in_mergeInsert3064 = new BitSet(new long[]{0x803801E817FD6420L,0x069C1C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x9006C01600080000L,0x0000000000000070L});
    public static final BitSet FOLLOW_whereClause_in_mergeInsert3066 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSERT_in_onSelectExpr3112 = new BitSet(new long[]{0x1880000000000000L});
    public static final BitSet FOLLOW_insertIntoExpr_in_onSelectExpr3114 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_SELECT_in_onSelectExpr3120 = new BitSet(new long[]{0xB83841E817FD6420L,0x069C1C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x9006D01600080000L,0x0000000000000070L});
    public static final BitSet FOLLOW_DISTINCT_in_onSelectExpr3122 = new BitSet(new long[]{0xB83841E817FD6420L,0x069C1C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x9006D01600080000L,0x0000000000000070L});
    public static final BitSet FOLLOW_selectionList_in_onSelectExpr3125 = new BitSet(new long[]{0x0100300400010002L,0x0000200000000000L});
    public static final BitSet FOLLOW_onExprFrom_in_onSelectExpr3129 = new BitSet(new long[]{0x0100300000010002L,0x0000200000000000L});
    public static final BitSet FOLLOW_WHERE_in_onSelectExpr3135 = new BitSet(new long[]{0x803801E817FD6420L,0x069C1C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x9006C01600080000L,0x0000000000000070L});
    public static final BitSet FOLLOW_whereClause_in_onSelectExpr3137 = new BitSet(new long[]{0x0100300000000002L,0x0000200000000000L});
    public static final BitSet FOLLOW_GROUP_in_onSelectExpr3146 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_BY_in_onSelectExpr3148 = new BitSet(new long[]{0x803801E817FD6420L,0x069C1C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x9006C01600080000L,0x0000000000000070L});
    public static final BitSet FOLLOW_groupByListExpr_in_onSelectExpr3150 = new BitSet(new long[]{0x0100200000000002L,0x0000200000000000L});
    public static final BitSet FOLLOW_HAVING_in_onSelectExpr3157 = new BitSet(new long[]{0x803801E817FD6420L,0x069C1C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x9006C01600080000L,0x0000000000000070L});
    public static final BitSet FOLLOW_havingClause_in_onSelectExpr3159 = new BitSet(new long[]{0x0100000000000002L,0x0000200000000000L});
    public static final BitSet FOLLOW_ORDER_in_onSelectExpr3166 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_BY_in_onSelectExpr3168 = new BitSet(new long[]{0x803801E817FD6420L,0x069C1C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x9006C01600080000L,0x0000000000000070L});
    public static final BitSet FOLLOW_orderByListExpr_in_onSelectExpr3170 = new BitSet(new long[]{0x0000000000000002L,0x0000200000000000L});
    public static final BitSet FOLLOW_ROW_LIMIT_EXPR_in_onSelectExpr3177 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x9000400200080000L,0x0000000000000060L});
    public static final BitSet FOLLOW_rowLimit_in_onSelectExpr3179 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UPDATE_in_onUpdateExpr3239 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_IDENT_in_onUpdateExpr3246 = new BitSet(new long[]{0x0000000000020000L,0x0000000000080000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_AS_in_onUpdateExpr3249 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_IDENT_in_onUpdateExpr3253 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_IDENT_in_onUpdateExpr3259 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_SET_in_onUpdateExpr3265 = new BitSet(new long[]{0x803801E807FC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_onSetAssignment_in_onUpdateExpr3267 = new BitSet(new long[]{0x0000000000010002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_COMMA_in_onUpdateExpr3270 = new BitSet(new long[]{0x803801E807FC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_onSetAssignment_in_onUpdateExpr3272 = new BitSet(new long[]{0x0000000000010002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_WHERE_in_onUpdateExpr3279 = new BitSet(new long[]{0x803801E817FD6420L,0x069C1C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x9006C01600080000L,0x0000000000000070L});
    public static final BitSet FOLLOW_whereClause_in_onUpdateExpr3281 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSERT_in_onSelectInsertExpr3332 = new BitSet(new long[]{0x1880000000000000L});
    public static final BitSet FOLLOW_insertIntoExpr_in_onSelectInsertExpr3334 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_SELECT_in_onSelectInsertExpr3338 = new BitSet(new long[]{0xB83841E817FD6420L,0x069C1C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x9006D01600080000L,0x0000000000000070L});
    public static final BitSet FOLLOW_selectionList_in_onSelectInsertExpr3340 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_WHERE_in_onSelectInsertExpr3345 = new BitSet(new long[]{0x803801E817FD6420L,0x069C1C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x9006C01600080000L,0x0000000000000070L});
    public static final BitSet FOLLOW_whereClause_in_onSelectInsertExpr3347 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OUTPUT_in_outputClauseInsert3378 = new BitSet(new long[]{0x0010800000000000L});
    public static final BitSet FOLLOW_FIRST_in_outputClauseInsert3383 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALL_in_outputClauseInsert3389 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DELETE_in_onDeleteExpr3431 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_onExprFrom_in_onDeleteExpr3435 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_WHERE_in_onDeleteExpr3440 = new BitSet(new long[]{0x803801E817FD6420L,0x069C1C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x9006C01600080000L,0x0000000000000070L});
    public static final BitSet FOLLOW_whereClause_in_onDeleteExpr3442 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SET_in_onSetExpr3482 = new BitSet(new long[]{0x803801E807FC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_onSetAssignment_in_onSetExpr3484 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_COMMA_in_onSetExpr3487 = new BitSet(new long[]{0x803801E807FC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_onSetAssignment_in_onSetExpr3489 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_eventProperty_in_onSetAssignment3514 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_EQUALS_in_onSetAssignment3516 = new BitSet(new long[]{0x803801E817FD6420L,0x069C1C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x9006C01600080000L,0x0000000000000070L});
    public static final BitSet FOLLOW_expression_in_onSetAssignment3518 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FROM_in_onExprFrom3543 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_IDENT_in_onExprFrom3547 = new BitSet(new long[]{0x0000000000020002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_AS_in_onExprFrom3550 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_IDENT_in_onExprFrom3554 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_onExprFrom3560 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CREATE_in_createWindowExpr3588 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_WINDOW_in_createWindowExpr3590 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_IDENT_in_createWindowExpr3594 = new BitSet(new long[]{0x0000000008020000L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0000021200000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_DOT_in_createWindowExpr3597 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_viewExpression_in_createWindowExpr3599 = new BitSet(new long[]{0x0000000008020000L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0000021200000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_DOT_in_createWindowExpr3602 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_viewExpression_in_createWindowExpr3604 = new BitSet(new long[]{0x0000000008020000L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0000021200000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_RETAINUNION_in_createWindowExpr3613 = new BitSet(new long[]{0x0000000008020000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001200000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_RETAININTERSECTION_in_createWindowExpr3617 = new BitSet(new long[]{0x0000000008020000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001200000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_AS_in_createWindowExpr3621 = new BitSet(new long[]{0x0000000008000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001200000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_createWindowExprModelAfter_in_createWindowExpr3636 = new BitSet(new long[]{0x0040000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_createWindowExpr3651 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_createColumnList_in_createWindowExpr3653 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_RPAREN_in_createWindowExpr3655 = new BitSet(new long[]{0x0040000000000002L});
    public static final BitSet FOLLOW_INSERT_in_createWindowExpr3672 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_WHERE_in_createWindowExpr3675 = new BitSet(new long[]{0x803801E817FD6420L,0x069C1C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x9006C01600080000L,0x0000000000000070L});
    public static final BitSet FOLLOW_expression_in_createWindowExpr3677 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SELECT_in_createWindowExprModelAfter3764 = new BitSet(new long[]{0x803801E807FC4420L,0x069C1C0000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x9006500200080000L,0x0000000000000070L});
    public static final BitSet FOLLOW_createSelectionList_in_createWindowExprModelAfter3767 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_FROM_in_createWindowExprModelAfter3769 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_classIdentifier_in_createWindowExprModelAfter3774 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CREATE_in_createIndexExpr3787 = new BitSet(new long[]{0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_INDEX_in_createIndexExpr3789 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_IDENT_in_createIndexExpr3793 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_ON_in_createIndexExpr3795 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_IDENT_in_createIndexExpr3799 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_LPAREN_in_createIndexExpr3801 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_createIndexColumnList_in_createIndexExpr3803 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_RPAREN_in_createIndexExpr3805 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_createIndexColumn_in_createIndexColumnList3834 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_COMMA_in_createIndexColumnList3837 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_createIndexColumn_in_createIndexColumnList3839 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_IDENT_in_createIndexColumn3866 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_IDENT_in_createIndexColumn3868 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CREATE_in_createVariableExpr3893 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_VARIABLE_in_createVariableExpr3895 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_classIdentifier_in_createVariableExpr3897 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_IDENT_in_createVariableExpr3901 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_EQUALS_in_createVariableExpr3904 = new BitSet(new long[]{0x803801E817FD6420L,0x069C1C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x9006C01600080000L,0x0000000000000070L});
    public static final BitSet FOLLOW_expression_in_createVariableExpr3906 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_createColumnListElement_in_createColumnList3948 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_COMMA_in_createColumnList3951 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_createColumnListElement_in_createColumnList3953 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_classIdentifierNonGreedy_in_createColumnListElement3981 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_classIdentifier_in_createColumnListElement3984 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_LBRACK_in_createColumnListElement3989 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_RBRACK_in_createColumnListElement3991 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_createSelectionListElement_in_createSelectionList4034 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_COMMA_in_createSelectionList4037 = new BitSet(new long[]{0x803801E807FC4420L,0x069C1C0000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x9006500200080000L,0x0000000000000070L});
    public static final BitSet FOLLOW_createSelectionListElement_in_createSelectionList4039 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_STAR_in_createSelectionListElement4068 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventProperty_in_createSelectionListElement4080 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_AS_in_createSelectionListElement4083 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_IDENT_in_createSelectionListElement4087 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constant_in_createSelectionListElement4108 = new BitSet(new long[]{0x0000000000020000L});
    public static final BitSet FOLLOW_AS_in_createSelectionListElement4110 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_IDENT_in_createSelectionListElement4114 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CREATE_in_createSchemaExpr4139 = new BitSet(new long[]{0x4000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_IDENT_in_createSchemaExpr4143 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_SCHEMA_in_createSchemaExpr4146 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_IDENT_in_createSchemaExpr4150 = new BitSet(new long[]{0x0000000000020000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000101200000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_AS_in_createSchemaExpr4152 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000101200000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_variantList_in_createSchemaExpr4165 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_createSchemaExpr4176 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002200000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_createColumnList_in_createSchemaExpr4178 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_RPAREN_in_createSchemaExpr4181 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_IDENT_in_createSchemaExpr4186 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_columnList_in_createSchemaExpr4188 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variantListElement_in_variantList4277 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_COMMA_in_variantList4280 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100200000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_variantListElement_in_variantList4282 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_STAR_in_variantListElement4309 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classIdentifier_in_variantListElement4315 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ISTREAM_in_insertIntoExpr4340 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_RSTREAM_in_insertIntoExpr4346 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_INTO_in_insertIntoExpr4350 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_classIdentifier_in_insertIntoExpr4352 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_LPAREN_in_insertIntoExpr4355 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_columnList_in_insertIntoExpr4357 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_RPAREN_in_insertIntoExpr4359 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_columnList4392 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_COMMA_in_columnList4395 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_IDENT_in_columnList4397 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_streamExpression_in_fromClause4435 = new BitSet(new long[]{0x000001F000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_regularJoin_in_fromClause4438 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_outerJoinList_in_fromClause4442 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_regularJoin4456 = new BitSet(new long[]{0x0000000000000000L,0x000000000000000CL,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_streamExpression_in_regularJoin4459 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_outerJoin_in_outerJoinList4473 = new BitSet(new long[]{0x000001F000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_outerJoin_in_outerJoinList4476 = new BitSet(new long[]{0x000001F000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_LEFT_in_outerJoin4519 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_RIGHT_in_outerJoin4523 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_FULL_in_outerJoin4527 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_OUTER_in_outerJoin4530 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_INNER_in_outerJoin4551 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_JOIN_in_outerJoin4565 = new BitSet(new long[]{0x0000000000000000L,0x000000000000000CL,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_streamExpression_in_outerJoin4567 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_outerJoinIdent_in_outerJoin4569 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ON_in_outerJoinIdent4634 = new BitSet(new long[]{0x803801E807FC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_outerJoinIdentPair_in_outerJoinIdent4637 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_AND_EXPR_in_outerJoinIdent4640 = new BitSet(new long[]{0x803801E807FC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_outerJoinIdentPair_in_outerJoinIdent4643 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_eventProperty_in_outerJoinIdentPair4658 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_EQUALS_in_outerJoinIdentPair4660 = new BitSet(new long[]{0x803801E807FC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_eventProperty_in_outerJoinIdentPair4663 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_evalOrExpression_in_whereClause4685 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RSTREAM_in_selectClause4721 = new BitSet(new long[]{0xB83841E817FD6420L,0x069C1C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x9006D01600080000L,0x0000000000000070L});
    public static final BitSet FOLLOW_ISTREAM_in_selectClause4727 = new BitSet(new long[]{0xB83841E817FD6420L,0x069C1C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x9006D01600080000L,0x0000000000000070L});
    public static final BitSet FOLLOW_IRSTREAM_in_selectClause4733 = new BitSet(new long[]{0xB83841E817FD6420L,0x069C1C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x9006D01600080000L,0x0000000000000070L});
    public static final BitSet FOLLOW_DISTINCT_in_selectClause4739 = new BitSet(new long[]{0xB83841E817FD6420L,0x069C1C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x9006D01600080000L,0x0000000000000070L});
    public static final BitSet FOLLOW_selectionList_in_selectClause4742 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_selectionListElement_in_selectionList4773 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_COMMA_in_selectionList4776 = new BitSet(new long[]{0xB83841E817FD6420L,0x069C1C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x9006D01600080000L,0x0000000000000070L});
    public static final BitSet FOLLOW_selectionListElement_in_selectionList4779 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_STAR_in_selectionListElement4805 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_streamSelector_in_selectionListElement4823 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_selectionListElement4828 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_AS_in_selectionListElement4831 = new BitSet(new long[]{0x803801E807FC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_selectionListElement4835 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_streamSelector4891 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_DOT_in_streamSelector4893 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_STAR_in_streamSelector4895 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_AS_in_streamSelector4898 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_IDENT_in_streamSelector4902 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventFilterExpression_in_streamExpression4933 = new BitSet(new long[]{0x8000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0000020200000000L});
    public static final BitSet FOLLOW_patternInclusionExpression_in_streamExpression4937 = new BitSet(new long[]{0x8000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0000020200000000L});
    public static final BitSet FOLLOW_databaseJoinExpression_in_streamExpression4941 = new BitSet(new long[]{0x8000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0000020200000000L});
    public static final BitSet FOLLOW_methodJoinExpression_in_streamExpression4945 = new BitSet(new long[]{0x8000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0000020200000000L});
    public static final BitSet FOLLOW_DOT_in_streamExpression4952 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_viewExpression_in_streamExpression4954 = new BitSet(new long[]{0x8000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0000020200000000L});
    public static final BitSet FOLLOW_DOT_in_streamExpression4957 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_viewExpression_in_streamExpression4959 = new BitSet(new long[]{0x8000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0000020200000000L});
    public static final BitSet FOLLOW_AS_in_streamExpression4966 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_IDENT_in_streamExpression4970 = new BitSet(new long[]{0x8000000000000002L,0x0000000000000003L});
    public static final BitSet FOLLOW_IDENT_in_streamExpression4976 = new BitSet(new long[]{0x8000000000000002L,0x0000000000000003L});
    public static final BitSet FOLLOW_UNIDIRECTIONAL_in_streamExpression4983 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000003L});
    public static final BitSet FOLLOW_RETAINUNION_in_streamExpression4990 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETAININTERSECTION_in_streamExpression4994 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FOR_in_forExpr5050 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_IDENT_in_forExpr5054 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_LPAREN_in_forExpr5057 = new BitSet(new long[]{0x803801E817FD6420L,0x069C1C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x9006C03600080000L,0x0000000000000070L});
    public static final BitSet FOLLOW_expressionList_in_forExpr5059 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_RPAREN_in_forExpr5062 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MATCH_RECOGNIZE_in_matchRecog5098 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_LPAREN_in_matchRecog5112 = new BitSet(new long[]{0x0000000000000000L,0x000A000000000000L});
    public static final BitSet FOLLOW_matchRecogPartitionBy_in_matchRecog5118 = new BitSet(new long[]{0x0000000000000000L,0x000A000000000000L});
    public static final BitSet FOLLOW_matchRecogMeasures_in_matchRecog5125 = new BitSet(new long[]{0x0000800000000000L,0x0020000000000004L});
    public static final BitSet FOLLOW_matchRecogMatchesSelection_in_matchRecog5130 = new BitSet(new long[]{0x0000800000000000L,0x0020000000000004L});
    public static final BitSet FOLLOW_matchRecogMatchesAfterSkip_in_matchRecog5136 = new BitSet(new long[]{0x0000800000000000L,0x0020000000000004L});
    public static final BitSet FOLLOW_matchRecogPattern_in_matchRecog5142 = new BitSet(new long[]{0x0000000000000000L,0x0004000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_matchRecogMatchesInterval_in_matchRecog5148 = new BitSet(new long[]{0x0000000000000000L,0x0004000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_matchRecogDefine_in_matchRecog5154 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_RPAREN_in_matchRecog5161 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PARTITION_in_matchRecogPartitionBy5198 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_BY_in_matchRecogPartitionBy5200 = new BitSet(new long[]{0x803801E817FD6420L,0x069C1C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x9006C01600080000L,0x0000000000000070L});
    public static final BitSet FOLLOW_expression_in_matchRecogPartitionBy5202 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_COMMA_in_matchRecogPartitionBy5205 = new BitSet(new long[]{0x803801E817FD6420L,0x069C1C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x9006C01600080000L,0x0000000000000070L});
    public static final BitSet FOLLOW_expression_in_matchRecogPartitionBy5207 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_MEASURES_in_matchRecogMeasures5236 = new BitSet(new long[]{0x803801E817FD6420L,0x069C1C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x9006C01600080000L,0x0000000000000070L});
    public static final BitSet FOLLOW_matchRecogMeasureItem_in_matchRecogMeasures5238 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_COMMA_in_matchRecogMeasures5241 = new BitSet(new long[]{0x803801E817FD6420L,0x069C1C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x9006C01600080000L,0x0000000000000070L});
    public static final BitSet FOLLOW_matchRecogMeasureItem_in_matchRecogMeasures5243 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_expression_in_matchRecogMeasureItem5268 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_AS_in_matchRecogMeasureItem5271 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_IDENT_in_matchRecogMeasureItem5276 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALL_in_matchRecogMatchesSelection5307 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_MATCHES_in_matchRecogMatchesSelection5310 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PATTERN_in_matchRecogPattern5325 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_LPAREN_in_matchRecogPattern5327 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001200000000L});
    public static final BitSet FOLLOW_matchRecogPatternAlteration_in_matchRecogPattern5329 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_RPAREN_in_matchRecogPattern5331 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AFTER_in_matchRecogMatchesAfterSkip5353 = new BitSet(new long[]{0x803801E807FC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip5357 = new BitSet(new long[]{0x803801E807FC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip5361 = new BitSet(new long[]{0x803801E807FC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip5365 = new BitSet(new long[]{0x803801E807FC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip5369 = new BitSet(new long[]{0x803801E807FC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip5373 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_matchRecogMatchesInterval5409 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x9000C00200080000L,0x0000000000000060L});
    public static final BitSet FOLLOW_timePeriod_in_matchRecogMatchesInterval5411 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_matchRecogPatternConcat_in_matchRecogPatternAlteration5437 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_BOR_in_matchRecogPatternAlteration5442 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001200000000L});
    public static final BitSet FOLLOW_matchRecogPatternConcat_in_matchRecogPatternAlteration5444 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_matchRecogPatternUnary_in_matchRecogPatternConcat5477 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001200000000L});
    public static final BitSet FOLLOW_matchRecogPatternNested_in_matchRecogPatternUnary5502 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_matchRecogPatternAtom_in_matchRecogPatternUnary5508 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_matchRecogPatternNested5520 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001200000000L});
    public static final BitSet FOLLOW_matchRecogPatternAlteration_in_matchRecogPatternNested5522 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_RPAREN_in_matchRecogPatternNested5524 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000D00000000000L});
    public static final BitSet FOLLOW_STAR_in_matchRecogPatternNested5529 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PLUS_in_matchRecogPatternNested5535 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUESTION_in_matchRecogPatternNested5541 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_matchRecogPatternAtom5580 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000D00000000000L});
    public static final BitSet FOLLOW_STAR_in_matchRecogPatternAtom5586 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_PLUS_in_matchRecogPatternAtom5592 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_QUESTION_in_matchRecogPatternAtom5598 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_QUESTION_in_matchRecogPatternAtom5604 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFINE_in_matchRecogDefine5648 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_matchRecogDefineItem_in_matchRecogDefine5650 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_COMMA_in_matchRecogDefine5653 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_matchRecogDefineItem_in_matchRecogDefine5655 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_IDENT_in_matchRecogDefineItem5682 = new BitSet(new long[]{0x0000000000020000L});
    public static final BitSet FOLLOW_AS_in_matchRecogDefineItem5684 = new BitSet(new long[]{0x803801E817FD6420L,0x069C1C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x9006C01600080000L,0x0000000000000070L});
    public static final BitSet FOLLOW_expression_in_matchRecogDefineItem5686 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PATTERN_in_patternInclusionExpression5711 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_LBRACK_in_patternInclusionExpression5713 = new BitSet(new long[]{0x000000000000E000L,0x0800000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000041200000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_patternExpression_in_patternInclusionExpression5715 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_RBRACK_in_patternInclusionExpression5717 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL_in_databaseJoinExpression5750 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_COLON_in_databaseJoinExpression5752 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_IDENT_in_databaseJoinExpression5756 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_LBRACK_in_databaseJoinExpression5758 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0006000000000000L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_databaseJoinExpression5763 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_QUOTED_STRING_LITERAL_in_databaseJoinExpression5769 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_METADATASQL_in_databaseJoinExpression5773 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0006000000000000L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_databaseJoinExpression5778 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_QUOTED_STRING_LITERAL_in_databaseJoinExpression5784 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_RBRACK_in_databaseJoinExpression5789 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_methodJoinExpression5840 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_COLON_in_methodJoinExpression5842 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_classIdentifier_in_methodJoinExpression5844 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_LPAREN_in_methodJoinExpression5847 = new BitSet(new long[]{0x803801E817FD6420L,0x069C1C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x9006C03600080000L,0x0000000000000070L});
    public static final BitSet FOLLOW_expressionList_in_methodJoinExpression5849 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_RPAREN_in_methodJoinExpression5852 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_viewExpression5905 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_COLON_in_viewExpression5907 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_IDENT_in_viewExpression5912 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_MERGE_in_viewExpression5916 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_LPAREN_in_viewExpression5919 = new BitSet(new long[]{0x803801E817FD6420L,0x069C1C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x9006D43600080000L,0x0000000000000070L});
    public static final BitSet FOLLOW_expressionWithTimeList_in_viewExpression5921 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_RPAREN_in_viewExpression5924 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_groupByListExpr5984 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_COMMA_in_groupByListExpr5987 = new BitSet(new long[]{0x803801E817FD6420L,0x069C1C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x9006C01600080000L,0x0000000000000070L});
    public static final BitSet FOLLOW_expression_in_groupByListExpr5989 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_orderByListElement_in_orderByListExpr6024 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_COMMA_in_orderByListExpr6027 = new BitSet(new long[]{0x803801E817FD6420L,0x069C1C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x9006C01600080000L,0x0000000000000070L});
    public static final BitSet FOLLOW_orderByListElement_in_orderByListExpr6029 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_expression_in_orderByListElement6054 = new BitSet(new long[]{0x0600000000000002L});
    public static final BitSet FOLLOW_ASC_in_orderByListElement6059 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DESC_in_orderByListElement6063 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_evalOrExpression_in_havingClause6101 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_outputLimitAfter_in_outputLimit6139 = new BitSet(new long[]{0x0030800080004002L,0x0000000000440000L});
    public static final BitSet FOLLOW_ALL_in_outputLimit6154 = new BitSet(new long[]{0x0000000080004002L,0x0000000000400000L});
    public static final BitSet FOLLOW_FIRST_in_outputLimit6158 = new BitSet(new long[]{0x0000000080004002L,0x0000000000400000L});
    public static final BitSet FOLLOW_LAST_in_outputLimit6162 = new BitSet(new long[]{0x0000000080004002L,0x0000000000400000L});
    public static final BitSet FOLLOW_SNAPSHOT_in_outputLimit6166 = new BitSet(new long[]{0x0000000080004002L,0x0000000000400000L});
    public static final BitSet FOLLOW_EVERY_EXPR_in_outputLimit6197 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x9000C00200080000L,0x0000000000000060L});
    public static final BitSet FOLLOW_timePeriod_in_outputLimit6223 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_outputLimit6234 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_IDENT_in_outputLimit6240 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_EVENTS_in_outputLimit6246 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AT_in_outputLimit6277 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_crontabLimitParameterSet_in_outputLimit6279 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHEN_in_outputLimit6296 = new BitSet(new long[]{0x803801E817FD6420L,0x069C1C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x9006C01600080000L,0x0000000000000070L});
    public static final BitSet FOLLOW_expression_in_outputLimit6298 = new BitSet(new long[]{0x0000000100000002L});
    public static final BitSet FOLLOW_THEN_in_outputLimit6301 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_onSetExpr_in_outputLimit6303 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AFTER_in_outputLimitAfter6453 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x9000C00200080000L,0x0000000000000060L});
    public static final BitSet FOLLOW_timePeriod_in_outputLimitAfter6456 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_outputLimitAfter6460 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_EVENTS_in_outputLimitAfter6462 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberconstant_in_rowLimit6508 = new BitSet(new long[]{0x0000000000000002L,0x0000400000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_IDENT_in_rowLimit6514 = new BitSet(new long[]{0x0000000000000002L,0x0000400000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_COMMA_in_rowLimit6521 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x9000400200080000L,0x0000000000000060L});
    public static final BitSet FOLLOW_OFFSET_in_rowLimit6527 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x9000400200080000L,0x0000000000000060L});
    public static final BitSet FOLLOW_numberconstant_in_rowLimit6533 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_rowLimit6539 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_crontabLimitParameterSet6591 = new BitSet(new long[]{0x803801E817FD6420L,0x069C1C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x9006D41600080000L,0x0000000000000070L});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet6593 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_COMMA_in_crontabLimitParameterSet6595 = new BitSet(new long[]{0x803801E817FD6420L,0x069C1C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x9006D41600080000L,0x0000000000000070L});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet6597 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_COMMA_in_crontabLimitParameterSet6599 = new BitSet(new long[]{0x803801E817FD6420L,0x069C1C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x9006D41600080000L,0x0000000000000070L});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet6601 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_COMMA_in_crontabLimitParameterSet6603 = new BitSet(new long[]{0x803801E817FD6420L,0x069C1C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x9006D41600080000L,0x0000000000000070L});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet6605 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_COMMA_in_crontabLimitParameterSet6607 = new BitSet(new long[]{0x803801E817FD6420L,0x069C1C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x9006D41600080000L,0x0000000000000070L});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet6609 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000000A000000000L});
    public static final BitSet FOLLOW_COMMA_in_crontabLimitParameterSet6612 = new BitSet(new long[]{0x803801E817FD6420L,0x069C1C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x9006D41600080000L,0x0000000000000070L});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet6614 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_RPAREN_in_crontabLimitParameterSet6618 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHEN_in_whenClause6648 = new BitSet(new long[]{0x803801E817FD6420L,0x069C1C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x9006C01600080000L,0x0000000000000070L});
    public static final BitSet FOLLOW_expression_in_whenClause6651 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_THEN_in_whenClause6653 = new BitSet(new long[]{0x803801E817FD6420L,0x069C1C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x9006C01600080000L,0x0000000000000070L});
    public static final BitSet FOLLOW_expression_in_whenClause6656 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ELSE_in_elseClause6669 = new BitSet(new long[]{0x803801E817FD6420L,0x069C1C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x9006C01600080000L,0x0000000000000070L});
    public static final BitSet FOLLOW_expression_in_elseClause6672 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_caseExpression_in_expression6685 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CASE_in_caseExpression6699 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_whenClause_in_caseExpression6702 = new BitSet(new long[]{0x00000002C0000000L});
    public static final BitSet FOLLOW_elseClause_in_caseExpression6705 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_END_in_caseExpression6708 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CASE_in_caseExpression6719 = new BitSet(new long[]{0x803801E817FD6420L,0x069C1C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x9006C01600080000L,0x0000000000000070L});
    public static final BitSet FOLLOW_expression_in_caseExpression6721 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_whenClause_in_caseExpression6723 = new BitSet(new long[]{0x00000002C0000000L});
    public static final BitSet FOLLOW_elseClause_in_caseExpression6726 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_END_in_caseExpression6729 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_evalOrExpression_in_caseExpression6753 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_evalAndExpression_in_evalOrExpression6764 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_OR_EXPR_in_evalOrExpression6769 = new BitSet(new long[]{0x803801E817FD6420L,0x069C1C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x9006C01600080000L,0x0000000000000070L});
    public static final BitSet FOLLOW_evalAndExpression_in_evalOrExpression6771 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_bitWiseExpression_in_evalAndExpression6803 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_AND_EXPR_in_evalAndExpression6808 = new BitSet(new long[]{0x803801E817FD6420L,0x069C1C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x9006C01600080000L,0x0000000000000070L});
    public static final BitSet FOLLOW_bitWiseExpression_in_evalAndExpression6810 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_negatedExpression_in_bitWiseExpression6842 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0018200000000000L});
    public static final BitSet FOLLOW_BAND_in_bitWiseExpression6847 = new BitSet(new long[]{0x803801E817FD6420L,0x069C1C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x9006C01600080000L,0x0000000000000070L});
    public static final BitSet FOLLOW_BOR_in_bitWiseExpression6850 = new BitSet(new long[]{0x803801E817FD6420L,0x069C1C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x9006C01600080000L,0x0000000000000070L});
    public static final BitSet FOLLOW_BXOR_in_bitWiseExpression6853 = new BitSet(new long[]{0x803801E817FD6420L,0x069C1C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x9006C01600080000L,0x0000000000000070L});
    public static final BitSet FOLLOW_negatedExpression_in_bitWiseExpression6857 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0018200000000000L});
    public static final BitSet FOLLOW_evalEqualsExpression_in_negatedExpression6872 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_EXPR_in_negatedExpression6878 = new BitSet(new long[]{0x803801E807FD4420L,0x069C1C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x9006C01600080000L,0x0000000000000070L});
    public static final BitSet FOLLOW_evalEqualsExpression_in_negatedExpression6881 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_evalRelationalExpression_in_evalEqualsExpression6894 = new BitSet(new long[]{0x0000040000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0060010000000000L});
    public static final BitSet FOLLOW_EQUALS_in_evalEqualsExpression6907 = new BitSet(new long[]{0x803B81E807FD4420L,0x069C1C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x9006C01600080000L,0x0000000000000070L});
    public static final BitSet FOLLOW_IS_in_evalEqualsExpression6925 = new BitSet(new long[]{0x803B81E807FD4420L,0x069C1C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x9006C01600080000L,0x0000000000000070L});
    public static final BitSet FOLLOW_IS_in_evalEqualsExpression6939 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_NOT_EXPR_in_evalEqualsExpression6941 = new BitSet(new long[]{0x803B81E807FD4420L,0x069C1C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x9006C01600080000L,0x0000000000000070L});
    public static final BitSet FOLLOW_SQL_NE_in_evalEqualsExpression6955 = new BitSet(new long[]{0x803B81E807FD4420L,0x069C1C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x9006C01600080000L,0x0000000000000070L});
    public static final BitSet FOLLOW_NOT_EQUAL_in_evalEqualsExpression6969 = new BitSet(new long[]{0x803B81E807FD4420L,0x069C1C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x9006C01600080000L,0x0000000000000070L});
    public static final BitSet FOLLOW_evalRelationalExpression_in_evalEqualsExpression6999 = new BitSet(new long[]{0x0000040000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0060010000000000L});
    public static final BitSet FOLLOW_ANY_in_evalEqualsExpression7016 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_SOME_in_evalEqualsExpression7022 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_ALL_in_evalEqualsExpression7028 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_LPAREN_in_evalEqualsExpression7034 = new BitSet(new long[]{0x803801E817FD6420L,0x069C1C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x9006C03600080000L,0x0000000000000070L});
    public static final BitSet FOLLOW_expressionList_in_evalEqualsExpression7036 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_RPAREN_in_evalEqualsExpression7039 = new BitSet(new long[]{0x0000040000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0060010000000000L});
    public static final BitSet FOLLOW_subSelectGroupExpression_in_evalEqualsExpression7044 = new BitSet(new long[]{0x0000040000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0060010000000000L});
    public static final BitSet FOLLOW_concatenationExpr_in_evalRelationalExpression7172 = new BitSet(new long[]{0x00000000000023C2L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0780000000000000L});
    public static final BitSet FOLLOW_LT_in_evalRelationalExpression7204 = new BitSet(new long[]{0x803B81E807FD4420L,0x069C1C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x9006C01600080000L,0x0000000000000070L});
    public static final BitSet FOLLOW_GT_in_evalRelationalExpression7208 = new BitSet(new long[]{0x803B81E807FD4420L,0x069C1C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x9006C01600080000L,0x0000000000000070L});
    public static final BitSet FOLLOW_LE_in_evalRelationalExpression7212 = new BitSet(new long[]{0x803B81E807FD4420L,0x069C1C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x9006C01600080000L,0x0000000000000070L});
    public static final BitSet FOLLOW_GE_in_evalRelationalExpression7216 = new BitSet(new long[]{0x803B81E807FD4420L,0x069C1C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x9006C01600080000L,0x0000000000000070L});
    public static final BitSet FOLLOW_concatenationExpr_in_evalRelationalExpression7240 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0780000000000000L});
    public static final BitSet FOLLOW_ANY_in_evalRelationalExpression7257 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_SOME_in_evalRelationalExpression7263 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_ALL_in_evalRelationalExpression7269 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_LPAREN_in_evalRelationalExpression7275 = new BitSet(new long[]{0x803801E817FD6420L,0x069C1C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x9006C03600080000L,0x0000000000000070L});
    public static final BitSet FOLLOW_expressionList_in_evalRelationalExpression7277 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_RPAREN_in_evalRelationalExpression7280 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0780000000000000L});
    public static final BitSet FOLLOW_subSelectGroupExpression_in_evalRelationalExpression7285 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0780000000000000L});
    public static final BitSet FOLLOW_NOT_EXPR_in_evalRelationalExpression7381 = new BitSet(new long[]{0x00000000000003C0L});
    public static final BitSet FOLLOW_IN_SET_in_evalRelationalExpression7408 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000041000000000L});
    public static final BitSet FOLLOW_LPAREN_in_evalRelationalExpression7420 = new BitSet(new long[]{0x803801E817FD6420L,0x069C1C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x9006C01600080000L,0x0000000000000070L});
    public static final BitSet FOLLOW_LBRACK_in_evalRelationalExpression7426 = new BitSet(new long[]{0x803801E817FD6420L,0x069C1C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x9006C01600080000L,0x0000000000000070L});
    public static final BitSet FOLLOW_expression_in_evalRelationalExpression7429 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000108A000000000L});
    public static final BitSet FOLLOW_COLON_in_evalRelationalExpression7451 = new BitSet(new long[]{0x803801E817FD6420L,0x069C1C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x9006C01600080000L,0x0000000000000070L});
    public static final BitSet FOLLOW_expression_in_evalRelationalExpression7454 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000082000000000L});
    public static final BitSet FOLLOW_COMMA_in_evalRelationalExpression7480 = new BitSet(new long[]{0x803801E817FD6420L,0x069C1C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x9006C01600080000L,0x0000000000000070L});
    public static final BitSet FOLLOW_expression_in_evalRelationalExpression7482 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000008A000000000L});
    public static final BitSet FOLLOW_RPAREN_in_evalRelationalExpression7508 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RBRACK_in_evalRelationalExpression7514 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IN_SET_in_evalRelationalExpression7637 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_inSubSelectQuery_in_evalRelationalExpression7639 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BETWEEN_in_evalRelationalExpression7685 = new BitSet(new long[]{0x803801E807FD4420L,0x069C1C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x9006C01600080000L,0x0000000000000070L});
    public static final BitSet FOLLOW_betweenList_in_evalRelationalExpression7687 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LIKE_in_evalRelationalExpression7737 = new BitSet(new long[]{0x803801E807FD4420L,0x069C1C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x9006C01600080000L,0x0000000000000070L});
    public static final BitSet FOLLOW_concatenationExpr_in_evalRelationalExpression7739 = new BitSet(new long[]{0x0000000000000402L});
    public static final BitSet FOLLOW_ESCAPE_in_evalRelationalExpression7742 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0006000000000000L});
    public static final BitSet FOLLOW_stringconstant_in_evalRelationalExpression7744 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGEXP_in_evalRelationalExpression7796 = new BitSet(new long[]{0x803801E807FD4420L,0x069C1C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x9006C01600080000L,0x0000000000000070L});
    public static final BitSet FOLLOW_concatenationExpr_in_evalRelationalExpression7798 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subQueryExpr_in_inSubSelectQuery7860 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_additiveExpression_in_concatenationExpr7885 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_LOR_in_concatenationExpr7891 = new BitSet(new long[]{0x803801E807FD4420L,0x069C1C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x9006C01600080000L,0x0000000000000070L});
    public static final BitSet FOLLOW_additiveExpression_in_concatenationExpr7893 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_LOR_in_concatenationExpr7897 = new BitSet(new long[]{0x803801E807FD4420L,0x069C1C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x9006C01600080000L,0x0000000000000070L});
    public static final BitSet FOLLOW_additiveExpression_in_concatenationExpr7899 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_multiplyExpression_in_additiveExpression7940 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000400000000000L});
    public static final BitSet FOLLOW_PLUS_in_additiveExpression7945 = new BitSet(new long[]{0x803801E807FD4420L,0x069C1C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x9006C01600080000L,0x0000000000000070L});
    public static final BitSet FOLLOW_MINUS_in_additiveExpression7948 = new BitSet(new long[]{0x803801E807FD4420L,0x069C1C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x9006C01600080000L,0x0000000000000070L});
    public static final BitSet FOLLOW_multiplyExpression_in_additiveExpression7952 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000400000000000L});
    public static final BitSet FOLLOW_unaryExpression_in_multiplyExpression7966 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x6000100000000000L});
    public static final BitSet FOLLOW_STAR_in_multiplyExpression7971 = new BitSet(new long[]{0x803801E807FD4420L,0x069C1C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x9006C01600080000L,0x0000000000000070L});
    public static final BitSet FOLLOW_DIV_in_multiplyExpression7974 = new BitSet(new long[]{0x803801E807FD4420L,0x069C1C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x9006C01600080000L,0x0000000000000070L});
    public static final BitSet FOLLOW_MOD_in_multiplyExpression7977 = new BitSet(new long[]{0x803801E807FD4420L,0x069C1C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x9006C01600080000L,0x0000000000000070L});
    public static final BitSet FOLLOW_unaryExpression_in_multiplyExpression7981 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x6000100000000000L});
    public static final BitSet FOLLOW_MINUS_in_unaryExpression7996 = new BitSet(new long[]{0x803801E807FC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_eventProperty_in_unaryExpression7998 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constant_in_unaryExpression8011 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_substitution_in_unaryExpression8016 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_unaryExpression8021 = new BitSet(new long[]{0x803801E817FD6420L,0x069C1C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x9006C01600080000L,0x0000000000000070L});
    public static final BitSet FOLLOW_expression_in_unaryExpression8023 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_RPAREN_in_unaryExpression8025 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_DOT_in_unaryExpression8030 = new BitSet(new long[]{0x803801E807FD4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_unaryExpression8032 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_DOT_in_unaryExpression8037 = new BitSet(new long[]{0x803801E807FD4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_unaryExpression8039 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_eventPropertyOrLibFunction_in_unaryExpression8076 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_builtinFunc_in_unaryExpression8088 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arrayExpression_in_unaryExpression8094 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subSelectExpression_in_unaryExpression8099 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_DOT_in_unaryExpression8104 = new BitSet(new long[]{0x803801E807FD4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_unaryExpression8106 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_DOT_in_unaryExpression8111 = new BitSet(new long[]{0x803801E807FD4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_unaryExpression8113 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_existsSubSelectExpression_in_unaryExpression8150 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subQueryExpr_in_subSelectExpression8167 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subQueryExpr_in_subSelectGroupExpression8189 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXISTS_in_existsSubSelectExpression8211 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_subQueryExpr_in_existsSubSelectExpression8213 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_subQueryExpr8246 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_SELECT_in_subQueryExpr8252 = new BitSet(new long[]{0xB83841E817FD6420L,0x069C1C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x9006D01600080000L,0x0000000000000070L});
    public static final BitSet FOLLOW_DISTINCT_in_subQueryExpr8255 = new BitSet(new long[]{0xB83841E817FD6420L,0x069C1C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x9006D01600080000L,0x0000000000000070L});
    public static final BitSet FOLLOW_selectionList_in_subQueryExpr8258 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_FROM_in_subQueryExpr8265 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_subSelectFilterExpr_in_subQueryExpr8268 = new BitSet(new long[]{0x0000000000010000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_WHERE_in_subQueryExpr8276 = new BitSet(new long[]{0x803801E817FD6420L,0x069C1C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x9006C01600080000L,0x0000000000000070L});
    public static final BitSet FOLLOW_whereClause_in_subQueryExpr8279 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_RPAREN_in_subQueryExpr8288 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventFilterExpression_in_subSelectFilterExpr8312 = new BitSet(new long[]{0x0000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0000020200000000L});
    public static final BitSet FOLLOW_DOT_in_subSelectFilterExpr8317 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_viewExpression_in_subSelectFilterExpr8319 = new BitSet(new long[]{0x0000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0000020200000000L});
    public static final BitSet FOLLOW_DOT_in_subSelectFilterExpr8322 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_viewExpression_in_subSelectFilterExpr8324 = new BitSet(new long[]{0x0000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0000020200000000L});
    public static final BitSet FOLLOW_AS_in_subSelectFilterExpr8331 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_IDENT_in_subSelectFilterExpr8335 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000003L});
    public static final BitSet FOLLOW_IDENT_in_subSelectFilterExpr8341 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000003L});
    public static final BitSet FOLLOW_RETAINUNION_in_subSelectFilterExpr8348 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETAININTERSECTION_in_subSelectFilterExpr8352 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCURLY_in_arrayExpression8392 = new BitSet(new long[]{0x803801E817FD6420L,0x069C1C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x9006C01E00080000L,0x0000000000000070L});
    public static final BitSet FOLLOW_expression_in_arrayExpression8395 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008800000000L});
    public static final BitSet FOLLOW_COMMA_in_arrayExpression8398 = new BitSet(new long[]{0x803801E817FD6420L,0x069C1C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x9006C01600080000L,0x0000000000000070L});
    public static final BitSet FOLLOW_expression_in_arrayExpression8400 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008800000000L});
    public static final BitSet FOLLOW_RCURLY_in_arrayExpression8407 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SUM_in_builtinFunc8430 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc8433 = new BitSet(new long[]{0x8038C1E817FD6420L,0x069C1C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x9006C01600080000L,0x0000000000000070L});
    public static final BitSet FOLLOW_ALL_in_builtinFunc8437 = new BitSet(new long[]{0x803801E817FD6420L,0x069C1C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x9006C01600080000L,0x0000000000000070L});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc8442 = new BitSet(new long[]{0x803801E817FD6420L,0x069C1C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x9006C01600080000L,0x0000000000000070L});
    public static final BitSet FOLLOW_expression_in_builtinFunc8446 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc8448 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AVG_in_builtinFunc8454 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc8457 = new BitSet(new long[]{0x8038C1E817FD6420L,0x069C1C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x9006C01600080000L,0x0000000000000070L});
    public static final BitSet FOLLOW_ALL_in_builtinFunc8461 = new BitSet(new long[]{0x803801E817FD6420L,0x069C1C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x9006C01600080000L,0x0000000000000070L});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc8466 = new BitSet(new long[]{0x803801E817FD6420L,0x069C1C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x9006C01600080000L,0x0000000000000070L});
    public static final BitSet FOLLOW_expression_in_builtinFunc8470 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc8472 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COUNT_in_builtinFunc8478 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc8481 = new BitSet(new long[]{0x8038C1E817FD6420L,0x069C1C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x9006D01600080000L,0x0000000000000070L});
    public static final BitSet FOLLOW_ALL_in_builtinFunc8493 = new BitSet(new long[]{0x803801E817FD6420L,0x069C1C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x9006C01600080000L,0x0000000000000070L});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc8498 = new BitSet(new long[]{0x803801E817FD6420L,0x069C1C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x9006C01600080000L,0x0000000000000070L});
    public static final BitSet FOLLOW_expression_in_builtinFunc8502 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_STAR_in_builtinFunc8513 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc8524 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MEDIAN_in_builtinFunc8530 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc8533 = new BitSet(new long[]{0x8038C1E817FD6420L,0x069C1C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x9006C01600080000L,0x0000000000000070L});
    public static final BitSet FOLLOW_ALL_in_builtinFunc8537 = new BitSet(new long[]{0x803801E817FD6420L,0x069C1C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x9006C01600080000L,0x0000000000000070L});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc8542 = new BitSet(new long[]{0x803801E817FD6420L,0x069C1C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x9006C01600080000L,0x0000000000000070L});
    public static final BitSet FOLLOW_expression_in_builtinFunc8546 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc8548 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STDDEV_in_builtinFunc8554 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc8557 = new BitSet(new long[]{0x8038C1E817FD6420L,0x069C1C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x9006C01600080000L,0x0000000000000070L});
    public static final BitSet FOLLOW_ALL_in_builtinFunc8561 = new BitSet(new long[]{0x803801E817FD6420L,0x069C1C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x9006C01600080000L,0x0000000000000070L});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc8566 = new BitSet(new long[]{0x803801E817FD6420L,0x069C1C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x9006C01600080000L,0x0000000000000070L});
    public static final BitSet FOLLOW_expression_in_builtinFunc8570 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc8572 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AVEDEV_in_builtinFunc8578 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc8581 = new BitSet(new long[]{0x8038C1E817FD6420L,0x069C1C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x9006C01600080000L,0x0000000000000070L});
    public static final BitSet FOLLOW_ALL_in_builtinFunc8585 = new BitSet(new long[]{0x803801E817FD6420L,0x069C1C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x9006C01600080000L,0x0000000000000070L});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc8590 = new BitSet(new long[]{0x803801E817FD6420L,0x069C1C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x9006C01600080000L,0x0000000000000070L});
    public static final BitSet FOLLOW_expression_in_builtinFunc8594 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc8596 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_firstAggregation_in_builtinFunc8602 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastAggregation_in_builtinFunc8607 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_windowAggregation_in_builtinFunc8612 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COALESCE_in_builtinFunc8617 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc8620 = new BitSet(new long[]{0x803801E817FD6420L,0x069C1C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x9006C01600080000L,0x0000000000000070L});
    public static final BitSet FOLLOW_expression_in_builtinFunc8623 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc8625 = new BitSet(new long[]{0x803801E817FD6420L,0x069C1C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x9006C01600080000L,0x0000000000000070L});
    public static final BitSet FOLLOW_expression_in_builtinFunc8628 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000000A000000000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc8631 = new BitSet(new long[]{0x803801E817FD6420L,0x069C1C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x9006C01600080000L,0x0000000000000070L});
    public static final BitSet FOLLOW_expression_in_builtinFunc8634 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000000A000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc8638 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PREVIOUS_in_builtinFunc8644 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc8646 = new BitSet(new long[]{0x803801E817FD6420L,0x069C1C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x9006C01600080000L,0x0000000000000070L});
    public static final BitSet FOLLOW_expression_in_builtinFunc8648 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000000A000000000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc8651 = new BitSet(new long[]{0x803801E817FD6420L,0x069C1C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x9006C01600080000L,0x0000000000000070L});
    public static final BitSet FOLLOW_expression_in_builtinFunc8653 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc8657 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_DOT_in_builtinFunc8662 = new BitSet(new long[]{0x803801E807FD4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_builtinFunc8664 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_DOT_in_builtinFunc8669 = new BitSet(new long[]{0x803801E807FD4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_builtinFunc8671 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_PREVIOUSTAIL_in_builtinFunc8718 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc8720 = new BitSet(new long[]{0x803801E817FD6420L,0x069C1C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x9006C01600080000L,0x0000000000000070L});
    public static final BitSet FOLLOW_expression_in_builtinFunc8722 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000000A000000000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc8725 = new BitSet(new long[]{0x803801E817FD6420L,0x069C1C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x9006C01600080000L,0x0000000000000070L});
    public static final BitSet FOLLOW_expression_in_builtinFunc8727 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc8731 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_DOT_in_builtinFunc8736 = new BitSet(new long[]{0x803801E807FD4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_builtinFunc8738 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_DOT_in_builtinFunc8743 = new BitSet(new long[]{0x803801E807FD4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_builtinFunc8745 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_PREVIOUSCOUNT_in_builtinFunc8792 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc8795 = new BitSet(new long[]{0x803801E817FD6420L,0x069C1C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x9006C01600080000L,0x0000000000000070L});
    public static final BitSet FOLLOW_expression_in_builtinFunc8798 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc8800 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PREVIOUSWINDOW_in_builtinFunc8806 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc8808 = new BitSet(new long[]{0x803801E817FD6420L,0x069C1C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x9006C01600080000L,0x0000000000000070L});
    public static final BitSet FOLLOW_expression_in_builtinFunc8810 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc8812 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_DOT_in_builtinFunc8817 = new BitSet(new long[]{0x803801E807FD4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_builtinFunc8819 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_DOT_in_builtinFunc8824 = new BitSet(new long[]{0x803801E807FD4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_builtinFunc8826 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_PRIOR_in_builtinFunc8871 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc8874 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_NUM_INT_in_builtinFunc8877 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc8879 = new BitSet(new long[]{0x803801E807FC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_eventProperty_in_builtinFunc8882 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc8884 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSTANCEOF_in_builtinFunc8894 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc8897 = new BitSet(new long[]{0x803801E817FD6420L,0x069C1C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x9006C01600080000L,0x0000000000000070L});
    public static final BitSet FOLLOW_expression_in_builtinFunc8900 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc8902 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_classIdentifier_in_builtinFunc8905 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000000A000000000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc8908 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_classIdentifier_in_builtinFunc8911 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000000A000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc8915 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TYPEOF_in_builtinFunc8921 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc8924 = new BitSet(new long[]{0x803801E817FD6420L,0x069C1C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x9006C01600080000L,0x0000000000000070L});
    public static final BitSet FOLLOW_expression_in_builtinFunc8927 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc8929 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CAST_in_builtinFunc8935 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc8938 = new BitSet(new long[]{0x803801E817FD6420L,0x069C1C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x9006C01600080000L,0x0000000000000070L});
    public static final BitSet FOLLOW_expression_in_builtinFunc8941 = new BitSet(new long[]{0x0000000000020000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc8944 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_AS_in_builtinFunc8949 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_classIdentifier_in_builtinFunc8953 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc8955 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXISTS_in_builtinFunc8961 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc8964 = new BitSet(new long[]{0x803801E807FC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_eventProperty_in_builtinFunc8967 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc8969 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CURRENT_TIMESTAMP_in_builtinFunc8975 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc8979 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc8982 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FIRST_in_firstAggregation8997 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_LPAREN_in_firstAggregation8999 = new BitSet(new long[]{0x803801E817FD6420L,0x069C1C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x9006D01600080000L,0x0000000000000070L});
    public static final BitSet FOLLOW_accessAggExpr_in_firstAggregation9001 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000000A000000000L});
    public static final BitSet FOLLOW_COMMA_in_firstAggregation9004 = new BitSet(new long[]{0x803801E817FD6420L,0x069C1C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x9006C01600080000L,0x0000000000000070L});
    public static final BitSet FOLLOW_expression_in_firstAggregation9006 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_RPAREN_in_firstAggregation9010 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_DOT_in_firstAggregation9015 = new BitSet(new long[]{0x803801E807FD4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_firstAggregation9017 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_DOT_in_firstAggregation9022 = new BitSet(new long[]{0x803801E807FD4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_firstAggregation9024 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_LAST_in_lastAggregation9077 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_LPAREN_in_lastAggregation9079 = new BitSet(new long[]{0x803801E817FD6420L,0x069C1C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x9006D01600080000L,0x0000000000000070L});
    public static final BitSet FOLLOW_accessAggExpr_in_lastAggregation9081 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000000A000000000L});
    public static final BitSet FOLLOW_COMMA_in_lastAggregation9084 = new BitSet(new long[]{0x803801E817FD6420L,0x069C1C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x9006C01600080000L,0x0000000000000070L});
    public static final BitSet FOLLOW_expression_in_lastAggregation9086 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_RPAREN_in_lastAggregation9090 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_DOT_in_lastAggregation9095 = new BitSet(new long[]{0x803801E807FD4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_lastAggregation9097 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_DOT_in_lastAggregation9102 = new BitSet(new long[]{0x803801E807FD4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_lastAggregation9104 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_WINDOW_in_windowAggregation9158 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_LPAREN_in_windowAggregation9160 = new BitSet(new long[]{0x803801E817FD6420L,0x069C1C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x9006D01600080000L,0x0000000000000070L});
    public static final BitSet FOLLOW_accessAggExpr_in_windowAggregation9162 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_RPAREN_in_windowAggregation9164 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_DOT_in_windowAggregation9169 = new BitSet(new long[]{0x803801E807FD4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_windowAggregation9171 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_DOT_in_windowAggregation9176 = new BitSet(new long[]{0x803801E807FD4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_windowAggregation9178 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_STAR_in_accessAggExpr9233 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyStreamSelector_in_accessAggExpr9249 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_accessAggExpr9254 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MAX_in_maxFunc9267 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_MIN_in_maxFunc9272 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_LPAREN_in_maxFunc9276 = new BitSet(new long[]{0x803801E817FD6420L,0x069C1C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x9006C01600080000L,0x0000000000000070L});
    public static final BitSet FOLLOW_expression_in_maxFunc9279 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000000A000000000L});
    public static final BitSet FOLLOW_COMMA_in_maxFunc9282 = new BitSet(new long[]{0x803801E817FD6420L,0x069C1C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x9006C01600080000L,0x0000000000000070L});
    public static final BitSet FOLLOW_expression_in_maxFunc9285 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000000A000000000L});
    public static final BitSet FOLLOW_COMMA_in_maxFunc9288 = new BitSet(new long[]{0x803801E817FD6420L,0x069C1C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x9006C01600080000L,0x0000000000000070L});
    public static final BitSet FOLLOW_expression_in_maxFunc9291 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000000A000000000L});
    public static final BitSet FOLLOW_RPAREN_in_maxFunc9298 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventProperty_in_eventPropertyOrLibFunction9317 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_libFunction_in_eventPropertyOrLibFunction9322 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_libFunctionWithClass_in_libFunction9334 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_DOT_in_libFunction9337 = new BitSet(new long[]{0x803801E807FD4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_libFunction9339 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_classIdentifierNonGreedy_in_libFunctionWithClass9369 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_DOT_in_libFunctionWithClass9371 = new BitSet(new long[]{0x803801E807FD4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_funcIdent_in_libFunctionWithClass9375 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_LPAREN_in_libFunctionWithClass9377 = new BitSet(new long[]{0x8038C1E817FD6420L,0x069C1C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x9006C03600080000L,0x0000000000000070L});
    public static final BitSet FOLLOW_libFunctionArgs_in_libFunctionWithClass9380 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_RPAREN_in_libFunctionWithClass9384 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_funcIdent_in_libFunctionNoClass9413 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_LPAREN_in_libFunctionNoClass9415 = new BitSet(new long[]{0x8038C1E817FD6420L,0x069C1C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x9006C03600080000L,0x0000000000000070L});
    public static final BitSet FOLLOW_libFunctionArgs_in_libFunctionNoClass9418 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_RPAREN_in_libFunctionNoClass9422 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_escapableIdent_in_funcIdent9448 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MAX_in_funcIdent9455 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MIN_in_funcIdent9467 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHERE_in_funcIdent9479 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALL_in_libFunctionArgs9497 = new BitSet(new long[]{0x8038C1E817FD6420L,0x069C1C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x9006C01600080000L,0x0000000000000070L});
    public static final BitSet FOLLOW_DISTINCT_in_libFunctionArgs9502 = new BitSet(new long[]{0x8038C1E817FD6420L,0x069C1C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x9006C01600080000L,0x0000000000000070L});
    public static final BitSet FOLLOW_libFunctionArgItem_in_libFunctionArgs9506 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_COMMA_in_libFunctionArgs9509 = new BitSet(new long[]{0x8038C1E817FD6420L,0x069C1C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x9006C01600080000L,0x0000000000000070L});
    public static final BitSet FOLLOW_libFunctionArgItem_in_libFunctionArgs9512 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_expressionLambdaDecl_in_libFunctionArgItem9526 = new BitSet(new long[]{0x803801E817FD6420L,0x069C1C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x9006C01600080000L,0x0000000000000070L});
    public static final BitSet FOLLOW_expression_in_libFunctionArgItem9529 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_concatenationExpr_in_betweenList9540 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_AND_EXPR_in_betweenList9542 = new BitSet(new long[]{0x803801E807FD4420L,0x069C1C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x9006C01600080000L,0x0000000000000070L});
    public static final BitSet FOLLOW_concatenationExpr_in_betweenList9545 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_followedByExpression_in_patternExpression9573 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_orExpression_in_followedByExpression9592 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000003L});
    public static final BitSet FOLLOW_followedByRepeat_in_followedByExpression9595 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000003L});
    public static final BitSet FOLLOW_FOLLOWED_BY_in_followedByRepeat9648 = new BitSet(new long[]{0x000000000000E000L,0x0800000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000041200000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_FOLLOWMAX_BEGIN_in_followedByRepeat9655 = new BitSet(new long[]{0x803801E817FD6420L,0x069C1C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x9006C01600080000L,0x0000000000000070L});
    public static final BitSet FOLLOW_expression_in_followedByRepeat9657 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_FOLLOWMAX_END_in_followedByRepeat9659 = new BitSet(new long[]{0x000000000000E000L,0x0800000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000041200000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_orExpression_in_followedByRepeat9663 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_andExpression_in_orExpression9692 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_OR_EXPR_in_orExpression9697 = new BitSet(new long[]{0x000000000000E000L,0x0800000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000041200000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_andExpression_in_orExpression9699 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_matchUntilExpression_in_andExpression9731 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_AND_EXPR_in_andExpression9736 = new BitSet(new long[]{0x000000000000E000L,0x0800000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000041200000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_matchUntilExpression_in_andExpression9738 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_matchUntilRange_in_matchUntilExpression9773 = new BitSet(new long[]{0x000000000000E000L,0x0800000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000041200000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_qualifyExpression_in_matchUntilExpression9777 = new BitSet(new long[]{0x0000000000000002L,0x0000000000200000L});
    public static final BitSet FOLLOW_UNTIL_in_matchUntilExpression9782 = new BitSet(new long[]{0x000000000000E000L,0x0800000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000041200000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_qualifyExpression_in_matchUntilExpression9784 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EVERY_EXPR_in_qualifyExpression9849 = new BitSet(new long[]{0x000000000000E000L,0x0800000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000041200000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_NOT_EXPR_in_qualifyExpression9855 = new BitSet(new long[]{0x000000000000E000L,0x0800000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000041200000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_EVERY_DISTINCT_EXPR_in_qualifyExpression9861 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_distinctExpressionList_in_qualifyExpression9863 = new BitSet(new long[]{0x000000000000E000L,0x0800000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000041200000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_matchUntilRange_in_qualifyExpression9869 = new BitSet(new long[]{0x000000000000E000L,0x0800000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000041200000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_guardPostFix_in_qualifyExpression9878 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_distinctExpressionList9993 = new BitSet(new long[]{0x803801E817FD6420L,0x069C1C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x9006D41600080000L,0x0000000000000070L});
    public static final BitSet FOLLOW_distinctExpressionAtom_in_distinctExpressionList9995 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000000A000000000L});
    public static final BitSet FOLLOW_COMMA_in_distinctExpressionList9998 = new BitSet(new long[]{0x803801E817FD6420L,0x069C1C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x9006D41600080000L,0x0000000000000070L});
    public static final BitSet FOLLOW_distinctExpressionAtom_in_distinctExpressionList10000 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000000A000000000L});
    public static final BitSet FOLLOW_RPAREN_in_distinctExpressionList10004 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expressionWithTime_in_distinctExpressionAtom10027 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_atomicExpression_in_guardPostFix10042 = new BitSet(new long[]{0x0000000000010002L,0x0080000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_guardPostFix10048 = new BitSet(new long[]{0x000000000000E000L,0x0800000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000041200000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_patternExpression_in_guardPostFix10050 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_RPAREN_in_guardPostFix10052 = new BitSet(new long[]{0x0000000000010002L,0x0080000000000000L});
    public static final BitSet FOLLOW_WHERE_in_guardPostFix10059 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_guardWhereExpression_in_guardPostFix10061 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHILE_in_guardPostFix10069 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_guardWhileExpression_in_guardPostFix10071 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_observerExpression_in_atomicExpression10133 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_patternFilterExpression_in_atomicExpression10137 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_observerExpression10152 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_COLON_in_observerExpression10154 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_IDENT_in_observerExpression10159 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_AT_in_observerExpression10165 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_LPAREN_in_observerExpression10168 = new BitSet(new long[]{0x803801E817FD6420L,0x069C1C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x9006D43600080000L,0x0000000000000070L});
    public static final BitSet FOLLOW_expressionWithTimeList_in_observerExpression10170 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_RPAREN_in_observerExpression10173 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_guardWhereExpression10222 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_COLON_in_guardWhereExpression10224 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_IDENT_in_guardWhereExpression10227 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_LPAREN_in_guardWhereExpression10229 = new BitSet(new long[]{0x803801E817FD6420L,0x069C1C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x9006D43600080000L,0x0000000000000070L});
    public static final BitSet FOLLOW_expressionWithTimeList_in_guardWhereExpression10233 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_RPAREN_in_guardWhereExpression10237 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_guardWhileExpression10250 = new BitSet(new long[]{0x803801E817FD6420L,0x069C1C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x9006C01600080000L,0x0000000000000070L});
    public static final BitSet FOLLOW_expression_in_guardWhileExpression10253 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_RPAREN_in_guardWhileExpression10255 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACK_in_matchUntilRange10276 = new BitSet(new long[]{0x803801E817FD6420L,0x069C1C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x9007C01600080000L,0x0000000000000070L});
    public static final BitSet FOLLOW_expression_in_matchUntilRange10283 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001080000000000L});
    public static final BitSet FOLLOW_COLON_in_matchUntilRange10288 = new BitSet(new long[]{0x803801E817FD6420L,0x069C1C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x9006C81600080000L,0x0000000000000070L});
    public static final BitSet FOLLOW_expression_in_matchUntilRange10291 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_COLON_in_matchUntilRange10311 = new BitSet(new long[]{0x803801E817FD6420L,0x069C1C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x9006C01600080000L,0x0000000000000070L});
    public static final BitSet FOLLOW_expression_in_matchUntilRange10313 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_RBRACK_in_matchUntilRange10324 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_eventFilterExpression10411 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_EQUALS_in_eventFilterExpression10413 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_classIdentifier_in_eventFilterExpression10422 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000041000000000L});
    public static final BitSet FOLLOW_LPAREN_in_eventFilterExpression10433 = new BitSet(new long[]{0x803801E817FD6420L,0x069C1C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x9006C03600080000L,0x0000000000000070L});
    public static final BitSet FOLLOW_expressionList_in_eventFilterExpression10435 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_RPAREN_in_eventFilterExpression10438 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_propertyExpression_in_eventFilterExpression10450 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyExpressionAtomic_in_propertyExpression10495 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_propertyExpressionAtomic_in_propertyExpression10498 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_LBRACK_in_propertyExpressionAtomic10528 = new BitSet(new long[]{0x803801E80FFC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_SELECT_in_propertyExpressionAtomic10531 = new BitSet(new long[]{0x803801E817FD6420L,0x069C1C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x9006D01600080000L,0x0000000000000070L});
    public static final BitSet FOLLOW_propertySelectionList_in_propertyExpressionAtomic10533 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_FROM_in_propertyExpressionAtomic10535 = new BitSet(new long[]{0x803801E807FC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_eventProperty_in_propertyExpressionAtomic10539 = new BitSet(new long[]{0x0000000000030000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_AS_in_propertyExpressionAtomic10542 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_IDENT_in_propertyExpressionAtomic10544 = new BitSet(new long[]{0x0000000000010000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_WHERE_in_propertyExpressionAtomic10549 = new BitSet(new long[]{0x803801E817FD6420L,0x069C1C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x9006C01600080000L,0x0000000000000070L});
    public static final BitSet FOLLOW_expression_in_propertyExpressionAtomic10551 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_RBRACK_in_propertyExpressionAtomic10555 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertySelectionListElement_in_propertySelectionList10605 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_COMMA_in_propertySelectionList10608 = new BitSet(new long[]{0x803801E817FD6420L,0x069C1C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x9006D01600080000L,0x0000000000000070L});
    public static final BitSet FOLLOW_propertySelectionListElement_in_propertySelectionList10611 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_STAR_in_propertySelectionListElement10637 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyStreamSelector_in_propertySelectionListElement10653 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_propertySelectionListElement10658 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_AS_in_propertySelectionListElement10661 = new BitSet(new long[]{0x803801E807FC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_propertySelectionListElement10665 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_propertyStreamSelector10709 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_DOT_in_propertyStreamSelector10711 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_STAR_in_propertyStreamSelector10713 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_AS_in_propertyStreamSelector10716 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_IDENT_in_propertyStreamSelector10720 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_patternFilterExpression10767 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_EQUALS_in_patternFilterExpression10769 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_classIdentifier_in_patternFilterExpression10778 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000041000000000L});
    public static final BitSet FOLLOW_LPAREN_in_patternFilterExpression10789 = new BitSet(new long[]{0x803801E817FD6420L,0x069C1C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x9006C03600080000L,0x0000000000000070L});
    public static final BitSet FOLLOW_expressionList_in_patternFilterExpression10791 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_RPAREN_in_patternFilterExpression10794 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_propertyExpression_in_patternFilterExpression10806 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_escapableStr_in_classIdentifier10861 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_DOT_in_classIdentifier10880 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_escapableStr_in_classIdentifier10884 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_escapableStr_in_classIdentifierNonGreedy10929 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_DOT_in_classIdentifierNonGreedy10964 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_escapableStr_in_classIdentifierNonGreedy10968 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_expression_in_expressionList11010 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_COMMA_in_expressionList11013 = new BitSet(new long[]{0x803801E817FD6420L,0x069C1C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x9006C01600080000L,0x0000000000000070L});
    public static final BitSet FOLLOW_expression_in_expressionList11016 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_expressionWithTime_in_expressionWithTimeList11044 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_COMMA_in_expressionWithTimeList11047 = new BitSet(new long[]{0x803801E817FD6420L,0x069C1C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x9006D41600080000L,0x0000000000000070L});
    public static final BitSet FOLLOW_expressionWithTime_in_expressionWithTimeList11050 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_lastOperand_in_expressionWithTime11076 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastWeekdayOperand_in_expressionWithTime11087 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_timePeriod_in_expressionWithTime11098 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expressionQualifyable_in_expressionWithTime11109 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rangeOperand_in_expressionWithTime11120 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_frequencyOperand_in_expressionWithTime11132 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastOperator_in_expressionWithTime11143 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_weekDayOperator_in_expressionWithTime11155 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numericParameterList_in_expressionWithTime11167 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberSetStar_in_expressionWithTime11172 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_expressionQualifyable11183 = new BitSet(new long[]{0x0600000000000002L,0x0000007000000000L});
    public static final BitSet FOLLOW_ASC_in_expressionQualifyable11188 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DESC_in_expressionQualifyable11192 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_SECONDS_in_expressionQualifyable11196 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_SECOND_in_expressionQualifyable11200 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_SEC_in_expressionQualifyable11204 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_numberSetStar11261 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LW_in_lastWeekdayOperand11281 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LAST_in_lastOperand11294 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_frequencyOperand11306 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_DIV_in_frequencyOperand11308 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x9000C00200080000L,0x0000000000000060L});
    public static final BitSet FOLLOW_number_in_frequencyOperand11311 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_frequencyOperand11315 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_substitution_in_frequencyOperand11317 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_rangeOperand11366 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_IDENT_in_rangeOperand11370 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_substitution_in_rangeOperand11372 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_COLON_in_rangeOperand11375 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x9000C00200080000L,0x0000000000000060L});
    public static final BitSet FOLLOW_number_in_rangeOperand11378 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_rangeOperand11382 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_substitution_in_rangeOperand11384 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_lastOperator11498 = new BitSet(new long[]{0x0020000000000000L});
    public static final BitSet FOLLOW_IDENT_in_lastOperator11502 = new BitSet(new long[]{0x0020000000000000L});
    public static final BitSet FOLLOW_substitution_in_lastOperator11504 = new BitSet(new long[]{0x0020000000000000L});
    public static final BitSet FOLLOW_LAST_in_lastOperator11507 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_weekDayOperator11555 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_IDENT_in_weekDayOperator11559 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_substitution_in_weekDayOperator11561 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_WEEKDAY_in_weekDayOperator11564 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACK_in_numericParameterList11611 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x9000D00200080000L,0x0000000000000060L});
    public static final BitSet FOLLOW_numericListParameter_in_numericParameterList11613 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000088000000000L});
    public static final BitSet FOLLOW_COMMA_in_numericParameterList11616 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x9000D00200080000L,0x0000000000000060L});
    public static final BitSet FOLLOW_numericListParameter_in_numericParameterList11618 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000088000000000L});
    public static final BitSet FOLLOW_RBRACK_in_numericParameterList11622 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rangeOperand_in_numericListParameter11644 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_frequencyOperand_in_numericListParameter11650 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberconstant_in_numericListParameter11655 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventPropertyAtomic_in_eventProperty11671 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_DOT_in_eventProperty11674 = new BitSet(new long[]{0x803801E807FC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_eventPropertyAtomic_in_eventProperty11676 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_eventPropertyIdent_in_eventPropertyAtomic11702 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000841000000000L});
    public static final BitSet FOLLOW_LBRACK_in_eventPropertyAtomic11711 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_NUM_INT_in_eventPropertyAtomic11715 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_RBRACK_in_eventPropertyAtomic11717 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_QUESTION_in_eventPropertyAtomic11722 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_eventPropertyAtomic11736 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0006000000000000L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_eventPropertyAtomic11741 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_QUOTED_STRING_LITERAL_in_eventPropertyAtomic11747 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_RPAREN_in_eventPropertyAtomic11750 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_QUESTION_in_eventPropertyAtomic11755 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUESTION_in_eventPropertyAtomic11769 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_eventPropertyIdent11892 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_ESCAPECHAR_in_eventPropertyIdent11904 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_DOT_in_eventPropertyIdent11906 = new BitSet(new long[]{0x803801E807FC4422L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L,0x0000000000000018L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_eventPropertyIdent11910 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_IDENT_in_keywordAllowedIdent11949 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TICKED_STRING_LITERAL_in_keywordAllowedIdent11958 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AT_in_keywordAllowedIdent11965 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COUNT_in_keywordAllowedIdent11972 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ESCAPE_in_keywordAllowedIdent11979 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EVERY_EXPR_in_keywordAllowedIdent11990 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SUM_in_keywordAllowedIdent11997 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AVG_in_keywordAllowedIdent12004 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MAX_in_keywordAllowedIdent12011 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MIN_in_keywordAllowedIdent12018 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COALESCE_in_keywordAllowedIdent12025 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MEDIAN_in_keywordAllowedIdent12032 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STDDEV_in_keywordAllowedIdent12039 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AVEDEV_in_keywordAllowedIdent12046 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EVENTS_in_keywordAllowedIdent12053 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FIRST_in_keywordAllowedIdent12060 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LAST_in_keywordAllowedIdent12067 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHILE_in_keywordAllowedIdent12074 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MERGE_in_keywordAllowedIdent12081 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MATCHED_in_keywordAllowedIdent12088 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNIDIRECTIONAL_in_keywordAllowedIdent12095 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETAINUNION_in_keywordAllowedIdent12102 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETAININTERSECTION_in_keywordAllowedIdent12109 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNTIL_in_keywordAllowedIdent12116 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PATTERN_in_keywordAllowedIdent12123 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL_in_keywordAllowedIdent12130 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_METADATASQL_in_keywordAllowedIdent12137 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PREVIOUS_in_keywordAllowedIdent12144 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PREVIOUSTAIL_in_keywordAllowedIdent12151 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRIOR_in_keywordAllowedIdent12158 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WEEKDAY_in_keywordAllowedIdent12165 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LW_in_keywordAllowedIdent12172 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSTANCEOF_in_keywordAllowedIdent12179 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TYPEOF_in_keywordAllowedIdent12186 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CAST_in_keywordAllowedIdent12193 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SNAPSHOT_in_keywordAllowedIdent12200 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VARIABLE_in_keywordAllowedIdent12207 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INDEX_in_keywordAllowedIdent12216 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WINDOW_in_keywordAllowedIdent12225 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_in_keywordAllowedIdent12232 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RIGHT_in_keywordAllowedIdent12239 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OUTER_in_keywordAllowedIdent12246 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FULL_in_keywordAllowedIdent12253 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_JOIN_in_keywordAllowedIdent12260 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFINE_in_keywordAllowedIdent12267 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PARTITION_in_keywordAllowedIdent12274 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MATCHES_in_keywordAllowedIdent12281 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_escapableStr12302 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TICKED_STRING_LITERAL_in_escapableStr12311 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_escapableIdent12325 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TICKED_STRING_LITERAL_in_escapableIdent12333 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_yearPart_in_timePeriod12358 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x9000C00200080000L,0x0000000000000060L});
    public static final BitSet FOLLOW_monthPart_in_timePeriod12360 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x9000C00200080000L,0x0000000000000060L});
    public static final BitSet FOLLOW_weekPart_in_timePeriod12363 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x9000C00200080000L,0x0000000000000060L});
    public static final BitSet FOLLOW_dayPart_in_timePeriod12366 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x9000C00200080000L,0x0000000000000060L});
    public static final BitSet FOLLOW_hourPart_in_timePeriod12369 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x9000C00200080000L,0x0000000000000060L});
    public static final BitSet FOLLOW_minutePart_in_timePeriod12372 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x9000C00200080000L,0x0000000000000060L});
    public static final BitSet FOLLOW_secondPart_in_timePeriod12375 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x9000C00200080000L,0x0000000000000060L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod12378 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_monthPart_in_timePeriod12384 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x9000C00200080000L,0x0000000000000060L});
    public static final BitSet FOLLOW_weekPart_in_timePeriod12386 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x9000C00200080000L,0x0000000000000060L});
    public static final BitSet FOLLOW_dayPart_in_timePeriod12389 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x9000C00200080000L,0x0000000000000060L});
    public static final BitSet FOLLOW_hourPart_in_timePeriod12392 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x9000C00200080000L,0x0000000000000060L});
    public static final BitSet FOLLOW_minutePart_in_timePeriod12395 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x9000C00200080000L,0x0000000000000060L});
    public static final BitSet FOLLOW_secondPart_in_timePeriod12398 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x9000C00200080000L,0x0000000000000060L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod12401 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_weekPart_in_timePeriod12407 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x9000C00200080000L,0x0000000000000060L});
    public static final BitSet FOLLOW_dayPart_in_timePeriod12409 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x9000C00200080000L,0x0000000000000060L});
    public static final BitSet FOLLOW_hourPart_in_timePeriod12412 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x9000C00200080000L,0x0000000000000060L});
    public static final BitSet FOLLOW_minutePart_in_timePeriod12415 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x9000C00200080000L,0x0000000000000060L});
    public static final BitSet FOLLOW_secondPart_in_timePeriod12418 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x9000C00200080000L,0x0000000000000060L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod12421 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dayPart_in_timePeriod12427 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x9000C00200080000L,0x0000000000000060L});
    public static final BitSet FOLLOW_hourPart_in_timePeriod12429 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x9000C00200080000L,0x0000000000000060L});
    public static final BitSet FOLLOW_minutePart_in_timePeriod12432 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x9000C00200080000L,0x0000000000000060L});
    public static final BitSet FOLLOW_secondPart_in_timePeriod12435 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x9000C00200080000L,0x0000000000000060L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod12438 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_hourPart_in_timePeriod12444 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x9000C00200080000L,0x0000000000000060L});
    public static final BitSet FOLLOW_minutePart_in_timePeriod12446 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x9000C00200080000L,0x0000000000000060L});
    public static final BitSet FOLLOW_secondPart_in_timePeriod12449 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x9000C00200080000L,0x0000000000000060L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod12452 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_minutePart_in_timePeriod12458 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x9000C00200080000L,0x0000000000000060L});
    public static final BitSet FOLLOW_secondPart_in_timePeriod12460 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x9000C00200080000L,0x0000000000000060L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod12463 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_secondPart_in_timePeriod12469 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x9000C00200080000L,0x0000000000000060L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod12471 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod12477 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_yearPart12524 = new BitSet(new long[]{0x0000000000000000L,0x0000000003000000L});
    public static final BitSet FOLLOW_IDENT_in_yearPart12528 = new BitSet(new long[]{0x0000000000000000L,0x0000000003000000L});
    public static final BitSet FOLLOW_substitution_in_yearPart12530 = new BitSet(new long[]{0x0000000000000000L,0x0000000003000000L});
    public static final BitSet FOLLOW_TIMEPERIOD_YEARS_in_yearPart12534 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_YEAR_in_yearPart12538 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_monthPart12586 = new BitSet(new long[]{0x0000000000000000L,0x000000000C000000L});
    public static final BitSet FOLLOW_IDENT_in_monthPart12590 = new BitSet(new long[]{0x0000000000000000L,0x000000000C000000L});
    public static final BitSet FOLLOW_substitution_in_monthPart12592 = new BitSet(new long[]{0x0000000000000000L,0x000000000C000000L});
    public static final BitSet FOLLOW_TIMEPERIOD_MONTHS_in_monthPart12596 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_MONTH_in_monthPart12600 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_weekPart12648 = new BitSet(new long[]{0x0000000000000000L,0x0000000030000000L});
    public static final BitSet FOLLOW_IDENT_in_weekPart12652 = new BitSet(new long[]{0x0000000000000000L,0x0000000030000000L});
    public static final BitSet FOLLOW_substitution_in_weekPart12654 = new BitSet(new long[]{0x0000000000000000L,0x0000000030000000L});
    public static final BitSet FOLLOW_TIMEPERIOD_WEEKS_in_weekPart12658 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_WEEK_in_weekPart12662 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_dayPart12710 = new BitSet(new long[]{0x0000000000000000L,0x00000000C0000000L});
    public static final BitSet FOLLOW_IDENT_in_dayPart12714 = new BitSet(new long[]{0x0000000000000000L,0x00000000C0000000L});
    public static final BitSet FOLLOW_substitution_in_dayPart12716 = new BitSet(new long[]{0x0000000000000000L,0x00000000C0000000L});
    public static final BitSet FOLLOW_TIMEPERIOD_DAYS_in_dayPart12720 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_DAY_in_dayPart12724 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_hourPart12773 = new BitSet(new long[]{0x0000000000000000L,0x0000000300000000L});
    public static final BitSet FOLLOW_IDENT_in_hourPart12777 = new BitSet(new long[]{0x0000000000000000L,0x0000000300000000L});
    public static final BitSet FOLLOW_substitution_in_hourPart12779 = new BitSet(new long[]{0x0000000000000000L,0x0000000300000000L});
    public static final BitSet FOLLOW_TIMEPERIOD_HOURS_in_hourPart12783 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_HOUR_in_hourPart12787 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_minutePart12836 = new BitSet(new long[]{0x0000000000200000L,0x0000000C00000000L});
    public static final BitSet FOLLOW_IDENT_in_minutePart12840 = new BitSet(new long[]{0x0000000000200000L,0x0000000C00000000L});
    public static final BitSet FOLLOW_substitution_in_minutePart12842 = new BitSet(new long[]{0x0000000000200000L,0x0000000C00000000L});
    public static final BitSet FOLLOW_TIMEPERIOD_MINUTES_in_minutePart12846 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_MINUTE_in_minutePart12850 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MIN_in_minutePart12854 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_secondPart12904 = new BitSet(new long[]{0x0000000000000000L,0x0000007000000000L});
    public static final BitSet FOLLOW_IDENT_in_secondPart12908 = new BitSet(new long[]{0x0000000000000000L,0x0000007000000000L});
    public static final BitSet FOLLOW_substitution_in_secondPart12910 = new BitSet(new long[]{0x0000000000000000L,0x0000007000000000L});
    public static final BitSet FOLLOW_TIMEPERIOD_SECONDS_in_secondPart12914 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_SECOND_in_secondPart12918 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_SEC_in_secondPart12922 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_millisecondPart12972 = new BitSet(new long[]{0x0000000000000000L,0x0000038000000000L});
    public static final BitSet FOLLOW_IDENT_in_millisecondPart12976 = new BitSet(new long[]{0x0000000000000000L,0x0000038000000000L});
    public static final BitSet FOLLOW_substitution_in_millisecondPart12978 = new BitSet(new long[]{0x0000000000000000L,0x0000038000000000L});
    public static final BitSet FOLLOW_TIMEPERIOD_MILLISECONDS_in_millisecondPart12982 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_MILLISECOND_in_millisecondPart12986 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_MILLISEC_in_millisecondPart12990 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUM_INT_in_number13045 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUM_LONG_in_number13062 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUM_FLOAT_in_number13079 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUM_DOUBLE_in_number13096 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUESTION_in_substitution13117 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberconstant_in_constant13136 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stringconstant_in_constant13143 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BOOLEAN_TRUE_in_constant13156 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BOOLEAN_FALSE_in_constant13176 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VALUE_NULL_in_constant13196 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUS_in_numberconstant13218 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x9000400000080000L,0x0000000000000060L});
    public static final BitSet FOLLOW_PLUS_in_numberconstant13224 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x9000400000080000L,0x0000000000000060L});
    public static final BitSet FOLLOW_number_in_numberconstant13228 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_stringconstant13257 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUOTED_STRING_LITERAL_in_stringconstant13273 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_streamSelector_in_synpred1_EsperEPL2Grammar4818 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_timePeriod_in_synpred2_EsperEPL2Grammar6218 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_builtinFunc_in_synpred3_EsperEPL2Grammar8082 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyStreamSelector_in_synpred4_EsperEPL2Grammar9244 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventProperty_in_synpred5_EsperEPL2Grammar9312 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyStreamSelector_in_synpred6_EsperEPL2Grammar10648 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastOperand_in_synpred7_EsperEPL2Grammar11071 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastWeekdayOperand_in_synpred8_EsperEPL2Grammar11082 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_timePeriod_in_synpred9_EsperEPL2Grammar11093 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expressionQualifyable_in_synpred10_EsperEPL2Grammar11104 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rangeOperand_in_synpred11_EsperEPL2Grammar11115 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_frequencyOperand_in_synpred12_EsperEPL2Grammar11127 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastOperator_in_synpred13_EsperEPL2Grammar11138 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_weekDayOperator_in_synpred14_EsperEPL2Grammar11149 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numericParameterList_in_synpred15_EsperEPL2Grammar11162 = new BitSet(new long[]{0x0000000000000002L});
}
